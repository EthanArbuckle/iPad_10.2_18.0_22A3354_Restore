void sub_1011607D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1011607FC(uint64_t a1, int a2, int a3)
{
  ++*(_DWORD *)(a1 + 1564);
  *(_DWORD *)(a1 + 1568) += a2;
  return sub_10115BDA8(a3, a1 + 1576, 1);
}

uint64_t sub_101160824@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD v21[10];
  char v22;
  uint64_t v23;

  sub_100263E50((uint64_t)v19);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    v7 = 0;
    do
    {
      if (v7)
        sub_100263F7C(&v20, (uint64_t)",", 1);
      v8 = v20;
      *(_DWORD *)((char *)v21 + *(_QWORD *)(v20 - 24)) |= 4u;
      *(_QWORD *)((char *)&v21[1] + *(_QWORD *)(v8 - 24)) = 0;
      v9 = *((char *)v5 + 55);
      if (v9 >= 0)
        v10 = (uint64_t)(v5 + 4);
      else
        v10 = v5[4];
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v5 + 55);
      else
        v11 = v5[5];
      v12 = sub_100263F7C(&v20, v10, v11);
      v13 = sub_100263F7C(v12, (uint64_t)",", 1);
      std::ostream::operator<<(v13, *((unsigned int *)v5 + 14));
      v14 = (_QWORD *)v5[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v5[2];
          v16 = *v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v16);
      }
      ++v7;
      v5 = v15;
    }
    while (v15 != v4);
  }
  std::stringbuf::str(a2, v21);
  *(_QWORD *)((char *)v19
  v20 = v17;
  if (v22 < 0)
    operator delete((void *)v21[8]);
  std::streambuf::~streambuf(v21);
  return std::ios::~ios(&v23);
}

void sub_1011609AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011609C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  double v6;
  _QWORD *v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  sub_100263E50((uint64_t)v16);
  v4 = v17;
  *(_DWORD *)((char *)v18 + *(_QWORD *)(v17 - 24)) |= 4u;
  *(_QWORD *)((char *)&v18[1] + *(_QWORD *)(v4 - 24)) = 0;
  std::ostream::operator<<(&v17, *(unsigned int *)(a1 + 16));
  v5 = sub_100263F7C(&v17, (uint64_t)",avg,", 5);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 16) = 2;
  if (*(_DWORD *)(a1 + 16))
    v6 = *(double *)(a1 + 24);
  else
    v6 = 0.0;
  std::ostream::operator<<(v5, v6);
  v7 = sub_100263F7C(&v17, (uint64_t)",rms,", 5);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 16) = 2;
  if (*(_DWORD *)(a1 + 16))
    v8 = sqrt(*(double *)(a1 + 40));
  else
    v8 = 0.0;
  std::ostream::operator<<(v7, v8);
  v9 = sub_100263F7C(&v17, (uint64_t)",max,", 5);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 16) = 2;
  std::ostream::operator<<(v9, *(double *)a1);
  v10 = sub_100263F7C(&v17, (uint64_t)",min,", 5);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 16) = 2;
  std::ostream::operator<<(v10, *(double *)(a1 + 8));
  v11 = sub_100263F7C(&v17, (uint64_t)",std,", 5);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 2;
  v12 = *(_DWORD *)(a1 + 16);
  v13 = -1.0;
  if (v12 >= 2)
    v13 = sqrt(*(double *)(a1 + 32) / (double)(v12 - 1));
  std::ostream::operator<<(v11, v13);
  std::stringbuf::str(a2, v18);
  *(_QWORD *)((char *)v16
  v17 = v14;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v18);
  return std::ios::~ios(&v20);
}

void sub_101160BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101160C08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  sub_100263E50((uint64_t)v16);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    v7 = 0;
    do
    {
      if (v7)
        sub_100263F7C(&v17, (uint64_t)",", 1);
      v8 = v17;
      *(_DWORD *)((char *)v18 + *(_QWORD *)(v17 - 24)) |= 4u;
      *(_QWORD *)((char *)&v18[1] + *(_QWORD *)(v8 - 24)) = 0;
      v9 = (_QWORD *)std::ostream::operator<<(&v17, *((unsigned int *)v5 + 7));
      v10 = sub_100263F7C(v9, (uint64_t)",", 1);
      std::ostream::operator<<(v10, *((unsigned int *)v5 + 8));
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v5[2];
          v13 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      ++v7;
      v5 = v12;
    }
    while (v12 != v4);
  }
  std::stringbuf::str(a2, v18);
  *(_QWORD *)((char *)v16
  v17 = v14;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v18);
  return std::ios::~ios(&v20);
}

void sub_101160D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101160D94@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  sub_100263E50((uint64_t)v16);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    v7 = 0;
    do
    {
      if (v7)
        sub_100263F7C(&v17, (uint64_t)",", 1);
      v8 = v17;
      *(_DWORD *)((char *)v18 + *(_QWORD *)(v17 - 24)) |= 4u;
      *(_QWORD *)((char *)&v18[1] + *(_QWORD *)(v8 - 24)) = 0;
      v9 = (_QWORD *)std::ostream::operator<<(&v17, *((unsigned int *)v5 + 7));
      v10 = sub_100263F7C(v9, (uint64_t)",", 1);
      std::ostream::operator<<(v10, *((unsigned int *)v5 + 8));
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v5[2];
          v13 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      ++v7;
      v5 = v12;
    }
    while (v12 != v4);
  }
  std::stringbuf::str(a2, v18);
  *(_QWORD *)((char *)v16
  v17 = v14;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v18);
  return std::ios::~ios(&v20);
}

void sub_101160F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101160F20(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t sub_101160F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 39) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 63) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  v8 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 87) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  v10 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v12 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 135) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v14 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v14);
  v15 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)v14 = v15;
  *(_BYTE *)(a2 + 159) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  v16 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*v16);
  v17 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a2 + 183) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v18 = *(_OWORD *)(a2 + 264);
  v19 = *(_OWORD *)(a2 + 248);
  v20 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v20;
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 264) = v18;
  v21 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v21;
  v22 = *(_OWORD *)(a2 + 280);
  v23 = *(_OWORD *)(a2 + 296);
  v24 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
  *(_OWORD *)(a1 + 296) = v23;
  *(_OWORD *)(a1 + 312) = v24;
  *(_OWORD *)(a1 + 280) = v22;
  sub_10002E40C(a1 + 344, (_QWORD *)(a2 + 344));
  sub_10002E40C(a1 + 368, (_QWORD *)(a2 + 368));
  sub_10002E40C(a1 + 392, (_QWORD *)(a2 + 392));
  sub_10002E40C(a1 + 416, (_QWORD *)(a2 + 416));
  v25 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v25;
  v26 = *(_OWORD *)(a2 + 472);
  v27 = *(_OWORD *)(a2 + 488);
  v28 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v28;
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  sub_10002E40C(a1 + 536, (_QWORD *)(a2 + 536));
  sub_10002E40C(a1 + 560, (_QWORD *)(a2 + 560));
  sub_10002E40C(a1 + 584, (_QWORD *)(a2 + 584));
  v29 = *(_OWORD *)(a2 + 608);
  v30 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v30;
  *(_OWORD *)(a1 + 608) = v29;
  sub_10002E40C(a1 + 656, (_QWORD *)(a2 + 656));
  sub_10002E40C(a1 + 680, (_QWORD *)(a2 + 680));
  sub_10002E40C(a1 + 704, (_QWORD *)(a2 + 704));
  v31 = *(_OWORD *)(a2 + 728);
  v32 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v32;
  *(_OWORD *)(a1 + 728) = v31;
  sub_10002E40C(a1 + 776, (_QWORD *)(a2 + 776));
  sub_10002E40C(a1 + 800, (_QWORD *)(a2 + 800));
  sub_10002E40C(a1 + 824, (_QWORD *)(a2 + 824));
  v33 = *(_OWORD *)(a2 + 848);
  v34 = *(_OWORD *)(a2 + 864);
  v35 = *(_OWORD *)(a2 + 880);
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 864) = v34;
  *(_OWORD *)(a1 + 880) = v35;
  *(_OWORD *)(a1 + 848) = v33;
  sub_10002E40C(a1 + 904, (_QWORD *)(a2 + 904));
  sub_10002E40C(a1 + 928, (_QWORD *)(a2 + 928));
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 952);
  v36 = *(_OWORD *)(a2 + 968);
  v37 = *(_OWORD *)(a2 + 984);
  v38 = *(_OWORD *)(a2 + 1000);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_OWORD *)(a1 + 984) = v37;
  *(_OWORD *)(a1 + 1000) = v38;
  *(_OWORD *)(a1 + 968) = v36;
  sub_10002E40C(a1 + 1024, (_QWORD *)(a2 + 1024));
  v39 = *(_OWORD *)(a2 + 1048);
  v40 = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1064) = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1080) = v40;
  *(_OWORD *)(a1 + 1048) = v39;
  v41 = *(_OWORD *)(a2 + 1096);
  v42 = *(_OWORD *)(a2 + 1112);
  v43 = *(_OWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1112) = v42;
  *(_OWORD *)(a1 + 1128) = v43;
  *(_OWORD *)(a1 + 1096) = v41;
  sub_10002E40C(a1 + 1152, (_QWORD *)(a2 + 1152));
  v44 = *(_OWORD *)(a2 + 1176);
  v45 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v45;
  *(_OWORD *)(a1 + 1176) = v44;
  v46 = *(_OWORD *)(a2 + 1224);
  v47 = *(_OWORD *)(a2 + 1240);
  v48 = *(_OWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1240) = v47;
  *(_OWORD *)(a1 + 1256) = v48;
  *(_OWORD *)(a1 + 1224) = v46;
  sub_10002E40C(a1 + 1280, (_QWORD *)(a2 + 1280));
  v49 = *(_OWORD *)(a2 + 1304);
  v50 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1336) = v50;
  *(_OWORD *)(a1 + 1304) = v49;
  v51 = *(_OWORD *)(a2 + 1352);
  v52 = *(_OWORD *)(a2 + 1368);
  v53 = *(_OWORD *)(a2 + 1384);
  *(_DWORD *)(a1 + 1400) = *(_DWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1368) = v52;
  *(_OWORD *)(a1 + 1384) = v53;
  *(_OWORD *)(a1 + 1352) = v51;
  sub_10002E40C(a1 + 1408, (_QWORD *)(a2 + 1408));
  sub_10002E40C(a1 + 1432, (_QWORD *)(a2 + 1432));
  sub_1011613A0(a1 + 1456, (_QWORD *)(a2 + 1456));
  v54 = *(_QWORD *)(a2 + 1480);
  *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a2 + 1488);
  *(_QWORD *)(a1 + 1480) = v54;
  sub_10002E40C(a1 + 1496, (_QWORD *)(a2 + 1496));
  v55 = *(_QWORD *)(a2 + 1520);
  *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a2 + 1528);
  *(_QWORD *)(a1 + 1520) = v55;
  sub_10002E40C(a1 + 1536, (_QWORD *)(a2 + 1536));
  sub_10002E40C(a1 + 1560, (_QWORD *)(a2 + 1560));
  sub_10002E40C(a1 + 1584, (_QWORD *)(a2 + 1584));
  v56 = *(_OWORD *)(a2 + 1608);
  *(_DWORD *)(a1 + 1624) = *(_DWORD *)(a2 + 1624);
  *(_OWORD *)(a1 + 1608) = v56;
  sub_1011613A0(a1 + 1632, (_QWORD *)(a2 + 1632));
  return a1;
}

void sub_1011613A0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_100090AE4(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t *sub_101161408(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1011614C4(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *sub_10116157C(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  void *v18;
  void *v19;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v10;
      v11 = *((_OWORD *)v8 - 4);
      v12 = *((_OWORD *)v8 - 3);
      v13 = *((_OWORD *)v8 - 2);
      v7 = (void *)(v9 - 96);
      *(_OWORD *)(v9 - 20) = *(_OWORD *)(v8 - 20);
      *(_OWORD *)(v9 - 48) = v12;
      *(_OWORD *)(v9 - 32) = v13;
      *(_OWORD *)(v9 - 64) = v11;
      v8 -= 96;
      v9 -= 96;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v14 = a1[1];
  v15 = *(_QWORD *)(a2 + 16);
  v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v16 - 4);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v15 + v16;
  v17 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v17;
  v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v18;
  v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

id *sub_101161670(id *a1)
{
  sub_1011616A0((uint64_t)a1);

  return a1;
}

uint64_t sub_1011616A0(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t result;
  _QWORD v5[6];
  _QWORD v6[6];

  sub_10022E580(a1);
  v2 = mach_absolute_time();
  v3 = sub_100127828(v2 - *(_QWORD *)(a1 + 8));
  v6[0] = *(_QWORD *)a1;
  v5[0] = CFSTR("client");
  v5[1] = CFSTR("inForegroundPercent");
  v6[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 24) / v3 / 0.05) * 0.05);
  v5[2] = CFSTR("desiredAccuracy");
  v6[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v5[3] = CFSTR("duration");
  v6[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v3 / 10.0) * 10.0);
  v5[4] = CFSTR("durationForeground");
  v6[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 24) / 10.0) * 10.0);
  v5[5] = CFSTR("durationBackground");
  v6[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 32) / 10.0) * 10.0);
  result = AnalyticsSendEvent(CFSTR("com.apple.locationd.CLLocationSubscription.session_duration"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 6));
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_101161828(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 128))
    sub_1006AA544();
  return a1 + 128;
}

void sub_1011618AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLLocationSubscription::onWifiServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3888);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3888);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_101161A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101161A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (***v15)();
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t (**v29)();
  _QWORD v30[2];
  uint64_t (***v31)();
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;

  v32[0] = off_1021A3938;
  v32[1] = sub_1001B96EC;
  v32[2] = 0;
  v33 = v32;
  sub_1015A2E04(v34, "kCLConnectionMessagePausesLocationUpdatesAutomatically");
  sub_100BB3BB0((uint64_t)&v35, (uint64_t)v32);
  v29 = off_1021A39C8;
  v30[0] = sub_1001A5D2C;
  v30[1] = 0;
  v31 = &v29;
  sub_1015A2E04(v36, "kCLConnectionMessageLocation");
  sub_100BB3BB0((uint64_t)&v37, (uint64_t)&v29);
  v27[0] = off_1021A3938;
  v27[1] = sub_101162010;
  v27[2] = 0;
  v28 = v27;
  sub_1015A2E04(v38, "kCLConnectionMessageBatch");
  sub_100BB3BB0((uint64_t)&v39, (uint64_t)v27);
  v25[0] = off_1021A3938;
  v25[1] = sub_101162F80;
  v25[2] = 0;
  v26 = v25;
  sub_1015A2E04(v40, "kCLConnectionMessageAllowsBackgroundLocationUpdates");
  sub_100BB3BB0((uint64_t)&v41, (uint64_t)v25);
  v23[0] = off_1021A3938;
  v23[1] = sub_101163294;
  v23[2] = 0;
  v24 = v23;
  sub_1015A2E04(v42, "kCLConnectionMessageShowsBackgroundLocationIndicator");
  sub_100BB3BB0((uint64_t)&v43, (uint64_t)v23);
  v21[0] = off_1021A3938;
  v21[1] = sub_101163584;
  v21[2] = 0;
  v22 = v21;
  sub_1015A2E04(v44, "kCLConnectionMessageAllowsMapCorrection");
  sub_100BB3BB0((uint64_t)&v45, (uint64_t)v21);
  v19[0] = off_1021A3938;
  v19[1] = sub_10000C12C;
  v19[2] = 0;
  v20 = v19;
  sub_1015A2E04(v46, "kCLConnectionMessageActivityType");
  sub_100BB3BB0((uint64_t)&v47, (uint64_t)v19);
  sub_101167CD0(a1, (unsigned __int8 *)v34, 7);
  v2 = 49;
  do
  {
    v3 = (_QWORD *)v34[v2 - 1];
    if (&v32[v2] == v3)
    {
      v3 = &v32[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v31)[v2]) < 0)
      operator delete((void *)v30[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v20;
  if (v20 == v19)
  {
    v6 = 4;
    v5 = v19;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v20)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v22;
  if (v22 == v21)
  {
    v8 = 4;
    v7 = v21;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v22)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v24;
  if (v24 == v23)
  {
    v10 = 4;
    v9 = v23;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v24)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v26;
  if (v26 == v25)
  {
    v12 = 4;
    v11 = v25;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v26)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v28;
  if (v28 == v27)
  {
    v14 = 4;
    v13 = v27;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v28)
  {
    v14 = 5;
    goto LABEL_34;
  }
  v15 = v31;
  if (v31 == &v29)
  {
    v16 = 4;
    v15 = &v29;
LABEL_39:
    (*v15)[v16]();
  }
  else if (v31)
  {
    v16 = 5;
    goto LABEL_39;
  }
  result = v33;
  if (v33 == v32)
  {
    v18 = 4;
    result = v32;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
  }
  else if (v33)
  {
    v18 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
  }
  return result;
}

void sub_101161E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36,char a37)
{
  uint64_t i;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  for (i = 336; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a37 + i));
  v39 = a12;
  if (a12 == &a9)
  {
    v40 = 4;
    v39 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_8:
  v41 = a16;
  if (a16 == &a13)
  {
    v42 = 4;
    v41 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_13:
  v43 = a20;
  if (a20 == &a17)
  {
    v44 = 4;
    v43 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_18:
  v45 = a24;
  if (a24 == &a21)
  {
    v46 = 4;
    v45 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_23;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_23:
  v47 = a28;
  if (a28 == &a25)
  {
    v48 = 4;
    v47 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_28;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_28:
  v49 = a32;
  if (a32 == &a29)
  {
    v50 = 4;
    v49 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_33;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_33:
  v51 = a36;
  if (a36 == &a33)
  {
    v52 = 4;
    v51 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_38;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_38:
  _Unwind_Resume(a1);
}

void sub_101161FF4()
{
  JUMPOUT(0x101161F64);
}

void sub_101162000()
{
  JUMPOUT(0x101161F94);
}

void sub_101162010(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  double Current;
  int v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  NSObject *v32;
  double v33;
  NSObject *v34;
  NSObject *v35;
  double v36;
  double v37;
  double v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  double v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  double v51;
  double v52;
  BOOL v53;
  int v54;
  const char *v55;
  __int16 v56;
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  double v63;
  __int16 v64;
  uint64_t v65;
  uint8_t buf[4];
  _BYTE v67[28];
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  double v71;
  __int16 v72;
  uint64_t v73;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Current = CFAbsoluteTimeGetCurrent();
  v53 = 0;
  v51 = -1.0;
  v52 = -1.0;
  v6 = *(unsigned __int8 *)(a1 + 241);
  if (*(_BYTE *)(a1 + 241))
  {
    sub_101165350(a1);
    sub_1011655AC(a1, 15);
  }
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBatchAllowedKey"));
  if (!v7 || (sub_1001E4B1C(v7, &v53) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v67 = "kCLConnectionMessageBatchAllowedKey";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_32;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v54 = 136446210;
    v55 = "kCLConnectionMessageBatchAllowedKey";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v54, 12);
    v28 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v44);
    goto LABEL_108;
  }
  if (v53)
  {
    sub_100197040();
    if ((sub_100195F08() & 1) == 0)
    {
      if (v6)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
        v24 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)v67 = 0;
          *(_WORD *)&v67[4] = 2082;
          *(_QWORD *)&v67[6] = "";
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we batching if this wasn't supported?\"}", buf, 0x12u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
        }
        v25 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)v67 = 0;
          *(_WORD *)&v67[4] = 2082;
          *(_QWORD *)&v67[6] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we batching if this wasn't supported?", "{\"msg%{public}.0s\":\"BATCH: How were we batching if this wasn't supported?\"}", buf, 0x12u);
        }
      }
      sub_101164218(a1, 1);
      v17 = 11;
      goto LABEL_47;
    }
    v8 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBatchDistanceKey"));
    if (v8 && (sub_1001FDC34(v8, &v52) & 1) != 0)
    {
      v9 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBatchTimeoutKey"));
      if (v9 && (sub_1001FDC34(v9, &v51) & 1) != 0)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v10 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
        {
          v11 = *(_QWORD *)(a1 + 248);
          v12 = *(_QWORD *)(a1 + 256);
          v13 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 134219266;
          *(double *)v67 = v52;
          *(_WORD *)&v67[8] = 2048;
          *(double *)&v67[10] = v51;
          *(_WORD *)&v67[18] = 2048;
          *(_QWORD *)&v67[20] = v11;
          v68 = 2048;
          v69 = v12;
          v70 = 2048;
          v71 = Current;
          v72 = 2112;
          v73 = v13;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %@", buf, 0x3Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
          v46 = *(_QWORD *)(a1 + 248);
          v47 = *(_QWORD *)(a1 + 256);
          v48 = *(_QWORD *)(a1 + 24);
          v54 = 134219266;
          v55 = *(const char **)&v52;
          v56 = 2048;
          v57 = v51;
          v58 = 2048;
          v59 = v46;
          v60 = 2048;
          v61 = v47;
          v62 = 2048;
          v63 = Current;
          v64 = 2112;
          v65 = v48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %@", &v54, 62);
          v50 = (uint8_t *)v49;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
        v14 = *(_DWORD *)(a1 + 196);
        if (v14 < 0)
        {
          if (v6)
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
            v31 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)v67 = 0;
              *(_WORD *)&v67[4] = 2082;
              *(_QWORD *)&v67[6] = "";
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we not updating location?\"}", buf, 0x12u);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
            }
            v32 = qword_1022A01C8;
            if (os_signpost_enabled((os_log_t)qword_1022A01C8))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)v67 = 0;
              *(_WORD *)&v67[4] = 2082;
              *(_QWORD *)&v67[6] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we not updating location?", "{\"msg%{public}.0s\":\"BATCH: How were we not updating location?\"}", buf, 0x12u);
            }
          }
          sub_101164218(a1, 1);
          v17 = 12;
          goto LABEL_47;
        }
        if (v14)
        {
          if (v6)
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
            v15 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)v67 = 0;
              *(_WORD *)&v67[4] = 2082;
              *(_QWORD *)&v67[6] = "";
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we batching accuracy was too low?\"}", buf, 0x12u);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
            }
            v16 = qword_1022A01C8;
            if (os_signpost_enabled((os_log_t)qword_1022A01C8))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)v67 = 0;
              *(_WORD *)&v67[4] = 2082;
              *(_QWORD *)&v67[6] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we batching accuracy was too low?", "{\"msg%{public}.0s\":\"BATCH: How were we batching accuracy was too low?\"}", buf, 0x12u);
            }
          }
          sub_101164218(a1, 1);
          v17 = 13;
LABEL_47:
          sub_1011655AC(a1, v17);
          goto LABEL_32;
        }
        if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")))
        {
          objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")), "doubleValue");
          if (v33 > 0.0)
          {
            if (v6)
            {
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
              v34 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289026;
                *(_DWORD *)v67 = 0;
                *(_WORD *)&v67[4] = 2082;
                *(_QWORD *)&v67[6] = "";
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we batching if a distance filter was on?\"}", buf, 0x12u);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
              }
              v35 = qword_1022A01C8;
              if (os_signpost_enabled((os_log_t)qword_1022A01C8))
              {
                *(_DWORD *)buf = 68289026;
                *(_DWORD *)v67 = 0;
                *(_WORD *)&v67[4] = 2082;
                *(_QWORD *)&v67[6] = "";
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we batching if a distance filter was on?", "{\"msg%{public}.0s\":\"BATCH: How were we batching if a distance filter was on?\"}", buf, 0x12u);
              }
            }
            sub_101164218(a1, 1);
            v17 = 14;
            goto LABEL_47;
          }
        }
        v36 = v52;
        if (v52 <= 0.0 || (v37 = v51, v51 <= 0.0))
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
          v41 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)v67 = 0;
            *(_WORD *)&v67[4] = 2082;
            *(_QWORD *)&v67[6] = "";
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: distance or timeout was <= 0 (techincally exit criteria has already been satisfied.)\"}", buf, 0x12u);
          }
          sub_101164218(a1, 1);
          v17 = 0xFFFFFFFFLL;
          goto LABEL_47;
        }
        v38 = *(double *)(a1 + 248);
        if (v52 != 1.79769313e308 && (v38 < 0.0 || *(double *)(a1 + 256) + 7.0 < Current))
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
          v39 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)v67 = 0;
            *(_WORD *)&v67[4] = 2082;
            *(_QWORD *)&v67[6] = "";
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Notice Location uncertainty too high to allow deferred updates now\"}", buf, 0x12u);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
          }
          v40 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)v67 = 0;
            *(_WORD *)&v67[4] = 2082;
            *(_QWORD *)&v67[6] = "";
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning BATCH: odometer is not running, we have no way to know what distance is relative to\"}", buf, 0x12u);
          }
          sub_101164218(a1, 1);
          v17 = 11;
          goto LABEL_47;
        }
        v42 = v52 + v38;
        v43 = Current + v51;
        *(double *)(a1 + 264) = v42;
        *(double *)(a1 + 272) = Current + v37;
        if (v36 >= 100.0 && v37 >= 30.0)
        {
          sub_101164CA8(a1, v42, v43);
          goto LABEL_32;
        }
        sub_101164218(a1, 1);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v45 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)v67 = 0;
          *(_WORD *)&v67[4] = 2082;
          *(_QWORD *)&v67[6] = "";
          v21 = "{\"msg%{public}.0s\":\"BATCH: scheduled batch exit but not off-boarding\"}";
          v22 = v45;
          v23 = 18;
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v29 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v67 = "kCLConnectionMessageBatchTimeoutKey";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_32;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v54 = 136446210;
      v55 = "kCLConnectionMessageBatchTimeoutKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v54, 12);
      v28 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v30);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v26 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v67 = "kCLConnectionMessageBatchDistanceKey";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_32;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v54 = 136446210;
      v55 = "kCLConnectionMessageBatchDistanceKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v54, 12);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
    }
LABEL_108:
    if (v28 != buf)
      free(v28);
    goto LABEL_32;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v67 = 0;
    *(_WORD *)&v67[4] = 2082;
    *(_QWORD *)&v67[6] = "";
    *(_WORD *)&v67[14] = 2114;
    *(_QWORD *)&v67[16] = v20;
    v21 = "{\"msg%{public}.0s\":\"BATCH: client disallowed Batch\", \"Client\":%{public, location:escape_only}@}";
    v22 = v19;
    v23 = 28;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
  }
LABEL_32:

}

void sub_101162F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101162F80(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t buf[4];
  _BYTE v16[14];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  HIBYTE(v12) = 0;
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageAllowsBackgroundLocationUpdatesKey"));
  if (v5 && (sub_1001E4B1C(v5, (BOOL *)&v12 + 7) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 90) != HIBYTE(v12))
    {
      *(_BYTE *)(a1 + 90) = HIBYTE(v12);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(unsigned __int8 *)(a1 + 90);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)v16 = 0;
        *(_WORD *)&v16[4] = 2082;
        *(_QWORD *)&v16[6] = "";
        v17 = 2114;
        v18 = v7;
        v19 = 1026;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client is setting ContinuousBackgroundLocationRequested\", \"Client\":%{public, location:escape_only}@, \"ContinuousBackgroundLocationRequested\":%{public}d}", buf, 0x22u);
      }
      sub_1001B3C4C(a1);
      if (*(_BYTE *)(a1 + 90))
        sub_1001B4478(a1, 0);
      else
        sub_101164924(a1, 0);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v16 = "kCLConnectionMessageAllowsBackgroundLocationUpdatesKey";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v13 = 136446210;
      v14 = "kCLConnectionMessageAllowsBackgroundLocationUpdatesKey";
      LODWORD(v12) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageAllowsBackgroundLocationUpdates(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }

}

void sub_101163264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101163294(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t buf[4];
  _BYTE v16[14];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  HIBYTE(v12) = 0;
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageShowsBackgroundLocationIndicatorKey"));
  if (v5 && (sub_1001E4B1C(v5, (BOOL *)&v12 + 7) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 91) != HIBYTE(v12))
    {
      *(_BYTE *)(a1 + 91) = HIBYTE(v12);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(unsigned __int8 *)(a1 + 91);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)v16 = 0;
        *(_WORD *)&v16[4] = 2082;
        *(_QWORD *)&v16[6] = "";
        v17 = 2114;
        v18 = v7;
        v19 = 1026;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client is setting ContinuousBackgroundLocationIndicatorForAlwaysEnabled\", \"Client\":%{public, location:escape_only}@, \"ContinuousBackgroundLocationIndicatorForAlwaysEnabled\":%{public}d}", buf, 0x22u);
      }
      sub_1001B40C8(a1);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v16 = "kCLConnectionMessageShowsBackgroundLocationIndicatorKey";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v13 = 136446210;
      v14 = "kCLConnectionMessageShowsBackgroundLocationIndicatorKey";
      LODWORD(v12) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageShowsBackgroundLocationIndicator(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }

}

void sub_101163554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101163584(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  char *v11;
  id v12;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  const char *v23;
  int v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;
  _BYTE buf[12];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 12) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ with CorrectiveCompensation enabled attempting allowsMapCorrection.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v9 = *(const char **)(a1 + 24);
      v29 = 138412290;
      v30 = v9;
      LODWORD(v28) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "%@ with CorrectiveCompensation enabled attempting allowsMapCorrection.", &v29, v28);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      goto LABEL_47;
    }
    goto LABEL_32;
  }
  if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")), "doubleValue");
    v6 = v5;
  }
  else
  {
    v6 = -1.0;
  }
  HIBYTE(v28) = 1;
  v12 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageAllowsMapCorrectionKey"));
  if (v12 && (sub_1001E4B1C(v12, (BOOL *)&v28 + 7) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 193) == HIBYTE(v28))
      goto LABEL_32;
    *(_BYTE *)(a1 + 193) = HIBYTE(v28);
    sub_1015A2E04(buf, "kCLConnectionMessageLocation");
    if (sub_100FFB214(a1))
    {
      v14 = v6 < 100.0 && (*(unsigned __int8 *)(a1 + 194) | *(unsigned __int8 *)(a1 + 193)) != 0;
      if (SHIBYTE(v43) < 0)
        operator delete(*(void **)buf);
      if (v14)
      {
        v15 = sub_1001B17F0(a1);
        objc_msgSend(*(id *)(*(_QWORD *)v15 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v15 + 8), 17, 0);
        v16 = 1;
        goto LABEL_36;
      }
    }
    else if (SHIBYTE(v43) < 0)
    {
      operator delete(*(void **)buf);
    }
    v18 = sub_1001B17F0(a1);
    objc_msgSend(*(id *)(*(_QWORD *)v18 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v18 + 8), 17);
    v16 = 0;
LABEL_36:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v19 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_QWORD *)(a1 + 24);
      v21 = *(_DWORD *)(a1 + 44);
      v22 = *(unsigned __int8 *)(a1 + 193);
      *(_DWORD *)buf = 138413314;
      *(_QWORD *)&buf[4] = v20;
      v40 = 1024;
      v41 = v21;
      v42 = 1024;
      v43 = v22;
      v44 = 2048;
      v45 = v6;
      v46 = 1024;
      v47 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMM,Client,'%@',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d", buf, 0x28u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v23 = *(const char **)(a1 + 24);
      v24 = *(_DWORD *)(a1 + 44);
      v25 = *(unsigned __int8 *)(a1 + 193);
      v29 = 138413314;
      v30 = v23;
      v31 = 1024;
      v32 = v24;
      v33 = 1024;
      v34 = v25;
      v35 = 2048;
      v36 = v6;
      v37 = 1024;
      v38 = v16;
      LODWORD(v28) = 40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "CLMM,Client,'%@',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d", &v29, v28);
      v11 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
LABEL_47:
      if (v11 != buf)
        free(v11);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
  v17 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "kCLConnectionMessageAllowsMapCorrectionKey";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v29 = 136446210;
    v30 = "kCLConnectionMessageAllowsMapCorrectionKey";
    LODWORD(v28) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v29, v28);
    v11 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
    goto LABEL_47;
  }
LABEL_32:

}

void sub_101163B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_101163BE0(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  if ((objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 12) & 1) != 0)
  {
    v4 = *(_DWORD *)(a1 + 232);
    if (v4 == 5)
      v5 = 29;
    else
      v5 = 28;
    v6 = v4 < 3 || v4 == 4;
    v7 = v6;
    if (v6)
      v8 = 48;
    else
      v8 = v5;
    if (a2 < 3 || a2 == 4)
    {
      v10 = 48;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      if (a2 == 5)
        v10 = 29;
      else
        v10 = 28;
    }
    if ((_DWORD)v10 != (_DWORD)v8)
    {
      if ((v7 & 1) == 0)
      {
        v15 = sub_1001B17F0(a1);
        objc_msgSend(*(id *)(*(_QWORD *)v15 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v15 + 8), v8);
      }
      if ((v9 & 1) == 0)
      {
        v16 = sub_1001B17F0(a1);
        objc_msgSend(*(id *)(*(_QWORD *)v16 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v16 + 8), v10, 0);
      }
    }
    *(_DWORD *)(a1 + 232) = a2;
    if (*(double *)(a1 + 208) != 1.79769313e308)
    {
      v17 = (a2 == 4 || a2 == 2) && (objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 5) & 1) != 0;
      sub_1001B4C00(a1, v17);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%@ with CorrectiveCompensation enabled attempting setActivityType", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v13 = *(_QWORD *)(a1 + 24);
      v18 = 138412290;
      v19 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "%@ with CorrectiveCompensation enabled attempting setActivityType", &v18, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::setActivityType(CLClientActivityType)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
}

uint64_t sub_101163ECC(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return qword_101C43258[a1];
}

void sub_101163EF4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 24);
    v14 = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v3;
    v20 = 2050;
    v21 = sub_1003471BC(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopLocation_nl\", \"Client\":%{public, location:escape_only}@, \"DC\":\"%{public}p\"}", (uint8_t *)&v14, 0x26u);
  }
  if (*(_BYTE *)(a1 + 241))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 24);
      v14 = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stop because stopping location for\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
    sub_1011655AC(a1, 12);
  }
  sub_100FFB31C(a1);
  sub_1001B527C(a1, 0xFFFFFFFFLL);
  *(_QWORD *)(a1 + 208) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 196) = -1;
  sub_1001B17A8(a1, 2);
  sub_1001B17A8(a1, 1);
  sub_1001B17A8(a1, 4);
  sub_1001B17A8(a1, 39);
  sub_1001B17A8(a1, 5);
  sub_1001B17A8(a1, 0);
  sub_1001B17A8(a1, 9);
  v6 = sub_1001B17F0(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v6 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v6 + 8), 8);
  v7 = sub_1001B17F0(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v7 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v7 + 8), 17);
  v8 = sub_1001B17F0(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v8 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v8 + 8), 22);
  v9 = sub_1001B17F0(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v9 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v9 + 8), 34);
  v10 = sub_1001B17F0(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v10 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v10 + 8), 35);
  v11 = sub_1001B51F8(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v11 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v11 + 8), 12);
  sub_1001B3C4C(a1);
  sub_1001B3B88(a1);
  v13 = *(_DWORD *)(a1 + 184);
  v12 = *(_DWORD *)(a1 + 188);
  if (v13 >= 5)
  {
    if (v12 == 1)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v12 == 2 || v13 == 2 && v12 == 3)
LABEL_17:
    sub_101164790(a1);
LABEL_18:

  *(_QWORD *)(a1 + 216) = 0;
  sub_100090A50(a1 + 520);
  sub_101164924(a1, 1);
}

uint64_t sub_101164218(uint64_t result, int a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  if ((*(_BYTE *)(result + 241) != 0) != a2)
  {
    v2 = result;
    *(_BYTE *)(result + 241) = a2;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(v2 + 24);
      v5 = *(unsigned __int8 *)(v2 + 241);
      v6[0] = 68289538;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2114;
      v10 = v4;
      v11 = 1026;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: setBatching\", \"Client\":%{public, location:escape_only}@, \"isBatching\":%{public}d}", (uint8_t *)v6, 0x22u);
    }
    return sub_100FFB234(v2);
  }
  return result;
}

void sub_101164330(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  void *__p;
  char v14;

  v4 = *(_BYTE *)(a1 + 241);
  v5 = *(_QWORD *)(a1 + 112);
  if (!sub_100FFB2C8(a1, 4))
    goto LABEL_9;
  sub_1015A2E04(&__p, "kCLConnectionMessageLocation");
  v6 = sub_100FFB214(a1);
  v7 = v6;
  if ((v14 & 0x80000000) == 0)
  {
    if ((v6 & 1) != 0)
      goto LABEL_4;
LABEL_9:
    v11 = 0;
    v12 = 0;
    goto LABEL_10;
  }
  operator delete(__p);
  if ((v7 & 1) == 0)
    goto LABEL_9;
LABEL_4:
  objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")), "doubleValue");
  v9 = v8;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")), "doubleValue");
  if (fabs(v9 + -2147483650.0) >= 2.22044605e-16
    && fabs(v9 + -2147483650.0) >= 2.22044605e-16
    && fabs(v9 + -2147483640.0) >= 2.22044605e-16)
  {
    v12 = 0;
    v11 = 1;
    goto LABEL_11;
  }
  v11 = 0;
  v12 = 1;
LABEL_10:
  v9 = INFINITY;
  v10 = 0x7FF0000000000000;
LABEL_11:
  *(_BYTE *)a2 = v11;
  *(double *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = v4;
  *(_BYTE *)(a2 + 29) = v12;
  *(_BYTE *)(a2 + 30) = v5 != 0;
  *(_BYTE *)(a2 + 32) = 1;
}

void sub_10116449C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id *sub_1011644B8(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101161670(result);
    operator delete();
  }
  return result;
}

void sub_1011644F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 160);
  if (!v2)
    sub_100F9B5A4();
  objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), 0, 0, v5);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 68289282;
    v6 = 2082;
    v7 = "";
    v8 = 2114;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client registered for autopause notifications\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v5, 0x1Cu);
  }
}

void sub_101164790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 0);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 24);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v4;
      v5 = "{\"msg%{public}.0s\":\"PAUSE: Client unregistered for autopause notifications\", \"Client\":%{public, locatio"
           "n:escape_only}@}";
      v6 = v3;
      v7 = OS_LOG_TYPE_DEBUG;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v10, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v9;
      v5 = "{\"msg%{public}.0s\":\"#Warning PAUSE: Unregistering for autopause notification when client does not exist\","
           " \"Client\":%{public, location:escape_only}@}";
      v6 = v8;
      v7 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_10;
    }
  }
  *(_BYTE *)(a1 + 240) = 0;
}

void sub_101164924(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  id v18;
  _QWORD v19[6];
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;

  *(_DWORD *)(a1 + 120) &= ~(_DWORD)a2;
  if (!objc_opt_class(RBSAssertion, a2))
    return;
  if (!*(_QWORD *)(a1 + 112))
    goto LABEL_18;
  if (*(_DWORD *)(a1 + 120) == 3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v3 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 68289538;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2114;
    v26 = v4;
    v27 = 1026;
    v28 = v5;
    v6 = "{\"msg%{public}.0s\":\"Client is performing batch location, allowing idle sleep.\", \"Client\":%{public, locati"
         "on:escape_only}@, \"pid\":%{public}u}";
    goto LABEL_17;
  }
  if ((*(_DWORD *)(a1 + 120) & 3) != 2)
    goto LABEL_13;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 68289538;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2114;
    v26 = v8;
    v27 = 1026;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is performing batch without location.\", \"Client\":%{public, location:escape_only}@, \"pid\":%{public}u}", buf, 0x22u);
LABEL_13:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
  }
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 68289538;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2114;
    v26 = v10;
    v27 = 1026;
    v28 = v11;
    v6 = "{\"msg%{public}.0s\":\"Client is not performing batch location, preventing task suspend.\", \"Client\":%{public"
         ", location:escape_only}@, \"pid\":%{public}u}";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, v6, buf, 0x22u);
LABEL_18:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
  }
LABEL_20:
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(unsigned int *)(a1 + 120);
    v14 = *(unsigned __int8 *)(a1 + 89);
    if (*(_BYTE *)(a1 + 89))
      v14 = *(unsigned __int8 *)(a1 + 90);
    *(_DWORD *)buf = 68289538;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2050;
    v26 = v13;
    v27 = 1026;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"release process assertion\", \"fProcessAssertionReason\":%{public, location:CLClientProcessAssertionReasons}lld, \"backgroundLocationDesired\":%{public}hhd}", buf, 0x22u);
  }
  if (!*(_DWORD *)(a1 + 120) || !*(_BYTE *)(a1 + 89) || !*(_BYTE *)(a1 + 90))
  {
    v15 = *(_QWORD *)(a1 + 112);
    v16 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 112) = 0;
    v17 = *(_DWORD *)(a1 + 44);
    v18 = objc_msgSend(*(id *)(a1 + 8), "silo");
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10116659C;
    v19[3] = &unk_10217CC78;
    v20 = v17;
    v19[4] = v15;
    v19[5] = v16;
    objc_msgSend(v18, "afterInterval:async:", v19, 1.0);
  }
}

void sub_101164CA8(uint64_t a1, double a2, double a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  CLOdometerAlarm *v11;
  uint64_t v12;
  CLOdometerAlarm *v13;
  NSObject *v14;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  _QWORD v24[6];
  int v25;
  double v26;
  _BYTE buf[18];
  __int16 v28;
  uint64_t v29;

  if (*(_BYTE *)(a1 + 241) || *(_QWORD *)(a1 + 280) || *(_QWORD *)(a1 + 288))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: startBatching called but we're already batching\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    }
    v7 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: startBatching called but we're already batching", "{\"msg%{public}.0s\":\"BATCH: startBatching called but we're already batching\"}", buf, 0x12u);
    }
    sub_101165350(a1);
    sub_1011655AC(a1, 15);
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v8 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v28 = 2114;
    v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: starting client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (a2 == 1.79769313e308)
    goto LABEL_23;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BATCH: scheduling odometer alarm for %.1f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v25 = 134217984;
    v26 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "BATCH: scheduling odometer alarm for %.1f", COERCE_DOUBLE(&v25));
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v11 = [CLOdometerAlarm alloc];
  v12 = *(_QWORD *)(a1 + 8);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10116585C;
  v24[3] = &unk_1021A3708;
  v24[4] = a1;
  *(double *)&v24[5] = a2;
  v13 = -[CLOdometerAlarm initWithDistance:inUniverse:handler:](v11, "initWithDistance:inUniverse:handler:", v12, v24, a2);
  *(_QWORD *)(a1 + 280) = v13;
  if (v13)
  {
LABEL_23:
    if (a3 != 1.79769313e308)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v14 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BATCH: scheduling timer for %.1f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v25 = 134217984;
        v26 = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "BATCH: scheduling timer for %.1f", COERCE_DOUBLE(&v25));
        v23 = (char *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("BatchAlarm.%@"), objc_msgSend(*(id *)(a1 + 24), "description"));
      operator new();
    }
    sub_1001B4478(a1, 2);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)buf = _Q0;
    *(_WORD *)&buf[16] = 0;
    v29 = 0;
    sub_101161828(a1);
    sub_1001B3AF0();
  }
  sub_101164218(a1, 1);
  sub_1011655AC(a1, 11);
}

void sub_101165300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  operator delete();
}

id sub_101165350(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 241))
  {
LABEL_9:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    goto LABEL_11;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v9 = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: stopBatching called but we're not batching\"}", (uint8_t *)&v9, 0x12u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  }
  v3 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v9 = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: stopBatching called but we're not batching", "{\"msg%{public}.0s\":\"BATCH: stopBatching called but we're not batching\"}", (uint8_t *)&v9, 0x12u);
    goto LABEL_9;
  }
LABEL_11:
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stopping client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 280), "invalidate");

  *(_QWORD *)(a1 + 280) = 0;
  v6 = *(_QWORD *)(a1 + 288);
  if (v6)
  {
    sub_10016E3C4(v6);
    sub_100346F9C((_QWORD *)(a1 + 288));
  }
  sub_101164924(a1, 2);
  v7 = sub_101161828(a1);
  return objc_msgSend(*(id *)(*(_QWORD *)v7 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v7 + 8), 15);
}

void sub_1011655AC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  const __CFString *v8;
  NSNumber *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 241))
  {
    sub_101164218(a1, 0);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v12 = 2082;
      v13 = "";
      v14 = 1026;
      v15 = a2;
      v16 = 2114;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: Sending didFinishDeferredUpdatesWithError message to client\", \"error\":%{public}d, \"Client\":%{public, location:escape_only}@}", buf, 0x22u);
    }
    v8 = CFSTR("kCLConnectionMessageErrorKey");
    v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    sub_1011664F4(a1, buf);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "BATCH: Not batching but tried to finish with error %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v10[0] = 67240192;
      v10[1] = a2;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "BATCH: Not batching but tried to finish with error %{public}d", v10, 8);
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::sendBatchDidFinish(int)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

id sub_10116585C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  _QWORD v9[8];

  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(*(id *)(v6 + 8), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1011658E0;
  v9[3] = &unk_1021A36E8;
  v9[5] = a3;
  v9[6] = v6;
  v9[4] = a2;
  v9[7] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v7, "async:", v9);
}

void sub_1011658E0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  id v22;
  __int16 v23;
  id v24;
  uint8_t buf[4];
  _BYTE v26[24];

  v2 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v2 + 280))
  {
    sub_101165350(*(_QWORD *)(a1 + 48));
    if (*(_QWORD *)(a1 + 40))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v11 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "description"), "UTF8String");
        v13 = *(_QWORD *)(v2 + 24);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v26 = v12;
        *(_WORD *)&v26[8] = 2114;
        *(_QWORD *)&v26[10] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "BATCH: Odometer errored (%{public}s) for client (%{public}@)", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v16 = qword_1022A01C8;
        v17 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "description"), "UTF8String");
        v18 = *(void **)(v2 + 24);
        v21 = 136446466;
        v22 = v17;
        v23 = 2114;
        v24 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 17, "BATCH: Odometer errored (%{public}s) for client (%{public}@)", &v21, 22);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      sub_1011655AC(v2, (uint64_t)objc_msgSend(*(id *)(a1 + 40), "code"));
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v14 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_QWORD *)(v2 + 24);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)v26 = 0;
        *(_WORD *)&v26[4] = 2082;
        *(_QWORD *)&v26[6] = "";
        *(_WORD *)&v26[14] = 2114;
        *(_QWORD *)&v26[16] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: Odometer criterion met, waiting for location event to notify client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 56);
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "description"), "UTF8String");
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)v26 = v4;
      *(_WORD *)&v26[8] = 2080;
      *(_QWORD *)&v26[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "BATCH: Odometer fired (%.1f,%s) but no longer relevant to us", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v6 = qword_1022A01C8;
      v7 = *(void **)(a1 + 56);
      v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "description"), "UTF8String");
      v21 = 134218242;
      v22 = v7;
      v23 = 2080;
      v24 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "BATCH: Odometer fired (%.1f,%s) but no longer relevant to us", COERCE_DOUBLE(&v21), 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_101165D10(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  sub_1011680B0(&v2, a2);
}

void sub_101165D80(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLLocationSubscription::onBatchTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3888);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onBatchTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3888);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onBatchTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1011677E4(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_101165F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101165F50(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL8 v8;
  NSDate *v10;
  NSDateComponents *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  _BYTE buf[28];
  __int16 v46;
  uint64_t v47;

  if ((_DWORD)a2)
    v4 = "didPause";
  else
    v4 = "willResume";
  v5 = *(_DWORD *)(a1 + 188);
  if (v5 == 2)
  {
    v8 = 1;
  }
  else
  {
    if (v5 == 1)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v4;
        v46 = 2114;
        v47 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: AutoPause is overridden to off, reject message to client\", \"msg\":%{public, location:escape_only}s, \"Client\":%{public, location:escape_only}@}", buf, 0x26u);
      }
      return;
    }
    v8 = v5 == 3 && *(_DWORD *)(a1 + 184) == 2;
  }
  if (*(_BYTE *)(a1 + 192))
  {
    v10 = +[NSDate date](NSDate, "date");
    v11 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 252, v10);
    if (sub_10051247C())
    {
      v34 = *(_QWORD *)(a1 + 24);
      v33 = -[NSDateComponents hour](v11, "hour");
      v19 = -[NSDateComponents minute](v11, "minute");
      v20 = -[NSDateComponents second](v11, "second");
      v21 = -[NSDateComponents month](v11, "month");
      v22 = -[NSDateComponents day](v11, "day");
      v23 = -[NSDateComponents year](v11, "year");
      -[NSDate timeIntervalSinceReferenceDate](v10, "timeIntervalSinceReferenceDate");
      v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("locationd paused updates to '%@' at %ld:%ld:%ld %ld-%ld-%ld (%.2f). If you believe this was in error, file a radar with a screenshot and your locationd.log"), v34, v33, v19, v20, v21, v22, v23, v24);
      sub_100D78C28(CFSTR("Autopause"), 0, v25);
      CFRelease(v25);
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a1 + 24);
      -[NSDate timeIntervalSinceReferenceDate](v10, "timeIntervalSinceReferenceDate");
      v14 = *(_DWORD *)(a1 + 184);
      v15 = *(_DWORD *)(a1 + 188);
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v14;
      v46 = 1024;
      LODWORD(v47) = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "locationd paused updates to '%@' at %.2f. client autopause setting: %d, override setting: %d", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v26 = qword_1022A01C8;
      v27 = *(_QWORD *)(a1 + 24);
      -[NSDate timeIntervalSinceReferenceDate](v10, "timeIntervalSinceReferenceDate");
      v28 = *(_DWORD *)(a1 + 184);
      v29 = *(_DWORD *)(a1 + 188);
      v37 = 138413058;
      v38 = v27;
      v39 = 2048;
      v40 = v30;
      v41 = 1024;
      v42 = v28;
      v43 = 1024;
      v44 = v29;
      LODWORD(v32) = 34;
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "locationd paused updates to '%@' at %.2f. client autopause setting: %d, override setting: %d", &v37, v32);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::sendAutopauseStatusMessage(BOOL)", "%s\n", v31);
      if (v31 != buf)
        free(v31);
    }
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v4;
    v46 = 2114;
    v47 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: Sending message to client\", \"msg\":%{public, location:escape_only}s, \"Client\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  v35[0] = CFSTR("kCLConnectionMessageAutopauseStatusKey");
  v35[1] = CFSTR("kCLConnectionMessageAutopauseOverrideKey");
  v36[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2);
  v36[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8);
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 2);
  sub_10116644C(a1, buf);
}

void sub_10116644C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_1021A3AB0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1011664E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011664F4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_1021A3AB8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101166588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10116659C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_DWORD *)(a1 + 48);
      v4 = *(_QWORD *)(a1 + 40);
      v5[0] = 68289538;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v3;
      v10 = 2114;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Releasing process assertion\", \"pid\":%{public}u, \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x22u);
    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");

  }
}

void sub_1011666AC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  id v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
    v4 = *(_DWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446722;
    v19 = v3;
    v20 = 1026;
    v21 = v4;
    v22 = 2048;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#visibility Completing async release of visibility assertion for %{public}s (PID:%{public}d, ptr:%p)", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v7 = qword_1022A01C8;
    v8 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 40);
    v12 = 136446722;
    v13 = v8;
    v14 = 1026;
    v15 = v9;
    v16 = 2048;
    v17 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "#visibility Completing async release of visibility assertion for %{public}s (PID:%{public}d, ptr:%p)", &v12, 28);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::updateVisibilityAssertion()_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    objc_msgSend(v6, "invalidate:", 0);

  }
}

void sub_1011668C0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  const __CFString *v4;
  _UNKNOWN **v5;
  uint8_t buf[8];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 24);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2114;
    v10 = v3;
    v11 = 2050;
    v12 = sub_1003471BC(v1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client not currently authorized for location; sending error\", \"Client\":%{public, locatio"
      "n:escape_only}@, \"DC\":\"%{public}p\"}",
      buf,
      0x26u);
  }
  v4 = CFSTR("kCLConnectionMessageErrorKey");
  v5 = &off_10221CEC0;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_101166A04(v1, buf);
}

void sub_101166A04(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102178418, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101166A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101166AAC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  if ((sub_100FFB2C8(v2, 4) & 1) != 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(v2 + 24);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2114;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning failed to release fNotYetAuthorizedTimer after client was re-authorized\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  objc_msgSend(*(id *)(v2 + 576), "invalidate");

  *(_QWORD *)(v2 + 576) = 0;
}

void sub_101166BCC()
{
  operator new();
}

void sub_101166C60()
{
  operator delete();
}

void sub_101166C84(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2114;
    v10 = v5;
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#provisional force intermediation response(#cblsPowerSaver)\", \"Client\":%{public, location:escape_only}@, \"shouldContinue\":%{public}hhd}", (uint8_t *)v6, 0x22u);
  }
}

double sub_101166D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  _QWORD v5[7];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100061F78;
  v5[3] = &unk_102143548;
  v5[4] = v2;
  result = *(double *)(a1 + 56);
  *(double *)&v5[5] = result;
  v5[6] = a2;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8) != -1)
      *(_QWORD *)&result = sub_100061F78((uint64_t)v5).n128_u64[0];
  }
  return result;
}

void sub_101166DF8(uint64_t a1, int *a2, __int16 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationSubscription::onPauseNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3888);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onPauseNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3888);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onPauseNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011676B4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101166FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101166FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  void *__p;
  char v24;
  std::__shared_weak_count *v25;
  id v26;

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v16 = sub_101167140;
  v17 = &unk_1021A3760;
  sub_10011D234((uint64_t)&v20, a1 + 56);
  v4 = *(_QWORD *)(a1 + 32);
  v18 = a2;
  v19 = v4;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 && *(_QWORD *)(v5 + 8) != -1)
    v16((uint64_t)v15);

  v6 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v24 < 0)
    operator delete(__p);
  v9 = v22;
  if (v22)
  {
    v10 = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_101167128(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004B4F0C(v1);
  _Unwind_Resume(a1);
}

void sub_101167140(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  _OWORD v24[8];
  _OWORD v25[35];
  std::__shared_weak_count *v26;
  __int128 v27;
  void *__p;
  char v29;
  std::__shared_weak_count *v30;
  id v31;

  sub_10011D234((uint64_t)v24, a1 + 48);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  v27 = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    objc_msgSend(v5, "clientLocation");
  }
  else
  {
    v22 = 0u;
    memset(v23, 0, 28);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
  }
  v24[6] = v21;
  v24[7] = v22;
  v25[0] = v23[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v23 + 12);
  v24[2] = v17;
  v24[3] = v18;
  v24[4] = v19;
  v24[5] = v20;
  v24[0] = v15;
  v24[1] = v16;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  v6 = v30;
  if (v30)
  {
    v7 = (unint64_t *)&v30->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v29 < 0)
    operator delete(__p);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v26;
  if (v26)
  {
    v13 = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1011672F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1004B4F0C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10116730C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return sub_10011D234(a1 + 56, a2 + 56);
}

void sub_101167354(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_10116736C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_100261F44(a1 + 1216);
  if (*(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
  sub_100261F44(a1 + 856);
  sub_100261F44(a1 + 736);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1011673D0(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_1021A3AC0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101167464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101167478(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  char v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1011674E4;
  v3[3] = &unk_1021A3800;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8) != -1)
      sub_1011674E4((uint64_t)v3);
  }
}

void sub_1011674E4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(v1 + 16);
      v3 = *(_QWORD *)(v1 + 24);
      v5[0] = 68289538;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2114;
      v9 = v3;
      v10 = 2114;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Got location, but not sending location to client because ProvisionalIntermediation said so.\", \"Client\":%{public, location:escape_only}@, \"AuthContext\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x26u);
    }
  }
}

void sub_10116760C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_1021A3AD0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1011676A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011676B4(uint64_t a1, uint64_t a2, int *a3, __int16 *a4)
{
  NSObject *v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *a3;
    v11[0] = 68289538;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v8;
    v16 = 1026;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: received pause notification\", \"Client\":%{public, location:escape_only}@, \"notification\":%{public}d}", (uint8_t *)v11, 0x22u);
  }
  if (!*a3)
  {
    v10 = *a4;
    *(_BYTE *)(a1 + 239) = *((_BYTE *)a4 + 2);
    *(_WORD *)(a1 + 237) = v10;
    *(_BYTE *)(a1 + 240) = 1;
    sub_1001B9A84(a1);
  }
}

void sub_1011677E4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 288) == a2)
  {
    sub_101165350(a1);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2114;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: Time criterion met, waiting for location event to notify client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
    }
  }
}

void sub_1011678DC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101167908(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101167934(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101167960(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10116798C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

__n128 sub_1011679B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A3938;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1011679F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A3938;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101167A18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101167A54()
{
}

void sub_101167A60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_101167B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_101167B50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A39C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101167B8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A39C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101167BB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101167BEC()
{
}

void sub_101167BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  CLConnectionMessage *v6;
  NSSet *v7;
  void *DictionaryOfClasses;
  id v9;
  void (*v10)(_QWORD *, id, void *);
  uint64_t v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v6 = *(CLConnectionMessage **)a3;
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v7);
  v9 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageSubscribeKey")), "BOOLValue");
  v10 = *(void (**)(_QWORD *, id, void *))a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_QWORD *)(a2 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(void (**)(_QWORD *, id, void *))(*v12 + v10);
  v10(v12, v9, DictionaryOfClasses);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_101167CB8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_101901F38(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101167CD0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_101167D48(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101167D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101167D48(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101167FC8(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101167FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101167FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10116803C(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101168024(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10116803C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101168094(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1011680B0(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101168114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100694874((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10116812C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1009865B8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_101168160(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1011681E4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C42D48;
      v1[3] = unk_101C42D58;
      v1[4] = xmmword_101C42D68;
      v1[0] = xmmword_101C42D28;
      v1[1] = unk_101C42D38;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1011682B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1011682D4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint8_t *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  _QWORD v25[9];
  int v26;
  double v27;
  int v28;
  _BYTE v29[12];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _OWORD v37[7];
  float v38;
  int v39;
  uint8_t buf[4];
  double v41;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  sub_1000E4778(v6);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  sub_1000E4778(v7);
  v8 = (uint64_t)(a2 + 1);
  sub_1000E4778((uint64_t)(a2 + 1));
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  sub_1000E4778(v9);
  v10 = *(double *)(v6 + 136);
  if (v10 == -1.0 || v10 == *(double *)(a1 + 16))
    return 0;
  v13 = *(_DWORD *)(v6 + 200);
  v14 = *(_DWORD *)(v6 + 220);
  *(double *)(a1 + 16) = v10;
  v15 = *(_DWORD *)(a1 + 8);
  if (v15 < 0)
  {
    v11 = 0;
    *(_DWORD *)(a1 + 8) = v13;
    *(double *)(a1 + 24) = v10;
    return v11;
  }
  *(_DWORD *)a3 = v13 - v15;
  *(double *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 32) = v14;
  *(_DWORD *)(a1 + 8) = v13;
  if ((sub_101069B10(v7, (uint64_t)v25, v10) & 1) == 0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A3B20);
    v18 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v41 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "SwimStop is unable to get tier2 data!,the last swim time is %{public}f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A3B20);
    LODWORD(v37[0]) = 134349056;
    *(double *)((char *)v37 + 4) = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "SwimStop is unable to get tier2 data!,the last swim time is %{public}f", v37, 12);
LABEL_27:
    v21 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSwimWorkoutStopModel::getCurrentEpoch(const CLWorkoutPredictorInputs &, Epoch &)", "%s\n", v19);
    if (v21 != buf)
      free(v21);
    return 0;
  }
  if ((sub_1000E3910(v8, v37, v10) & 1) == 0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A3B20);
    v20 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v41 = v10;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "SwimStop is unable to get activity data!,the last swim time is %{public}f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A3B20);
    v28 = 134349056;
    *(double *)v29 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "SwimStop is unable to get activity data!,the last swim time is %{public}f", &v28, 12);
    goto LABEL_27;
  }
  *(_QWORD *)&v29[4] = 0;
  v30 = 0;
  v31 = 0x80000000800000;
  v32 = 0;
  v33 = 0;
  v34 = 0x80000000800000;
  v35 = 0x80000000800000;
  v36 = -8388609;
  v11 = sub_1000E12C8(v9, (uint64_t)&v28, v10);
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)(a3 + 8) = v25[1];
    *(_QWORD *)(a3 + 24) = v25[0];
    v16 = v39;
    v17 = v38 * 57.296;
    *(float *)(a3 + 36) = *(float *)&v30 * 57.296;
    *(float *)(a3 + 40) = v17;
    *(_DWORD *)(a3 + 44) = v16;
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A3B20);
    v22 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v41 = v10;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "SwimStop is unable to get turn data!,the last swim time is %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A3B20);
      v26 = 134349056;
      v27 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "SwimStop is unable to get turn data!,the last swim time is %{public}f", &v26, 12);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSwimWorkoutStopModel::getCurrentEpoch(const CLWorkoutPredictorInputs &, Epoch &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  return v11;
}

uint64_t sub_101168814@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned __int16 *v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;

  v3 = *(unsigned __int16 *)(result + 42);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (unsigned __int16 *)(result + 40);
    v10 = -1.79769313e308;
    v11 = -1.79769313e308;
    do
    {
      v12 = *(_QWORD *)(sub_101168970(v9, v5) + 8);
      if (v12 != 1)
        LODWORD(v12) = *(_QWORD *)(sub_101168970(v9, v5) + 8) == 2;
      v6 += v12;
      *(_DWORD *)(a2 + 8) = v6;
      if (*(_QWORD *)(sub_101168970(v9, v5) + 8) == 19)
      {
        *(_DWORD *)(a2 + 12) = ++v7;
        v11 = *(double *)(sub_101168970(v9, v5) + 24);
      }
      result = sub_101168970(v9, v5);
      if (*(int *)result >= 1)
      {
        result = sub_101168970(v9, v5);
        if (*(_DWORD *)(result + 32))
        {
          v8 += *(_DWORD *)sub_101168970(v9, v5);
          *(_DWORD *)a2 = v8;
          result = sub_101168970(v9, v5);
          v10 = *(double *)(result + 16);
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(v4 + 42));
    if (v8 <= 0)
      v13 = v11;
    else
      v13 = v10;
  }
  else
  {
    v13 = -1.79769313e308;
  }
  *(double *)(a2 + 16) = v13;
  return result;
}

uint64_t sub_101168970(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3B40);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3B40);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLSwimWorkoutStopModel::Epoch>::operator[](const size_t) const [T = CLSwimWorkoutStopModel::Epoch]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[24 * (v4 - v5) + 4];
}

BOOL sub_101168B6C(uint64_t a1, float *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float *v16;
  int v17;
  int v18;
  float *v19;
  float *v20;
  double v21;
  unint64_t v22;
  float *v23;
  float v24;
  double v25;
  unint64_t v26;
  float *v27;
  float v28;
  _BOOL4 v29;
  _BOOL8 v30;
  float v31;
  float *__p;
  float *v37;
  char *v38;

  __p = 0;
  v37 = 0;
  v38 = 0;
  if (*(unsigned __int16 *)(a1 + 42) < 7u)
  {
    v19 = 0;
    v20 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 6;
    do
    {
      v6 = sub_101168970((unsigned __int16 *)(a1 + 40), v5);
      v7 = v6;
      v8 = v37;
      if (v37 >= (float *)v38)
      {
        v10 = __p;
        v11 = v37 - __p;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          sub_100259694();
        v13 = v38 - (char *)__p;
        if ((v38 - (char *)__p) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_100260634((uint64_t)&v38, v14);
          v10 = __p;
          v8 = v37;
        }
        else
        {
          v15 = 0;
        }
        v16 = (float *)&v15[4 * v11];
        *v16 = *(float *)(v7 + 40);
        v9 = v16 + 1;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v16-- - 1) = v17;
        }
        __p = v16;
        v38 = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v37 = *(float *)(v6 + 40);
        v9 = v37 + 1;
      }
      v37 = v9;
      sub_101168970((unsigned __int16 *)(a1 + 40), v5);
      v18 = *(_QWORD *)(sub_101168970((unsigned __int16 *)(a1 + 40), v5) + 8) == 19
         || *(_QWORD *)(sub_101168970((unsigned __int16 *)(a1 + 40), v5) + 8) == 25;
      v4 += v18;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 42));
    v19 = __p;
    v20 = v9;
  }
  v21 = (float)(unint64_t)(v20 - v19 - 1) * 0.25;
  v22 = (unint64_t)v21;
  v23 = &v19[(unint64_t)v21];
  if (v23 != v20)
  {
    sub_10053EEC0(v19, v23, v20, *(float *)&v21);
    v19 = __p;
  }
  v24 = v19[v22];
  v25 = (float)(unint64_t)(v37 - v19 - 1) * 0.75;
  v26 = (unint64_t)v25;
  v27 = &v19[(unint64_t)v25];
  if (v27 != v37)
  {
    sub_10053EEC0(v19, v27, v37, *(float *)&v25);
    v19 = __p;
  }
  v29 = (float)(v19[v26] - v24) >= 20.0 || (v28 = a2[10], v28 < -30.0) || v28 > 45.0;
  v30 = 0;
  if (!v29)
  {
    v31 = a2[11];
    if (a2[9] < 10.0 && v31 > 2.0 && v31 < 20.0 && v4 >= 7)
      v30 = *(_DWORD *)(a1 + 12) < 36;
  }
  operator delete(v19);
  return v30;
}

void sub_101168E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_101168E3C(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  BOOL v4;
  BOOL v5;

  if (*(int *)(a1 + 32) < 1)
    goto LABEL_13;
  LODWORD(result) = *(_DWORD *)(a2 + 4);
  v3 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = v3 + 1;
  if (*(int *)a2 >= 4
    && ((*(float *)&result = (float)SLODWORD(result) * 0.25, *(_DWORD *)(a2 + 12) > (int)*(float *)&result)
      ? (v4 = v3 <= 1)
      : (v4 = 1),
        !v4)
    || (v3 <= 22 ? (v5 = *(_DWORD *)a2 < 16) : (v5 = 0), !v5))
  {
    *(_QWORD *)(a1 + 32) = 0;
LABEL_13:
    result = *(double *)(a2 + 16);
    *(double *)(a1 + 24) = result;
  }
  return result;
}

BOOL sub_101168EA0(uint64_t a1, _QWORD *a2)
{
  int v8;
  _BOOL8 result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  double v37;
  double v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  int v66;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  int v94;

  if (*(double *)(a1 + 24) == -1.0)
    *(_QWORD *)(a1 + 24) = a2[37];
  LODWORD(v35) = 0;
  *((_QWORD *)&v35 + 1) = 26;
  __asm { FMOV            V0.2D, #-1.0 }
  v36 = _Q0;
  v37 = 0.0;
  v38 = 0.0;
  if (!sub_1011682D4(a1, a2, (uint64_t)&v35))
    return 0;
  sub_101169384((unsigned __int16 *)(a1 + 40), &v35);
  if (*(_DWORD *)(a1 + 44) != *(unsigned __int16 *)(a1 + 42))
  {
    *(_DWORD *)buf = 0;
    sub_1000E3564((unsigned __int16 *)(a1 + 928), buf);
    result = 0;
    *(_BYTE *)(a1 + 912) = 1;
    return result;
  }
  *(_DWORD *)buf = sub_101168B6C(a1, (float *)&v35);
  sub_1000E3564((unsigned __int16 *)(a1 + 928), buf);
  *(_BYTE *)(a1 + 912) = 1;
  if (*((float *)&v37 + 1) <= 75.0)
    v8 = *(_DWORD *)(a1 + 12) + 1;
  else
    v8 = 0;
  *(_DWORD *)(a1 + 12) = v8;
  sub_101168814(a1, (uint64_t)&v31);
  v10 = v31;
  v11 = v32;
  v12 = v33;
  if (v32)
    v13 = 1;
  else
    v13 = (int)v31 < (int)(float)((float)((float)SHIDWORD(v31) * 0.2) * 2.56);
  if (!v13 || v33 >= (int)(float)((float)SHIDWORD(v31) * 0.75))
  {
    sub_101168E3C(a1, (uint64_t)&v31);
    goto LABEL_28;
  }
  v15 = *(unsigned __int16 *)(a1 + 930);
  if (!*(_WORD *)(a1 + 930))
    goto LABEL_24;
  v16 = 0;
  v17 = 0;
  do
    v17 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 928), v16++);
  while (v15 != v16);
  if (v17 >= 9)
  {
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_28;
  }
  if (!*(_WORD *)(a1 + 930)
    || !*(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 928), *(unsigned __int16 *)(a1 + 930) - 1))
  {
LABEL_24:
    v18 = *(_DWORD *)(a1 + 32);
    if (v18)
      v19 = v18 + 1;
    else
      v19 = *(unsigned __int16 *)(a1 + 42);
    *(_DWORD *)(a1 + 32) = v19;
  }
LABEL_28:
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A3B20);
  v20 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v21 = *(_DWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)buf = 134221312;
    v68 = v36;
    v69 = 2048;
    v70 = *((_QWORD *)&v36 + 1);
    v71 = 1024;
    v72 = v35;
    v73 = 2048;
    v74 = *((_QWORD *)&v35 + 1);
    v75 = 1024;
    v76 = v10;
    v77 = 1024;
    v78 = v11;
    v79 = 1024;
    v80 = v12;
    v81 = 1024;
    v82 = v21;
    v83 = 1024;
    v84 = LODWORD(v37);
    v85 = 2048;
    v86 = v22;
    v87 = 2048;
    v88 = *(float *)&v38;
    v89 = 2048;
    v90 = *((float *)&v38 + 1);
    v91 = 2048;
    v92 = *((float *)&v37 + 1);
    v93 = 1024;
    v94 = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "SwimStop,startTime,%f,tier2Time,%f,epochCount,%d,epochTier2,%ld,bufferCnt,%d,bufferedPed,%d,bufferedSwim,%d,count,%d,style,%d,lastTime,%f,angle,%f,vectorMag,%f,yaw,%f,sinceTurn,%d", buf, 0x72u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A3B20);
    v24 = *(_DWORD *)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 24);
    v26 = *(_DWORD *)(a1 + 12);
    v39 = 134221312;
    v40 = v36;
    v41 = 2048;
    v42 = *((_QWORD *)&v36 + 1);
    v43 = 1024;
    v44 = v35;
    v45 = 2048;
    v46 = *((_QWORD *)&v35 + 1);
    v47 = 1024;
    v48 = v10;
    v49 = 1024;
    v50 = v11;
    v51 = 1024;
    v52 = v12;
    v53 = 1024;
    v54 = v24;
    v55 = 1024;
    v56 = LODWORD(v37);
    v57 = 2048;
    v58 = v25;
    v59 = 2048;
    v60 = *(float *)&v38;
    v61 = 2048;
    v62 = *((float *)&v38 + 1);
    v63 = 2048;
    v64 = *((float *)&v37 + 1);
    v65 = 1024;
    v66 = v26;
    LODWORD(v29) = 114;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "SwimStop,startTime,%f,tier2Time,%f,epochCount,%d,epochTier2,%ld,bufferCnt,%d,bufferedPed,%d,bufferedSwim,%d,count,%d,style,%d,lastTime,%f,angle,%f,vectorMag,%f,yaw,%f,sinceTurn,%d", COERCE_DOUBLE(&v39), v29, v30, v31, v32, v34, (_DWORD)v35, DWORD2(v35), (_DWORD)v36, *((double *)&v36 + 1),
      v37,
      v38);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLSwimWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  return *(int *)(a1 + 32) >= 118 && (!(_DWORD)v31 || v32 >= 1);
}

unsigned __int16 *sub_101169384(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[24 * (v3 - v2)];
  v6 = *a2;
  v5 = a2[1];
  *(_OWORD *)(v4 + 20) = a2[2];
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  v7 = result[1];
  v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    v9 = *result + 1;
    if (v9 < v8)
      LOWORD(v8) = 0;
    *result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

_QWORD *sub_1011693F4(_QWORD *result)
{
  *result = off_1021A3AE8;
  return result;
}

void sub_101169404(_QWORD *a1)
{
  *a1 = off_1021A3AE8;
  operator delete();
}

void sub_101169424(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_101169450(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101169520(id a1)
{
  qword_10230D148 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCellTilesManagerSilo"));
}

uint64_t sub_1011695D4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10116BA6C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230D158 != -1)
    dispatch_once(&qword_10230D158, block);
  return qword_102311CC8;
}

void sub_10116989C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  int v51;
  const char *v52;
  char *v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  _DWORD v57[4];
  __int128 buf;

  v7 = sub_10116A59C(a1, "CLCellTilesManager", a2);
  *(_QWORD *)v7 = off_1021A3B90;
  *(_QWORD *)(v7 + 112) = &off_1021A3C78;
  *(_QWORD *)(v7 + 120) = 0;
  *(_WORD *)(v7 + 128) = 1;
  *(_OWORD *)(v7 + 136) = xmmword_101C32730;
  v8 = (uint64_t *)(v7 + 136);
  *(_QWORD *)(v7 + 152) = 0x40C5180000000000;
  v9 = (uint64_t *)(v7 + 152);
  *(_QWORD *)(v7 + 168) = 0;
  *(_DWORD *)(v7 + 176) = 0xFFFF;
  *(_QWORD *)(v7 + 188) = 0;
  *(_QWORD *)(v7 + 180) = 0;
  *(_OWORD *)(v7 + 196) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v7 + 212) = _Q0;
  *(_OWORD *)(v7 + 228) = _Q0;
  *(_OWORD *)(v7 + 244) = _Q0;
  *(_DWORD *)(v7 + 260) = 0;
  *(_QWORD *)(v7 + 272) = 0;
  *(_QWORD *)(v7 + 280) = 0;
  *(_QWORD *)(v7 + 264) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 288) = 0;
  *(_QWORD *)(v7 + 292) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 300) = 0x7FFFFFFF;
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 320) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_BYTE *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 350) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 344) = 0;
  *(_DWORD *)(v7 + 364) = 100;
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 368) = v15;
  *(_QWORD *)(a1 + 376) = 0;
  v56 = v7 + 384;
  sub_10108270C((_QWORD *)(v7 + 384));
  sub_100F5A35C((_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 40));
  sub_101245358(a1 + 416);
  *(_BYTE *)(a1 + 440) = 0;
  sub_1001E4804(&buf);
  sub_1001FD98C(buf, "MaxTileAge", v8);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v19 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v20 = *v8;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: fMaxTileSecurityAge, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v42 = *v8;
    v57[0] = 134217984;
    *(_QWORD *)&v57[1] = v42;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: fMaxTileSecurityAge, %.1lf", COERCE_DOUBLE(v57));
    v44 = (char *)v43;
    sub_100512490("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v43);
    if (v44 != (char *)&buf)
      free(v44);
  }
  sub_1001E4804(&buf);
  v21 = (uint64_t *)(a1 + 144);
  sub_1001FD98C(buf, "AncientTilesThreshold", (void *)(a1 + 144));
  v22 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v25 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v26 = *v21;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TILE: fMaxTileDataAge, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v45 = *v21;
    v57[0] = 134217984;
    *(_QWORD *)&v57[1] = v45;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: fMaxTileDataAge, %.1lf", COERCE_DOUBLE(v57));
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v46);
    if (v47 != (char *)&buf)
      free(v47);
  }
  sub_1001E4804(&buf);
  sub_1001FD98C(buf, "EncryptionGracePeriod", v9);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v30 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v31 = *v9;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: fEncryptionGracePeriod, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v48 = *v9;
    v57[0] = 134217984;
    *(_QWORD *)&v57[1] = v48;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: fEncryptionGracePeriod, %.1lf", COERCE_DOUBLE(v57));
    v50 = (char *)v49;
    sub_100512490("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v49);
    if (v50 != (char *)&buf)
      free(v50);
  }
  *(_BYTE *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 32))(*(_QWORD *)(a1 + 368));
  v32 = (unsigned __int8 *)(a1 + 160);
  sub_1001E4804(&buf);
  sub_1001E4874(buf, "CellTilesActive", (BOOL *)(a1 + 160));
  v33 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v36 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v37 = *v32;
    LODWORD(buf) = 67240192;
    DWORD1(buf) = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "TileCell, isActive, %{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v51 = *v32;
    v57[0] = 67240192;
    v57[1] = v51;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCell, isActive, %{public}d", v57, 8, a1 + 392, v56);
    v53 = (char *)v52;
    sub_100512490("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v52);
    if (v53 != (char *)&buf)
      free(v53);
  }
  if (*(_BYTE *)(a4 + 24))
  {
    sub_10124535C((__int128 *)(a1 + 416), (__int128 *)a4);
    sub_1001E4804(&buf);
    sub_1001FD98C(buf, "MTimeModificationPeriod", &qword_1022FDCC8);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v41 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = qword_1022FDCC8;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: MTimeModificationPeriod, %.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v57[0] = 134217984;
      *(_QWORD *)&v57[1] = qword_1022FDCC8;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: MTimeModificationPeriod, %.1lf", COERCE_DOUBLE(v57));
      v55 = (char *)v54;
      sub_100512490("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v54);
      if (v55 != (char *)&buf)
        free(v55);
    }
    operator new();
  }
  sub_10116A638((uint64_t)&buf);
}

void sub_10116A440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100CBD658((void ***)&a13);
  nullsub_1409(a12);
  v23 = *v21;
  *v21 = 0;
  if (v23)
    sub_100CBD6F8((uint64_t)v21, v23);
  v24 = *(_QWORD *)(v20 + 368);
  *(_QWORD *)(v20 + 368) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(v20 + 120);
  *(_QWORD *)(v20 + 120) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_10116B848(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10116A59C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021A3E28;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10116A61C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10116A638(uint64_t a1@<X8>)
{
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  std::string *p_dst;
  std::string::size_type size;
  _BYTE *v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string *v13;
  std::string::size_type v14;
  void **v15;
  std::string *v16;
  const char *v17;
  int v18;
  NSObject *v19;
  uint64_t *v20;
  std::string *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  const char *v26;
  char *v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  std::string __dst;
  _DWORD __p[3];
  __int16 v34;
  int v35;
  _BYTE v36[12];
  __int16 v37;
  _BOOL4 v38;
  char v39;
  _BYTE buf[18];

  sub_10116BAD8();
  if (byte_10230D188[23] < 0)
    sub_100115CE4(&__dst, *(void **)byte_10230D188, *(unint64_t *)&byte_10230D188[8]);
  else
    __dst = *(std::string *)byte_10230D188;
  sub_1001E4804(buf);
  v2 = sub_1000BCB64(*(uint64_t *)buf, "CellTilesServerUrl", &__dst);
  v3 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = p_dst;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: defaultCellTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v21 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)v36 = 136380931;
    *(_QWORD *)&v36[4] = v21;
    v37 = 1026;
    v38 = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: defaultCellTilesServerUrl, %{private}s, overridden, %{public}d", v36, 18);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v9 = v36;
  sub_100259584((uint64_t)v36, size + 5);
  if (v39 < 0)
    v9 = *(_BYTE **)v36;
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &__dst;
    else
      v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v9, v10, size);
  }
  strcpy(&v9[size], "/3/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v11 = __dst.__r_.__value_.__l.__size_;
  v12 = v30;
  sub_100259584((uint64_t)v30, v11 + 5);
  if (v31 < 0)
    v12 = (void **)v30[0];
  if (v11)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &__dst;
    else
      v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/4/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v14 = __dst.__r_.__value_.__l.__size_;
  v15 = v28;
  sub_100259584((uint64_t)v28, v14 + 5);
  if (v29 < 0)
    v15 = (void **)v28[0];
  if (v14)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__dst;
    else
      v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/5/v1");
  sub_101245358(a1);
  sub_10116BB6C();
  if (byte_10230D177 >= 0)
    v17 = (const char *)&qword_10230D160;
  else
    v17 = (const char *)qword_10230D160;
  v18 = mkdir(v17, 0x1C0u);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v19 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_10116BB6C();
    if (byte_10230D177 >= 0)
      v20 = &qword_10230D160;
    else
      v20 = (uint64_t *)qword_10230D160;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: mkdir, %s, ret, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v24 = qword_1022A02D8;
    sub_10116BB6C();
    if (byte_10230D177 >= 0)
      v25 = &qword_10230D160;
    else
      v25 = (uint64_t *)qword_10230D160;
    __p[0] = 136315394;
    *(_QWORD *)&__p[1] = v25;
    v34 = 1024;
    v35 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "TILE: mkdir, %s, ret, %d", (const char *)__p, 18);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  operator new();
}

void sub_10116B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47)
{
  sub_100CB3144(&a16, 0);
  sub_100CBD658((void ***)&a47);
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a45 < 0)
    operator delete(a40);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_10116B618(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLCellTilesManager::onTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3D98);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3D98);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10116E018(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10116B7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10116B7E8(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[7];
  char v6;

  v3 = *(void **)(a3 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1011709E4;
  v5[3] = &unk_1021528C0;
  v6 = a2;
  v5[4] = a3;
  v5[5] = a1;
  v5[6] = a3;
  return objc_msgSend(v3, "async:", v5);
}

uint64_t sub_10116B848(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A3E28;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10116B8BC()
{
  sub_10110A610();
}

void sub_10116B944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v13;

  if (a12)
  {
    *(_QWORD *)(v13 - 24) = &a9;
    sub_100CBD658((void ***)(v13 - 24));
  }
  sub_101924D98(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10116B970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_1021A3B90;
  *(_QWORD *)(a1 + 112) = &off_1021A3C78;
  sub_10116BC00((_QWORD *)a1);
  v6 = (void **)(a1 + 416);
  sub_100CBD658(&v6);
  nullsub_1409(a1 + 384);
  v2 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v2)
    sub_100CBD6F8(a1 + 376, v2);
  v3 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_10116B848(a1);
}

uint64_t sub_10116BA18(uint64_t a1)
{
  return sub_10116B970(a1 - 112);
}

void sub_10116BA20(uint64_t a1)
{
  sub_10116B970(a1);
  operator delete();
}

void sub_10116BA44(uint64_t a1)
{
  sub_10116B970(a1 - 112);
  operator delete();
}

void sub_10116BA6C()
{
  operator new();
}

void sub_10116BAB4()
{
  operator delete();
}

__int128 *sub_10116BAD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230D1A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230D1A0))
  {
    xmmword_10230D188 = 0uLL;
    unk_10230D198 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230D188, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D1A0);
  }
  if (qword_10230D1A8 != -1)
    dispatch_once(&qword_10230D1A8, &stru_1021A3CD0);
  return &xmmword_10230D188;
}

uint64_t *sub_10116BB6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230D178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230D178))
  {
    qword_10230D160 = 0;
    qword_10230D168 = 0;
    unk_10230D170 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230D160, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D178);
  }
  if (qword_10230D180 != -1)
    dispatch_once(&qword_10230D180, &stru_1021A3CB0);
  return &qword_10230D160;
}

uint64_t sub_10116BC00(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLCellTilesManager::shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLCellTilesManager::shutdown", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCellTilesManager::shutdown()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (a1[21])
  {
    sub_10116BDE4(a1);
    v3 = a1[21];
    if (v3)
    {
      sub_1009865B8(v3);
      operator delete();
    }
    a1[21] = 0;
  }
  sub_10107AC18(a1[47]);
  result = a1[15];
  a1[15] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_10116BDE4(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[21])
  {
    v1 = result;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileTimer, cancel", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileTimer, cancel", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::cancelExpiredLocationTimer()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return sub_10016E3C4(v1[21]);
  }
  return result;
}

void sub_10116BF84(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  double v11;
  int v12;
  char v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD v28[5];
  int v29;
  int v30;
  __int16 v31;
  _BOOL4 v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  _BOOL4 v36;

  if (*a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67240192;
      v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, dataprotection, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v7 = *a3;
      v29 = 67240192;
      v30 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, unexpected, dataprotection, %{public}d", &v29, 8);
LABEL_40:
      v24 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v8);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    v11 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
    v12 = *(unsigned __int8 *)(a1 + 128);
    v13 = *a4 != 1;
    *(_BYTE *)(a1 + 128) = v13;
    sub_10107BAF4(*(_QWORD *)(a1 + 376), v13);
    if (*(_BYTE *)(a1 + 128))
    {
      v14 = 1;
    }
    else
    {
      sub_10116C5CC(a1, v11);
      v14 = *(unsigned __int8 *)(a1 + 128);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)buf = 67109376;
      v34 = v16;
      v35 = 1024;
      v36 = v12 != v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TileCell, kNotificationEncryptedDataAvailability, %d, changed, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v20 = *(unsigned __int8 *)(a1 + 128);
      v29 = 67109376;
      v30 = v20;
      v31 = 1024;
      v32 = v12 != v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCell, kNotificationEncryptedDataAvailability, %d, changed, %d", &v29, 14);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (v12 != v14)
    {
      if (*(_BYTE *)(a1 + 128))
      {
        sub_10116CA54(a1, (uint64_t)"onDataProtectionNotification", a1 + 176, 1);
      }
      else
      {
        sub_10107AFF0(*(_QWORD *)(a1 + 376), v11);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v17 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, skip on unlock", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
          LOWORD(v29) = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: updateProtectionClass, skip on unlock", &v29, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        sub_10116BDE4((_QWORD *)a1);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10116CE2C;
        v28[3] = &unk_10214C498;
        v28[4] = a1;
        sub_1000537FC(a1, (uint64_t)"onDataProtectionNotification.cleanUnknownCache", (uint64_t)v28);
      }
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v19 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)buf = 67240192;
      v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "@TileEvent, all, locked, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v23 = *(unsigned __int8 *)(a1 + 128);
      v29 = 67240192;
      v30 = v23;
      LODWORD(v27) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileEvent, all, locked, %{public}d", &v29, v27);
      goto LABEL_40;
    }
  }
}

void sub_10116C5CC(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[6];
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)buf = 67240192;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileCell, listAvailableFilesAllTypes, indexed, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v8 = *(unsigned __int8 *)(a1 + 129);
    v17[0] = 67240192;
    v17[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCell, listAvailableFilesAllTypes, indexed, %{public}d", v17, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*(_BYTE *)(a1 + 129))
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10116E560;
    v16[3] = &unk_102154608;
    v16[4] = a1;
    *(double *)&v16[5] = a2;
    sub_1000537FC(a1, (uint64_t)"indexTiles", (uint64_t)v16);
    *(_BYTE *)(a1 + 129) = 1;
    if (*(_BYTE *)(a1 + 440))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, clear on index", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        LOWORD(v17[0]) = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, clear on index", v17, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_10116D764(a1);
      *(_BYTE *)(a1 + 440) = 0;
    }
    else
    {
      sub_10116E494(a1, a2);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileCell, listAvailableFilesAllTypes, done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      LOWORD(v17[0]) = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCell, listAvailableFilesAllTypes, done", v17, v15);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_10116CA54(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[8];
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (*(_BYTE *)(a1 + 128))
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_101176020;
    v15[3] = &unk_1021975F0;
    v15[6] = a3;
    v15[7] = a2;
    v16 = a4;
    v15[4] = &v17;
    v15[5] = a1;
    sub_1000537FC(a1, (uint64_t)"updateProtectionClass", (uint64_t)v15);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_DWORD *)v18 + 6);
      *(_DWORD *)buf = 67109376;
      v25 = a4;
      v26 = 1024;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v10 = *((_DWORD *)v18 + 6);
      v21[0] = 67109376;
      v21[1] = a4;
      v22 = 1024;
      v23 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d", v21, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    if (*(_BYTE *)(a1 + 128) && *((_DWORD *)v18 + 6))
      sub_101177A30(a1, a2);
    else
      sub_10116BDE4((_QWORD *)a1);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning TILE: updateProtectionClass, called on when not locked", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      LOWORD(v21[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning TILE: updateProtectionClass, called on when not locked", v21, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  _Block_object_dispose(&v17, 8);
}

void sub_10116CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_10116CE2C(_QWORD *result, uint64_t a2)
{
  if (*(_BYTE *)(result[4] + 160))
  {
    result = *(_QWORD **)(a2 + 304);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 32))(result);
  }
  return result;
}

void sub_10116CE50(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  if (*a3 == 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v8 = *a4;
      v7 = a4[1];
      *(_DWORD *)buf = 67240448;
      v25 = v7;
      v26 = 1026;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, kNotificationReachability, %{public}d, was, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v14 = *a4;
      v13 = a4[1];
      v20 = 67240448;
      v21 = v13;
      v22 = 1026;
      v23 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, kNotificationReachability, %{public}d, was, %{public}d", &v20, 14);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v9 = a4[1];
    *(_DWORD *)(a1 + 352) = v9;
    sub_10107B90C(*(_QWORD *)(a1 + 376), v9);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a3;
      *(_DWORD *)buf = 67240192;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, status, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v17 = *a3;
      v20 = 67240192;
      v21 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, unexpected, status, %{public}d", &v20, 8);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

void sub_10116D188(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  int v11;
  NSObject *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  int v24;
  uint8_t buf[4];
  int v26;

  v5 = *a3;
  if (*a3 == 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TileCell, #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, #CacheDelete kNotificationSoftwareUpdateStorageRecovery", &v23, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
LABEL_27:
    sub_10116D764(a1);
    if (!*(_BYTE *)(a1 + 129))
      *(_BYTE *)(a1 + 440) = 1;
    return;
  }
  if (v5 != 4)
  {
    if (v5)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v13 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *a3;
        *(_DWORD *)buf = 67240192;
        v26 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, status, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v20 = *a3;
        v23 = 67240192;
        v24 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, unexpected, status, %{public}d", &v23, 8);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, kNotificationReset", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        LOWORD(v23) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, kNotificationReset", &v23, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      sub_10116D764(a1);
      if (!*(_BYTE *)(a1 + 129))
        *(_BYTE *)(a1 + 440) = 1;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 48))(*(_QWORD *)(a1 + 368));
    }
    return;
  }
  *(_BYTE *)(a1 + 357) = *(_DWORD *)(a4 + 188) == 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v11 = *(unsigned __int8 *)(a1 + 357);
    *(_DWORD *)buf = 67240192;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "TileCell, kNotificationLocationServicesStatus, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v17 = *(unsigned __int8 *)(a1 + 357);
    v23 = 67240192;
    v24 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, kNotificationLocationServicesStatus, %{public}d", &v23, 8);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (!*(_BYTE *)(a1 + 357))
    goto LABEL_27;
}

id *sub_10116D764(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[5];
  id v13[2];
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  sub_100131938(v13, (uint64_t)"clearLocationInformationCell", 0);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "clearLocationInformationCell";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileCell, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v14 = 136446210;
    v15 = "clearLocationInformationCell";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCell, %{public}s", &v14, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::clearLocationInformation()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  sub_10107AC18(*(_QWORD *)(a1 + 376));
  *(_DWORD *)(a1 + 176) = 0xFFFF;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 196) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 212) = _Q0;
  *(_OWORD *)(a1 + 228) = _Q0;
  *(_OWORD *)(a1 + 244) = _Q0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 292) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 300) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  sub_100F5A36C(a1 + 392);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_101174D8C;
  v12[3] = &unk_10214C498;
  v12[4] = a1;
  sub_1000537FC(a1, (uint64_t)"label", (uint64_t)v12);
  return sub_100131740(v13);
}

void sub_10116D9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_10116DA14(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  NSObject *v7;
  int v8;
  double v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (*a3 == 5)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a3;
      *(_DWORD *)buf = 67240192;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, companion, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v12 = *a3;
      v18 = 67240192;
      v19 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, unexpected, companion, %{public}d", &v18, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 24))(*(_QWORD *)(a1 + 368)))
    {
      v9 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
      *(_BYTE *)(a1 + 356) = *a4;
      sub_10107BABC(*(_QWORD *)(a1 + 376), *a4);
      if (*(_BYTE *)(a1 + 356))
        sub_10116DD84(a1, v9);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      *(_DWORD *)buf = 67240192;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, companion, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v15 = *a3;
      v18 = 67240192;
      v19 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, unexpected, companion, %{public}d", &v18, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

BOOL sub_10116DD84(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BOOL8 v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _OWORD v15[8];
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint8_t buf[16];
  uint64_t v22;
  __int128 __p;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 357) && sub_1010784C0(*(_QWORD *)(a1 + 376)))
  {
    LODWORD(v17) = 13;
    sub_1000C1928((uint64_t)buf, &v17);
    v4 = *(_QWORD *)(a1 + 376);
    v5 = *(_QWORD *)(a1 + 120);
    v6 = *(_OWORD *)(a1 + 288);
    v15[6] = *(_OWORD *)(a1 + 272);
    v15[7] = v6;
    v16[0] = *(_OWORD *)(a1 + 304);
    *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)(a1 + 316);
    v7 = *(_OWORD *)(a1 + 224);
    v15[2] = *(_OWORD *)(a1 + 208);
    v15[3] = v7;
    v8 = *(_OWORD *)(a1 + 256);
    v15[4] = *(_OWORD *)(a1 + 240);
    v15[5] = v8;
    v9 = *(_OWORD *)(a1 + 192);
    v15[0] = *(_OWORD *)(a1 + 176);
    v15[1] = v9;
    sub_10107881C(v4, v5, (uint64_t)v15, (uint64_t)&v17, a2);
    *(_OWORD *)buf = v17;
    v22 = v18;
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
    __p = v19;
    v24 = v20;
    v10 = sub_1001C8DA8((unsigned int *)buf);
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "@TileDl, cell, failed criteria", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileDl, cell, failed criteria", &v17, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  return v10;
}

void sub_10116DFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10116E018(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  _BOOL4 v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  _BOOL4 v15;
  __int16 v16;
  int v17;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 168) == a2;
    v6 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 1026;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TileCell, Timer, %{public}d, locked, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v7 = *(_QWORD *)(a1 + 168) == a2;
    v8 = *(unsigned __int8 *)(a1 + 128);
    v11[0] = 67240448;
    v11[1] = v7;
    v12 = 1026;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, Timer, %{public}d, locked, %{public}d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onTimerFired(CLPersistentTimer *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_QWORD *)(a1 + 168) == a2)
  {
    if (*(_BYTE *)(a1 + 128))
      sub_10116CA54(a1, (uint64_t)"onExpiredLocationTimerFired", a1 + 176, 0);
  }
}

id sub_10116E228(uint64_t a1)
{
  NSObject *v2;
  double v3;
  void *v4;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[6];
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "TileCell, Cleanup", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, Cleanup", v9, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onCleanupAgedTiles()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
  v4 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10116E408;
  v8[3] = &unk_102143528;
  v8[4] = a1;
  *(double *)&v8[5] = v3;
  return objc_msgSend(v4, "async:", v8);
}

id *sub_10116E408(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  sub_10116E494(v1, *(double *)(a1 + 40));
  sub_1000537FC(v1, (uint64_t)"onCleanupAgedTiles", (uint64_t)&stru_1021A3C90);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101171FBC;
  v3[3] = &unk_10214C498;
  v3[4] = v1;
  return sub_1000537FC(v1, (uint64_t)"refreshTilesDataIfNeeded", (uint64_t)v3);
}

uint64_t *sub_10116E494(uint64_t a1, double a2)
{
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101174F20;
  v5[3] = &unk_102154608;
  v5[4] = a1;
  *(double *)&v5[5] = a2;
  sub_1000537FC(a1, (uint64_t)"deleteAgedTiles", (uint64_t)v5);
  return sub_10107A080(*(_QWORD *)(a1 + 376), a2);
}

void sub_10116E514(id a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a2 + 37);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)a2 + 38);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

BOOL sub_10116E560(uint64_t a1, uint64_t a2)
{
  return sub_10116E570(*(_QWORD *)(a1 + 32), a2, *(double *)(a1 + 40));
}

BOOL sub_10116E570(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  const char *v8;
  DIR *v9;
  dirent *v10;
  int v11;
  size_t v12;
  std::string *p_buf;
  const void *v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  NSObject *v19;
  void **v20;
  int d_type;
  NSObject *v22;
  void **v23;
  void **v24;
  void **v25;
  int v26;
  NSObject *v27;
  void **v28;
  void **v29;
  const char *v30;
  std::string *v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  NSObject *v37;
  const char *v38;
  double v39;
  double v40;
  uint64_t v41;
  void **v42;
  int v43;
  const char *v44;
  std::string *v45;
  void **v46;
  const char *v47;
  std::string *v48;
  void **v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  double v53;
  double v54;
  uint64_t v55;
  const char *v56;
  std::string *v57;
  NSObject *v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  std::string *v71;
  NSObject *v72;
  uint64_t v74;
  __darwin_ino64_t v75;
  const char *v76;
  std::string *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *__p[2];
  int64_t v83;
  void *__dst[2];
  unsigned __int8 v85;
  int v86;
  const char *v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  uint64_t v93;
  _BYTE v94[24];
  __int128 v95;
  uint64_t v96;
  stat v97;
  std::string buf;
  double v99;
  __int16 v100;
  uint64_t v101;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0)
      v6 = a2 + 32;
    v7 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v7 = *(_QWORD *)(a2 + 8);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TileCell, indexTiles, rootDirectory, %{public}s, name, %{public}s", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v74 = *(_QWORD *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0)
      v74 = a2 + 32;
    v75 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v75 = *(_QWORD *)(a2 + 8);
    v97.st_dev = 136446466;
    *(_QWORD *)&v97.st_mode = v74;
    WORD2(v97.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&v97.st_ino + 6) = v75;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, indexTiles, rootDirectory, %{public}s, name, %{public}s", &v97, 22);
    v77 = (std::string *)v76;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v76);
    if (v77 != &buf)
      free(v77);
  }
  if (*(char *)(a2 + 55) >= 0)
    v8 = (const char *)(a2 + 32);
  else
    v8 = *(const char **)(a2 + 32);
  v9 = opendir(v8);
  sub_10116F574(a1, 0, *(_DWORD *)(a2 + 4));
  if (!v9)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v72 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "TileCell, indexTiles, can't open dir, %{public}s, #CloneMe", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return v9 != 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v97.st_dev = 136446210;
    *(_QWORD *)&v97.st_mode = v8;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileCell, indexTiles, can't open dir, %{public}s, #CloneMe", &v97, v79);
    v71 = (std::string *)v78;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v78);
    if (v71 == &buf)
      return v9 != 0;
LABEL_149:
    free(v71);
    return v9 != 0;
  }
  v10 = readdir(v9);
  if (v10)
  {
    v11 = 0;
    v80 = a2 + 184;
    while (1)
    {
      sub_10035ACF4(__dst, v10->d_name, v10->d_namlen);
      if (*(char *)(a2 + 55) >= 0)
        v12 = *(unsigned __int8 *)(a2 + 55);
      else
        v12 = *(_QWORD *)(a2 + 40);
      sub_100259584((uint64_t)&buf, v12 + 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if (*(char *)(a2 + 55) >= 0)
          v14 = (const void *)(a2 + 32);
        else
          v14 = *(const void **)(a2 + 32);
        memmove(p_buf, v14, v12);
      }
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v12) = 47;
      if ((v85 & 0x80u) == 0)
        v15 = __dst;
      else
        v15 = (void **)__dst[0];
      if ((v85 & 0x80u) == 0)
        v16 = v85;
      else
        v16 = (std::string::size_type)__dst[1];
      v17 = std::string::append(&buf, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v83 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v19 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v20 = __p;
        if (v83 < 0)
          v20 = (void **)__p[0];
        d_type = v10->d_type;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = d_type;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "TileCell, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v42 = __p;
        if (v83 < 0)
          v42 = (void **)__p[0];
        v43 = v10->d_type;
        v97.st_dev = 136446466;
        *(_QWORD *)&v97.st_mode = v42;
        WORD2(v97.st_ino) = 1026;
        *(_DWORD *)((char *)&v97.st_ino + 6) = v43;
        LODWORD(v79) = 18;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d", &v97, v79);
        v45 = (std::string *)v44;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v44);
        if (v45 != &buf)
          free(v45);
      }
      if (v10->d_type != 8)
        goto LABEL_77;
      if (!sub_1011920B4((uint64_t)__dst, (const void **)(a2 + 32)))
        break;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      ++v11;
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v23 = __p;
        if (v83 < 0)
          v23 = (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "TileCell, convert to class B, first unlock, %{public}s, files, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v46 = __p;
        if (v83 < 0)
          v46 = (void **)__p[0];
        v97.st_dev = 136446466;
        *(_QWORD *)&v97.st_mode = v46;
        WORD2(v97.st_ino) = 1026;
        *(_DWORD *)((char *)&v97.st_ino + 6) = v11;
        LODWORD(v79) = 18;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCell, convert to class B, first unlock, %{public}s, files, %{public}d", &v97, v79);
        v48 = (std::string *)v47;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v47);
        if (v48 != &buf)
          free(v48);
      }
      if (v83 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      sub_100FA7570((const char *)v24);
      if (v83 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      v26 = stat((const char *)v25, &v97);
      if (!v26)
      {
        if (sub_10116FC60(a1, *(_DWORD *)(a2 + 4), (char *)(a2 + 32), (std::string::value_type *)__dst, a3))
        {
          v35 = v34;
          *(_OWORD *)v94 = *(_OWORD *)(v34 + 48);
          *(_QWORD *)&v94[16] = *(_QWORD *)(v34 + 64);
          if (*(char *)(v34 + 95) < 0)
          {
            sub_100115CE4(&v95, *(void **)(v34 + 72), *(_QWORD *)(v34 + 80));
          }
          else
          {
            v95 = *(_OWORD *)(v34 + 72);
            v96 = *(_QWORD *)(v34 + 88);
          }
          sub_10117024C(a1, v35, a2, (uint64_t)"index", a3);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          v36 = (unsigned int *)(v35 + 48);
          v37 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v38 = sub_1001CC818(*v36);
            v39 = sub_1001C087C((uint64_t)v94);
            v40 = sub_1001C0858((uint64_t)v94);
            v41 = sub_100026CC8(v80);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v39;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
            v99 = v40;
            v100 = 2050;
            v101 = v41;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu", (uint8_t *)&buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
            v51 = qword_1022A0048;
            v52 = sub_1001CC818(*v36);
            v53 = sub_1001C087C((uint64_t)v94);
            v54 = sub_1001C0858((uint64_t)v94);
            v55 = sub_100026CC8(v80);
            v86 = 136446979;
            v87 = v52;
            v88 = 2049;
            v89 = v53;
            v90 = 2049;
            v91 = v54;
            v92 = 2050;
            v93 = v55;
            LODWORD(v79) = 42;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v51, 0, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu", &v86, v79);
            v57 = (std::string *)v56;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v56);
            if (v57 != &buf)
              free(v57);
          }
          if (SHIBYTE(v96) < 0)
            operator delete((void *)v95);
        }
        goto LABEL_77;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v27 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v28 = __dst;
        if ((v85 & 0x80u) != 0)
          v28 = (void **)__dst[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "TileCell, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v29 = __dst;
        if ((v85 & 0x80u) != 0)
          v29 = (void **)__dst[0];
        *(_DWORD *)v94 = 136446466;
        *(_QWORD *)&v94[4] = v29;
        *(_WORD *)&v94[12] = 1026;
        *(_DWORD *)&v94[14] = v26;
        LODWORD(v79) = 18;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileCell, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", v94, v79);
        v31 = (std::string *)v30;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v30);
LABEL_111:
        if (v31 != &buf)
          free(v31);
      }
LABEL_77:
      if (SHIBYTE(v83) < 0)
        operator delete(__p[0]);
      if ((char)v85 < 0)
        operator delete(__dst[0]);
      v10 = readdir(v9);
      if (!v10)
        goto LABEL_117;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v32 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v33 = __dst;
      if ((v85 & 0x80u) != 0)
        v33 = (void **)__dst[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "TileCell, indexTiles, invalid filename  %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_77;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v49 = __dst;
    if ((v85 & 0x80u) != 0)
      v49 = (void **)__dst[0];
    v97.st_dev = 136446210;
    *(_QWORD *)&v97.st_mode = v49;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCell, indexTiles, invalid filename  %{public}s", &v97, v79);
    v31 = (std::string *)v50;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v50);
    goto LABEL_111;
  }
LABEL_117:
  closedir(v9);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v58 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 31) >= 0)
      v59 = a2 + 8;
    else
      v59 = *(_QWORD *)(a2 + 8);
    v60 = sub_100026CC8(a2 + 184);
    v61 = sub_1008B97D0(a2 + 184);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v59;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v60;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
    v99 = *(double *)&v61;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "TileCell, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu", (uint8_t *)&buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v62 = qword_1022A0048;
    v65 = *(_QWORD *)(a2 + 8);
    v64 = a2 + 8;
    v63 = v65;
    v66 = *(char *)(v64 + 23) >= 0 ? v64 : v63;
    v67 = v64 + 176;
    v68 = sub_100026CC8(v64 + 176);
    v69 = sub_1008B97D0(v67);
    v97.st_dev = 136446722;
    *(_QWORD *)&v97.st_mode = v66;
    WORD2(v97.st_ino) = 2050;
    *(__darwin_ino64_t *)((char *)&v97.st_ino + 6) = v68;
    HIWORD(v97.st_gid) = 2050;
    *(_QWORD *)&v97.st_rdev = v69;
    LODWORD(v79) = 32;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v62, 1, "TileCell, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu", &v97, v79);
    v71 = (std::string *)v70;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v70);
    if (v71 != &buf)
      goto LABEL_149;
  }
  return v9 != 0;
}

void sub_10116F4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t *sub_10116F574(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t *v3;
  int v4;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  double v27;
  double v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];
  unsigned int v54;
  uint64_t v55[2];
  int v56;
  const char *v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  uint64_t v71;

  if (a3 - 3 >= 3)
  {
    sub_101942894();
    __break(1u);
  }
  else
  {
    v4 = a2;
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472;
    v53[2] = sub_101174DE8;
    v53[3] = &unk_10217D868;
    v54 = a3;
    v55[0] = mach_absolute_time();
    v55[1] = (uint64_t)v53;
    v52 = sub_1001CDE58(a3, (_QWORD *)(a1 + 416));
    v3 = &qword_1022A0000;
    if (qword_1022A0040 == -1)
      goto LABEL_3;
  }
  dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
LABEL_3:
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(v52 + 8);
    v9 = *(char *)(v52 + 31);
    v10 = sub_100026CC8(v52 + 184);
    if (v9 >= 0)
      v11 = v52 + 8;
    else
      v11 = v8;
    *(_DWORD *)buf = 136446466;
    v65 = (const char *)v11;
    v66 = 2050;
    v67 = *(double *)&v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TileCell, %{public}s, removeAllTiles, size, %{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v37 = qword_1022A0048;
    v38 = *(_QWORD *)(v52 + 8);
    v39 = *(char *)(v52 + 31);
    v40 = sub_100026CC8(v52 + 184);
    if (v39 >= 0)
      v41 = v52 + 8;
    else
      v41 = v38;
    v56 = 136446466;
    v57 = (const char *)v41;
    v58 = 2050;
    v59 = *(double *)&v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 1, "TileCell, %{public}s, removeAllTiles, size, %{public}lu", &v56, 22);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  v12 = v52 + 184;
  v13 = (_QWORD *)sub_100129380(v52 + 184);
  if (v13 != (_QWORD *)sub_1000DCFC0(v52 + 184))
  {
    do
    {
      if (v4)
      {
        v14 = v13[10];
        sub_100FA2CE0(v14);
        if (v3[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v15 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v16 = sub_1001CC818(*(_DWORD *)(v14 + 48));
          v17 = sub_1001C087C(v14 + 48);
          v18 = sub_1001C0858(v14 + 48);
          v19 = sub_100026CC8(v12);
          *(_DWORD *)buf = 136446979;
          v65 = v16;
          v66 = 2049;
          v67 = v17;
          v68 = 2049;
          v69 = v18;
          v70 = 2050;
          v71 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v3[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          v23 = qword_1022A0048;
          v25 = *(_DWORD *)(v14 + 48);
          v24 = v14 + 48;
          v26 = sub_1001CC818(v25);
          v27 = sub_1001C087C(v24);
          v28 = sub_1001C0858(v24);
          v29 = sub_100026CC8(v12);
          v56 = 136446979;
          v57 = v26;
          v58 = 2049;
          v59 = v27;
          v60 = 2049;
          v61 = v28;
          v62 = 2050;
          v63 = v29;
          LODWORD(v50) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", &v56, v50);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
      }
      v20 = (_QWORD *)v13[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v13[2];
          v22 = *v21 == (_QWORD)v13;
          v13 = v21;
        }
        while (!v22);
      }
      v13 = v21;
    }
    while (v21 != (_QWORD *)sub_1000DCFC0(v12));
  }
  sub_1008B97D8(v12);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v52 + 31) >= 0)
      v33 = v52 + 8;
    else
      v33 = *(_QWORD *)(v52 + 8);
    v34 = sub_100026CC8(v12);
    v35 = sub_1008B97D0(v12);
    *(_DWORD *)buf = 136315650;
    v65 = (const char *)v33;
    v66 = 2048;
    v67 = *(double *)&v34;
    v68 = 2048;
    v69 = *(double *)&v35;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v44 = qword_1022A02D8;
    if (*(char *)(v52 + 31) >= 0)
      v45 = v52 + 8;
    else
      v45 = *(_QWORD *)(v52 + 8);
    v46 = sub_100026CC8(v12);
    v47 = sub_1008B97D0(v12);
    v56 = 136315650;
    v57 = (const char *)v45;
    v58 = 2048;
    v59 = *(double *)&v46;
    v60 = 2048;
    v61 = *(double *)&v47;
    LODWORD(v50) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu", (const char *)&v56, v50, v51);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  return sub_100134E40(v55);
}

void sub_10116FC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100134E40((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10116FC60(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  unsigned int v5;
  std::string::value_type *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v10;
  char *v11;
  std::string::value_type *v12;
  uint64_t *v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  std::string::value_type *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  const char *v32;
  char *v33;
  std::string::value_type *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  const char *v38;
  double v39;
  double v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  uint64_t *v44;
  int v45;
  const char *v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  uint64_t v52;
  _BYTE v53[24];
  __int128 __p;
  uint64_t v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;

  if (a2 - 3 >= 3)
  {
    sub_101942A00();
    __break(1u);
LABEL_39:
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    goto LABEL_12;
  }
  v6 = a4;
  v7 = a3;
  v5 = a2;
  v10 = sub_1001CDE58(a2, (_QWORD *)(a1 + 416));
  sub_101191978(v5, &v44);
  if (v7[23] >= 0)
    v11 = v7;
  else
    v11 = *(char **)v7;
  if (v6[23] >= 0)
    v12 = v6;
  else
    v12 = *(std::string::value_type **)v6;
  if ((sub_100FA5198(v44, v11, v12, v5, 1, a5) & 1) != 0)
  {
    v13 = v44;
    *(_OWORD *)v53 = *((_OWORD *)v44 + 3);
    *(_QWORD *)&v53[16] = v44[8];
    if (*((char *)v44 + 95) < 0)
    {
      sub_100115CE4(&__p, (void *)v44[9], v44[10]);
      v13 = v44;
    }
    else
    {
      __p = *(_OWORD *)(v44 + 9);
      v55 = v44[11];
    }
    sub_101192204((uint64_t)v13, v10, (uint64_t)"lister");
    v19 = v10 + 184;
    v20 = sub_1008B985C((uint64_t **)(v10 + 184), (unsigned int *)v53);
    v21 = v44;
    v44 = 0;
    v22 = *v20;
    *v20 = (uint64_t)v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *(_QWORD *)(v10 + 304);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v25 = sub_1001CC818(v5);
      v26 = sub_1001C087C((uint64_t)v53);
      v27 = sub_1001C0858((uint64_t)v53);
      v28 = sub_100026CC8(v19);
      *(_DWORD *)buf = 136446979;
      v57 = v25;
      v58 = 2049;
      v59 = v26;
      v60 = 2049;
      v61 = v27;
      v62 = 2050;
      v63 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v37 = qword_1022A0048;
      v38 = sub_1001CC818(v5);
      v39 = sub_1001C087C((uint64_t)v53);
      v40 = sub_1001C0858((uint64_t)v53);
      v41 = sub_100026CC8(v19);
      v45 = 136446979;
      v46 = v38;
      v47 = 2049;
      v48 = v39;
      v49 = 2049;
      v50 = v40;
      v51 = 2050;
      v52 = v41;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 1, "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu", &v45, 42);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    sub_1001C85FC(v19, (unsigned int *)v53);
    if (SHIBYTE(v55) < 0)
      operator delete((void *)__p);
    v18 = 1;
    goto LABEL_35;
  }
  v8 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    goto LABEL_39;
LABEL_12:
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v15 = sub_1001CC818(v5);
    if (v7[23] >= 0)
      v16 = v7;
    else
      v16 = *(char **)v7;
    if (v6[23] >= 0)
      v17 = v6;
    else
      v17 = *(std::string::value_type **)v6;
    *(_DWORD *)buf = 136446722;
    v57 = v15;
    v58 = 2082;
    v59 = *(double *)&v16;
    v60 = 2082;
    v61 = *(double *)&v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v31 = qword_1022A0048;
    v32 = sub_1001CC818(v5);
    if (v7[23] >= 0)
      v33 = v7;
    else
      v33 = *(char **)v7;
    if (v6[23] >= 0)
      v34 = v6;
    else
      v34 = *(std::string::value_type **)v6;
    *(_DWORD *)v53 = 136446722;
    *(_QWORD *)&v53[4] = v32;
    *(_WORD *)&v53[12] = 2082;
    *(_QWORD *)&v53[14] = v33;
    *(_WORD *)&v53[22] = 2082;
    *(_QWORD *)&__p = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", v53, 32);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  v18 = 0;
LABEL_35:
  v29 = v44;
  v44 = 0;
  if (v29)
    (*(void (**)(uint64_t *))(*v29 + 8))(v29);
  return v18;
}

void sub_1011701E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_10117024C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10;
  double v11;
  _BOOL4 v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  NSObject *v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int *v25;
  NSObject *v26;
  const char *v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  double v33;
  double v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _BYTE buf[12];
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  __int16 v68;
  uint64_t v69;
  _BYTE __p[12];
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;

  v53 = *(_OWORD *)(a2 + 48);
  v54 = *(_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4(&v55, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v55 = *(_OWORD *)(a2 + 72);
    v56 = *(_QWORD *)(a2 + 88);
  }
  v10 = *(double *)(a1 + 252);
  v11 = *(double *)(a1 + 152);
  v12 = sub_100FA7580((double *)a2, a1 + 176, 30000.0);
  if (!*(_BYTE *)(a1 + 128) || fabs(a5 - v10 + 60.0) >= v11 || !v12)
  {
    sub_100FA72C0(a2, *(unsigned __int8 *)(a1 + 128) != 0);
  }
  else
  {
    v13 = sub_100FA4BB8(a2);
    v14 = a3 + 184;
    sub_1008B9548(v14, (unsigned int *)&v53);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v16 = SHIBYTE(v73);
      v17 = *(_BYTE **)__p;
      v18 = sub_1008B97D0(v14);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v19;
      v58 = 2048;
      v59 = *(double *)&v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu", buf, 0x16u);
      if (SHIBYTE(v73) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v38 = qword_1022A02D8;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      v39 = SHIBYTE(v60);
      v40 = *(_BYTE **)buf;
      v41 = sub_1008B97D0(v14);
      v42 = buf;
      if (v39 < 0)
        v42 = v40;
      v66 = 136315394;
      v67 = v42;
      v68 = 2048;
      v69 = v41;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v38, 2, "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu", (const char *)&v66, 22);
      v44 = v43;
      if (SHIBYTE(v60) < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v44);
      if (v44 != __p)
        free(v44);
    }
    if ((v13 & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v20 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
        v21 = SHIBYTE(v73);
        v22 = *(_BYTE **)__p;
        v23 = sub_1008B97D0(v14);
        v24 = __p;
        if (v21 < 0)
          v24 = v22;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v24;
        v58 = 2048;
        v59 = *(double *)&v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu", buf, 0x16u);
        if (SHIBYTE(v73) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v45 = qword_1022A02D8;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
        v46 = SHIBYTE(v60);
        v47 = *(_BYTE **)buf;
        v48 = sub_1008B97D0(v14);
        v49 = buf;
        if (v46 < 0)
          v49 = v47;
        v66 = 136315394;
        v67 = v49;
        v68 = 2048;
        v69 = v48;
        LODWORD(v52) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v45, 2, "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu", (const char *)&v66, v52);
        v51 = v50;
        if (SHIBYTE(v60) < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v51);
        if (v51 != __p)
          free(v51);
      }
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v25 = (unsigned int *)(a2 + 48);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v27 = sub_1001CC818(*v25);
      v28 = sub_1001C087C((uint64_t)&v53);
      v29 = sub_1001C0858((uint64_t)&v53);
      v30 = sub_1008B97D0(v14);
      *(_DWORD *)__p = 136447235;
      *(_QWORD *)&__p[4] = v27;
      v71 = 2049;
      v72 = v28;
      v73 = 2049;
      v74 = v29;
      v75 = 2082;
      v76 = a4;
      v77 = 2050;
      v78 = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "@TileList, %{public}s, unprotect, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", __p, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v31 = qword_1022A0048;
      v32 = sub_1001CC818(*v25);
      v33 = sub_1001C087C((uint64_t)&v53);
      v34 = sub_1001C0858((uint64_t)&v53);
      v35 = sub_1008B97D0(v14);
      *(_DWORD *)buf = 136447235;
      *(_QWORD *)&buf[4] = v32;
      v58 = 2049;
      v59 = v33;
      v60 = 2049;
      v61 = v34;
      v62 = 2082;
      v63 = a4;
      v64 = 2050;
      v65 = v35;
      LODWORD(v52) = 52;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 1, "@TileList, %{public}s, unprotect, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, v52, v53, v54);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v36);
      if (v37 != __p)
        free(v37);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete((void *)v55);
}

void sub_101170968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id *sub_1011709E4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileDl, tileDownloadedCallback, success, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v5 = *(unsigned __int8 *)(a1 + 56);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileDl, tileDownloadedCallback, success, %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static void CLCellTilesManager::tileDownloadCallback(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_101170BA0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 56));
}

id *sub_101170BA0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  double v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  NSObject *v16;
  const char *v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  unsigned int v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  int v28;
  _BOOL4 v29;
  int v30;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  double v44;
  double v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v50;
  const char *v51;
  double v52;
  double v53;
  int v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  void **v59;
  int v60;
  uint64_t v61;
  int v62;
  _BOOL4 v63;
  int v64;
  char *v65;
  char *v66;
  uint64_t v67;
  const char *v68;
  double v69;
  double v70;
  uint64_t v71;
  const char *v72;
  char *v73;
  const char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void *v88[2];
  char v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  id v95[2];
  unsigned __int8 v96;
  _BYTE __p[12];
  __int16 v98;
  _BYTE v99[10];
  double v100;
  _BYTE v101[12];
  int v102;
  __int16 v103;
  int v104;
  _BYTE buf[12];
  __int16 v106;
  _BYTE v107[10];
  double v108;
  _BYTE v109[12];
  int v110;
  __int16 v111;
  int v112;

  v96 = a3;
  sub_100131938(v95, (uint64_t)"cellTileDownloaded", 0);
  v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
  v6 = sub_10107967C(*(_QWORD **)(a1 + 376), a2);
  v7 = (char *)v6;
  v94 = 0;
  if (v6)
  {
    v90 = *(_OWORD *)(v6 + 48);
    v91 = *(_QWORD *)(v6 + 64);
    if (*(char *)(v6 + 95) < 0)
    {
      sub_100115CE4(&v92, *(void **)(v6 + 72), *(_QWORD *)(v6 + 80));
    }
    else
    {
      v92 = *(_OWORD *)(v6 + 72);
      v93 = *(_QWORD *)(v6 + 88);
    }
    v11 = *((_DWORD *)v7 + 12);
    v12 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
    v13 = a1 + 392;
    v78 = v12;
    if (v96 || v12 == -1100)
      sub_100F5A36C(v13);
    else
      sub_100F5A398(v13, v5);
    v14 = sub_1001CDE58(v11, (_QWORD *)(a1 + 416));
    if (v96 && (_os_feature_enabled_impl("CoreLocation", "TilesService") & 1) == 0)
      v96 = (*(uint64_t (**)(char *, int *))(*(_QWORD *)v7 + 40))(v7, &v94);
    v15 = &qword_1022A0000;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v17 = sub_1001CC818(v11);
      v18 = sub_1001C087C((uint64_t)&v90);
      v19 = sub_1001C0858((uint64_t)&v90);
      v20 = v96;
      v21 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      *(_DWORD *)buf = 136447235;
      *(_QWORD *)&buf[4] = v17;
      v106 = 2049;
      *(double *)v107 = v18;
      *(_WORD *)&v107[8] = 2049;
      v108 = v19;
      *(_WORD *)v109 = 1026;
      *(_DWORD *)&v109[2] = v20;
      *(_WORD *)&v109[6] = 1026;
      *(_DWORD *)&v109[8] = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v50 = qword_1022A0048;
      v51 = sub_1001CC818(v11);
      v52 = sub_1001C087C((uint64_t)&v90);
      v53 = sub_1001C0858((uint64_t)&v90);
      v54 = v96;
      v55 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      *(_DWORD *)__p = 136447235;
      *(_QWORD *)&__p[4] = v51;
      v98 = 2049;
      *(double *)v99 = v52;
      *(_WORD *)&v99[8] = 2049;
      v100 = v53;
      *(_WORD *)v101 = 1026;
      *(_DWORD *)&v101[2] = v54;
      *(_WORD *)&v101[6] = 1026;
      *(_DWORD *)&v101[8] = v55;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", __p, 44);
      v57 = (char *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
    if (v96)
    {
      v22 = v94;
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 16))(v14 + 232);
      *(_DWORD *)(v14 + 276) += v22;
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 24))(v14 + 232);
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 16))(v14 + 232);
      ++*(_DWORD *)(v14 + 284);
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 24))(v14 + 232);
      sub_1015A2E04(buf, "tileDownloadCompleted");
      sub_100CDC4CC(v14 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 352));
      if ((v107[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v24 = v11;
      v25 = __p;
      (*(void (**)(_BYTE *__return_ptr, char *))(*(_QWORD *)v7 + 16))(__p, v7);
      if (v99[9] < 0)
        v25 = *(_BYTE **)__p;
      v26 = v96;
      v27 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      v28 = *(_DWORD *)(a1 + 352);
      v29 = sub_1001C8DA8((unsigned int *)&v90);
      v30 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)buf = 136382467;
      *(_QWORD *)&buf[4] = v25;
      v106 = 1026;
      *(_DWORD *)v107 = v26;
      *(_WORD *)&v107[4] = 1026;
      *(_DWORD *)&v107[6] = v27;
      LOWORD(v108) = 1026;
      *(_DWORD *)((char *)&v108 + 2) = v78 == -1100;
      HIWORD(v108) = 1026;
      *(_DWORD *)v109 = v28;
      *(_WORD *)&v109[4] = 1026;
      *(_DWORD *)&v109[6] = v29;
      *(_WORD *)&v109[10] = 1026;
      v110 = v30;
      v111 = 1026;
      v112 = v94;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d", buf, 0x36u);
      if ((v99[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v11 = v24;
      v15 = &qword_1022A0000;
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v58 = qword_1022A0048;
      v59 = v88;
      (*(void (**)(void **__return_ptr, char *))(*(_QWORD *)v7 + 16))(v88, v7);
      HIDWORD(v77) = v11;
      if (v89 < 0)
        v59 = (void **)v88[0];
      v60 = v96;
      v61 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      v62 = *(_DWORD *)(a1 + 352);
      v63 = sub_1001C8DA8((unsigned int *)&v90);
      v64 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)__p = 136382467;
      *(_QWORD *)&__p[4] = v59;
      v98 = 1026;
      *(_DWORD *)v99 = v60;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v61;
      LOWORD(v100) = 1026;
      *(_DWORD *)((char *)&v100 + 2) = v78 == -1100;
      HIWORD(v100) = 1026;
      *(_DWORD *)v101 = v62;
      *(_WORD *)&v101[4] = 1026;
      *(_DWORD *)&v101[6] = v63;
      *(_WORD *)&v101[10] = 1026;
      v102 = v64;
      v103 = 1026;
      v104 = v94;
      LODWORD(v77) = 54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v58, 2, "@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d", __p, v77);
      v66 = v65;
      if (v89 < 0)
        operator delete(v88[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v66);
      v11 = HIDWORD(v76);
      v15 = &qword_1022A0000;
      if (v66 != buf)
        free(v66);
    }
    if (!sub_1001C8DA8((unsigned int *)&v90))
    {
      if (v15[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v31 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v15[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        *(_WORD *)__p = 0;
        LODWORD(v76) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileError, DecompressionID", __p, v76);
        v75 = (char *)v74;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v74);
        if (v75 != buf)
          free(v75);
      }
    }
    v96 = sub_100FA3220((uint64_t)v7, v96, v78 == -1100, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    sub_101171AF0(a1, v96, v7, v14, v94);
    if (sub_1001DFAE8())
    {
      sub_100119F3C(buf);
      v32 = v7 + 8;
      if (v7[31] < 0)
        v32 = *(char **)v32;
      sub_1005285B4((uint64_t)buf, "gotTile", v32);
      sub_10011B47C((uint64_t)buf, "success", &v96);
      sub_10011B47C((uint64_t)buf, "protection", (_BYTE *)(a1 + 128));
      sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
      sub_10011A5A8(buf);
    }
    if (v96)
    {
      sub_101192204((uint64_t)v7, v14, (uint64_t)"download");
      v33 = *(_QWORD *)(a1 + 376);
      v84 = v90;
      v85 = v91;
      if (SHIBYTE(v93) < 0)
      {
        sub_100115CE4(&v86, (void *)v92, *((unint64_t *)&v92 + 1));
      }
      else
      {
        v86 = v92;
        v87 = v93;
      }
      sub_101079704(v33, (uint64_t)&v84, v96, v78 == -1100, (uint64_t *)v88, v5);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if (v88[0])
      {
        v36 = sub_1008B985C((uint64_t **)(v14 + 184), (unsigned int *)&v90);
        v37 = v88[0];
        v88[0] = 0;
        v38 = *v36;
        *v36 = (uint64_t)v37;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      v39 = sub_1001C85FC(v14 + 184, (unsigned int *)&v90);
      sub_1001C9C90(v39, v5);
      v40 = sub_1001C85FC(v14 + 184, (unsigned int *)&v90);
      sub_10117024C(a1, v40, v14, (uint64_t)"download", v5);
      v41 = *(_QWORD *)(v14 + 304);
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v42 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v43 = sub_1001CC818(v11);
        v44 = sub_1001C087C((uint64_t)&v90);
        v45 = sub_1001C0858((uint64_t)&v90);
        v46 = sub_100026CC8(v14 + 184);
        *(_DWORD *)buf = 136446979;
        *(_QWORD *)&buf[4] = v43;
        v106 = 2049;
        *(double *)v107 = v44;
        *(_WORD *)&v107[8] = 2049;
        v108 = v45;
        *(_WORD *)v109 = 2050;
        *(_QWORD *)&v109[2] = v46;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v67 = qword_1022A0048;
        v68 = sub_1001CC818(v11);
        v69 = sub_1001C087C((uint64_t)&v90);
        v70 = sub_1001C0858((uint64_t)&v90);
        v71 = sub_100026CC8(v14 + 184);
        *(_DWORD *)__p = 136446979;
        *(_QWORD *)&__p[4] = v68;
        v98 = 2049;
        *(double *)v99 = v69;
        *(_WORD *)&v99[8] = 2049;
        v100 = v70;
        *(_WORD *)v101 = 2050;
        *(_QWORD *)&v101[2] = v71;
        LODWORD(v76) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v67, 1, "@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", __p, v76);
        v73 = (char *)v72;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v72);
        if (v73 != buf)
          free(v73);
      }
      ++*(_DWORD *)(v14 + 288);
      if ((sub_1001CC83C(*(_DWORD *)(a1 + 352), *(unsigned __int8 *)(a1 + 356)) & 1) == 0)
        ++*(_DWORD *)(v14 + 292);
      sub_10116E494(a1, v5);
      v47 = v88[0];
      v88[0] = 0;
      if (v47)
        (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
    }
    else
    {
      v34 = *(_QWORD *)(a1 + 376);
      v79 = v90;
      v80 = v91;
      if (SHIBYTE(v93) < 0)
      {
        sub_100115CE4(&v81, (void *)v92, *((unint64_t *)&v92 + 1));
        v35 = v96 != 0;
      }
      else
      {
        v35 = 0;
        v81 = v92;
        v82 = v93;
      }
      sub_101079704(v34, (uint64_t)&v79, v35, v78 == -1100, &v83, v5);
      v48 = v83;
      v83 = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      if (SHIBYTE(v82) < 0)
        operator delete((void *)v81);
    }
    if (SHIBYTE(v93) < 0)
      operator delete((void *)v92);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "@TileError, tile not on download list, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "@TileError, tile not on download list, #CloneMe", __p, 2);
      v10 = (char *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  sub_10116DD84(a1, v5);
  return sub_100131740(v95);
}

void sub_1011719C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,id a41)
{
  if (a39 < 0)
    operator delete(__p);
  sub_100131740(&a41);
  _Unwind_Resume(a1);
}

void sub_101171AF0(uint64_t a1, char a2, _DWORD *a3, uint64_t a4, int a5)
{
  double v10;
  int v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  _BYTE *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  void **v24;
  std::string *v25;
  std::string *data;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  void *v30[2];
  char v31;
  _OWORD v32[8];
  _OWORD v33[2];
  _BYTE v34[4];
  int v35;
  std::string v36[2];
  std::string v37;
  int v38;
  unsigned __int8 v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  std::string *v46;
  __int16 v47;
  std::string *v48;
  __int16 v49;
  std::string *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  std::string buf;
  __int16 v56;
  std::string *v57;
  __int16 v58;
  std::string *v59;
  __int16 v60;
  std::string *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;

  v10 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
  v11 = a3[12];
  memset(&v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  v34[0] = a2;
  v35 = v11;
  std::string::operator=(v36, (const std::string *)(a4 + 56));
  sub_100BCC62C((uint64_t)(a3 + 12), &buf);
  if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36[1].__r_.__value_.__l.__data_);
  v36[1] = buf;
  sub_100FA2C30((uint64_t)a3, &buf);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v37 = buf;
  v38 = a5;
  v12 = *(double *)(a4 + 136);
  v13 = *(_OWORD *)(a1 + 272);
  v14 = *(_OWORD *)(a1 + 304);
  v32[7] = *(_OWORD *)(a1 + 288);
  v33[0] = v14;
  *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(a1 + 316);
  v15 = *(_OWORD *)(a1 + 224);
  v32[2] = *(_OWORD *)(a1 + 208);
  v32[3] = v15;
  v16 = *(_OWORD *)(a1 + 256);
  v32[4] = *(_OWORD *)(a1 + 240);
  v32[5] = v16;
  v32[6] = v13;
  v17 = *(_OWORD *)(a1 + 192);
  v32[0] = *(_OWORD *)(a1 + 176);
  v32[1] = v17;
  v39 = sub_1011914B0((uint64_t)a3, (uint64_t)v32, v12, v10);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v18 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v40, a3);
    v19 = v44 >= 0 ? v40 : *(_BYTE **)v40;
    v20 = (v36[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? v36
        : (std::string *)v36[0].__r_.__value_.__r.__words[0];
    v21 = (v36[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v36[1]
        : (std::string *)v36[1].__r_.__value_.__r.__words[0];
    v22 = (v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v37
        : (std::string *)v37.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136382467;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v35;
    v56 = 2081;
    v57 = v20;
    v58 = 2081;
    v59 = v21;
    v60 = 2081;
    v61 = v22;
    v62 = 1026;
    v63 = a5;
    v64 = 1026;
    v65 = v39;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s, size, %{public}d, current, %{public}d", (uint8_t *)&buf, 0x42u);
    if (SHIBYTE(v44) < 0)
      operator delete(*(void **)v40);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v23 = qword_1022A0048;
    (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v30, a3);
    if (v31 >= 0)
      v24 = v30;
    else
      v24 = (void **)v30[0];
    if ((v36[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = v36;
    else
      v25 = (std::string *)v36[0].__r_.__value_.__r.__words[0];
    if ((v36[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      data = &v36[1];
    else
      data = (std::string *)v36[1].__r_.__value_.__l.__data_;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v37;
    else
      v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
    *(_DWORD *)v40 = 136382467;
    *(_QWORD *)&v40[4] = v24;
    v41 = 1026;
    v42 = v34[0];
    v43 = 1026;
    v44 = v35;
    v45 = 2081;
    v46 = v25;
    v47 = 2081;
    v48 = data;
    v49 = 2081;
    v50 = v27;
    v51 = 1026;
    v52 = a5;
    v53 = 1026;
    v54 = v39;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s, size, %{public}d, current, %{public}d", v40, 66);
    v29 = v28;
    if (v31 < 0)
      operator delete(v30[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &, unsigned int)", "%s\n", (const char *)v29);
    if (v29 != &buf)
      free(v29);
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &buf, v34, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36[0].__r_.__value_.__l.__data_);
}

void sub_101171F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_100C0FC30((uint64_t)&a36);
  _Unwind_Resume(a1);
}

id sub_101171FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101172014;
  v5[3] = &unk_102143528;
  v5[4] = v2;
  v5[5] = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_101172014(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 368) + 16))(*(_QWORD *)(v2 + 368));
  v4 = *(_QWORD *)(a1 + 40) + 184;
  v5 = (_QWORD *)sub_100129380(v4);
  v6 = sub_1000DCFC0(v4);
  if (v5 != (_QWORD *)v6)
  {
    v7 = (_QWORD *)v6;
    v8 = 0;
    do
    {
      v9 = sub_101079AF0(*(_QWORD *)(v2 + 376), v5[10], v3);
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v8 |= v9;
      v5 = v11;
    }
    while (v11 != v7);
    if ((v8 & 1) != 0)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 368) + 40))(*(_QWORD *)(v2 + 368));
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v14 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileSched, cell, set, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v17[0] = 67240192;
        v17[1] = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, cell, set, %{public}d", v17, 8);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::refreshTilesDataIfNeeded()_block_invoke", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
}

uint64_t sub_101172270(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  int v13;
  void **v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  void **v29;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  const char *v44;
  _BYTE buf[22];
  char v46;
  int v47;
  _BYTE v48[18];
  void *__p;
  int v50;
  __int16 v51;
  char v52;

  v9 = sub_1001EC348((uint64_t)a3);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_101347C78(a3, &__p);
    v11 = v52 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s", buf, 0x16u);
    if (v52 < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v31 = qword_1022A02D8;
    sub_101347C78(a3, buf);
    if (v46 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    v47 = 134218242;
    *(_QWORD *)v48 = v9;
    *(_WORD *)&v48[8] = 2080;
    *(_QWORD *)&v48[10] = v32;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v31, 2, "TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s", &v47, 22);
    v34 = v33;
    if (v46 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v34);
    if (v34 != (char *)&__p)
      free(v34);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = sub_1001C9408((uint64_t)a2, *(_BYTE *)(a1 + 128));
    (*(void (**)(void **__return_ptr, _QWORD *))(*a2 + 16))(&__p, a2);
    v14 = v52 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, in tile, accessible, %d, %s", buf, 0x12u);
    if (v52 < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v35 = qword_1022A02D8;
    v36 = sub_1001C9408((uint64_t)a2, *(_BYTE *)(a1 + 128));
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a2 + 16))(buf, a2);
    if (v46 >= 0)
      v37 = buf;
    else
      v37 = *(_BYTE **)buf;
    v47 = 67109378;
    *(_DWORD *)v48 = v36;
    *(_WORD *)&v48[4] = 2080;
    *(_QWORD *)&v48[6] = v37;
    LODWORD(v44) = 18;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v35, 2, "TILE: getLocationByCellFromTile, in tile, accessible, %d, %s", &v47, v44);
    v39 = v38;
    if (v46 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v39);
    if (v39 != (char *)&__p)
      free(v39);
  }
  if (!sub_1001C9408((uint64_t)a2, *(_BYTE *)(a1 + 128)))
    return 0;
  v15 = a3[2];
  if (v15 > 7 || ((1 << v15) & 0x87) == 0 || a2[8] != v9)
  {
    if (v15 - 3 > 2)
    {
      if (v15 == 6 && a2[8] == v9)
      {
        v51 = 0;
        v50 = 0;
        *(_QWORD *)&buf[6] = 0;
        *(_QWORD *)buf = 0;
        __p = *(void **)(sub_1001E3CA4((uint64_t)a3) + 8);
        v21 = (*(uint64_t (**)(_QWORD *, void **, _BYTE *))(*a2 + 176))(a2, &__p, buf);
LABEL_33:
        if (v21)
          goto LABEL_24;
        goto LABEL_34;
      }
    }
    else if (a2[8] == v9)
    {
      v51 = 0;
      v50 = 0;
      *(_QWORD *)&buf[6] = 0;
      *(_QWORD *)buf = 0;
      LODWORD(__p) = *(_DWORD *)(sub_100704A28((uint64_t)a3) + 32);
      HIDWORD(__p) = *(_DWORD *)(sub_100704A28((uint64_t)a3) + 44);
      v21 = (*(uint64_t (**)(_QWORD *, void **, _BYTE *))(*a2 + 176))(a2, &__p, buf);
      goto LABEL_33;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v28 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_101347C78(a3, &__p);
      v29 = v52 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: no cell tiles for, %s", buf, 0xCu);
      if (v52 < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v40 = qword_1022A02D8;
      sub_101347C78(a3, buf);
      if (v46 >= 0)
        v41 = buf;
      else
        v41 = *(_BYTE **)buf;
      v47 = 136315138;
      *(_QWORD *)v48 = v41;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v40, 2, "TILE: no cell tiles for, %s", (const char *)&v47);
      v43 = v42;
      if (v46 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v43);
      if (v43 != (char *)&__p)
        free(v43);
    }
    return 0;
  }
  v51 = 0;
  v50 = 0;
  *(_QWORD *)&buf[6] = 0;
  *(_QWORD *)buf = 0;
  __p = *(void **)(sub_1007057DC((uint64_t)a3) + 8);
  if ((*(unsigned int (**)(_QWORD *, void **, _BYTE *))(*a2 + 176))(a2, &__p, buf))
  {
LABEL_24:
    v17 = *(unsigned __int16 *)&buf[8];
    v18 = *(unsigned __int16 *)&buf[10];
    LOBYTE(v16) = buf[12];
    *(double *)(a5 + 20) = (double)v16 * 1000.0;
    sub_100FA6940((uint64_t)a2, v17, v18, (double *)(a5 + 4), (double *)(a5 + 12));
    *(_OWORD *)(a5 + 28) = xmmword_101BAFEE0;
    *(double *)(a5 + 76) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
    *(_QWORD *)(a5 + 88) = 0xBFF0000000000000;
    *(_DWORD *)(a5 + 96) = 6;
    *(_QWORD *)(a5 + 128) = 0x100000032;
    *(_DWORD *)(a5 + 84) = 70;
    if (sub_1001C9408((uint64_t)a2, *(_BYTE *)(a1 + 128)))
    {
      v19 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
      sub_1001C9C90((uint64_t)a2, v19);
    }
    v20 = 1;
    goto LABEL_35;
  }
LABEL_34:
  v20 = 0;
LABEL_35:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v22 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100071A00(a5, &__p);
    v23 = v52 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v20;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s", buf, 0x12u);
    if (v52 < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v24 = qword_1022A02D8;
    sub_100071A00(a5, buf);
    if (v46 >= 0)
      v25 = buf;
    else
      v25 = *(_BYTE **)buf;
    v47 = 67109378;
    *(_DWORD *)v48 = v20;
    *(_WORD *)&v48[4] = 2080;
    *(_QWORD *)&v48[6] = v25;
    LODWORD(v44) = 18;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v24, 2, "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s", &v47, v44);
    v27 = v26;
    if (v46 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v27);
    if (v27 != (char *)&__p)
      free(v27);
  }
  return v20;
}

BOOL sub_101172C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  _BOOL4 v21;
  _BOOL4 v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  uint8_t *v31;
  uint64_t v32;
  __int128 *v33;
  char *v34;
  unsigned int *v35;
  NSObject *v36;
  _BOOL8 v37;
  NSObject *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  double v42;
  double v43;
  NSObject *v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  double v55;
  float32_t v56;
  NSObject *v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  NSObject *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  uint64_t v65;
  _BYTE *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  NSObject *v74;
  uint8_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  char *v82;
  char v83;
  uint64_t v85;
  _BYTE *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _DWORD *v96;
  unsigned int *v97;
  char **v99;
  char *v100[2];
  std::string v101;
  int v102;
  _BYTE v103[14];
  __int16 v104;
  unsigned int v105;
  char v106;
  int v107;
  _BYTE *v108;
  __int128 v109;
  uint64_t v110;
  std::string __p;
  __int128 v112;
  uint64_t v113;
  std::string v114;
  uint8_t buf[8];
  __int16 v116;
  unsigned int v117;
  __int16 v118;
  unsigned int v119;
  char v120;

  v102 = 0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  *(_BYTE *)(a5 + 152) = 0;
  *(_DWORD *)a5 = 0xFFFF;
  *(_QWORD *)(a5 + 12) = 0;
  *(_QWORD *)(a5 + 4) = 0;
  *(_OWORD *)(a5 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a5 + 36) = _Q0;
  *(_OWORD *)(a5 + 52) = _Q0;
  *(_OWORD *)(a5 + 68) = _Q0;
  *(_DWORD *)(a5 + 84) = 0;
  *(_QWORD *)(a5 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a5 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 124) = 0x7FFFFFFF;
  if (!*(_BYTE *)(a1 + 129))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v23 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v25 = *(unsigned __int8 *)(a1 + 128);
    LODWORD(v112) = 67109120;
    DWORD1(v112) = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d", &v112);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v26);
    goto LABEL_33;
  }
  v11 = (unsigned int *)a2;
  v96 = (_DWORD *)(a5 + 96);
  v12 = sub_1001EC348(a2);
  v13 = v11[2];
  if (v13 < 3)
    goto LABEL_5;
  if (v13 == 9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v30 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_101347C78(v11, buf);
      v31 = v120 >= 0 ? buf : *(uint8_t **)buf;
      LODWORD(v112) = 136315138;
      *(_QWORD *)((char *)&v112 + 4) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: no tiles for, %s", (uint8_t *)&v112, 0xCu);
      if (v120 < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v32 = qword_1022A02D8;
    sub_101347C78(v11, &v112);
    if (v113 >= 0)
      v33 = &v112;
    else
      v33 = (__int128 *)v112;
    LODWORD(v109) = 136315138;
    *(_QWORD *)((char *)&v109 + 4) = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "TILE: no tiles for, %s", (const char *)&v109);
    v27 = v34;
    if (SHIBYTE(v113) < 0)
      operator delete((void *)v112);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v27);
    goto LABEL_52;
  }
  if (v13 == 7)
  {
LABEL_5:
    v14 = 3;
LABEL_6:
    v102 = v14;
    goto LABEL_7;
  }
  if (v13 - 3 > 2)
  {
    if (v13 == 6)
    {
      v14 = 4;
      goto LABEL_6;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v38 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      sub_101347C78(v11, buf);
      v39 = v120 >= 0 ? buf : *(uint8_t **)buf;
      LODWORD(v112) = 136380675;
      *(_QWORD *)((char *)&v112 + 4) = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "CellTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe", (uint8_t *)&v112, 0xCu);
      if (v120 < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v89 = qword_1022A0048;
    sub_101347C78(v11, &v112);
    if (v113 >= 0)
      v90 = &v112;
    else
      v90 = (__int128 *)v112;
    LODWORD(v109) = 136380675;
    *(_QWORD *)((char *)&v109 + 4) = v90;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v89, 16, "CellTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe", &v109, 12);
    v27 = v91;
    if (SHIBYTE(v113) < 0)
      operator delete((void *)v112);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v27);
LABEL_52:
    if (v27 == (char *)buf)
      return 0;
    goto LABEL_34;
  }
  v14 = 5;
  v102 = 5;
  if (v13 != 3)
    return 0;
LABEL_7:
  v15 = sub_1001CDE58(v14, (_QWORD *)(a1 + 416));
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v28 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, tiles, %d, are not active on this device", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    LODWORD(v112) = 67109120;
    DWORD1(v112) = v102;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, tiles, %d, are not active on this device", &v112);
    v27 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v29);
LABEL_33:
    if (v27 == (char *)buf)
      return 0;
LABEL_34:
    free(v27);
    return 0;
  }
  v16 = v15;
  v17 = *(_QWORD *)(v15 + 296);
  v18 = *(_QWORD *)(v15 + 304);
  sub_1001C36E4(v11, &v101);
  v93 = v17;
  v94 = v18;
  if (v17)
    _ZF = v18 == 0;
  else
    _ZF = 1;
  v20 = !_ZF;
  v95 = v20;
  if (_ZF)
    goto LABEL_84;
  v21 = sub_101173FFC(v17, &v101, (_OWORD *)a5);
  v22 = !v21 && sub_101173FFC(v18, &v101, (_OWORD *)a5);
  v35 = v11;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v36 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v21;
    v116 = 1024;
    v117 = v22;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d", buf, 0xEu);
  }
  v11 = v35;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    LODWORD(v112) = 67109376;
    DWORD1(v112) = v21;
    WORD4(v112) = 1024;
    *(_DWORD *)((char *)&v112 + 10) = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d", &v112, 14);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
    v11 = v35;
    if (v21)
      goto LABEL_64;
  }
  else if (v21)
  {
LABEL_64:
    *(double *)(a5 + 76) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
    v37 = 1;
    goto LABEL_177;
  }
  if (!v22)
  {
LABEL_84:
    v42 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
    v100[0] = 0;
    v100[1] = 0;
    v99 = v100;
    v43 = *(double *)(a3 + 76);
    sub_1000C1928((uint64_t)&v112, &v102);
    sub_1000C1928((uint64_t)&v109, &v102);
    v97 = v11;
    if (*(double *)(a3 + 20) >= 0.0 && vabdd_f64(v42, v43) <= 3600.0 * 0.5)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v44 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_100071A00(a3, buf);
        v45 = v120 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v103 = 136315138;
        *(_QWORD *)&v103[4] = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, using locationHint, %s", v103, 0xCu);
        if (v120 < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v85 = qword_1022A02D8;
        sub_100071A00(a3, v103);
        if (v106 >= 0)
          v86 = v103;
        else
          v86 = *(_BYTE **)v103;
        v107 = 136315138;
        v108 = v86;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, 2, "TILE: getLocationByCell, using locationHint, %s", (const char *)&v107);
        v88 = v87;
        if (v106 < 0)
          operator delete(*(void **)v103);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v88);
        if (v88 != (char *)buf)
          free(v88);
      }
      sub_1001CB024((uint64_t)&v112, v12, *(double *)(a3 + 4), *(double *)(a3 + 12), *(double *)(v16 + 152), *(double *)(v16 + 160));
    }
    if (sub_1001C8DA8((unsigned int *)&v112)
      && (v47 = (_QWORD *)sub_1001C85FC(v16 + 184, (unsigned int *)&v112)) != 0
      && (v48 = sub_101172270(a1, v47, v11, v46, a5),
          *(_QWORD *)buf = v47 + 6,
          sub_10117B7F0((uint64_t **)&v99, (uint64_t)(v47 + 6), (uint64_t)&unk_101B9EB60, (_OWORD **)buf)[10] = (uint64_t)v47,
          (v48 & 1) != 0))
    {
LABEL_99:
      sub_100129380(v16 + 184);
      v49 = v95;
      if (*v96 != 6)
        v49 = 0;
      if ((v49 & 1) == 0)
        goto LABEL_170;
    }
    else
    {
      v50 = 0;
      v51 = &byte_101C4379D;
      v52 = v16 + 184;
      do
      {
        if (!sub_1001C8DA8((unsigned int *)&v112))
          break;
        v53 = *v51;
        v54 = *(v51 - 1);
        v109 = v112;
        v110 = v113;
        std::string::operator=(&__p, &v114);
        v55 = *(double *)(v16 + 160);
        v56 = *(double *)(v16 + 152);
        *(float *)&v55 = v55;
        sub_1001C85C8((uint64_t)&v109, v53, v54, v56, *(float32x2_t *)&v55);
        if (sub_1001C8DA8((unsigned int *)&v109))
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
          v57 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = v50;
            v116 = 1024;
            v117 = v53;
            v118 = 1024;
            v119 = v54;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d", buf, 0x14u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
            *(_DWORD *)v103 = 67109632;
            *(_DWORD *)&v103[4] = v50;
            *(_WORD *)&v103[8] = 1024;
            *(_DWORD *)&v103[10] = v53;
            v104 = 1024;
            v105 = v54;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d", v103, 20, v92);
            v64 = (uint8_t *)v63;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          v59 = (_QWORD *)sub_1001C85FC(v16 + 184, (unsigned int *)&v109);
          if (v59)
          {
            v60 = sub_101172270(a1, v59, v11, v58, a5);
            *(_QWORD *)buf = v59 + 6;
            sub_10117B7F0((uint64_t **)&v99, (uint64_t)(v59 + 6), (uint64_t)&unk_101B9EB60, (_OWORD **)buf)[10] = (uint64_t)v59;
            if ((v60 & 1) != 0)
              goto LABEL_99;
          }
        }
        else
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
          v61 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            sub_100BCC240((unsigned int *)&v109, buf);
            v62 = buf;
            if (v120 < 0)
              v62 = *(uint8_t **)buf;
            *(_DWORD *)v103 = 136315138;
            *(_QWORD *)&v103[4] = v62;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, out of boundary, %s", v103, 0xCu);
            if (v120 < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
            v65 = qword_1022A02D8;
            sub_100BCC240((unsigned int *)&v109, v103);
            v66 = v103;
            if (v106 < 0)
              v66 = *(_BYTE **)v103;
            v107 = 136315138;
            v108 = v66;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 2, "TILE: getLocationByCell, out of boundary, %s", (const char *)&v107);
            v68 = v67;
            if (v106 < 0)
              operator delete(*(void **)v103);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v68);
            if (v68 != (char *)buf)
              free(v68);
          }
        }
        ++v50;
        v51 += 2;
      }
      while (v50 != 24);
      v69 = (_QWORD *)sub_100129380(v16 + 184);
      do
      {
        v70 = v69;
        v71 = sub_1000DCFC0(v52);
        v37 = v70 != (_QWORD *)v71;
        if (v70 == (_QWORD *)v71)
          break;
        v72 = (_QWORD *)v70[10];
        if (v100 == sub_1001C8840((uint64_t)&v99, (uint64_t)(v72 + 6)))
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
          v74 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*v72 + 16))(buf, v72);
            v75 = v120 >= 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)v103 = 136315138;
            *(_QWORD *)&v103[4] = v75;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search remaining tiles, %s", v103, 0xCu);
            if (v120 < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
            v79 = qword_1022A02D8;
            (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v72 + 16))(v103, v72);
            v80 = v103;
            if (v106 < 0)
              v80 = *(_BYTE **)v103;
            v107 = 136315138;
            v108 = v80;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "TILE: getLocationByCell, search remaining tiles, %s", (const char *)&v107);
            v82 = v81;
            if (v106 < 0)
              operator delete(*(void **)v103);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v82);
            if (v82 != (char *)buf)
              free(v82);
          }
          v73 = sub_101172270(a1, v72, v97, v76, a5);
          *(_QWORD *)buf = v72 + 6;
          sub_10117B7F0((uint64_t **)&v99, (uint64_t)(v72 + 6), (uint64_t)&unk_101B9EB60, (_OWORD **)buf)[10] = (uint64_t)v72;
        }
        else
        {
          v73 = 0;
        }
        v77 = (_QWORD *)v70[1];
        v78 = v70;
        if (v77)
        {
          do
          {
            v69 = v77;
            v77 = (_QWORD *)*v77;
          }
          while (v77);
        }
        else
        {
          do
          {
            v69 = (_QWORD *)v78[2];
            _ZF = *v69 == (_QWORD)v78;
            v78 = v69;
          }
          while (!_ZF);
        }
      }
      while ((v73 & 1) == 0);
      v83 = v95;
      if (*v96 != 6)
        v83 = 0;
      if ((v83 & 1) == 0)
        goto LABEL_172;
      if (v70 == (_QWORD *)v71)
      {
        sub_101174460(v94, &v101, a5);
        v37 = 0;
        goto LABEL_172;
      }
    }
    sub_101174460(v93, &v101, a5);
LABEL_170:
    v37 = 1;
LABEL_172:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    sub_100067A00((uint64_t)&v99, v100[0]);
    goto LABEL_177;
  }
  v37 = 0;
  *(double *)(a5 + 76) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
LABEL_177:
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  return v37;
}

void sub_101173F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a48 < 0)
    operator delete(__p);
  if (a57 < 0)
    operator delete(a52);
  sub_100067A00((uint64_t)&a24, a25);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

BOOL sub_101173FFC(uint64_t a1, std::string *a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  void *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  void **v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void **v30;
  void **v31;
  void **v32;
  char *v33;
  char *v34;
  const char *v35;
  const char *v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  _BYTE v41[12];
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void **v45;
  __int16 v46;
  void **v47;
  void *__p[4];
  __int16 v49;
  void **v50;

  v6 = sub_10019C4C0(a1 + 56, (const void **)&a2->__r_.__value_.__l.__data_);
  v7 = v6;
  v8 = a1 + 64;
  if (a1 + 64 != v6)
  {
    v9 = *(_OWORD *)(v6 + 72);
    *a3 = *(_OWORD *)(v6 + 56);
    a3[1] = v9;
    v10 = *(_OWORD *)(v6 + 88);
    v11 = *(_OWORD *)(v6 + 104);
    v12 = *(_OWORD *)(v6 + 136);
    a3[4] = *(_OWORD *)(v6 + 120);
    a3[5] = v12;
    a3[2] = v10;
    a3[3] = v11;
    v13 = *(_OWORD *)(v6 + 152);
    v14 = *(_OWORD *)(v6 + 168);
    v15 = *(_OWORD *)(v6 + 184);
    *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)(v6 + 196);
    a3[7] = v14;
    a3[8] = v15;
    a3[6] = v13;
    memset(__p, 0, sizeof(__p));
    v16 = *(_QWORD *)(v6 + 216);
    if (v16 == a1 + 88)
    {
      std::string::operator=((std::string *)&__p[1], a2);
    }
    else
    {
      __p[0] = *(void **)(v16 + 32);
      std::string::operator=((std::string *)&__p[1], (const std::string *)(v16 + 40));
      sub_10009B91C((uint64_t **)(a1 + 80), *(_QWORD *)(v7 + 216));
    }
    __p[0] = COERCE_VOID_(CFAbsoluteTimeGetCurrent());
    sub_10117B584(a1, (uint64_t)__p, v7 + 56);
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v18 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v18 = (_QWORD *)*v18;
    v19 = *(void **)(a1 + 72);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 56))(v41, a1, a2);
    v36 = (const char *)a2;
    v20 = SHIBYTE(v44);
    v21 = *(_BYTE **)v41;
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 72))(v39, a1, a3);
    v22 = v41;
    if (v20 < 0)
      v22 = v21;
    if (v40 >= 0)
      v23 = v39;
    else
      v23 = (void **)v39[0];
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = v18;
    WORD2(__p[1]) = 2048;
    *(void **)((char *)&__p[1] + 6) = v19;
    HIWORD(__p[2]) = 2080;
    __p[3] = v22;
    v49 = 2080;
    v50 = v23;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s", (uint8_t *)__p, 0x2Au);
    if (v40 < 0)
      operator delete(v39[0]);
    v8 = a1 + 64;
    if (SHIBYTE(v44) < 0)
      operator delete(*(void **)v41);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v25 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v25 = (_QWORD *)*v25;
    v26 = qword_1022A02D8;
    v27 = *(_QWORD *)(a1 + 72);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 56))(v39, a1, a2);
    v28 = v8;
    v29 = v40;
    v30 = (void **)v39[0];
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 72))(v37, a1, a3);
    v31 = v39;
    if (v29 < 0)
      v31 = v30;
    if (v38 >= 0)
      v32 = v37;
    else
      v32 = (void **)v37[0];
    *(_DWORD *)v41 = 136315906;
    *(_QWORD *)&v41[4] = v25;
    v42 = 2048;
    v43 = v27;
    v44 = 2080;
    v45 = v31;
    v46 = 2080;
    v47 = v32;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v26, 2, "CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s", v41, 42, v35, v36);
    v34 = v33;
    if (v38 < 0)
      operator delete(v37[0]);
    v8 = v28;
    if (v40 < 0)
      operator delete(v39[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEntryCache<std::string, CLDaemonLocation>::getEntry(const Key_T &, DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v34);
    if (v34 != (char *)__p)
      free(v34);
  }
  return v8 != v7;
}

void sub_101174410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101174460(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  CFAbsoluteTime Current;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  NSObject *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void **v48;
  void **v49;
  void **v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  double v66;
  std::string v67;
  _BYTE v68[12];
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  void **v72;
  __int16 v73;
  void **v74;
  _BYTE __p[96];
  __int128 v76;
  __int128 v77;
  _BYTE v78[32];
  uint64_t v79;
  _BYTE buf[12];
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  _BYTE *v84;
  __int16 v85;
  void **v86;

  v60 = a3;
  v4 = (uint64_t **)(a1 + 56);
  v5 = sub_10019C4C0(a1 + 56, (const void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 64 != v5)
  {
    v6 = *(_QWORD *)(v5 + 216);
    if (a1 + 88 == v6)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v8 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v8 = (_QWORD *)*v8;
        v9 = *(_QWORD *)(a1 + 72);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 56))(__p, a1, a2);
        if (__p[23] >= 0)
          v10 = __p;
        else
          v10 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v8;
        v81 = 2048;
        v82 = v9;
        v83 = 2080;
        v84 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "CACHE: name, %s, bad set iterator - recovering, size, %lu, %s", buf, 0x20u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v53 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v53 = (_QWORD *)*v53;
        v54 = qword_1022A02D8;
        v55 = *(_QWORD *)(a1 + 72);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 56))(v68, a1, a2);
        if (v71 >= 0)
          v56 = v68;
        else
          v56 = *(_BYTE **)v68;
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v53;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v55;
        *(_WORD *)&__p[22] = 2080;
        *(_QWORD *)&__p[24] = v56;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 17, "CACHE: name, %s, bad set iterator - recovering, size, %lu, %s", __p, 32, (const char *)v60);
        v58 = v57;
        if (SHIBYTE(v71) < 0)
          operator delete(*(void **)v68);
        sub_100512490("Generic", 1, 0, 0, "void CLEntryCache<std::string, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v58);
        if (v58 != buf)
          free(v58);
      }
    }
    else
    {
      sub_10019CD70(v4, (const void **)(v6 + 40));
      sub_10009B91C((uint64_t **)(a1 + 80), v6);
    }
    v11 = sub_10019C4C0((uint64_t)v4, (const void **)&a2->__r_.__value_.__l.__data_);
    if (a1 + 64 != v11)
      sub_100675198(v4, v11);
  }
  Current = CFAbsoluteTimeGetCurrent();
  memset(&v67, 0, sizeof(v67));
  *(_OWORD *)&__p[4] = 0uLL;
  *(_OWORD *)&__p[20] = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&__p[36] = _Q1;
  *(_OWORD *)&__p[52] = _Q1;
  *(_OWORD *)&__p[68] = _Q1;
  *(_DWORD *)__p = 0xFFFF;
  *(_DWORD *)&__p[84] = 0;
  v76 = 0uLL;
  *(_QWORD *)&__p[88] = 0xBFF0000000000000;
  *(_QWORD *)((char *)&v77 + 4) = 0xBFF0000000000000;
  LODWORD(v77) = 0;
  HIDWORD(v77) = 0x7FFFFFFF;
  memset(v78, 0, 25);
  v79 = 0;
  v66 = Current;
  if (*(_BYTE *)(a1 + 40))
  {
    v18 = *(double *)(a1 + 48);
    v66 = v66 - (double)(rand() % ((int)(v18 * 0.9) / 9));
  }
  v19 = *(_OWORD *)(v60 + 112);
  v76 = *(_OWORD *)(v60 + 96);
  v77 = v19;
  *(_OWORD *)v78 = *(_OWORD *)(v60 + 128);
  *(_OWORD *)&v78[12] = *(_OWORD *)(v60 + 140);
  v20 = *(_OWORD *)(v60 + 48);
  *(_OWORD *)&__p[32] = *(_OWORD *)(v60 + 32);
  *(_OWORD *)&__p[48] = v20;
  v21 = *(_OWORD *)(v60 + 80);
  *(_OWORD *)&__p[64] = *(_OWORD *)(v60 + 64);
  *(_OWORD *)&__p[80] = v21;
  v22 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)__p = *(_OWORD *)v60;
  *(_OWORD *)&__p[16] = v22;
  std::string::operator=(&v67, a2);
  sub_10117B584(a1, (uint64_t)&v66, (uint64_t)__p);
  *(_QWORD *)buf = a2;
  v23 = sub_10117B938(v4, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  v24 = v76;
  *(_OWORD *)(v23 + 21) = v77;
  v25 = *(_OWORD *)&v78[16];
  *(_OWORD *)(v23 + 23) = *(_OWORD *)v78;
  *(_OWORD *)(v23 + 25) = v25;
  v26 = v79;
  v27 = *(_OWORD *)&__p[32];
  *(_OWORD *)(v23 + 13) = *(_OWORD *)&__p[48];
  v28 = *(_OWORD *)&__p[80];
  *(_OWORD *)(v23 + 15) = *(_OWORD *)&__p[64];
  *(_OWORD *)(v23 + 17) = v28;
  *(_OWORD *)(v23 + 19) = v24;
  v29 = *(_OWORD *)&__p[16];
  *(_OWORD *)(v23 + 7) = *(_OWORD *)__p;
  v30 = (uint64_t *)(a1 + 8);
  v23[27] = v26;
  *(_OWORD *)(v23 + 9) = v29;
  *(_OWORD *)(v23 + 11) = v27;
  while (*(_QWORD *)(a1 + 72) > *(_QWORD *)(a1 + 32))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v31 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v32 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v32 = (_QWORD *)*v30;
      v33 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v32;
      v81 = 2048;
      v82 = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, cache too large, evicting, size, %lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v34 = a1 + 8;
      if (*(char *)(a1 + 31) < 0)
        v34 = *v30;
      v35 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)v68 = 136315394;
      *(_QWORD *)&v68[4] = v34;
      v69 = 2048;
      v70 = v35;
      LODWORD(v59) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CACHE: name, %s, cache too large, evicting, size, %lu", v68, v59);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    sub_10117A438(a1);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v38 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v39 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v39 = *v30;
    v40 = *(_QWORD *)(a1 + 72);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 56))(v68, a1, a2);
    v41 = SHIBYTE(v71);
    v42 = *(_BYTE **)v68;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v64, a1, v60);
    v43 = v68;
    if (v41 < 0)
      v43 = v42;
    v44 = v64;
    if (v65 < 0)
      v44 = (void **)v64[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v39;
    v81 = 2048;
    v82 = v40;
    v83 = 2080;
    v84 = v43;
    v85 = 2080;
    v86 = v44;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s", buf, 0x2Au);
    if (v65 < 0)
      operator delete(v64[0]);
    if (SHIBYTE(v71) < 0)
      operator delete(*(void **)v68);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    if (*(char *)(a1 + 31) < 0)
      v30 = (uint64_t *)*v30;
    v45 = qword_1022A02D8;
    v46 = *(_QWORD *)(a1 + 72);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 56))(v64, a1, a2);
    v47 = v65;
    v48 = (void **)v64[0];
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v62, a1, v60);
    v49 = v64;
    if (v47 < 0)
      v49 = v48;
    if (v63 >= 0)
      v50 = v62;
    else
      v50 = (void **)v62[0];
    *(_DWORD *)v68 = 136315906;
    *(_QWORD *)&v68[4] = v30;
    v69 = 2048;
    v70 = v46;
    v71 = 2080;
    v72 = v49;
    v73 = 2080;
    v74 = v50;
    LODWORD(v59) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s", v68, v59, (const char *)v60, (const char *)a2);
    v52 = v51;
    if (v63 < 0)
      operator delete(v62[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v52);
    if (v52 != buf)
      free(v52);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_101174D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101174D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  sub_10116F574(*(_QWORD *)(a1 + 32), 1, *(_DWORD *)(a2 + 4));
  v3 = *(_QWORD *)(a2 + 296);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  result = *(_QWORD *)(a2 + 304);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_101174DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A3DF8);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 1025;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCellTilesManager::removeAllTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"type\":%{private}d}", (uint8_t *)v9, 0x40u);
  }
}

id sub_101174F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[7];
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446210;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TileCell, deleteAgedTiles, dispatch, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v9 = *(_QWORD *)(a2 + 8);
    v13 = 136446210;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCell, deleteAgedTiles, dispatch, %{public}s", &v13, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = *(void **)(v4 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_101175144;
  v12[3] = &unk_102143548;
  v12[4] = v4;
  v12[5] = a2;
  v12[6] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v7, "async:", v12);
}

unint64_t sub_101175144(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (_QWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136446466;
    v18 = v5;
    v19 = 2050;
    v20 = sub_100026CC8(v4 + 184);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TileCell, deleteAgedTiles, start, name, %{public}s, size, %{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v8 = qword_1022A0048;
    v9 = *(_QWORD *)(a1 + 40);
    v10 = (_QWORD *)(v9 + 8);
    if (*(char *)(v9 + 31) < 0)
      v10 = (_QWORD *)*v10;
    v13 = 136446466;
    v14 = v10;
    v15 = 2050;
    v16 = sub_100026CC8(v9 + 184);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "TileCell, deleteAgedTiles, start, name, %{public}s, size, %{public}lu", &v13, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = *(_QWORD *)(a1 + 40) + 184;
  do
  {
    sub_101175374(v2, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
    result = sub_100026CC8(v6);
  }
  while (result > 0x32);
  return result;
}

uint64_t *sub_101175374(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unsigned int *v15;
  double v16;
  double v17;
  double v18;
  _BOOL4 v19;
  NSObject *v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _BOOL4 v25;
  _BYTE *v26;
  NSObject *v27;
  const char *v28;
  double v29;
  double v30;
  _BOOL4 v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  _BOOL4 v37;
  void **v38;
  char *v39;
  char *v40;
  uint64_t v41;
  const char *v42;
  double v43;
  double v44;
  _BOOL4 v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  const char *v53;
  double v54;
  double v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  const char *v70;
  double v71;
  double v72;
  uint64_t v73;
  const char *v74;
  uint8_t *v75;
  double v76;
  double v77;
  double v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84[2];
  char v85;
  _QWORD v86[5];
  uint64_t v87[2];
  _BYTE __p[32];
  __int16 v89;
  const char *v90;
  __int16 v91;
  _BYTE v92[10];
  __int16 v93;
  void **v94;
  uint8_t buf[4];
  _BYTE v96[28];
  __int16 v97;
  const char *v98;
  __int16 v99;
  _BYTE v100[10];
  __int16 v101;
  _BYTE *v102;

  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472;
  v86[2] = sub_101175EEC;
  v86[3] = &unk_10217D888;
  *(double *)&v86[4] = a3;
  v87[0] = mach_absolute_time();
  v87[1] = (uint64_t)v86;
  v78 = *(double *)&a2;
  v6 = (uint64_t **)(a2 + 184);
  v7 = (_QWORD *)sub_100129380(a2 + 184);
  v8 = sub_1000DCFC0(a2 + 184);
  if (v7 == (_QWORD *)sub_1000DCFC0(a2 + 184))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    v80 = 134219522;
    *(_QWORD *)&v9 = 136447235;
    v79 = v9;
    v81 = a1;
    do
    {
      v11 = v7;
      v12 = (_QWORD *)v7[1];
      v13 = v7;
      if (v12)
      {
        do
        {
          v7 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v13[2];
          v14 = *v7 == (_QWORD)v13;
          v13 = v7;
        }
        while (!v14);
      }
      v83 = (uint64_t)v11;
      v15 = (unsigned int *)v11[10];
      v16 = sub_100FA06F8((uint64_t)v15, a3);
      v17 = sub_100FA06EC((uint64_t)v15, a3);
      v18 = fabs(v16);
      v19 = v18 >= *(double *)(a1 + 136) || v17 >= *(double *)(a1 + 144) || sub_100FA7E88((uint64_t)v15);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v20 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v82 = v8;
        v21 = v6;
        v22 = v10;
        v23 = *(_QWORD *)(a1 + 136);
        v24 = *(const char **)(a1 + 144);
        v25 = sub_100FA7E88((uint64_t)v15);
        (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v15 + 16))(__p, v15);
        if (__p[23] >= 0)
          v26 = __p;
        else
          v26 = *(_BYTE **)__p;
        *(_DWORD *)buf = v80;
        *(double *)v96 = v18;
        *(_WORD *)&v96[8] = 2048;
        *(_QWORD *)&v96[10] = v23;
        *(_WORD *)&v96[18] = 2048;
        *(double *)&v96[20] = v17;
        v97 = 2048;
        v98 = v24;
        v99 = 1024;
        *(_DWORD *)v100 = v25;
        *(_WORD *)&v100[4] = 1024;
        *(_DWORD *)&v100[6] = v19;
        v101 = 2080;
        v102 = v26;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s", buf, 0x40u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v10 = v22;
        v6 = v21;
        a1 = v81;
        v8 = v82;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        HIDWORD(v77) = v10;
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v34 = qword_1022A02D8;
        v36 = *(_QWORD *)(a1 + 136);
        v35 = *(const char **)(a1 + 144);
        v37 = sub_100FA7E88((uint64_t)v15);
        (*(void (**)(void **__return_ptr, unsigned int *))(*(_QWORD *)v15 + 16))(v84, v15);
        v38 = v84;
        if (v85 < 0)
          v38 = (void **)v84[0];
        *(_DWORD *)__p = v80;
        *(double *)&__p[4] = v18;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v36;
        *(_WORD *)&__p[22] = 2048;
        *(double *)&__p[24] = v17;
        v89 = 2048;
        v90 = v35;
        v91 = 1024;
        *(_DWORD *)v92 = v37;
        *(_WORD *)&v92[4] = 1024;
        *(_DWORD *)&v92[6] = v19;
        v93 = 2080;
        v94 = v38;
        LODWORD(v76) = 64;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s", COERCE_DOUBLE(__p), v76, v77, v78, (_DWORD)v79, DWORD2(v79), (const char *)v80);
        v40 = v39;
        if (v85 < 0)
          operator delete(v84[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v40);
        v10 = HIDWORD(v77);
        a1 = v81;
        if (v40 != (char *)buf)
          free(v40);
      }
      if (v19)
      {
        sub_100FA2CE0((uint64_t)v15);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v27 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v28 = sub_1001CC818(v15[12]);
          v29 = sub_1001C087C((uint64_t)(v15 + 12));
          v30 = sub_1001C0858((uint64_t)(v15 + 12));
          v31 = sub_100FA7E88((uint64_t)v15);
          v32 = sub_100026CC8((uint64_t)v6);
          *(_DWORD *)buf = v79;
          v33 = "age";
          if (v31)
            v33 = "corrupt";
          *(_QWORD *)v96 = v28;
          *(_WORD *)&v96[8] = 2049;
          *(double *)&v96[10] = v29;
          *(_WORD *)&v96[18] = 2049;
          *(double *)&v96[20] = v30;
          v97 = 2082;
          v98 = v33;
          v99 = 2050;
          *(_QWORD *)v100 = v32 - 1;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
          a1 = v81;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          v41 = qword_1022A0048;
          v42 = sub_1001CC818(v15[12]);
          v43 = sub_1001C087C((uint64_t)(v15 + 12));
          v44 = sub_1001C0858((uint64_t)(v15 + 12));
          v45 = sub_100FA7E88((uint64_t)v15);
          v46 = sub_100026CC8((uint64_t)v6);
          *(_DWORD *)__p = v79;
          v47 = "age";
          if (v45)
            v47 = "corrupt";
          *(_QWORD *)&__p[4] = v42;
          *(_WORD *)&__p[12] = 2049;
          *(double *)&__p[14] = v43;
          *(_WORD *)&__p[22] = 2049;
          *(double *)&__p[24] = v44;
          v89 = 2082;
          v90 = v47;
          v91 = 2050;
          *(_QWORD *)v92 = v46 - 1;
          LODWORD(v76) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", __p, *(_QWORD *)&v76);
          v49 = (uint8_t *)v48;
          sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v48);
          a1 = v81;
          if (v49 != buf)
            free(v49);
        }
        sub_1008B8DD8(v6, v83);
        v10 = (v10 + 1);
      }
      else if (v8 == sub_1000DCFC0((uint64_t)v6))
      {
        v8 = v83;
      }
      else if (v8 != sub_1000DCFC0((uint64_t)v6) && v18 >= fabs(sub_100FA06F8(*(_QWORD *)(v8 + 80), a3)))
      {
        v8 = v83;
      }
    }
    while (v7 != (_QWORD *)sub_1000DCFC0((uint64_t)v6));
  }
  if (v8 != sub_1000DCFC0((uint64_t)v6) && (unint64_t)sub_100026CC8((uint64_t)v6) >= 0x33)
  {
    v50 = *(_QWORD *)(v8 + 80);
    if (sub_1001C94A8(v50))
    {
      sub_100FA2CE0(v50);
      LODWORD(v10) = v10 + 1;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v51 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v52 = v8;
      v53 = sub_1001CC818(*(_DWORD *)(v50 + 48));
      v54 = sub_1001C087C(v50 + 48);
      v55 = sub_1001C0858(v50 + 48);
      v56 = sub_100026CC8((uint64_t)v6);
      *(_DWORD *)buf = 136446979;
      *(_QWORD *)v96 = v53;
      *(_WORD *)&v96[8] = 2049;
      *(double *)&v96[10] = v54;
      *(_WORD *)&v96[18] = 2049;
      *(double *)&v96[20] = v55;
      v97 = 2050;
      v98 = (const char *)(v56 - 1);
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x2Au);
      v8 = v52;
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      v66 = v8;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v67 = qword_1022A0048;
      v69 = *(_DWORD *)(v50 + 48);
      v68 = v50 + 48;
      v70 = sub_1001CC818(v69);
      v71 = sub_1001C087C(v68);
      v72 = sub_1001C0858(v68);
      v73 = sub_100026CC8((uint64_t)v6);
      *(_DWORD *)__p = 136446979;
      *(_QWORD *)&__p[4] = v70;
      *(_WORD *)&__p[12] = 2049;
      *(double *)&__p[14] = v71;
      *(_WORD *)&__p[22] = 2049;
      *(double *)&__p[24] = v72;
      v89 = 2050;
      v90 = (const char *)(v73 - 1);
      LODWORD(v76) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v67, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", __p, *(_QWORD *)&v76);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v74);
      if (v75 != buf)
        free(v75);
      v8 = v66;
    }
    sub_1008B8DD8(v6, v8);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v57 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v58 = sub_100026CC8((uint64_t)v6);
    v59 = *(_QWORD *)&v78 + 8;
    if (*(char *)(*(_QWORD *)&v78 + 31) < 0)
      v59 = *(_QWORD *)(*(_QWORD *)&v78 + 8);
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)v96 = v10;
    *(_WORD *)&v96[4] = 2050;
    *(_QWORD *)&v96[6] = v58;
    *(_WORD *)&v96[14] = 2081;
    *(_QWORD *)&v96[16] = v59;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "TileCell, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v61 = qword_1022A0048;
    v62 = sub_100026CC8((uint64_t)v6);
    v63 = *(_QWORD *)(*(_QWORD *)&v78 + 8);
    if (*(char *)(*(_QWORD *)&v78 + 31) >= 0)
      v63 = *(_QWORD *)&v78 + 8;
    *(_DWORD *)__p = 67240707;
    *(_DWORD *)&__p[4] = v10;
    *(_WORD *)&__p[8] = 2050;
    *(_QWORD *)&__p[10] = v62;
    *(_WORD *)&__p[18] = 2081;
    *(_QWORD *)&__p[20] = v63;
    LODWORD(v76) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 0, "TileCell, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", __p, *(_QWORD *)&v76);
    v65 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v64);
    if (v65 != buf)
      free(v65);
  }
  return sub_100134E40(v87);
}

void sub_101175E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_100134E40(&a29);
  _Unwind_Resume(a1);
}

void sub_101175EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A3DF8);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCellTilesManager::agedTileDeleter\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

void sub_101176020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  mach_header_64 *v18;
  const char *v19;
  unsigned int *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  NSObject *v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  mach_header_64 *v35;
  const char *v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  mach_header_64 *v43;
  int v44;
  _BYTE *v45;
  void *v46;
  _BYTE *v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  unsigned int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  NSObject *v56;
  const char *v57;
  char *v58;
  unsigned int *v59;
  unsigned int *v60;
  NSObject *v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  double *v67;
  NSObject *v68;
  _BYTE *v69;
  char *v70;
  void *v71;
  NSObject *v72;
  const char *v73;
  char *v74;
  NSObject *v75;
  _BYTE *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  _BYTE *v84;
  char *v85;
  char *v86;
  NSObject *v87;
  NSObject *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  NSObject *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  void **v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  const char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  const char *v122;
  char *v123;
  const char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  char *v133;
  const char *v134;
  int v135;
  double v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  _BYTE v143[12];
  char v144;
  int v145;
  _BYTE *v146;
  void *v147[4];
  _BYTE __p[30];
  _BYTE v149[10];
  _BOOL4 v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  void **v156;
  _BYTE buf[12];
  __int16 v158;
  __int128 v159;
  _BYTE v160[10];
  _BOOL4 v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  _BYTE *v167;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (*(double (**)(_QWORD))(**(_QWORD **)(v3 + 368) + 16))(*(_QWORD *)(v3 + 368))
     - *(double *)(*(_QWORD *)(a1 + 48) + 76);
  v5 = *(double *)(v3 + 152);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v6 = v4 + 60.0;
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(char *)(a2 + 31) >= 0 ? a2 + 8 : *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(v2 + 56);
    v10 = *(unsigned __int8 *)(v2 + 64);
    v11 = sub_100026CC8(a2 + 184);
    v12 = sub_1008B97D0(a2 + 184);
    sub_100071A00(*(_QWORD *)(v2 + 48), __p);
    v13 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136316930;
    *(_QWORD *)&buf[4] = v8;
    v158 = 2080;
    *(_QWORD *)&v159 = v9;
    WORD4(v159) = 1024;
    *(_DWORD *)((char *)&v159 + 10) = v10;
    HIWORD(v159) = 2048;
    *(double *)v160 = v6;
    *(_WORD *)&v160[8] = 1024;
    v161 = v6 < v5;
    v162 = 2048;
    v163 = v11;
    v164 = 2048;
    v165 = v12;
    v166 = 2080;
    v167 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s", buf, 0x4Au);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v140 = qword_1022A02D8;
    if (*(char *)(a2 + 31) >= 0)
      v104 = a2 + 8;
    else
      v104 = *(_QWORD *)(a2 + 8);
    v105 = *(_QWORD *)(v2 + 56);
    v106 = *(unsigned __int8 *)(v2 + 64);
    v107 = sub_100026CC8(a2 + 184);
    v108 = sub_1008B97D0(a2 + 184);
    sub_100071A00(*(_QWORD *)(v2 + 48), v147);
    if (SHIBYTE(v147[2]) >= 0)
      v109 = v147;
    else
      v109 = (void **)v147[0];
    *(_DWORD *)__p = 136316930;
    *(_QWORD *)&__p[4] = v104;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = v105;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v106;
    *(_WORD *)&__p[28] = 2048;
    *(double *)v149 = v6;
    *(_WORD *)&v149[8] = 1024;
    v150 = v6 < v5;
    v151 = 2048;
    v152 = v107;
    v153 = 2048;
    v154 = v108;
    v155 = 2080;
    v156 = v109;
    LODWORD(v134) = 74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v140, 2, "TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s", __p, v134, v135, v136, v138, v139, v140, v141);
    v111 = v110;
    if (SHIBYTE(v147[2]) < 0)
      operator delete(v147[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v111);
    if (v111 != buf)
      free(v111);
  }
  if (v6 < v5)
  {
    if (*(_BYTE *)(v2 + 64))
    {
      v14 = a2 + 184;
      sub_1008B982C(a2 + 184);
      v15 = (_QWORD *)sub_100129380(a2 + 184);
      v16 = sub_1000DCFC0(a2 + 184);
      if (v15 != (_QWORD *)v16)
      {
        v17 = (_QWORD *)v16;
        v18 = (mach_header_64 *)&_mh_execute_header;
        v19 = "CellTile, tile ptr is NULL, #CloneMe";
        v137 = v16;
        while (1)
        {
          v20 = (unsigned int *)v15[10];
          if (!v20)
            break;
          if (sub_1001C94A8(v15[10]))
          {
            if (!sub_100FA7580((double *)v20, *(_QWORD *)(v2 + 48), *(float *)(a2 + 144)))
            {
              if ((sub_100FA72C0((uint64_t)v20, *(unsigned __int8 *)(v3 + 128)) & 1) != 0)
                goto LABEL_27;
              sub_1008B9548(v14, v20 + 12);
              ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
              v25 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v20 + 16))(buf, v20);
                v26 = buf;
                if (SBYTE9(v159) < 0)
                  v26 = *(_BYTE **)buf;
                *(_DWORD *)__p = 136380675;
                *(_QWORD *)&__p[4] = v26;
                _os_log_impl(v18, v25, OS_LOG_TYPE_ERROR, "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", __p, 0xCu);
                if (SBYTE9(v159) < 0)
                  operator delete(*(void **)buf);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_27;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
              v27 = qword_1022A0048;
              (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v20 + 16))(__p, v20);
              v28 = __p;
              if (__p[23] < 0)
                v28 = *(_BYTE **)__p;
              LODWORD(v147[0]) = 136380675;
              *(void **)((char *)v147 + 4) = v28;
              LODWORD(v134) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, v18, v27, 16, "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", v147, v134);
              v30 = v29;
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              goto LABEL_49;
            }
            if (!sub_100FA4BB8((uint64_t)v20))
            {
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
              v31 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v20 + 16))(buf, v20);
                v32 = v3;
                v33 = v2;
                v34 = v14;
                v35 = v18;
                v36 = v19;
                v37 = SBYTE9(v159);
                v38 = *(_BYTE **)buf;
                v39 = v34;
                v40 = sub_1008B97D0(v34);
                *(_DWORD *)__p = 136380931;
                v41 = buf;
                if (v37 < 0)
                  v41 = v38;
                *(_QWORD *)&__p[4] = v41;
                *(_WORD *)&__p[12] = 2050;
                *(_QWORD *)&__p[14] = v40;
                v18 = v35;
                _os_log_impl(v35, v31, OS_LOG_TYPE_ERROR, "CellTile, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe", __p, 0x16u);
                if (SBYTE9(v159) < 0)
                  operator delete(*(void **)buf);
                v19 = v36;
                v14 = v39;
                v2 = v33;
                v3 = v32;
                v17 = (_QWORD *)v137;
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_27;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
              v42 = qword_1022A0048;
              (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v20 + 16))(__p, v20);
              v43 = v18;
              v44 = __p[23];
              v45 = *(_BYTE **)__p;
              v46 = (void *)sub_1008B97D0(v14);
              LODWORD(v147[0]) = 136380931;
              v47 = __p;
              if (v44 < 0)
                v47 = v45;
              *(void **)((char *)v147 + 4) = v47;
              WORD2(v147[1]) = 2050;
              *(void **)((char *)&v147[1] + 6) = v46;
              LODWORD(v134) = 22;
              v18 = v43;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, v43, v42, 16, "CellTile, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe", v147, v134);
              v30 = v48;
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
LABEL_49:
              sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v30);
LABEL_69:
              if (v30 != buf)
                free(v30);
              goto LABEL_27;
            }
            sub_1008B9548(v14, v20 + 12);
            ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24);
          }
LABEL_27:
          v22 = (_QWORD *)v15[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v15[2];
              v24 = *v23 == (_QWORD)v15;
              v15 = v23;
            }
            while (!v24);
          }
          v15 = v23;
          if (v23 == v17)
            goto LABEL_179;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v21 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(v18, v21, OS_LOG_TYPE_ERROR, v19, buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_27;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        *(_WORD *)__p = 0;
        LODWORD(v134) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, v18, qword_1022A0048, 16, "CellTile, tile ptr is NULL, #CloneMe", __p, v134);
        v30 = (char *)v49;
        sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v49);
        goto LABEL_69;
      }
      goto LABEL_179;
    }
    memset(v147, 0, 24);
    v64 = a2 + 184;
    sub_1008B97C4(a2 + 184, (uint64_t *)__p);
    v65 = *(unsigned int **)__p;
    if (*(_BYTE **)__p == &__p[8])
    {
LABEL_167:
      sub_100067A00((uint64_t)__p, *(char **)&__p[8]);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v88 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v89 = *(_QWORD *)(a2 + 8);
        v90 = *(char *)(a2 + 31);
        v91 = *(unsigned __int8 *)(v2 + 64);
        v92 = sub_100026CC8(v64);
        if (v90 >= 0)
          v93 = a2 + 8;
        else
          v93 = v89;
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v93;
        v158 = 1026;
        LODWORD(v159) = v91;
        WORD2(v159) = 1026;
        *(_DWORD *)((char *)&v159 + 6) = 0;
        WORD5(v159) = 1026;
        HIDWORD(v159) = 0;
        *(_WORD *)v160 = 2050;
        *(_QWORD *)&v160[2] = v92;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "CellTile, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu", buf, 0x28u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v126 = qword_1022A0048;
        v127 = *(_QWORD *)(a2 + 8);
        v128 = *(char *)(a2 + 31);
        v129 = *(unsigned __int8 *)(v2 + 64);
        v130 = sub_100026CC8(v64);
        if (v128 >= 0)
          v131 = a2 + 8;
        else
          v131 = v127;
        *(_DWORD *)__p = 136447234;
        *(_QWORD *)&__p[4] = v131;
        *(_WORD *)&__p[12] = 1026;
        *(_DWORD *)&__p[14] = v129;
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 1026;
        *(_DWORD *)&__p[26] = 0;
        *(_WORD *)v149 = 2050;
        *(_QWORD *)&v149[2] = v130;
        LODWORD(v134) = 40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v126, 1, "CellTile, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu", __p, v134);
        v133 = (char *)v132;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v132);
        if (v133 != buf)
          free(v133);
      }
      v94 = (unsigned int *)v147[0];
      v95 = (unsigned int *)v147[1];
      while (v94 != v95)
      {
        sub_1008B9050(v64, v94);
        v94 += 12;
      }
      *(_QWORD *)buf = v147;
      sub_100495E10((void ***)buf);
      goto LABEL_179;
    }
    while (1)
    {
      v66 = sub_1001C85FC(v64, v65 + 8);
      v67 = (double *)v66;
      if (!v66)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v72 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "CellTile, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          *(_WORD *)v143 = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "CellTile, tile ptr is NULL, #CloneMe", v143, v134);
          v74 = (char *)v73;
          sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v73);
          if (v74 != buf)
            free(v74);
        }
        goto LABEL_137;
      }
      if (sub_1001C94A8(v66))
      {
        if (!sub_100FA7580(v67, *(_QWORD *)(v2 + 48), *(float *)(a2 + 144)))
        {
          if (sub_100FA72C0((uint64_t)v67, *(unsigned __int8 *)(v3 + 128)))
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
            v68 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v67 + 16))(buf, v67);
              v69 = buf;
              if (SBYTE9(v159) < 0)
                v69 = *(_BYTE **)buf;
              *(_DWORD *)v143 = 136315138;
              *(_QWORD *)&v143[4] = v69;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, location moved, locking tileid, %s", v143, 0xCu);
              if (SBYTE9(v159) < 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
              v79 = qword_1022A02D8;
              (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v67 + 16))(v143, v67);
              v80 = v143;
              if (v144 < 0)
                v80 = *(_BYTE **)v143;
              v145 = 136315138;
              v146 = v80;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "TILE: updateProtectionClass, location moved, locking tileid, %s", (const char *)&v145);
              v82 = v81;
              if (v144 < 0)
                operator delete(*(void **)v143);
              sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v82);
              if (v82 != buf)
                free(v82);
            }
            v70 = (char *)v147[1];
            if (v147[1] >= v147[2])
            {
              v71 = (void *)sub_100496580((uint64_t *)v147, (__int128 *)v65 + 2);
            }
            else
            {
              sub_100495F28((uint64_t)v147, (__int128 *)v65 + 2);
              v71 = v70 + 48;
            }
            v147[1] = v71;
            goto LABEL_137;
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          v75 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v67 + 16))(buf, v67);
            v76 = buf;
            if (SBYTE9(v159) < 0)
              v76 = *(_BYTE **)buf;
            *(_DWORD *)v143 = 136380675;
            *(_QWORD *)&v143[4] = v76;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", v143, 0xCu);
            if (SBYTE9(v159) < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
            v83 = qword_1022A0048;
            (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v67 + 16))(v143, v67);
            v84 = v143;
            if (v144 < 0)
              v84 = *(_BYTE **)v143;
            v145 = 136380675;
            v146 = v84;
            LODWORD(v134) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 16, "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", &v145, v134);
            v86 = v85;
            if (v144 < 0)
              operator delete(*(void **)v143);
            sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v86);
            if (v86 != buf)
              free(v86);
          }
        }
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24);
      }
LABEL_137:
      v77 = (unsigned int *)*((_QWORD *)v65 + 1);
      if (v77)
      {
        do
        {
          v78 = v77;
          v77 = *(unsigned int **)v77;
        }
        while (v77);
      }
      else
      {
        do
        {
          v78 = (unsigned int *)*((_QWORD *)v65 + 2);
          v24 = *(_QWORD *)v78 == (_QWORD)v65;
          v65 = v78;
        }
        while (!v24);
      }
      v65 = v78;
      if (v78 == (unsigned int *)&__p[8])
        goto LABEL_167;
    }
  }
  v50 = a2 + 184;
  sub_1008B97C4(a2 + 184, (uint64_t *)__p);
  v51 = *(unsigned int **)__p;
  if (*(_BYTE **)__p == &__p[8])
  {
    sub_100067A00((uint64_t)__p, **(char ***)__p);
  }
  else
  {
    v52 = 1;
    do
    {
      v53 = sub_1001C85FC(v50, v51 + 8);
      v54 = v53;
      if (v53)
      {
        v55 = sub_1001C94A8(v53);
        if ((v55 & v52) == 1)
          v52 = sub_100FA72C0(v54, *(unsigned __int8 *)(v3 + 128));
        else
          v52 &= !v55;
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v56 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "CellTile, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          LOWORD(v147[0]) = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "CellTile, tile ptr is NULL, #CloneMe", v147, v134);
          v58 = (char *)v57;
          sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v57);
          if (v58 != buf)
            free(v58);
        }
      }
      v59 = (unsigned int *)*((_QWORD *)v51 + 1);
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = *(unsigned int **)v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (unsigned int *)*((_QWORD *)v51 + 2);
          v24 = *(_QWORD *)v60 == (_QWORD)v51;
          v51 = v60;
        }
        while (!v24);
      }
      v51 = v60;
    }
    while (v60 != (unsigned int *)&__p[8]);
    sub_100067A00((uint64_t)__p, *(char **)&__p[8]);
    if ((v52 & 1) == 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v61 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "CellTile, Unable to lock all unprotected files!, #CloneMe", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        *(_WORD *)__p = 0;
        LODWORD(v134) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "CellTile, Unable to lock all unprotected files!, #CloneMe", __p, v134);
        v63 = (char *)v62;
        sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      goto LABEL_179;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v87 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, clearing unprotected map", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    *(_WORD *)__p = 0;
    LODWORD(v134) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: updateProtectionClass, clearing unprotected map", __p, v134);
    v125 = (char *)v124;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v124);
    if (v125 != buf)
      free(v125);
  }
  sub_1008B982C(v50);
LABEL_179:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v96 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 31) >= 0)
      v97 = a2 + 8;
    else
      v97 = *(_QWORD *)(a2 + 8);
    v98 = sub_100026CC8(a2 + 184);
    v99 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v97;
    v158 = 2048;
    *(_QWORD *)&v159 = v98;
    WORD4(v159) = 1024;
    *(_DWORD *)((char *)&v159 + 10) = v99;
    _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v112 = qword_1022A02D8;
    if (*(char *)(a2 + 31) >= 0)
      v113 = a2 + 8;
    else
      v113 = *(_QWORD *)(a2 + 8);
    v114 = sub_100026CC8(a2 + 184);
    v115 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24);
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v113;
    *(_WORD *)&__p[12] = 2048;
    *(_QWORD *)&__p[14] = v114;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v115;
    LODWORD(v134) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v112, 2, "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d", __p, v134, v135);
    v117 = (char *)v116;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v116);
    if (v117 != buf)
      free(v117);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v100 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 31) >= 0)
      v101 = a2 + 8;
    else
      v101 = *(_QWORD *)(a2 + 8);
    v102 = *(unsigned __int8 *)(v2 + 64);
    v103 = sub_100026CC8(a2 + 184);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v101;
    v158 = 1026;
    LODWORD(v159) = v102;
    WORD2(v159) = 2050;
    *(_QWORD *)((char *)&v159 + 6) = v103;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_INFO, "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v118 = qword_1022A0048;
    if (*(char *)(a2 + 31) >= 0)
      v119 = a2 + 8;
    else
      v119 = *(_QWORD *)(a2 + 8);
    v120 = *(unsigned __int8 *)(v2 + 64);
    v121 = sub_100026CC8(a2 + 184);
    *(_DWORD *)__p = 136446722;
    *(_QWORD *)&__p[4] = v119;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)&__p[14] = v120;
    *(_WORD *)&__p[18] = 2050;
    *(_QWORD *)&__p[20] = v121;
    LODWORD(v134) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v118, 1, "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n", __p, v134);
    v123 = (char *)v122;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v122);
    if (v123 != buf)
      free(v123);
  }
}

void sub_101177980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  a42 = &a25;
  sub_100495E10((void ***)&a42);
  _Unwind_Resume(a1);
}

void sub_101177A30(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  _BYTE *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void **v19;
  char *v20;
  char *v21;
  double v22;
  double v23;
  void *v24[2];
  char v25;
  _BYTE __p[12];
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  void **v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  _BYTE *v40;

  if (*(_QWORD *)(a1 + 168) || *(double *)(a1 + 196) >= 0.0)
  {
    v9 = vabdd_f64((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368)), *(double *)(a1 + 252));
    v10 = *(double *)(a1 + 152);
    v11 = v10 - v9 + 20.0;
    v12 = v10 * 0.170000002;
    if (v11 > v12)
      v13 = v11;
    else
      v13 = v12;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_100071A00(a1 + 176, __p);
      v15 = v29 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315906;
      v34 = a2;
      v35 = 2048;
      v36 = v9;
      v37 = 2048;
      v38 = v13;
      v39 = 2080;
      v40 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TileTimer, schedule, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s", buf, 0x2Au);
      if (SHIBYTE(v29) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v18 = qword_1022A0048;
      sub_100071A00(a1 + 176, v24);
      if (v25 >= 0)
        v19 = v24;
      else
        v19 = (void **)v24[0];
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = a2;
      v27 = 2048;
      v28 = v9;
      v29 = 2048;
      v30 = v13;
      v31 = 2080;
      v32 = v19;
      LODWORD(v22) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "TileTimer, schedule, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s", __p, v22, v23, (const char *)v24[0]);
      v21 = v20;
      if (v25 < 0)
        operator delete(v24[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    v16 = *(_QWORD *)(a1 + 168);
    v17 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
    sub_1001F40D0(v16, v13 + v17);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(double *)(a1 + 196) < 0.0;
      *(_DWORD *)buf = 67240192;
      LODWORD(v34) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileTimer, skip, location, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v6 = *(double *)(a1 + 196) < 0.0;
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileTimer, skip, location, %{public}d", __p, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_101177E68(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_10230D160, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles_cell")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_101177EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101177F04(id a1)
{
  std::string::assign((std::string *)&xmmword_10230D188, "https://cl2.apple.com");
}

BOOL sub_101177F18(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileSched, cell, called, %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v9 = 134349056;
    v10 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, cell, called, %{public}ld", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCellTilesManager::onScheduledTileDownloadsCallback(CLTileDownloadReachabilityRequirement)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
  return sub_10116DD84(a1, v5);
}

BOOL sub_1011780DC(uint64_t a1, uint64_t a2)
{
  return sub_101177F18(a1 - 112, a2);
}

void sub_1011780E4()
{
  operator new();
}

void sub_101178190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1011781CC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021A4000;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

id sub_1011782A0(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLCellTilesManager")), "syncgetDoSync:", a1);
}

void sub_1011782D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A3D98);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021A3D98);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10117854C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FDBA0);
}

BOOL sub_101178560(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[52];
  void *__p[2];
  __int128 v46;
  char v47;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        memset(&buf[4], 0, 48);
        *(_OWORD *)__p = 0u;
        v46 = 0u;
        v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10117BB54();
        }
        if (SBYTE11(v46) < 0)
          operator delete(*(void **)((char *)__p + 4));
        if (SBYTE3(__p[0]) < 0)
          operator delete(*(void **)&buf[32]);
        if ((buf[31] & 0x80000000) != 0)
          operator delete(*(void **)&buf[8]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FDBA1;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3D98);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3D98);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_101178A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101178A30(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3D98);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A3D98);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_101178CB0(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A3D98);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A3D98);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101179038(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_10117AFDC(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1011790E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011790F8(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3D98);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_10117AFDC(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10117AA70();
    os_activity_scope_leave(&state);
  }
}

void sub_101179714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101179760(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3D98);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A3D98);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3D98);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A3D98);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021A3D98);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A3D98);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101179D10(uint64_t a1)
{
  sub_10117BAF4(a1);
  operator delete();
}

id sub_101179D34(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10117B160(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_101179D80(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101179DAC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101179DD8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101179E04(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101179E34(uint64_t a1)
{
  sub_10117A3D8(a1);
  operator delete();
}

void sub_101179E58(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 136315394;
    v16 = v3;
    v17 = 2048;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, clear, size, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v7 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(_QWORD *)(a1 + 72);
    v11 = 136315394;
    v12 = v7;
    v13 = 2048;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CACHE: name, %s, clear, size, %lu", (const char *)&v11, 22);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEntryCache<std::string, CLDaemonLocation>::clear() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100090AE4(a1 + 56, *(char **)(a1 + 64));
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = *(char **)(a1 + 88);
  v5 = (_QWORD *)(a1 + 88);
  *(v5 - 2) = 0;
  sub_1007A28B0((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
}

uint64_t *sub_10117A070(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 136315394;
    v15 = v3;
    v16 = 2048;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, deleteAgedEntries, size, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v6 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *(_QWORD *)(a1 + 72);
    v10 = 136315394;
    v11 = v6;
    v12 = 2048;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CACHE: name, %s, deleteAgedEntries, size, %lu", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEntryCache<std::string, CLDaemonLocation>::deleteAgedEntries() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return sub_10117A438(a1);
}

uint64_t sub_10117A260@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_100263E50((uint64_t)v9);
  v8 = 48;
  v4 = sub_100B06348(&v10, &v8);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 12;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<(v4, a1);
  std::stringbuf::str(a2, v11);
  *(_QWORD *)((char *)v9
  v10 = v6;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_10117A36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10117A388@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *result;

  if (*(char *)(a1 + 23) < 0)
    return sub_100115CE4((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void sub_10117A3B4(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  sub_1000C2150(&v2, a2);
}

uint64_t sub_10117A3D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A3F08;
  sub_101179E58(a1);
  sub_1007A28B0(a1 + 80, *(char **)(a1 + 88));
  sub_100090AE4(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_10117A438(uint64_t a1)
{
  uint64_t *result;
  __int128 v3;
  double Current;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  NSObject *v10;
  _QWORD *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  char *v38;
  char *v39;
  double v40;
  __int128 v41;
  const char *v42;
  _QWORD *v43;
  uint64_t **v44;
  void *v45[2];
  char v46;
  _BYTE __p[12];
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  void **v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  double v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  _BYTE *v65;

  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (result)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = *(_QWORD *)(a1 + 80);
    v44 = (uint64_t **)(a1 + 80);
    if (v5 != a1 + 88)
    {
      v43 = (_QWORD *)(a1 + 8);
      *(_QWORD *)&v3 = 136316162;
      v41 = v3;
      do
      {
        v6 = *(_QWORD **)(v5 + 8);
        v7 = (_QWORD *)v5;
        if (v6)
        {
          do
          {
            v8 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v7[2];
            v9 = *v8 == (_QWORD)v7;
            v7 = v8;
          }
          while (!v9);
        }
        if (vabdd_f64(Current, *(double *)(v5 + 32)) < *(double *)(a1 + 48))
          break;
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v10 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v11 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v11 = (_QWORD *)*v43;
          v12 = *(double *)(v5 + 32);
          v13 = *(_QWORD *)(a1 + 72);
          v14 = *(_QWORD *)(a1 + 32);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(__p, a1, v5 + 40);
          v15 = __p;
          if (v50 < 0)
            v15 = *(_BYTE **)__p;
          *(_DWORD *)buf = v41;
          v57 = v11;
          v58 = 2048;
          v59 = Current - v12;
          v60 = 2048;
          v61 = v13;
          v62 = 2048;
          v63 = v14;
          v64 = 2080;
          v65 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s", buf, 0x34u);
          if (SHIBYTE(v50) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
          v16 = qword_1022A02D8;
          v17 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v17 = (_QWORD *)*v43;
          v18 = *(double *)(v5 + 32);
          v19 = *(_QWORD *)(a1 + 72);
          v20 = *(_QWORD *)(a1 + 32);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(v45, a1, v5 + 40);
          v21 = v45;
          if (v46 < 0)
            v21 = (void **)v45[0];
          *(_DWORD *)__p = v41;
          *(_QWORD *)&__p[4] = v17;
          v48 = 2048;
          v49 = Current - v18;
          v50 = 2048;
          v51 = v19;
          v52 = 2048;
          v53 = v20;
          v54 = 2080;
          v55 = v21;
          LODWORD(v40) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s", __p, v40, (_QWORD)v41, *((_QWORD *)&v41 + 1), v42);
          v23 = v22;
          if (v46 < 0)
            operator delete(v45[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::evict() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v23);
          if (v23 != (char *)buf)
            free(v23);
        }
        sub_10019CD70((uint64_t **)(a1 + 56), (const void **)(v5 + 40));
        sub_10009B91C(v44, v5);
        v5 = (uint64_t)v8;
      }
      while (v8 != (_QWORD *)(a1 + 88));
    }
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (v24 > (unint64_t)result)
    {
      v25 = *v44;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v26 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v27 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v27 = (_QWORD *)*v27;
        v28 = *((double *)v25 + 4);
        v29 = *(_QWORD *)(a1 + 72);
        v30 = *(_QWORD *)(a1 + 32);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(__p, a1, v25 + 5);
        if (v50 >= 0)
          v31 = __p;
        else
          v31 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136316162;
        v57 = v27;
        v58 = 2048;
        v59 = Current - v28;
        v60 = 2048;
        v61 = v29;
        v62 = 2048;
        v63 = v30;
        v64 = 2080;
        v65 = v31;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s", buf, 0x34u);
        if (SHIBYTE(v50) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v32 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v32 = (_QWORD *)*v32;
        v33 = qword_1022A02D8;
        v34 = *((double *)v25 + 4);
        v35 = *(_QWORD *)(a1 + 72);
        v36 = *(_QWORD *)(a1 + 32);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v45, a1, v25 + 5);
        if (v46 >= 0)
          v37 = v45;
        else
          v37 = (void **)v45[0];
        *(_DWORD *)__p = 136316162;
        *(_QWORD *)&__p[4] = v32;
        v48 = 2048;
        v49 = Current - v34;
        v50 = 2048;
        v51 = v35;
        v52 = 2048;
        v53 = v36;
        v54 = 2080;
        v55 = v37;
        LODWORD(v40) = 52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s", __p, v40, (_QWORD)v41, *((_QWORD *)&v41 + 1), v42);
        v39 = v38;
        if (v46 < 0)
          operator delete(v45[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::evict() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v39);
        if (v39 != (char *)buf)
          free(v39);
      }
      sub_10019CD70((uint64_t **)(a1 + 56), (const void **)v25 + 5);
      return sub_10009B91C(v44, (uint64_t)v25);
    }
  }
  return result;
}

void sub_10117AA70()
{
  operator new();
}

void sub_10117AB04()
{
  operator delete();
}

void sub_10117AB28(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10117B160(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10117AF00(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A3D98);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A3D98);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10117AF00(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10117B160(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_10117AFDC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_10117B034(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10117B020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10117B034(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_1021A3F90;
  a1[1] = 0;
  sub_100CBDE8C((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10117B06C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10117B080(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A3F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10117B094(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A3F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10117B0C8(uint64_t a1)
{
  char v1;

  sub_100C13204((uint64_t)&v1, a1 + 24);
}

uint64_t sub_10117B0F0(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

id sub_10117B160(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10117B1AC(a1);
  else
    return 0;
}

id sub_10117B1AC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A3FD0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C4344FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A3FD0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A3FD0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C4344FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A3FD0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCellTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_10117B558(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10117B584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  double v9;
  __int128 __p;
  uint64_t v11;

  v9 = *(double *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 24);
  }
  v5 = a1 + 80;
  v6 = (uint64_t *)(a1 + 88);
  while (1)
  {
    v7 = sub_10117B698(v5, &v9, (uint64_t)&v9);
    if (v8)
      break;
    v9 = v9 + -10.0;
  }
  if (v6 == v7)
  {
    sub_101942B6C();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLEntryCache.h", 236, "insertToAgeSet");
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a3 + 160) = v7;
    if (SHIBYTE(v11) < 0)
      operator delete((void *)__p);
  }
}

void sub_10117B678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10117B698(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  double v6;
  uint64_t **v7;
  double v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((double *)v4 + 4);
        if (v6 >= v8)
          break;
        v4 = (uint64_t *)*v4;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = (uint64_t *)v4[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_10117B748(a1, a3, (uint64_t)&v10);
    sub_1000145B0((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_QWORD *sub_10117B748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = *(_QWORD *)a2;
  result = v6 + 5;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10117B7D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1007A2864(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_10117B7F0(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1000C17A4((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_10117B884((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_10117B884@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _OWORD *v7;
  uint64_t v8;
  _BYTE *result;
  __int128 v10;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  v8 = *((_QWORD *)*a2 + 2);
  *((_OWORD *)v6 + 2) = **a2;
  *((_QWORD *)v6 + 6) = v8;
  result = v6 + 56;
  if (*((char *)v7 + 47) < 0)
  {
    result = sub_100115CE4(result, *((void **)v7 + 3), *((_QWORD *)v7 + 4));
  }
  else
  {
    v10 = *(_OWORD *)((char *)v7 + 24);
    *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 5);
    *(_OWORD *)result = v10;
  }
  *((_QWORD *)v6 + 10) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10117B91C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1008B9C00(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_10117B938(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_10117B9CC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

char *sub_10117B9CC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xE0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_10117BA4C(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10117BA30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_10117BA4C(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_DWORD *)__dst + 6) = 0xFFFF;
  *(_QWORD *)(__dst + 36) = 0;
  *(_QWORD *)(__dst + 28) = 0;
  *(_OWORD *)(__dst + 44) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(__dst + 60) = _Q0;
  *(_OWORD *)(__dst + 76) = _Q0;
  *(_OWORD *)(__dst + 92) = _Q0;
  *((_DWORD *)__dst + 27) = 0;
  *((_QWORD *)__dst + 15) = 0;
  *((_QWORD *)__dst + 16) = 0;
  *((_QWORD *)__dst + 14) = 0xBFF0000000000000;
  *((_DWORD *)__dst + 34) = 0;
  *(_QWORD *)(__dst + 140) = 0xBFF0000000000000;
  *((_DWORD *)__dst + 37) = 0x7FFFFFFF;
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  *((_QWORD *)__dst + 19) = 0;
  __dst[176] = 0;
  *((_QWORD *)__dst + 23) = 0;
  return __dst;
}

uint64_t sub_10117BAF4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021A4000;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10117BB54()
{
  operator new();
}

void sub_10117BBE8()
{
  operator delete();
}

uint64_t sub_10117BC0C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_10117BC7C()
{
  sub_1015A2E04(qword_10230D130, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D130, (void *)&_mh_execute_header);
}

void sub_10117BCC0(uint64_t a1, void *a2)
{
  _QWORD *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = sub_100F9B3D0(a1, a2);
  *v2 = off_1021A4028;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  sub_100FF8520((uint64_t)(v2 + 18));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A4110);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "PAUSE: Constructing CLAutopauseProviderConcrete", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: Constructing CLAutopauseProviderConcrete", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLAutopauseProviderConcrete::CLAutopauseProviderConcrete(id<CLIntersiloUniverse>)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_1006AA544();
}

void sub_10117BFBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100FF8578(v2);
  v5 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v3;
  *v3 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_100F9B498(v1);
  _Unwind_Resume(a1);
}

void sub_10117C03C(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLAutopauseProviderConcrete::onLocationNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A4130);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAutopauseProviderConcrete::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A4130);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAutopauseProviderConcrete::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10117CCE8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10117C1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10117C214(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAutopauseProviderConcrete::onMotionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A4130);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAutopauseProviderConcrete::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A4130);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAutopauseProviderConcrete::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10117D1F8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10117C3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10117C3EC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLAutopauseProviderConcrete::onStatusNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A4130);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAutopauseProviderConcrete::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A4130);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAutopauseProviderConcrete::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_10117D4D4(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10117C59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10117C5BC(uint64_t a1)
{
  return sub_10117C5C4(*(id **)(a1 + 32));
}

uint64_t sub_10117C5C4(id *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  char v7;
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A4110);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "PAUSE: Autopause provider has no location updates for 15 minutes.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v6 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: Autopause provider has no location updates for 15 minutes.", &v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onLocationTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(a1[17], "setNextFireDelay:", 1.79769313e308);
  v6 = 257;
  v7 = 1;
  *(_DWORD *)buf = 0;
  return (*((uint64_t (**)(id *, uint8_t *, __int16 *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, buf, &v6, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_10117C7A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A4028;
  sub_10117C848(a1);
  objc_msgSend(*(id *)(a1 + 136), "invalidate");

  *(_QWORD *)(a1 + 136) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_100FF8578((_QWORD *)(a1 + 144));
  v2 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_100F9B498(a1);
}

id sub_10117C848(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A4110);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "PAUSE: Stopping auto-pause monitoring.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: Stopping auto-pause monitoring.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::stopMonitoringPauseState()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 120) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), 2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), 3);
  *(_DWORD *)buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  sub_100FF85A0(a1 + 144);
  return objc_msgSend(*(id *)(a1 + 136), "setNextFireDelay:", 1.79769313e308);
}

void sub_10117CA4C(uint64_t a1)
{
  sub_10117C7A0(a1);
  operator delete();
}

id sub_10117CA70(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A4110);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "PAUSE: Starting auto-pause monitoring.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: Starting auto-pause monitoring.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::startMonitoringPauseState()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 120) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8), 4, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 2, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), 2, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), 3, 0);
  return objc_msgSend(*(id *)(a1 + 136), "setNextFireDelay:", 900.0);
}

uint64_t sub_10117CC60(uint64_t a1)
{
  int v3;

  v3 = 0;
  if (sub_1001B7864(a1, &v3, 1))
    sub_10117CA70(a1);
  return 1;
}

uint64_t sub_10117CCA4(uint64_t a1)
{
  int v3;

  v3 = 0;
  if (!sub_1001B7864(a1, &v3, 1))
    sub_10117C848(a1);
  return 1;
}

id sub_10117CCE8(id result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  int *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (*a3 == 4)
  {
    v5 = (uint64_t)result;
    v6 = *(int **)(a4 + 800);
    if (v6 && sub_10104BD1C(v6))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A4110);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = sub_10104BD1C(*(int **)(a4 + 800));
        *(_DWORD *)buf = 134217984;
        v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "PAUSE: Batched notification response in auto-pause with %zu locations.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A4110);
        v10 = qword_1022A02D8;
        v11 = sub_10104BD1C(*(int **)(a4 + 800));
        v14 = 134217984;
        v15 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "PAUSE: Batched notification response in auto-pause with %zu locations.", (size_t)&v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      result = (id)sub_10104BD1C(*(int **)(a4 + 800));
      if (result)
      {
        for (i = 0; i < (unint64_t)result; ++i)
        {
          sub_10104B598(*(_QWORD *)(a4 + 800), i, (uint64_t)buf);
          sub_10117CF3C(v5, (uint64_t)buf);
          result = (id)sub_10104BD1C(*(int **)(a4 + 800));
        }
      }
    }
    else
    {
      return sub_10117CF3C(v5, a4);
    }
  }
  return result;
}

id sub_10117CF3C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  id result;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  char v13;
  const char *v14;
  uint8_t *v15;
  _BYTE v16[3];
  char v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v4 = *(unsigned __int8 *)(a1 + 202);
  v5 = *(unsigned __int8 *)(a1 + 201);
  v6 = *(unsigned __int8 *)(a1 + 200);
  v17 = 0;
  sub_100FF91B0(a1 + 144, (_OWORD *)a2, &v17);
  result = (id)sub_100FF86E4(*(_DWORD *)(a2 + 96));
  if ((_DWORD)result)
    result = objc_msgSend(*(id *)(a1 + 136), "setNextFireDelay:", 900.0);
  if (v17)
  {
    v8 = v4 != 0;
    v9 = *(unsigned __int8 *)(a1 + 202);
    v10 = *(unsigned __int8 *)(a1 + 201);
    if (v8 == (*(_BYTE *)(a1 + 202) != 0))
    {
      v13 = (v5 != 0) ^ (v10 != 0);
      v11 = *(unsigned __int8 *)(a1 + 200);
      if ((v13 & 1) == 0 && (v6 != 0) == (*(_BYTE *)(a1 + 200) != 0))
        return result;
    }
    else
    {
      v11 = *(unsigned __int8 *)(a1 + 200);
    }
    v16[0] = *(_BYTE *)(a1 + 202);
    v16[1] = v10;
    v16[2] = v11;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      v24 = v11;
      v25 = 1024;
      v26 = v10;
      v27 = 1024;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A4110);
      v19 = 1024;
      v20 = v10;
      v21 = 1024;
      v22 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d", &v18, 20, 67109632);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onLocationNotificationHelper(const CLDaemonLocation &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    *(_DWORD *)buf = 0;
    return (id)(*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v16, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10117D1F8(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint8_t *v12;
  int v13;
  uint8_t buf[8];

  if (*a3 >= 2)
  {
    if (*a3 == 2)
    {
      v9 = a1 + 144;
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      sub_100FF88B0(v9, (unint64_t *)buf, a4, a4 + 1);
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning PAUSE: Unknown notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A4110);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning PAUSE: Unknown notification %d", &v13);
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning PAUSE: unexpected notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A4110);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning PAUSE: unexpected notification %d", &v13);
LABEL_21:
      v12 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v7);
      if (v12 != buf)
        free(v12);
    }
  }
}

id *sub_10117D4D4(id *result, uint64_t a2, _DWORD *a3)
{
  id *v3;
  NSObject *v4;
  double v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v3 = result;
  if (*a3 == 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "PAUSE: got kNotificationWake.", buf, 2u);
    }
    v5 = 900.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A4110);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: got kNotificationWake.", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    if (*a3 != 2)
      return result;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4110);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PAUSE: got kNotificationSleep.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A4110);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: got kNotificationSleep.", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v5 = 1.79769313e308;
  }
  return (id *)objc_msgSend(v3[17], "setNextFireDelay:", v5);
}

void sub_10117D7D0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10117D7FC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10117D828()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C434A0;
      v1[3] = unk_101C434B0;
      v1[4] = xmmword_101C434C0;
      v1[0] = xmmword_101C43480;
      v1[1] = unk_101C43490;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10117D8FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

BOOL sub_10117DA78(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  int *v12;
  void *String;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 1)
        break;
      if ((v6 >> 3) == 2)
      {
        v12 = &OBJC_IVAR___ALSMeta__productId;
LABEL_21:
        String = (void *)PBReaderReadString(a2);

        *(_QWORD *)(a1 + *v12) = String;
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_23:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v12 = &OBJC_IVAR___ALSMeta__softwareBuild;
    goto LABEL_21;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

char *sub_10117E180(uint64_t a1, uint64_t a2, void *a3)
{
  char *result;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = (char *)objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(a3);
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        ++v8;
      }
      while (v6 != v8);
      result = (char *)objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_10117E2AC(id a1, NSString *a2, CLFallLogger *a3)
{
  -[CLFallLogger stopLogging](a3, "stopLogging");
}

void sub_10117E2EC(id a1, NSString *a2, CLFallLogger *a3)
{
  -[CLFallLogger clearLogs](a3, "clearLogs");
}

id sub_10117E400(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10117E484;
  v9[3] = &unk_1021A41E0;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v9[4] = a2;
  v9[5] = v7;
  v9[6] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a3, "flushInMemoryDataWithCompletionQueue:completionBlock:", v6, v9);
}

void sub_10117E484(uint64_t a1, uint64_t a2)
{
  id v4;

  if (*(_QWORD *)(a1 + 32))
  {
    v4 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:");
    if (a2)
    {
      if (!v4)
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", a2, *(_QWORD *)(a1 + 32));
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

_QWORD *sub_10117E528(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v1 = result[4];
  if (*(_BYTE *)(v1 + 8))
  {
    v2 = result;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v3 = objc_msgSend(*(id *)(v1 + 16), "objectForKeyedSubscript:", +[CLFallLoggerManager loggerDataTypeString:](CLFallLoggerManager, "loggerDataTypeString:", *((unsigned __int8 *)result + 48), 0));
    result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (result)
    {
      v4 = result;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "logData:", v2[5]);
          v6 = (_QWORD *)((char *)v6 + 1);
        }
        while (v4 != v6);
        result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        v4 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_10117EEC8(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_10117EEF4()
{
  sub_1015A2E04(qword_10230D1B0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D1B0, (void *)&_mh_execute_header);
}

double sub_10117EF38(_OWORD *a1)
{
  double result;

  result = -1.0;
  *a1 = xmmword_101BAFC90;
  a1[1] = xmmword_101BAFC90;
  a1[2] = xmmword_101BAFC90;
  return result;
}

double sub_10117EF4C(uint64_t a1, _QWORD *a2, double *a3, _BYTE *a4, _QWORD *a5)
{
  double result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  *a4 = 0;
  *a5 = 0xBFF0000000000000;
  result = *a3;
  if (*a3 >= 0.0)
  {
    if (*(double *)a2 >= 0.0)
    {
      *(double *)(a1 + 16) = result;
      *(_QWORD *)(a1 + 24) = *a2;
      result = *(double *)a2;
      v12 = *(double *)(a1 + 8);
      if (*(double *)a1 >= 0.0 && result < v12)
      {
        result = -1.0;
        *(_OWORD *)(a1 + 32) = xmmword_101BAFC90;
        *(_OWORD *)a1 = xmmword_101BAFC90;
      }
      else if (result - v12 >= 0.9)
      {
        result = result - *(double *)(a1 + 40);
        if (result >= 1.5)
        {
          *a4 = 1;
          *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
          result = *(double *)a1;
          *a5 = *(_QWORD *)a1;
        }
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A42D0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a2;
      *(_DWORD *)buf = 134349056;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,SpeedFilter,%{public}.1lf,unexpected,vehicleSpeed < 0", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A42D0);
      v9 = *a2;
      v14 = 134349056;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,SpeedFilter,%{public}.1lf,unexpected,vehicleSpeed < 0", &v14, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleSpeedFilter::update(const CFAbsoluteTime &, const double &, BOOL &, double &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return result;
}

void sub_10117F198(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10117F594()
{
  operator delete();
}

void sub_10117F5B8(uint64_t a1, int *a2, _BYTE *a3, void *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*a2 == 5)
  {
    if (!*a3)
      objc_msgSend(a4, "setSession:", 0);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A42F0);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      *(_DWORD *)buf = 67109120;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Received unhandled notification, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A42F0);
      v7 = *a2;
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Received unhandled notification, %d", v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void onCompanionNotification_bounce(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &, void *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

id sub_10117F7B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onOdometerNotification:data:", a2, a3);
}

id sub_10117F7C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateNotification:data:", a2, a3);
}

void sub_1011801E4(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_101180210()
{
  operator new();
}

uint64_t sub_1011802A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1011802C0()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C43548;
      v1[3] = unk_101C43558;
      v1[4] = xmmword_101C43568;
      v1[0] = xmmword_101C43528;
      v1[1] = unk_101C43538;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101180394(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1011803AC()
{
  sub_1015A2E04(qword_10230D1C8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D1C8, (void *)&_mh_execute_header);
}

void sub_1011803F0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64x2_t v13;
  float64x2_t v14;
  int64x2_t v15;
  double v16;
  NSObject *v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  int64x2_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  unsigned int v32;
  NSObject *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int64x2_t v44;
  double v45;
  double v46;
  double v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  NSObject *v51;
  unint64_t v52;
  unsigned int v53;
  float64x2_t v54;
  unsigned int v55;
  __int128 v56;
  uint64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int32x4_t v60;
  unsigned int v61;
  NSObject *v62;
  uint64_t v63;
  int v64;
  int v65;
  NSObject *v66;
  float32x2_t v67;
  float v68;
  float v69;
  unsigned int v70;
  NSObject *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  double v77;
  double v78;
  double v79;
  const char *v80;
  uint8_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  const char *v85;
  uint8_t *v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  const char *v91;
  uint8_t *v92;
  const char *v93;
  uint8_t *v94;
  const char *v95;
  uint8_t *v96;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  uint8_t *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  double v106;
  double v107;
  double v108;
  const char *v109;
  uint8_t *v110;
  uint64_t v111;
  unsigned int v112;
  int64x2_t v113;
  unsigned int v114;
  double v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int8x16_t v121;
  double v122;
  int32x2_t v123;
  int64x2_t v124;
  double v125;
  int32x2_t v126;
  int64x2_t v127;
  int32x2_t v128;
  double v129;
  int32x2_t v130;
  int32x2_t v131;
  int64x2_t v132;
  _QWORD v133[6];
  unsigned int v134;
  float v135;
  _QWORD v136[6];
  unsigned int v137;
  int32x2_t v138;
  unsigned int v139;
  unsigned int v140;
  int32x2_t v141;
  unsigned int v142;
  unsigned int v143;
  int8x16_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int32x2_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  _BYTE v154[10];
  _BYTE v155[6];
  _BYTE v156[6];
  __int16 v157;
  unsigned int v158;
  __int16 v159;
  _BYTE v160[10];
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  uint8_t buf[4];
  _BYTE v167[10];
  _BYTE v168[6];
  _BYTE v169[6];
  __int16 v170;
  unsigned int v171;
  __int16 v172;
  _BYTE v173[10];
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A4310);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLProactiveLocStats,submitStats()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
    LOWORD(v153) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLocStats,submitStats()", &v153, 2);
    v81 = (uint8_t *)v80;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v80);
    if (v81 != buf)
      free(v81);
  }
  if (*(double *)(a1 + 48) >= 1.0 && *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 120))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(double *)(a1 + 112);
      v5 = *(_DWORD *)(a1 + 120);
      v6 = *(double *)(a1 + 48);
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)v167 = v4;
      *(_WORD *)&v167[4] = 1026;
      *(_DWORD *)&v167[6] = v5;
      *(_WORD *)v168 = 1026;
      *(_DWORD *)&v168[2] = v7;
      *(_WORD *)v169 = 1026;
      *(_DWORD *)&v169[2] = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Overall,APWakeDur,%{public}d,APWakeCnt,%{public}d,sessCnt,%{public}d,gnssSec,%{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v87 = *(double *)(a1 + 112);
      v88 = *(_DWORD *)(a1 + 120);
      v89 = *(double *)(a1 + 48);
      v90 = *(_DWORD *)(a1 + 16);
      v153 = 67240960;
      *(_DWORD *)v154 = v87;
      *(_WORD *)&v154[4] = 1026;
      *(_DWORD *)&v154[6] = v88;
      *(_WORD *)v155 = 1026;
      *(_DWORD *)&v155[2] = v90;
      *(_WORD *)v156 = 1026;
      *(_DWORD *)&v156[2] = v89;
      LODWORD(v111) = 26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,Overall,APWakeDur,%{public}d,APWakeCnt,%{public}d,sessCnt,%{public}d,gnssSec,%{public}d", &v153, v111);
      v92 = (uint8_t *)v91;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v91);
      if (v92 != buf)
        free(v92);
    }
    LODWORD(v9) = *(_DWORD *)(a1 + 120);
    LODWORD(v8) = *(_DWORD *)(a1 + 124);
    *(double *)&v10 = (double)v9;
    v11 = (double)v8 * 100.0 / *(double *)&v10;
    v12 = *(_QWORD *)(a1 + 128);
    v13.i64[0] = v12;
    v13.i64[1] = HIDWORD(v12);
    v14 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v13), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), (float64x2_t)vdupq_lane_s64(v10, 0));
    v15 = (int64x2_t)vcvtq_u64_f64(v14);
    LODWORD(v14.f64[0]) = *(_DWORD *)(a1 + 136);
    v16 = (double)*(unint64_t *)&v14.f64[0] * 100.0 / *(double *)&v10;
    if (qword_1022A0020 != -1)
    {
      v132 = v15;
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v15 = v132;
    }
    v130 = vmovn_s64(v15);
    v17 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)v167 = v11;
      *(_WORD *)&v167[4] = 1026;
      *(_DWORD *)&v167[6] = v130.i32[0];
      *(_WORD *)v168 = 1026;
      *(_DWORD *)&v168[2] = v130.i32[1];
      *(_WORD *)v169 = 1026;
      *(_DWORD *)&v169[2] = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,AP WakeDuration sec,percentage,[-,10),%{public}d,[10,20),%{public}d,[20,30),%{public}d,[30,+),%{public}d", buf, 0x1Au);
    }
    v119 = v16;
    v120 = v11;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v153 = 67240960;
      *(_DWORD *)v154 = v11;
      *(_WORD *)&v154[4] = 1026;
      *(_DWORD *)&v154[6] = v130.i32[0];
      *(_WORD *)v155 = 1026;
      *(_DWORD *)&v155[2] = v130.i32[1];
      *(_WORD *)v156 = 1026;
      *(_DWORD *)&v156[2] = v16;
      LODWORD(v111) = 26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,AP WakeDuration sec,percentage,[-,10),%{public}d,[10,20),%{public}d,[20,30),%{public}d,[30,+),%{public}d", &v153, v111);
      v94 = (uint8_t *)v93;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
    LODWORD(v18) = *(_DWORD *)(a1 + 80);
    v29 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    LODWORD(v19) = *(_DWORD *)(a1 + 16);
    v20 = (double)v19;
    v21 = (double)v18 * 100.0 / v20;
    v22 = *(_QWORD *)(a1 + 84);
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0);
    v25 = (int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v29), v24));
    v26 = *(_QWORD *)(a1 + 92);
    v23.i64[0] = v26;
    v23.i64[1] = HIDWORD(v26);
    v27 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v29), v24);
    v28 = (int64x2_t)vcvtq_u64_f64(v27);
    LODWORD(v27.f64[0]) = *(_DWORD *)(a1 + 100);
    LODWORD(v29.f64[0]) = *(_DWORD *)(a1 + 104);
    v30 = (double)*(unint64_t *)&v27.f64[0] * 100.0 / v20;
    v31 = (double)*(unint64_t *)&v29.f64[0] * 100.0 / v20;
    if (qword_1022A0020 != -1)
    {
      v129 = (double)*(unint64_t *)&v29.f64[0] * 100.0 / v20;
      v124 = v28;
      v127 = v25;
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v28 = v124;
      v25 = v127;
      v31 = v129;
    }
    v128 = vmovn_s64(v25);
    v126 = vmovn_s64(v28);
    v32 = v31;
    v33 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67241728;
      *(_DWORD *)v167 = v21;
      *(_WORD *)&v167[4] = 1026;
      *(_DWORD *)&v167[6] = v128.i32[0];
      *(_WORD *)v168 = 1026;
      *(_DWORD *)&v168[2] = v128.i32[1];
      *(_WORD *)v169 = 1026;
      *(_DWORD *)&v169[2] = v126.i32[0];
      v170 = 1026;
      v171 = v126.u32[1];
      v172 = 1026;
      *(_DWORD *)v173 = v30;
      *(_WORD *)&v173[4] = 1026;
      *(_DWORD *)&v173[6] = v32;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Intersession min, percentage,[-,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),%{public}d,[20,30),%{public}d,[30,+),%{public}d", buf, 0x2Cu);
    }
    v117 = v32;
    v118 = v21;
    v116 = v30;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v153 = 67241728;
      *(_DWORD *)v154 = v21;
      *(_WORD *)&v154[4] = 1026;
      *(_DWORD *)&v154[6] = v128.i32[0];
      *(_WORD *)v155 = 1026;
      *(_DWORD *)&v155[2] = v128.i32[1];
      *(_WORD *)v156 = 1026;
      *(_DWORD *)&v156[2] = v126.i32[0];
      v157 = 1026;
      v158 = v126.u32[1];
      v159 = 1026;
      *(_DWORD *)v160 = v30;
      *(_WORD *)&v160[4] = 1026;
      *(_DWORD *)&v160[6] = v32;
      LODWORD(v111) = 44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,Intersession min, percentage,[-,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),%{public}d,[20,30),%{public}d,[30,+),%{public}d", &v153, v111);
      v96 = (uint8_t *)v95;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v95);
      if (v96 != buf)
        free(v96);
    }
    LODWORD(v35) = *(_DWORD *)(a1 + 16);
    LODWORD(v34) = *(_DWORD *)(a1 + 20);
    *(double *)&v36 = (double)v34 * 100.0;
    *(double *)&v37 = (double)v35;
    v38 = *(double *)&v36 / (double)v35;
    LODWORD(v36) = *(_DWORD *)(a1 + 32);
    LODWORD(v35) = *(_DWORD *)(a1 + 36);
    v39 = (double)v36 * 100.0 / *(double *)&v37;
    v40 = *(_QWORD *)(a1 + 40);
    v41.i64[0] = v40;
    v41.i64[1] = HIDWORD(v40);
    v42 = (float64x2_t)vdupq_lane_s64(v37, 0);
    v43 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v41), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), v42);
    v44 = (int64x2_t)vcvtq_u64_f64(v43);
    LODWORD(v42.f64[0]) = *(_DWORD *)(a1 + 24);
    LODWORD(v43.f64[0]) = *(_DWORD *)(a1 + 28);
    v45 = (double)*(unint64_t *)&v43.f64[0] * 100.0 / *(double *)&v37;
    v46 = (double)v35 * 100.0 / *(double *)&v37;
    v47 = (double)*(unint64_t *)&v42.f64[0] * 100.0 / *(double *)&v37;
    if (qword_1022A0020 != -1)
    {
      v125 = v45;
      v115 = v46;
      v122 = v47;
      v113 = v44;
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v44 = v113;
      v47 = v122;
      v46 = v115;
      v45 = v125;
    }
    v48 = v45;
    v123 = vmovn_s64(v44);
    v49 = v46;
    v50 = v47;
    v51 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67241728;
      *(_DWORD *)v167 = v38;
      *(_WORD *)&v167[4] = 1026;
      *(_DWORD *)&v167[6] = v39;
      *(_WORD *)v168 = 1026;
      *(_DWORD *)&v168[2] = v123.i32[1];
      *(_WORD *)v169 = 1026;
      *(_DWORD *)&v169[2] = v123.i32[0];
      v170 = 1026;
      v171 = v48;
      v172 = 1026;
      *(_DWORD *)v173 = v49;
      *(_WORD *)&v173[4] = 1026;
      *(_DWORD *)&v173[6] = v50;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Session percentage,converged,%{public}d,APSleep,%{public}d,LocSrvDisabled,%{public}d,lpm,%{public}d,timeout,%{public}d,visitEnd,%{public}d,noYield,%{public}d", buf, 0x2Cu);
    }
    v114 = v48;
    v112 = v49;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v153 = 67241728;
      *(_DWORD *)v154 = v38;
      *(_WORD *)&v154[4] = 1026;
      *(_DWORD *)&v154[6] = v39;
      *(_WORD *)v155 = 1026;
      *(_DWORD *)&v155[2] = v123.i32[1];
      *(_WORD *)v156 = 1026;
      *(_DWORD *)&v156[2] = v123.i32[0];
      v157 = 1026;
      v158 = v48;
      v159 = 1026;
      *(_DWORD *)v160 = v49;
      *(_WORD *)&v160[4] = 1026;
      *(_DWORD *)&v160[6] = v50;
      LODWORD(v111) = 44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,Session percentage,converged,%{public}d,APSleep,%{public}d,LocSrvDisabled,%{public}d,lpm,%{public}d,timeout,%{public}d,visitEnd,%{public}d,noYield,%{public}d", &v153, v111);
      v98 = (uint8_t *)v97;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v97);
      if (v98 != buf)
        free(v98);
    }
    v53 = *(_DWORD *)(a1 + 20);
    if (v53)
    {
      LODWORD(v52) = *(_DWORD *)(a1 + 56);
      v54 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      v55 = ((double)v52 * 100.0 / (double)v53);
      v56 = *(_OWORD *)(a1 + 60);
      v57.i64[0] = v56;
      v57.i64[1] = DWORD1(v56);
      v58 = vcvtq_f64_u64(v57);
      v57.i64[0] = DWORD2(v56);
      v57.i64[1] = HIDWORD(v56);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v53), 0);
      v60 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v58, v54), v59)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v57), v54), v59)));
      v121 = (int8x16_t)v60;
      v60.i32[0] = *(_DWORD *)(a1 + 76);
      v61 = ((double)v60.u64[0] * 100.0 / (double)v53);
    }
    else
    {
      v55 = 0;
      v61 = 0;
      v121 = 0u;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
    v66 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67241472;
      *(_DWORD *)v167 = v55;
      *(_WORD *)&v167[4] = 1026;
      *(_DWORD *)&v167[6] = v121.i32[0];
      *(_WORD *)v168 = 1026;
      *(_DWORD *)&v168[2] = v121.i32[1];
      *(_WORD *)v169 = 1026;
      *(_DWORD *)&v169[2] = v121.i32[2];
      v170 = 1026;
      v171 = v121.u32[3];
      v172 = 1026;
      *(_DWORD *)v173 = v61;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Converged session sec, percentage,[-,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d,[10,15),%{public}d,[15,+),%{public}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v153 = 67241472;
      *(_DWORD *)v154 = v55;
      *(_WORD *)&v154[4] = 1026;
      *(_DWORD *)&v154[6] = v121.i32[0];
      *(_WORD *)v155 = 1026;
      *(_DWORD *)&v155[2] = v121.i32[1];
      *(_WORD *)v156 = 1026;
      *(_DWORD *)&v156[2] = v121.i32[2];
      v157 = 1026;
      v158 = v121.u32[3];
      v159 = 1026;
      *(_DWORD *)v160 = v61;
      LODWORD(v111) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,Converged session sec, percentage,[-,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d,[10,15),%{public}d,[15,+),%{public}d", &v153, v111);
      v100 = (uint8_t *)v99;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v99);
      if (v100 != buf)
        free(v100);
    }
    v136[0] = _NSConcreteStackBlock;
    v136[1] = 3221225472;
    v136[2] = sub_1011815B4;
    v136[3] = &unk_10215F810;
    v136[4] = a1;
    v136[5] = v126;
    v137 = v116;
    v138 = v128;
    v139 = v118;
    v140 = v117;
    v141 = v130;
    v142 = v120;
    v143 = v119;
    v144 = vextq_s8(v121, v121, 0xCuLL);
    v145 = v55;
    v146 = v61;
    v147 = v38;
    v148 = v39;
    v149 = vrev64_s32(v123);
    v150 = v114;
    v151 = v112;
    v152 = v50;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.ProactiveLocation"), v136);
    v67 = *(float32x2_t *)(a1 + 160);
    v68 = *(float *)(a1 + 168);
    v69 = vaddv_f32(v67) + v68;
    if (v69 <= 0.0)
    {
      v70 = 0;
      v131 = 0;
    }
    else
    {
      v131 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(v67), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v69), 0))));
      v70 = (v68 * 100.0 / v69);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
    v71 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v72 = *(_DWORD *)(a1 + 140);
      v73 = *(_DWORD *)(a1 + 144);
      v74 = *(_DWORD *)(a1 + 148);
      v75 = *(_DWORD *)(a1 + 152);
      v76 = *(_DWORD *)(a1 + 156);
      v77 = *(float *)(a1 + 160);
      v78 = *(float *)(a1 + 164);
      v79 = *(float *)(a1 + 168);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)v167 = v72;
      *(_WORD *)&v167[4] = 1026;
      *(_DWORD *)&v167[6] = v73;
      *(_WORD *)v168 = 1026;
      *(_DWORD *)&v168[2] = v74;
      *(_WORD *)v169 = 1026;
      *(_DWORD *)&v169[2] = v75;
      v170 = 1026;
      v171 = v76;
      v172 = 2050;
      *(double *)v173 = v77;
      *(_WORD *)&v173[8] = 2050;
      v174 = v78;
      v175 = 2050;
      v176 = v79;
      v177 = 2050;
      v178 = v69;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,PerformanceMetrics,cntVisitExitSuccessfulPredict,%{public}d,cntVisitExitUnSuccessfulPredict,%{public}d,cntVisitExitMissedPredict,%{public}d,maxVisitExitPullInSec,%{public}d,avgVisitExitPullInSec,%{public}d,APSleepDurationLT2minSec,%{public}0.2f,APSleepDurationGT2minLT5minSec,%{public}0.2f,APSleepDurationGT5minSec,%{public}0.2f,APSleepDurationTotalSec,%{public}0.2f,", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v101 = *(_DWORD *)(a1 + 140);
      v102 = *(_DWORD *)(a1 + 144);
      v103 = *(_DWORD *)(a1 + 148);
      v104 = *(_DWORD *)(a1 + 152);
      v105 = *(_DWORD *)(a1 + 156);
      v106 = *(float *)(a1 + 160);
      v107 = *(float *)(a1 + 164);
      v108 = *(float *)(a1 + 168);
      v153 = 67242240;
      *(_DWORD *)v154 = v101;
      *(_WORD *)&v154[4] = 1026;
      *(_DWORD *)&v154[6] = v102;
      *(_WORD *)v155 = 1026;
      *(_DWORD *)&v155[2] = v103;
      *(_WORD *)v156 = 1026;
      *(_DWORD *)&v156[2] = v104;
      v157 = 1026;
      v158 = v105;
      v159 = 2050;
      *(double *)v160 = v106;
      *(_WORD *)&v160[8] = 2050;
      v161 = v107;
      v162 = 2050;
      v163 = v108;
      v164 = 2050;
      v165 = v69;
      LODWORD(v111) = 72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,PerformanceMetrics,cntVisitExitSuccessfulPredict,%{public}d,cntVisitExitUnSuccessfulPredict,%{public}d,cntVisitExitMissedPredict,%{public}d,maxVisitExitPullInSec,%{public}d,avgVisitExitPullInSec,%{public}d,APSleepDurationLT2minSec,%{public}0.2f,APSleepDurationGT2minLT5minSec,%{public}0.2f,APSleepDurationGT5minSec,%{public}0.2f,APSleepDurationTotalSec,%{public}0.2f,", &v153, v111);
      v110 = (uint8_t *)v109;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v109);
      if (v110 != buf)
        free(v110);
    }
    v133[0] = _NSConcreteStackBlock;
    v133[1] = 3221225472;
    v133[2] = sub_101181944;
    v133[3] = &unk_10217F198;
    v133[4] = a1;
    v133[5] = vrev64_s32(v131);
    v134 = v70;
    v135 = v69;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.PerformanceMetricsProactiveLocation"), v133);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A4310);
    v62 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v63 = *(_QWORD *)(a1 + 48);
      v64 = *(_DWORD *)(a1 + 16);
      v65 = *(_DWORD *)(a1 + 120);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)v167 = v63;
      *(_WORD *)&v167[8] = 1026;
      *(_DWORD *)v168 = v64;
      *(_WORD *)&v168[4] = 1026;
      *(_DWORD *)v169 = v65;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,small or invalid data,CA submit skipped,activeSec,%{public}0.2f,numSess,%{public}d,numApWake,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4310);
      v82 = *(_QWORD *)(a1 + 48);
      v83 = *(_DWORD *)(a1 + 16);
      v84 = *(_DWORD *)(a1 + 120);
      v153 = 134349568;
      *(_QWORD *)v154 = v82;
      *(_WORD *)&v154[8] = 1026;
      *(_DWORD *)v155 = v83;
      *(_WORD *)&v155[4] = 1026;
      *(_DWORD *)v156 = v84;
      LODWORD(v111) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,CA,small or invalid data,CA submit skipped,activeSec,%{public}0.2f,numSess,%{public}d,numApWake,%{public}d", &v153, v111);
      v86 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v85);
      if (v86 != buf)
        free(v86);
    }
  }
}

NSDictionary *sub_1011815B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[28];
  _QWORD v5[28];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = CFSTR("DailyAPWakeDurationSeconds");
  v5[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 112));
  v4[1] = CFSTR("DailyCountAPWakes");
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 120));
  v4[2] = CFSTR("DailyCountGNSSSessions");
  v5[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 16));
  v4[3] = CFSTR("DailyGNSSLocationReqActiveSec");
  v5[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 48));
  v4[4] = CFSTR("PercentageIntersessionTime10to15min");
  v5[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40));
  v4[5] = CFSTR("PercentageIntersessionTime15to20min");
  v5[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44));
  v4[6] = CFSTR("PercentageIntersessionTime20to30min");
  v5[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48));
  v4[7] = CFSTR("PercentageIntersessionTime3To5min");
  v5[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52));
  v4[8] = CFSTR("PercentageIntersessionTime5to10min");
  v5[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56));
  v4[9] = CFSTR("PercentageIntersessionTimeLessThan3min");
  v5[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60));
  v4[10] = CFSTR("PercentageIntersessionTimeMoreThan30min");
  v5[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64));
  v4[11] = CFSTR("PercentAPWakeDuration10To20Sec");
  v5[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 68));
  v4[12] = CFSTR("PercentAPWakeDuration20To30Sec");
  v5[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v4[13] = CFSTR("PercentAPWakeDurationLessThan10Sec");
  v5[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76));
  v4[14] = CFSTR("PercentAPWakeDurationMoreThan30Sec");
  v5[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80));
  v4[15] = CFSTR("PercentConvergedGNSSSessionDuration10To15Sec");
  v5[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84));
  v4[16] = CFSTR("PercentConvergedGNSSSessionDuration3To5Sec");
  v5[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88));
  v4[17] = CFSTR("PercentConvergedGNSSSessionDuration5To8Sec");
  v5[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92));
  v4[18] = CFSTR("PercentConvergedGNSSSessionDuration8To10Sec");
  v5[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96));
  v4[19] = CFSTR("PercentConvergedGNSSSessionDurationLessThan3Sec");
  v5[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 100));
  v4[20] = CFSTR("PercentConvergedGNSSSessionDurationMoreThan15Sec");
  v5[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 104));
  v4[21] = CFSTR("PercentGNSSSessionConverged");
  v5[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 108));
  v4[22] = CFSTR("PercentGNSSSessionIncompleteAPSleep");
  v5[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 112));
  v4[23] = CFSTR("PercentGNSSSessionIncompleteLocSrvcDisabled");
  v5[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 116));
  v4[24] = CFSTR("PercentGNSSSessionIncompleteLowPowerMode");
  v5[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 120));
  v4[25] = CFSTR("PercentGNSSSessionIncompleteTimeout");
  v5[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 124));
  v4[26] = CFSTR("PercentGNSSSessionIncompleteVisitEnd");
  v5[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 128));
  v4[27] = CFSTR("PercentGNSSSessionNoYield");
  v5[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 132));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 28);
}

NSDictionary *sub_101181944(uint64_t a1)
{
  unsigned int *v2;
  _QWORD v4[9];
  _QWORD v5[9];

  v2 = *(unsigned int **)(a1 + 32);
  v4[0] = CFSTR("DailyEarlyVisitExitPredictionAverage");
  v5[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2[39]);
  v4[1] = CFSTR("DailyEarlyVisitExitPredictionMax");
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2[38]);
  v4[2] = CFSTR("DailyMissedVisitExitPredictionCount");
  v5[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2[37]);
  v4[3] = CFSTR("DailyPercentAPSleep2To5min");
  v5[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40));
  v4[4] = CFSTR("DailyPercentAPSleepLessThan2min");
  v5[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44));
  v4[5] = CFSTR("DailyPercentAPSleepMoreThan5min");
  v5[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48));
  v4[6] = CFSTR("DailySuccessfulVisitExitPredictionCount");
  v5[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2[35]);
  v4[7] = CFSTR("DailyTotalAPSleepDurationSec");
  v5[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(float *)(a1 + 52));
  v4[8] = CFSTR("DailyUnsuccessfulVisitExitPredictionCount");
  v5[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2[36]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 9);
}

void sub_101181ABC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101181E74(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
  {
    v2 = *(void **)(a1 + 40);
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    sub_10024FAD4(*(_QWORD *)(v1 + 144), rep, v2);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ignoring indoor error - shutting down", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring indoor error - shutting down", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorDidFailWithError:]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_1011820B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(a1 + 40);
    std::chrono::steady_clock::now();
    sub_100243EFC(*(_QWORD *)(v1 + 144), v2);
    sub_10024FEF0(*(_QWORD *)(v1 + 144));
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ignoring indoor is uncertain - shutting down", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring indoor is uncertain - shutting down", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorIsUncertainWithLocation:]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_101182DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_101182E10(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("cell");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v1 = (_QWORD *)*v1;
  v3[2] = CFSTR("island");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
  v4[2] = CFSTR("null");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_101182EC4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("cell");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v1 = (_QWORD *)*v1;
  v3[2] = CFSTR("island");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
  v4[2] = CFSTR("sentinel");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

void sub_101182F78(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  std::chrono::steady_clock::time_point v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BYTE v28[445];
  _BYTE __src[513];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint8_t buf[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  _QWORD v47[65];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  std::__shared_weak_count *v56;
  void *__p;
  char v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  id v69;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    sub_100129CA0((uint64_t)buf);
    v2 = *(void **)(a1 + 40);
    if (v2)
    {
      objc_msgSend(v2, "location");
      v3 = *(void **)(a1 + 40);
      v44 = *(_OWORD *)&__src[96];
      v45 = *(_OWORD *)&__src[112];
      v46[0] = *(_OWORD *)&__src[128];
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)&__src[140];
      v40 = *(_OWORD *)&__src[32];
      v41 = *(_OWORD *)&__src[48];
      v42 = *(_OWORD *)&__src[64];
      v43 = *(_OWORD *)&__src[80];
      *(_OWORD *)buf = *(_OWORD *)__src;
      v39 = *(_OWORD *)&__src[16];
      if (v3)
      {
        objc_msgSend(v3, "locationPrivate");
        goto LABEL_16;
      }
    }
    else
    {
      memset(v46, 0, 28);
      v45 = 0u;
      v44 = 0u;
      v43 = 0u;
      v42 = 0u;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      *(_OWORD *)buf = 0u;
    }
    bzero(v28, 0x230uLL);
LABEL_16:
    sub_1000A0750((uint64_t)__src, (uint64_t)v28);
    memcpy(v47, __src, 0x201uLL);
    v7 = v30;
    v30 = 0u;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    v48 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v53 = v35;
    v54 = v36;
    v49 = v31;
    v50 = v32;
    v51 = v33;
    v52 = v34;
    v55 = v37;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v55 = 0;
    v47[3] = 0;
    v14 = *(void **)(a1 + 40);
    if (v14)
    {
      objc_msgSend(v14, "diagnosticReport");
      v14 = *(void **)(a1 + 40);
    }
    else
    {
      memset(__src, 0, 136);
    }
    v65 = *(_OWORD *)&__src[80];
    v66 = *(_OWORD *)&__src[96];
    v67 = *(_OWORD *)&__src[112];
    v61 = *(_OWORD *)&__src[16];
    v62 = *(_OWORD *)&__src[32];
    v63 = *(_OWORD *)&__src[48];
    v64 = *(_OWORD *)&__src[64];
    v68 = *(_QWORD *)&__src[128];
    v60 = *(_OWORD *)__src;
    v15 = objc_msgSend(v14, "requestsGpsAssistance");
    v16 = *(void **)(a1 + 40);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    sub_1015A2E04(__src, (char *)objc_msgSend(objc_msgSend(v16, "locationId"), "UTF8String"));
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_1002513B0(*(_QWORD *)(v17 + 144), v18.__d_.__rep_, (uint64_t)buf, (uint64_t)v15);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);

    v19 = v59;
    if (v59)
    {
      v20 = (unint64_t *)&v59->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v58 < 0)
      operator delete(__p);
    v22 = v56;
    if (v56)
    {
      v23 = (unint64_t *)&v56->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ignoring location update - shutting down", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    *(_WORD *)__src = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring location update - shutting down", __src, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorDidUpdateToLocation:fromLocation:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_101183410(_Unwind_Exception *a1)
{
  sub_1004B4F0C((uint64_t)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10118349C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101183510;
  v3[3] = &unk_10212BB30;
  v3[4] = a1;
  v3[5] = a2;
  if (qword_10230D1F8 != -1)
    dispatch_once(&qword_10230D1F8, v3);
  return qword_10230D200;
}

void sub_101183510()
{
  operator new();
}

void sub_101183558()
{
  operator delete();
}

void sub_10118357C(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1006DAF10(a1, "pipeline", a2);
  v4[15] = off_1021A4558;
  v4[16] = off_1021A4648;
  *v4 = off_1021A4340;
  v4[17] = a3;
  operator new();
}

void sub_101183A30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100008848((uint64_t)(v1 + 85), *v5);
  sub_100008848((uint64_t)(v1 + 82), *v4);
  sub_10023ECF4((uint64_t)(v1 + 81));
  sub_100602508(v3);
  v7 = v1[47];
  v1[47] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[46];
  v1[46] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1 + 44;
  v10 = v1[45];
  v1[45] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *v9;
  *v9 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_101480134(v2);
  v12 = v1[24];
  v1[24] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v1[23];
  v1[23] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v1[22];
  v1[22] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v1[21];
  v1[21] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v1[18];
  v1[18] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_1006DB4AC(v1);
  _Unwind_Resume(a1);
}

void sub_101183B9C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLPipelineLocationProvider::onAvlFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1011875C4(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_101183D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101183D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1021A4340;
  *(_QWORD *)(a1 + 120) = off_1021A4558;
  *(_QWORD *)(a1 + 128) = off_1021A4648;

  *(_QWORD *)(a1 + 152) = 0;
  sub_100008848(a1 + 680, *(_QWORD **)(a1 + 688));
  sub_100008848(a1 + 656, *(_QWORD **)(a1 + 664));
  sub_10023ECF4(a1 + 648);
  sub_100602508(a1 + 400);
  v2 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_101480134(a1 + 200);
  v6 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return sub_1006DB4AC(a1);
}

uint64_t sub_101183EC8(uint64_t a1)
{
  return sub_101183D74(a1 - 120);
}

uint64_t sub_101183ED0(uint64_t a1)
{
  return sub_101183D74(a1 - 128);
}

void sub_101183ED8(uint64_t a1)
{
  sub_101183D74(a1);
  operator delete();
}

void sub_101183EFC(uint64_t a1)
{
  sub_101183D74(a1 - 120);
  operator delete();
}

void sub_101183F24(uint64_t a1)
{
  sub_101183D74(a1 - 128);
  operator delete();
}

void sub_101183F4C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _DWORD v17[3];
  uint8_t buf[8];

  *(_QWORD *)(a1 + 152) = -[CLPipelineXPCBounce initWithProvider:onSilo:]([CLPipelineXPCBounce alloc], "initWithProvider:onSilo:", a1, *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *(_QWORD *)(a1 + 160) = v2;
  objc_msgSend(v2, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 160), "setDelegateEntityName:", "CLIndoorLocationProvider");
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLVisionNotifier"));
  *(_QWORD *)(a1 + 384) = v3;
  objc_msgSend(v3, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 384), "setDelegateEntityName:", "CLIndoorLocationProvider");
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLOutdoorService"));
  *(_QWORD *)(a1 + 392) = v4;
  objc_msgSend(v4, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 392), "setDelegateEntityName:", "CLIndoorLocationProvider");
  v5 = NSClassFromString(CFSTR("CLStarkManager"));
  if (v5)
  {
    v6 = objc_alloc_init(v5);
    *(_QWORD *)(a1 + 704) = v6;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_101184D94;
    v16[3] = &unk_10219F178;
    v16[4] = a1;
    objc_msgSend(v6, "setConnectionUpdateHandler:", v16);
  }
  v7 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  objc_msgSend(*(id *)(a1 + 152), "setDebounceTimer:", v7);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_101184FC4;
  v15[3] = &unk_10212ECA0;
  v15[4] = a1;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "debounceTimer"), "setHandler:", v15);
  v8 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_101184FD0;
  v14[3] = &unk_10212ECA0;
  v14[4] = a1;
  objc_msgSend(v8, "setHandler:", v14);
  objc_msgSend(*(id *)(a1 + 152), "setRouteHintWatchdogTimer:", v8);

  objc_msgSend(*(id *)(a1 + 152), "setIndoorBundle:", sub_101184FF8());
  v9 = objc_alloc_init((Class)objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoorBundle"), "classNamed:", CFSTR("CLIndoorMaintenance")));
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 152), "setDaemonControl:", v9);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Indoor framework doesn't expose maintenance controller", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Indoor framework doesn't expose maintenance controller", v17, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLPipelineLocationProvider::start()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }

  sub_1011851E0(a1);
  v11 = objc_autoreleasePoolPush();
  sub_1011854C4(a1);
  objc_autoreleasePoolPop(v11);
  sub_1012B2C64();
}

void sub_101184D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char *a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  char *v57;
  char *v59;
  uint64_t v60;

  v59 = a51;
  if (a51 == v57)
  {
    v60 = 4;
    v59 = &a48;
  }
  else
  {
    if (!a51)
      goto LABEL_6;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_6:
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101184D94(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];
  char v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101184DF0;
  v5[3] = &unk_1021468D0;
  v5[4] = v2;
  v6 = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_101184DF0(uint64_t a1)
{
  uint64_t v2;
  std::chrono::steady_clock::time_point v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received fStarkMgr connectionUpdateHandler, connected: %d\n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6 = *(unsigned __int8 *)(a1 + 40);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Received fStarkMgr connectionUpdateHandler, connected: %d\n", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::start()_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100252C54(*(_QWORD *)(v2 + 144), v3.__d_.__rep_, *(unsigned __int8 *)(a1 + 40));
}

void sub_101184FC4(uint64_t a1)
{
  sub_100008888(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144));
}

void sub_101184FD0(uint64_t a1)
{
  uint64_t v1;
  NSObject *rep;

  v1 = *(_QWORD *)(a1 + 32);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  sub_1002531E4(*(_QWORD *)(v1 + 144), rep);
}

NSBundle *sub_101184FF8()
{
  NSBundle *v0;
  NSBundle *v1;
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  id v9;
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  v0 = +[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/CoreIndoor.framework"));
  v1 = v0;
  if (v0)
  {
    v9 = 0;
    if (!-[NSBundle loadAndReturnError:](v0, "loadAndReturnError:", &v9))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v2 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        v3 = objc_msgSend(v9, "description");
        *(_DWORD *)buf = 138543362;
        v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "indoor bundle appears to be corrupted: %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v5 = qword_1022A0048;
        v6 = objc_msgSend(v9, "description");
        v10 = 138543362;
        v11 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 17, "indoor bundle appears to be corrupted: %{public}@", &v10, 12);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "NSBundle *loadBundle()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      return 0;
    }
  }
  return v1;
}

void sub_1011851E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  std::string *p_p;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  std::string __p;
  std::string v12;
  double v13;
  __int16 v14;
  int v15;
  uint8_t buf[8];
  __int16 v17;
  int v18;

  sub_100250BC0(*(_QWORD *)(a1 + 144), &v12);
  sub_100250DF0(&__p);
  v2 = sub_100250EFC();
  v3 = a1 + 400;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v12;
  else
    v4 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(double *)buf = (double)v2;
  sub_100604D40(a1 + 400, (const std::string::value_type *)v4, (const std::string::value_type *)p_p, (double *)buf);
  v6 = 3600 * sub_100250F04();
  v7 = 3600 * sub_100250F0C();
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v6;
    v17 = 1026;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "IndoorAvl, rates, %{public}d, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    LODWORD(v13) = 67240448;
    HIDWORD(v13) = v6;
    v14 = 1026;
    v15 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "IndoorAvl, rates, %{public}d, %{public}d", &v13, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::avlFileUpdaterUpdateSettings()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(double *)buf = (double)v6;
  v13 = (double)v7;
  sub_10060538C(v3, (double *)buf, &v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_101185470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1011854C4(uint64_t a1)
{
  std::chrono::steady_clock::time_point v2;
  id v3;
  NSNumber *v4;
  NSSet *v5;
  NSObject *v6;
  const char *v7;
  NSNumber *v8;
  NSNumber *v9;
  NSNumber *v10;
  NSNumber *v11;
  NSNumber *v12;
  NSNumber *v13;
  NSNumber *v14;
  NSNumber *v15;
  NSNumber *v16;
  NSNumber *v17;
  NSSet *v18;
  NSObject *v19;
  const char *v20;
  CFTypeID v21;
  NSObject *v22;
  id v23;
  CFTypeID v24;
  NSNumber *v25;
  id v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  CFTypeID v40;
  const char *v41;
  char *v42;
  _QWORD v43[5];
  CFTypeRef cf;
  CFTypeRef v45;
  CFTypeRef v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  double v50;
  double v51;
  CFTypeRef v52;
  BOOL v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  const char *v57;
  __int16 v58;
  CFTypeID v59;
  _BYTE buf[12];
  __int16 v61;
  CFTypeID v62;

  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_1001E4804(&v54);
  v3 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 10);
  v53 = 0;
  if (sub_1001E48E4(v54, (uint64_t)off_1022A0358[0], &v53))
  {
    v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v53);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, off_1022A0358[0]);
  }
  v52 = 0;
  if (sub_100527258(v54, off_1022A0360[0], &v52))
  {
    v5 = +[NSSet setWithArray:](NSSet, "setWithArray:", v52);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v7 = -[NSString UTF8String](-[NSArray componentsJoinedByString:](-[NSString componentsSeparatedByCharactersInSet:](-[NSSet description](v5, "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Disabled Venue Set = %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v30 = qword_1022A0048;
      v31 = -[NSString UTF8String](-[NSArray componentsJoinedByString:](-[NSString componentsSeparatedByCharactersInSet:](-[NSSet description](v5, "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
      v56 = 136315138;
      v57 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "Disabled Venue Set = %s", (const char *)&v56);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::reloadSettings()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, off_1022A0360[0]);
  }
  v51 = 0.0;
  if (sub_1001FD9FC(v54, (uint64_t)off_1022A0368[0], &v51))
  {
    v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v51);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, off_1022A0368[0]);
  }
  v50 = 0.0;
  if (sub_1001FD9FC(v54, (uint64_t)off_1022A0370[0], &v50))
  {
    v9 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v50);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, off_1022A0370[0]);
  }
  v49 = 0;
  if (sub_1001E48E4(v54, (uint64_t)off_1022A03C8[0], &v49))
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("21600"), off_1022A03B8[0]);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("8"), off_1022A03C0[0]);
  }
  v48 = 0;
  if (sub_1001C1194(v54, (uint64_t)off_1022A03B8[0], &v48))
  {
    v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v48);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, off_1022A03B8[0]);
  }
  v47 = 0;
  if (sub_1000B1180(v54, (uint64_t)off_1022A03C0[0], &v47))
  {
    v11 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v47);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, off_1022A03C0[0]);
  }
  *(_QWORD *)buf = 0;
  if ((sub_1001FD9FC(v54, (uint64_t)off_1022A0378[0], buf) & 1) != 0
    || sub_1001FD9FC(v54, (uint64_t)off_1022A03D8[0], buf))
  {
    v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)buf);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, off_1022A0378[0]);
  }
  *(_DWORD *)buf = 0;
  if ((sub_1000B1180(v54, (uint64_t)off_1022A0380[0], buf) & 1) != 0
    || sub_1000B1180(v54, (uint64_t)off_1022A03E0[0], buf))
  {
    v13 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)buf);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, off_1022A0380[0]);
  }
  *(_QWORD *)buf = 0;
  if ((sub_1001FD9FC(v54, (uint64_t)off_1022A0388[0], buf) & 1) != 0
    || sub_1001FD9FC(v54, (uint64_t)off_1022A03E8, buf))
  {
    v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)buf);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v14, off_1022A0388[0]);
  }
  *(_QWORD *)buf = 0;
  if ((sub_1001FD9FC(v54, (uint64_t)off_1022A0390[0], buf) & 1) != 0
    || sub_1001FD9FC(v54, (uint64_t)off_1022A03D8[0], buf))
  {
    v15 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)buf);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v15, off_1022A0390[0]);
  }
  *(_DWORD *)buf = 0;
  if ((sub_1000B1180(v54, (uint64_t)off_1022A0398[0], buf) & 1) != 0
    || sub_1000B1180(v54, (uint64_t)off_1022A03E0[0], buf))
  {
    v16 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)buf);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v16, off_1022A0398[0]);
  }
  *(_QWORD *)buf = 0;
  if ((sub_1001FD9FC(v54, (uint64_t)off_1022A03A0[0], buf) & 1) != 0
    || sub_1001FD9FC(v54, (uint64_t)off_1022A03E8, buf))
  {
    v17 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)buf);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v17, off_1022A03A0[0]);
  }
  v46 = 0;
  if (sub_1001C3D30(v54, off_1022A0350[0], &v46))
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v46, off_1022A0350[0]);
  v45 = 0;
  if (sub_100527258(v54, off_1022A03A8[0], &v45))
  {
    v18 = +[NSSet setWithArray:](NSSet, "setWithArray:", v45);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v20 = -[NSString UTF8String](-[NSArray componentsJoinedByString:](-[NSString componentsSeparatedByCharactersInSet:](-[NSSet description](v18, "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Forced venues set = %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v34 = qword_1022A0048;
      v35 = -[NSString UTF8String](-[NSArray componentsJoinedByString:](-[NSString componentsSeparatedByCharactersInSet:](-[NSSet description](v18, "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
      v56 = 136315138;
      v57 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "Forced venues set = %s", (const char *)&v56);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::reloadSettings()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v18, off_1022A03A8[0]);
  }
  cf = 0;
  if (sub_100219F40(v54, (uint64_t)off_1022A03B0[0], &cf))
  {
    v21 = CFGetTypeID(cf);
    if (v21 == CFDictionaryGetTypeID())
    {
      objc_msgSend(v3, "setObject:forKeyedSubscript:", cf, off_1022A03B0[0]);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        v23 = -[__CFString UTF8String](off_1022A03B0[0], "UTF8String");
        v24 = CFGetTypeID(cf);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v23;
        v61 = 2050;
        v62 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Invalid type for setting %{public}s - expecting dictionary but got %{public}lu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v38 = qword_1022A0048;
        v39 = (const char *)-[__CFString UTF8String](off_1022A03B0[0], "UTF8String");
        v40 = CFGetTypeID(cf);
        v56 = 136446466;
        v57 = v39;
        v58 = 2050;
        v59 = v40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 17, "Invalid type for setting %{public}s - expecting dictionary but got %{public}lu", &v56, 22);
        v42 = (char *)v41;
        sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::reloadSettings()", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
    }
  }
  buf[0] = 0;
  if (sub_1001E48E4(v54, (uint64_t)off_1022A03D0[0], buf))
  {
    v25 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", buf[0]);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v25, off_1022A03D0[0]);
  }
  sub_100250598(*(_QWORD *)(a1 + 144), v2.__d_.__rep_, v3);
  if ((objc_opt_respondsToSelector(objc_msgSend(*(id *)(a1 + 152), "daemonControl"), "retrieveLocationRelevancyDurationWithCompletionHandler:") & 1) != 0)
  {
    v26 = objc_msgSend(*(id *)(a1 + 152), "daemonControl");
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10118A5DC;
    v43[3] = &unk_1021A27A0;
    v43[4] = a1;
    objc_msgSend(v26, "retrieveLocationRelevancyDurationWithCompletionHandler:", v43);
  }
  v27 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_101186028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011860B4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLPipelineLocationProvider::onDarwinNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_101189700(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_101186264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101186284(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101188A1C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10118643C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10118645C(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10118A524(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101186624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101186644(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onGpsControllerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onGpsControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onGpsControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101189744(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1011867FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10118681C(uint64_t a1, int *a2, CLMotionActivity *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onMotionState");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onMotionState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onMotionState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10118A0B8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1011869D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011869F4(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onVehicleConnectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onVehicleConnectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onVehicleConnectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10118A2BC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101186BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101186BCC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onWifiProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onWifiProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onWifiProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101189EC4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101186D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101186DA4(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v4;
  xpc_activity_state_t state;
  NSObject *v6;
  id v7;
  NSObject *v8;
  xpc_activity_state_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  xpc_activity_state_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];
  _BYTE buf[24];
  void *v23;
  xpc_activity_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_100250F14(*(_QWORD *)(v4 + 144));
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = state;
    *(_WORD *)&buf[8] = 2050;
    *(double *)&buf[10] = (double)(uint64_t)v7 / 3600.0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IndoorPreFetch, callback, %{public}d, interval, %{public}.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v11 = qword_1022A0048;
    v12 = sub_100250F14(*(_QWORD *)(v4 + 144));
    v20 = 67240448;
    LODWORD(v21[0]) = state;
    WORD2(v21[0]) = 2050;
    *(double *)((char *)v21 + 6) = (double)(uint64_t)v12 / 3600.0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "IndoorPreFetch, callback, %{public}d, interval, %{public}.1f", &v20, 18);
    v14 = (char *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLPipelineLocationProvider::start()::(anonymous class)::operator()(xpc_activity_t) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (state == 2)
  {
    if (!xpc_activity_set_state(activity, 4))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v8 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        v9 = xpc_activity_get_state(activity);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "failed to mark tile cleanup activity as continue.  current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v15 = qword_1022A0048;
        v16 = xpc_activity_get_state(activity);
        v20 = 134349056;
        v21[0] = v16;
        LODWORD(v19) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "failed to mark tile cleanup activity as continue.  current state is %{public}ld", &v20, v19);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 0, "auto CLPipelineLocationProvider::start()::(anonymous class)::operator()(xpc_activity_t) const", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
    v10 = *(void **)(a1 + 40);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_10118E0AC;
    v23 = &unk_102131360;
    v24 = activity;
    v25 = v4;
    objc_msgSend(v10, "async:", buf);
  }
}

__n128 sub_101187164(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t sub_101187174(uint64_t a1)
{
  return sub_10118717C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10118717C(uint64_t a1)
{
  uint64_t result;
  CFAbsoluteTime Current;

  objc_msgSend(*(id *)(a1 + 40), "assertInside");
  sub_1011854C4(a1);
  sub_100605848(a1 + 400);
  sub_101188D28(a1);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "daemonControl"), "shutdown");
  result = sub_10019CFA0();
  if ((_DWORD)result == 1)
  {
    Current = CFAbsoluteTimeGetCurrent();
    return sub_100605798((double *)(a1 + 400), &Current);
  }
  return result;
}

void sub_1011871F0(uint64_t a1)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v2 = *(_DWORD *)(a1 + 712);
  if (v2)
  {
    notify_cancel(v2);
    *(_DWORD *)(a1 + 712) = 0;
  }
  xpc_activity_unregister("com.apple.locationd.IndoorTilePrefetch");

  *(_QWORD *)(a1 + 160) = 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Deregistering for visual localizations", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Deregistering for visual localizations", v15, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::shutdown()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  objc_msgSend(*(id *)(a1 + 384), "deregisterForVisionNotifications:", *(_QWORD *)(a1 + 136));

  *(_QWORD *)(a1 + 384) = 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Deregistering for outdoor update", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v15[0] = 0;
    LODWORD(v14) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Deregistering for outdoor update", v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::shutdown()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(*(id *)(a1 + 392), "unregisterForUpdates:", *(_QWORD *)(a1 + 136));

  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  sub_100026094(*(_QWORD *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100029448(a1);
  objc_msgSend(*(id *)(a1 + 152), "invalidate");

  *(_QWORD *)(a1 + 152) = 0;
  objc_msgSend(*(id *)(a1 + 720), "stopMonitoring");

  *(_QWORD *)(a1 + 720) = 0;
}

void sub_1011875BC(uint64_t a1)
{
  sub_1011851E0(a1 - 120);
}

void sub_1011875C4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  char *v7;
  std::string *v8;
  NSObject *v9;
  void **v10;
  void **v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  std::chrono::steady_clock::time_point v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  void *__p[2];
  uint64_t v30;
  void *__dst[2];
  uint64_t v32;
  std::string v33;
  void *v34[2];
  uint64_t v35;
  void *v36[2];
  uint64_t v37;
  _BYTE v38[14];
  __int16 v39;
  int v40;
  _BYTE buf[14];
  __int16 v42;
  int v43;

  if (a2)
  {
    sub_100605C9C(a2, (uint64_t)v36);
    sub_100605D40(a2, (uint64_t)v34);
    sub_100250CE4(&v33);
    if (a3 == 2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Indoor availability received file update status %d, will attempt to decompress", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        *(_QWORD *)v38 = 0x204000100;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Indoor availability received file update status %d, will attempt to decompress", v38);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      if (v35 >= 0)
        v7 = (char *)v34;
      else
        v7 = (char *)v34[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v33;
      else
        v8 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if (!sub_100513F8C(v7, (const char *)v8))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v9 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
        {
          v10 = v34;
          if (v35 < 0)
            v10 = (void **)v34[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to decompress availability tile %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v11 = v34;
          if (v35 < 0)
            v11 = (void **)v34[0];
          *(_DWORD *)v38 = 136446210;
          *(_QWORD *)&v38[4] = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Failed to decompress availability tile %{public}s", v38, 12);
          v13 = (char *)v12;
          sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
LABEL_59:
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35) < 0)
          operator delete(v34[0]);
        if (SHIBYTE(v37) < 0)
          operator delete(v36[0]);
        return;
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Indoor availability received file update status %d, which is not complete", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        *(_DWORD *)v38 = 67109120;
        *(_DWORD *)&v38[4] = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Indoor availability received file update status %d, which is not complete", v38);
        v26 = (char *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      if (a3 == 3)
      {
        v18 = 3600 * sub_100250F04();
        v19 = 3600 * sub_100250F0C();
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v20 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240704;
          *(_DWORD *)&buf[4] = 3;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v18;
          v42 = 1026;
          v43 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "IndoorAvl, update rates upon status %{public}d, %{public}d, %{public}d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          *(_QWORD *)v38 = 0x304020300;
          *(_WORD *)&v38[8] = 1026;
          *(_DWORD *)&v38[10] = v18;
          v39 = 1026;
          v40 = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "IndoorAvl, update rates upon status %{public}d, %{public}d, %{public}d", v38, 20);
          v28 = (char *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        *(double *)buf = (double)v18;
        *(double *)v38 = (double)v19;
        sub_10060538C(a1 + 400, (double *)buf, (double *)v38);
      }
    }
    v21 = *(_QWORD *)(a1 + 144);
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (SHIBYTE(v37) < 0)
    {
      sub_100115CE4(__dst, v36[0], (unint64_t)v36[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v36;
      v32 = v37;
    }
    if (SHIBYTE(v35) < 0)
    {
      sub_100115CE4(__p, v34[0], (unint64_t)v34[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v34;
      v30 = v35;
    }
    sub_100251BE8(v21, v22.__d_.__rep_, (uint64_t *)__dst, (uint64_t *)__p, a3);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(__dst[0]);
    goto LABEL_59;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Got availability file updated notification, but no file update object???", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    LOWORD(v36[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Got availability file updated notification, but no file update object???", v36, 2);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_101187E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101187EEC(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_1001B7864(a1, &v2, 1);
}

BOOL sub_101187F14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 672) != 0;
}

BOOL sub_101187F24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 696) != 0;
}

BOOL sub_101187F34(uint64_t a1)
{
  return *(_QWORD *)(a1 + 576) != 0;
}

uint64_t sub_101187F44(uint64_t a1, int a2, int *a3)
{
  _BOOL4 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  std::chrono::steady_clock::time_point v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;

  HIDWORD(v36) = a2;
  v6 = sub_1000B0BF8((char *)a1, a2, a3);
  result = 1;
  if (v6 && !*a3)
  {
    v8 = *(_QWORD *)(a1 + 672);
    v9 = *(_QWORD *)(a1 + 696);
    v10 = *(_QWORD *)(a1 + 664);
    if (v10)
    {
      v11 = a1 + 656;
      v12 = a1 + 664;
      do
      {
        v13 = *(_DWORD *)(v10 + 28);
        v14 = v13 < a2;
        if (v13 >= a2)
          v15 = (uint64_t *)v10;
        else
          v15 = (uint64_t *)(v10 + 8);
        if (!v14)
          v12 = v10;
        v10 = *v15;
      }
      while (*v15);
      if (v12 != a1 + 664 && *(_DWORD *)(v12 + 28) <= a2)
        goto LABEL_32;
    }
    v16 = *(_QWORD *)(a1 + 688);
    if (!v16)
      goto LABEL_23;
    v11 = a1 + 680;
    v17 = a1 + 688;
    do
    {
      v18 = *(_DWORD *)(v16 + 28);
      v19 = v18 < a2;
      if (v18 >= a2)
        v20 = (uint64_t *)v16;
      else
        v20 = (uint64_t *)(v16 + 8);
      if (!v19)
        v17 = v16;
      v16 = *v20;
    }
    while (*v20);
    if (v17 != a1 + 688 && *(_DWORD *)(v17 + 28) <= a2)
    {
LABEL_32:
      sub_10009E904(v11, (int *)&v36 + 1);
    }
    else
    {
LABEL_23:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v21 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Warning Trying to remove non-existent pipeline client", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        LOWORD(v37) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Trying to remove non-existent pipeline client", &v37, v36);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPipelineLocationProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD *)(a1 + 672);
      v26 = *(_QWORD *)(a1 + 696);
      v27 = *a3;
      *(_DWORD *)buf = 134349824;
      v46 = v25;
      v47 = 2050;
      v48 = v26;
      v49 = 1026;
      v50 = HIDWORD(v36);
      v51 = 1026;
      v52 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "regionalClients,%{public}lu, indoorClients,%{public}lu, client,%{public}d, notification,%{public}d", buf, 0x22u);
    }
    v28 = -v9;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v31 = *(_QWORD *)(a1 + 672);
      v32 = *(_QWORD *)(a1 + 696);
      v33 = *a3;
      v37 = 134349824;
      v38 = v31;
      v39 = 2050;
      v40 = v32;
      v41 = 1026;
      v42 = HIDWORD(v36);
      v43 = 1026;
      v44 = v33;
      LODWORD(v36) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "regionalClients,%{public}lu, indoorClients,%{public}lu, client,%{public}d, notification,%{public}d", &v37, v36);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPipelineLocationProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v30 = *(_QWORD *)(a1 + 144);
    if (v8 == v28 || *(_QWORD *)(a1 + 672) != -*(_QWORD *)(a1 + 696))
    {
      sub_10025321C(v30, v29.__d_.__rep_);
      return 1;
    }
    else
    {
      return sub_100250134(v30);
    }
  }
  return result;
}

uint64_t sub_101188380(uint64_t a1, _DWORD *a2)
{
  std::chrono::steady_clock::time_point v3;

  if (*a2 == 28)
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_100253668(*(_QWORD *)(a1 + 144), v3.__d_.__rep_);
  }
  return 1;
}

uint64_t sub_1011883BC(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[8];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopping indoor & deleting global availability tile due to reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Stopping indoor & deleting global availability tile due to reset", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onResetLocationData()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_101188D28(a1);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "daemonControl"), "eraseEverything");
  result = sub_10019CFA0();
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
    return sub_100605798((double *)(a1 + 400), (double *)buf);
  }
  return result;
}

void sub_101188584(uint64_t a1)
{
  std::string *v2;
  _BOOL4 v3;
  NSObject *v4;
  std::string *v5;
  uint64_t v6;
  std::string *p_buf;
  std::string *v8;
  std::string *v9;
  std::string buf;
  int v11;
  std::string *v12;
  __int16 v13;
  _BOOL4 v14;
  std::string __p[68];

  if (sub_10019CFA0() == 1)
  {
    sub_100250DF0(__p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v2 = __p;
    else
      v2 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v3 = sub_1000B78B0((const char *)v2);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_100250DF0(__p);
      v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "File %{private}s exists, %{public}d", (uint8_t *)&buf, 0x12u);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v6 = qword_1022A0048;
      sub_100250DF0(&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v11 = 136380931;
      v12 = p_buf;
      v13 = 1026;
      v14 = v3;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v6, 2, "File %{private}s exists, %{public}d", &v11, 18);
      v9 = v8;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::downloadAvailabilityTileIfAllowedAndNotExists()", "%s\n", (const char *)v9);
      if (v9 != __p)
        free(v9);
    }
    if (!v3)
    {
      __p[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
      sub_100605798((double *)(a1 + 400), (double *)__p);
    }
  }
}

void sub_10118881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101188840(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[8];

  if (a2 == 1)
  {
    *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
    return (id)sub_100605798((double *)(a1 + 400), (double *)buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Stopping indoor & deleting global availability tile due to location disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Stopping indoor & deleting global availability tile due to location disabled", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onLocationStatusChanged(CLCommonLocationServicesEnabled)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_100605848(a1 + 400);
    sub_101188D28(a1);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "daemonControl"), "eraseEverything");
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "daemonControl"), "shutdown");
  }
}

void sub_101188A1C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  id v5;
  uint64_t *v6;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (*a3 == 4)
  {
    sub_101188840(a1, *(_DWORD *)(a4 + 188));
  }
  else if (*a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67240192;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unhandled manager notification %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v10 = *a3;
      v13[0] = 67240192;
      v13[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "Unhandled manager notification %{public}d", v13, 8);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    sub_1011883BC(a1);
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_10230D1F7 >= 0)
      v6 = &qword_10230D1E0;
    else
      v6 = (uint64_t *)qword_10230D1E0;
    objc_msgSend(v5, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  }
}

void sub_101188C94(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  std::chrono::steady_clock::time_point v7;
  BOOL v8;
  uint64_t v9;

  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if ((*a3 - 6) >= 2)
  {
    if (*a3 == 1)
      sub_100252594(*(_QWORD *)(a1 + 144), v7.__d_.__rep_, *a4);
  }
  else
  {
    if (a4[96])
      v8 = *((_DWORD *)a4 + 12) <= 0;
    else
      v8 = 1;
    v9 = !v8;
    sub_1002527BC(*(_QWORD *)(a1 + 144), v7.__d_.__rep_, v9);
  }
}

void sub_101188D20(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  sub_101188C94(a1 - 128, a2, a3, a4);
}

void sub_101188D28(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  std::string *v4;
  _WORD v5[8];
  std::string buf[68];

  sub_100026094(*(_QWORD *)(a1 + 144));
  sub_100250F60(*(_QWORD *)(a1 + 144));
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@IndoorAvl, delete, na", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@IndoorAvl, delete, na", v5, 2);
    v4 = (std::string *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::stopProviderAndEraseAvailabilityTile()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100250DF0(buf);
  sub_101188F38((const char *)buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  sub_100250CE4(buf);
  sub_101188F38((const char *)buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
}

void sub_101188F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101188F38(const char *a1)
{
  uint64_t *v1;
  int v2;
  NSObject *v4;
  uint64_t *v5;
  const char *v6;
  NSObject *v7;
  uint64_t *v8;
  uint8_t *v9;
  int v10;
  uint8_t buf[4];
  uint64_t *v12;
  __int16 v13;
  int v14;

  v1 = (uint64_t *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!sub_100512FA8(a1))
  {
    v2 = *__error();
    if (v2 != 20 && v2 != 2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v1 + 23) >= 0)
          v8 = v1;
        else
          v8 = (uint64_t *)*v1;
        *(_DWORD *)buf = 136315394;
        v12 = v8;
        v13 = 1024;
        v14 = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Error deleting %s: %d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning Error deleting %s: %d", &v10, 18);
LABEL_32:
      v9 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "auto CLPipelineLocationProvider::stopProviderAndEraseAvailabilityTile()::(anonymous class)::operator()(const string &) const", "%s\n", v6);
      if (v9 != buf)
        free(v9);
      return;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v1 + 23) >= 0)
        v5 = v1;
      else
        v5 = (uint64_t *)*v1;
      *(_DWORD *)buf = 136315394;
      v12 = v5;
      v13 = 1024;
      v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Error deleting %s: %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Error deleting %s: %d", &v10, 18);
      goto LABEL_32;
    }
  }
}

id sub_10118927C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 176) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8), 3, 0);
}

id sub_101189290(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 176) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8), 3);
}

id sub_1011892A0(uint64_t a1, double a2)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  sub_10112D2FC((uint64_t *)__p, (uint64_t *)(a1 + 192));
  sub_10023EC78((uint64_t *)(a1 + 648), (uint64_t *)__p);
  sub_10023ECF4((uint64_t)__p);
  v4 = *(_QWORD *)(a1 + 144);
  sub_1015A2E04(__p, "start debounce");
  sub_1001CE674(v4, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "debounceTimer"), "setNextFireDelay:", a2);
}

void sub_101189330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10118934C(uint64_t a1, double a2)
{
  return sub_1011892A0(a1 - 120, a2);
}

id sub_101189354(uint64_t a1)
{
  uint64_t v3;

  v3 = 0;
  sub_10023EC78((uint64_t *)(a1 + 648), &v3);
  sub_10023ECF4((uint64_t)&v3);
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "debounceTimer"), "setNextFireDelay:", 1.79769313e308);
}

id sub_1011893A4(uint64_t a1)
{
  return sub_101189354(a1 - 120);
}

id sub_1011893AC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Schedule route hint timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Schedule route hint timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::startVehicleNavigationWatchdogTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "routeHintWatchdogTimer"), "setNextFireDelay:", 6.0);
}

id sub_10118954C(uint64_t a1)
{
  return sub_1011893AC(a1 - 120);
}

id sub_101189554(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Cancel route hint timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Cancel route hint timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::stopVehicleNavigationWatchdogTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "routeHintWatchdogTimer"), "setNextFireDelay:", 1.79769313e308);
}

id sub_1011896F8(uint64_t a1)
{
  return sub_101189554(a1 - 120);
}

void sub_101189700(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void *v4;

  if (!*a3)
  {
    v4 = objc_autoreleasePoolPush();
    sub_1011854C4(a1);
    objc_autoreleasePoolPop(v4);
  }
}

void sub_101189744(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    v7 = *a3;
    if ((*a3 - 3) < 3 || v7 == 0)
    {
      sub_101189CB4(a1, a4, a4 + 160);
    }
    else if (v7 == 18)
    {
      sub_101189998(a1, *(_DWORD *)(a4 + 840));
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v9 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v10 = *a3;
        *(_DWORD *)buf = 67240192;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unexpected notification %{public}d from gps", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v11 = *a3;
        v14[0] = 67240192;
        v14[1] = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "Unexpected notification %{public}d from gps", v14, 8);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onGpsControllerNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
  }
}

void sub_101189998(uint64_t a1, unsigned int a2)
{
  objc_class *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  id v9;
  _DWORD v10[4];
  uint8_t buf[4];
  unsigned int v12;

  if (!objc_msgSend(*(id *)(a1 + 152), "indoord"))
    return;
  v4 = NSClassFromString(CFSTR("CLGpsSignalQuality"));
  if (!v4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to load gps signal quality class from framework - cannot deliver gps signal quality", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    LOWORD(v10[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Failed to load gps signal quality class from framework - cannot deliver gps signal quality", v10, 2);
LABEL_22:
    v8 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onGpsAssistanceSignalQualityUpdate(CLLocationProvider_Type::SignalQuality) const", "%s\n", v6);
    if (v8 != buf)
      free(v8);
    return;
  }
  if (a2 < 3)
  {
    v9 = objc_msgSend([v4 alloc], "initWithSignalQuality:", dword_101C43774[a2]);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "gpsSignalQualityAvailable:", v9);

    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unexpected signal quality %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v10[0] = 67240192;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "Unexpected signal quality %{public}d", v10, 8);
    goto LABEL_22;
  }
}

void sub_101189CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[1640];

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    v6 = objc_msgSend(objc_alloc((Class)CLGpsPosition), "initWithLocation:andPrivateLocation:", a2, buf, sub_10014DF90(a3, buf));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Sending gpsEstimateAvailable, type, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v9 = *(_DWORD *)(a2 + 96);
      v12[0] = 67240192;
      v12[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Sending gpsEstimateAvailable, type, %{public}d", v12, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onGpsAssistanceLocationUpdate(const CLDaemonLocation &, const CLDaemonLocationPrivate &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "gpsEstimateAvailable:", v6);

  }
}

void sub_101189EC4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*a3 == 4)
  {
    sub_101189CB4(a1, a4, a4 + 160);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67240192;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning, Unexpected notification %{public}d from wifi", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v7 = *a3;
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning, Unexpected notification %{public}d from wifi", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onWifiProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10118A0B8(uint64_t a1, uint64_t a2, int *a3, CLMotionActivity *a4)
{
  NSObject *rep;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (*a3 == 2)
  {
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    sub_100251108(*(_QWORD *)(a1 + 144), rep, a4);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67109120;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "unexpected motion state notification type %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v10 = *a3;
      v13[0] = 67109120;
      v13[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "unexpected motion state notification type %d", v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onMotionState(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_10118A2BC(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  double v10;
  uint64_t v11;
  std::chrono::steady_clock::time_point v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  _BYTE v19[10];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;

  v7 = a4[1] < 0.0 && *a4 > 0.0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    v10 = *a4;
    v11 = *((_QWORD *)a4 + 1);
    *(_DWORD *)buf = 67109888;
    v25 = v9;
    v26 = 2048;
    v27 = v10;
    v28 = 2048;
    v29 = v11;
    v30 = 1024;
    v31 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Received VehicleConnection notification,%d,startTime, %f, endTime, %f, status, %d\n", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v13 = *a4;
    v14 = *((_QWORD *)a4 + 1);
    v18 = COERCE_DOUBLE(__PAIR64__(*a3, 67109888));
    *(_WORD *)v19 = 2048;
    *(double *)&v19[2] = v13;
    v20 = 2048;
    v21 = v14;
    v22 = 1024;
    v23 = v7;
    LODWORD(v17) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Received VehicleConnection notification,%d,startTime, %f, endTime, %f, status, %d\n", &v18, v17, v18, *(_DWORD *)v19);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onVehicleConnectionNotification(int, const CLVehicleConnectionNotifier_Type::Notification &, const CLVehicleConnectionNotifier_Type::NotificationData &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_100252C54(*(_QWORD *)(a1 + 144), v12.__d_.__rep_, v7);
}

void sub_10118A4E4(uint64_t a1, _DWORD *a2)
{
  NSObject *rep;

  if (*a2 == 1)
  {
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    sub_100253184(*(_QWORD *)(a1 + 144), rep);
  }
}

void sub_10118A524(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  std::chrono::steady_clock::time_point v7;
  int v8;
  BOOL v9;

  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = *a3;
  if (*a3 == 6)
  {
    if (*a4)
      v9 = 1;
    else
      v9 = a4[1] == 0;
    if (!v9)
      sub_101188584(a1);
  }
  else if (v8 == 3)
  {
    sub_1002517D0(*(_QWORD *)(a1 + 144), v7.__d_.__rep_);
  }
  else if (v8 == 2)
  {
    sub_100251638(*(_QWORD *)(a1 + 144));
  }
}

void sub_10118A5D4(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  sub_10011BAC4((char *)(a1 - 120), a2, a3, a4, a5, a6);
}

id sub_10118A5DC(uint64_t a1, double a2)
{
  return sub_100250BB4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), (uint64_t)a2);
}

void sub_10118A5EC(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  std::chrono::system_clock::time_point v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  xpc_activity_state_t state;
  const char *v17;
  char *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  xpc_activity_state_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  _QWORD block[12];
  _QWORD v27[9];
  int v28;
  _QWORD v29[7];
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[6];
  _QWORD v35[3];
  _DWORD v36[2];
  __int16 v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  __n128 (*v41)(__n128 *, __n128 *);
  void (*v42)(uint64_t);
  void *v43;
  _QWORD v44[4];
  _BYTE buf[1638];

  if ((sub_10024F904(*(_QWORD *)(a1 + 144)) & 1) != 0)
  {
    v4 = dispatch_group_create();
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = &v39;
    v40 = 0x4812000000;
    v41 = sub_1002072C4;
    v42 = sub_100207DDC;
    v43 = &unk_102080316;
    memset(v44, 0, 24);
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x4812000000;
    v34[3] = sub_1002072C4;
    v34[4] = sub_100207DDC;
    v34[5] = &unk_102080316;
    memset(v35, 0, sizeof(v35));
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x2020000000;
    v33 = 0;
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    v31 = 0;
    v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v6 = sub_100250F14(*(_QWORD *)(a1 + 144));
    v7 = sub_100250F1C(*(_QWORD *)(a1 + 144));
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = (_DWORD)v6;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "IndoorPreFetch, params, %{public}d, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v36[0] = 67240448;
      v36[1] = (_DWORD)v6;
      v37 = 1026;
      v38 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "IndoorPreFetch, params, %{public}d, %{public}d", v36, 14);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    dispatch_group_enter(v4);
    v10 = *(void **)(a1 + 160);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10118AD30;
    v29[3] = &unk_1021A4698;
    v29[6] = &v39;
    v29[4] = v4;
    v29[5] = v32;
    objc_msgSend(v10, "fetchRecentLocationsOfInterestWithReply:", v29);
    dispatch_group_enter(v4);
    v11 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:duration:", +[NSDate date](NSDate, "date"), (double)((uint64_t)v6 * v8));
    v12 = *(void **)(a1 + 160);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10118B8A8;
    v27[3] = &unk_1021A46C0;
    v28 = v8;
    v27[6] = v34;
    v27[7] = v5.__d_.__rep_;
    v27[8] = v6;
    v27[4] = v4;
    v27[5] = v30;
    objc_msgSend(v12, "fetchPredictedLocationsOfInterestBetweenStartDate:endDate:withReply:", objc_msgSend(v11, "startDate"), objc_msgSend(v11, "endDate"), v27);

    v13 = objc_msgSend(*(id *)(a1 + 40), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10118C83C;
    block[3] = &unk_1021A46E8;
    block[6] = v32;
    block[7] = v30;
    block[8] = &v39;
    block[9] = v34;
    block[10] = a1;
    block[11] = v5.__d_.__rep_;
    block[4] = v4;
    block[5] = a2;
    dispatch_group_notify(v4, v13, block);
    _Block_object_dispose(v30, 8);
    _Block_object_dispose(v32, 8);
    _Block_object_dispose(v34, 8);
    *(_QWORD *)buf = v35;
    sub_10118EB08((void ***)buf);
    _Block_object_dispose(&v39, 8);
    *(_QWORD *)buf = v44;
    sub_10118EB08((void ***)buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Prefetching is disabled if pipelined is disabled. Set EnablePipelined to be true if you wish to prefetch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning Prefetching is disabled if pipelined is disabled. Set EnablePipelined to be true if you wish to prefetch", &v39, 2);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    if (a2 && !xpc_activity_set_state(a2, 5))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        state = xpc_activity_get_state(a2);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = state;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Failed to mark prefetch activity as done. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v21 = qword_1022A0048;
        v22 = xpc_activity_get_state(a2);
        LODWORD(v39) = 134349056;
        *(_QWORD *)((char *)&v39 + 4) = v22;
        LODWORD(v25) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 17, "Failed to mark prefetch activity as done. Current state is %{public}ld", &v39, v25);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
  }
}

void sub_10118ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void **a71;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  a71 = a11;
  sub_10118EB08(&a71);
  _Block_object_dispose(&a61, 8);
  a71 = a12;
  sub_10118EB08(&a71);
  _Unwind_Resume(a1);
}

void sub_10118AD30(uint64_t a1, void *a2, void *a3)
{
  NSObject *v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  char *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  id v65;
  const char *v66;
  char *v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  __int128 v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  _BYTE v87[12];
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  _BYTE buf[22];
  __int16 v93;
  uint64_t v94;
  int v95;
  id v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  unsigned int v100;

  if (a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = objc_msgSend(a3, "description");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to get historical LOI from RoutineManager - %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v64 = qword_1022A0048;
      v65 = objc_msgSend(a3, "description");
      v95 = 138543362;
      v96 = v65;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 16, "Failed to get historical LOI from RoutineManager - %{public}@", &v95, 12);
      v67 = (char *)v66;
      sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
    v5 = a1;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
  }
  else if (a2)
  {
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v74, v86, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v75;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v75 != v8)
            objc_enumerationMutation(a2);
          v10 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)v9);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v11 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(objc_msgSend(v10, "location"), "latitude");
            v13 = v12;
            objc_msgSend(objc_msgSend(v10, "location"), "longitude");
            v15 = v14;
            v16 = objc_msgSend(objc_msgSend(v10, "visits"), "count");
            *(_DWORD *)buf = 134284033;
            *(_QWORD *)&buf[4] = v13;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v15;
            v93 = 1026;
            LODWORD(v94) = v16;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@IndoorPreFetch, historical, %{private}.7f, %{private}.7f, visits, %{public}d", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A47C0);
            v17 = qword_1022A0048;
            objc_msgSend(objc_msgSend(v10, "location"), "latitude");
            v19 = v18;
            objc_msgSend(objc_msgSend(v10, "location"), "longitude");
            v21 = v20;
            v22 = objc_msgSend(objc_msgSend(v10, "visits"), "count");
            v95 = 134284033;
            v96 = v19;
            v97 = 2049;
            v98 = v21;
            v99 = 1026;
            v100 = v22;
            LODWORD(v70) = 28;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 1, "@IndoorPreFetch, historical, %{private}.7f, %{private}.7f, visits, %{public}d", &v95, v70);
            v24 = (char *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v25 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v74, v86, 16);
        v7 = v25;
      }
      while (v25);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "count");
    v73 = 0;
    v72 = 0uLL;
    sub_10118CD44((uint64_t *)&v72, (unint64_t)objc_msgSend(a2, "count"));
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v26 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v82, &v95, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v83;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v83 != v27)
            objc_enumerationMutation(a2);
          v29 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * (_QWORD)v28);
          if (objc_msgSend(objc_msgSend(v29, "visits"), "count"))
          {
            sub_10118E0B8(objc_msgSend(v29, "visits"), (uint64_t)buf);
            if (!buf[0])
              __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
            v81 = *(_QWORD *)&buf[8];
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A47C0);
            v30 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend(objc_msgSend(v29, "location"), "latitude");
              v32 = v31;
              objc_msgSend(objc_msgSend(v29, "location"), "longitude");
              *(_DWORD *)buf = 134284033;
              *(_QWORD *)&buf[4] = v32;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v33;
              v93 = 2050;
              v94 = v81;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "VisitTime, histloi, %{private}.7f, %{private}.7f, recent, %{public}ld", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A47C0);
              v55 = qword_1022A0048;
              objc_msgSend(objc_msgSend(v29, "location"), "latitude");
              v57 = v56;
              objc_msgSend(objc_msgSend(v29, "location"), "longitude");
              *(_DWORD *)v87 = 134284033;
              *(_QWORD *)&v87[4] = v57;
              v88 = 2049;
              v89 = v58;
              v90 = 2050;
              v91 = v81;
              LODWORD(v70) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 2, "VisitTime, histloi, %{private}.7f, %{private}.7f, recent, %{public}ld", v87, v70);
              v60 = (char *)v59;
              sub_100512490("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertHistoricalLOI(NSArray *)", "%s\n", v59);
              if (v60 != buf)
                free(v60);
            }
            objc_msgSend(objc_msgSend(v29, "location"), "latitude");
            *(_QWORD *)buf = v34;
            objc_msgSend(objc_msgSend(v29, "location"), "longitude");
            *(_QWORD *)v87 = v35;
            objc_msgSend(objc_msgSend(v29, "location"), "horizontalUncertainty");
            v80 = v36;
            objc_msgSend(v29, "confidence");
            v79 = v37;
            v38 = objc_msgSend(objc_msgSend(v29, "visits"), "count");
            v78 = v38;
            v39 = *((_QWORD *)&v72 + 1);
            if (*((_QWORD *)&v72 + 1) >= v73)
            {
              v44 = sub_10118E41C((uint64_t *)&v72, buf, (uint64_t *)v87, &v80, &v79, &v81, (uint64_t *)&v78);
            }
            else
            {
              v40 = *(_QWORD *)v87;
              v42 = v79;
              v41 = v80;
              v43 = v81;
              **((_QWORD **)&v72 + 1) = *(_QWORD *)buf;
              *(_QWORD *)(v39 + 8) = v40;
              *(_QWORD *)(v39 + 16) = v41;
              *(_QWORD *)(v39 + 24) = v42;
              *(_QWORD *)(v39 + 40) = v43;
              *(_BYTE *)(v39 + 32) = 1;
              *(_BYTE *)(v39 + 48) = 0;
              *(_DWORD *)(v39 + 64) = (_DWORD)v38;
              v44 = v39 + 72;
              *(_BYTE *)(v39 + 68) = 0;
            }
            *((_QWORD *)&v72 + 1) = v44;
          }
          else
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A47C0);
            v45 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend(objc_msgSend(v29, "location"), "latitude");
              v47 = v46;
              objc_msgSend(objc_msgSend(v29, "location"), "longitude");
              *(_DWORD *)buf = 134283777;
              *(_QWORD *)&buf[4] = v47;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v48;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, skiploi, %{private}.7f, %{private}.7f, historical, novisits", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A47C0);
              v49 = qword_1022A0048;
              objc_msgSend(objc_msgSend(v29, "location"), "latitude");
              v51 = v50;
              objc_msgSend(objc_msgSend(v29, "location"), "longitude");
              *(_DWORD *)v87 = 134283777;
              *(_QWORD *)&v87[4] = v51;
              v88 = 2049;
              v89 = v52;
              LODWORD(v70) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "@IndoorPreFetch, skiploi, %{private}.7f, %{private}.7f, historical, novisits", v87, v70);
              v54 = (char *)v53;
              sub_100512490("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertHistoricalLOI(NSArray *)", "%s\n", v53);
              if (v54 != buf)
                free(v54);
            }
          }
          v28 = (char *)v28 + 1;
        }
        while (v26 != v28);
        v61 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v82, &v95, 16);
        v26 = v61;
      }
      while (v61);
    }
    v5 = a1;
    v62 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    sub_10118EB4C((char **)(v62 + 48));
    *(_OWORD *)(v62 + 48) = v72;
    *(_QWORD *)(v62 + 64) = v73;
    v73 = 0;
    v72 = 0uLL;
    *(_QWORD *)buf = &v72;
    sub_10118EB08((void ***)buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v63 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#Warning No historical locations of interest", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      LOWORD(v95) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning No historical locations of interest", &v95, 2);
      v69 = (char *)v68;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v68);
      if (v69 != buf)
        free(v69);
    }
    v5 = a1;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(v5 + 32));
}

void sub_10118B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)&a17;
  sub_10118EB08(&a61);
  _Unwind_Resume(a1);
}

void sub_10118B8A8(uint64_t a1, void *a2, void *a3)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  char *v8;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  id v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void *v36;
  double v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  char *v90;
  id v91;
  uint64_t v92;
  NSObject *v93;
  const char *v94;
  uint64_t v95;
  __int128 v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[128];
  _BYTE v111[12];
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  _BYTE buf[12];
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  unsigned __int8 v121[8];
  uint64_t v122;
  unsigned __int8 v123[8];
  uint64_t v124;
  int v125;
  id v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;

  if (a3)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = objc_msgSend(a3, "description");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to get predicted LOI from RoutineManager - %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v5 = qword_1022A0048;
      v6 = objc_msgSend(a3, "description");
      v125 = 138543362;
      v126 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "Failed to get predicted LOI from RoutineManager - %{public}@", &v125, 12);
      v8 = (char *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v7);
LABEL_10:
      if (v8 != buf)
        free(v8);
      goto LABEL_95;
    }
    goto LABEL_95;
  }
  if (a2)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v99, v110, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v100;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v100 != v11)
            objc_enumerationMutation(a2);
          v13 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)v12);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v14 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
            v16 = v15;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude");
            v18 = v17;
            objc_msgSend(v13, "confidence");
            *(_DWORD *)buf = 134284033;
            *(_QWORD *)&buf[4] = v16;
            v117 = 2049;
            v118 = v18;
            v119 = 2050;
            v120 = v19;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@IndoorPreFetch, predicted, %{private}.7f, %{private}.7f, conf, %{public}.1f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A47C0);
            v20 = qword_1022A0048;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
            v22 = v21;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude");
            v24 = v23;
            objc_msgSend(v13, "confidence");
            v125 = 134284033;
            v126 = v22;
            v127 = 2049;
            v128 = v24;
            v129 = 2050;
            v130 = v25;
            LODWORD(v95) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "@IndoorPreFetch, predicted, %{private}.7f, %{private}.7f, conf, %{public}.1f", &v125, v95);
            v27 = (char *)v26;
            sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v26);
            if (v27 != buf)
              free(v27);
          }
          v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        v28 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v99, v110, 16);
        v10 = v28;
      }
      while (v28);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "count");
    v29 = *(_DWORD *)(a1 + 72);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(a1 + 64);
    v98 = 0;
    v97 = 0uLL;
    sub_10118CD44((uint64_t *)&v97, (unint64_t)objc_msgSend(a2, "count"));
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v32 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v106, &v125, 16);
    if (!v32)
    {
LABEL_89:
      v92 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      sub_10118EB4C((char **)(v92 + 48));
      *(_OWORD *)(v92 + 48) = v97;
      *(_QWORD *)(v92 + 64) = v98;
      v98 = 0;
      v97 = 0uLL;
      *(_QWORD *)buf = &v97;
      sub_10118EB08((void ***)buf);
      goto LABEL_95;
    }
    v33 = *(_QWORD *)v107;
    v34 = ((double)v29 * (double)v31 + (double)v31 * 0.5) * 1000000.0;
LABEL_32:
    v35 = 0;
    while (1)
    {
      if (*(_QWORD *)v107 != v33)
        objc_enumerationMutation(a2);
      v36 = *(void **)(*((_QWORD *)&v106 + 1) + 8 * v35);
      v123[0] = 0;
      if (objc_msgSend(v36, "nextEntryTime"))
      {
        objc_msgSend(objc_msgSend(v36, "nextEntryTime"), "timeIntervalSinceReferenceDate");
        if (!v123[0])
          v123[0] = 1;
        v124 = (uint64_t)(v37 * 1000000.0 + 9.783072e14);
      }
      sub_10118E0B8(objc_msgSend(objc_msgSend(v36, "locationOfInterest"), "visits"), (uint64_t)v121);
      v105 = 0;
      v105 = objc_msgSend(objc_msgSend(objc_msgSend(v36, "locationOfInterest"), "visits"), "count");
      v38 = objc_msgSend(v36, "locationOfInterest");
      if (v123[0] && v124 >= v30 && v34 >= (double)(v124 - v30))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v39 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(objc_msgSend(v38, "location"), "latitude");
          v41 = v40;
          objc_msgSend(objc_msgSend(v38, "location"), "longitude");
          if (!v123[0])
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          *(_DWORD *)buf = 134284033;
          *(_QWORD *)&buf[4] = v41;
          v117 = 2049;
          v118 = v42;
          v119 = 2050;
          v120 = v124;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "VisitTime, predloi, %{private}.7f, %{private}.7f, entry, %{public}lld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v85 = qword_1022A0048;
          objc_msgSend(objc_msgSend(v38, "location"), "latitude");
          v87 = v86;
          objc_msgSend(objc_msgSend(v38, "location"), "longitude");
          if (!v123[0])
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          *(_DWORD *)v111 = 134284033;
          *(_QWORD *)&v111[4] = v87;
          v112 = 2049;
          v113 = v88;
          v114 = 2050;
          v115 = v124;
          LODWORD(v95) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, 2, "VisitTime, predloi, %{private}.7f, %{private}.7f, entry, %{public}lld", v111, v95);
          v90 = (char *)v89;
          sub_100512490("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertPredictedLOI(uint32_t, std::chrono::system_clock::time_point, cl::chrono::secondsf, NSArray *)", "%s\n", v89);
          if (v90 != buf)
            free(v90);
        }
        objc_msgSend(objc_msgSend(v38, "location"), "latitude");
        *(_QWORD *)buf = v43;
        objc_msgSend(objc_msgSend(v38, "location"), "longitude");
        *(_QWORD *)v111 = v44;
        objc_msgSend(objc_msgSend(v38, "location"), "horizontalUncertainty");
        v104 = v45;
        objc_msgSend(v36, "confidence");
        v103 = v46;
        v47 = *((_QWORD *)&v97 + 1);
        if (*((_QWORD *)&v97 + 1) >= v98)
        {
          v55 = sub_10118E720((uint64_t *)&v97, buf, (uint64_t *)v111, &v104, &v103, v121, v123, (int *)&v105);
        }
        else
        {
          v48 = *(_QWORD *)v111;
          v49 = v104;
          v50 = v121[0];
          v51 = v122;
          v52 = v123[0];
          v53 = v124;
          v54 = v105;
          **((_QWORD **)&v97 + 1) = *(_QWORD *)buf;
          *(_QWORD *)(v47 + 8) = v48;
          *(_QWORD *)(v47 + 16) = v49;
          *(_QWORD *)(v47 + 24) = v46;
          *(_BYTE *)(v47 + 32) = 0;
          if (v50)
          {
            *(_QWORD *)(v47 + 40) = v51;
            *(_BYTE *)(v47 + 32) = 1;
          }
          *(_BYTE *)(v47 + 48) = 0;
          if (v52)
          {
            *(_QWORD *)(v47 + 56) = v53;
            *(_BYTE *)(v47 + 48) = 1;
          }
          *(_DWORD *)(v47 + 64) = v54;
          *(_BYTE *)(v47 + 68) = 1;
          v55 = v47 + 72;
        }
      }
      else
      {
        if (!v121[0])
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v69 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(objc_msgSend(v38, "location"), "latitude");
            v71 = v70;
            objc_msgSend(objc_msgSend(v38, "location"), "longitude");
            *(_DWORD *)buf = 134283777;
            *(_QWORD *)&buf[4] = v71;
            v117 = 2049;
            v118 = v72;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, skiploi, %{private}.7f, %{private}.7f, predicted, time", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A47C0);
            v73 = qword_1022A0048;
            objc_msgSend(objc_msgSend(v38, "location"), "latitude");
            v75 = v74;
            objc_msgSend(objc_msgSend(v38, "location"), "longitude");
            *(_DWORD *)v111 = 134283777;
            *(_QWORD *)&v111[4] = v75;
            v112 = 2049;
            v113 = v76;
            LODWORD(v95) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, 0, "@IndoorPreFetch, skiploi, %{private}.7f, %{private}.7f, predicted, time", v111, v95);
            v78 = (char *)v77;
            sub_100512490("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertPredictedLOI(uint32_t, std::chrono::system_clock::time_point, cl::chrono::secondsf, NSArray *)", "%s\n", v77);
            if (v78 != buf)
              free(v78);
          }
          goto LABEL_76;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v56 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(objc_msgSend(v38, "location"), "latitude");
          v58 = v57;
          objc_msgSend(objc_msgSend(v38, "location"), "longitude");
          if (!v121[0])
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          *(_DWORD *)buf = 134284033;
          *(_QWORD *)&buf[4] = v58;
          v117 = 2049;
          v118 = v59;
          v119 = 2050;
          v120 = v122;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "VisitTime, p2hloi, %{private}.7f, %{private}.7f, recent, %{public}ld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v79 = qword_1022A0048;
          objc_msgSend(objc_msgSend(v38, "location"), "latitude");
          v81 = v80;
          objc_msgSend(objc_msgSend(v38, "location"), "longitude");
          if (!v121[0])
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          *(_DWORD *)v111 = 134284033;
          *(_QWORD *)&v111[4] = v81;
          v112 = 2049;
          v113 = v82;
          v114 = 2050;
          v115 = v122;
          LODWORD(v95) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "VisitTime, p2hloi, %{private}.7f, %{private}.7f, recent, %{public}ld", v111, v95);
          v84 = (char *)v83;
          sub_100512490("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertPredictedLOI(uint32_t, std::chrono::system_clock::time_point, cl::chrono::secondsf, NSArray *)", "%s\n", v83);
          if (v84 != buf)
            free(v84);
        }
        objc_msgSend(objc_msgSend(v38, "location"), "latitude");
        *(_QWORD *)buf = v60;
        objc_msgSend(objc_msgSend(v38, "location"), "longitude");
        *(_QWORD *)v111 = v61;
        objc_msgSend(objc_msgSend(v38, "location"), "horizontalUncertainty");
        v104 = v62;
        objc_msgSend(v36, "confidence");
        v103 = v63;
        if (!v121[0])
          __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
        v64 = *((_QWORD *)&v97 + 1);
        if (*((_QWORD *)&v97 + 1) >= v98)
        {
          v55 = sub_10118E8F4((uint64_t *)&v97, buf, (uint64_t *)v111, &v104, &v103, &v122, (int *)&v105);
        }
        else
        {
          v65 = *(_QWORD *)v111;
          v66 = v104;
          v67 = v122;
          v68 = v105;
          **((_QWORD **)&v97 + 1) = *(_QWORD *)buf;
          *(_QWORD *)(v64 + 8) = v65;
          *(_QWORD *)(v64 + 16) = v66;
          *(_QWORD *)(v64 + 24) = v63;
          *(_QWORD *)(v64 + 40) = v67;
          *(_BYTE *)(v64 + 32) = 1;
          *(_BYTE *)(v64 + 48) = 0;
          *(_DWORD *)(v64 + 64) = v68;
          v55 = v64 + 72;
          *(_BYTE *)(v64 + 68) = 0;
        }
      }
      *((_QWORD *)&v97 + 1) = v55;
LABEL_76:
      if (v32 == (id)++v35)
      {
        v91 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v106, &v125, 16);
        v32 = v91;
        if (!v91)
          goto LABEL_89;
        goto LABEL_32;
      }
    }
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v93 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#Warning No predicted locations of interest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    LOWORD(v125) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning No predicted locations of interest", &v125, 2);
    v8 = (char *)v94;
    sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v94);
    goto LABEL_10;
  }
LABEL_95:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10118C7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)&a17;
  sub_10118EB08(&a61);
  _Unwind_Resume(a1);
}

void sub_10118C83C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  _xpc_activity_s *v10;
  NSObject *v11;
  xpc_activity_state_t state;
  int v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  xpc_activity_state_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  xpc_activity_state_t v25;
  __int128 *v26;
  __int128 *v27;
  _QWORD v28[2];
  _BYTE buf[14];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v2 = *(_QWORD *)(a1 + 80);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v6 = 954437177
       * ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48)) >> 3);
    v7 = 954437177
       * ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48)) >> 3);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v5;
    v30 = 1026;
    v31 = v6;
    v32 = 1026;
    v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, routine, %{public}d, %{public}d, converted, %{public}d, %{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v15 = 954437177
        * ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)
          - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48)) >> 3);
    v16 = 954437177
        * ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56)
          - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48)) >> 3);
    LODWORD(v26) = 67240960;
    HIDWORD(v26) = v13;
    LOWORD(v27) = 1026;
    *(_DWORD *)((char *)&v27 + 2) = v14;
    HIWORD(v27) = 1026;
    LODWORD(v28[0]) = v15;
    WORD2(v28[0]) = 1026;
    *(_DWORD *)((char *)v28 + 6) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@IndoorPreFetch, routine, %{public}d, %{public}d, converted, %{public}d, %{public}d", &v26, 26);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v27 = 0;
  v28[0] = 0;
  v26 = 0;
  sub_10118CD44((uint64_t *)&v26, 0x8E38E38E38E38E39* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48)) >> 3)- 0x71C71C71C71C71C7* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48)) >> 3));
  sub_10118EBAC((uint64_t *)&v26, (uint64_t)v27, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56), 0x8E38E38E38E38E39* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48)) >> 3));
  sub_10118EBAC((uint64_t *)&v26, (uint64_t)v27, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56), 0x8E38E38E38E38E39* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48)) >> 3));
  v8 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v27 - (char *)v26) >> 3));
  if (v27 == v26)
    v9 = 0;
  else
    v9 = v8;
  sub_10118F230((uint64_t)v26, v27, (uint64_t)&v24, v9, 1);
  sub_10025873C(*(_QWORD *)(v2 + 144), *(_QWORD *)(a1 + 88), (uint64_t *)&v26);
  v10 = *(_xpc_activity_s **)(a1 + 40);
  if (v10 && !xpc_activity_set_state(v10, 5))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = state;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Failed to mark prefetch activity as done. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v19 = qword_1022A0048;
      v20 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      v24 = 134349056;
      v25 = v20;
      LODWORD(v23) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 17, "Failed to mark prefetch activity as done. Current state is %{public}ld", &v24, v23);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  *(_QWORD *)buf = &v26;
  sub_10118EB08((void ***)buf);
}

void sub_10118CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a13;
  sub_10118EB08(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10118CD44(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10029D26C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    sub_10118E578(a1, v7);
    return sub_10118E6C0((uint64_t)v7);
  }
  return result;
}

void sub_10118CDEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10118E6C0((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10118CE00(uint64_t a1, uint64_t a2)
{
  return sub_10004562C(a1 - 120, a2);
}

void sub_10118CE08(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  void *__p[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  uint8_t buf[1640];

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ClxIndoor, vio estimation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxIndoor, vio estimation", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100B31548((uint64_t)buf);
    sub_10086B338(a2, (uint64_t)buf);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(buf, v11);
    v5 = objc_alloc((Class)CLVisionNotification);
    if (SHIBYTE(v12) < 0)
    {
      sub_100115CE4(__p, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v11;
      v10 = v12;
    }
    v6 = objc_msgSend(v5, "initWithSerializedVIOEstimation:", __p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "clVisionNotificationAvailable:", v6);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    sub_100B356D8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
  }
}

void sub_10118D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  sub_100B356D8((wireless_diagnostics::google::protobuf::MessageLite *)&a25);
  _Unwind_Resume(a1);
}

void sub_10118D09C(uint64_t a1, void *a2)
{
  sub_10118CE08(a1 - 120, a2);
}

void sub_10118D0A4(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  void *__p[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  uint8_t buf[1640];

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ClxIndoor, vl localization", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxIndoor, vl localization", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100B31650((uint64_t)buf);
    sub_10086CB10(a2, (uint64_t)buf);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(buf, v11);
    v5 = objc_alloc((Class)CLVisionNotification);
    if (SHIBYTE(v12) < 0)
    {
      sub_100115CE4(__p, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v11;
      v10 = v12;
    }
    v6 = objc_msgSend(v5, "initWithSerializedVLLocalizationResult:", __p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "clVisionNotificationAvailable:", v6);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    sub_100B3DDC8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
  }
}

void sub_10118D2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  sub_100B3DDC8((wireless_diagnostics::google::protobuf::MessageLite *)&a25);
  _Unwind_Resume(a1);
}

void sub_10118D338(uint64_t a1, void *a2)
{
  sub_10118D0A4(a1 - 120, a2);
}

BOOL sub_10118D340(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 152), "indoord") != 0;
}

BOOL sub_10118D360()
{
  return sub_10019CFA0() == 1;
}

BOOL sub_10118D37C()
{
  return sub_10019CFA0() == 1;
}

void sub_10118D398(uint64_t a1)
{
  sub_100029448(a1 - 120);
}

id sub_10118D3A0(uint64_t a1, uint64_t **a2)
{
  objc_class *v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  objc_class *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  NSString *v12;
  const std::string **v13;
  const std::string *v14;
  const std::string *v15;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  NSString *v20;
  id v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t *v24;
  id v25;
  NSObject *v26;
  id v27;
  id v28;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  id v36;
  const char *v37;
  std::string *v38;
  uint64_t v39;
  id v40;
  id v41;
  const char *v42;
  std::string *v43;
  const char *v44;
  uint64_t v45;
  uint64_t *v47;
  NSMutableArray *v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  id v52;
  std::string buf[68];

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v6 -= 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v4[3] + 8) - *(_QWORD *)v4[3]) >> 3);
      v4 += 7;
    }
    while (v4 != v5);
  }
  v48 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v6);
  v7 = (objc_class *)objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoorBundle"), "classNamed:", CFSTR("CLPrefetchFloorRequest"));
  if (v7)
  {
    v2 = v7;
    if (qword_1022A0040 == -1)
      goto LABEL_8;
  }
  else
  {
    sub_101943580(qword_1022A0040 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0040, &stru_1021A47C0);
LABEL_8:
  v45 = a1;
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, request, venues, %{public}lu", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v30 = 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2);
    v49 = 134349056;
    v50 = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@IndoorPreFetch, request, venues, %{public}lu", &v49, 12);
    v32 = (std::string *)v31;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::prefetchVenues(const vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> &)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v10 = *a2;
  v47 = a2[1];
  if (*a2 != v47)
  {
    do
    {
      v11 = v10;
      if (*((char *)v10 + 23) < 0)
        v11 = (uint64_t *)*v10;
      v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
      v13 = (const std::string **)v10[3];
      v15 = *v13;
      v14 = v13[1];
      if (*v13 != v14)
      {
        v16 = v12;
        v17 = v10[5];
        v18 = *((int *)v10 + 12);
        do
        {
          std::string::basic_string(buf, v15, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v49);
          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = buf;
          else
            v19 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
          v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v21 = objc_msgSend([v2 alloc], "initWithFloor:inVenue:lastRelevant:locationContext:ranking:", v20, v16, +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", ((double)v10[4] + -9.783072e14) / 1000000.0), v17, v18);
          -[NSMutableArray addObject:](v48, "addObject:", v21);

          ++v15;
        }
        while (v15 != v14);
      }
      v10 += 7;
    }
    while (v10 != v47);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v22 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *a2;
    v23 = a2[1];
    v25 = -[NSMutableArray count](v48, "count");
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = 0x6DB6DB6DB6DB6DB7 * (v23 - v24);
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, venues, %{public}lu, floors, %{public}lu", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v33 = qword_1022A0048;
    v35 = *a2;
    v34 = a2[1];
    v36 = -[NSMutableArray count](v48, "count");
    v49 = 134349312;
    v50 = 0x6DB6DB6DB6DB6DB7 * (v34 - v35);
    v51 = 2050;
    v52 = v36;
    LODWORD(v44) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "@IndoorPreFetch, venues, %{public}lu, floors, %{public}lu", &v49, v44);
    v38 = (std::string *)v37;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::prefetchVenues(const vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> &)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v26 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v27 = objc_msgSend(*(id *)(v45 + 152), "indoord");
    v28 = objc_msgSend(-[NSMutableArray componentsJoinedByString:](v48, "componentsJoinedByString:", CFSTR(",")), "UTF8String");
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%p CLPipelineLocationProvider::prefetchVenues() --> requesting prefetch for %s", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v39 = qword_1022A0048;
    v40 = objc_msgSend(*(id *)(v45 + 152), "indoord");
    v41 = objc_msgSend(-[NSMutableArray componentsJoinedByString:](v48, "componentsJoinedByString:", CFSTR(",")), "UTF8String");
    v49 = 134218242;
    v50 = (uint64_t)v40;
    v51 = 2080;
    v52 = v41;
    LODWORD(v44) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 2, "%p CLPipelineLocationProvider::prefetchVenues() --> requesting prefetch for %s", &v49, v44);
    v43 = (std::string *)v42;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::prefetchVenues(const vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> &)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  return objc_msgSend(objc_msgSend(*(id *)(v45 + 152), "daemonControl"), "prefetch:", v48);
}

void sub_10118DADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10118DB00(uint64_t a1, uint64_t **a2)
{
  return sub_10118D3A0(a1 - 120, a2);
}

void sub_10118DBAC(id a1)
{
  qword_10230D208 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPipelineLocationProviderSilo"));
}

void sub_10118DC3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230D220);
  _Unwind_Resume(a1);
}

BOOL sub_10118DC54()
{
  void *v0;
  NSBundle *v1;
  _BOOL8 v2;

  v0 = objc_autoreleasePoolPush();
  v1 = sub_101184FF8();
  v2 = v1 != 0;
  -[NSBundle unload](v1, "unload");
  objc_autoreleasePoolPop(v0);
  return v2;
}

void sub_10118DE58()
{
  operator new();
}

void sub_10118DF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_10118DF3C()
{
  operator new();
}

void sub_10118DFEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_10118E028(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10118E054(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10118E080(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10118E0AC(uint64_t a1)
{
  sub_10118A5EC(*(_QWORD *)(a1 + 40), *(_xpc_activity_s **)(a1 + 32));
}

id sub_10118E0B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;
  id v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  NSObject *v14;
  id v15;
  double v16;
  uint64_t v17;
  id v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  id v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  _BYTE v40[128];

  *(_BYTE *)a2 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v24, v40, 16);
  v4 = result;
  if (result)
  {
    v5 = 0;
    v6 = *(_QWORD *)v25;
    v7 = *(_QWORD *)(a2 + 8);
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(a1);
        v9 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v8);
        if (objc_msgSend(v9, "exitDate"))
          v10 = objc_msgSend(v9, "exitDate");
        else
          v10 = objc_msgSend(v9, "entryDate");
        v11 = v10;
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v13 = v12;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A47C0);
        v14 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v15 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
          objc_msgSend(v11, "timeIntervalSinceNow");
          *(_DWORD *)buf = 136446722;
          v35 = v15;
          v36 = 2050;
          v37 = v16 / 3600.0;
          v38 = 2050;
          v39 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "VisitTime, visit, %{public}s, delta, %{public}.1f, val, %{public}ld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A47C0);
          v17 = qword_1022A0048;
          v18 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
          objc_msgSend(v11, "timeIntervalSinceNow");
          v28 = 136446722;
          v29 = v18;
          v30 = 2050;
          v31 = v19 / 3600.0;
          v32 = 2050;
          v33 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
          LODWORD(v22) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "VisitTime, visit, %{public}s, delta, %{public}.1f, val, %{public}ld", &v28, v22);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "boost::optional<system_clock::time_point> mostRecentVisitInVisits(NSArray *)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        if (v5)
        {
          if (v7 <= (uint64_t)(v13 * 1000000.0 + 9.783072e14))
            v7 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
        }
        else
        {
          v5 = 1;
          *(_BYTE *)a2 = 1;
          v7 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
        }
        *(_QWORD *)(a2 + 8) = v7;
        v8 = (char *)v8 + 1;
      }
      while (v4 != v8);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v24, v40, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_10118E3EC(_Unwind_Exception *a1)
{
  _BYTE *v1;
  int v2;

  if (!v2)
    _Unwind_Resume(a1);
  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_10118E41C(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];

  v8 = *a1;
  v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  v17 = (uint64_t)(a1 + 2);
  v18 = 0x8E38E38E38E38E39 * ((a1[2] - v8) >> 3);
  if (2 * v18 > v10)
    v10 = 2 * v18;
  if (v18 >= 0x1C71C71C71C71C7)
    v19 = 0x38E38E38E38E38ELL;
  else
    v19 = v10;
  v30[4] = a1 + 2;
  v20 = (char *)sub_10029D26C(v17, v19);
  v21 = &v20[72 * v9];
  v30[0] = v20;
  v30[1] = v21;
  v30[3] = &v20[72 * v22];
  v23 = *a3;
  v24 = *a4;
  v25 = *a5;
  v26 = *a6;
  v27 = *a7;
  *(_QWORD *)v21 = *a2;
  *((_QWORD *)v21 + 1) = v23;
  *((_QWORD *)v21 + 2) = v24;
  *((_QWORD *)v21 + 3) = v25;
  *((_QWORD *)v21 + 5) = v26;
  v21[32] = 1;
  v21[48] = 0;
  *((_DWORD *)v21 + 16) = v27;
  v21[68] = 0;
  v30[2] = v21 + 72;
  sub_10118E578(a1, v30);
  v28 = a1[1];
  sub_10118E6C0((uint64_t)v30);
  return v28;
}

void sub_10118E564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10118E6C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10118E578(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10118E5EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10118E5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a6;
  v11 = a7;
  if (a3 != a5)
  {
    v8 = a3;
    do
    {
      v8 -= 72;
      sub_10025DB98(a7 - 72, v8);
      a7 = v11 - 72;
      v11 -= 72;
    }
    while (v8 != a5);
    return v10;
  }
  return a6;
}

void sub_10118E66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10118E680((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10118E680(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_BYTE *)(result + 24))
  {
    v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
    while (v1 != v2)
    {
      if (*(_BYTE *)(v1 + 48))
        *(_BYTE *)(v1 + 48) = 0;
      if (*(_BYTE *)(v1 + 32))
        *(_BYTE *)(v1 + 32) = 0;
      v1 += 72;
    }
  }
  return result;
}

uint64_t sub_10118E6C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      if (*(_BYTE *)(v3 - 24))
        *(_BYTE *)(v3 - 24) = 0;
      if (*(_BYTE *)(v3 - 40))
        *(_BYTE *)(v3 - 40) = 0;
      v3 -= 72;
    }
    while (v3 != v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_10118E720(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned __int8 *a6, unsigned __int8 *a7, int *a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;

  v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v10)
    v10 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v18 = 0x38E38E38E38E38ELL;
  else
    v18 = v10;
  v26 = a1 + 2;
  if (v18)
    v19 = (char *)sub_10029D26C((uint64_t)(a1 + 2), v18);
  else
    v19 = 0;
  v22 = v19;
  v23 = &v19[72 * v9];
  v25 = &v19[72 * v18];
  sub_10118E88C((uint64_t)(a1 + 2), (uint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  v24 = v23 + 72;
  sub_10118E578(a1, &v22);
  v20 = a1[1];
  sub_10118E6C0((uint64_t)&v22);
  return v20;
}

void sub_10118E878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10118E6C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10118E88C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7, unsigned __int8 *a8, int *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *((_QWORD *)a7 + 1);
  v14 = *a8;
  v15 = *((_QWORD *)a8 + 1);
  v16 = *a9;
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 32) = 0;
  if (v12)
  {
    *(_QWORD *)(a2 + 40) = v13;
    *(_BYTE *)(a2 + 32) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  if (v14)
  {
    *(_QWORD *)(a2 + 56) = v15;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_DWORD *)(a2 + 64) = v16;
  *(_BYTE *)(a2 + 68) = 1;
}

uint64_t sub_10118E8F4(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD v30[5];

  v8 = *a1;
  v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  v17 = (uint64_t)(a1 + 2);
  v18 = 0x8E38E38E38E38E39 * ((a1[2] - v8) >> 3);
  if (2 * v18 > v10)
    v10 = 2 * v18;
  if (v18 >= 0x1C71C71C71C71C7)
    v19 = 0x38E38E38E38E38ELL;
  else
    v19 = v10;
  v30[4] = a1 + 2;
  v20 = (char *)sub_10029D26C(v17, v19);
  v21 = &v20[72 * v9];
  v30[0] = v20;
  v30[1] = v21;
  v30[3] = &v20[72 * v22];
  v23 = *a3;
  v24 = *a4;
  v25 = *a5;
  v26 = *a6;
  v27 = *a7;
  *(_QWORD *)v21 = *a2;
  *((_QWORD *)v21 + 1) = v23;
  *((_QWORD *)v21 + 2) = v24;
  *((_QWORD *)v21 + 3) = v25;
  *((_QWORD *)v21 + 5) = v26;
  v21[32] = 1;
  v21[48] = 0;
  *((_DWORD *)v21 + 16) = v27;
  v21[68] = 0;
  v30[2] = v21 + 72;
  sub_10118E578(a1, v30);
  v28 = a1[1];
  sub_10118E6C0((uint64_t)v30);
  return v28;
}

void sub_10118EA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10118E6C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10118EA54()
{
  operator delete();
}

_QWORD *sub_10118EA68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A4830;
  result[1] = v3;
  return result;
}

uint64_t sub_10118EA9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A4830;
  a2[1] = v2;
  return result;
}

void sub_10118EAB8(uint64_t a1, _DWORD *a2)
{
  sub_10118A4E4(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10118EAC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10118EAFC()
{
}

void sub_10118EB08(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 72)
    {
      if (*(i - 24))
        *(i - 24) = 0;
      if (*(i - 40))
        *(i - 40) = 0;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_10118EB4C(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 24))
        *(i - 24) = 0;
      if (*(i - 40))
        *(i - 40) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10118EBAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v21 = a3 + 72 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_10118EF08(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_10118EDB8((uint64_t)a1, v5, v12, v5 + 72 * a5);
      sub_10118F0C0((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x38E38E38E38E38ELL)
        sub_100259694();
      v15 = 0x8E38E38E38E38E39 * ((a2 - v13) >> 3);
      v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x1C71C71C71C71C7)
        v18 = 0x38E38E38E38E38ELL;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)sub_10029D26C(v9, v18);
      else
        v19 = 0;
      v22 = (uint64_t)&v19[72 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[72 * v18];
      v23 = 9 * a5;
      v24 = v22 + 72 * a5;
      v25 = 8 * v23;
      do
      {
        sub_10025DB98(v22, v7);
        v22 += 72;
        v7 += 72;
        v25 -= 72;
      }
      while (v25);
      v28 = v24;
      v5 = sub_10118EE58(a1, v27, v5);
      sub_10118E6C0((uint64_t)v27);
    }
  }
  return v5;
}

void sub_10118ED8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10118EDB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      sub_10025DB98(v8, v10);
      v10 += 72;
      v8 += 72;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_10118EFD0((uint64_t)&v12, a2, v7, v6);
}

void sub_10118EE50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10118EE58(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_10118E5EC((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10118F1A8(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10118EF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a4;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      sub_10025DB98(a4, v5);
      v5 += 72;
      a4 = v7 + 72;
      v7 += 72;
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_10118EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10118EF90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10118EF90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_BYTE *)(result + 24))
  {
    v1 = **(_QWORD **)(result + 16);
    v2 = **(_QWORD **)(result + 8);
    while (v1 != v2)
    {
      if (*(_BYTE *)(v1 - 24))
        *(_BYTE *)(v1 - 24) = 0;
      if (*(_BYTE *)(v1 - 40))
        *(_BYTE *)(v1 - 40) = 0;
      v1 -= 72;
    }
  }
  return result;
}

uint64_t sub_10118EFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  result = a3;
  if (a3 != a2)
  {
    v5 = 0;
    do
    {
      v6 = a4 + v5;
      v7 = *(_OWORD *)(a3 + v5 - 72);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(a3 + v5 - 56);
      *(_OWORD *)(v6 - 72) = v7;
      if (*(_BYTE *)(a4 + v5 - 40))
      {
        if (*(_BYTE *)(a3 + v5 - 40))
          *(_QWORD *)(a4 + v5 - 32) = *(_QWORD *)(a3 + v5 - 32);
        else
          *(_BYTE *)(v6 - 40) = 0;
      }
      else if (*(_BYTE *)(a3 + v5 - 40))
      {
        *(_QWORD *)(a4 + v5 - 32) = *(_QWORD *)(a3 + v5 - 32);
        *(_BYTE *)(v6 - 40) = 1;
      }
      v8 = a4 + v5;
      if (*(_BYTE *)(a4 + v5 - 24))
      {
        if (*(_BYTE *)(a3 + v5 - 24))
          *(_QWORD *)(a4 + v5 - 16) = *(_QWORD *)(a3 + v5 - 16);
        else
          *(_BYTE *)(v8 - 24) = 0;
      }
      else if (*(_BYTE *)(a3 + v5 - 24))
      {
        *(_QWORD *)(a4 + v5 - 16) = *(_QWORD *)(a3 + v5 - 16);
        *(_BYTE *)(v8 - 24) = 1;
      }
      v9 = a4 + v5;
      v10 = *(_DWORD *)(a3 + v5 - 8);
      *(_BYTE *)(v9 - 4) = *(_BYTE *)(a3 + v5 - 4);
      *(_DWORD *)(v9 - 8) = v10;
      v5 -= 72;
    }
    while (a3 + v5 != a2);
  }
  return result;
}

uint64_t sub_10118F0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (a2 == a3)
    return a2;
  result = a3;
  v5 = 0;
  do
  {
    v6 = a2 + v5;
    v7 = a4 + v5;
    v8 = *(_OWORD *)(a2 + v5 + 16);
    *(_OWORD *)v7 = *(_OWORD *)(a2 + v5);
    *(_OWORD *)(v7 + 16) = v8;
    if (*(_BYTE *)(a4 + v5 + 32))
    {
      if (*(_BYTE *)(a2 + v5 + 32))
        *(_QWORD *)(a4 + v5 + 40) = *(_QWORD *)(a2 + v5 + 40);
      else
        *(_BYTE *)(v7 + 32) = 0;
    }
    else if (*(_BYTE *)(a2 + v5 + 32))
    {
      *(_QWORD *)(a4 + v5 + 40) = *(_QWORD *)(a2 + v5 + 40);
      *(_BYTE *)(v7 + 32) = 1;
    }
    v9 = a4 + v5;
    if (*(_BYTE *)(a4 + v5 + 48))
    {
      if (*(_BYTE *)(v6 + 48))
        *(_QWORD *)(a4 + v5 + 56) = *(_QWORD *)(a2 + v5 + 56);
      else
        *(_BYTE *)(v9 + 48) = 0;
    }
    else if (*(_BYTE *)(v6 + 48))
    {
      *(_QWORD *)(a4 + v5 + 56) = *(_QWORD *)(a2 + v5 + 56);
      *(_BYTE *)(v9 + 48) = 1;
    }
    v10 = a4 + v5;
    v11 = *(_DWORD *)(v6 + 64);
    *(_BYTE *)(v10 + 68) = *(_BYTE *)(v6 + 68);
    *(_DWORD *)(v10 + 64) = v11;
    v5 += 72;
  }
  while (v6 + 72 != a3);
  return result;
}

uint64_t sub_10118F1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a4;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      sub_10025DB98(a4, v5);
      v5 += 72;
      a4 = v7 + 72;
      v7 += 72;
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_10118F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10118EF90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10118F230(uint64_t result, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  __int128 *v19;
  char v20;
  _BOOL4 v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;

  v7 = a2;
  v8 = (__int128 *)result;
  v23 = a2;
  v24 = (__int128 *)result;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = 0x8E38E38E38E38E39 * (((char *)v7 - (char *)v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = (__int128 *)((char *)v7 - 72);
        result = sub_10024F20C((uint64_t)v7 - 72, (uint64_t)v8);
        if ((_DWORD)result)
          return (uint64_t)sub_10118F514(&v24, &v23);
        return result;
      case 3uLL:
        v23 = (__int128 *)((char *)v7 - 72);
        return sub_10118FAA0(v8, (__int128 *)((char *)v8 + 72), (__int128 *)((char *)v7 - 72));
      case 4uLL:
        v23 = (__int128 *)((char *)v7 - 72);
        return (uint64_t)sub_1011903C4(v8, (__int128 *)((char *)v8 + 72), v8 + 9, (__int128 *)((char *)v7 - 72));
      case 5uLL:
        v23 = (__int128 *)((char *)v7 - 72);
        return (uint64_t)sub_101190460(v8, (__int128 *)((char *)v8 + 72), v8 + 9, (__int128 *)((char *)v8 + 216), (__int128 *)((char *)v7 - 72));
      default:
        if (v10 <= 1727)
        {
          if ((a5 & 1) != 0)
            return sub_10118F624((uint64_t)v8, v7);
          else
            return sub_10118F880((uint64_t)v8, v7);
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            return (uint64_t)sub_101190528(v8, v7, v7, a3);
          return result;
        }
        v12 = v11 >> 1;
        v13 = (__int128 *)((char *)v7 - 72);
        if ((unint64_t)v10 < 0x2401)
        {
          sub_10118FAA0((__int128 *)((char *)v8 + 72 * (v11 >> 1)), v8, v13);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v23;
            goto LABEL_12;
          }
        }
        else
        {
          sub_10118FAA0(v8, (__int128 *)((char *)v8 + 72 * (v11 >> 1)), v13);
          v14 = v23;
          v15 = 9 * v12;
          v16 = 72 * v12;
          v17 = 72 * v12 - 72;
          sub_10118FAA0((__int128 *)((char *)v24 + 72), (__int128 *)((char *)v24 + v17), v23 - 9);
          v16 += 72;
          sub_10118FAA0(v24 + 9, (__int128 *)((char *)v24 + v16), (__int128 *)((char *)v14 - 216));
          sub_10118FAA0((__int128 *)((char *)v24 + v17), (__int128 *)((char *)v24 + 8 * v15), (__int128 *)((char *)v24 + v16));
          v22 = (__int128 *)((char *)v24 + 8 * v15);
          sub_10118F514(&v24, &v22);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v18 = sub_10024F20C((uint64_t)v24 - 72, (uint64_t)v24);
        v7 = v23;
        if (!v18)
        {
          result = (uint64_t)sub_10118FB64((uint64_t)v24, v23);
          v8 = (__int128 *)result;
          goto LABEL_20;
        }
LABEL_12:
        v19 = sub_10118FE00((uint64_t)v24, v7);
        if ((v20 & 1) == 0)
          goto LABEL_19;
        v21 = sub_1011900A4(v24, v19);
        v8 = (__int128 *)((char *)v19 + 72);
        result = sub_1011900A4((__int128 *)((char *)v19 + 72), v7);
        if (!(_DWORD)result)
        {
          if (v21)
          {
            v24 = (__int128 *)((char *)v19 + 72);
            goto LABEL_18;
          }
LABEL_19:
          result = sub_10118F230(v24, v19, a3, -v9, a5 & 1);
          v8 = (__int128 *)((char *)v19 + 72);
LABEL_20:
          a5 = 0;
          v24 = v8;
          a4 = -v9;
          continue;
        }
        if (!v21)
        {
          v23 = v19;
          v8 = v24;
          v7 = v19;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return result;
    }
  }
}

__int128 **sub_10118F514(__int128 **result, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  int v14;

  v2 = *result;
  v3 = *a2;
  v4 = **result;
  v5 = (*result)[1];
  v6 = *((unsigned __int8 *)*result + 32);
  v7 = *((_QWORD *)*result + 5);
  v8 = *((unsigned __int8 *)*result + 48);
  v9 = *((_QWORD *)*result + 7);
  v11 = (uint64_t)(*result + 4);
  v10 = *(_DWORD *)v11;
  v12 = *((_BYTE *)*result + 68);
  v13 = (*a2)[1];
  *v2 = **a2;
  v2[1] = v13;
  if (v6)
  {
    if (*((_BYTE *)v3 + 32))
      *((_QWORD *)v2 + 5) = *((_QWORD *)v3 + 5);
    else
      *((_BYTE *)v2 + 32) = 0;
  }
  else if (*((_BYTE *)v3 + 32))
  {
    *((_QWORD *)v2 + 5) = *((_QWORD *)v3 + 5);
    *((_BYTE *)v2 + 32) = 1;
  }
  if (v8)
  {
    if (*((_BYTE *)v3 + 48))
      *((_QWORD *)v2 + 7) = *((_QWORD *)v3 + 7);
    else
      *((_BYTE *)v2 + 48) = 0;
  }
  else if (*((_BYTE *)v3 + 48))
  {
    *((_QWORD *)v2 + 7) = *((_QWORD *)v3 + 7);
    *((_BYTE *)v2 + 48) = 1;
  }
  v14 = *((_DWORD *)v3 + 16);
  *(_BYTE *)(v11 + 4) = *((_BYTE *)v3 + 68);
  *(_DWORD *)v11 = v14;
  *v3 = v4;
  v3[1] = v5;
  if (*((_BYTE *)v3 + 32))
  {
    if (v6)
      *((_QWORD *)v3 + 5) = v7;
    else
      *((_BYTE *)v3 + 32) = 0;
  }
  else if (v6)
  {
    *((_QWORD *)v3 + 5) = v7;
    *((_BYTE *)v3 + 32) = 1;
  }
  if (*((_BYTE *)v3 + 48))
  {
    if (v8)
      *((_QWORD *)v3 + 7) = v9;
    else
      *((_BYTE *)v3 + 48) = 0;
  }
  else if (v8)
  {
    *((_QWORD *)v3 + 7) = v9;
    *((_BYTE *)v3 + 48) = 1;
  }
  *((_DWORD *)v3 + 16) = v10;
  *((_BYTE *)v3 + 68) = v12;
  return result;
}

uint64_t sub_10118F624(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;

  if ((_OWORD *)result != a2)
  {
    v3 = result;
    v4 = result + 72;
    if ((_OWORD *)(result + 72) != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = (__int128 *)v4;
        result = sub_10024F20C(v4, v6);
        if ((_DWORD)result)
        {
          v8 = *(_OWORD *)(v6 + 88);
          v16 = *v7;
          v17 = v8;
          v18 = 0;
          if (*(_BYTE *)(v6 + 104))
          {
            v19 = *(_QWORD *)(v6 + 112);
            v18 = 1;
          }
          v20 = 0;
          if (*(_BYTE *)(v6 + 120))
          {
            v21 = *(_QWORD *)(v6 + 128);
            v20 = 1;
          }
          v22 = *(_DWORD *)(v6 + 136);
          v23 = *(_BYTE *)(v6 + 140);
          v9 = v5;
          while (1)
          {
            v10 = v3 + v9;
            v11 = *(_OWORD *)(v3 + v9 + 16);
            *(_OWORD *)(v10 + 72) = *(_OWORD *)(v3 + v9);
            *(_OWORD *)(v10 + 88) = v11;
            if (*(_BYTE *)(v3 + v9 + 104))
            {
              if (*(_BYTE *)(v3 + v9 + 32))
                *(_QWORD *)(v3 + v9 + 112) = *(_QWORD *)(v3 + v9 + 40);
              else
                *(_BYTE *)(v10 + 104) = 0;
            }
            else if (*(_BYTE *)(v3 + v9 + 32))
            {
              *(_QWORD *)(v3 + v9 + 112) = *(_QWORD *)(v3 + v9 + 40);
              *(_BYTE *)(v10 + 104) = 1;
            }
            v12 = v3 + v9;
            if (*(_BYTE *)(v3 + v9 + 120))
            {
              if (*(_BYTE *)(v3 + v9 + 48))
                *(_QWORD *)(v3 + v9 + 128) = *(_QWORD *)(v3 + v9 + 56);
              else
                *(_BYTE *)(v12 + 120) = 0;
            }
            else if (*(_BYTE *)(v3 + v9 + 48))
            {
              *(_QWORD *)(v3 + v9 + 128) = *(_QWORD *)(v3 + v9 + 56);
              *(_BYTE *)(v12 + 120) = 1;
            }
            v13 = v3 + v9;
            *(_DWORD *)(v13 + 136) = *(_DWORD *)(v3 + v9 + 64);
            *(_BYTE *)(v13 + 140) = *(_BYTE *)(v3 + v9 + 68);
            if (!v9)
              break;
            result = sub_10024F20C((uint64_t)&v16, v13 - 72);
            v9 -= 72;
            if ((result & 1) == 0)
            {
              v14 = v3 + v9 + 72;
              goto LABEL_26;
            }
          }
          v14 = v3;
LABEL_26:
          v15 = v17;
          *(_OWORD *)v14 = v16;
          *(_OWORD *)(v14 + 16) = v15;
          if (*(_BYTE *)(v14 + 32))
          {
            if (v18)
              *(_QWORD *)(v14 + 40) = v19;
            else
              *(_BYTE *)(v14 + 32) = 0;
          }
          else if (v18)
          {
            *(_QWORD *)(v14 + 40) = v19;
            *(_BYTE *)(v14 + 32) = 1;
          }
          if (*(_BYTE *)(v14 + 48))
          {
            if (v20)
              *(_QWORD *)(v14 + 56) = v21;
            else
              *(_BYTE *)(v14 + 48) = 0;
          }
          else if (v20)
          {
            *(_QWORD *)(v14 + 56) = v21;
            *(_BYTE *)(v14 + 48) = 1;
          }
          *(_DWORD *)(v13 + 64) = v22;
          *(_BYTE *)(v13 + 68) = v23;
        }
        v4 = (uint64_t)v7 + 72;
        v5 += 72;
        v6 = (uint64_t)v7;
      }
      while ((__int128 *)((char *)v7 + 72) != a2);
    }
  }
  return result;
}

uint64_t sub_10118F880(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;

  if ((_OWORD *)result != a2)
  {
    v3 = result;
    v4 = result + 72;
    if ((_OWORD *)(result + 72) != a2)
    {
      v5 = result - 72;
      do
      {
        v6 = (__int128 *)v4;
        result = sub_10024F20C(v4, v3);
        if ((_DWORD)result)
        {
          v7 = *(_OWORD *)(v3 + 88);
          v11 = *v6;
          v12 = v7;
          v13 = 0;
          if (*(_BYTE *)(v3 + 104))
          {
            v14 = *(_QWORD *)(v3 + 112);
            v13 = 1;
          }
          v15 = 0;
          if (*(_BYTE *)(v3 + 120))
          {
            v16 = *(_QWORD *)(v3 + 128);
            v15 = 1;
          }
          v17 = *(_DWORD *)(v3 + 136);
          v18 = *(_BYTE *)(v3 + 140);
          v8 = v5;
          do
          {
            v9 = *(_OWORD *)(v8 + 88);
            *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 72);
            *(_OWORD *)(v8 + 160) = v9;
            if (*(_BYTE *)(v8 + 176))
            {
              if (*(_BYTE *)(v8 + 104))
                *(_QWORD *)(v8 + 184) = *(_QWORD *)(v8 + 112);
              else
                *(_BYTE *)(v8 + 176) = 0;
            }
            else if (*(_BYTE *)(v8 + 104))
            {
              *(_QWORD *)(v8 + 184) = *(_QWORD *)(v8 + 112);
              *(_BYTE *)(v8 + 176) = 1;
            }
            if (*(_BYTE *)(v8 + 192))
            {
              if (*(_BYTE *)(v8 + 120))
                *(_QWORD *)(v8 + 200) = *(_QWORD *)(v8 + 128);
              else
                *(_BYTE *)(v8 + 192) = 0;
            }
            else if (*(_BYTE *)(v8 + 120))
            {
              *(_QWORD *)(v8 + 200) = *(_QWORD *)(v8 + 128);
              *(_BYTE *)(v8 + 192) = 1;
            }
            *(_DWORD *)(v8 + 208) = *(_DWORD *)(v8 + 136);
            *(_BYTE *)(v8 + 212) = *(_BYTE *)(v8 + 140);
            result = sub_10024F20C((uint64_t)&v11, v8);
            v8 -= 72;
          }
          while ((result & 1) != 0);
          v10 = v12;
          *(_OWORD *)(v8 + 144) = v11;
          *(_OWORD *)(v8 + 160) = v10;
          if (*(_BYTE *)(v8 + 176))
          {
            if (v13)
              *(_QWORD *)(v8 + 184) = v14;
            else
              *(_BYTE *)(v8 + 176) = 0;
          }
          else if (v13)
          {
            *(_QWORD *)(v8 + 184) = v14;
            *(_BYTE *)(v8 + 176) = 1;
          }
          if (*(_BYTE *)(v8 + 192))
          {
            if (v15)
              *(_QWORD *)(v8 + 200) = v16;
            else
              *(_BYTE *)(v8 + 192) = 0;
          }
          else if (v15)
          {
            *(_QWORD *)(v8 + 200) = v16;
            *(_BYTE *)(v8 + 192) = 1;
          }
          *(_DWORD *)(v8 + 208) = v17;
          *(_BYTE *)(v8 + 212) = v18;
        }
        v4 = (uint64_t)v6 + 72;
        v5 += 72;
        v3 = (uint64_t)v6;
      }
      while ((__int128 *)((char *)v6 + 72) != a2);
    }
  }
  return result;
}

uint64_t sub_10118FAA0(__int128 *a1, __int128 *a2, __int128 *a3)
{
  BOOL v5;
  uint64_t result;
  __int128 **v7;
  __int128 **v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;

  v10 = a2;
  v11 = a1;
  v9 = a3;
  v5 = sub_10024F20C((uint64_t)a2, (uint64_t)a1);
  result = sub_10024F20C((uint64_t)a3, (uint64_t)a2);
  if (!v5)
  {
    if (!(_DWORD)result)
      return result;
    sub_10118F514(&v10, &v9);
    if (!sub_10024F20C((uint64_t)v10, (uint64_t)v11))
      return 1;
    v7 = &v11;
    v8 = &v10;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    sub_10118F514(&v11, &v10);
    if (!sub_10024F20C((uint64_t)v9, (uint64_t)v10))
      return 1;
    v7 = &v10;
    v8 = &v9;
LABEL_9:
    sub_10118F514(v7, v8);
    return 2;
  }
  sub_10118F514(&v11, &v9);
  return 1;
}

__int128 *sub_10118FB64(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;

  v13 = a2;
  v14 = (__int128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v15 = *(_OWORD *)a1;
  v16 = v3;
  v17 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    v18 = *(_QWORD *)(a1 + 40);
    v17 = 1;
  }
  v19 = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v20 = *(_QWORD *)(a1 + 56);
    v19 = 1;
  }
  v21 = *(_DWORD *)(a1 + 64);
  v22 = *(_BYTE *)(a1 + 68);
  if (sub_10024F20C((uint64_t)&v15, (uint64_t)a2 - 72))
  {
    do
      v14 = (__int128 *)((char *)v14 + 72);
    while (!sub_10024F20C((uint64_t)&v15, (uint64_t)v14));
  }
  else
  {
    do
    {
      v4 = (__int128 *)((char *)v14 + 72);
      v14 = v4;
    }
    while (v4 < v13 && !sub_10024F20C((uint64_t)&v15, (uint64_t)v4));
  }
  v6 = v13;
  v5 = v14;
  if (v14 >= v13)
    goto LABEL_13;
  do
    v13 = (__int128 *)((char *)v13 - 72);
  while (sub_10024F20C((uint64_t)&v15, (uint64_t)v13));
  while (1)
  {
    v6 = v13;
    v5 = v14;
LABEL_13:
    if (v5 >= v6)
      break;
    sub_10118F514(&v14, &v13);
    do
      v14 = (__int128 *)((char *)v14 + 72);
    while (!sub_10024F20C((uint64_t)&v15, (uint64_t)v14));
    do
      v13 = (__int128 *)((char *)v13 - 72);
    while (sub_10024F20C((uint64_t)&v15, (uint64_t)v13));
  }
  v7 = (__int128 *)((char *)v5 - 72);
  if ((__int128 *)((char *)v5 - 72) != (__int128 *)a1)
  {
    v8 = *(__int128 *)((char *)v5 - 56);
    *(_OWORD *)a1 = *v7;
    *(_OWORD *)(a1 + 16) = v8;
    if (*(_BYTE *)(a1 + 32))
    {
      if (*((_BYTE *)v5 - 40))
        *(_QWORD *)(a1 + 40) = *((_QWORD *)v5 - 4);
      else
        *(_BYTE *)(a1 + 32) = 0;
    }
    else if (*((_BYTE *)v5 - 40))
    {
      *(_QWORD *)(a1 + 40) = *((_QWORD *)v5 - 4);
      *(_BYTE *)(a1 + 32) = 1;
    }
    if (*(_BYTE *)(a1 + 48))
    {
      if (*((_BYTE *)v5 - 24))
        *(_QWORD *)(a1 + 56) = *((_QWORD *)v5 - 2);
      else
        *(_BYTE *)(a1 + 48) = 0;
    }
    else if (*((_BYTE *)v5 - 24))
    {
      *(_QWORD *)(a1 + 56) = *((_QWORD *)v5 - 2);
      *(_BYTE *)(a1 + 48) = 1;
    }
    v9 = *((_DWORD *)v5 - 2);
    *(_BYTE *)(a1 + 68) = *((_BYTE *)v5 - 4);
    *(_DWORD *)(a1 + 64) = v9;
  }
  v10 = v16;
  *v7 = v15;
  *(__int128 *)((char *)v5 - 56) = v10;
  if (*((_BYTE *)v5 - 40))
  {
    if (v17)
      *((_QWORD *)v5 - 4) = v18;
    else
      *((_BYTE *)v5 - 40) = 0;
  }
  else if (v17)
  {
    *((_QWORD *)v5 - 4) = v18;
    *((_BYTE *)v5 - 40) = 1;
  }
  if (*((_BYTE *)v5 - 24))
  {
    if (v19)
      *((_QWORD *)v5 - 2) = v20;
    else
      *((_BYTE *)v5 - 24) = 0;
  }
  else if (v19)
  {
    *((_QWORD *)v5 - 2) = v20;
    *((_BYTE *)v5 - 24) = 1;
  }
  v11 = v21;
  *((_BYTE *)v5 - 4) = v22;
  *((_DWORD *)v5 - 2) = v11;
  return v14;
}

__int128 *sub_10118FE00(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 *i;
  __int128 *result;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;

  v10 = a2;
  v11 = (__int128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v12 = *(_OWORD *)a1;
  v13 = v3;
  v14 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    v15 = *(_QWORD *)(a1 + 40);
    v14 = 1;
  }
  v16 = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v17 = *(_QWORD *)(a1 + 56);
    v16 = 1;
  }
  v18 = *(_DWORD *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 68);
  do
    v11 = (__int128 *)((char *)v11 + 72);
  while (sub_10024F20C((uint64_t)v11, (uint64_t)&v12));
  if ((__int128 *)((char *)v11 - 72) == (__int128 *)a1)
  {
    do
    {
      if (v11 >= v10)
        break;
      v10 = (__int128 *)((char *)v10 - 72);
    }
    while (!sub_10024F20C((uint64_t)v10, (uint64_t)&v12));
  }
  else
  {
    do
      v10 = (__int128 *)((char *)v10 - 72);
    while (!sub_10024F20C((uint64_t)v10, (uint64_t)&v12));
  }
  for (i = v11; v11 < v10; i = v11)
  {
    sub_10118F514(&v11, &v10);
    do
      v11 = (__int128 *)((char *)v11 + 72);
    while (sub_10024F20C((uint64_t)v11, (uint64_t)&v12));
    do
      v10 = (__int128 *)((char *)v10 - 72);
    while (!sub_10024F20C((uint64_t)v10, (uint64_t)&v12));
  }
  result = (__int128 *)((char *)i - 72);
  if ((__int128 *)((char *)i - 72) != (__int128 *)a1)
  {
    v6 = *(__int128 *)((char *)i - 56);
    *(_OWORD *)a1 = *result;
    *(_OWORD *)(a1 + 16) = v6;
    if (*(_BYTE *)(a1 + 32))
    {
      if (*((_BYTE *)i - 40))
        *(_QWORD *)(a1 + 40) = *((_QWORD *)i - 4);
      else
        *(_BYTE *)(a1 + 32) = 0;
    }
    else if (*((_BYTE *)i - 40))
    {
      *(_QWORD *)(a1 + 40) = *((_QWORD *)i - 4);
      *(_BYTE *)(a1 + 32) = 1;
    }
    if (*(_BYTE *)(a1 + 48))
    {
      if (*((_BYTE *)i - 24))
        *(_QWORD *)(a1 + 56) = *((_QWORD *)i - 2);
      else
        *(_BYTE *)(a1 + 48) = 0;
    }
    else if (*((_BYTE *)i - 24))
    {
      *(_QWORD *)(a1 + 56) = *((_QWORD *)i - 2);
      *(_BYTE *)(a1 + 48) = 1;
    }
    v7 = *((_DWORD *)i - 2);
    *(_BYTE *)(a1 + 68) = *((_BYTE *)i - 4);
    *(_DWORD *)(a1 + 64) = v7;
  }
  v8 = v13;
  *result = v12;
  *(__int128 *)((char *)i - 56) = v8;
  if (*((_BYTE *)i - 40))
  {
    if (v14)
      *((_QWORD *)i - 4) = v15;
    else
      *((_BYTE *)i - 40) = 0;
  }
  else if (v14)
  {
    *((_QWORD *)i - 4) = v15;
    *((_BYTE *)i - 40) = 1;
  }
  if (*((_BYTE *)i - 24))
  {
    if (v16)
      *((_QWORD *)i - 2) = v17;
    else
      *((_BYTE *)i - 24) = 0;
  }
  else if (v16)
  {
    *((_QWORD *)i - 2) = v17;
    *((_BYTE *)i - 24) = 1;
  }
  v9 = v18;
  *((_BYTE *)i - 4) = v19;
  *((_DWORD *)i - 2) = v9;
  return result;
}

BOOL sub_1011900A4(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  int v13;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;

  v15 = a2;
  v16 = a1;
  v4 = 1;
  switch(0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v15 = (__int128 *)((char *)a2 - 72);
      if (sub_10024F20C((uint64_t)a2 - 72, (uint64_t)a1))
        sub_10118F514(&v16, &v15);
      return v4;
    case 3uLL:
      sub_10118FAA0(a1, (__int128 *)((char *)a1 + 72), (__int128 *)((char *)a2 - 72));
      return v4;
    case 4uLL:
      sub_1011903C4(a1, (__int128 *)((char *)a1 + 72), a1 + 9, (__int128 *)((char *)a2 - 72));
      return v4;
    case 5uLL:
      sub_101190460(a1, (__int128 *)((char *)a1 + 72), a1 + 9, (__int128 *)((char *)a1 + 216), (__int128 *)((char *)a2 - 72));
      return v4;
    default:
      v5 = (uint64_t)(a1 + 9);
      sub_10118FAA0(a1, (__int128 *)((char *)a1 + 72), a1 + 9);
      v6 = (uint64_t)a1 + 216;
      v4 = 1;
      if ((__int128 *)v6 == a2)
        return v4;
      v7 = 0;
      break;
  }
  while (!sub_10024F20C(v6, v5))
  {
    v12 = v15;
LABEL_40:
    v5 = v6;
    v6 += 72;
    if ((__int128 *)v6 == v12)
      return 1;
  }
  v8 = *(_OWORD *)(v6 + 16);
  v17 = *(_OWORD *)v6;
  v18 = v8;
  v19 = 0;
  if (*(_BYTE *)(v6 + 32))
  {
    v20 = *(_QWORD *)(v6 + 40);
    v19 = 1;
  }
  v21 = 0;
  if (*(_BYTE *)(v6 + 48))
  {
    v22 = *(_QWORD *)(v6 + 56);
    v21 = 1;
  }
  v23 = *(_DWORD *)(v6 + 64);
  v24 = *(_BYTE *)(v6 + 68);
  do
  {
    v9 = v5;
    v10 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(v5 + 72) = *(_OWORD *)v5;
    *(_OWORD *)(v5 + 88) = v10;
    if (*(_BYTE *)(v5 + 104))
    {
      if (*(_BYTE *)(v5 + 32))
        *(_QWORD *)(v5 + 112) = *(_QWORD *)(v5 + 40);
      else
        *(_BYTE *)(v5 + 104) = 0;
    }
    else if (*(_BYTE *)(v5 + 32))
    {
      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v5 + 40);
      *(_BYTE *)(v5 + 104) = 1;
    }
    if (*(_BYTE *)(v5 + 120))
    {
      if (*(_BYTE *)(v5 + 48))
        *(_QWORD *)(v5 + 128) = *(_QWORD *)(v5 + 56);
      else
        *(_BYTE *)(v5 + 120) = 0;
    }
    else if (*(_BYTE *)(v5 + 48))
    {
      *(_QWORD *)(v5 + 128) = *(_QWORD *)(v5 + 56);
      *(_BYTE *)(v5 + 120) = 1;
    }
    *(_DWORD *)(v5 + 136) = *(_DWORD *)(v5 + 64);
    *(_BYTE *)(v5 + 140) = *(_BYTE *)(v5 + 68);
    if ((__int128 *)v5 == v16)
      break;
    v5 -= 72;
  }
  while (sub_10024F20C((uint64_t)&v17, v9 - 72));
  v11 = v18;
  *(_OWORD *)v9 = v17;
  *(_OWORD *)(v9 + 16) = v11;
  if (*(_BYTE *)(v9 + 32))
  {
    if (v19)
      *(_QWORD *)(v9 + 40) = v20;
    else
      *(_BYTE *)(v9 + 32) = 0;
  }
  else if (v19)
  {
    *(_QWORD *)(v9 + 40) = v20;
    *(_BYTE *)(v9 + 32) = 1;
  }
  if (*(_BYTE *)(v9 + 48))
  {
    if (v21)
      *(_QWORD *)(v9 + 56) = v22;
    else
      *(_BYTE *)(v9 + 48) = 0;
  }
  else if (v21)
  {
    *(_QWORD *)(v9 + 56) = v22;
    *(_BYTE *)(v9 + 48) = 1;
  }
  v13 = v23;
  *(_BYTE *)(v9 + 68) = v24;
  *(_DWORD *)(v9 + 64) = v13;
  ++v7;
  v12 = v15;
  if (v7 != 8)
    goto LABEL_40;
  return v6 + 72 == (_QWORD)v15;
}

__int128 **sub_1011903C4(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 **result;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;

  v11 = a2;
  v12 = a1;
  v9 = a4;
  v10 = a3;
  sub_10118FAA0(a1, a2, a3);
  result = (__int128 **)sub_10024F20C((uint64_t)a4, (uint64_t)a3);
  if ((_DWORD)result)
  {
    sub_10118F514(&v10, &v9);
    result = (__int128 **)sub_10024F20C((uint64_t)v10, (uint64_t)a2);
    if ((_DWORD)result)
    {
      sub_10118F514(&v11, &v10);
      result = (__int128 **)sub_10024F20C((uint64_t)v11, (uint64_t)a1);
      if ((_DWORD)result)
        return sub_10118F514(&v12, &v11);
    }
  }
  return result;
}

__int128 **sub_101190460(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 **result;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;

  v14 = a2;
  v15 = a1;
  v12 = a4;
  v13 = a3;
  v11 = a5;
  sub_1011903C4(a1, a2, a3, a4);
  result = (__int128 **)sub_10024F20C((uint64_t)a5, (uint64_t)a4);
  if ((_DWORD)result)
  {
    sub_10118F514(&v12, &v11);
    result = (__int128 **)sub_10024F20C((uint64_t)v12, (uint64_t)a3);
    if ((_DWORD)result)
    {
      sub_10118F514(&v13, &v12);
      result = (__int128 **)sub_10024F20C((uint64_t)v13, (uint64_t)a2);
      if ((_DWORD)result)
      {
        sub_10118F514(&v14, &v13);
        result = (__int128 **)sub_10024F20C((uint64_t)v14, (uint64_t)a1);
        if ((_DWORD)result)
          return sub_10118F514(&v15, &v14);
      }
    }
  }
  return result;
}

__int128 *sub_101190528(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  __int128 *v17;
  __int128 *v18;

  v18 = a1;
  if (a1 != a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 72;
    if ((char *)a2 - (char *)a1 >= 73)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)a1 + 72 * v10;
      do
      {
        sub_101190688((_BOOL8)v7, a4, v9, v12);
        v12 -= 72;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if (sub_10024F20C((uint64_t)v13, (uint64_t)v18))
        {
          sub_10118F514(&v17, &v18);
          sub_101190688((_BOOL8)v18, a4, v9, (uint64_t)v18);
        }
        v13 = (__int128 *)((char *)v17 + 72);
        v17 = v13;
      }
      while (v13 != a3);
      v7 = v18;
      v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 73)
    {
      v14 = v8 / 0x48uLL;
      do
      {
        sub_101190958((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 = (__int128 *)((char *)v6 - 72);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

BOOL sub_101190688(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * ((a4 - result) >> 3)))
    {
      v9 = (0x1C71C71C71C71C72 * ((a4 - result) >> 3)) | 1;
      v10 = result + 72 * v9;
      v11 = 0x1C71C71C71C71C72 * ((a4 - result) >> 3) + 2;
      if (v11 < a3 && sub_10024F20C(result + 72 * v9, v10 + 72))
      {
        v10 += 72;
        v9 = v11;
      }
      result = sub_10024F20C(v10, v5);
      if (!result)
      {
        v12 = *(_OWORD *)(v5 + 16);
        v19 = *(_OWORD *)v5;
        v20 = v12;
        v21 = 0;
        if (*(_BYTE *)(v5 + 32))
        {
          v22 = *(_QWORD *)(v5 + 40);
          v21 = 1;
        }
        v23 = 0;
        if (*(_BYTE *)(v5 + 48))
        {
          v24 = *(_QWORD *)(v5 + 56);
          v23 = 1;
        }
        v25 = *(_DWORD *)(v5 + 64);
        v26 = *(_BYTE *)(v5 + 68);
        do
        {
          v13 = v10;
          v14 = *(_OWORD *)(v10 + 16);
          *(_OWORD *)v5 = *(_OWORD *)v10;
          *(_OWORD *)(v5 + 16) = v14;
          if (*(_BYTE *)(v5 + 32))
          {
            if (*(_BYTE *)(v10 + 32))
              *(_QWORD *)(v5 + 40) = *(_QWORD *)(v10 + 40);
            else
              *(_BYTE *)(v5 + 32) = 0;
          }
          else if (*(_BYTE *)(v10 + 32))
          {
            *(_QWORD *)(v5 + 40) = *(_QWORD *)(v10 + 40);
            *(_BYTE *)(v5 + 32) = 1;
          }
          if (*(_BYTE *)(v5 + 48))
          {
            if (*(_BYTE *)(v10 + 48))
              *(_QWORD *)(v5 + 56) = *(_QWORD *)(v10 + 56);
            else
              *(_BYTE *)(v5 + 48) = 0;
          }
          else if (*(_BYTE *)(v10 + 48))
          {
            *(_QWORD *)(v5 + 56) = *(_QWORD *)(v10 + 56);
            *(_BYTE *)(v5 + 48) = 1;
          }
          v15 = *(_DWORD *)(v10 + 64);
          *(_BYTE *)(v5 + 68) = *(_BYTE *)(v10 + 68);
          *(_DWORD *)(v5 + 64) = v15;
          if (v7 < v9)
            break;
          v16 = (2 * v9) | 1;
          v10 = v6 + 72 * v16;
          v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            v9 = v16;
          }
          else if (sub_10024F20C(v6 + 72 * v16, v10 + 72))
          {
            v10 += 72;
          }
          else
          {
            v9 = v16;
          }
          result = sub_10024F20C(v10, (uint64_t)&v19);
          v5 = v13;
        }
        while (!result);
        v17 = v20;
        *(_OWORD *)v13 = v19;
        *(_OWORD *)(v13 + 16) = v17;
        if (*(_BYTE *)(v13 + 32))
        {
          if (v21)
            *(_QWORD *)(v13 + 40) = v22;
          else
            *(_BYTE *)(v13 + 32) = 0;
        }
        else if (v21)
        {
          *(_QWORD *)(v13 + 40) = v22;
          *(_BYTE *)(v13 + 32) = 1;
        }
        if (*(_BYTE *)(v13 + 48))
        {
          if (v23)
            *(_QWORD *)(v13 + 56) = v24;
          else
            *(_BYTE *)(v13 + 48) = 0;
        }
        else if (v23)
        {
          *(_QWORD *)(v13 + 56) = v24;
          *(_BYTE *)(v13 + 48) = 1;
        }
        v18 = v25;
        *(_BYTE *)(v13 + 68) = v26;
        *(_DWORD *)(v13 + 64) = v18;
      }
    }
  }
  return result;
}

uint64_t sub_101190958(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  int v18;

  if (a4 >= 2)
  {
    v8 = result;
    v9 = *(unsigned __int8 *)(result + 32);
    if (*(_BYTE *)(result + 32))
      v5 = *(_QWORD *)(result + 40);
    v10 = *(unsigned __int8 *)(result + 48);
    if (*(_BYTE *)(result + 48))
      v4 = *(_QWORD *)(result + 56);
    v12 = *(_QWORD *)result;
    v11 = *(_QWORD *)(result + 8);
    v14 = *(_QWORD *)(result + 16);
    v13 = *(_QWORD *)(result + 24);
    v15 = *(_DWORD *)(result + 64);
    v16 = *(_BYTE *)(result + 68);
    result = sub_101190BA4(result, a3, a4);
    if (result == a2 - 72)
    {
      *(_QWORD *)result = v12;
      *(_QWORD *)(result + 8) = v11;
      *(_QWORD *)(result + 16) = v14;
      *(_QWORD *)(result + 24) = v13;
      if (*(_BYTE *)(result + 32))
      {
        if (v9)
          *(_QWORD *)(result + 40) = v5;
        else
          *(_BYTE *)(result + 32) = 0;
      }
      else if (v9)
      {
        *(_QWORD *)(result + 40) = v5;
        *(_BYTE *)(result + 32) = 1;
      }
      if (*(_BYTE *)(result + 48))
      {
        if (v10)
          *(_QWORD *)(result + 56) = v4;
        else
          *(_BYTE *)(result + 48) = 0;
      }
      else if (v10)
      {
        *(_QWORD *)(result + 56) = v4;
        *(_BYTE *)(result + 48) = 1;
      }
      *(_DWORD *)(result + 64) = v15;
      *(_BYTE *)(result + 68) = v16;
    }
    else
    {
      v17 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)result = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(result + 16) = v17;
      if (*(_BYTE *)(result + 32))
      {
        if (*(_BYTE *)(a2 - 40))
          *(_QWORD *)(result + 40) = *(_QWORD *)(a2 - 32);
        else
          *(_BYTE *)(result + 32) = 0;
      }
      else if (*(_BYTE *)(a2 - 40))
      {
        *(_QWORD *)(result + 40) = *(_QWORD *)(a2 - 32);
        *(_BYTE *)(result + 32) = 1;
      }
      if (*(_BYTE *)(result + 48))
      {
        if (*(_BYTE *)(a2 - 24))
          *(_QWORD *)(result + 56) = *(_QWORD *)(a2 - 16);
        else
          *(_BYTE *)(result + 48) = 0;
      }
      else if (*(_BYTE *)(a2 - 24))
      {
        *(_QWORD *)(result + 56) = *(_QWORD *)(a2 - 16);
        *(_BYTE *)(result + 48) = 1;
      }
      v18 = *(_DWORD *)(a2 - 8);
      *(_BYTE *)(result + 68) = *(_BYTE *)(a2 - 4);
      *(_DWORD *)(result + 64) = v18;
      *(_QWORD *)(a2 - 72) = v12;
      *(_QWORD *)(a2 - 64) = v11;
      *(_QWORD *)(a2 - 56) = v14;
      *(_QWORD *)(a2 - 48) = v13;
      if (*(_BYTE *)(a2 - 40))
      {
        if (v9)
          *(_QWORD *)(a2 - 32) = v5;
        else
          *(_BYTE *)(a2 - 40) = 0;
      }
      else if (v9)
      {
        *(_QWORD *)(a2 - 32) = v5;
        *(_BYTE *)(a2 - 40) = 1;
      }
      if (*(_BYTE *)(a2 - 24))
      {
        if (v10)
          *(_QWORD *)(a2 - 16) = v4;
        else
          *(_BYTE *)(a2 - 24) = 0;
      }
      else if (v10)
      {
        *(_QWORD *)(a2 - 16) = v4;
        *(_BYTE *)(a2 - 24) = 1;
      }
      *(_DWORD *)(a2 - 8) = v15;
      *(_BYTE *)(a2 - 4) = v16;
      return sub_101190CD0(v8, result + 72, a3, 0x8E38E38E38E38E39 * ((result + 72 - v8) >> 3));
    }
  }
  return result;
}

uint64_t sub_101190BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    a1 += 72 * v5 + 72;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3 && sub_10024F20C(a1, a1 + 72))
    {
      a1 += 72;
      v5 = v10;
    }
    v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v8 = *(_OWORD *)a1;
    *(_OWORD *)(v8 + 16) = v11;
    if (*(_BYTE *)(v8 + 32))
    {
      if (*(_BYTE *)(a1 + 32))
        *(_QWORD *)(v8 + 40) = *(_QWORD *)(a1 + 40);
      else
        *(_BYTE *)(v8 + 32) = 0;
    }
    else if (*(_BYTE *)(a1 + 32))
    {
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(v8 + 32) = 1;
    }
    if (*(_BYTE *)(v8 + 48))
    {
      if (*(_BYTE *)(a1 + 48))
        *(_QWORD *)(v8 + 56) = *(_QWORD *)(a1 + 56);
      else
        *(_BYTE *)(v8 + 48) = 0;
    }
    else if (*(_BYTE *)(a1 + 48))
    {
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a1 + 56);
      *(_BYTE *)(v8 + 48) = 1;
    }
    v12 = *(_DWORD *)(a1 + 64);
    *(_BYTE *)(v8 + 68) = *(_BYTE *)(a1 + 68);
    *(_DWORD *)(v8 + 64) = v12;
  }
  while (v5 <= v7);
  return a1;
}

BOOL sub_101190CD0(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;

  if (a4 >= 2)
  {
    v5 = result;
    v6 = (unint64_t)(a4 - 2) >> 1;
    v7 = result + 72 * v6;
    v8 = a2 - 72;
    result = sub_10024F20C(v7, a2 - 72);
    if (result)
    {
      v9 = *(_OWORD *)(a2 - 56);
      v15 = *(_OWORD *)(a2 - 72);
      v16 = v9;
      v17 = 0;
      if (*(_BYTE *)(a2 - 40))
      {
        v18 = *(_QWORD *)(a2 - 32);
        v17 = 1;
      }
      v19 = 0;
      if (*(_BYTE *)(a2 - 24))
      {
        v20 = *(_QWORD *)(a2 - 16);
        v19 = 1;
      }
      v21 = *(_DWORD *)(a2 - 8);
      v22 = *(_BYTE *)(a2 - 4);
      do
      {
        v10 = v7;
        v11 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)v8 = *(_OWORD *)v7;
        *(_OWORD *)(v8 + 16) = v11;
        if (*(_BYTE *)(v8 + 32))
        {
          if (*(_BYTE *)(v7 + 32))
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(v7 + 40);
          else
            *(_BYTE *)(v8 + 32) = 0;
        }
        else if (*(_BYTE *)(v7 + 32))
        {
          *(_QWORD *)(v8 + 40) = *(_QWORD *)(v7 + 40);
          *(_BYTE *)(v8 + 32) = 1;
        }
        if (*(_BYTE *)(v8 + 48))
        {
          if (*(_BYTE *)(v7 + 48))
            *(_QWORD *)(v8 + 56) = *(_QWORD *)(v7 + 56);
          else
            *(_BYTE *)(v8 + 48) = 0;
        }
        else if (*(_BYTE *)(v7 + 48))
        {
          *(_QWORD *)(v8 + 56) = *(_QWORD *)(v7 + 56);
          *(_BYTE *)(v8 + 48) = 1;
        }
        v13 = (_DWORD *)(v7 + 64);
        v12 = *(_DWORD *)(v7 + 64);
        *(_BYTE *)(v8 + 68) = *(_BYTE *)(v7 + 68);
        *(_DWORD *)(v8 + 64) = v12;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = v5 + 72 * v6;
        result = sub_10024F20C(v7, (uint64_t)&v15);
        v8 = v10;
      }
      while (result);
      v14 = v16;
      *(_OWORD *)v10 = v15;
      *(_OWORD *)(v10 + 16) = v14;
      if (*(_BYTE *)(v10 + 32))
      {
        if (v17)
          *(_QWORD *)(v10 + 40) = v18;
        else
          *(_BYTE *)(v10 + 32) = 0;
      }
      else if (v17)
      {
        *(_QWORD *)(v10 + 40) = v18;
        *(_BYTE *)(v10 + 32) = 1;
      }
      if (*(_BYTE *)(v10 + 48))
      {
        if (v19)
          *(_QWORD *)(v10 + 56) = v20;
        else
          *(_BYTE *)(v10 + 48) = 0;
      }
      else if (v19)
      {
        *(_QWORD *)(v10 + 56) = v20;
        *(_BYTE *)(v10 + 48) = 1;
      }
      *v13 = v21;
      *(_BYTE *)(v10 + 68) = v22;
    }
  }
  return result;
}

void sub_101190F1C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_101190FB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_101190FD0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10119105C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_101191074()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C43614;
      v1[3] = unk_101C43624;
      v1[4] = xmmword_101C43634;
      v1[0] = xmmword_101C435F4;
      v1[1] = unk_101C43604;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101191148(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_101191160()
{
  sub_1015A2E04(&qword_10230D1E0, "IndoorLocationProvider");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230D1E0, (void *)&_mh_execute_header);
}

int8x8_t sub_1011913E8(unsigned __int16 *a1, uint64_t a2)
{
  int8x8_t result;

  *(_WORD *)(a2 + 2) = bswap32(a1[1]) >> 16;
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  result = vrev32_s8(*(int8x8_t *)(a1 + 2));
  *(int8x8_t *)(a2 + 4) = result;
  return result;
}

int8x16_t sub_101191418(unsigned __int16 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int8x16_t result;
  unsigned int v12;
  unint64_t v13;

  v2 = *(_OWORD *)a1;
  v3 = *((_OWORD *)a1 + 1);
  v4 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  v5 = *((_OWORD *)a1 + 4);
  v6 = *((_OWORD *)a1 + 5);
  v7 = *((_OWORD *)a1 + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  v8 = *((_OWORD *)a1 + 8);
  v9 = *((_OWORD *)a1 + 9);
  v10 = *((_OWORD *)a1 + 10);
  *(_OWORD *)(a2 + 172) = *(_OWORD *)(a1 + 86);
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 160) = v10;
  *(_OWORD *)(a2 + 128) = v8;
  *(_WORD *)(a2 + 2) = bswap32(a1[1]) >> 16;
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  *(int8x16_t *)(a2 + 20) = vrev32q_s8(*(int8x16_t *)(a1 + 10));
  result = vrev32q_s8(*(int8x16_t *)(a1 + 2));
  *(int8x16_t *)(a2 + 4) = result;
  v12 = bswap32(*((_DWORD *)a1 + 44));
  v13 = bswap64(*((_QWORD *)a1 + 5));
  *(_DWORD *)(a2 + 36) = bswap32(*((_DWORD *)a1 + 9));
  *(_DWORD *)(a2 + 176) = v12;
  *(_QWORD *)(a2 + 40) = v13;
  return result;
}

uint64_t sub_1011914B0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  double v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  NSObject *v21;
  double v22;
  int v23;
  void **v24;
  uint64_t v25;
  void **p_p;
  uint64_t v28;
  double v29;
  int v30;
  void **v31;
  uint64_t v32;
  void **v33;
  char *v34;
  char *v35;
  void *v36[2];
  char v37;
  void *__p;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  uint64_t v54;
  uint8_t buf[4];
  int v56;
  __int16 v57;
  _BOOL4 v58;
  __int16 v59;
  _BOOL4 v60;
  __int16 v61;
  _BOOL4 v62;
  __int16 v63;
  _BOOL4 v64;
  __int16 v65;
  _BOOL4 v66;
  __int16 v67;
  _BOOL4 v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  uint64_t v72;

  v8 = *(double *)(a2 + 76);
  v9 = *(double *)(a2 + 20);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) / 20.0;
  v11 = fmin(fmax(v10, (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) / 20.0), 0.01);
  v12 = *(double *)(a2 + 4);
  v13 = v12 - sub_1001C087C(a1 + 48);
  v14 = *(double *)(a2 + 12);
  v15 = v14 - sub_1001C0858(a1 + 48);
  v16 = v13 >= -v11 && v13 <= v11 + (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v17 = a4 - v8;
  v18 = v15 >= -v11 && v15 <= v11 + (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v19 = v17 < a3 && v9 > 0.0;
  if (v19 && *(double *)(a2 + 20) <= 3000.0)
    v20 = v16 & v18;
  else
    v20 = 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A4908);
  v21 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(double *)(a2 + 20);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1);
    v23 = SBYTE1(v44);
    v24 = (void **)__p;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    *(_DWORD *)buf = 67242243;
    v56 = v20;
    p_p = &__p;
    v57 = 1026;
    if (v23 < 0)
      p_p = v24;
    v58 = v16;
    v59 = 1026;
    v60 = v18;
    v61 = 1026;
    v62 = v19;
    v63 = 1026;
    v64 = v9 > 0.0;
    v65 = 1026;
    v66 = v17 < a3;
    v67 = 1026;
    v68 = v22 <= 3000.0;
    v69 = 2081;
    v70 = p_p;
    v71 = 2050;
    v72 = v25;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "@TileDl, isCurrent, %{public}d, inside, %{public}d, %{public}d, locknown, %{public}d, %{public}d, %{public}d, %{public}d, tile, %{private}s, delta, %{public}.02f", buf, 0x40u);
    if (SBYTE1(v44) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A4908);
    v28 = qword_1022A0048;
    v29 = *(double *)(a2 + 20);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v36, a1);
    v30 = v37;
    v31 = (void **)v36[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    LODWORD(__p) = 67242243;
    HIDWORD(__p) = v20;
    v33 = v36;
    v39 = 1026;
    if (v30 < 0)
      v33 = v31;
    v40 = v16;
    v41 = 1026;
    v42 = v18;
    v43 = 1026;
    v44 = v19;
    v45 = 1026;
    v46 = v9 > 0.0;
    v47 = 1026;
    v48 = v17 < a3;
    v49 = 1026;
    v50 = v29 <= 3000.0;
    v51 = 2081;
    v52 = v33;
    v53 = 2050;
    v54 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "@TileDl, isCurrent, %{public}d, inside, %{public}d, %{public}d, locknown, %{public}d, %{public}d, %{public}d, %{public}d, tile, %{private}s, delta, %{public}.02f", &__p, 64);
    v35 = v34;
    if (v37 < 0)
      operator delete(v36[0]);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTilesManagerUtility::isCurrentTile(const CLTileFile *, CFTimeInterval, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
  return v20;
}

void sub_10119190C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_101191944(uint64_t a1, double a2)
{
  return a2 - *(double *)(a1 + 76) <= 1800.0 && *(double *)(a1 + 20) > 0.0;
}

uint64_t sub_10119196C(int a1, unsigned int a2)
{
  if (a1)
    return 1;
  else
    return a2;
}

void sub_101191978(int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  *a2 = 0;
  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
    case 7:
    case 8:
      operator new();
    case 9:
      operator new();
    case 10:
      operator new();
    case 11:
      operator new();
    case 12:
      operator new();
    case 13:
      sub_101943708();
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManagerUtility.mm", 193, "allocateTile");
      __break(1u);
      goto LABEL_23;
    default:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A4908);
      v2 = &qword_1022A0000;
      v4 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v10 = a1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TileMgr, failed to allocate a tile for type, %{public}d, #CloneMe", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
LABEL_23:
        dispatch_once(&qword_1022A0040, &stru_1021A4908);
      v5 = v2[9];
      v8[0] = 67240192;
      v8[1] = a1;
      LODWORD(v7) = 8;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "TileMgr, failed to allocate a tile for type, %{public}d, #CloneMe", v8, v7);
      sub_100512490("Generic", 1, 0, 0, "static std::unique_ptr<CLTileFile> CLTilesManagerUtility::allocateTile(CLTilesManager_Type::TileType, CLTileDownloadPolicy *)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
      return;
  }
}

void sub_101191D44(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_101191E6C(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  void *__p[2];
  _BYTE v35[25];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;

  v2 = atomic_load((unsigned __int8 *)&qword_10230D280);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230D280))
  {
    sub_100FB8498("([0-9]{8})", (const void **)&unk_10230D228, __p);
    sub_100F8F6B0((std::locale *)&unk_10230D240, (uint64_t)__p, 0);
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  *(_OWORD *)__p = 0u;
  memset(v35, 0, sizeof(v35));
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a1;
  else
    v4 = *(_QWORD *)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if ((sub_100F95128(v4, v4 + v3, (uint64_t)__p, (uint64_t)&unk_10230D240, 0) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = sub_100FBFA90();
    v8 = *(char *)(a1 + 23);
    v9 = v8 < 0;
    if (v8 >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v9)
      v11 = *(_QWORD *)(a1 + 8);
    v12 = *((char *)v7 + 23);
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = v7;
    else
      v14 = (_QWORD *)*v7;
    v15 = *((unsigned __int8 *)v7 + 23);
    if (v13)
      v15 = v7[1];
    v16 = v10 - 1;
    v17 = (char *)v14 - 1;
    while (v11 && v15)
    {
      v18 = *(unsigned __int8 *)(v16 + v11);
      v19 = v17[v15];
      --v11;
      --v15;
      if (v18 != v19)
        goto LABEL_25;
    }
    if (!v15)
    {
LABEL_42:
      v6 = 0;
      v5 = 0;
      goto LABEL_43;
    }
LABEL_25:
    v20 = sub_100FA2F60();
    v21 = *(char *)(a1 + 23);
    v22 = v21 < 0;
    if (v21 >= 0)
      v23 = a1;
    else
      v23 = *(_QWORD *)a1;
    v24 = *(unsigned __int8 *)(a1 + 23);
    if (v22)
      v24 = *(_QWORD *)(a1 + 8);
    v25 = *((char *)v20 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = v20;
    else
      v27 = (_QWORD *)*v20;
    v28 = *((unsigned __int8 *)v20 + 23);
    if (v26)
      v28 = v20[1];
    v29 = v23 - 1;
    v30 = (char *)v27 - 1;
    while (v24 && v28)
    {
      v31 = *(unsigned __int8 *)(v29 + v24);
      v32 = v30[v28];
      --v24;
      --v28;
      if (v31 != v32)
        goto LABEL_41;
    }
    if (!v28)
      goto LABEL_42;
LABEL_41:
    v6 = 0;
    v5 = 1;
  }
LABEL_43:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6 | (v5 << 8);
}

void sub_10119206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_10230D280);
  _Unwind_Resume(a1);
}

BOOL sub_1011920B4(uint64_t a1, const void **a2)
{
  unsigned __int16 v4;
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = sub_101191E6C(a1);
  if (v4 < 0x100u)
    return v4 != 0;
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v15;
  sub_100259584((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a1;
  else
    v10 = *(const std::string::value_type **)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v12 = std::string::append(&v15, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  sub_1005164F0((const char *)v14);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1011921D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101192204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  NSObject *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  __int128 __p;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  _BYTE v44[12];
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  _BYTE buf[12];
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;

  v38 = *(_OWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v41 = *(_QWORD *)(a1 + 88);
  }
  v6 = (uint64_t **)(a2 + 184);
  if (!sub_1001C0618(a2 + 184, (unsigned int *)&v38))
    goto LABEL_39;
  v7 = sub_1001C85FC(a2 + 184, (unsigned int *)&v38);
  v8 = v7;
  v9 = *(unsigned __int8 *)(v7 + 31);
  if ((v9 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v7 + 31);
  else
    v10 = *(_QWORD *)(v7 + 16);
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a1 + 16);
  if (v10 != v11)
    goto LABEL_20;
  v13 = (const void **)(v7 + 8);
  v16 = *(unsigned __int8 **)(a1 + 8);
  v15 = (unsigned __int8 *)(a1 + 8);
  v14 = v16;
  if (v12 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v17, *(_QWORD *)(v7 + 16)))
    {
LABEL_20:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A4908);
      v18 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a2 + 31) >= 0)
          v19 = a2 + 8;
        else
          v19 = *(_QWORD *)(a2 + 8);
        v20 = sub_1001C087C((uint64_t)&v38);
        v21 = sub_1001C0858((uint64_t)&v38);
        v22 = sub_100026CC8(a2 + 184);
        *(_DWORD *)buf = 136447235;
        *(_QWORD *)&buf[4] = v19;
        v54 = 2049;
        v55 = v20;
        v56 = 2049;
        v57 = v21;
        v58 = 2082;
        v59 = a3;
        v60 = 2050;
        v61 = v22;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "@TileList, %{public}s, duplicate, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A4908);
        v25 = qword_1022A0048;
        v28 = *(_QWORD *)(a2 + 8);
        v27 = a2 + 8;
        v26 = v28;
        if (*(char *)(v27 + 23) < 0)
          v27 = v26;
        v29 = sub_1001C087C((uint64_t)&v38);
        v30 = sub_1001C0858((uint64_t)&v38);
        v31 = sub_100026CC8((uint64_t)v6);
        *(_DWORD *)v44 = 136447235;
        *(_QWORD *)&v44[4] = v27;
        v45 = 2049;
        v46 = v29;
        v47 = 2049;
        v48 = v30;
        v49 = 2082;
        v50 = a3;
        v51 = 2050;
        v52 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 1, "@TileList, %{public}s, duplicate, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", v44, 52, v38, v39);
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "static void CLTilesManagerUtility::deleteIfDuplicate(CLTileFile *, CLTilesSet &, const char *)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      sub_100FA2CE0(v8);
      goto LABEL_38;
    }
  }
  else if (*(_BYTE *)(v7 + 31))
  {
    while (*(unsigned __int8 *)v13 == *v17)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v17;
      if (!--v9)
        goto LABEL_29;
    }
    goto LABEL_20;
  }
LABEL_29:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A4908);
  v23 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(buf, v8);
    v24 = v56 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v44 = 136380675;
    *(_QWORD *)&v44[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe", v44, 0xCu);
    if (SHIBYTE(v56) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A4908);
    v34 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(v44, v8);
    if (v47 >= 0)
      v35 = v44;
    else
      v35 = *(_BYTE **)v44;
    v42 = 136380675;
    v43 = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 16, "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe", &v42, 12, v38, v39, __p, v41);
    v37 = v36;
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)v44);
    sub_100512490("Generic", 1, 0, 0, "static void CLTilesManagerUtility::deleteIfDuplicate(CLTileFile *, CLTilesSet &, const char *)", "%s\n", v37);
    if (v37 != buf)
      free(v37);
  }
LABEL_38:
  sub_1008B92E4(v6, (unsigned int *)&v38);
LABEL_39:
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__p);
}

void sub_101192750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101192794(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1011927C0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_101192828()
{
  sub_1015A2E04(qword_10230D228, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D228, (void *)&_mh_execute_header);
}

uint64_t sub_10119286C()
{
  uint64_t result;

  result = sub_10024095C();
  if (result)
  {
    result = sub_10021C350();
    if (result)
      operator new();
  }
  return result;
}

void sub_1011928F8()
{
  operator delete();
}

_QWORD *sub_101192920(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021A4978;
  v2 = a1[10];
  a1[10] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1009BAD18(a1);
}

void sub_101192964(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021A4978;
  v2 = a1[10];
  a1[10] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1009BAD18(a1);
  operator delete();
}

float sub_1011929BC(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v2;
  float v3;
  __int32 v4;
  int v5;
  __int16 v6;
  float result;

  v2 = *a2;
  *(float64x2_t *)(a1 + 16) = vcvtq_f64_f32(a2[1]);
  v3 = a2[2].f32[1];
  *(double *)(a1 + 32) = a2[2].f32[0];
  *(float32x2_t *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 40) = a2[3].i32[0];
  *(_DWORD *)(a1 + 44) = a2[3].i32[1];
  *(_DWORD *)(a1 + 48) = a2[4].i32[0];
  *(_DWORD *)(a1 + 52) = a2[4].i32[1];
  *(_DWORD *)(a1 + 56) = a2[5].i32[0];
  *(_DWORD *)(a1 + 60) = a2[5].i32[1];
  *(_DWORD *)(a1 + 64) = a2[6].i32[0];
  *(_DWORD *)(a1 + 68) = a2[6].i32[1];
  v4 = a2[7].i32[1];
  *(_DWORD *)(a1 + 72) = a2[7].i32[0];
  *(_WORD *)(a1 + 110) = 0;
  v5 = a2[10].i8[0];
  if ((v5 + 1) >= 8)
    v5 = 0;
  *(_DWORD *)(a1 + 76) = v5;
  v6 = a2[10].i16[1];
  *(_BYTE *)(a1 + 81) = (v6 & 0x10) != 0;
  *(_BYTE *)(a1 + 80) = (v6 & 8) != 0;
  *(_BYTE *)(a1 + 82) = HIBYTE(v6) & 1;
  *(_DWORD *)(a1 + 84) = v4;
  *(_BYTE *)(a1 + 88) = (v6 & 0x4000) != 0;
  *(_BYTE *)(a1 + 89) = (v6 & 0x40) != 0;
  result = a2[8].f32[0];
  *(float *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 100) = a2[11].i8[0];
  *(_WORD *)(a1 + 110) = v6;
  *(_BYTE *)(a1 + 108) = a2[10].i8[1];
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_101192A94(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (a1 > 18)
  {
    if (a1 > 66)
    {
      if (a1 == 67)
        return 10;
      if (a1 == 143)
        return 4;
    }
    else
    {
      if (a1 == 19)
        return 5;
      if (a1 == 34)
        return 9;
    }
  }
  else if (a1 > 6)
  {
    if (a1 == 7)
      return 2;
    if (a1 == 15)
      return 3;
  }
  else
  {
    if (a1 == 2)
      return 0;
    if (a1 == 3)
      return 1;
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v3 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "No viable conversion for mode %{public}#x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v6[0] = 67240192;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "No viable conversion for mode %{public}#x", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "static CLDeviceMotion::CLDeviceMotionNotification CLDeviceMotion::CLMotionTypeDeviceMotionModeToCLDeviceMotionNotification(const CLMotionTypeDeviceMotionMode)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 11;
}

uint64_t sub_101192CD8(unsigned int a1)
{
  NSObject *v2;
  _BOOL4 v3;
  uint64_t result;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  if (a1 < 0xB && ((0x63Fu >> a1) & 1) != 0)
    return dword_101C43840[a1];
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "No viable conversion for notification %{public}#x", buf, 8u);
  }
  v3 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v7[0] = 67240192;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "No viable conversion for notification %{public}#x", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "static CLMotionTypeDeviceMotionMode CLDeviceMotion::CLDeviceMotionNotificationToCLMotionTypeDeviceMotionMode(const int)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_101192EAC(uint64_t a1, int *a2)
{
  int v3;
  BOOL v4;
  NSObject *v5;
  int v6;
  _BOOL4 v7;
  uint64_t result;
  int v9;
  const char *v10;
  NSObject *v11;
  int v12;
  _BOOL4 v13;
  int v14;
  NSObject *v15;
  int v16;
  _BOOL4 v17;
  int v18;
  uint8_t *v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;

  v3 = *a2;
  v4 = (*a2 - 7) > 0x3C || ((1 << (*a2 - 7)) & 0x1000000008001101) == 0;
  if (v4 && (v3 - 2) >= 2 && v3 != 143)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v15 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      v16 = *a2;
      *(_DWORD *)buf = 67240192;
      v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Returning.", buf, 8u);
    }
    v17 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v17)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021A49C0);
      v18 = *a2;
      LODWORD(v20[0]) = 67240192;
      HIDWORD(v20[0]) = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Unsupported mode (%{public}d). Returning.", v20, 8, v20[0]);
      goto LABEL_38;
    }
    return result;
  }
  if ((v3 & 4) == 0)
    goto LABEL_11;
  if (sub_1000A5944())
  {
    v3 = *a2;
LABEL_11:
    if ((v3 & 2) != 0)
      return 1;
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v5 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      v6 = *a2;
      *(_DWORD *)buf = 67240192;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Couldn't do DeviceMotion without Gyro. Returning.", buf, 8u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021A49C0);
      v9 = *a2;
      LODWORD(v20[0]) = 67240192;
      HIDWORD(v20[0]) = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Unsupported mode (%{public}d). Couldn't do DeviceMotion without Gyro. Returning.", v20, 8, v20[0]);
LABEL_38:
      v19 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLDeviceMotion::isModeValid(const CLMotionTypeDeviceMotionMode &) const", "%s\n", v10);
      if (v19 != buf)
        free(v19);
      return 0;
    }
    return result;
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v11 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
  {
    v12 = *a2;
    *(_DWORD *)buf = 67240192;
    v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Compass not found. Returning.", buf, 8u);
  }
  v13 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v14 = *a2;
    LODWORD(v20[0]) = 67240192;
    HIDWORD(v20[0]) = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Unsupported mode (%{public}d). Compass not found. Returning.", v20, 8, v20[0]);
    goto LABEL_38;
  }
  return result;
}

void sub_1011932BC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  _QWORD v7[7];

  v6 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101193330;
  v7[3] = &unk_102143548;
  v7[4] = a1;
  v7[5] = a2;
  *(double *)&v7[6] = a3;
  sub_1000A50A8(v6, (uint64_t)v7);
}

uint64_t sub_101193330(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  if (v4)
  {
    v1 = (void *)v4;
    if (qword_10229FD20 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_1019438CC(qword_10229FD20 == -1);
  }
  dispatch_once(&qword_10229FD20, &stru_1021A49C0);
LABEL_3:
  v5 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v15 = objc_msgSend(objc_msgSend(v1, "description"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v9 = qword_10229FD28;
    v12 = 136446210;
    v13 = objc_msgSend(objc_msgSend(v1, "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %{public}s", &v12, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotion::addDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v6 = objc_msgSend(v1, "mode");
  *(_DWORD *)buf = (_DWORD)v6;
  result = sub_101192EAC((uint64_t)v6, (int *)buf);
  if ((_DWORD)result)
  {
    v8 = sub_101192A94((int)objc_msgSend(v1, "mode"));
    return sub_1000A4FD8(v3, v8, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
  }
  return result;
}

void sub_101193558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1011935BC;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  sub_1000A50A8(v4, (uint64_t)v5);
}

void sub_1011935BC(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  if (v4)
  {
    v1 = (void *)v4;
    if (qword_10229FD20 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101943A44(qword_10229FD20 == -1);
  }
  dispatch_once(&qword_10229FD20, &stru_1021A49C0);
LABEL_3:
  v5 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v14 = objc_msgSend(objc_msgSend(v1, "description"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v8 = qword_10229FD28;
    v11 = 136446210;
    v12 = objc_msgSend(objc_msgSend(v1, "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %{public}s", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotion::removeDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *)_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = objc_msgSend(v1, "mode");
  *(_DWORD *)buf = (_DWORD)v6;
  if (sub_101192EAC((uint64_t)v6, (int *)buf))
  {
    v7 = sub_101192A94((int)objc_msgSend(v1, "mode"));
    sub_1000A4A6C(v3, v7, *(_QWORD *)(a1 + 40));
  }
}

BOOL sub_1011937E0(uint64_t a1, int *a2)
{
  _BOOL8 result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = 0;
  v4 = *a2;
  if (*a2 > 18)
  {
    if (v4 <= 66)
    {
      if (v4 == 19)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (!v5)
          return 0;
      }
      else
      {
        if (v4 != 34)
          return result;
        v5 = *(_QWORD *)(a1 + 48);
        if (!v5)
          return 0;
      }
LABEL_30:
      v7 = *(_QWORD *)(v5 + 56) == 0;
      return !v7;
    }
    if (v4 == 67)
    {
LABEL_19:
      v5 = *(_QWORD *)(a1 + 64);
      if (!v5)
        return 0;
      goto LABEL_30;
    }
    if (v4 != 143)
      return result;
LABEL_16:
    v6 = *(_QWORD *)(a1 + 72);
    if (!v6 || !*(_QWORD *)(v6 + 56))
      return 0;
    v7 = *(_BYTE *)(a1 + 28) == 0;
    return !v7;
  }
  if (v4 <= 6)
  {
    if (v4 == 2)
    {
      if ((sub_1001B7910() & 0x80) != 0)
      {
        v5 = *(_QWORD *)(a1 + 56);
        if (!v5)
          return 0;
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 40);
        if (!v5)
          return 0;
      }
      goto LABEL_30;
    }
    if (v4 != 3)
      return result;
    goto LABEL_19;
  }
  if (v4 == 7)
  {
    v8 = *(_QWORD *)(a1 + 72);
    if (v8 && *(_QWORD *)(v8 + 56))
      return *(_BYTE *)(a1 + 28) == 0;
    return 0;
  }
  if (v4 == 15)
    goto LABEL_16;
  return result;
}

void sub_1011938F4(_QWORD *a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[18];
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  _BYTE buf[22];
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    v7 = *a3;
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLDeviceMotion::minimumUpdateIntervalChanged,notification,%{public}d,minimumUpdateInterval,%{public}f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v29 = *a3;
    v44 = 67240448;
    *(_DWORD *)v45 = a2;
    *(_WORD *)&v45[4] = 2050;
    *(_QWORD *)&v45[6] = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "CLDeviceMotion::minimumUpdateIntervalChanged,notification,%{public}d,minimumUpdateInterval,%{public}f", &v44, 18);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v8 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    v9 = sub_1009BB6A0((uint64_t)a1, 0);
    v10 = sub_1009BB6A0((uint64_t)a1, 9);
    v11 = sub_1009BB6A0((uint64_t)a1, 1);
    v12 = sub_1009BB6A0((uint64_t)a1, 10);
    v13 = sub_1009BB6A0((uint64_t)a1, 2);
    v14 = sub_1009BB6A0((uint64_t)a1, 3);
    v15 = sub_1009BB6A0((uint64_t)a1, 4);
    v16 = sub_1009BB6A0((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(double *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v10;
    v59 = 2050;
    v60 = v11;
    v61 = 2050;
    v62 = v12;
    v63 = 2050;
    v64 = v13;
    v65 = 2050;
    v66 = v14;
    v67 = 2050;
    v68 = v15;
    v69 = 2050;
    v70 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "minimumUpdateInterval GyroOnly:%{public}f, 3AxisDynamicGyro:%{public}f, 6Axis:%{public}f, 6AxisThrottledGyro:%{public}f, 9Axis:%{public}f, 9AxisWithNorthReference:%{public}f, 9AxisWithTrueNorthReference:%{public}f, BuildGYTT:%{public}f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v32 = qword_10229FD28;
    v33 = sub_1009BB6A0((uint64_t)a1, 0);
    v34 = sub_1009BB6A0((uint64_t)a1, 9);
    v35 = sub_1009BB6A0((uint64_t)a1, 1);
    v36 = sub_1009BB6A0((uint64_t)a1, 10);
    v37 = sub_1009BB6A0((uint64_t)a1, 2);
    v38 = sub_1009BB6A0((uint64_t)a1, 3);
    v39 = sub_1009BB6A0((uint64_t)a1, 4);
    v40 = sub_1009BB6A0((uint64_t)a1, 5);
    v44 = 134350848;
    *(double *)v45 = v33;
    *(_WORD *)&v45[8] = 2050;
    *(double *)&v45[10] = v34;
    v46 = 2050;
    v47 = v35;
    v48 = 2050;
    v49 = v36;
    v50 = 2050;
    v51 = v37;
    v52 = 2050;
    v53 = v38;
    v54 = 2050;
    v55 = v39;
    v56 = 2050;
    v57 = v40;
    LODWORD(v43) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "minimumUpdateInterval GyroOnly:%{public}f, 3AxisDynamicGyro:%{public}f, 6Axis:%{public}f, 6AxisThrottledGyro:%{public}f, 9Axis:%{public}f, 9AxisWithNorthReference:%{public}f, 9AxisWithTrueNorthReference:%{public}f, BuildGYTT:%{public}f", &v44, v43);
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  switch(a2)
  {
    case 0:
      v27 = a1[7];
      if (v27)
      {
        *(_QWORD *)buf = sub_1009BB6A0((uint64_t)a1, 0);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 16))(v27, buf);
      }
      v28 = a1[5];
      if (v28)
        goto LABEL_47;
      break;
    case 1:
    case 10:
      if (a1[8])
      {
        v23 = sub_1009BB6A0((uint64_t)a1, 1);
        v24 = sub_1009BB6A0((uint64_t)a1, 10);
        if (v23 <= 0.0)
          v25 = 1.79769313e308;
        else
          v25 = v23;
        if (v24 <= 0.0)
          v24 = 1.79769313e308;
        if (v24 >= v25)
          v24 = v25;
        if (v24 == 1.79769313e308)
          v24 = 0.0;
        *(double *)buf = v24;
        v22 = a1[8];
        goto LABEL_39;
      }
      break;
    case 2:
    case 3:
    case 4:
      if (a1[9])
      {
        v17 = sub_1009BB6A0((uint64_t)a1, 2);
        v18 = sub_1009BB6A0((uint64_t)a1, 3);
        if (v17 <= 0.0)
          v19 = 1.79769313e308;
        else
          v19 = v17;
        if (v18 <= 0.0)
          v18 = 1.79769313e308;
        if (v18 >= v19)
          v20 = v19;
        else
          v20 = v18;
        v21 = sub_1009BB6A0((uint64_t)a1, 4);
        if (v21 <= 0.0)
          v21 = 1.79769313e308;
        if (v21 >= v20)
          v21 = v20;
        if (v21 == 1.79769313e308)
          v21 = 0.0;
        *(double *)buf = v21;
        v22 = a1[9];
LABEL_39:
        v26 = *(void (**)(void))(*(_QWORD *)v22 + 16);
        goto LABEL_48;
      }
      break;
    case 5:
      v28 = a1[4];
      if (v28)
        goto LABEL_47;
      break;
    case 9:
      v28 = a1[6];
      if (v28)
      {
LABEL_47:
        v26 = *(void (**)(void))(*(_QWORD *)v28 + 16);
LABEL_48:
        v26();
      }
      break;
    default:
      return;
  }
}

void sub_101193F34(_QWORD *a1, unsigned int a2, unint64_t a3, unint64_t a4)
{
  __objc2_class *v7;
  __objc2_class *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  NSObject *superclass;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  __objc2_class *v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v48;
  _BYTE v49[28];
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint8_t buf[4];
  _BYTE v61[28];
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;

  v7 = DefaultObserver;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v8 = DefaultObserver;
  v9 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)v61 = a2;
    *(_WORD *)&v61[4] = 2050;
    *(_QWORD *)&v61[6] = a3;
    *(_WORD *)&v61[14] = 2050;
    *(_QWORD *)&v61[16] = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLDeviceMotion::numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v48 = 67240704;
    *(_DWORD *)v49 = a2;
    *(_WORD *)&v49[4] = 2050;
    *(_QWORD *)&v49[6] = a3;
    *(_WORD *)&v49[14] = 2050;
    *(_QWORD *)&v49[16] = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "CLDeviceMotion::numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", &v48, 28);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v10 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    v46 = sub_1009BB308((uint64_t)a1, 0);
    v11 = sub_1009BB308((uint64_t)a1, 9);
    v12 = sub_1009BB308((uint64_t)a1, 1);
    v13 = sub_1009BB308((uint64_t)a1, 10);
    v14 = sub_1009BB308((uint64_t)a1, 2);
    v15 = a4;
    v16 = a2;
    v17 = sub_1009BB308((uint64_t)a1, 3);
    v18 = sub_1009BB308((uint64_t)a1, 4);
    v19 = sub_1009BB308((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(_QWORD *)v61 = v46;
    *(_WORD *)&v61[8] = 2050;
    *(_QWORD *)&v61[10] = v11;
    *(_WORD *)&v61[18] = 2050;
    *(_QWORD *)&v61[20] = v12;
    v62 = 2050;
    v63 = v13;
    v64 = 2050;
    v65 = v14;
    v8 = DefaultObserver;
    v66 = 2050;
    v67 = v17;
    a2 = v16;
    a4 = v15;
    v68 = 2050;
    v69 = v18;
    v7 = DefaultObserver;
    v70 = 2050;
    v71 = v19;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "numberOfClients GyroOnly:%{public}zd, 3AxisDynamicGyro:%{public}zd, 6Axis:%{public}zd, 6AxisThrottledGyro:%{public}zd, 9Axis:%{public}zd, 9AxisWithNorthReference:%{public}zd, 9AxisWithTrueNorthReference:%{public}zd, BuildGYTT:%{public}zd", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v45 = a2;
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v30 = qword_10229FD28;
    v31 = sub_1009BB308((uint64_t)a1, 0);
    v32 = sub_1009BB308((uint64_t)a1, 9);
    v33 = sub_1009BB308((uint64_t)a1, 1);
    v34 = sub_1009BB308((uint64_t)a1, 10);
    v35 = sub_1009BB308((uint64_t)a1, 2);
    v36 = sub_1009BB308((uint64_t)a1, 3);
    v37 = sub_1009BB308((uint64_t)a1, 4);
    v38 = sub_1009BB308((uint64_t)a1, 5);
    v48 = 134350848;
    *(_QWORD *)v49 = v31;
    *(_WORD *)&v49[8] = 2050;
    *(_QWORD *)&v49[10] = v32;
    *(_WORD *)&v49[18] = 2050;
    *(_QWORD *)&v49[20] = v33;
    v50 = 2050;
    v51 = v34;
    v52 = 2050;
    v53 = v35;
    v54 = 2050;
    v55 = v36;
    v56 = 2050;
    v57 = v37;
    v58 = 2050;
    v59 = v38;
    LODWORD(v44) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 1, "numberOfClients GyroOnly:%{public}zd, 3AxisDynamicGyro:%{public}zd, 6Axis:%{public}zd, 6AxisThrottledGyro:%{public}zd, 9Axis:%{public}zd, 9AxisWithNorthReference:%{public}zd, 9AxisWithTrueNorthReference:%{public}zd, BuildGYTT:%{public}zd", &v48, v44);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
    a2 = v45;
    v7 = DefaultObserver;
    v8 = DefaultObserver;
  }
  if (a2 == 10)
    v20 = 1;
  else
    v20 = a2;
  v21 = sub_1009BB308((uint64_t)a1, 2);
  v22 = sub_1009BB308((uint64_t)a1, 3);
  v23 = sub_1009BB308((uint64_t)a1, 4);
  v24 = sub_1001B7910();
  if (v20 > 9)
    goto LABEL_34;
  if (((1 << v20) & 0x223) != 0)
  {
    if (!a3 && a4 == 1)
    {
      *(_DWORD *)buf = sub_101192CD8(v20);
      sub_101194A70((uint64_t)a1, (int *)buf);
      return;
    }
LABEL_25:
    if (a3 != 1 || a4)
      return;
LABEL_33:
    *(_DWORD *)buf = sub_101192CD8(v20);
    sub_101195148(a1, (int *)buf);
    return;
  }
  v25 = v24;
  if (((1 << v20) & 0xC) != 0)
    goto LABEL_20;
  if (v20 != 4)
  {
LABEL_34:
    if (v7[84].isa != (__objc2_class *)-1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    superclass = v8[84].superclass;
    if (os_log_type_enabled(superclass, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v61 = a2;
      _os_log_impl((void *)&_mh_execute_header, superclass, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, can't process client change", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v7[84].isa != (__objc2_class *)-1)
        dispatch_once(&qword_10229FD20, &stru_1021A49C0);
      v41 = v8[84].superclass;
      v48 = 67240192;
      *(_DWORD *)v49 = a2;
      LODWORD(v44) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 17, "Device motion mode (%{public}d) not supported, can't process client change", &v48, v44);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    return;
  }
  if (a3 || a4 != 1)
  {
    if (a3 == 1 && !a4)
      sub_1011948BC((uint64_t)a1);
  }
  else
  {
    sub_1011946B8((uint64_t)a1);
  }
LABEL_20:
  v26 = v22 + v21 + v23;
  if (a3 >= a4)
  {
    if (v26 != ((v25 & 0x10) == 0))
      return;
    goto LABEL_33;
  }
  if (v26 == 1)
  {
    *(_DWORD *)buf = sub_101192CD8(v20);
    sub_101194A70((uint64_t)a1, (int *)buf);
  }
  if (!*(_QWORD *)(a1[9] + 56))
  {
    sub_101943BBC();
    goto LABEL_25;
  }
}

id sub_1011946B8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 80))
  {
    sub_100128CC8();
    sub_100D790A4();
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Registering for geomagnetic model updates", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotion::registerForGeomagneticModelNotification()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 80) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), 0, 0);
}

double sub_1011948BC(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 80))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v2 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021A49C0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Unregistering for geomagnetic model updates", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotion::unregisterForGeomagneticModelNotification()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 80) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), 0);
    result = -1.0;
    *(_OWORD *)(a1 + 88) = xmmword_101BAFC90;
  }
  return result;
}

void sub_101194A70(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  _DWORD v29[2];
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  unsigned int v39;
  uint8_t buf[8];
  std::__shared_weak_count *v41;
  unsigned int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unsigned int v48;

  v4 = *a2;
  if ((*a2 & 4) != 0)
    *(_BYTE *)(a1 + 28) = (*a2 & 8) != 0;
  v5 = v4 & 1;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v6 = v4 & 2;
  v7 = v4 & 4;
  v8 = v4 & 0x10;
  v9 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *a2;
    v11 = *(unsigned __int8 *)(a1 + 28);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = v10;
    LOWORD(v41) = 1026;
    *(_DWORD *)((char *)&v41 + 2) = v5;
    HIWORD(v41) = 1026;
    v42 = v6 >> 1;
    v43 = 1026;
    v44 = v7 >> 2;
    v45 = 1026;
    v46 = v11;
    v47 = 1026;
    v48 = v8 >> 4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Starting device motion, mode=%{public}#x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d", buf, 0x26u);
  }
  v12 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v25 = *a2;
    v26 = *(unsigned __int8 *)(a1 + 28);
    v29[0] = 67241472;
    v29[1] = v25;
    v30 = 1026;
    v31 = v5;
    v32 = 1026;
    v33 = v6 >> 1;
    v34 = 1026;
    v35 = v7 >> 2;
    v36 = 1026;
    v37 = v26;
    v38 = 1026;
    v39 = v8 >> 4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Starting device motion, mode=%{public}#x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d", v29, 38);
    v28 = (uint8_t *)v27;
    v12 = sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotion::enableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  if (!sub_101192EAC(v12, a2))
    return;
  LOBYTE(v29[0]) = 0;
  v13 = sub_100127B9C();
  sub_100081C10(v13, buf);
  v14 = sub_1001E4874(*(uint64_t *)buf, "LogSensorFusion", (BOOL *)v29);
  v15 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((v14 & 1) == 0)
    LOBYTE(v29[0]) = 0;
  v18 = *a2;
  if (*a2 > 18)
  {
    if (v18 <= 66)
    {
      if (v18 == 19)
      {
        v19 = *(_QWORD **)(a1 + 32);
        if (!v19)
          operator new();
      }
      else
      {
        if (v18 != 34)
          return;
        v19 = *(_QWORD **)(a1 + 48);
        if (!v19)
          operator new();
        v19[9] = sub_101195520;
        v19[10] = a1;
      }
      goto LABEL_51;
    }
    if (v18 == 67)
      goto LABEL_35;
    if (v18 != 143)
      return;
LABEL_32:
    v20 = *(_QWORD *)(a1 + 72);
    if (!v20)
    {
      if ((sub_1001B7910() & 0x10) == 0)
        operator new();
      operator new();
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 24))(v20, *(unsigned __int8 *)(a1 + 28));
    v22 = *(_QWORD *)(a1 + 72);
    v23 = sub_101192A94(*a2);
    *(_QWORD *)buf = sub_1009BB6A0(a1, v23);
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v22 + 16))(v22, buf);
    v19 = *(_QWORD **)(a1 + 72);
    goto LABEL_51;
  }
  if (v18 > 6)
  {
    if (v18 != 7 && v18 != 15)
      return;
    goto LABEL_32;
  }
  if (v18 != 2)
  {
    if (v18 != 3)
      return;
LABEL_35:
    v21 = *(_QWORD *)(a1 + 64);
    if (!v21)
    {
      if ((sub_1001B7910() & 8) == 0)
      {
        if ((sub_1001B7910() & 0x10) == 0)
          operator new();
        operator new();
      }
      operator new();
    }
    v24 = sub_101192A94(*a2);
    *(_QWORD *)buf = sub_1009BB6A0(a1, v24);
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v21 + 16))(v21, buf);
    v19 = *(_QWORD **)(a1 + 64);
LABEL_51:
    if ((void (*)(float32x2_t *, uint64_t, uint64_t))v19[7] != sub_10119550C || v19[8] != a1)
    {
      v19[7] = sub_10119550C;
      v19[8] = a1;
      (*(void (**)(_QWORD *))(*v19 + 48))(v19);
    }
    return;
  }
  if ((sub_1001B7910() & 0x80) != 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      operator new();
  }
  else if (!*(_QWORD *)(a1 + 40))
  {
    operator new();
  }
}

void sub_10119509C()
{
  operator delete();
}

void sub_101195148(_QWORD *a1, int *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopping device motion, mode=%{public}#x", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v14 = *a2;
    v18 = 67240192;
    v19 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Stopping device motion, mode=%{public}#x", &v18, 8);
    v16 = (uint8_t *)v15;
    v6 = sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (sub_101192EAC(v6, a2))
  {
    v7 = *a2;
    if (*a2 <= 18)
    {
      if (v7 <= 6)
      {
        if (v7 != 2)
        {
          if (v7 != 3)
            goto LABEL_19;
          goto LABEL_33;
        }
        sub_100197040();
        if ((sub_1001B7910() & 0x80) != 0)
        {
          v8 = a1[7];
          if (!v8)
            return;
        }
        else
        {
          v8 = a1[5];
          if (!v8)
            return;
        }
LABEL_31:
        sub_101195534(v8);
        return;
      }
      if (v7 != 7 && v7 != 15)
        goto LABEL_19;
LABEL_30:
      v8 = a1[9];
      if (!v8)
        return;
      goto LABEL_31;
    }
    if (v7 > 66)
    {
      if (v7 == 67)
      {
LABEL_33:
        v8 = a1[8];
        if (!v8)
          return;
        goto LABEL_31;
      }
      if (v7 == 143)
        goto LABEL_30;
    }
    else
    {
      if (v7 == 19)
      {
        v8 = a1[4];
        if (!v8)
          return;
        goto LABEL_31;
      }
      if (v7 == 34)
      {
        v8 = a1[6];
        if (!v8)
          return;
        goto LABEL_31;
      }
    }
LABEL_19:
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v9 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      v10 = *a2;
      *(_DWORD *)buf = 67240192;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to disable sensor fusion", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021A49C0);
      v11 = *a2;
      v18 = 67240192;
      v19 = v11;
      LODWORD(v17) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Device motion mode (%{public}d) not supported, unable to disable sensor fusion", &v18, v17);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10119550C(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  sub_101195608(a3, a1, a2);
}

uint64_t sub_101195520(uint64_t a1, uint64_t a2)
{
  return sub_10014C2F4(a2, 6, a1, 8);
}

__n128 sub_101195534(uint64_t a1)
{
  float32x4_t v2;
  __int128 v3;
  __n128 result;
  unint64_t v5;
  float32x4_t v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[28];
  _BYTE v10[20];

  *(double *)v2.i64 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = 0uLL;
  v5 = 0xBFF0000000000000;
  sub_10012C97C(&v6, v2);
  *(_DWORD *)v9 = 0;
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)&v9[4] = xmmword_101BB2F90;
  *(_QWORD *)&v9[20] = 0x1FF00000000;
  *(_DWORD *)v10 = 0;
  v10[4] = 0;
  *(_QWORD *)&v10[12] = 0;
  *(_QWORD *)(a1 + 96) = v5;
  if ((unint64_t *)(a1 + 96) != &v5)
    *(float32x4_t *)(a1 + 104) = v6;
  v3 = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 136) = v3;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 164) = *(_OWORD *)&v9[12];
  result = *(__n128 *)v10;
  *(_OWORD *)(a1 + 180) = *(_OWORD *)v10;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)&v10[16];
  return result;
}

void sub_101195608(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  float v8;
  _BYTE v9[8];
  _DWORD v10[28];

  sub_1011929BC((uint64_t)v9, a2);
  if (a3 <= 0xA)
  {
    if (((1 << a3) & 0x1C) != 0)
    {
      sub_10012AC18(a1, 2, (uint64_t)v9, 120);
      sub_10012AC18(a1, 3, (uint64_t)v9, 120);
      v7 = *(double *)(a1 + 88);
      if (v7 >= 0.0)
      {
        v8 = *(double *)(a1 + 96);
        sub_100A003B0((uint64_t)v10, v8, v7);
      }
      else
      {
        v10[22] = 1127481344;
      }
      v5 = a1;
      v6 = 4;
    }
    else if (((1 << a3) & 0x221) != 0)
    {
      v5 = a1;
      v6 = a3;
    }
    else
    {
      if (((1 << a3) & 0x402) == 0)
        return;
      sub_10012AC18(a1, 1, (uint64_t)v9, 120);
      v5 = a1;
      v6 = 10;
    }
    sub_10012AC18(v5, v6, (uint64_t)v9, 120);
  }
}

void sub_101195724(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (!*a2)
  {
    *(_QWORD *)(a4 + 96) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a4 + 88) = *(_QWORD *)(a3 + 56);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
    v5 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a4 + 88);
      v6 = *(_QWORD *)(a4 + 96);
      *(_DWORD *)buf = 134218240;
      v18 = v6;
      v19 = 2048;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received geomagnetic model, declination,%f,timestamp,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021A49C0);
      v9 = *(_QWORD *)(a4 + 88);
      v8 = *(_QWORD *)(a4 + 96);
      v13 = 134218240;
      v14 = v8;
      v15 = 2048;
      v16 = v9;
      LODWORD(v12) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Received geomagnetic model, declination,%f,timestamp,%f", COERCE_DOUBLE(&v13), v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "static void CLDeviceMotion::onGeomagneticModelNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_101195904(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_101195930(uint64_t a1, int a2)
{
  *(_QWORD *)sub_1004D02F8(a1, a2, 7, 1) = &off_1021A49F0;
  if ((sub_1001B7910() & 0x80) == 0)
  {
    sub_101943D3C();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorFusionServiceSPU.h", 67, "CLSensorFusionService3AxisSPU");
    __break(1u);
  }
}

void sub_1011959AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004D0338(v1);
  _Unwind_Resume(a1);
}

void sub_1011959C8(_QWORD *a1)
{
  sub_1004D0338(a1);
  operator delete();
}

void sub_1011959EC(_QWORD *a1, int a2)
{
  char v4;

  sub_100197040();
  v4 = sub_10076218C();
  sub_1004D02F8((uint64_t)a1, a2, 5, v4);
  *a1 = &off_1021A4A58;
  if ((sub_1001B7910() & 8) == 0)
  {
    sub_101943E9C();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorFusionServiceSPU.h", 57, "CLSensorFusionService6AxisSPU");
    __break(1u);
  }
}

void sub_101195A7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004D0338(v1);
  _Unwind_Resume(a1);
}

void sub_101195A94(uint64_t a1, int a2)
{
  *(_QWORD *)sub_1004D02F8(a1, a2, 4, 1) = &off_1021A4AC0;
  if ((sub_1001B7910() & 0x10) == 0)
  {
    sub_101943FFC();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorFusionServiceSPU.h", 46, "CLSensorFusionService9AxisSPU");
    __break(1u);
  }
}

void sub_101195B10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004D0338(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101195B3C(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != -72; i -= 24)
  {
    if (*(char *)(a1 + i + 71) < 0)
      operator delete(*(void **)(a1 + i + 48));
  }
  return a1;
}

void sub_101195CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006BCA04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101195CD4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char v6;
  char v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  double *v12;
  unint64_t v13;
  id v14;
  double *v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  _QWORD v24[3];
  _QWORD v25[3];
  int v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  _BYTE __p[12];
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;

  sub_1015A2E04(__p, "kCLConnectionMessageWorkoutEvent");
  v6 = sub_100FFB214(a1);
  v7 = v6;
  if (SHIBYTE(v35) < 0)
  {
    operator delete(*(void **)__p);
    if ((v7 & 1) == 0)
      return;
  }
  else if ((v6 & 1) == 0)
  {
    return;
  }
  v8 = objc_alloc_init((Class)NSMutableArray);
  v9 = a3[6];
  if (a3[7] != v9)
  {
    v10 = a3[9];
    v11 = (_QWORD *)(v9 + 8 * (v10 / 0x11));
    v12 = (double *)(*v11 + 232 * (v10 % 0x11));
    v13 = *(_QWORD *)(v9 + 8 * ((a3[10] + v10) / 0x11)) + 232 * ((a3[10] + v10) % 0x11);
    while (v12 != (double *)v13)
    {
      v14 = sub_10119B41C(v12, 1);
      objc_msgSend(v8, "addObject:", v14);

      v12 += 29;
      if ((double *)((char *)v12 - *v11) == (double *)3944)
      {
        v15 = (double *)v11[1];
        ++v11;
        v12 = v15;
      }
    }
  }
  v16 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a3);
  v17 = objc_msgSend(objc_alloc((Class)CMWorkoutOverview), "initWithOverviewId:workouts:", v16, v8);
  v18 = sub_10119B41C((double *)a2, 0);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
  v19 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)__p = 134218498;
    *(_QWORD *)&__p[4] = v20;
    v33 = 2112;
    v34 = v18;
    v35 = 2112;
    v36 = v17;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WorkoutSession, session update, event, %ld, workout, %@, overview, %@", __p, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v21 = *(_QWORD *)(a2 + 16);
    v26 = 134218498;
    v27 = v21;
    v28 = 2112;
    v29 = v18;
    v30 = 2112;
    v31 = v17;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, session update, event, %ld, workout, %@, overview, %@", &v26, 32);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::onWorkoutSessionUpdate(CLMotionStateMediator_Type::WorkoutEvent, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v22);
    if (v23 != __p)
      free(v23);
  }
  v24[0] = CMReturnCode;
  v25[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a2 + 16));
  v25[1] = v17;
  v24[1] = CMWorkoutOverviewData;
  v24[2] = CMWorkoutAttributes;
  v25[2] = v18;
  *(_QWORD *)__p = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 3);
  sub_10119C864(a1, __p);

}

void sub_101196074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011960C4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_1021A4B28;
  v5[6] = 0;
  v5[42] = 0;
  v5[43] = 0;
  v5[41] = 0;
  v5[7] = 0;
  v5[8] = 0;
  sub_1006CB5B4();
}

void sub_10119625C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v5;

  if (*(char *)(v1 + 351) < 0)
    operator delete(*v3);
  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100261F44(v2);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_1011962AC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWorkoutSubscription::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A4BD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWorkoutSubscription::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A4BD8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWorkoutSubscription::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10119BE7C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101196464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101196484(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *v12[2];
  __int128 v13;
  void *v14[4];
  void *v15[2];
  void *__p[2];
  __int128 v17;
  uint64_t v18;

  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    objc_msgSend(v4, "clientName");
  }
  else
  {
    v18 = 0;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    *(_OWORD *)v8 = 0u;
  }
  sub_1001A8D50((uint64_t)v8);
  if (SHIBYTE(v14[3]) >= 0)
    v5 = (void *)HIBYTE(v14[3]);
  else
    v5 = v14[2];
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14[3]) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
  {
    operator delete(v8[0]);
    if (v5)
      goto LABEL_21;
LABEL_24:
    if (objc_msgSend(*(id *)(a1 + 24), "executablePath", v8[0], v8[1], v9[0]))
      v7 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "executablePath"), "UTF8String");
    else
      v7 = "";
    sub_1015A2E04((_QWORD *)a2, v7);
    return;
  }
  if (!v5)
    goto LABEL_24;
LABEL_21:
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    objc_msgSend(v6, "clientName");
  }
  else
  {
    v18 = 0;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    *(_OWORD *)v8 = 0u;
  }
  sub_1001A8D50((uint64_t)v8);
  if (SHIBYTE(v14[3]) < 0)
  {
    sub_100115CE4((_BYTE *)a2, v14[1], (unint64_t)v14[2]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v14[1];
    *(void **)(a2 + 16) = v14[3];
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14[3]) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
    operator delete(v8[0]);
}

void sub_10119668C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1011966A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021A4B28;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (sub_100304CA0((uint64_t)&unk_10230D2A8, (uint64_t)&qword_10230D2F0, (unsigned __int8 **)(a1 + 328))
     - (_QWORD)&unk_10230D2A8 != 72)
  {
    objc_msgSend(*(id *)(a1 + 80), "updateWorkoutReminderMuteSetting:mute:", 0, 0);
    objc_msgSend(*(id *)(a1 + 80), "updateWorkoutReminderMuteSetting:mute:", 1, 0);
    objc_msgSend(*(id *)(a1 + 80), "updateWorkoutReminderMuteSetting:mute:", 2, 0);
  }
  objc_msgSend(*(id *)(a1 + 80), "unregisterForWorkoutSessionUpdates:", *(_QWORD *)(a1 + 72));

  *(_QWORD *)(a1 + 80) = 0;
  objc_msgSend(*(id *)(a1 + 72), "setValid:", 0);

  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44(a1 + 48);
  return sub_10002FA68(a1);
}

void sub_1011967C0(uint64_t a1)
{
  sub_1011966A8(a1);
  operator delete();
}

_QWORD *sub_1011967E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t (**v49)();
  _QWORD v50[2];
  uint64_t (***v51)();
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73;
  _QWORD v74[3];
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;

  v52[0] = off_1021A4C48;
  v52[1] = sub_1011970C0;
  v52[2] = 0;
  v53 = v52;
  sub_1015A2E04(v54, "kCLConnectionMessageWorkoutEvent");
  sub_100BB93F4((uint64_t)&v55, (uint64_t)v52);
  v49 = off_1021A4CF8;
  v50[0] = sub_1011973AC;
  v50[1] = 0;
  v51 = &v49;
  sub_1015A2E04(v56, "kCLConnectionMessageSetWorkoutTimeout");
  sub_100BB93F4((uint64_t)&v57, (uint64_t)&v49);
  v47[0] = off_1021A4CF8;
  v47[1] = sub_10119785C;
  v47[2] = 0;
  v48 = v47;
  sub_1015A2E04(v58, "kCLConnectionMessageUserDismissedWorkoutAlert");
  sub_100BB93F4((uint64_t)&v59, (uint64_t)v47);
  v45[0] = off_1021A4CF8;
  v45[1] = sub_101197954;
  v45[2] = 0;
  v46 = v45;
  sub_1015A2E04(v60, "kCLConnectionMessageWorkoutPrompts");
  sub_100BB93F4((uint64_t)&v61, (uint64_t)v45);
  v43[0] = off_1021A4CF8;
  v43[1] = sub_101197B44;
  v43[2] = 0;
  v44 = v43;
  sub_1015A2E04(v62, "kCLConnectionMessageTriggerWorkoutLocationEventForTesting");
  sub_100BB93F4((uint64_t)&v63, (uint64_t)v43);
  v41[0] = off_1021A4CF8;
  v41[1] = sub_101197D84;
  v41[2] = 0;
  v42 = v41;
  sub_1015A2E04(v64, "kCLConnectionMessageBeginWorkoutSession");
  sub_100BB93F4((uint64_t)&v65, (uint64_t)v41);
  v39[0] = off_1021A4CF8;
  v39[1] = sub_101198DA0;
  v39[2] = 0;
  v40 = v39;
  sub_1015A2E04(v66, "kCLConnectionMessageEndWorkoutSession");
  sub_100BB93F4((uint64_t)&v67, (uint64_t)v39);
  v37[0] = off_1021A4CF8;
  v37[1] = sub_101199364;
  v37[2] = 0;
  v38 = v37;
  sub_1015A2E04(v68, "kCLConnectionMessageSetCurrentWorkoutType");
  sub_100BB93F4((uint64_t)&v69, (uint64_t)v37);
  v35[0] = off_1021A4CF8;
  v35[1] = sub_101199930;
  v35[2] = 0;
  v36 = v35;
  sub_1015A2E04(v70, "kCLConnectionMessagePauseWorkout");
  sub_100BB93F4((uint64_t)&v71, (uint64_t)v35);
  v33[0] = off_1021A4CF8;
  v33[1] = sub_101199EDC;
  v33[2] = 0;
  v34 = v33;
  sub_1015A2E04(v72, "kCLConnectionMessageResumeWorkout");
  sub_100BB93F4((uint64_t)&v73, (uint64_t)v33);
  v31[0] = off_1021A4CF8;
  v31[1] = sub_10119A488;
  v31[2] = 0;
  v32 = v31;
  sub_1015A2E04(v74, "kCLConnectionMessageWorkoutSnapshot");
  sub_100BB93F4((uint64_t)&v75, (uint64_t)v31);
  v29[0] = off_1021A4CF8;
  v29[1] = sub_10119A5FC;
  v29[2] = 0;
  v30 = v29;
  sub_1015A2E04(v76, "kCLConnectionMessageUpdateWorkoutReminderMuteSetting");
  sub_100BB93F4((uint64_t)&v77, (uint64_t)v29);
  sub_10119CE94(a1, (unsigned __int8 *)v54, 12);
  v2 = 84;
  do
  {
    v3 = (_QWORD *)v54[v2 - 1];
    if (&v52[v2] == v3)
    {
      v3 = &v52[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v51)[v2]) < 0)
      operator delete((void *)v50[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v30;
  if (v30 == v29)
  {
    v6 = 4;
    v5 = v29;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v30)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v32;
  if (v32 == v31)
  {
    v8 = 4;
    v7 = v31;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v32)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v34;
  if (v34 == v33)
  {
    v10 = 4;
    v9 = v33;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v34)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v36;
  if (v36 == v35)
  {
    v12 = 4;
    v11 = v35;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v36)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v38;
  if (v38 == v37)
  {
    v14 = 4;
    v13 = v37;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v38)
  {
    v14 = 5;
    goto LABEL_34;
  }
  v15 = v40;
  if (v40 == v39)
  {
    v16 = 4;
    v15 = v39;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  else if (v40)
  {
    v16 = 5;
    goto LABEL_39;
  }
  v17 = v42;
  if (v42 == v41)
  {
    v18 = 4;
    v17 = v41;
LABEL_44:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  else if (v42)
  {
    v18 = 5;
    goto LABEL_44;
  }
  v19 = v44;
  if (v44 == v43)
  {
    v20 = 4;
    v19 = v43;
LABEL_49:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v44)
  {
    v20 = 5;
    goto LABEL_49;
  }
  v21 = v46;
  if (v46 == v45)
  {
    v22 = 4;
    v21 = v45;
LABEL_54:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v46)
  {
    v22 = 5;
    goto LABEL_54;
  }
  v23 = v48;
  if (v48 == v47)
  {
    v24 = 4;
    v23 = v47;
LABEL_59:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v48)
  {
    v24 = 5;
    goto LABEL_59;
  }
  v25 = v51;
  if (v51 == &v49)
  {
    v26 = 4;
    v25 = &v49;
LABEL_64:
    (*v25)[v26]();
  }
  else if (v51)
  {
    v26 = 5;
    goto LABEL_64;
  }
  result = v53;
  if (v53 == v52)
  {
    v28 = 4;
    result = v52;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
  }
  else if (v53)
  {
    v28 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
  }
  return result;
}

void sub_101196D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,char *a33,char a34,uint64_t a35,uint64_t a36,char *a37,char a38,uint64_t a39,uint64_t a40,char *a41,char a42,uint64_t a43,uint64_t a44,char *a45,char a46,uint64_t a47,uint64_t a48,char *a49,char a50,uint64_t a51,uint64_t a52,char *a53,char a54,uint64_t a55,uint64_t a56,char *a57)
{
  uint64_t v57;
  uint64_t i;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;

  for (i = 616; i != -56; i -= 56)
    sub_1004E21A4(v57 + i);
  v60 = a13;
  if (a13 == &a10)
  {
    v61 = 4;
    v60 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_8:
  v62 = a17;
  if (a17 == &a14)
  {
    v63 = 4;
    v62 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
LABEL_13:
  v64 = a21;
  if (a21 == &a18)
  {
    v65 = 4;
    v64 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_18;
    v65 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_18:
  v66 = a25;
  if (a25 == &a22)
  {
    v67 = 4;
    v66 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_23;
    v67 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_23:
  v68 = a29;
  if (a29 == &a26)
  {
    v69 = 4;
    v68 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_28;
    v69 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
LABEL_28:
  v70 = a33;
  if (a33 == &a30)
  {
    v71 = 4;
    v70 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_33;
    v71 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
LABEL_33:
  v72 = a37;
  if (a37 == &a34)
  {
    v73 = 4;
    v72 = &a34;
  }
  else
  {
    if (!a37)
      goto LABEL_38;
    v73 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
LABEL_38:
  v74 = a41;
  if (a41 == &a38)
  {
    v75 = 4;
    v74 = &a38;
  }
  else
  {
    if (!a41)
      goto LABEL_43;
    v75 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
LABEL_43:
  v76 = a45;
  if (a45 == &a42)
  {
    v77 = 4;
    v76 = &a42;
  }
  else
  {
    if (!a45)
      goto LABEL_48;
    v77 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
LABEL_48:
  v78 = a49;
  if (a49 == &a46)
  {
    v79 = 4;
    v78 = &a46;
  }
  else
  {
    if (!a49)
      goto LABEL_53;
    v79 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v78 + 8 * v79))();
LABEL_53:
  v80 = a53;
  if (a53 == &a50)
  {
    v81 = 4;
    v80 = &a50;
  }
  else
  {
    if (!a53)
      goto LABEL_58;
    v81 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v80 + 8 * v81))();
LABEL_58:
  v82 = a57;
  if (a57 == &a54)
  {
    v83 = 4;
    v82 = &a54;
  }
  else
  {
    if (!a57)
      goto LABEL_63;
    v83 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
LABEL_63:
  _Unwind_Resume(a1);
}

void sub_101197068()
{
  JUMPOUT(0x101196EE8);
}

void sub_101197074()
{
  JUMPOUT(0x101196F18);
}

void sub_101197080()
{
  JUMPOUT(0x101196F48);
}

void sub_10119708C()
{
  JUMPOUT(0x101196F78);
}

void sub_101197098()
{
  JUMPOUT(0x101196FA8);
}

void sub_1011970A4()
{
  JUMPOUT(0x101196FD8);
}

void sub_1011970B0()
{
  JUMPOUT(0x101197008);
}

void sub_1011970C0(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  _UNKNOWN **v13;
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[8];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
  v5 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = a2;
    v20 = 2112;
    v21 = v6;
    v22 = 2048;
    v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Workout, event subscription changed, %d, %@, %p", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v7 = *(_QWORD *)(a1 + 24);
    v14[0] = 67109634;
    v14[1] = a2;
    v15 = 2112;
    v16 = v7;
    v17 = 2048;
    v18 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, event subscription changed, %d, %@, %p", v14, 28);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleRequestWorkoutEvent(BOOL, const CLNameValuePair &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if ((sub_1001BBC08(a1) & 1) != 0)
  {
    sub_100197040();
    if ((sub_1001B7910() & 0x100000000) != 0)
    {
      sub_1001A638C(a1);
    }
    else
    {
      v10 = CMErrorMessage;
      v11 = &off_10221CF20;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
      sub_10119AB00(a1, buf);
    }
  }
  else
  {
    v12 = CMErrorMessage;
    v13 = &off_10221CF08;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    sub_10119AB00(a1, buf);
  }

}

void sub_101197374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1011973AC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  CLConnectionMessage *v13;
  CLConnectionMessage *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  double v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint8_t buf[4];
  double v28;
  uint64_t v29;
  _UNKNOWN **v30;
  uint64_t v31;
  NSNumber *v32;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  HIDWORD(v20) = 0;
  v5 = sub_10119ABA0(a1, (int *)&v20 + 1);
  v6 = *a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v8 = Dictionary;
    if (Dictionary && (v9 = CMWorkoutTimeout, objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMWorkoutTimeout)))
    {
      objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "doubleValue");
      if (*(_QWORD *)(a1 + 48))
      {
        v11 = v10;
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v12 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v28 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Workout, setting workout timeout %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v23 = 134217984;
          v24 = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, setting workout timeout %f.", COERCE_DOUBLE(&v23));
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageSetWorkoutTimeout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        objc_msgSend(*(id *)(a1 + 80), "setWorkoutSuggestedStopTimeout:", v11);
        v13 = *a2;
        v21 = CMReturnCode;
        v22 = &__kCFBooleanTrue;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v15 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "No active workouts to set a timeout for!", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          LOWORD(v23) = 0;
          LODWORD(v20) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "No active workouts to set a timeout for!", &v23, v20);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageSetWorkoutTimeout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        v13 = *a2;
        v25 = CMErrorMessage;
        v26 = &off_10221CF50;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
      }
      CLConnectionMessage::sendReply(v13);
    }
    else
    {
      v14 = *a2;
      v29 = CMErrorMessage;
      v30 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
      CLConnectionMessage::sendReply(v14);
    }
  }
  else
  {
    v31 = CMErrorMessage;
    v32 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v20));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_101197824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10119785C(uint64_t a1)
{
  id v2;
  NSDictionary *v3;
  uint64_t v4;
  _UNKNOWN **v5;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1001BBC08(a1) & 1) != 0)
  {
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLMotionStateMediator")), "userDismissedWorkoutAlert");
  }
  else
  {
    v4 = CMErrorMessage;
    v5 = &off_10221CF08;
    v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
    sub_10119AB00(a1, &v3);
  }

}

void sub_101197928(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_101197954(uint64_t a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  NSNumber *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  NSNumber *v19;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v9 = 103;
  if ((sub_10119ABA0(a1, (int *)&v9) & 1) != 0)
  {
    v5 = sub_10119AC5C(a1) ^ 1;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A4C18);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2049;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Calibration prompt\", \"needed\":%{private}ld}", buf, 0x1Cu);
    }
    v7 = *a2;
    v10 = CMReturnCode;
    v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
    CLConnectionMessage::sendReply(v7);
  }
  else
  {
    v8 = *a2;
    v18 = CMErrorMessage;
    v19 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    CLConnectionMessage::sendReply(v8);
  }

}

void sub_101197B18(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_101197B44(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  CLConnectionMessage *v16;
  std::__shared_weak_count *v17;
  unsigned int v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint64_t v21;
  NSNumber *v22;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v18 = 0;
  v5 = sub_10119ABA0(a1, (int *)&v18);
  v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    v8 = Dictionary;
    if (Dictionary
      && (v9 = CMWorkoutTriggerWorkoutLocationEventForTesting,
          objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMWorkoutTriggerWorkoutLocationEventForTesting)))
    {
      objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "integerValue");
      v10 = *(void **)(*(_QWORD *)(a1 + 64) + 16);
      v11 = *(std::__shared_weak_count **)(a2 + 8);
      v17 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      objc_msgSend(v10, "triggerWorkoutLocationEventForTesting:withReply:");
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      v16 = *(CLConnectionMessage **)a2;
      v19 = CMErrorMessage;
      v20 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
      CLConnectionMessage::sendReply(v16);
    }
  }
  else
  {
    v21 = CMErrorMessage;
    v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_101197D44(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

void sub_101197D84(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unsigned int v15;
  NSObject *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v18;
  CLConnectionMessage *v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  void *i;
  void *v25;
  id v26;
  id v27;
  NSObject *v28;
  CLConnectionMessage *v29;
  NSObject *v30;
  uint64_t v31;
  void (**v32)(_BYTE *__return_ptr);
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  CLConnectionMessage *v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  void *j;
  double v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  CLConnectionMessage *v53;
  const char *v54;
  char *v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  const char *v64;
  char *v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  id v70;
  id v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  uint64_t v81;
  _UNKNOWN **v82;
  uint64_t v83;
  _UNKNOWN **v84;
  __int128 v85[5];
  _OWORD v86[10];
  uint64_t v87;
  _BYTE v88[128];
  _BYTE out[80];
  uint64_t v90;
  uuid_t uu;
  uint64_t v92;
  _UNKNOWN **v93;
  uint64_t v94;
  _UNKNOWN **v95;
  _BYTE v96[128];
  uint64_t v97;
  _UNKNOWN **v98;
  _BYTE buf[24];
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  uint64_t v103;
  _UNKNOWN **v104;
  uint64_t v105;
  NSNumber *v106;

  v71 = objc_alloc_init((Class)NSAutoreleasePool);
  v80 = 0;
  if ((sub_10119ABA0(a1, (int *)&v80) & 1) == 0)
  {
    v18 = *a2;
    v105 = CMErrorMessage;
    v106 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v80);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v106, &v105, 1);
    CLConnectionMessage::sendReply(v18);
    goto LABEL_15;
  }
  v5 = objc_opt_class(CMWorkoutOverview, v4);
  v7 = objc_opt_class(CMWorkout, v6);
  v9 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v7, objc_opt_class(NSString, v8), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  v11 = DictionaryOfClasses;
  if (!DictionaryOfClasses
    || (v12 = CMWorkoutAttributes, !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMWorkoutAttributes))
    || (v13 = CMWorkoutOverviewData, !objc_msgSend(v11, "objectForKeyedSubscript:", CMWorkoutOverviewData)))
  {
    v19 = *a2;
    v103 = CMErrorMessage;
    v104 = &off_10221CF38;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1);
    CLConnectionMessage::sendReply(v19);
    goto LABEL_15;
  }
  v14 = objc_msgSend(v11, "objectForKeyedSubscript:", v12);
  v70 = objc_msgSend(v11, "objectForKeyedSubscript:", v13);
  v15 = objc_msgSend(objc_msgSend(v11, "objectForKeyedSubscript:", CMWorkoutEnableWorkoutChangeDetection), "BOOLValue");
  if (v15 && (unint64_t)objc_msgSend(objc_msgSend(v70, "workouts"), "count") <= 1)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v16 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v70;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "WorkoutSession, client requested detection but no priors exist, %@, %@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      *(_DWORD *)out = 138412546;
      *(_QWORD *)&out[4] = v14;
      *(_WORD *)&out[12] = 2112;
      *(_QWORD *)&out[14] = v70;
      LODWORD(v68) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "WorkoutSession, client requested detection but no priors exist, %@, %@", out, v68);
      v57 = (char *)v56;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
    v17 = *a2;
    v97 = CMErrorMessage;
    v98 = &off_10221CF38;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1);
    CLConnectionMessage::sendReply(v17);
    goto LABEL_15;
  }
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v20 = objc_msgSend(v70, "workouts");
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v76, v96, 16);
  v69 = v15;
  v22 = 0;
  if (v21)
  {
    v23 = *(_QWORD *)v77;
    do
    {
      for (i = 0; i != v21; i = (char *)i + 1)
      {
        if (*(_QWORD *)v77 != v23)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
        v26 = objc_msgSend(v25, "type");
        if (v26 == objc_msgSend(v14, "type"))
        {
          v27 = objc_msgSend(v25, "locationType");
          v22 |= v27 == objc_msgSend(v14, "locationType");
        }
      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v76, v96, 16);
    }
    while (v21);
  }
  if (v69 && (v22 & 1) == 0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v28 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v70;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "WorkoutSession, workout overview doesn't include the current workout, %@, %@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      *(_DWORD *)out = 138412546;
      *(_QWORD *)&out[4] = v14;
      *(_WORD *)&out[12] = 2112;
      *(_QWORD *)&out[14] = v70;
      LODWORD(v68) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "WorkoutSession, workout overview doesn't include the current workout, %@, %@", out, v68);
      v55 = (char *)v54;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
    v29 = *a2;
    v94 = CMErrorMessage;
    v95 = &off_10221CF38;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v95, &v94, 1);
LABEL_40:
    CLConnectionMessage::sendReply(v29);
    goto LABEL_15;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v30 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      v31 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 2048;
      v100 = a1;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "WorkoutSession, duplicate session begin, %@, %@, %p", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v58 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)out = 138412802;
      *(_QWORD *)&out[4] = v14;
      *(_WORD *)&out[12] = 2112;
      *(_QWORD *)&out[14] = v58;
      *(_WORD *)&out[22] = 2048;
      *(_QWORD *)&out[24] = a1;
      LODWORD(v68) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, duplicate session begin, %@, %@, %p", out, v68);
      v60 = (char *)v59;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
    v29 = *a2;
    v92 = CMErrorMessage;
    v93 = &off_10221CF50;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v93, &v92, 1);
    goto LABEL_40;
  }
  v32 = (void (**)(_BYTE *__return_ptr))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 16), "syncgetActivityOverride");
  if (v32)
  {
    v32[2](buf);
  }
  else
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
  }
  sub_1002B7674(a1 + 48, (__int128 *)buf);
  v33 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v36 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v37 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)&buf[4] = v70;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2112;
      v100 = v37;
      v101 = 2048;
      v102 = a1;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "WorkoutSession, beginning session, overview, %@, workout, %@, %@, %p", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v61 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)out = 138413058;
      *(_QWORD *)&out[4] = v70;
      *(_WORD *)&out[12] = 2112;
      *(_QWORD *)&out[14] = v14;
      *(_WORD *)&out[22] = 2112;
      *(_QWORD *)&out[24] = v61;
      *(_WORD *)&out[32] = 2048;
      *(_QWORD *)&out[34] = a1;
      LODWORD(v68) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, beginning session, overview, %@, workout, %@, %@, %p", out, v68);
      v63 = (char *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    if (!uuid_is_null((const unsigned __int8 *)(a1 + 168)))
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a1 + 168), out);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v38 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = out;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "WorkoutSession, overviewId unitialized or already present when beginning a new session, clearing, prevOverviewId, %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = out;
        LODWORD(v68) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, overviewId unitialized or already present when beginning a new session, clearing, prevOverviewId, %{public}s", uu, v68);
        v67 = (char *)v66;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v66);
        if (v67 != buf)
          free(v67);
      }
    }
    memset(uu, 0, sizeof(uu));
    if (objc_msgSend(v70, "overviewId"))
      objc_msgSend(objc_msgSend(v70, "overviewId"), "getUUIDBytes:", uu);
    else
      uuid_clear(uu);
    v41 = a1 + 152;
    sub_10119B6C4(v14, uu, a1 + 152);
    v90 = 0;
    memset(&out[16], 0, 64);
    if (uuid_is_null((const unsigned __int8 *)(a1 + 168)))
    {
      uuid_clear(out);
    }
    else
    {
      uuid_copy(out, (const unsigned __int8 *)(a1 + 168));
      if (objc_msgSend(v14, "appId"))
      {
        sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(v14, "appId"), "UTF8String"));
        if ((out[39] & 0x80000000) != 0)
          operator delete(*(void **)&out[16]);
        *(_OWORD *)&out[16] = *(_OWORD *)buf;
        *(_QWORD *)&out[32] = *(_QWORD *)&buf[16];
        goto LABEL_77;
      }
    }
    std::string::assign((std::string *)&out[16], "");
LABEL_77:
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v42 = objc_msgSend(v70, "workouts");
    v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v72, v88, 16);
    if (v43)
    {
      v44 = *(_QWORD *)v73;
      do
      {
        for (j = 0; j != v43; j = (char *)j + 1)
        {
          if (*(_QWORD *)v73 != v44)
            objc_enumerationMutation(v42);
          sub_10119B6C4(*(void **)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)j), (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
          *(_QWORD *)&v46 = sub_10119BD1C(&out[40], (__int128 *)buf).n128_u64[0];
        }
        v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v72, v88, 16, v46);
      }
      while (v43);
    }
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    uuid_generate(buf);
    uuid_copy((unsigned __int8 *)(a1 + 184), buf);
    v47 = *(void **)(a1 + 80);
    v48 = *(_OWORD *)(v41 + 144);
    v86[8] = *(_OWORD *)(v41 + 128);
    v86[9] = v48;
    v87 = *(_QWORD *)(v41 + 160);
    v49 = *(_OWORD *)(v41 + 80);
    v86[4] = *(_OWORD *)(v41 + 64);
    v86[5] = v49;
    v50 = *(_OWORD *)(v41 + 112);
    v86[6] = *(_OWORD *)(v41 + 96);
    v86[7] = v50;
    v51 = *(_OWORD *)(v41 + 16);
    v86[0] = *(_OWORD *)v41;
    v86[1] = v51;
    v52 = *(_OWORD *)(v41 + 48);
    v86[2] = *(_OWORD *)(v41 + 32);
    v86[3] = v52;
    sub_10119BDF0((uint64_t)v85, (uint64_t)out);
    objc_msgSend(v47, "beginWorkoutSession:withOverview:enableWorkoutChangeDetection:", v86, sub_1006C3820(v85), v69);
    sub_1018C6C8C((uint64_t)v85);
    v53 = *a2;
    v83 = CMReturnCode;
    v84 = &off_10221CF80;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v84, &v83, 1);
    CLConnectionMessage::sendReply(v53);
    sub_1018C6C8C((uint64_t)out);
    goto LABEL_15;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
  v39 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "WorkoutSession, unable to begin session, another client has an active workout.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    *(_WORD *)out = 0;
    LODWORD(v68) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, unable to begin session, another client has an active workout.", out, v68);
    v65 = (char *)v64;
    sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v64);
    if (v65 != buf)
      free(v65);
  }
  v40 = *a2;
  v81 = CMErrorMessage;
  v82 = &off_10221CF50;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v82, &v81, 1);
  CLConnectionMessage::sendReply(v40);
LABEL_15:

}

void sub_101198CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_101198DA0(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  CLConnectionMessage *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v18;
  NSObject *v19;
  uint64_t v20;
  CLConnectionMessage *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _UNKNOWN **v31;
  _OWORD v32[10];
  uint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  int v36;
  id v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE buf[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _UNKNOWN **v53;
  uint64_t v54;
  NSNumber *v55;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v29 = 0;
  if ((sub_10119ABA0(a1, (int *)&v29) & 1) != 0)
  {
    v6 = objc_opt_class(CMWorkout, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (v11 = CMWorkoutAttributes, objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMWorkoutAttributes)))
    {
      v12 = objc_msgSend(v10, "objectForKeyedSubscript:", v11);
      if (*(_QWORD *)(a1 + 48))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v13 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WorkoutSession, ending session, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v22 = *(_QWORD *)(a1 + 48);
          v36 = 138412802;
          v37 = v12;
          v38 = 2048;
          v39 = v22;
          v40 = 2048;
          v41 = a1;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, ending session, %@, %p, %p", &v36, v28);
          v24 = (char *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageEndWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        sub_10119B6C4(v12, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        v15 = *(void **)(a1 + 80);
        v32[7] = v48;
        v32[8] = v49;
        v32[9] = v50;
        v33 = v51;
        v32[4] = v45;
        v32[5] = v46;
        v32[6] = v47;
        v32[0] = *(_OWORD *)buf;
        v32[1] = *(_OWORD *)&buf[16];
        v32[2] = v43;
        v32[3] = v44;
        objc_msgSend(v15, "endWorkoutSession:", v32);
        sub_100346F9C((_QWORD *)(a1 + 48));
        uuid_clear((unsigned __int8 *)(a1 + 168));
        v16 = *a2;
        v30 = CMReturnCode;
        v31 = &off_10221CF80;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
        CLConnectionMessage::sendReply(v16);
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v19 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
        {
          v20 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to stop, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v25 = *(_QWORD *)(a1 + 48);
          v36 = 138412802;
          v37 = v12;
          v38 = 2048;
          v39 = v25;
          v40 = 2048;
          v41 = a1;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, no active workouts to stop, requested, %@, %p, %p", &v36, v28);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageEndWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v21 = *a2;
        v34 = CMErrorMessage;
        v35 = &off_10221CF50;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
        CLConnectionMessage::sendReply(v21);
      }
    }
    else
    {
      v18 = *a2;
      v52 = CMErrorMessage;
      v53 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
      CLConnectionMessage::sendReply(v18);
    }
  }
  else
  {
    v17 = *a2;
    v54 = CMErrorMessage;
    v55 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
    CLConnectionMessage::sendReply(v17);
  }

}

void sub_101199324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101199364(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  void *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v18;
  CLConnectionMessage *v19;
  NSObject *v20;
  uint64_t v21;
  CLConnectionMessage *v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _UNKNOWN **v32;
  _OWORD v33[10];
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  int v37;
  id v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  _BYTE buf[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  NSNumber *v56;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v30 = 0;
  if ((sub_10119ABA0(a1, (int *)&v30) & 1) != 0)
  {
    v6 = objc_opt_class(CMWorkout, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (v11 = CMWorkoutAttributes, objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMWorkoutAttributes)))
    {
      v12 = objc_msgSend(v10, "objectForKeyedSubscript:", v11);
      if (*(_QWORD *)(a1 + 48))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v13 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WorkoutSession, setting current type, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v23 = *(_QWORD *)(a1 + 48);
          v37 = 138412802;
          v38 = v12;
          v39 = 2048;
          v40 = v23;
          v41 = 2048;
          v42 = a1;
          LODWORD(v29) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, setting current type, %@, %p, %p", &v37, v29);
          v25 = (char *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageSetCurrentWorkoutType(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        sub_10119B6C4(v12, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        v15 = objc_msgSend(objc_msgSend(v10, "objectForKeyedSubscript:", CMWorkoutIsManualTransition), "BOOLValue");
        v16 = *(void **)(a1 + 80);
        v33[7] = v49;
        v33[8] = v50;
        v33[9] = v51;
        v34 = v52;
        v33[4] = v46;
        v33[5] = v47;
        v33[6] = v48;
        v33[0] = *(_OWORD *)buf;
        v33[1] = *(_OWORD *)&buf[16];
        v33[2] = v44;
        v33[3] = v45;
        objc_msgSend(v16, "setCurrentWorkoutType:isManualTransition:", v33, v15);
        v17 = *a2;
        v31 = CMReturnCode;
        v32 = &off_10221CF80;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
        CLConnectionMessage::sendReply(v17);
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v20 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
        {
          v21 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v21;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to change, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v26 = *(_QWORD *)(a1 + 48);
          v37 = 138412802;
          v38 = v12;
          v39 = 2048;
          v40 = v26;
          v41 = 2048;
          v42 = a1;
          LODWORD(v29) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, no active workouts to change, requested, %@, %p, %p", &v37, v29);
          v28 = (char *)v27;
          sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageSetCurrentWorkoutType(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        v22 = *a2;
        v35 = CMErrorMessage;
        v36 = &off_10221CF50;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
        CLConnectionMessage::sendReply(v22);
      }
    }
    else
    {
      v19 = *a2;
      v53 = CMErrorMessage;
      v54 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1);
      CLConnectionMessage::sendReply(v19);
    }
  }
  else
  {
    v18 = *a2;
    v55 = CMErrorMessage;
    v56 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v30);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1);
    CLConnectionMessage::sendReply(v18);
  }

}

void sub_1011998EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101199930(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  CLConnectionMessage *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v18;
  NSObject *v19;
  uint64_t v20;
  CLConnectionMessage *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _UNKNOWN **v31;
  _OWORD v32[10];
  uint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  int v36;
  id v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE buf[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _UNKNOWN **v53;
  uint64_t v54;
  NSNumber *v55;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v29 = 0;
  if ((sub_10119ABA0(a1, (int *)&v29) & 1) != 0)
  {
    v6 = objc_opt_class(CMWorkout, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (v11 = CMWorkoutAttributes, objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMWorkoutAttributes)))
    {
      v12 = objc_msgSend(v10, "objectForKeyedSubscript:", v11);
      if (*(_QWORD *)(a1 + 48))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v13 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WorkoutSession, pausing workout, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v22 = *(_QWORD *)(a1 + 48);
          v36 = 138412802;
          v37 = v12;
          v38 = 2048;
          v39 = v22;
          v40 = 2048;
          v41 = a1;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, pausing workout, %@, %p, %p", &v36, v28);
          v24 = (char *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessagePauseWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        sub_10119B6C4(v12, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        v15 = *(void **)(a1 + 80);
        v32[7] = v48;
        v32[8] = v49;
        v32[9] = v50;
        v33 = v51;
        v32[4] = v45;
        v32[5] = v46;
        v32[6] = v47;
        v32[0] = *(_OWORD *)buf;
        v32[1] = *(_OWORD *)&buf[16];
        v32[2] = v43;
        v32[3] = v44;
        objc_msgSend(v15, "pauseWorkout:", v32);
        v16 = *a2;
        v30 = CMReturnCode;
        v31 = &off_10221CF80;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
        CLConnectionMessage::sendReply(v16);
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v19 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
        {
          v20 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to pause, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v25 = *(_QWORD *)(a1 + 48);
          v36 = 138412802;
          v37 = v12;
          v38 = 2048;
          v39 = v25;
          v40 = 2048;
          v41 = a1;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, no active workouts to pause, requested, %@, %p, %p", &v36, v28);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessagePauseWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v21 = *a2;
        v34 = CMErrorMessage;
        v35 = &off_10221CF50;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
        CLConnectionMessage::sendReply(v21);
      }
    }
    else
    {
      v18 = *a2;
      v52 = CMErrorMessage;
      v53 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
      CLConnectionMessage::sendReply(v18);
    }
  }
  else
  {
    v17 = *a2;
    v54 = CMErrorMessage;
    v55 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
    CLConnectionMessage::sendReply(v17);
  }

}

void sub_101199E9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101199EDC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  CLConnectionMessage *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v18;
  NSObject *v19;
  uint64_t v20;
  CLConnectionMessage *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _UNKNOWN **v31;
  _OWORD v32[10];
  uint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  int v36;
  id v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE buf[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _UNKNOWN **v53;
  uint64_t v54;
  NSNumber *v55;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v29 = 0;
  if ((sub_10119ABA0(a1, (int *)&v29) & 1) != 0)
  {
    v6 = objc_opt_class(CMWorkout, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (v11 = CMWorkoutAttributes, objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMWorkoutAttributes)))
    {
      v12 = objc_msgSend(v10, "objectForKeyedSubscript:", v11);
      if (*(_QWORD *)(a1 + 48))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v13 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WorkoutSession, resuming workout, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v22 = *(_QWORD *)(a1 + 48);
          v36 = 138412802;
          v37 = v12;
          v38 = 2048;
          v39 = v22;
          v40 = 2048;
          v41 = a1;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, resuming workout, %@, %p, %p", &v36, v28);
          v24 = (char *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageResumeWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        sub_10119B6C4(v12, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        v15 = *(void **)(a1 + 80);
        v32[7] = v48;
        v32[8] = v49;
        v32[9] = v50;
        v33 = v51;
        v32[4] = v45;
        v32[5] = v46;
        v32[6] = v47;
        v32[0] = *(_OWORD *)buf;
        v32[1] = *(_OWORD *)&buf[16];
        v32[2] = v43;
        v32[3] = v44;
        objc_msgSend(v15, "resumeWorkout:", v32);
        v16 = *a2;
        v30 = CMReturnCode;
        v31 = &off_10221CF80;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
        CLConnectionMessage::sendReply(v16);
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v19 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
        {
          v20 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to resume, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v25 = *(_QWORD *)(a1 + 48);
          v36 = 138412802;
          v37 = v12;
          v38 = 2048;
          v39 = v25;
          v40 = 2048;
          v41 = a1;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "WorkoutSession, no active workouts to resume, requested, %@, %p, %p", &v36, v28);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageResumeWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v21 = *a2;
        v34 = CMErrorMessage;
        v35 = &off_10221CF50;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
        CLConnectionMessage::sendReply(v21);
      }
    }
    else
    {
      v18 = *a2;
      v52 = CMErrorMessage;
      v53 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
      CLConnectionMessage::sendReply(v18);
    }
  }
  else
  {
    v17 = *a2;
    v54 = CMErrorMessage;
    v55 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
    CLConnectionMessage::sendReply(v17);
  }

}

void sub_10119A448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10119A488(uint64_t a1, uint64_t *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  unsigned int v15;
  uint64_t v16;
  NSNumber *v17;

  v15 = 0;
  if ((sub_10119ABA0(a1, (int *)&v15) & 1) != 0)
  {
    v4 = *(void **)(a1 + 80);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768;
    v13[2] = sub_10119B1A0;
    v13[3] = &unk_1021A4B78;
    v6 = *a2;
    v5 = (std::__shared_weak_count *)a2[1];
    v13[4] = a1;
    v13[5] = v6;
    v14 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    objc_msgSend(v4, "workoutSnapshotWithReply:", v13);
    v9 = v14;
    if (v14)
    {
      v10 = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = *a2;
    v16 = CMErrorMessage;
    v17 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    CLConnectionMessage::sendReply(v12);
  }
}

void sub_10119A5E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

id sub_10119A5FC(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  _QWORD *v5;
  char v6;
  CLConnectionMessage *v7;
  void *Dictionary;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  NSObject *v15;
  _QWORD *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v19;
  _QWORD *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _UNKNOWN **v27;
  int v28;
  _QWORD *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  NSNumber *v37;
  uint8_t buf[4];
  _QWORD *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  int v43;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136315138;
    v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Workout, reminder mute settings, client %s attempting to toggle mute reminder settings", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v20 = (_QWORD *)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
      v20 = (_QWORD *)*v20;
    v28 = 136315138;
    v29 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, reminder mute settings, client %s attempting to toggle mute reminder settings", (const char *)&v28);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageUpdateWorkoutReminderMuteSetting(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  HIDWORD(v25) = 0;
  v6 = sub_10119ABA0(a1, (int *)&v25 + 1);
  v7 = *a2;
  if ((v6 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v9 = Dictionary;
    if (Dictionary
      && (v10 = CMWorkoutReminderSettingType,
          objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMWorkoutReminderSettingType))
      && (v11 = CMWorkoutReminderMuteValue, objc_msgSend(v9, "objectForKeyedSubscript:", CMWorkoutReminderMuteValue)))
    {
      v12 = objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", v10), "integerValue");
      v13 = objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", v11), "BOOLValue");
      v14 = (_QWORD *)(a1 + 328);
      if (sub_100304CA0((uint64_t)&unk_10230D2A8, (uint64_t)&qword_10230D2F0, (unsigned __int8 **)(a1 + 328))
         - (_QWORD)&unk_10230D2A8 == 72)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v15 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          v16 = (_QWORD *)(a1 + 328);
          if (*(char *)(a1 + 351) < 0)
            v16 = (_QWORD *)*v14;
          *(_DWORD *)buf = 136315650;
          v39 = v16;
          v40 = 2048;
          v41 = v12;
          v42 = 1024;
          v43 = (int)v13;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Workout, reminder mute settings, disallowed client %s attempting to toggle mute reminder for %ld to %d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          if (*(char *)(a1 + 351) < 0)
            v14 = (_QWORD *)*v14;
          v28 = 136315650;
          v29 = v14;
          v30 = 2048;
          v31 = v12;
          v32 = 1024;
          v33 = (int)v13;
          LODWORD(v25) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Workout, reminder mute settings, disallowed client %s attempting to toggle mute reminder for %ld to %d", (const char *)&v28, v25, v26);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageUpdateWorkoutReminderMuteSetting(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        v17 = *a2;
        v26 = CMErrorMessage;
        v27 = &off_10221CF68;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
        return (id)CLConnectionMessage::sendReply(v17);
      }
      else
      {
        return objc_msgSend(*(id *)(a1 + 80), "updateWorkoutReminderMuteSetting:mute:", v12, v13);
      }
    }
    else
    {
      v19 = *a2;
      v34 = CMErrorMessage;
      v35 = &off_10221CF38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
      return (id)CLConnectionMessage::sendReply(v19);
    }
  }
  else
  {
    v36 = CMErrorMessage;
    v37 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v25));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    return (id)CLConnectionMessage::sendReply(v7);
  }
}

void sub_10119AB00(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_1021A4D68, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10119AB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10119ABA0(uint64_t a1, int *a2)
{
  char v4;
  char v5;
  uint64_t result;
  int v7;
  void *__p;
  char v9;

  sub_1015A2E04(&__p, "com.apple.locationd.natalimetry");
  v4 = sub_1002255E0(a1);
  v5 = v4;
  if (v9 < 0)
  {
    operator delete(__p);
    if ((v5 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_8;
  }
  if (!sub_1011C589C(*(_QWORD *)(a1 + 8)))
  {
    v7 = 104;
    goto LABEL_10;
  }
  if ((sub_1001BBC08(a1) & 1) != 0)
    return 1;
LABEL_8:
  v7 = 105;
LABEL_10:
  result = 0;
  *a2 = v7;
  return result;
}

void sub_10119AC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10119AC5C(uint64_t a1)
{
  id v1;
  id v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  v2 = objc_msgSend(objc_msgSend(v1, "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")), "isAuthorizedForServiceTypeMask:", 16);
  if ((v2 & 1) == 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A4C18);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A4C18);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Motion calibration system service is disabled.", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutSubscription::isMotionCalibrationAuthorized()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }

  return v2;
}

uint64_t sub_10119AE3C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSNumber **v6;
  uint64_t *v7;
  NSObject *v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSNumber *v21;
  uint8_t buf[4];
  uint64_t v23;

  if ((_DWORD)a2 == 100)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134217984;
      v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Workout, LOCATION UPDATE FOR TESTING %zd.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v11 = *(_QWORD *)(a1 + 48);
      v18 = 134217984;
      v19 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, LOCATION UPDATE FOR TESTING %zd.", (size_t)&v18);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageTriggerWorkoutLocationEventForTesting(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v5 = *(_QWORD *)(a1 + 32);
    v16 = CMReturnCode;
    v17 = &__kCFBooleanTrue;
    v6 = (NSNumber **)&v17;
    v7 = &v16;
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "No active workouts or defaults write not set to force location updates!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "No active workouts or defaults write not set to force location updates!", &v18, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageTriggerWorkoutLocationEventForTesting(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v5 = *(_QWORD *)(a1 + 32);
    v20 = CMErrorMessage;
    v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
    v6 = &v21;
    v7 = &v20;
  }
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v7, 1);
  return CLConnectionMessage::sendReply(v5);
}

void sub_10119B1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  NSDate *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  id v23;

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a2)
    v5 = sub_10119B41C((double *)(a2 + 8), 0);
  else
    v5 = 0;
  if (*(_BYTE *)(a2 + 248))
    v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 240));
  else
    v6 = 0;
  v7 = objc_msgSend(objc_alloc((Class)CMWorkoutSnapshot), "initWithState:workout:entryDate:", *(_QWORD *)a2, v5, v6);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(v4 + 24);
    *(_DWORD *)buf = 138412546;
    v21 = v9;
    v22 = 2112;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[snapshot] sending snapshot to client %@, %@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v11 = *(_QWORD *)(v4 + 24);
    v16 = 138412546;
    v17 = v11;
    v18 = 2112;
    v19 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "[snapshot] sending snapshot to client %@, %@", &v16, 22);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageWorkoutSnapshot(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v10 = *(_QWORD *)(a1 + 40);
  v14 = CMWorkoutSnapshotData;
  v15 = v7;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
  CLConnectionMessage::sendReply(v10);

}

id sub_10119B41C(double *a1, int a2)
{
  id v4;
  NSDate *v5;
  NSDate *v6;
  NSDate *v7;
  NSDate *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  NSDate *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  NSDate *v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  id v44;

  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a1 + 8);
  if (*a1 == 1.79769313e308)
    v5 = +[NSDate distantFuture](NSDate, "distantFuture", *a1);
  else
    v5 = (NSDate *)objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", *a1);
  v6 = v5;
  if (a1[1] == 1.79769313e308)
    v7 = +[NSDate distantFuture](NSDate, "distantFuture");
  else
    v7 = (NSDate *)objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a1[1]);
  v8 = v7;
  v9 = v4;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v11 = "overview event";
    else
      v11 = "current event";
    v12 = v8;
    v14 = *((_QWORD *)a1 + 2);
    v13 = *((_QWORD *)a1 + 3);
    v15 = *((_QWORD *)a1 + 14);
    v16 = *((_QWORD *)a1 + 15);
    v22 = v6;
    v17 = *((_QWORD *)a1 + 28);
    v20 = *(_QWORD *)a1;
    v21 = *((_QWORD *)a1 + 1);
    *(_DWORD *)buf = 68291330;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2082;
    v28 = v11;
    v29 = 2050;
    v30 = v13;
    v8 = v12;
    v31 = 2050;
    v32 = v14;
    v33 = 2050;
    v34 = v15;
    v35 = 2050;
    v36 = v16;
    v37 = 2050;
    v38 = v17;
    v39 = 2050;
    v40 = v20;
    v41 = 2050;
    v6 = v22;
    v42 = v21;
    v43 = 2082;
    v44 = objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"WorkoutSession, event\", \"type\":%{public, location:escape_only}s, \"eventTime\":\"%{public}.6f\", \"eventType\":%{public}ld, \"workoutType\":%{public}ld, \"locationType\":%{public}ld, \"workoutMode\":%{public}ld, \"startTime\":\"%{public}.6f\", \"endTime\":\"%{public}.6f\", \"sessionID\":%{public, location:escape_only}s}", buf, 0x6Cu);
  }
  if (*((_QWORD *)a1 + 14) == 19 && (unint64_t)(*((_QWORD *)a1 + 15) - 1) <= 1)
  {
    v18 = objc_msgSend(objc_alloc((Class)CMSwimWorkout), "initWithSessionId:locationType:poolLength:startDate:endDate:", v9, *((_QWORD *)a1 + 15), v6, v8, a1[17]);
    objc_msgSend(v18, "setWorkoutMode:", *((_QWORD *)a1 + 28));
  }
  else
  {
    v18 = objc_msgSend(objc_alloc((Class)CMWorkout), "initWithSessionId:type:locationType:mode:startDate:endDate:", v9, *((_QWORD *)a1 + 14), *((_QWORD *)a1 + 15), *((_QWORD *)a1 + 28), v6, v8);
  }

  return v18;
}

char *sub_10119B6C4(void *a1, const unsigned __int8 *a2, uint64_t a3)
{
  id v6;
  int is_null;
  unsigned __int8 *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  char *result;
  char *v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  size_t v36;
  int v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v6 = objc_msgSend(a1, "sessionId");
  if (v6)
    objc_msgSend(v6, "getUUIDBytes:", a3);
  else
    uuid_clear((unsigned __int8 *)a3);
  is_null = uuid_is_null(a2);
  v8 = (unsigned __int8 *)(a3 + 16);
  if (is_null)
    uuid_clear(v8);
  else
    uuid_copy(v8, a2);
  *(_QWORD *)(a3 + 48) = objc_msgSend(a1, "type");
  *(_QWORD *)(a3 + 56) = objc_msgSend(a1, "locationType");
  *(_QWORD *)(a3 + 160) = objc_msgSend(a1, "mode");
  buf[0] = 0;
  sub_1018BF25C((unsigned __int8 *)&v36 + 5, "ForceOneButtonWorkouts", buf, 0);
  if (BYTE6(v36)
    && ((+[CMWorkout workoutIsTypeWalking:](CMWorkout, "workoutIsTypeWalking:", *(_QWORD *)(a3 + 48)) & 1) != 0|| +[CMWorkout workoutIsTypeRunning:](CMWorkout, "workoutIsTypeRunning:", *(_QWORD *)(a3 + 48))))
  {
    if (+[CMWorkout workoutIsTypeWalking:](CMWorkout, "workoutIsTypeWalking:", *(_QWORD *)(a3 + 48)))v9 = 1;
    else
      v9 = 2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v10 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(const char **)(a3 + 48);
      v12 = *(_QWORD *)(a3 + 56);
      *(_DWORD *)buf = 134218752;
      v46 = v11;
      v47 = 2048;
      v48 = v12;
      v49 = 2048;
      v50 = v9;
      v51 = 2048;
      v52 = 3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Forcing workout from workoutType: %zd, locationType: %zd, to workoutType: %zd, locationType: %zd", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v25 = *(const char **)(a3 + 48);
      v26 = *(_QWORD *)(a3 + 56);
      v37 = 134218752;
      v38 = v25;
      v39 = 2048;
      v40 = v26;
      v41 = 2048;
      v42 = v9;
      v43 = 2048;
      v44 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Forcing workout from workoutType: %zd, locationType: %zd, to workoutType: %zd, locationType: %zd", (size_t)&v37, 42, v35, v36);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutSubscription::getWorkoutSettingsFromWorkoutObject(CMWorkout *, const uuid_t &, CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    *(_QWORD *)(a3 + 48) = v9;
    *(_QWORD *)(a3 + 56) = 3;
  }
  v13 = +[CMSwimWorkout swimWorkoutInstance:](CMSwimWorkout, "swimWorkoutInstance:", a1);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "location");
    objc_msgSend(v14, "poolLength");
    *(_QWORD *)(a3 + 64) = v15;
    *(_QWORD *)(a3 + 72) = v16;
  }
  v17 = +[CMGenericWorkout genericWorkoutInstance:](CMGenericWorkout, "genericWorkoutInstance:", a1);
  if (v17)
  {
    v18 = v17;
    v35 = 0;
    if (sub_100F72F68((uint64_t)objc_msgSend(v17, "workoutLabel"), &v35))
    {
      *(_QWORD *)(a3 + 64) = objc_msgSend(v18, "workoutLabel");
    }
    else
    {
      *(_QWORD *)(a3 + 64) = 3000;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v19 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
      {
        v20 = (const char *)objc_msgSend(v18, "workoutLabel");
        *(_DWORD *)buf = 134217984;
        v46 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Passed an invalid HKWorkoutActivityType of %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v29 = qword_10229FE68;
        v30 = (const char *)objc_msgSend(v18, "workoutLabel");
        v37 = 134217984;
        v38 = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 17, "Passed an invalid HKWorkoutActivityType of %lu", &v37);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 0, "static void CLWorkoutSubscription::getWorkoutSettingsFromWorkoutObject(CMWorkout *, const uuid_t &, CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
    }
  }
  result = (char *)+[CMFitnessPlusWorkout fitnessPlusWorkoutInstance:](CMFitnessPlusWorkout, "fitnessPlusWorkoutInstance:", a1);
  *(_BYTE *)(a3 + 80) = 0;
  if (result)
  {
    v22 = result;
    *(_BYTE *)(a3 + 80) = 1;
    *(_QWORD *)(a3 + 152) = objc_msgSend(result, "mediaType");
    if (objc_msgSend(v22, "catalogWorkoutId"))
      v23 = (const char *)objc_msgSend(objc_msgSend(v22, "catalogWorkoutId"), "UTF8String");
    else
      v23 = "Invalid";
    if (strlen(v23) >= 0x40)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v24 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v46 = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "catalogWorkoutId string is too long, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v37 = 136315138;
        v38 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "catalogWorkoutId string is too long, %s", (const char *)&v37);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 0, "static void CLWorkoutSubscription::getWorkoutSettingsFromWorkoutObject(CMWorkout *, const uuid_t &, CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
    }
    return strncpy((char *)(a3 + 81), v23, 0x40uLL);
  }
  return result;
}

__n128 sub_10119BD1C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 24 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10119D274(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  result = (__n128)a2[7];
  v15 = a2[8];
  v16 = a2[9];
  *(_QWORD *)(v8 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  *(__n128 *)(v8 + 112) = result;
  ++a1[5];
  return result;
}

uint64_t sub_10119BDF0(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  sub_1006D0F34(a1 + 40, (_QWORD *)(a2 + 40));
  return a1;
}

void sub_10119BE60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10119BE7C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  id v19;
  id v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD v38[3];
  _BYTE __p[12];
  __int16 v40;
  uint64_t v41;
  char v42;

  if (*a3 == 2)
  {
    v6 = *(_OWORD *)a4;
    v7 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 88) = v6;
    v8 = *(_OWORD *)(a4 + 48);
    v9 = *(_OWORD *)(a4 + 64);
    v10 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a1 + 168) = v10;
    *(_OWORD *)(a1 + 152) = v9;
    *(_OWORD *)(a1 + 136) = v8;
    v11 = *(_OWORD *)(a4 + 112);
    v12 = *(_OWORD *)(a4 + 128);
    v13 = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(a1 + 232) = v13;
    *(_OWORD *)(a1 + 216) = v12;
    *(_OWORD *)(a1 + 200) = v11;
    v14 = *(_OWORD *)(a4 + 176);
    v15 = *(_OWORD *)(a4 + 192);
    v16 = *(_OWORD *)(a4 + 208);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a4 + 224);
    *(_OWORD *)(a1 + 280) = v15;
    *(_OWORD *)(a1 + 296) = v16;
    *(_OWORD *)(a1 + 264) = v14;
    if (*(_QWORD *)(a4 + 16) == 15)
      uuid_clear((unsigned __int8 *)(a1 + 168));
    sub_10119C3A0(a1, (_QWORD *)a4);
    sub_1015A2E04(__p, "kCLConnectionMessageWorkoutEvent");
    v17 = sub_100FFB214(a1);
    v18 = v17;
    if (v42 < 0)
    {
      operator delete(*(void **)__p);
      if ((v18 & 1) == 0)
        return;
    }
    else if ((v17 & 1) == 0)
    {
      return;
    }
    if (!sub_100F72B4C(a4) && (*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFFELL) != 0x14)
    {
      if (*(_QWORD *)(a4 + 112) == 4
        && (sub_100197040(), (sub_100195F08() & 1) == 0)
        && (v24 = *(_QWORD *)(a4 + 16), v24 <= 0xB)
        && ((1 << v24) & 0xBCC) != 0)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v25 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(_QWORD *)(a4 + 16);
          *(_DWORD *)__p = 134217984;
          *(_QWORD *)&__p[4] = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Suppressing workout event for cycling,%ld", __p, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v30 = *(_QWORD *)(a4 + 16);
          v33 = 134217984;
          v34 = v30;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FE68, 0, "Suppressing workout event for cycling,%ld", &v33);
          v32 = (char *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v31);
          if (v32 != __p)
            free(v32);
        }
      }
      else
      {
        v19 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a4 + 24));
        v20 = sub_10119B41C((double *)a4, 0);
        v21 = v20;
        if (v19 && v20 && objc_msgSend(v20, "sessionId"))
        {
          v37[0] = CMReturnCode;
          v38[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a4 + 16));
          v38[1] = v19;
          v37[1] = CMWorkoutEventDate;
          v37[2] = CMWorkoutAttributes;
          v38[2] = v21;
          *(_QWORD *)__p = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 3);
          sub_10119C7BC(a1, __p);
        }
        else
        {
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
          v22 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
          {
            v23 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)__p = 138412546;
            *(_QWORD *)&__p[4] = v23;
            v40 = 2048;
            v41 = a1;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Error delivering event, %@, %p", __p, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
            v27 = *(_QWORD *)(a1 + 24);
            v33 = 138412546;
            v34 = v27;
            v35 = 2048;
            v36 = a1;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FE68, 17, "Error delivering event, %@, %p", &v33, 22);
            v29 = (char *)v28;
            sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v28);
            if (v29 != __p)
              free(v29);
          }
        }

      }
    }
  }
}

void sub_10119C37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10119C3A0(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  if (sub_100F72B60((uint64_t)a2) == 1)
  {
    v4 = 1;
  }
  else
  {
    if (sub_100F72B60((uint64_t)a2) != 2)
      goto LABEL_6;
    v4 = 2;
  }
  *(_DWORD *)(a1 + 320) = v4;
LABEL_6:
  v5 = a2[14];
  v7 = v5 == 23 || v5 == 37;
  v8 = a2[2];
  v9 = v7 && v8 == 2;
  if (v9 || (v10 = a2[28], v10 == 1) || (v11 = *(_DWORD *)(a1 + 320), v11 == 2))
  {
    v13 = *(_QWORD *)(a1 + 48);
    v12 = (uint64_t *)(a1 + 48);
    if (!v13)
      return;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
    v14 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v15 = a2[2];
      v16 = a2[14];
      v17 = a2[28];
      *(_DWORD *)buf = 134218496;
      v41 = v15;
      v42 = 2048;
      v43 = v16;
      v44 = 2048;
      v45 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Workout, Releasing power assertion, event, %ld, type, %ld, mode, %ld", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v24 = a2[2];
      v25 = a2[14];
      v26 = a2[28];
      v34 = 134218496;
      v35 = v24;
      v36 = 2048;
      v37 = v25;
      v38 = 2048;
      v39 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, Releasing power assertion, event, %ld, type, %ld, mode, %ld", &v34, 32);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::updateWorkoutStateAndPowerAssertion(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    v18 = 0;
    goto LABEL_25;
  }
  if (v8 != 3)
    LOBYTE(v7) = 0;
  if (v7 || !v10 && v11 == 1)
  {
    v19 = *(_QWORD *)(a1 + 48);
    v12 = (uint64_t *)(a1 + 48);
    if (v19)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
      v20 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v21 = a2[2];
        v22 = a2[14];
        v23 = a2[28];
        *(_DWORD *)buf = 134218496;
        v41 = v21;
        v42 = 2048;
        v43 = v22;
        v44 = 2048;
        v45 = v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Workout, Taking power assertion, event, %ld, type, %ld, mode, %ld", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021A4BF8);
        v29 = a2[2];
        v30 = a2[14];
        v31 = a2[28];
        v34 = 134218496;
        v35 = v29;
        v36 = 2048;
        v37 = v30;
        v38 = 2048;
        v39 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, Taking power assertion, event, %ld, type, %ld, mode, %ld", &v34, 32);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSubscription::updateWorkoutStateAndPowerAssertion(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v18 = 1;
LABEL_25:
      sub_1006B9B14(*v12, v18);
    }
  }
}

void sub_10119C7BC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_1021A4D68, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10119C850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10119C864(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021A4D68, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10119C8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10119C90C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10119C938(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10119C964(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

__n128 sub_10119C990(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A4C48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10119C9CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A4C48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10119C9F0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_10119CA40(a1 + 8, a2, a3);
}

uint64_t sub_10119C9F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10119CA34()
{
}

void sub_10119CA40(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_10119CAC4(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10119CAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10119CAC4(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A4CB8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A4CB8);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_10119CCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_10119CCC8(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_10119CCF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A4CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10119CD30(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A4CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10119CD54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10119CDA4(a1 + 8, a2, a3);
}

uint64_t sub_10119CD5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10119CD98()
{
}

void sub_10119CDA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_10119CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10119CE94(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_10119CF0C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10119CEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10119CF0C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10119D18C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_10119D174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10119D18C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10119D200(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10119D1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10119D200(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10119D258(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10119D274(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x18;
  v4 = v2 - 24;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10119D53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10119D588()
{
  _QWORD *v0;

  sub_1015A2E04(qword_10230D290, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D290, (void *)&_mh_execute_header);
  v0 = sub_1015A2E04(qword_10230D2A8, "com.apple.HealthKit");
  sub_1015A2E04(v0 + 3, "com.apple.SessionTrackerApp");
  sub_1015A2E04(qword_10230D2D8, "/usr/local/bin/motmonObjc");
  return __cxa_atexit((void (*)(void *))sub_101195B3C, qword_10230D2A8, (void *)&_mh_execute_header);
}

void sub_10119D628(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10194415C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10119D63C(_QWORD *a1, void *a2)
{
  _QWORD *result;

  result = sub_1011B9B70(a1, a2);
  *result = off_1021A4D80;
  result[6] = 0;
  result[5] = 0;
  result[4] = result + 5;
  return result;
}

BOOL sub_10119D66C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t *v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  double v21;
  double v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  unint64_t v31;
  uint8_t buf[8];
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  unint64_t v40;

  v22 = 0.0;
  v3 = sub_1011B9C58(a1, a2, &v22);
  v4 = v3;
  HIWORD(v21) = v3;
  v6 = a1 + 40;
  v5 = *(_QWORD *)(a1 + 40);
  v7 = 0.0;
  if (v5)
  {
    v8 = a1 + 40;
    do
    {
      v9 = *(unsigned __int16 *)(v5 + 32);
      v10 = v9 >= v3;
      if (v9 >= v3)
        v11 = (uint64_t *)v5;
      else
        v11 = (uint64_t *)(v5 + 8);
      if (v10)
        v8 = v5;
      v5 = *v11;
    }
    while (*v11);
    if (v8 != v6 && v3 >= *(unsigned __int16 *)(v8 + 32))
      v7 = *(double *)(v8 + 40);
  }
  v12 = (unsigned __int8 *)objc_msgSend(*(id *)(a1 + 24), "bytes");
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 24), "length") <= (unint64_t)v4 >> 1)
    v13 = 0;
  else
    v13 = (v12[(unint64_t)v4 >> 1] >> (~(4 * v4) & 4)) & 0xF;
  v14 = *(uint64_t **)&v22;
  v15 = v22 - v7;
  v16 = (double)v13;
  if (v22 - v7 >= (double)v13)
  {
    *(_QWORD *)buf = (char *)&v21 + 6;
    sub_10119DA1C((uint64_t **)(v6 - 8), (unsigned __int16 *)&v21 + 3, (uint64_t)&unk_101B9EB60, (_WORD **)buf)[5] = v14;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A4DB0);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = v15 >= v16;
    v33 = 1024;
    v34 = HIWORD(v21);
    v35 = 2048;
    v36 = v7;
    v37 = 2048;
    v38 = v22;
    v39 = 2048;
    v40 = v13;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "shouldILog returned %d for tag %d, last %f now %f, threshold is %lu", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A4DB0);
    LODWORD(v23) = 67110144;
    HIDWORD(v23) = v15 >= v16;
    v24 = 1024;
    v25 = HIWORD(v21);
    v26 = 2048;
    v27 = v7;
    v28 = 2048;
    v29 = v22;
    v30 = 2048;
    v31 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "shouldILog returned %d for tag %d, last %f now %f, threshold is %lu", &v23, 44, v21, v22, v23);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerRatePolicy::shouldILog(NSData *)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return v15 >= v16;
}

uint64_t sub_10119D974(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A4D80;
  sub_100008848(a1 + 32, *(_QWORD **)(a1 + 40));
  return sub_1011B9BE0(a1);
}

void sub_10119D9A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A4D80;
  sub_100008848(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_1011B9BE0(a1);
  operator delete();
}

void sub_10119D9F0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t **sub_10119DA1C(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10119DADC(uint64_t a1)
{
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 117;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 192) = off_1021A4E00;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 391) = 0;
  *(_DWORD *)(a1 + 396) = 1000;
  *(_OWORD *)(a1 + 528) = xmmword_101C43CF0;
  *(_OWORD *)(a1 + 544) = unk_101C43D00;
  *(_OWORD *)(a1 + 560) = xmmword_101C43D10;
  *(_OWORD *)(a1 + 576) = unk_101C43D20;
  *(_OWORD *)(a1 + 464) = xmmword_101C43CB0;
  *(_OWORD *)(a1 + 480) = unk_101C43CC0;
  *(_OWORD *)(a1 + 496) = xmmword_101C43CD0;
  *(_OWORD *)(a1 + 512) = unk_101C43CE0;
  *(_OWORD *)(a1 + 400) = xmmword_101C43C70;
  *(_OWORD *)(a1 + 416) = unk_101C43C80;
  *(_OWORD *)(a1 + 432) = xmmword_101C43C90;
  *(_OWORD *)(a1 + 448) = unk_101C43CA0;
  *(_DWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_101B9F630;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 644) = 0;
  *(_QWORD *)(a1 + 649) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 672) = xmmword_101C43D30;
  *(_OWORD *)(a1 + 688) = unk_101C43D40;
  *(_OWORD *)(a1 + 704) = xmmword_101C43D50;
  *(_OWORD *)(a1 + 720) = unk_101C43D60;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 732) = 1;
  v3 = 0;
  sub_1018BF25C(v4, "ElevationVerbose", &v3, 0);
  *(_BYTE *)(a1 + 392) = v4[1];
  return a1;
}

void sub_10119DC44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10047F25C(v1 + 43);
  sub_10047F25C(v3);
  sub_100479F9C(v2);
  sub_100554930(v1 + 18);
  sub_1006CFD68(v1 + 12);
  sub_100554930(v1 + 6);
  sub_1006CFD68(v1);
  _Unwind_Resume(a1);
}

void sub_10119DC98(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  unsigned int v14;
  double v15;

  ++*(_QWORD *)(a1 + 664);
  v4 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 448) = v6;
  *(_OWORD *)(a1 + 400) = v4;
  *(_OWORD *)(a1 + 416) = v5;
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 512) = v9;
  *(_OWORD *)(a1 + 464) = v7;
  *(_OWORD *)(a1 + 480) = v8;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 576) = v12;
  *(_OWORD *)(a1 + 528) = v10;
  *(_OWORD *)(a1 + 544) = v11;
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a2 + 164);
  sub_10119DD6C(a1, a2);
  if (*(uint64_t *)(a1 + 664) >= 21)
  {
    v13 = *(double *)(a2 + 120);
    if (v13 > 0.0 && v13 <= 20.0)
    {
      v14 = *(_DWORD *)(a1 + 592);
      if (v14 > 4 || ((1 << v14) & 0x19) == 0)
      {
        v15 = *(double *)(a2 + 112);
        if (v15 < *(double *)(a1 + 608))
          *(double *)(a1 + 608) = v15;
        if (v15 > *(double *)(a1 + 616))
          *(double *)(a1 + 616) = v15;
      }
    }
  }
}

void sub_10119DD6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v9;

  v4 = (_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 >= 0x19)
  {
    v6 = *(_QWORD *)(a1 + 128);
    v7 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * (v6 / 0x15)) + 192 * (v6 % 0x15) + 120);
    if (v7 > 0.0 && v7 <= 20.0)
      --*(_DWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 128) = v6 + 1;
    *(_QWORD *)(a1 + 136) = v5 - 1;
    sub_100AADAA4(a1 + 96, 1);
  }
  sub_1006D96C0(v4, (__int128 *)a2);
  v9 = *(double *)(a2 + 120);
  if (v9 > 0.0 && v9 <= 20.0)
    ++*(_DWORD *)(a1 + 600);
}

double sub_10119DE44(uint64_t a1)
{
  return *(double *)(a1 + 608);
}

double sub_10119DE4C(uint64_t a1)
{
  return *(double *)(a1 + 616);
}

void sub_10119DE54(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  double v8;
  double v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  *(_BYTE *)(a1 + 640) = 1;
  v6 = (_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 184);
  if (v7)
  {
    v8 = *(double *)(a2 + 8);
    v9 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + (((v7 + *(_QWORD *)(a1 + 176) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v7 + *(_QWORD *)(a1 + 176) - 1) & 0x3F) << 6)
                   + 8);
    if (v8 <= v9 || v8 - v9 > 20.0)
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v11 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a2 + 8);
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + ((*(_QWORD *)(a1 + 176) >> 3) & 0x1FFFFFFFFFFFFFF8))
                        + ((*(_QWORD *)(a1 + 176) & 0x3FLL) << 6)
                        + 8);
        *(_DWORD *)buf = 134218240;
        v24 = v12;
        v25 = 2048;
        v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WorkoutElevationFusion,phone source time rolled back, now %f, prev, %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
        v14 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + ((*(_QWORD *)(a1 + 176) >> 3) & 0x1FFFFFFFFFFFFFF8))
                        + ((*(_QWORD *)(a1 + 176) & 0x3FLL) << 6)
                        + 8);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = v15;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "WorkoutElevationFusion,phone source time rolled back, now %f, prev, %f", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "CLElevationChangeEntry CLWorkoutElevationFusion::feedPhoneBaroElevation(const CLElevationChangeEntry &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      sub_10119E108(a1);
      v7 = *(_QWORD *)(a1 + 184);
    }
    if (v7 >= 0xA)
    {
      ++*(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 184) = v7 - 1;
      sub_100555498((uint64_t)v6, 1);
    }
  }
  sub_1000BE730(v6, a2);
  sub_10119E388(a1, a3);
}

double sub_10119E108(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double result;

  v2 = *(void ***)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 10;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 21;
  }
  *(_QWORD *)(a1 + 32) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 88) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 64);
      v7 = (void **)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 32;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 64;
  }
  *(_QWORD *)(a1 + 80) = v11;
LABEL_15:
  v12 = *(void ***)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 136) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 112);
      v12 = (void **)(*(_QWORD *)(a1 + 104) + 8);
      *(_QWORD *)(a1 + 104) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 10;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_22;
    v16 = 21;
  }
  *(_QWORD *)(a1 + 128) = v16;
LABEL_22:
  v17 = *(void ***)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 184) = 0;
  v19 = v18 - (_QWORD)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      v20 = *(_QWORD *)(a1 + 160);
      v17 = (void **)(*(_QWORD *)(a1 + 152) + 8);
      *(_QWORD *)(a1 + 152) = v17;
      v19 = v20 - (_QWORD)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    v21 = 32;
  }
  else
  {
    if (v19 >> 3 != 2)
      goto LABEL_29;
    v21 = 64;
  }
  *(_QWORD *)(a1 + 176) = v21;
LABEL_29:
  v22 = *(void ***)(a1 + 304);
  v23 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 336) = 0;
  v24 = v23 - (_QWORD)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      v25 = *(_QWORD *)(a1 + 312);
      v22 = (void **)(*(_QWORD *)(a1 + 304) + 8);
      *(_QWORD *)(a1 + 304) = v22;
      v24 = v25 - (_QWORD)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    v26 = 256;
  }
  else
  {
    if (v24 >> 3 != 2)
      goto LABEL_36;
    v26 = 512;
  }
  *(_QWORD *)(a1 + 328) = v26;
LABEL_36:
  v27 = *(void ***)(a1 + 352);
  v28 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 384) = 0;
  v29 = v28 - (_QWORD)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v30 = *(_QWORD *)(a1 + 360);
      v27 = (void **)(*(_QWORD *)(a1 + 352) + 8);
      *(_QWORD *)(a1 + 352) = v27;
      v29 = v30 - (_QWORD)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    v31 = 256;
    goto LABEL_42;
  }
  if (v29 >> 3 == 2)
  {
    v31 = 512;
LABEL_42:
    *(_QWORD *)(a1 + 376) = v31;
  }
  sub_10047F1D4((_QWORD *)(a1 + 192));
  *(_DWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 393) = 0;
  *(_DWORD *)(a1 + 396) = 1000;
  result = 0.0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 596) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_101B9F630;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  return result;
}

void sub_10119E388(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v4;
  int v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  v4 = sub_10119F13C(a1);
  v5 = v4;
  v6 = *(double *)(a1 + 680);
  if (v6 == 0.0)
    goto LABEL_14;
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (!v7)
      goto LABEL_14;
    v8 = v7 + *(_QWORD *)(a1 + 80) - 1;
    v9 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 184);
    if (!v10)
      goto LABEL_14;
    v8 = v10 + *(_QWORD *)(a1 + 176) - 1;
    v9 = *(_QWORD *)(a1 + 152);
  }
  if (v6 <= *(double *)(*(_QWORD *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v8 & 0x3F) << 6) + 8))
  {
LABEL_14:
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    sub_10119F4A4(a1, v4, a2);
    v16 = *(_DWORD *)(a1 + 396);
    if (v16 == v5)
      return;
    if (v5 != 2 || v16 != 1)
    {
      if (v5 == 1000)
      {
        switch(v16)
        {
          case 3:
            ++*(_DWORD *)(a1 + 816);
            break;
          case 2:
            ++*(_DWORD *)(a1 + 812);
            break;
          case 1:
            ++*(_DWORD *)(a1 + 808);
            break;
        }
        goto LABEL_18;
      }
      if (v5 == 3)
      {
        ++*(_DWORD *)(a1 + 804);
        goto LABEL_18;
      }
      if (v5 != 1 || v16 != 2)
        goto LABEL_18;
    }
    ++*(_DWORD *)(a1 + 800);
LABEL_18:
    *(_DWORD *)(a1 + 396) = v5;
    return;
  }
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
  v11 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
  {
    v12 = *(_QWORD *)(a1 + 680);
    *(_DWORD *)buf = 134217984;
    v23 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WorkoutElevationFusion,unexpected timestamp on source switch,fElevationWatch.startTime,%f", buf, 0xCu);
  }
  v13 = (_OWORD *)(a1 + 672);
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v17 = *(_QWORD *)(a1 + 680);
    v20 = 134217984;
    v21 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "WorkoutElevationFusion,unexpected timestamp on source switch,fElevationWatch.startTime,%f", COERCE_DOUBLE(&v20));
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "CLElevationChangeEntry CLWorkoutElevationFusion::tick()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v14 = v13[1];
  *a2 = *v13;
  a2[1] = v14;
  v15 = v13[3];
  a2[2] = v13[2];
  a2[3] = v15;
}

void sub_10119E684(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  double v8;
  double v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  double v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[96];
  int64x2_t v32;
  int64x2_t v33;

  v6 = (_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v8 = *(double *)(a2 + 8);
    v9 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + (((v7 + *(_QWORD *)(a1 + 80) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v7 + *(_QWORD *)(a1 + 80) - 1) & 0x3F) << 6)
                   + 8);
    if (v8 <= v9 || v8 - v9 > 20.0)
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v11 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a2 + 8);
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + ((*(_QWORD *)(a1 + 80) >> 3) & 0x1FFFFFFFFFFFFFF8))
                        + ((*(_QWORD *)(a1 + 80) & 0x3FLL) << 6)
                        + 8);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WorkoutElevationFusion,watch source time rolled back, now %f, prev, %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
        v22 = *(_QWORD *)(a2 + 8);
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + ((*(_QWORD *)(a1 + 80) >> 3) & 0x1FFFFFFFFFFFFFF8))
                        + ((*(_QWORD *)(a1 + 80) & 0x3FLL) << 6)
                        + 8);
        v27 = 134218240;
        v28 = v22;
        v29 = 2048;
        v30 = v23;
        LODWORD(v26) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "WorkoutElevationFusion,watch source time rolled back, now %f, prev, %f", COERCE_DOUBLE(&v27), v26);
        v25 = (char *)v24;
        sub_100512490("Generic", 1, 0, 0, "CLElevationChangeEntry CLWorkoutElevationFusion::feedWatchBaroElevation(const CLElevationChangeEntry &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      sub_10119E108(a1);
      v7 = *(_QWORD *)(a1 + 88);
    }
    if (v7 >= 0xA)
    {
      v14 = *(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v14 & 0x3F) << 6) + 52) == 3)
      {
        v15 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (*(_QWORD *)(a1 + 32) / 0x15uLL))
                        + 192 * (*(_QWORD *)(a1 + 32) % 0x15uLL)
                        + 104);
        if (v15 <= 0.0 || v15 > 32.5)
          --*(_DWORD *)(a1 + 624);
      }
      *(_QWORD *)(a1 + 80) = v14 + 1;
      *(_QWORD *)(a1 + 88) = v7 - 1;
      sub_100555498((uint64_t)v6, 1);
    }
  }
  sub_1000BE730(v6, a2);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16 >= 0xA)
  {
    ++*(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 40) = v16 - 1;
    sub_100AADAA4(a1, 1);
  }
  if (*(double *)(a2 + 8) - *(double *)(a1 + 400) >= 2.56)
  {
    memset(&v33.u64[1], 0, 72);
    memset(&buf[8], 0, 88);
    *(_QWORD *)buf = 0xFFEFFFFFFFFFFFFFLL;
    v32 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v33 = v32;
    sub_1006D96C0((_QWORD *)a1, (__int128 *)buf);
  }
  else
  {
    sub_1006D96C0((_QWORD *)a1, (__int128 *)(a1 + 400));
  }
  sub_10119EAA4(a1, *(double *)(a2 + 8));
  sub_10119EB80((_QWORD *)a1, v17, v18, v19);
  sub_10119EC78(a1);
  sub_10119EF60((_QWORD *)a1, v20, v21);
  if (*(_BYTE *)(a2 + 52) == 3 && !*(_BYTE *)(a1 + 393))
    ++*(_DWORD *)(a1 + 624);
  sub_10119E388(a1, a3);
}

uint64_t sub_10119EAA4(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;

  v2 = *(_QWORD *)(result + 136);
  if (v2)
  {
    v4 = result;
    v5 = result + 96;
    do
    {
      v6 = *(_QWORD *)(v4 + 128);
      v7 = (v6 * (unsigned __int128)0x8618618618618619) >> 64;
      v8 = (double *)(*(_QWORD *)(*(_QWORD *)(v4 + 104) + 8 * ((v7 + ((v6 - v7) >> 1)) >> 4))
                    + 192 * (v6 - 21 * ((v7 + ((v6 - v7) >> 1)) >> 4)));
      if (*v8 + 25.0 >= a2)
        break;
      v9 = v8[15];
      if (v9 > 0.0 && v9 <= 20.0)
        --*(_DWORD *)(v4 + 600);
      *(_QWORD *)(v4 + 128) = v6 + 1;
      *(_QWORD *)(v4 + 136) = v2 - 1;
      result = sub_100AADAA4(v5, 1);
      v2 = *(_QWORD *)(v4 + 136);
    }
    while (v2);
  }
  return result;
}

void sub_10119EB80(_QWORD *a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  double v10;

  v4 = a1[11];
  if (v4)
  {
    v5 = a1[5];
    if (v5)
    {
      v6 = *(_QWORD *)(a1[1] + 8 * ((v5 + a1[4] - 1) / 0x15uLL)) + 192 * ((v5 + a1[4] - 1) % 0x15uLL);
      v7 = *(double *)(v6 + 104);
      if (v7 <= 0.0 || (HIDWORD(v8) = 1077952512, v7 > 32.5))
      {
        sub_1011A0514((uint64_t)(a1 + 24), &dbl_101C43D70);
      }
      else
      {
        v9 = *(_QWORD *)(a1[7] + (((unint64_t)(v4 + a1[10] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
           + (((v4 + a1[10] - 1) & 0x3F) << 6);
        LODWORD(v8) = *(_DWORD *)(v9 + 16);
        LODWORD(a4) = *(_DWORD *)(v9 + 20);
        v10 = *(double *)(v6 + 96) + ((double)v8 - (double)*(unint64_t *)&a4) / -100.0;
        sub_1011A0514((uint64_t)(a1 + 24), &v10);
      }
    }
  }
}

void sub_10119EC78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  BOOL v5;
  double v6;
  BOOL v7;
  unsigned int v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((v2 + *(_QWORD *)(a1 + 32) - 1) / 0x15uLL))
       + 192 * ((v2 + *(_QWORD *)(a1 + 32) - 1) % 0x15uLL);
    v4 = *(double *)(v3 + 104);
    v5 = v4 > 0.0;
    if (v4 > 32.5)
      v5 = 0;
    *(_BYTE *)(a1 + 393) = v5;
    v6 = *(double *)(v3 + 120);
    v7 = v6 <= 0.0 || v6 > 20.0;
    LOBYTE(v2) = !v7 && ((v8 = *(_DWORD *)(a1 + 592), v8 > 4) || ((1 << v8) & 0x19) == 0);
  }
  else
  {
    *(_BYTE *)(a1 + 393) = 0;
  }
  *(_BYTE *)(a1 + 394) = v2;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
  v9 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(a1 + 80) - 1;
    LODWORD(v10) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8))
                                      + ((v10 & 0x3F) << 6)
                                      + 52);
    v11 = *(unsigned __int8 *)(a1 + 393);
    v12 = *(unsigned __int8 *)(a1 + 394);
    *(_DWORD *)buf = 67109632;
    v23 = v10;
    v24 = 1024;
    v25 = v11;
    v26 = 1024;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,BaroQuality,%d,DEMSourceAvailable,%d,GPSSourceAvailable,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v13 = *(unsigned __int8 *)(a1 + 393);
    v14 = *(unsigned __int8 *)(a1 + 394);
    v18 = 1024;
    v19 = v13;
    v20 = 1024;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevationFusion,BaroQuality,%d,DEMSourceAvailable,%d,GPSSourceAvailable,%d", &v17, 20, 67109632);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutElevationFusion::updateSourceAvailability()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_10119EF60(_QWORD *a1, double a2, double a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;

  v4 = a1[11];
  if (v4 >= 2)
  {
    v5 = v4 + a1[10];
    v6 = a1[7];
    v7 = *(_QWORD *)(v6 + (((v5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v5 - 1) & 0x3F) << 6);
    v8 = *(_QWORD *)(v6 + (((v5 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v5 - 2) & 0x3F) << 6);
    LODWORD(a2) = *(_DWORD *)(v7 + 16);
    LODWORD(a3) = *(_DWORD *)(v7 + 20);
    *(double *)&v9 = (double)*(unint64_t *)&a2;
    *(double *)&v10 = (double)*(unint64_t *)&a3;
    v11 = *(double *)&v9 - *(double *)&v10;
    LODWORD(v9) = *(_DWORD *)(v8 + 16);
    LODWORD(v10) = *(_DWORD *)(v8 + 20);
    v12 = (double)v9;
    v13 = (double)v10;
    v14 = a1[42];
    if (v14 >= 7)
    {
      ++a1[41];
      a1[42] = v14 - 1;
      sub_10047F604((uint64_t)(a1 + 37), 1);
    }
    v27 = (v11 + v13 - v12) / 100.0;
    sub_1000D796C(a1 + 37, &v27);
  }
  v15 = a1[5];
  if (v15 >= 2)
  {
    v16 = v15 + a1[4];
    v17 = a1[1];
    v18 = ((v16 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
    v19 = (v18 + ((v16 - 1 - v18) >> 1)) >> 4;
    v20 = *(_QWORD *)(v17 + 8 * v19) + 192 * (v16 - 1 - 21 * v19);
    v21 = *(double *)(v20 + 96);
    v22 = *(double *)(v20 + 104);
    v23 = *(_QWORD *)(v17 + 8 * ((v16 - 2) / 0x15)) + 192 * ((v16 - 2) % 0x15);
    v24 = *(double *)(v23 + 96);
    v25 = *(double *)(v23 + 104);
    v26 = a1[48];
    if (v26 >= 7)
    {
      ++a1[47];
      a1[48] = v26 - 1;
      sub_10047F604((uint64_t)(a1 + 43), 1);
    }
    if (v22 <= 0.0 || v22 > 32.5 || v25 <= 0.0 || v25 > 32.5)
    {
      sub_1000D796C(a1 + 43, &dbl_101C43D70);
    }
    else
    {
      v27 = v21 - v24;
      sub_1000D796C(a1 + 43, &v27);
    }
  }
}

uint64_t sub_10119F13C(uint64_t a1)
{
  uint64_t v1;
  double Current;
  double v5;
  BOOL v6;
  double v7;
  unsigned int v9;
  int v10;
  double v11;
  _BOOL4 v12;
  int v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  double v23;
  __int16 v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;

  v1 = 0;
  *(_BYTE *)(a1 + 599) = 0;
  if (*(_BYTE *)(a1 + 640))
    return v1;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 400);
  v6 = v5 <= 0.0;
  v7 = vabdd_f64(Current, v5);
  if (!v6 && v7 < 25.0)
  {
    if (*(_DWORD *)(a1 + 576) == 4)
    {
      v11 = *(double *)(a1 + 584);
      v12 = v11 <= 1.0 && v11 >= 0.0;
    }
    else
    {
      v12 = 0;
    }
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v15 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      v16 = *(_DWORD *)(a1 + 576);
      v17 = *(_QWORD *)(a1 + 584);
      *(_DWORD *)buf = 134218752;
      v31 = Current;
      v32 = 1024;
      v33 = v12;
      v34 = 1024;
      v35 = v16;
      v36 = 2048;
      v37 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "WorkoutElevationFusion,timestamp,%.3f,onRunningTrack,%d,proximity,%u,distanceToTrackMeters,%.1f", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v18 = *(_DWORD *)(a1 + 576);
      v19 = *(_QWORD *)(a1 + 584);
      v22 = 134218752;
      v23 = Current;
      v24 = 1024;
      v25 = v12;
      v26 = 1024;
      v27 = v18;
      v28 = 2048;
      v29 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevationFusion,timestamp,%.3f,onRunningTrack,%d,proximity,%u,distanceToTrackMeters,%.1f", COERCE_DOUBLE(&v22), 34);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLElevationSource CLWorkoutElevationFusion::chooseSource()", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    if (v12)
      return 4;
  }
  if (!*(_QWORD *)(a1 + 88))
    return 1000;
  if ((sub_1001B7910() & 0x1000000000) == 0)
    return 1;
  v9 = *(_DWORD *)(a1 + 624);
  if (v9 < 8)
  {
    if (v9 > 2)
      goto LABEL_22;
    v13 = *(_DWORD *)(a1 + 628);
    if (v13 <= 1)
      v13 = 1;
    v10 = v13 - 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 600) < 0x14u)
      goto LABEL_22;
    v10 = 75;
  }
  *(_DWORD *)(a1 + 628) = v10;
LABEL_22:
  if (*(_DWORD *)(a1 + 600) <= 0xCu)
    *(_DWORD *)(a1 + 628) = 0;
  v14 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(a1 + 80) - 1;
  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8))
                          + ((v14 & 0x3F) << 6)
                          + 52);
  if ((_DWORD)v1 != 1)
  {
    if ((_DWORD)v1 == 3)
    {
      if (*(_BYTE *)(a1 + 393))
      {
        *(_BYTE *)(a1 + 599) = 1;
        return 2;
      }
      return 1000;
    }
    if (*(_BYTE *)(a1 + 393))
    {
      v1 = 1;
      if (!sub_1011A0600((_BYTE *)a1, a1 + 192))
      {
        if (sub_1011A09E8((_QWORD *)a1, (_QWORD *)(a1 + 344)))
          return 1;
        else
          return 2;
      }
    }
    else
    {
      v1 = 1;
      *(_BYTE *)(a1 + 599) = 1;
    }
  }
  return v1;
}

void sub_10119F4A4(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  unint64_t v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v51;
  uint8_t *v52;
  double v53;
  _DWORD v54[2];
  __int16 v55;
  double v56;
  uint8_t buf[4];
  int v58;
  __int16 v59;
  double v60;

  v6 = *(_QWORD *)(a1 + 88);
  v7 = 0.0;
  if (v6 < 2)
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v20 = -1.0;
    v19 = 0.0;
    v18 = -1.0;
    v17 = 0.0;
    v23 = -1.0;
    v22 = 0.0;
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + (((v6 + *(_QWORD *)(a1 + 80) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
       + (((v6 + *(_QWORD *)(a1 + 80) - 1) & 0x3F) << 6);
    v9 = *(_DWORD *)(v8 + 16);
    v10 = *(_DWORD *)(v8 + 20);
    v11 = *(unsigned __int8 *)(v8 + 52);
    v12 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = ((unint64_t)(v12 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
    v15 = (v14 + ((unint64_t)(v12 - 1 - v14) >> 1)) >> 4;
    v16 = (double *)(*(_QWORD *)(v13 + 8 * v15) + 192 * (v12 - 1 - 21 * v15));
    v17 = v16[12];
    v18 = v16[13];
    v19 = v16[14];
    v20 = v16[15];
    v21 = *(_QWORD *)(v13 + 8 * ((v12 - 2) / 0x15uLL)) + 192 * ((v12 - 2) % 0x15uLL);
    v22 = *(double *)(v21 + 96);
    v23 = *(double *)(v21 + 104);
  }
  switch(a2)
  {
    case 0:
      if (!*(_DWORD *)(a1 + 396))
      {
        v24 = *(_QWORD *)(a1 + 184);
        if (v24 >= 2)
        {
          v25 = v24 + *(_QWORD *)(a1 + 176);
          v26 = *(_QWORD *)(a1 + 152);
          v27 = *(_QWORD *)(v26 + (((v25 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v25 - 1) & 0x3F) << 6);
          v28 = *(_QWORD *)(v26 + (((v25 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v25 - 2) & 0x3F) << 6);
          LODWORD(v19) = *(_DWORD *)(v27 + 16);
          LODWORD(v17) = *(_DWORD *)(v27 + 20);
          *(double *)&v29 = (double)*(unint64_t *)&v17;
          v19 = (double)*(unint64_t *)&v19 - *(double *)&v29;
          LODWORD(v29) = *(_DWORD *)(v28 + 16);
          LODWORD(v22) = *(_DWORD *)(v28 + 20);
          v17 = (double)*(unint64_t *)&v22 - (double)v29;
          v7 = v19 + v17;
          ++*(_DWORD *)(a1 + 792);
        }
      }
      goto LABEL_46;
    case 1:
      if (v6 < 2)
        goto LABEL_45;
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + (((v6 + *(_QWORD *)(a1 + 80) - 2) >> 3) & 0x1FFFFFFFFFFFFFF8))
          + (((v6 + *(_QWORD *)(a1 + 80) - 2) & 0x3F) << 6);
      if (*(_BYTE *)(v30 + 52) == 3)
      {
        if (*(_DWORD *)(a1 + 396) != 2)
          goto LABEL_45;
        if (v18 <= 0.0)
          goto LABEL_45;
        HIDWORD(v19) = 1077952512;
        if (v18 > 32.5 || v23 <= 0.0 || v23 > 32.5)
          goto LABEL_45;
        v19 = v17 - v22;
        HIDWORD(v17) = 1079574528;
        v7 = v19 * 100.0;
        ++*(_DWORD *)(a1 + 760);
      }
      else
      {
        *(double *)&v39 = (double)v10;
        v19 = (double)v9 - (double)v10;
        LODWORD(v39) = *(_DWORD *)(v30 + 16);
        LODWORD(v22) = *(_DWORD *)(v30 + 20);
        v17 = (double)*(unint64_t *)&v22 - (double)v39;
        v7 = v19 + v17;
        if (v11 == 2)
        {
          if (*(_BYTE *)(a1 + 393))
          {
            if (*(_BYTE *)(a1 + 598))
              ++*(_DWORD *)(a1 + 744);
            else
              ++*(_DWORD *)(a1 + 752);
          }
          else
          {
            ++*(_DWORD *)(a1 + 756);
          }
        }
        else if (v11 == 1)
        {
          ++*(_DWORD *)(a1 + 740);
        }
      }
      goto LABEL_46;
    case 2:
      v31 = *(_DWORD *)(a1 + 396);
      if (v31 == 3)
      {
        v17 = 20.0;
        if (v20 <= 0.0 || v20 > 20.0)
          goto LABEL_45;
        switch(v11)
        {
          case 3:
            ++*(_DWORD *)(a1 + 776);
            break;
          case 2:
            ++*(_DWORD *)(a1 + 772);
            break;
          case 1:
            ++*(_DWORD *)(a1 + 768);
            break;
        }
        v19 = v19 - *(double *)(a1 + 632);
      }
      else
      {
        if (v31 != 2)
        {
          if (v31 != 1)
            goto LABEL_45;
          if (v23 <= 0.0)
            goto LABEL_45;
          HIDWORD(v19) = 1077952512;
          if (v23 > 32.5)
            goto LABEL_45;
        }
        if (v11 == 3)
          ++*(_DWORD *)(a1 + 760);
        else
          ++*(_DWORD *)(a1 + 748);
        v19 = v17 - v22;
      }
      HIDWORD(v17) = 1079574528;
      v7 = v19 * 100.0;
      goto LABEL_46;
    case 3:
      if (*(_DWORD *)(a1 + 396) == 3)
      {
        v17 = 20.0;
        if (v20 > 0.0 && v20 <= 20.0)
        {
          switch(v11)
          {
            case 3:
              ++*(_DWORD *)(a1 + 776);
              break;
            case 2:
              ++*(_DWORD *)(a1 + 772);
              break;
            case 1:
              ++*(_DWORD *)(a1 + 768);
              break;
          }
          v17 = v19 - *(double *)(a1 + 632);
          v7 = v17 * 100.0;
          *(double *)(a1 + 632) = v19;
          goto LABEL_46;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 128);
        v34 = v33 + *(_QWORD *)(a1 + 136);
        v35 = *(_QWORD *)(a1 + 104);
        v36 = *(_QWORD *)(a1 + 112);
        v37 = (_QWORD *)(v35 + 8 * (v34 / 0x15));
        if (v36 == v35)
          v38 = 0;
        else
          v38 = *v37 + 192 * (v34 % 0x15);
        v46 = v33 / 0x15;
        v47 = v33 % 0x15;
        v19 = 20.0;
        while (1)
        {
          v48 = v36 == v35 ? 0 : *(_QWORD *)(v35 + 8 * v46) + 192 * v47;
          if (v38 == v48)
            break;
          if (v38 == *v37)
          {
            v49 = *--v37;
            v17 = *(double *)(v49 + 3960);
            v38 = v49 + 4032;
          }
          else
          {
            v17 = *(double *)(v38 - 72);
          }
          if (v17 > 0.0 && v17 <= 20.0)
          {
            v19 = *(double *)(v38 - 80);
            *(double *)(a1 + 632) = v19;
            break;
          }
          v38 -= 192;
        }
      }
      switch(v11)
      {
        case 3:
          ++*(_DWORD *)(a1 + 788);
          break;
        case 2:
          ++*(_DWORD *)(a1 + 784);
          break;
        case 1:
          ++*(_DWORD *)(a1 + 780);
          break;
      }
LABEL_46:
      ++*(_DWORD *)(a1 + 736);
      *(_DWORD *)(a1 + 712) = a2;
      if (*(_BYTE *)(a1 + 599) && (HIDWORD(v19) = 1081671680, v7 > 400.0))
      {
        v7 = 400.0;
      }
      else if (v7 <= 0.0)
      {
        LODWORD(v17) = *(_DWORD *)(a1 + 692);
        *(_DWORD *)(a1 + 692) = (fabs(v7) + (double)*(unint64_t *)&v17);
        if (a2)
          goto LABEL_51;
        goto LABEL_53;
      }
      LODWORD(v19) = *(_DWORD *)(a1 + 688);
      *(_DWORD *)(a1 + 688) = (v7 + (double)*(unint64_t *)&v19);
      if (a2)
      {
LABEL_51:
        v41 = v6 + *(_QWORD *)(a1 + 80) - 1;
        v42 = (_QWORD *)(a1 + 56);
        goto LABEL_54;
      }
LABEL_53:
      v41 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(a1 + 176) - 1;
      v42 = (_QWORD *)(a1 + 152);
LABEL_54:
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(*(_QWORD *)(*v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8))
                                        + ((v41 & 0x3F) << 6)
                                        + 8);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v43 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        v58 = a2;
        v59 = 2048;
        v60 = v7;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,source,%d,deltaH,%f", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
        v54[0] = 67109376;
        v54[1] = a2;
        v55 = 2048;
        v56 = v7;
        LODWORD(v53) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevationFusion,source,%d,deltaH,%f", v54, v53);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "CLElevationChangeEntry CLWorkoutElevationFusion::fuseElevation(CLElevationSource)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      v44 = *(_OWORD *)(a1 + 688);
      *a3 = *(_OWORD *)(a1 + 672);
      a3[1] = v44;
      v45 = *(_OWORD *)(a1 + 720);
      a3[2] = *(_OWORD *)(a1 + 704);
      a3[3] = v45;
      return;
    case 4:
      ++*(_DWORD *)(a1 + 796);
      goto LABEL_46;
    default:
      if (a2 == 1000)
LABEL_45:
        ++*(_DWORD *)(a1 + 764);
      goto LABEL_46;
  }
}

uint64_t sub_10119FC64(uint64_t result)
{
  *(_BYTE *)(result + 656) = 0;
  return result;
}

double sub_10119FC6C(uint64_t a1, uint64_t a2)
{
  int v4;
  float v5;
  double v6;
  NSObject *v7;
  double v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  float v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v23;
  double v24;
  int v25;
  int v26;
  const char *v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  int v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  _BYTE v36[12];
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  double v57;
  double v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  if (!*(_BYTE *)(a1 + 656))
  {
    sub_10107C538(&v59, 0);
    if (sub_10107CD04((uint64_t)&v59))
    {
      v16 = v58;
      *(float *)(a1 + 644) = sub_10024806C(v16, 101320.0);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v17 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v46 = v57;
        v47 = 2048;
        v48 = v58;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "updateWatchPressureWithPhoneElevationChange: timestamp,%f,pressure,%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
        *(_DWORD *)v36 = 134218240;
        *(double *)&v36[4] = v57;
        v37 = 2048;
        v38 = v58;
        LODWORD(v35) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "updateWatchPressureWithPhoneElevationChange: timestamp,%f,pressure,%f", COERCE_DOUBLE(v36), v35);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      if (*(double *)(a2 + 8) >= v57)
      {
        *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 656) = 1;
        if (*(_BYTE *)(a1 + 392))
        {
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
          v23 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(float *)(a1 + 644);
            v25 = *(_DWORD *)(a1 + 648);
            v26 = *(_DWORD *)(a1 + 652);
            *(_DWORD *)buf = 134219008;
            v46 = v57;
            v47 = 2048;
            v48 = v58;
            v49 = 2048;
            v50 = v24;
            v51 = 1024;
            v52 = v25;
            v53 = 1024;
            v54 = v26;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "set baseline elevation changes,timestamp,%f,pressure,%f,elevation,%f,ascend,%d,descend,%d", buf, 0x2Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
            v30 = *(float *)(a1 + 644);
            v31 = *(_DWORD *)(a1 + 648);
            v32 = *(_DWORD *)(a1 + 652);
            *(_DWORD *)v36 = 134219008;
            *(double *)&v36[4] = v57;
            v37 = 2048;
            v38 = v58;
            v39 = 2048;
            v40 = v30;
            v41 = 1024;
            v42 = v31;
            v43 = 1024;
            v44 = v32;
            LODWORD(v35) = 44;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "set baseline elevation changes,timestamp,%f,pressure,%f,elevation,%f,ascend,%d,descend,%d", COERCE_DOUBLE(v36), v35);
            v34 = (uint8_t *)v33;
            sub_100512490("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v33);
            if (v34 != buf)
              free(v34);
          }
        }
        sub_10107C5F4(&v59);
        goto LABEL_2;
      }
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v18 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "updateWatchPressureWithPhoneElevationChange: phone startTime rolls back from the endTime of the most recent record", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_32:
        sub_10107C5F4(&v59);
        return -1.0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      *(_WORD *)v36 = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "updateWatchPressureWithPhoneElevationChange: phone startTime rolls back from the endTime of the most recent record", v36, *(_QWORD *)&v35);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v19);
    }
    else
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v21 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "updateWatchPressureWithPhoneElevationChange: cannot fetch the most recent query", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_32;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      *(_WORD *)v36 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "updateWatchPressureWithPhoneElevationChange: cannot fetch the most recent query", v36, 2);
      v20 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v27);
    }
    if (v20 != buf)
      free(v20);
    goto LABEL_32;
  }
LABEL_2:
  v4 = *(_DWORD *)(a1 + 652) - *(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 648);
  v5 = *(float *)(a1 + 644) + (float)((float)v4 / 100.0);
  v6 = sub_1013D3670(v5, 101320.0);
  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v7 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(double *)(a2 + 8);
      v9 = *(_DWORD *)(a2 + 16);
      v10 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)buf = 134219264;
      v46 = v8;
      v47 = 2048;
      v48 = v6;
      v49 = 2048;
      v50 = v5;
      v51 = 1024;
      v52 = v4;
      v53 = 1024;
      v54 = v9;
      v55 = 1024;
      v56 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "compensate watch pressure,timestamp,%f,pressure,%f,elevation,%f,cmHeightDelta,%d,phoneAscend,%d,phoneDescend,%d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_DWORD *)(a2 + 16);
      v13 = *(_DWORD *)(a2 + 20);
      v59 = 134219264;
      v60 = v11;
      v61 = 2048;
      v62 = v6;
      v63 = 2048;
      v64 = v5;
      v65 = 1024;
      v66 = v4;
      v67 = 1024;
      v68 = v12;
      v69 = 1024;
      v70 = v13;
      LODWORD(v35) = 50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "compensate watch pressure,timestamp,%f,pressure,%f,elevation,%f,cmHeightDelta,%d,phoneAscend,%d,phoneDescend,%d", COERCE_DOUBLE(&v59), v35, *(double *)v36, *(_DWORD *)&v36[8], *(_DWORD *)((char *)&v38 + 2), LODWORD(v40));
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  return v6;
}

void sub_1011A04E8(_Unwind_Exception *a1)
{
  sub_10107C5F4(&STACK[0x6E0]);
  _Unwind_Resume(a1);
}

void sub_1011A0514(uint64_t a1, double *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;

  if (*a2 != *(double *)(a1 + 96))
    ++*(_DWORD *)(a1 + 88);
  v5 = sub_10009E97C((uint64_t **)(a1 + 64), a2);
  sub_10009EA08((_QWORD *)(a1 + 16), &v5);
  if (*(_QWORD *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(_QWORD *)(a1 + 48) & 0x1FFLL));
    if (*(double *)(v3 + 32) != *(double *)(a1 + 96))
    {
      v4 = *(_DWORD *)(a1 + 88);
      if (v4 <= 1)
        v4 = 1;
      *(_DWORD *)(a1 + 88) = v4 - 1;
    }
    sub_10008A9F0((uint64_t **)(a1 + 64), (uint64_t *)v3);
    operator delete((void *)v3);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_101B9DFC0);
    sub_10047F604(a1 + 16, 1);
  }
}

BOOL sub_1011A0600(_BYTE *a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  BOOL v27;
  NSObject *v28;
  int v29;
  int v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD v42[2];
  __int16 v43;
  double v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint8_t buf[4];
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  uint64_t v56;

  v41 = 0xFFEFFFFFFFFFFFFFLL;
  if (*(_DWORD *)(a2 + 80) < 0xBu)
    return 0;
  sub_1011A1678((uint64_t)&v36, (_QWORD *)(a2 + 16));
  v5 = (uint64_t *)(v37 + 8 * ((unint64_t)(v39 + v40) >> 9));
  v6 = *v5;
  v7 = (v39 + v40) & 0x1FF;
  v8 = *v5 + 8 * v7;
  if (v38 == v37)
    v9 = 0;
  else
    v9 = *v5 + 8 * v7;
  v10 = v9 - v6;
  v11 = (v9 - v6) >> 3;
  if (v10 < 89)
    v12 = v5[-((unint64_t)(522 - v11) >> 9)] + 8 * (~(522 - (_WORD)v11) & 0x1FF);
  else
    v12 = *(uint64_t *)((char *)v5 + (((unint64_t)(v11 - 11) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((v11 - 11) & 0x1FF);
  if (v38 == v37)
    v13 = 0;
  else
    v13 = v8;
  if (v13 == v12)
  {
    v14 = 0;
    v23 = -INFINITY;
  }
  else
  {
    v14 = 0;
    v15 = -1.79769313e308;
    v16 = 1.79769313e308;
    v17 = *v5;
    v18 = v13;
    v19 = (uint64_t *)(v37 + 8 * ((unint64_t)(v39 + v40) >> 9));
    do
    {
      if (v18 == v17)
      {
        v21 = *--v19;
        v22 = *(double *)(*(_QWORD *)(v21 + 4088) + 32);
        if (v22 != -1.79769313e308)
        {
          if (v22 < v16)
            v16 = v22;
          if (v15 < v22)
            v15 = v22;
          ++v14;
        }
        v17 = *v19;
        v18 = *v19 + 4096;
      }
      else
      {
        v20 = *(double *)(*(_QWORD *)(v18 - 8) + 32);
        if (v20 != -1.79769313e308)
        {
          if (v20 < v16)
            v16 = *(double *)(*(_QWORD *)(v18 - 8) + 32);
          if (v15 < v20)
            v15 = *(double *)(*(_QWORD *)(v18 - 8) + 32);
          ++v14;
        }
      }
      v18 -= 8;
    }
    while (v18 != v12);
    v23 = v15 - v16;
  }
  v24 = dbl_101C43C50[a1[596] == 0];
  a1[596] = v23 < v24;
  if (v13 == v6)
    v13 = *(v5 - 1) + 4096;
  v25 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 32);
  sub_1011A15D8(a2, &v41);
  a1[597] = 0;
  v27 = v23 < v24 && v14 > 2;
  a1[598] = v27;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
  v28 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v29 = a1[598];
    *(_DWORD *)buf = 67109888;
    v50 = v29;
    v51 = 2048;
    v52 = v23;
    v53 = 2048;
    v54 = v41;
    v55 = 2048;
    v56 = v25;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,ResidualCheck,agree,%d,max-min,%f,median,%f,residual,%f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v31 = a1[598];
    v42[0] = 67109888;
    v42[1] = v31;
    v43 = 2048;
    v44 = v23;
    v45 = 2048;
    v46 = v41;
    v47 = 2048;
    v48 = v25;
    LODWORD(v34) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevationFusion,ResidualCheck,agree,%d,max-min,%f,median,%f,residual,%f", v42, v34, v35, v36);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutElevationFusion::baroAgreesWith(const T &) [T = CLFlexibleMedianFilter<double>]", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  v2 = a1[598] != 0;
  sub_10047F25C(&v36);
  return v2;
}

void sub_1011A09C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10047F25C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1011A09E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double **v8;
  double *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  _QWORD *v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  double *v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  double *v34;
  uint64_t v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  NSObject *v45;
  const char *v46;
  uint8_t *v47;
  double v48;
  int v49;
  double v50;
  __int16 v51;
  double v52;
  uint8_t buf[4];
  double v54;
  __int16 v55;
  double v56;

  v2 = a1[42];
  if (v2)
    v3 = a2[5] == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v5 = a2[4];
  v6 = a2[1];
  v7 = a2[2];
  v8 = (double **)(v6 + 8 * (v5 >> 9));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = &(*v8)[a2[4] & 0x1FFLL];
  v10 = a1[41];
  v11 = a1[38];
  v12 = a1[39];
  v13 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  if (v12 == v11)
  {
    v15 = v10 + v2;
    v16 = (_QWORD *)(v11 + 8 * (v15 >> 9));
  }
  else
  {
    v14 = (double *)(*v13 + 8 * (a1[41] & 0x1FFLL));
    v15 = v10 + v2;
    v16 = (_QWORD *)(v11 + 8 * (v15 >> 9));
    v17 = *v16 + 8 * (v15 & 0x1FF);
    if (v14 != (double *)v17)
    {
      v18 = *v8;
      v19 = 0.0;
      v20 = 0.0;
      v21 = 0.0;
      v22 = v6 + 8 * (v5 >> 9);
      v23 = 0.0;
      v24 = (_QWORD *)(v11 + 8 * (v10 >> 9));
      do
      {
        v25 = *v9++;
        v26 = v25;
        if (v25 == -1.79769313e308)
          v26 = -0.0;
        else
          v23 = v23 + 1.0;
        v27 = *v14;
        if (*v14 == -1.79769313e308)
          v27 = -0.0;
        else
          v21 = v21 + 1.0;
        if ((char *)v9 - (char *)v18 == 4096)
        {
          v28 = *(double **)(v22 + 8);
          v22 += 8;
          v18 = v28;
          v9 = v28;
        }
        if ((double *)((char *)++v14 - *v24) == (double *)4096)
        {
          v29 = (double *)v24[1];
          ++v24;
          v14 = v29;
        }
        v20 = v20 + v26;
        v19 = v19 + v27;
      }
      while (v14 != (double *)v17);
      v30 = v19 / v21;
      v31 = 0.0;
      if (v21 <= 0.0)
        v30 = 0.0;
      if (v23 > 0.0)
        v31 = v20 / v23;
      goto LABEL_30;
    }
  }
  v30 = 0.0;
  v31 = 0.0;
LABEL_30:
  if (v7 == v6)
    v32 = 0;
  else
    v32 = &(*v8)[v5 & 0x1FF];
  v33 = 0.0;
  if (v12 == v11)
  {
    v36 = 0.0;
  }
  else
  {
    v34 = (double *)(*v13 + 8 * (v10 & 0x1FF));
    v35 = *v16 + 8 * (v15 & 0x1FF);
    v36 = 0.0;
    if (v34 != (double *)v35)
    {
      v37 = *v8;
      do
      {
        v38 = *v32++;
        v39 = vabdd_f64(v38, v31);
        if (v38 == -1.79769313e308)
          v40 = -0.0;
        else
          v40 = v39;
        v41 = vabdd_f64(*v34, v30);
        if (*v34 == -1.79769313e308)
          v42 = -0.0;
        else
          v42 = v41;
        if ((char *)v32 - (char *)v37 == 4096)
        {
          v43 = v8[1];
          ++v8;
          v37 = v43;
          v32 = v43;
        }
        if ((double *)((char *)++v34 - *v13) == (double *)4096)
        {
          v44 = (double *)v13[1];
          ++v13;
          v34 = v44;
        }
        v36 = v36 + v40;
        v33 = v33 + v42;
      }
      while (v34 != (double *)v35);
    }
  }
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
  v45 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v54 = v33;
    v55 = 2048;
    v56 = v36;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,VariabilityCheck,Baro,%f,Source,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v49 = 134218240;
    v50 = v33;
    v51 = 2048;
    v52 = v36;
    LODWORD(v48) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevationFusion,VariabilityCheck,Baro,%f,Source,%f", COERCE_DOUBLE(&v49), v48);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutElevationFusion::baroLessVariable(const std::deque<double> &) const", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  return v33 < v36 + 1.5;
}

double sub_1011A0DCC(_DWORD *a1, int a2)
{
  unsigned int *v3;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  uint64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int32x4_t v33;
  float64x2_t v34;
  __int128 v35;
  float64x2_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  double result;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  const char *v60;
  uint8_t *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  void **v67;
  uint64_t v68;
  NSDictionary *(*v69)(uint64_t);
  void *v70;
  _DWORD *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  uint8_t buf[4];
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;

  v3 = a1 + 184;
  if (a1[184])
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      v6 = a1[185];
      v7 = a1[186];
      v8 = a1[187];
      v9 = a1[188];
      v10 = a1[189];
      v11 = a1[190];
      v12 = a1[191];
      v13 = a1[192];
      v14 = a1[193];
      v15 = a1[194];
      v16 = a1[195];
      v17 = a1[196];
      v18 = a1[197];
      v19 = a1[200];
      v20 = a1[201];
      v21 = a1[202];
      v22 = a1[203];
      v23 = a1[204];
      v24 = a1[198];
      v25 = a1[199];
      *(_DWORD *)buf = 67114240;
      v106 = a2;
      v107 = 1024;
      v108 = v6;
      v109 = 1024;
      v110 = v7;
      v111 = 1024;
      v112 = v8;
      v113 = 1024;
      v114 = v9;
      v115 = 1024;
      v116 = v10;
      v117 = 1024;
      v118 = v11;
      v119 = 1024;
      v120 = v12;
      v121 = 1024;
      v122 = v13;
      v123 = 1024;
      v124 = v14;
      v125 = 1024;
      v126 = v15;
      v127 = 1024;
      v128 = v16;
      v129 = 1024;
      v130 = v17;
      v131 = 1024;
      v132 = v18;
      v133 = 1024;
      v134 = v19;
      v135 = 1024;
      v136 = v20;
      v137 = 1024;
      v138 = v21;
      v139 = 1024;
      v140 = v22;
      v141 = 1024;
      v142 = v23;
      v143 = 1024;
      v144 = v24;
      v145 = 1024;
      v146 = v25;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WorkoutElevationFusion,WorkoutType,%d,BaroGood,%d,BaroUnkDEMAgree,%d,DEMBaroUnk,%d,BaroUnkDEMDisagree,%d,BaroUnkNoDEM,%d,DEMBaroBad,%d,None,%d,GPSBaroGood,%d,GPSBaroUnk,%d,GPSBaroBad,%d,GPSUnvailBaroGood,%d,GPSUnvailBaroUnk,%d,GPSUnvailBaroBad,%d,TransBaroDEM,%d,TransToGPS,%d,TransBaroToNone,%d,TransDEMToNone,%d,TransGPSToNone,%d,PhoneSource,%d,RunningTrackSource,%d", buf, 0x80u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A4DD0);
      v41 = a1[185];
      v42 = a1[186];
      v43 = a1[187];
      v44 = a1[189];
      v45 = a1[190];
      v46 = a1[191];
      v47 = a1[192];
      v48 = a1[193];
      v49 = a1[194];
      v50 = a1[195];
      v51 = a1[196];
      v52 = a1[197];
      v53 = a1[200];
      v54 = a1[201];
      v55 = a1[202];
      v56 = a1[203];
      v57 = a1[204];
      v58 = a1[198];
      v59 = a1[199];
      LOWORD(v73) = 1024;
      HIWORD(v73) = v41;
      LOWORD(v74) = HIWORD(v43);
      HIWORD(v74) = 1024;
      LOWORD(v75) = 1024;
      HIWORD(v75) = v44;
      v76 = v45;
      v77 = 1024;
      v78 = v46;
      v79 = 1024;
      v80 = v47;
      v81 = 1024;
      v82 = v48;
      v83 = 1024;
      v84 = v49;
      v85 = 1024;
      v86 = v50;
      v87 = 1024;
      v88 = v51;
      v89 = 1024;
      v90 = v52;
      v91 = 1024;
      v92 = v53;
      v93 = 1024;
      v94 = v54;
      v95 = 1024;
      v96 = v55;
      v97 = 1024;
      v98 = v56;
      v99 = 1024;
      v100 = v57;
      v101 = 1024;
      v102 = v58;
      v103 = 1024;
      v104 = v59;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevationFusion,WorkoutType,%d,BaroGood,%d,BaroUnkDEMAgree,%d,DEMBaroUnk,%d,BaroUnkDEMDisagree,%d,BaroUnkNoDEM,%d,DEMBaroBad,%d,None,%d,GPSBaroGood,%d,GPSBaroUnk,%d,GPSBaroBad,%d,GPSUnvailBaroGood,%d,GPSUnvailBaroUnk,%d,GPSUnvailBaroBad,%d,TransBaroDEM,%d,TransToGPS,%d,TransBaroToNone,%d,TransDEMToNone,%d,TransGPSToNone,%d,PhoneSource,%d,RunningTrackSource,%d", &v72, 128, (_DWORD)v62, DWORD2(v62), (_DWORD)v63, DWORD2(v63), (_DWORD)v64, DWORD2(v64),
        (_DWORD)v65,
        DWORD2(v65),
        v66,
        (_DWORD)v67,
        v68,
        (_DWORD)v69,
        (_DWORD)v70,
        (_DWORD)v71,
        67114240,
        v73,
        v42,
        v74,
        v75);
      v61 = (uint8_t *)v60;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutElevationFusion::logAndClearStatistics(CLMotionActivity::Type)", "%s\n", v60);
      if (v61 != buf)
        free(v61);
    }
    v26 = *v3;
    if (*v3 >= 0x2BD)
    {
      v27 = *(_OWORD *)(a1 + 185);
      v28 = *(_OWORD *)(a1 + 189);
      v29.i64[0] = DWORD2(v27);
      v29.i64[1] = HIDWORD(v27);
      v30 = vcvtq_f64_u64(v29);
      v29.i64[0] = v27;
      v29.i64[1] = DWORD1(v27);
      v31 = (float64x2_t)vdupq_n_s64(0x4085E00000000000uLL);
      v32 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v26), 0);
      v33 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))), (int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(v30, v31), v32))));
      v29.i64[0] = DWORD2(v28);
      v29.i64[1] = HIDWORD(v28);
      v34 = vcvtq_f64_u64(v29);
      v29.i64[0] = v28;
      v29.i64[1] = DWORD1(v28);
      *(int32x4_t *)(a1 + 185) = v33;
      *(int32x4_t *)(a1 + 189) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))), (int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(v34, v31), v32))));
      v35 = *(_OWORD *)(a1 + 193);
      v29.i64[0] = DWORD2(v35);
      v29.i64[1] = HIDWORD(v35);
      v36 = vcvtq_f64_u64(v29);
      v29.i64[0] = v35;
      v29.i64[1] = DWORD1(v35);
      *(int32x4_t *)(a1 + 193) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))), (int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(v36, v31), v32))));
      *(_QWORD *)&v35 = *(_QWORD *)(a1 + 197);
      v29.i64[0] = v35;
      v29.i64[1] = DWORD1(v35);
      *(int32x2_t *)&v35 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))));
      *(_QWORD *)(a1 + 197) = v35;
      LODWORD(v35) = a1[199];
      a1[199] = vcvtpd_u64_f64((double)(unint64_t)v35 * 700.0 / (double)v26);
    }
    v67 = _NSConcreteStackBlock;
    v68 = 3221225472;
    v69 = sub_1011A1304;
    v70 = &unk_102131FE8;
    v71 = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.Motion.Altimeter.WorkoutElevationFusion"), &v67);
    v37 = sub_10009ED0C();
    v38 = *((_OWORD *)v3 + 1);
    v62 = *(_OWORD *)v3;
    v63 = v38;
    v39 = *((_OWORD *)v3 + 3);
    v64 = *((_OWORD *)v3 + 2);
    v65 = v39;
    sub_10134D324(v37, &v62);
  }
  result = 0.0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)a1 + 50) = 0u;
  a1[204] = 0;
  return result;
}

NSDictionary *sub_1011A1304(uint64_t a1)
{
  unsigned int *v1;
  _QWORD v3[16];
  _QWORD v4[16];

  v1 = *(unsigned int **)(a1 + 32);
  v3[0] = CFSTR("numBaroBadDEMAvailDEMUsed");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[190]);
  v3[1] = CFSTR("numBaroGoodBaroUsed");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[185]);
  v3[2] = CFSTR("numBaroUnkBaroDEMAgreeBaroUsed");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[186]);
  v3[3] = CFSTR("numBaroUnkBaroDEMDisagreeBaroUsed");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[188]);
  v3[4] = CFSTR("numBaroUnkBaroDEMDisagreeDEMUsed");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[187]);
  v3[5] = CFSTR("numBaroUnkDEMUnavailBaroUsed");
  v4[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[189]);
  v3[6] = CFSTR("numEpochs");
  v4[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[184]);
  v3[7] = CFSTR("numGPSSelectedGPSAvailGPSUsedBaroBad");
  v4[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[194]);
  v3[8] = CFSTR("numGPSSelectedGPSAvailGPSUsedBaroGood");
  v4[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[192]);
  v3[9] = CFSTR("numGPSSelectedGPSAvailGPSUsedBaroUnk");
  v4[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[193]);
  v3[10] = CFSTR("numGPSSelectedGPSUnavailNoUpdateBaroBad");
  v4[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[197]);
  v3[11] = CFSTR("numGPSSelectedGPSUnavailNoUpdateBaroGood");
  v4[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[195]);
  v3[12] = CFSTR("numGPSSelectedGPSUnavailNoUpdateBaroUnk");
  v4[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[196]);
  v3[13] = CFSTR("numNoSource");
  v4[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[191]);
  v3[14] = CFSTR("numPhoneSourceUsed");
  v4[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[198]);
  v3[15] = CFSTR("numRunningTrackUsed");
  v4[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[199]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 16);
}

void sub_1011A1538(uint64_t a1)
{
  sub_10047F1D4((_QWORD *)a1);
  *(_DWORD *)(a1 + 88) = 0;
}

void sub_1011A155C(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1011A1588(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213D2B0;
  sub_100008848(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10047F25C((_QWORD *)(a1 + 16));
  operator delete();
}

uint64_t sub_1011A15D8(uint64_t a1, _QWORD *a2)
{
  int v2;
  float v4;
  int v5;
  double *v6;
  int v7;
  double *v8;
  double *v9;
  BOOL v10;

  if (!*(_QWORD *)(a1 + 80))
    return 0;
  v2 = *(_DWORD *)(a1 + 88);
  if (v2 < 2)
    return 0;
  v4 = (double)v2 * 0.5;
  v5 = vcvtms_s32_f32(v4);
  v6 = *(double **)(a1 + 64);
  if (v5 < 1)
  {
    v9 = *(double **)(a1 + 64);
  }
  else
  {
    v7 = 0;
    do
    {
      if (v6[4] != *(double *)(a1 + 96))
        ++v7;
      v8 = (double *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (double *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v7 < v5);
  }
  *a2 = *((_QWORD *)v9 + 4);
  return 1;
}

uint64_t sub_1011A1678(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (uint64_t *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_1011A1720((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1011A170C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011A1720(_QWORD *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  return sub_1011A1754(a1, a2, a3, v5);
}

_QWORD *sub_1011A1754(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1011A1884(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  result = sub_100B4C468((uint64_t)v23, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = (_QWORD *)v14;
        do
        {
          v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v22 = v13[1];
      ++v13;
      v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_1011A1884(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1011A1D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011A1E0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  sub_100E8CB0C(a1, 2);
  *v3 = off_1021A4E48;
  v3[8] = a2;
}

BOOL sub_1011A1E48(uint64_t a1)
{
  return *(double *)(a1 + 24) > 50.0;
}

uint64_t (***sub_1011A1E60(uint64_t a1, double a2))(_QWORD, double *)
{
  uint64_t (***result)(_QWORD, double *);
  double v3;

  v3 = a2;
  result = *(uint64_t (****)(_QWORD, double *))(a1 + 64);
  if (result)
    return (uint64_t (***)(_QWORD, double *))(**result)(result, &v3);
  return result;
}

BOOL sub_1011A1E94(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24) > 50.0;
}

_QWORD *sub_1011A1EAC(_QWORD *a1, unsigned __int8 a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unsigned __int8 v12;

  v12 = a2;
  sub_1011A1F40(&v12, &v10);
  v3 = v11;
  *a1 = v10;
  a1[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = v11;
    if (v11)
    {
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return a1;
}

_QWORD *sub_1011A1F40@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1A0uLL);
  result = sub_1011A1F98(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011A1F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011A1F98(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021A4E90;
  sub_100D063BC(a1 + 3, *a2);
  return a1;
}

void sub_1011A1FD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1011A1FE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A4E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011A1FFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A4E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1011A2030(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

double sub_1011A20F4(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = 2.84809589e-306;
  *(_OWORD *)(a1 + 100) = xmmword_101C43E00;
  return result;
}

uint64_t sub_1011A2118(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  v6 = (void **)(a1 + 72);
  sub_10025E1F0(&v6);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_1011A2184(uint64_t a1)
{
  return (-1030792151 * *(_DWORD *)(a1 + 96) + 85899345) <= 0xA3D70A2
      && *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 6000;
}

unint64_t sub_1011A21CC(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float *v16;
  char *v17;
  int v18;
  float *v19;
  unint64_t result;
  float *v21;
  size_t v22;
  float *v23;

  v6 = a2 + 16;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(float **)(a2 + 8);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(float **)a2;
    v11 = ((uint64_t)v8 - *(_QWORD *)a2) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      sub_100259694();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)sub_100260634(v6, v14);
      v10 = *(float **)a2;
      v8 = *(float **)(a2 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = (float *)&v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a3;
    v9 = v16 + 1;
    while (v8 != v10)
    {
      v18 = *((_DWORD *)v8-- - 1);
      *((_DWORD *)v16-- - 1) = v18;
    }
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = a3;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v19 = *(float **)a2;
  result = ((unint64_t)v9 - *(_QWORD *)a2) >> 2;
  if ((int)result >= 1501)
  {
    v21 = &v19[(result - 1500)];
    v22 = (char *)v9 - (char *)v21;
    if (v22)
      memmove(*(void **)a2, v21, v22);
    v23 = *(float **)a2;
    *(_QWORD *)(a2 + 8) = (char *)v19 + v22;
    result = (unint64_t)((char *)v19 + v22 - (char *)v23) >> 2;
  }
  *(_DWORD *)(a1 + 96) = (*(_DWORD *)(a1 + 96) + 1) % 25;
  return result;
}

double sub_1011A232C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  sub_10025E230((uint64_t *)(a1 + 72));
  *(_DWORD *)(a1 + 96) = 0;
  result = 2.84809589e-306;
  *(_OWORD *)(a1 + 100) = xmmword_101C43E00;
  return result;
}

void sub_1011A2378(float **a1@<X1>, float **a2@<X8>)
{
  float *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  int v29;
  float v30;
  float *v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  float *v38;
  float *v39;
  int v40;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v5 = (char *)a1[1] - (char *)*a1;
  v6 = v5 >> 2;
  if (v5)
  {
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v5 >> 2;
    v8 = 0.0;
    do
    {
      v9 = *v4++;
      v8 = v8 + fabsf(v9);
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = 0.0;
  }
  v10 = sub_100D35A10((uint64_t)a1);
  v11 = (float)v6;
  v12 = *a1;
  v13 = (char *)a1[1] - (char *)*a1;
  v14 = v13 >> 2;
  if (v13)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v13 >> 2;
    v16 = 0.0;
    do
    {
      v17 = *v12++;
      v16 = (float)(v17 - v10) * (float)(v17 - v10) + v16;
      --v15;
    }
    while (v15);
  }
  else
  {
    v16 = 0.0;
  }
  v18 = a2[2];
  v19 = a2[1];
  v20 = v8 / v11;
  if (v19 >= v18)
  {
    v22 = *a2;
    v23 = v19 - *a2;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      goto LABEL_50;
    v25 = (char *)v18 - (char *)v22;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      v27 = (char *)sub_100260634((uint64_t)(a2 + 2), v26);
      v22 = *a2;
      v19 = a2[1];
    }
    else
    {
      v27 = 0;
    }
    v28 = (float *)&v27[4 * v23];
    v18 = (float *)&v27[4 * v26];
    *v28 = v20;
    v21 = v28 + 1;
    while (v19 != v22)
    {
      v29 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v28-- - 1) = v29;
    }
    *a2 = v28;
    a2[1] = v21;
    a2[2] = v18;
    if (v22)
    {
      operator delete(v22);
      v18 = a2[2];
    }
  }
  else
  {
    *v19 = v20;
    v21 = v19 + 1;
  }
  v30 = v16 / (float)v14;
  a2[1] = v21;
  if (v21 < v18)
  {
    *v21 = v30;
    v31 = v21 + 1;
    goto LABEL_49;
  }
  v32 = *a2;
  v33 = v21 - *a2;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 62)
LABEL_50:
    sub_100259694();
  v35 = (char *)v18 - (char *)v32;
  if (v35 >> 1 > v34)
    v34 = v35 >> 1;
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
    v36 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v36 = v34;
  if (v36)
  {
    v37 = (char *)sub_100260634((uint64_t)(a2 + 2), v36);
    v32 = *a2;
    v21 = a2[1];
  }
  else
  {
    v37 = 0;
  }
  v38 = (float *)&v37[4 * v33];
  v39 = (float *)&v37[4 * v36];
  *v38 = v30;
  v31 = v38 + 1;
  while (v21 != v32)
  {
    v40 = *((_DWORD *)v21-- - 1);
    *((_DWORD *)v38-- - 1) = v40;
  }
  *a2 = v38;
  a2[1] = v31;
  a2[2] = v39;
  if (v32)
    operator delete(v32);
LABEL_49:
  a2[1] = v31;
}

void sub_1011A25A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A25C0(_QWORD *a1)
{
  float v2;
  void **v3;
  float *v4;
  uint64_t i;
  float v6;
  unint64_t v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  float *v15;
  int v16;
  char *v17;
  unint64_t v18;
  float *v19;
  int64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28[3];

  v2 = sub_100B4EDE0((uint64_t)a1);
  v3 = (void **)(a1 + 3);
  v4 = (float *)a1[4];
  for (i = 1475; i != 1500; ++i)
  {
    v6 = *(float *)(*a1 + 4 * i) - v2;
    v7 = a1[5];
    if ((unint64_t)v4 >= v7)
    {
      v8 = (float *)*v3;
      v9 = ((char *)v4 - (_BYTE *)*v3) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        sub_100259694();
      v11 = v7 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)sub_100260634((uint64_t)(a1 + 5), v12);
        v8 = (float *)a1[3];
        v4 = (float *)a1[4];
      }
      else
      {
        v13 = 0;
      }
      v14 = (float *)&v13[4 * v9];
      *v14 = v6;
      v15 = v14 + 1;
      while (v4 != v8)
      {
        v16 = *((_DWORD *)v4-- - 1);
        *((_DWORD *)v14-- - 1) = v16;
      }
      a1[3] = v14;
      a1[4] = v15;
      a1[5] = &v13[4 * v12];
      if (v8)
        operator delete(v8);
      v4 = v15;
    }
    else
    {
      *v4++ = v6;
    }
    a1[4] = v4;
  }
  v17 = (char *)*v3;
  v18 = (unint64_t)((char *)v4 - (_BYTE *)*v3) >> 2;
  if ((int)v18 < 501)
  {
    v21 = (char *)*v3;
  }
  else
  {
    v19 = (float *)&v17[4 * (v18 - 500)];
    v20 = (char *)v4 - (char *)v19;
    if (v4 != v19)
      memmove(*v3, v19, (char *)v4 - (char *)v19);
    v21 = (char *)*v3;
    v4 = (float *)&v17[v20];
    a1[4] = &v17[v20];
    v17 = v21;
  }
  if ((char *)v4 - v21 == 2000)
  {
    v26 = 0;
    v27 = 0;
    __p = 0;
    sub_10027205C(&__p, v17, (uint64_t)v4, 0x1F4uLL);
    sub_1011A2378((float **)&__p, (float **)v28);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    v22 = a1 + 9;
    v23 = a1[10];
    if (v23 >= a1[11])
    {
      v24 = sub_1011A2844(v22, (uint64_t)v28);
    }
    else
    {
      sub_100AA21E4((uint64_t)v22, (uint64_t)v28);
      v24 = v23 + 24;
    }
    a1[10] = v24;
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }
  }
}

void sub_1011A27C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  _QWORD *v12;

  if (__p)
  {
    *v12 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011A27F4(uint64_t result, float a2)
{
  float v2;

  v2 = *(float *)(result + 108);
  if (v2 > a2)
    v2 = a2;
  if (*(float *)(result + 112) >= a2)
    a2 = *(float *)(result + 112);
  *(float *)(result + 108) = v2;
  *(float *)(result + 112) = a2;
  return result;
}

uint64_t sub_1011A2810(uint64_t result, float a2)
{
  float v2;

  v2 = *(float *)(result + 100);
  if (v2 > a2)
    v2 = a2;
  if (*(float *)(result + 104) >= a2)
    a2 = *(float *)(result + 104);
  *(float *)(result + 100) = v2;
  *(float *)(result + 104) = a2;
  return result;
}

float sub_1011A282C(uint64_t a1)
{
  return *(float *)(a1 + 112) - *(float *)(a1 + 108);
}

float sub_1011A2838(uint64_t a1)
{
  return *(float *)(a1 + 104) - *(float *)(a1 + 100);
}

uint64_t sub_1011A2844(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_10027205C(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  sub_1011A2958(a1, v14);
  v12 = a1[1];
  sub_10025E974((uint64_t)v14);
  return v12;
}

void sub_1011A2944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011A2958(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1011A29CC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1011A29CC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1011A2A6C((uint64_t)v11);
  return v9;
}

uint64_t sub_1011A2A6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E930(a1);
  return a1;
}

double sub_1011A2AA0(double **a1, char a2)
{
  double *v2;
  double v3;
  double v4;
  double *v5;
  double v6;
  double v7;
  double result;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = a1[1];
  if (*a1 == v2)
    return 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v5 = *a1;
  do
  {
    v6 = *v5;
    v7 = v5[1];
    v5 += 2;
    v3 = v3 + v6 * v6;
    v4 = v4 + v6 * v7;
  }
  while (v5 != v2);
  if ((a2 & 1) == 0)
  {
    v9 = 0.0;
    v10 = 0.0;
    v11 = *a1;
    do
    {
      v13 = *v11;
      v12 = v11[1];
      v11 += 2;
      v10 = v10 + v12;
      v9 = v9 + v13;
    }
    while (v11 != v2);
    v14 = (double)(unint64_t)(((char *)v2 - (char *)*a1) >> 4);
    v15 = v14 * v3 - v9 * v9;
    if (v15 != 0.0)
      return (v10 * -v9 + v14 * v4) / v15;
    return 0.0;
  }
  result = v4 / v3;
  if (v3 <= 0.0)
    return 0.0;
  return result;
}

float *sub_1011A2B4C(float *result, unint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;

  if (a2)
  {
    v2 = 0;
    v3 = 0.0;
    do
      v3 = v3 + result[v2++];
    while (a2 != v2);
    v4 = v3 / (float)a2;
    do
    {
      *result = *result - v4;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_1011A2B90(uint64_t result, float *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;

  if (a3)
  {
    v4 = 0;
    v5 = a3;
    v6 = result;
    do
    {
      if (v5)
      {
        v7 = 0;
        v8 = 0.0;
        do
        {
          v8 = v8 + (float)(*(float *)(result + 4 * v7) * *(float *)(v6 + 4 * v7));
          ++v7;
        }
        while (v5 != v7);
      }
      else
      {
        v8 = 0.0;
      }
      --v5;
      v6 += 4;
      a2[v4++] = v8;
    }
    while (v4 != a3);
    if ((a4 & 1) != 0)
    {
      v9 = *a2;
      do
      {
        *a2 = *a2 / v9;
        ++a2;
        --a3;
      }
      while (a3);
    }
  }
  return result;
}

float sub_1011A2C08(uint64_t a1)
{
  return *(float *)a1;
}

float sub_1011A2C18(float *a1)
{
  return (float)((float)(*a1 + a1[1]) + a1[2]) / 1.7321;
}

float sub_1011A2C48(float *a1, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;

  v3 = 0;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v33 = *a1 - *a2;
  v34 = v5 - v8;
  v35 = v6 - v9;
  v10 = 0.0;
  do
  {
    v10 = v10 + (float)(*(float *)((char *)&v33 + v3) * *(float *)((char *)&v33 + v3));
    v3 += 4;
  }
  while (v3 != 12);
  v11 = 0;
  v12 = *a3;
  v13 = a3[1];
  v14 = v8 - v13;
  v15 = a3[2];
  v33 = v7 - *a3;
  v34 = v14;
  v35 = v9 - v15;
  v16 = 0.0;
  do
  {
    v16 = v16 + (float)(*(float *)((char *)&v33 + v11) * *(float *)((char *)&v33 + v11));
    v11 += 4;
  }
  while (v11 != 12);
  v17 = 0;
  v33 = v4 - v12;
  v34 = v5 - v13;
  v35 = v6 - v15;
  v18 = 0.0;
  v19 = sqrtf(v10);
  do
  {
    v18 = v18 + (float)(*(float *)((char *)&v33 + v17) * *(float *)((char *)&v33 + v17));
    v17 += 4;
  }
  while (v17 != 12);
  v20 = sqrtf(v16);
  v21 = sqrtf(v18);
  v22 = v19 + v20;
  v23 = log10f((float)(v19 + v20) - v21);
  v24 = -6.0;
  if (v23 >= -3.0)
  {
    v25 = v23;
    v26 = log10f(v19);
    v24 = 6.0;
    if (v26 >= -3.0)
    {
      v27 = v26;
      v28 = log10f(v20);
      if (v28 >= -3.0)
      {
        v29 = v25 + log10f((float)(v19 - v20) + v21);
        v30 = log10f((float)(v20 - v19) + v21) + v29;
        v31 = (float)-(float)(v27 - (float)((float)(log10f(v22 + v21) + v30) * 0.5)) - v28;
        return v31 - log10f(v21);
      }
    }
  }
  return v24;
}

BOOL sub_1011A2DE4(float *a1, float *a2, float a3)
{
  float v3;

  v3 = a1[1] - a2[1];
  return (float)((float)((float)((float)(a1[2] - a2[2]) * (float)(a1[2] - a2[2])) + (float)(v3 * v3))
               + (float)((float)(*a1 - *a2) * (float)(*a1 - *a2))) > (float)(a3 * a3);
}

double sub_1011A2E1C(double a1)
{
  double v1;

  v1 = round(a1 * 0.5);
  return v1 + v1;
}

double sub_1011A2E30(unsigned int a1, double a2)
{
  return round(a2 / (double)a1) * (double)a1;
}

double sub_1011A2E44(double a1, double a2, double a3, double a4, double a5)
{
  if (vabdd_f64(a2, a3) <= 0.001)
    return 0.0;
  else
    return (a1 - a2) / (a3 - a2) * a5 + (1.0 - (a1 - a2) / (a3 - a2)) * a4;
}

long double sub_1011A2E80(double a1, double a2, double a3)
{
  return 1.0 / a3 * 0.39894228 * exp(-((a1 - a2) * (a1 - a2)) / ((a3 + a3) * a3));
}

double sub_1011A2EC8(uint64_t a1, int a2)
{
  double v4;
  int v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  signed int v21;
  double *v22;
  double *v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  void *__p;
  double *v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  sub_10025EA00(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = (double)(int)((((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) - 1) * a2) / 100.0;
  v5 = (int)v4;
  if (v4 == (double)(int)v4)
  {
    v6 = (double *)__p;
    v7 = (double *)((char *)__p + 8 * v5);
    if (v7 != v32)
    {
      sub_100407418((double *)__p, v7, v32, v4);
      v6 = (double *)__p;
    }
    v8 = v6[v5];
LABEL_26:
    v32 = v6;
    operator delete(v6);
    return v8;
  }
  if (a2 < 50)
  {
    v21 = vcvtpd_s64_f64(v4);
    v6 = (double *)__p;
    v22 = (double *)((char *)__p + 8 * v21);
    if (v22 != v32)
    {
      sub_100407418((double *)__p, v22, v32, v4);
      v6 = (double *)__p;
    }
    v23 = v6;
    if (v21 >= 2)
    {
      v24 = v6 + 1;
      v25 = *v6;
      v26 = 8 * v21 - 8;
      v23 = v6;
      v27 = v6 + 1;
      do
      {
        v28 = *v27++;
        v29 = v28;
        if (v25 < v28)
        {
          v25 = v29;
          v23 = v24;
        }
        v24 = v27;
        v26 -= 8;
      }
      while (v26);
    }
    v20 = v6[v21];
    v14 = *v23;
  }
  else
  {
    v6 = (double *)__p;
    v9 = (double *)((char *)__p + 8 * v5);
    if (v9 != v32)
    {
      sub_100407418((double *)__p, v9, v32, v4);
      v6 = (double *)__p;
      v9 = v32;
    }
    v10 = &v6[v5];
    v11 = v10 + 1;
    v13 = *v10;
    v12 = v10 + 2;
    v14 = v13;
    if (v11 != v9 && v12 != v9)
    {
      v16 = *v11;
      v17 = v12;
      do
      {
        v18 = *v17++;
        v19 = v18;
        if (v18 < v16)
        {
          v16 = v19;
          v11 = v12;
        }
        v12 = v17;
      }
      while (v17 != v9);
    }
    v20 = *v11;
  }
  v8 = (v20 + v14) * 0.5;
  if (v6)
    goto LABEL_26;
  return v8;
}

void sub_1011A3064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1011A3088(uint64_t a1, int a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  double v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  double v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  signed int v26;
  double *v27;
  double *v28;
  double *v29;
  double v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double __y;
  void *__p;
  double *v38;
  uint64_t v39;

  v3 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - *(_QWORD *)a1;
  if (v4 == *(_QWORD *)a1)
    return -INFINITY;
  __p = 0;
  v38 = 0;
  v39 = 0;
  sub_10025EA00(&__p, v3, v4, v5 >> 3);
  v7 = (double)(int)((((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) - 1) * a2) / 100.0;
  v8 = (int)v7;
  if (v7 == (double)(int)v7)
  {
    v9 = (double *)__p;
    v10 = (double *)((char *)__p + 8 * v8);
    if (v10 != v38)
    {
      sub_100407418((double *)__p, v10, v38, (double)(int)v7);
      v9 = (double *)__p;
    }
    v11 = v9[v8];
LABEL_28:
    v38 = v9;
    operator delete(v9);
    return v11;
  }
  __y = 0.0;
  v12 = modf(v7, &__y);
  v13 = v12;
  if (a2 < 50)
  {
    v26 = vcvtpd_s64_f64(v7);
    v9 = (double *)__p;
    v27 = (double *)((char *)__p + 8 * v26);
    if (v27 != v38)
    {
      sub_100407418((double *)__p, v27, v38, v12);
      v9 = (double *)__p;
    }
    v28 = v9;
    if (v26 >= 2)
    {
      v29 = v9 + 1;
      v30 = *v9;
      v31 = 8 * v26 - 8;
      v28 = v9;
      v32 = v9 + 1;
      do
      {
        v33 = *v32++;
        v34 = v33;
        if (v30 < v33)
        {
          v30 = v34;
          v28 = v29;
        }
        v29 = v32;
        v31 -= 8;
      }
      while (v31);
    }
    v25 = v9[v26];
    v19 = *v28;
  }
  else
  {
    v9 = (double *)__p;
    v14 = (double *)((char *)__p + 8 * v8);
    if (v14 != v38)
    {
      sub_100407418((double *)__p, v14, v38, v12);
      v9 = (double *)__p;
      v14 = v38;
    }
    v15 = &v9[v8];
    v16 = v15 + 1;
    v18 = *v15;
    v17 = v15 + 2;
    v19 = v18;
    if (v16 != v14 && v17 != v14)
    {
      v21 = *v16;
      v22 = v17;
      do
      {
        v23 = *v22++;
        v24 = v23;
        if (v23 < v21)
        {
          v21 = v24;
          v16 = v17;
        }
        v17 = v22;
      }
      while (v22 != v14);
    }
    v25 = *v16;
  }
  v11 = v19 + (v25 - v19) * v13;
  if (v9)
    goto LABEL_28;
  return v11;
}

void sub_1011A3244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011A3268(double a1)
{
  double v1;
  double v2;
  double v3;
  float v4;

  v1 = a1 * 3.14159265;
  v2 = -(a1 * 3.14159265);
  if (v1 <= 0.0)
    v3 = v2;
  else
    v3 = v1;
  if (v3 > 0.0001)
  {
    v4 = v1;
    sinf(v4);
  }
}

void sub_1011A32BC(uint64_t a1, void *a2)
{
  void **v3;
  id v4;
  void *v5;
  unsigned __int8 v6[8];
  double v7;
  _QWORD v8[5];

  *(_QWORD *)a1 = off_1021A4EE0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 4294967293;
  v4 = objc_msgSend(a2, "newTimer");
  *(_QWORD *)(a1 + 16) = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1011A345C;
  v8[3] = &unk_10212ECA0;
  v8[4] = a1;
  objc_msgSend(v4, "setHandler:", v8);
  v5 = *v3;
  sub_1018BEA14(v6, "FallUserMetricsUploadIntervalSeconds", &qword_101C43E60, 0);
  objc_msgSend(v5, "setNextFireDelay:interval:", 0.0, v7);
  operator new();
}

void sub_1011A341C()
{
  operator delete();
}

uint64_t sub_1011A345C(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  v1[25] = 1;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 16))(v1);
}

id sub_1011A3474(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  v4 = a1 + 32;
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(v4 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1011A34C8;
  v6[3] = &unk_102131360;
  v6[4] = a2;
  v6[5] = v3;
  return objc_msgSend(v2, "async:", v6);
}

void sub_1011A34C8(uint64_t a1)
{
  uint64_t v2;
  xpc_activity_state_t state;
  _xpc_activity_s *v4;
  xpc_object_t v5;
  NSObject *v6;
  xpc_activity_state_t v7;
  uint64_t v8;
  xpc_activity_state_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  xpc_activity_state_t v13;
  uint8_t buf[4];
  _BYTE v15[12];

  v2 = *(_QWORD *)(a1 + 40);
  state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  v4 = *(_xpc_activity_s **)(a1 + 32);
  if (state)
  {
    if (xpc_activity_get_state(v4) == 2 && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 4))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A4F70);
      v6 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
      {
        v7 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_1021A4F70);
        v8 = qword_10229FD98;
        v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
        v12 = 134349056;
        v13 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v12, 12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "CLFallUserInfoMetrics::CLFallUserInfoMetrics(CLSilo *)_block_invoke", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    else
    {
      sub_1011A37BC(v2, *(_QWORD *)(a1 + 32));
    }
  }
  else
  {
    v5 = xpc_activity_copy_criteria(v4);
    if (!v5)
      v5 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 1);
    sub_1018BEA14(buf, "WalkingSteadinessHKQueryIntervalSeconds", &qword_101C43E90, 0);
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_INTERVAL, (uint64_t)*(double *)&v15[4]);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_PREVENT_DEVICE_SLEEP, 1);
    xpc_activity_set_criteria(*(xpc_activity_t *)(a1 + 32), v5);
    xpc_release(v5);
  }
}

void sub_1011A37BC(uint64_t a1, uint64_t a2)
{
  double Current;
  id *v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a1 + 48))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = *(id **)(a1 + 48);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1011A39DC;
    v6[3] = &unk_1021A4F38;
    v6[4] = a2;
    v6[5] = a1;
    sub_1010DEE6C(v5, 1, 0, 1, (uint64_t)v6, Current + -5184000.0, Current);
  }
}

uint64_t sub_1011A384C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A4EE0;
  objc_msgSend(*(id *)(a1 + 16), "invalidate");

  *(_QWORD *)(a1 + 16) = 0;
  sub_1011A463C((uint64_t *)(a1 + 48), 0);
  return a1;
}

void sub_1011A38A0(uint64_t a1)
{
  sub_1011A384C(a1);
  operator delete();
}

uint64_t sub_1011A38C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t sub_1011A38CC(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 26) != a2)
  {
    *(_BYTE *)(result + 26) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A38E8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 27) != a2)
  {
    *(_BYTE *)(result + 27) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A3904(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 28) != a2)
  {
    *(_BYTE *)(result + 28) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A3920(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 29) != a2)
  {
    *(_BYTE *)(result + 29) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A393C(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 30) != a2)
  {
    *(_BYTE *)(result + 30) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A3958(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 31) != a2)
  {
    *(_BYTE *)(result + 31) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A3974(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 32) != a2)
  {
    *(_DWORD *)(result + 32) = a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A3990(uint64_t result, float a2)
{
  int v2;

  v2 = (int)(float)(a2 * 100.0);
  if (*(_DWORD *)(result + 36) != v2)
  {
    *(_DWORD *)(result + 36) = v2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_1011A39BC(uint64_t result, float a2)
{
  if (*(_DWORD *)(result + 40) != (int)a2)
  {
    *(_DWORD *)(result + 40) = (int)a2;
    *(_BYTE *)(result + 25) = 1;
  }
  return result;
}

void sub_1011A39DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[6];
  void *__p;
  void *v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v4 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_1011A3AA4;
  v6[3] = &unk_1021A4F00;
  v10 = a2;
  v6[5] = v4;
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_1002782D0(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v5, "async:", v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1011A3A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011A3AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  xpc_activity_state_t state;
  NSObject *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  xpc_activity_state_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  xpc_activity_state_t v22;
  uint8_t buf[4];
  xpc_activity_state_t v24;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 72) != 100)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A4F70);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      LODWORD(v24) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error querying walking steadiness for CoreAnalytics, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A4F70);
      v11 = *(_DWORD *)(a1 + 72);
      v21 = 67109120;
      LODWORD(v22) = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Error querying walking steadiness for CoreAnalytics, %d", &v21);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLFallUserInfoMetrics::queryWalkingSteadinessHK(xpc_activity_t)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v4 = -2.0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 != *(_QWORD *)(a1 + 48))
  {
    v4 = *(double *)(v3 - 8);
LABEL_10:
    sub_1011A3F54((unsigned __int8 *)v2, v4);
    goto LABEL_11;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021A4F70);
  v10 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Walking steadiness query returned empty for CoreAnalytics", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A4F70);
    LOWORD(v21) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Walking steadiness query returned empty for CoreAnalytics", &v21, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLFallUserInfoMetrics::queryWalkingSteadinessHK(xpc_activity_t)_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)(v2 + 56) = 0xFFFFFFFFLL;
  *(_BYTE *)(v2 + 25) = 1;
LABEL_11:
  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) == 4
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021A4F70);
    v7 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 134349056;
      v24 = state;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to mark activity as done. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A4F70);
      v14 = qword_10229FD98;
      v15 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      v21 = 134349056;
      v22 = v15;
      LODWORD(v20) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 17, "Failed to mark activity as done. Current state is %{public}ld", &v21, v20);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLFallUserInfoMetrics::queryWalkingSteadinessHK(xpc_activity_t)_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

unsigned __int8 *sub_1011A3F54(unsigned __int8 *result, double a2)
{
  unsigned __int8 *v3;
  int v4;
  double v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8[8];
  double v9;

  v3 = result;
  if (a2 == -1.0)
  {
    *((_QWORD *)result + 7) = 0xFFFFFFFFLL;
  }
  else
  {
    if (a2 >= 0.0)
    {
      *((_DWORD *)result + 15) = 0;
      v6 = (int)(a2 * 100.0);
      if (*((_DWORD *)result + 14) == v6)
        return result;
    }
    else
    {
      v4 = *((_DWORD *)result + 15) + 1;
      *((_DWORD *)result + 15) = v4;
      v5 = (double)v4;
      v7 = 0x403C000000000000;
      result = sub_1018BEA14(v8, "WalkingSteadinessHKMaxIgnoredQueryErrors", &v7, 0);
      if (v9 >= v5)
        return result;
      v6 = (int)a2;
    }
    *((_DWORD *)v3 + 14) = v6;
  }
  v3[25] = 1;
  return result;
}

_QWORD *sub_1011A4014(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return sub_1002782D0(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
}

void sub_1011A403C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1011A4054(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  NSDictionary *(*v3)(uint64_t);
  void ***v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  void **v10;
  void **v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(result + 25))
  {
    v1 = result;
    if (*(_BYTE *)(result + 24))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A4F70);
      v2 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sending UserInfo to CoreAnalytics", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_1021A4F70);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Sending UserInfo to CoreAnalytics", v12, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLFallUserInfoMetrics::sendEventToCoreAnalytics() const", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      v10 = _NSConcreteStackBlock;
      v3 = sub_1011A448C;
      v4 = &v10;
    }
    else
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021A4F70);
      v5 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "UserInfo health not sent to CoreAnalytics because logging not enabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_1021A4F70);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "UserInfo health not sent to CoreAnalytics because logging not enabled", v12, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLFallUserInfoMetrics::sendEventToCoreAnalytics() const", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      v11 = _NSConcreteStackBlock;
      v3 = sub_1011A4378;
      v4 = &v11;
    }
    v4[1] = (void **)3221225472;
    v4[2] = (void **)v3;
    v4[3] = (void **)&unk_102131FE8;
    v4[4] = (void **)v1;
    result = AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FallUserInfo"), v4);
    *(_BYTE *)(v1 + 25) = 0;
  }
  return result;
}

NSDictionary *sub_1011A4378(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[6];
  _QWORD v4[6];

  v1 = *(unsigned __int8 **)(a1 + 32);
  v3[0] = CFSTR("isFallDetectionAvailable");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[26]);
  v3[1] = CFSTR("didEnableAnomalyDetection");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[27]);
  v3[2] = CFSTR("didEnableWorkoutAnomalyDetection");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[28]);
  v3[3] = CFSTR("didEnableBackgroundWorkoutAnomalyDetection");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[29]);
  v3[4] = CFSTR("didEnableBackgroundAllDayAnomalyDetection");
  v4[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[30]);
  v3[5] = CFSTR("isImproveHealthAndFitnessOptInEnabled");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[31]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

NSDictionary *sub_1011A448C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[10];
  _QWORD v4[10];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = CFSTR("isFallDetectionAvailable");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 26));
  v3[1] = CFSTR("didEnableAnomalyDetection");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 27));
  v3[2] = CFSTR("didEnableWorkoutAnomalyDetection");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 28));
  v3[3] = CFSTR("didEnableBackgroundWorkoutAnomalyDetection");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 29));
  v3[4] = CFSTR("didEnableBackgroundAllDayAnomalyDetection");
  v4[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 30));
  v3[5] = CFSTR("isImproveHealthAndFitnessOptInEnabled");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 31));
  v3[6] = CFSTR("maxAccelNormThreshold");
  v4[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 40));
  v3[7] = CFSTR("userAgeBin");
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 32));
  v3[8] = CFSTR("userMaxMets");
  v4[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 36));
  v3[9] = CFSTR("userWalkingSteadiness");
  v4[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 10);
}

void sub_1011A4610(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_1011A463C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010DE2AC(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_1011A4678(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("GNSS"), 1, 2, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = off_1021A4FA0;
  a1[17] = 0;
  sub_100119F3C(a1 + 18);
  return a1;
}

void sub_1011A47D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011A4898(_QWORD *a1)
{
  *a1 = off_1021A4FA0;
  sub_10011A5A8(a1 + 18);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_1011A48C8(_QWORD *a1)
{
  *a1 = off_1021A4FA0;
  sub_10011A5A8(a1 + 18);
  sub_100D6C25C((uint64_t)a1);
  operator delete();
}

uint64_t sub_1011A490C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 144, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_1011A4AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1011A4B00(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  const char *v19;
  std::string *v20;
  __int128 __dst;
  _BYTE v22[7];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationGnssSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v27.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v27.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v27.__r_.__value_.__r.__words[2]) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLConfig,%{public}s,sending kNotificationGnssSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v27, 24);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssConfigAsset::sendNotifications()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1015A2E04(&v27, "#CLConfig,");
  v6 = std::string::append(&v27, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, ",kNotificationGnssSettings,");
  if ((v25 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v22 = v26[0];
    *(_DWORD *)&v22[3] = *(_DWORD *)((char *)v26 + 3);
    v23 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 144);
  sub_1007FA930(&__dst, v14);
  if (v23 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 2, a1 + 144);
  if (v13 < 0)
    operator delete(v11);
}

void sub_1011A4E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011A4ED4(uint64_t a1)
{
  uint64_t v2;

  sub_100D6D640(a1, CFSTR("settings.plist"), a1 + 144);
  if (sub_1011A4F20(a1, v2))
    sub_1011A5280(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t sub_1011A4F20(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  if (objc_opt_class(RDEstimate, a2))
  {
    result = (uint64_t)+[RDEstimate currentEstimates](RDEstimate, "currentEstimates");
    if (result)
    {
      v4 = (void *)result;
      result = (uint64_t)objc_msgSend((id)result, "count");
      if (result)
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
        v5 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138477827;
          v15 = objc_msgSend(objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "countryCode");
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,isCurrentCountryISOPresent,%{private}@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
          v9 = qword_1022A02A8;
          v12 = 138477827;
          v13 = objc_msgSend(objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "countryCode");
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#CLConfig,isCurrentCountryISOPresent,%{private}@", &v12, 12);
          v11 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::isCurrentCountryISOPresent()", "%s\n", v10);
          if (v11 != buf)
            free(v11);
        }
        *(_QWORD *)(a1 + 136) = objc_msgSend(objc_alloc((Class)NSString), "initWithString:", objc_msgSend(objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "countryCode"));
        return 1;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,isCurrentCountryISOPresent,absent", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#CLConfig,isCurrentCountryISOPresent,absent", &v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::isCurrentCountryISOPresent()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

void sub_1011A5280(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  std::string *p_p;
  id v6;
  id v7;
  NSDictionary *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  id v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  id v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  id v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  id v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  id v41;
  std::string *v42;
  uint64_t v43;
  id v44;
  std::string *v45;
  const char *v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  id v55;
  const char *v56;
  uint64_t v57;
  _BYTE v58[16];
  _BYTE v59[16];
  _BYTE v60[16];
  int v61;
  id v62;
  __int16 v63;
  void *v64;
  std::string __p;
  _BYTE buf[24];
  void *v67;
  uint64_t v68;
  uint64_t v69;

  if (*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,reading country settings under %{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v49 = qword_1022A02A8;
      v50 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v51;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "#CLConfig,%{public}s,readCountryConstellationSettings,reading country settings under %{private}s", &__p, 22);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    sub_100119F3C(v60);
    if (!sub_100D6D640(a1, CFSTR("countryInfoMap.plist"), (uint64_t)v60))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v22 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,failed to load country info map file", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
        v24 = qword_1022A02A8;
        v25 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        LODWORD(v57) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#CLConfig,%{public}s,readCountryConstellationSettings,failed to load country info map file", &__p, v57);
        v27 = (char *)v26;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      goto LABEL_82;
    }
    sub_100119F3C(v59);
    if (!sub_1011A6220(a1, (uint64_t)v60, (uint64_t)v59))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v28 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v29 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,readCountryConstellationDictionary retuned false", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
        v30 = qword_1022A02A8;
        v31 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
        LODWORD(v57) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#CLConfig,%{public}s,readCountryConstellationSettings,readCountryConstellationDictionary retuned false", &__p, v57);
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      goto LABEL_81;
    }
    memset(&__p, 0, sizeof(__p));
    if (!sub_1000BD5F0((uint64_t)v59, (uint64_t)CFSTR("SettingsFile"), &__p))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v34 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v35 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountryConstellationSettings,missing settings filename", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
        v36 = qword_1022A02A8;
        v37 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v61 = 136446210;
        v62 = v37;
        LODWORD(v57) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 16, "#CLConfig,%{public}s,readCountryConstellationSettings,missing settings filename", &v61, v57);
        v39 = (char *)v38;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      goto LABEL_79;
    }
    sub_100119F3C(v58);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (sub_100D6D640(a1, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), (uint64_t)v58))
    {
      v6 = objc_msgSend((id)sub_10011A5AC((uint64_t)v58), "valueForKey:", CFSTR("GnssConstellationSettings"));
      v7 = v6;
      if (v6 && objc_msgSend(v6, "count"))
      {
        v8 = +[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v7, CFSTR("GnssConstellationSettings"));
        v9 = sub_10011A5AC(a1 + 144);
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_1011A6A6C;
        v67 = &unk_1021A5080;
        v68 = v9;
        v69 = a1;
        -[NSDictionary enumerateKeysAndObjectsUsingBlock:](v8, "enumerateKeysAndObjectsUsingBlock:", buf);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
        v10 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v11;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v8;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,constellation setting is %@", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_78;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
        v12 = qword_1022A02A8;
        v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v61 = 136446466;
        v62 = v13;
        v63 = 2112;
        v64 = v8;
        LODWORD(v57) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#CLConfig,%{public}s,readCountrySettings,constellation setting is %@", &v61, v57);
        v15 = (char *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v14);
        if (v15 == buf)
          goto LABEL_78;
        goto LABEL_92;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v47 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v48 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,constellation key is absent", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_78;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v54 = qword_1022A02A8;
      v55 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v61 = 136446210;
      v62 = v55;
      LODWORD(v57) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 0, "#CLConfig,%{public}s,readCountrySettings,constellation key is absent", &v61, v57);
      v15 = (char *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v56);
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v40 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v41 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v42 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446467;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v42;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountryConstellationSettings,failed to load settings file,%{private}s", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_78;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v43 = qword_1022A02A8;
      v44 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v45 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v61 = 136446467;
      v62 = v44;
      v63 = 2081;
      v64 = v45;
      LODWORD(v57) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 16, "#CLConfig,%{public}s,readCountryConstellationSettings,failed to load settings file,%{private}s", &v61, v57);
      v15 = (char *)v46;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v46);
    }
    if (v15 == buf)
    {
LABEL_78:
      sub_10011A5A8(v58);
LABEL_79:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_81:
      sub_10011A5A8(v59);
LABEL_82:
      sub_10011A5A8(v60);
      return;
    }
LABEL_92:
    free(v15);
    goto LABEL_78;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
  v16 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,asset unavailable,ignoring", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v18 = qword_1022A02A8;
    v19 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#CLConfig,%{public}s,readCountryConstellationSettings,asset unavailable,ignoring", &__p, 12);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_1011A5F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_10011A5A8(&a11);
  if (a26 < 0)
    operator delete(__p);
  sub_10011A5A8(&a13);
  sub_10011A5A8(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1011A6004(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[17];
    *(_DWORD *)buf = 138478083;
    v15 = v5;
    v16 = 2113;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLConfig,country changed from %{private}@ to %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v7 = a1[17];
    v10 = 138478083;
    v11 = v7;
    v12 = 2113;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#CLConfig,country changed from %{private}@ to %{private}@", &v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssConfigAsset::handleRegulatoryDomainChange(NSString *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (a1[17])
    a1[17] = 0;
  a1[17] = objc_msgSend(objc_alloc((Class)NSString), "initWithString:", a2);
  sub_100D6D640((uint64_t)a1, CFSTR("settings.plist"), (uint64_t)(a1 + 18));
  sub_1011A5280((uint64_t)a1);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
}

BOOL sub_1011A6220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  _BOOL8 v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  id v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  _QWORD v37[6];
  int v38;
  id v39;
  __int16 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  uint64_t v46;
  uint8_t buf[4];
  id v48;
  __int16 v49;
  uint64_t v50;

  if (!*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v48 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationDictionary,asset unavailable,ignoring", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v14 = qword_1022A02A8;
    v15 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v42) = 136446210;
    *(_QWORD *)((char *)&v42 + 4) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLConfig,%{public}s,readCountryConstellationDictionary,asset unavailable,ignoring", &v42, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v16);
    goto LABEL_38;
  }
  sub_100119F3C(buf);
  sub_10052502C(a3, (uint64_t)buf);
  sub_10011A5A8(buf);
  v6 = objc_msgSend((id)sub_10011A5AC(a2), "valueForKey:", CFSTR("CountryInfo"));
  if (!v6)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v18 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v19 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v48 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountryConstellationDictionary,no country info array in dict", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v29 = qword_1022A02A8;
    v30 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v42) = 136446210;
    *(_QWORD *)((char *)&v42 + 4) = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 16, "#CLConfig,%{public}s,readCountryConstellationDictionary,no country info array in dict", &v42, 12);
    v17 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v31);
LABEL_38:
    if (v17 != buf)
      free(v17);
    return 0;
  }
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = &v42;
  v43 = 0x3052000000;
  v44 = sub_1002072E8;
  v45 = sub_100207E04;
  v46 = 0;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1011A6980;
  v37[3] = &unk_1021A5058;
  v37[4] = &v42;
  v37[5] = a1;
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v37);
  v7 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 40);
  v8 = v7 != 0;
  if (v7)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v11 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 40);
      *(_DWORD *)buf = 136446467;
      v48 = v10;
      v49 = 2113;
      v50 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationDictionary,countryInfo is %{private}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v24 = qword_1022A02A8;
      v25 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v26 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 40);
      v38 = 136446467;
      v39 = v25;
      v40 = 2113;
      v41 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#CLConfig,%{public}s,readCountryConstellationDictionary,countryInfo is %{private}@", &v38, 22);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_100524E10(buf, *(CFTypeRef *)(*((_QWORD *)&v42 + 1) + 40));
    sub_10052502C(a3, (uint64_t)buf);
    sub_10011A5A8(buf);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
    v20 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v22 = *(_QWORD *)(a1 + 136);
      *(_DWORD *)buf = 136446467;
      v48 = v21;
      v49 = 2113;
      v50 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationDictionary,%{private}@ not present", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021A50B8);
      v32 = qword_1022A02A8;
      v33 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v34 = *(_QWORD *)(a1 + 136);
      v38 = 136446467;
      v39 = v33;
      v40 = 2113;
      v41 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "#CLConfig,%{public}s,readCountryConstellationDictionary,%{private}@ not present", &v38, 22);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
  _Block_object_dispose(&v42, 8);
  return v8;
}

void sub_1011A6924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1011A6980(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  id result;
  _QWORD v9[7];

  v7 = *(_QWORD *)(a1 + 40);
  result = objc_msgSend(a2, "valueForKey:", CFSTR("ISOCode"));
  if (result)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1011A6A24;
    v9[3] = &unk_1021A5030;
    v9[5] = *(_QWORD *)(a1 + 32);
    v9[6] = v7;
    v9[4] = a2;
    result = objc_msgSend(result, "enumerateObjectsUsingBlock:", v9);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
      *a4 = 1;
  }
  return result;
}

id sub_1011A6A24(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1[6] + 136), "isEqualToString:", a2);
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a1[4];
    *a4 = 1;
  }
  return result;
}

id sub_1011A6A6C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD v18[6];

  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_opt_class(NSDictionary, a2);
  if ((objc_opt_isKindOfClass(a3, v7) & 1) != 0)
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
    if (!v9
      || (v11 = v9, v12 = objc_opt_class(NSDictionary, v10), (objc_opt_isKindOfClass(v11, v12) & 1) == 0))
    {
      v11 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v11, a2);
    }
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1011A6A6C;
    v18[3] = &unk_1021A5080;
    v18[4] = v11;
    v18[5] = v6;
    return objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v18);
  }
  else
  {
    v14 = objc_opt_class(NSArray, v8);
    if ((objc_opt_isKindOfClass(a3, v14) & 1) != 0)
    {
      v15 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a3, 2uLL);
      v16 = *(void **)(a1 + 32);
    }
    else
    {
      v17 = *(void **)(a1 + 32);
      v15 = objc_msgSend(a3, "copy");
      v16 = v17;
    }
    return objc_msgSend(v16, "setObject:forKey:", v15, a2);
  }
}

void sub_1011A6BCC(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1011A6BF8(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  *(_DWORD *)a1 = 0;
  sub_100270E34(a1 + 8, a3);
  *(_QWORD *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A50D8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,initializing\"}", (uint8_t *)v7, 0x12u);
  }
  return a1;
}

void sub_1011A6D08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011A6D48(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:

  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD **)(a1 + 32);
  if (v5 == v2)
  {
    v6 = 4;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
    v2 = *(_QWORD **)(a1 + 32);
LABEL_10:
    (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  }
  return a1;
}

void sub_1011A6DE0(uint64_t a1, uint64_t a2)
{
  int v4;
  float v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  double v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;

  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v5 = *(float *)(a2 + 44);
    if (v5 > 0.0 && v5 <= 0.02)
    {
      *(_BYTE *)(a1 + 48) = 1;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 32);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A50D8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(unsigned __int8 *)(a2 + 48);
    v10 = *(unsigned __int8 *)(a1 + 64);
    v11 = *(float *)(a2 + 44);
    v12[0] = 68290562;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v4;
    v17 = 1026;
    v18 = v7;
    v19 = 2050;
    v20 = v8;
    v21 = 1026;
    v22 = v9;
    v23 = 1026;
    v24 = v10;
    v25 = 2050;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,feedGnssEpochData\", \"previousMultibandMode\":%{public}hhd, \"fMultibandMode\":%{public}hhd, \"fMultibandModeFixMCT\":\"%{public}f\", \"IsPositionFixValid\":%{public}hhd, \"fIsGnssReceiverOn\":%{public}hhd, \"gpsTimeUncertaintyMilliseconds\":\"%{public}f\"}", (uint8_t *)v12, 0x3Eu);
  }
  sub_1011A6F5C((int *)a1);
}

void sub_1011A6F5C(int *a1)
{
  unint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  if (!*((_BYTE *)a1 + 64) && *a1)
  {
    *a1 = 0;
    v5 = *((_QWORD *)a1 + 4);
    if (!v5)
      return;
    v13 = 0;
    goto LABEL_27;
  }
  v2 = sub_1011A740C();
  if ((v2 & 0xFF00000000) != 0)
  {
    v3 = v2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A50D8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"L1Context,forcing L1 band use\", \"forcedBandUse\":%{public}d}", (uint8_t *)&v13, 0x18u);
    }
    if (*a1 != v3)
    {
      *a1 = v3;
      v5 = *((_QWORD *)a1 + 4);
      if (v5)
      {
        v13 = v3;
LABEL_27:
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v13);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A50D8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *((unsigned __int8 *)a1 + 48);
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,tickL1Enablement\", \"fMultibandMode\":%{public}hhd}", (uint8_t *)&v13, 0x18u);
    }
    if (*((_BYTE *)a1 + 48))
      v8 = 256;
    else
      v8 = 512;
    if (v8 != *a1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A50D8);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a1;
        v11 = *((unsigned __int8 *)a1 + 48);
        v12 = *((_QWORD *)a1 + 7);
        v13 = 68290050;
        v15 = 2082;
        v14 = 0;
        v16 = "";
        v17 = 1026;
        v18 = v8;
        v19 = 1026;
        v20 = v10;
        v21 = 1026;
        v22 = v11;
        v23 = 2050;
        v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"L1Context,tickL1Enablement\", \"requiredL1BandUseStatus\":%{public}d, \"currentL1BandUseStatus\":%{public}d, \"fMultibandMode\":%{public}hhd, \"fMultibandModeFixMCT\":\"%{public}f\"}", (uint8_t *)&v13, 0x2Eu);
      }
      *a1 = v8;
      v5 = *((_QWORD *)a1 + 4);
      if (v5)
      {
        v13 = v8;
        goto LABEL_27;
      }
    }
  }
}

void sub_1011A7228(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A50D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,stop\"}", (uint8_t *)v3, 0x12u);
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 0;
    sub_1011A6F5C((int *)a1);
  }
}

void sub_1011A731C(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A50D8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,start\"}", (uint8_t *)v3, 0x12u);
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    sub_1011A6F5C((int *)a1);
  }
}

unint64_t sub_1011A740C()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  const mach_header_64 *v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v10;
  uint8_t buf[8];
  _BYTE v12[10];
  __int16 v13;
  unsigned int v14;

  v10 = -1;
  sub_1001E4804(buf);
  v0 = sub_1001E4B84(*(uint64_t *)buf, "GnssForceL1Desire", &v10);
  v1 = v0;
  v2 = *(std::__shared_weak_count **)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_5;
  v3 = (unint64_t *)(*(_QWORD *)v12 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (v4)
  {
LABEL_5:
    if (v0)
      goto LABEL_6;
LABEL_16:
    v6 = 0;
    v5 = 0;
    return v5 | (unint64_t)v6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!v1)
    goto LABEL_16;
LABEL_6:
  if (v10 >= 5)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A50D8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v12 = 2082;
      *(_QWORD *)&v12[2] = "";
      v13 = 1026;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"L1Context,unhandled defaults\", \"setting\":%{public}d}", buf, 0x18u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A50D8);
    }
    v8 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v12 = 2082;
      *(_QWORD *)&v12[2] = "";
      v13 = 1026;
      v14 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "L1Context,unhandled defaults", "{\"msg%{public}.0s\":\"L1Context,unhandled defaults\", \"setting\":%{public}d}", buf, 0x18u);
    }
    goto LABEL_16;
  }
  v5 = qword_101C43EF0[v10];
  v6 = &_mh_execute_header;
  return v5 | (unint64_t)v6;
}

void sub_1011A7634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011A7650(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1011A7720(id a1)
{
  qword_10230D308 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWifiTilesManagerSilo"));
}

uint64_t sub_1011A77D4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011AE530;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230D318 != -1)
    dispatch_once(&qword_10230D318, block);
  return qword_102311CD8;
}

void sub_1011A7C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011A7D10(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  NSObject *v41;
  int v42;
  double v43;
  int v44;
  const char *v45;
  char *v46;
  const char *v47;
  char *v48;
  int v49;
  const char *v50;
  char *v51;
  _BYTE v52[24];
  uint64_t v53;
  uint64_t v54;
  _DWORD v55[4];
  _OWORD buf[102];

  v11 = a1 + 268;
  v12 = sub_1011A87C0(a1, "CLWifiTilesManager", a2);
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 128) = v12 + 136;
  v13 = (_QWORD *)(v12 + 128);
  *(_QWORD *)v12 = off_1021A5128;
  *(_QWORD *)(v12 + 112) = off_1021A5250;
  *(_QWORD *)(v12 + 120) = &off_1021A52B0;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = "";
  *(_BYTE *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 184) = "";
  *(_BYTE *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 224) = 0x40C5180000000000;
  *(_DWORD *)(v12 + 232) = 0xFFFF;
  *(_QWORD *)(v12 + 244) = 0;
  *(_QWORD *)(v12 + 236) = 0;
  *(_OWORD *)(v12 + 252) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v11 = _Q0;
  *(_OWORD *)(v11 + 16) = _Q0;
  *(_OWORD *)(v11 + 32) = _Q0;
  *(_DWORD *)(v12 + 316) = 0;
  *(_DWORD *)(v12 + 344) = 0;
  *(_QWORD *)(v12 + 320) = 0xBFF0000000000000;
  *(_QWORD *)(v12 + 328) = 0;
  *(_QWORD *)(v12 + 336) = 0;
  *(_QWORD *)(v11 + 80) = 0xBFF0000000000000;
  *(_DWORD *)(v12 + 356) = 0x7FFFFFFF;
  *(_QWORD *)(v12 + 368) = 0;
  *(_QWORD *)(v12 + 376) = 0;
  *(_QWORD *)(v12 + 360) = 0;
  *(_BYTE *)(v12 + 384) = 0;
  *(_DWORD *)(v12 + 408) = 0;
  *(_QWORD *)(v12 + 392) = 0;
  *(_QWORD *)(v12 + 400) = 0;
  *(_BYTE *)(v12 + 413) = 1;
  *(_DWORD *)(v12 + 416) = 400;
  *(_BYTE *)(v12 + 420) = 0;
  v19 = (std::string *)(v12 + 424);
  *(_QWORD *)(v12 + 432) = 0;
  *(_QWORD *)(v12 + 440) = 0;
  *(_QWORD *)(v12 + 424) = 0;
  v20 = *a3;
  *a3 = 0;
  *(_QWORD *)(v12 + 448) = v20;
  sub_100F5A35C((_QWORD *)(v12 + 456), *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 480) = *a4;
  v21 = a4[1];
  *(_QWORD *)(a1 + 488) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  sub_101245358(a1 + 512);
  sub_1011A885C();
  std::string::operator=(v19, (const std::string *)&qword_10230D320);
  if (*(_BYTE *)(a5 + 24))
  {
    sub_10124535C((__int128 *)(a1 + 512), (__int128 *)a5);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    std::string::operator=(v19, (const std::string *)(v24 + 32));
    if (*((_BYTE *)a6 + 8))
    {
      v25 = *a6;
      *a6 = 0;
      v26 = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 496) = v25;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      *(_BYTE *)(a1 + 216) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 24))(*(_QWORD *)(a1 + 448));
      sub_1001E4804(buf);
      v31 = (int *)(a1 + 416);
      sub_1001E4B84(*(uint64_t *)&buf[0], "MaxDownloadListSize", (_DWORD *)(a1 + 416));
      v32 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
      if (*((_QWORD *)&buf[0] + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v35 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v36 = *v31;
        LODWORD(buf[0]) = 67109120;
        DWORD1(buf[0]) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "WIFITILE: fDefaultMaxDownloadListSize, %d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v44 = *v31;
        v55[0] = 67109120;
        v55[1] = v44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: fDefaultMaxDownloadListSize, %d", v55);
        v46 = (char *)v45;
        sub_100512490("Generic", 1, 0, 2, "CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, std::optional<CLTilesSetCollection>, std::optional<std::unique_ptr<CLITileSyncManager>>)", "%s\n", v45);
        if (v46 != (char *)buf)
          free(v46);
      }
      sub_1001E4804(buf);
      sub_1001FD98C(*(uint64_t *)&buf[0], "MTimeModificationPeriod", &qword_1022FDCC8);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
      if (*((_QWORD *)&buf[0] + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v40 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134217984;
        *(_QWORD *)((char *)buf + 4) = qword_1022FDCC8;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "WIFITILE: MTimeModificationPeriod, %.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v55[0] = 134217984;
        *(_QWORD *)&v55[1] = qword_1022FDCC8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: MTimeModificationPeriod, %.1lf", COERCE_DOUBLE(v55));
        v48 = (char *)v47;
        sub_100512490("Generic", 1, 0, 2, "CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, std::optional<CLTilesSetCollection>, std::optional<std::unique_ptr<CLITileSyncManager>>)", "%s\n", v47);
        if (v48 != (char *)buf)
          free(v48);
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v41 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v42 = *(unsigned __int8 *)(a1 + 216);
        LODWORD(buf[0]) = 67109120;
        DWORD1(buf[0]) = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "@TileEvent, wifi, locked, %d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v49 = *(unsigned __int8 *)(a1 + 216);
        v55[0] = 67109120;
        v55[1] = v49;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileEvent, wifi, locked, %d", v55);
        v51 = (char *)v50;
        sub_100512490("Generic", 1, 0, 2, "CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, std::optional<CLTilesSetCollection>, std::optional<std::unique_ptr<CLITileSyncManager>>)", "%s\n", v50);
        if (v51 != (char *)buf)
          free(v51);
      }
      sub_1011A90E4(a1);
      sub_1011A9410(v13, (uint64_t)v19, (uint64_t)v52);
      *(_QWORD *)&buf[0] = v52;
      sub_100259608((void ***)buf);
      if (!*(_BYTE *)(a1 + 216))
      {
        sub_101369C68(*(_QWORD *)(a1 + 480));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
        sub_1011A99C8(a1);
        v43 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
        sub_1011A9BF0(a1, v43);
      }
      if (_os_feature_enabled_impl("CoreLocation", "TilesService"))
        operator new();
      operator new();
    }
    v27 = *(_QWORD *)(a1 + 32);
    v28 = a4[1];
    v53 = *a4;
    v54 = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    sub_101083274(a1, v27);
  }
  sub_1011A88F0(a1, (uint64_t)buf);
}

void sub_1011A8684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;

  va_start(va, a11);
  sub_100CBD658((void ***)va);
  v16 = *(_QWORD *)(v11 + 496);
  *(_QWORD *)(v11 + 496) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_100261F44(v14);
  v17 = *(_QWORD *)(v11 + 448);
  *(_QWORD *)(v11 + 448) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (*(char *)(v11 + 447) < 0)
    operator delete(*v13);
  v18 = *(_QWORD *)(v11 + 208);
  *(_QWORD *)(v11 + 208) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(v11 + 176);
  *(_QWORD *)(v11 + 176) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1008B9D24(v12, *(_QWORD **)(v11 + 136));
  sub_1011AA144(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1011A87C0(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021A5478;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1011A8840(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1011A885C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230D338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230D338))
  {
    qword_10230D320 = 0;
    *(_QWORD *)algn_10230D328 = 0;
    qword_10230D330 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230D320, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D338);
  }
  if (qword_10230D340 != -1)
    dispatch_once(&qword_10230D340, &stru_1021A5318);
  return &qword_10230D320;
}

void sub_1011A88F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  std::string *p_p;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  BOOL *v16;
  char v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  std::string *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  char *v32;
  std::string __p;
  _DWORD v34[3];
  __int16 v35;
  _BOOL4 v36;
  _BYTE buf[18];

  sub_1011AA30C();
  if (byte_10230D348[23] < 0)
    sub_100115CE4(&__p, *(void **)byte_10230D348, *(unint64_t *)&byte_10230D348[8]);
  else
    __p = *(std::string *)byte_10230D348;
  sub_1001E4804(buf);
  v4 = sub_1000BCB64(*(uint64_t *)buf, "WifiTilesServerUrl", &__p);
  v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: defaultWifiTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v24 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v34[0] = 136380931;
    *(_QWORD *)&v34[1] = v24;
    v35 = 1026;
    v36 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: defaultWifiTilesServerUrl, %{private}s, overridden, %{public}d", v34, 18);
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  sub_1001E4804(buf);
  v10 = (uint64_t *)(a1 + 224);
  sub_1001FD98C(*(uint64_t *)buf, "EncryptionGracePeriod", (void *)(a1 + 224));
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v14 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *v10;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WIFITILE: fDefaultEncryptionGracePeriod, %.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v27 = *v10;
    v34[0] = 134217984;
    *(_QWORD *)&v34[1] = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: fDefaultEncryptionGracePeriod, %.1lf", COERCE_DOUBLE(v34));
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  sub_1001E4804(buf);
  v16 = (BOOL *)(a1 + 420);
  v17 = sub_1001E4874(*(uint64_t *)buf, "DisableTilesWhileLocked", (BOOL *)(a1 + 420));
  v18 = v17;
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_30;
  v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((v18 & 1) != 0)
    {
LABEL_32:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v22 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v23 = *v16;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "WIFITILE: fDefaultDisableTilesWhileLocked, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v30 = *v16;
        v34[0] = 67109120;
        v34[1] = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: fDefaultDisableTilesWhileLocked, %d", v34);
        v32 = (char *)v31;
        sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      sub_101245358(a2);
      sub_1011A885C();
      operator new();
    }
  }
  else
  {
LABEL_30:
    if ((v17 & 1) != 0)
      goto LABEL_32;
  }
  sub_100197040();
  *v16 = sub_10075C378();
  goto LABEL_32;
}

void sub_1011A9018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1011A90E4(uint64_t a1)
{
  NSObject *v2;
  __int128 *v3;
  __int128 *i;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  const char *v13;
  std::string v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18[2];
  _BYTE buf[28];

  v18[0] = mach_absolute_time();
  v18[1] = (uint64_t)&stru_1021A52C8;
  sub_1011AE280((const char *)(a1 + 424), (uint64_t *)&v16);
  if (v16 != v17)
    sub_1011B3624();
  sub_1011AE72C((uint64_t)&v16, (uint64_t)v16, v17);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A5428);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"lock on-disk wifi #tiles\", \"numberOfOnDiskTiles\":%{public}ld}", buf, 0x1Cu);
  }
  v3 = v16;
  for (i = v17; v3 != i; v3 = (__int128 *)((char *)v3 + 24))
  {
    if (*(char *)(a1 + 447) >= 0)
      v5 = *(unsigned __int8 *)(a1 + 447);
    else
      v5 = *(_QWORD *)(a1 + 432);
    sub_100259584((uint64_t)&v15, v5 + 1);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v15;
    else
      v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if (v5)
    {
      if (*(char *)(a1 + 447) >= 0)
        v7 = (const void *)(a1 + 424);
      else
        v7 = *(const void **)(a1 + 424);
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
    v8 = *((char *)v3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)v3;
    else
      v9 = *(const std::string::value_type **)v3;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)v3 + 23);
    else
      v10 = *((_QWORD *)v3 + 1);
    v11 = std::string::append(&v15, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (buf[23] >= 0)
      v13 = buf;
    else
      v13 = *(const char **)buf;
    sub_100FA7570(v13);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  *(_QWORD *)buf = &v16;
  sub_100259608((void ***)buf);
  return sub_100134E40(v18);
}

void sub_1011A93AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __p = &a16;
  sub_100259608((void ***)&__p);
  sub_100134E40(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1011A9410@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  std::string *v75;
  const void *v76;
  int v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  void **v82;
  std::string v84;
  void *__p[2];
  int64_t v86;
  _OWORD v87[2];
  int v88;

  memset(v87, 0, sizeof(v87));
  v88 = 1065353216;
  v5 = a1 + 1;
  v6 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if (sub_1000782F4(v6[10]))
      {
        sub_1002E6448((char *)v6[10], (uint64_t)__p);
        sub_1011B6EA8((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v86) < 0)
          operator delete(__p[0]);
      }
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != v5);
  }
  sub_1011AE280((const char *)a2, (uint64_t *)a3);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    sub_1011B3624();
  sub_1011AE72C(a3, *(_QWORD *)a3, *(__int128 **)(a3 + 8));
  v10 = *(_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v11)
  {
LABEL_86:
    v38 = v10;
    goto LABEL_87;
  }
LABEL_14:
  v12 = sub_100FBFA90();
  v13 = *(char *)(v10 + 23);
  v14 = v13 < 0;
  if (v13 >= 0)
    v15 = v10;
  else
    v15 = *(_QWORD *)v10;
  v16 = *(unsigned __int8 *)(v10 + 23);
  if (v14)
    v16 = *(_QWORD *)(v10 + 8);
  v17 = *((char *)v12 + 23);
  v18 = v17 < 0;
  if (v17 >= 0)
    v19 = v12;
  else
    v19 = (_QWORD *)*v12;
  v20 = *((unsigned __int8 *)v12 + 23);
  if (v18)
    v20 = v12[1];
  v21 = v15 - 1;
  v22 = (char *)v19 - 1;
  while (v16 && v20)
  {
    v23 = *(unsigned __int8 *)(v21 + v16);
    v24 = v22[v20];
    --v16;
    --v20;
    if (v23 != v24)
    {
LABEL_30:
      v25 = sub_100FA2F60();
      v26 = *(char *)(v10 + 23);
      v27 = v26 < 0;
      if (v26 >= 0)
        v28 = v10;
      else
        v28 = *(_QWORD *)v10;
      v29 = *(unsigned __int8 *)(v10 + 23);
      if (v27)
        v29 = *(_QWORD *)(v10 + 8);
      v30 = *((char *)v25 + 23);
      v31 = v30 < 0;
      if (v30 >= 0)
        v32 = v25;
      else
        v32 = (_QWORD *)*v25;
      v33 = *((unsigned __int8 *)v25 + 23);
      if (v31)
        v33 = v25[1];
      v34 = v28 - 1;
      v35 = (char *)v32 - 1;
      while (v29 && v33)
      {
        v36 = *(unsigned __int8 *)(v34 + v29);
        v37 = v35[v33];
        --v29;
        --v33;
        if (v36 != v37)
          goto LABEL_46;
      }
      if (!v33)
        goto LABEL_48;
LABEL_46:
      v10 += 24;
      if (v10 == v11)
      {
        v38 = v11;
        goto LABEL_87;
      }
      goto LABEL_14;
    }
  }
  if (v20)
    goto LABEL_30;
LABEL_48:
  if (v10 == v11)
    goto LABEL_86;
  v39 = v10 + 24;
  if (v10 + 24 == v11)
    goto LABEL_86;
  v38 = v10;
  do
  {
    v40 = v10;
    v10 = v39;
    v41 = sub_100FBFA90();
    v42 = *(char *)(v40 + 47);
    v43 = v42 < 0;
    if (v42 >= 0)
      v44 = v10;
    else
      v44 = *(_QWORD *)v10;
    v45 = *(unsigned __int8 *)(v40 + 47);
    if (v43)
      v45 = *(_QWORD *)(v40 + 32);
    v46 = *((char *)v41 + 23);
    v47 = v46 < 0;
    v48 = (_QWORD *)*v41;
    if (v46 >= 0)
      v48 = v41;
    v49 = *((unsigned __int8 *)v41 + 23);
    if (v47)
      v49 = v41[1];
    v50 = v44 - 1;
    v51 = (char *)v48 - 1;
    while (v45 && v49)
    {
      v52 = *(unsigned __int8 *)(v50 + v45);
      v53 = v51[v49];
      --v45;
      --v49;
      if (v52 != v53)
        goto LABEL_66;
    }
    if (!v49)
      goto LABEL_84;
LABEL_66:
    v54 = sub_100FA2F60();
    v55 = *(char *)(v40 + 47);
    v56 = v55 < 0;
    if (v55 >= 0)
      v57 = v10;
    else
      v57 = *(_QWORD *)v10;
    v58 = *(unsigned __int8 *)(v40 + 47);
    if (v56)
      v58 = *(_QWORD *)(v40 + 32);
    v59 = *((char *)v54 + 23);
    v60 = v59 < 0;
    v61 = (_QWORD *)*v54;
    if (v59 >= 0)
      v61 = v54;
    v62 = *((unsigned __int8 *)v54 + 23);
    if (v60)
      v62 = v54[1];
    v63 = v57 - 1;
    v64 = (char *)v61 - 1;
    while (v58 && v62)
    {
      v65 = *(unsigned __int8 *)(v63 + v58);
      v66 = v64[v62];
      --v58;
      --v62;
      if (v65 != v66)
        goto LABEL_81;
    }
    if (!v62)
      goto LABEL_84;
LABEL_81:
    if (*(char *)(v38 + 23) < 0)
      operator delete(*(void **)v38);
    v67 = *(_OWORD *)v10;
    *(_QWORD *)(v38 + 16) = *(_QWORD *)(v10 + 16);
    *(_OWORD *)v38 = v67;
    v38 += 24;
    *(_BYTE *)(v40 + 47) = 0;
    *(_BYTE *)v10 = 0;
LABEL_84:
    v39 = v10 + 24;
  }
  while (v10 + 24 != v11);
LABEL_87:
  sub_1011AE72C(a3, v38, *(__int128 **)(a3 + 8));
  v68 = *(_QWORD *)a3;
  v69 = *(_QWORD *)(a3 + 8);
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
  if (v68 != v69)
  {
    while ((sub_1011B7128(&v84, (const std::string *)v68) & 1) == 0)
    {
      v68 += 24;
      if (v68 == v69)
      {
        v68 = v69;
        goto LABEL_99;
      }
    }
    if (v68 != v69)
    {
      for (i = v68 + 24; i != v69; i += 24)
      {
        if ((sub_1011B7128(&v84, (const std::string *)i) & 1) == 0)
        {
          if (*(char *)(v68 + 23) < 0)
            operator delete(*(void **)v68);
          v71 = *(_OWORD *)i;
          *(_QWORD *)(v68 + 16) = *(_QWORD *)(i + 16);
          *(_OWORD *)v68 = v71;
          v68 += 24;
          *(_BYTE *)(i + 23) = 0;
          *(_BYTE *)i = 0;
        }
      }
    }
  }
LABEL_99:
  sub_1011AE72C(a3, v68, *(__int128 **)(a3 + 8));
  v72 = *(_QWORD *)a3;
  v73 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 != v73)
  {
    do
    {
      if (*(char *)(a2 + 23) >= 0)
        v74 = *(unsigned __int8 *)(a2 + 23);
      else
        v74 = *(_QWORD *)(a2 + 8);
      sub_100259584((uint64_t)&v84, v74 + 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v84;
      else
        v75 = (std::string *)v84.__r_.__value_.__r.__words[0];
      if (v74)
      {
        if (*(char *)(a2 + 23) >= 0)
          v76 = (const void *)a2;
        else
          v76 = *(const void **)a2;
        memmove(v75, v76, v74);
      }
      *(_WORD *)((char *)&v75->__r_.__value_.__l.__data_ + v74) = 47;
      v77 = *(char *)(v72 + 23);
      if (v77 >= 0)
        v78 = (const std::string::value_type *)v72;
      else
        v78 = *(const std::string::value_type **)v72;
      if (v77 >= 0)
        v79 = *(unsigned __int8 *)(v72 + 23);
      else
        v79 = *(_QWORD *)(v72 + 8);
      v80 = std::string::append(&v84, v78, v79);
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v86 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if (v86 >= 0)
        v82 = __p;
      else
        v82 = (void **)__p[0];
      sub_1005164F0((const char *)v82);
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
      v72 += 24;
    }
    while (v72 != v73);
  }
  return sub_1002A1C94((uint64_t)v87);
}

void sub_1011A9930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_100259608((void ***)&__p);
  sub_1002A1C94((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1011A99C8(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  __int128 v5;
  uint64_t v6;
  void **v7[2];
  uint8_t buf[16];
  uint64_t v9;

  if (*(_BYTE *)(a1 + 504))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v1 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Side loading already in progress.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "Side loading already in progress.", v7, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDelete(CFAbsoluteTime)", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 504) = 1;
    sub_1011AE280((const char *)(a1 + 424), (uint64_t *)buf);
    v5 = *(_OWORD *)buf;
    v6 = v9;
    v9 = 0;
    memset(buf, 0, sizeof(buf));
    sub_1011B2FF8(a1, &v5);
    v7[0] = (void **)&v5;
    sub_100259608(v7);
    v7[0] = (void **)buf;
    sub_100259608(v7);
  }
}

void sub_1011A9BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, char a17)
{
  sub_100259608(&a15);
  a15 = (void **)&a17;
  sub_100259608(&a15);
  _Unwind_Resume(a1);
}

void sub_1011A9BF0(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A5428);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "wifi #tiles, populateTilesSet", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "wifi #tiles, populateTilesSet", &v15, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::populateTilesSet(CFAbsoluteTime)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*(_BYTE *)(a1 + 216) && !*(_BYTE *)(a1 + 217))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    sub_1011AE59C((uint64_t *)a1, a2);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v7 = sub_100026CC8(v5 + 184);
      *(_DWORD *)buf = 134349056;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@TileEvent, wifi, indexed, %{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v10 = qword_1022A0048;
      v11 = sub_100026CC8(v5 + 184);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 1, "@TileEvent, wifi, indexed, %{public}lu", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::populateTilesSet(CFAbsoluteTime)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(_BYTE *)(a1 + 217) = 1;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 232))(a1, a2);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 24))(*(_QWORD *)(a1 + 496));
  }
}

id sub_1011A9F48(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[7];
  char v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v13[0] = 67109120;
    v13[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: _tileDownloadCompleted, success, %d", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v7 = *(void **)(a3 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1011B22B8;
  v11[3] = &unk_1021528C0;
  v12 = a2;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a3;
  return objc_msgSend(v7, "async:", v11);
}

uint64_t sub_1011AA144(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A5478;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1011AA1B8()
{
  sub_10139E6F0();
}

void sub_1011AA2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, uint64_t a13, uint64_t a14, char a15, int a16, char a17)
{
  uint64_t v17;
  uint64_t v19;

  if (a10)
    sub_1019445D8(&a9);
  if (a15)
  {
    *(_QWORD *)(v17 - 24) = &a12;
    sub_100CBD658((void ***)(v17 - 24));
  }
  sub_100261F44((uint64_t)&a17);
  v19 = *(_QWORD *)(v17 - 32);
  *(_QWORD *)(v17 - 32) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

__int128 *sub_1011AA30C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230D360);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230D360))
  {
    xmmword_10230D348 = 0uLL;
    unk_10230D358 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230D348, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D360);
  }
  if (qword_10230D368 != -1)
    dispatch_once(&qword_10230D368, &stru_1021A5338);
  return &xmmword_10230D348;
}

uint64_t sub_1011AA3A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v7;

  *(_QWORD *)a1 = off_1021A5128;
  *(_QWORD *)(a1 + 112) = off_1021A5250;
  *(_QWORD *)(a1 + 120) = &off_1021A52B0;
  sub_1011B2E28(a1);
  v7 = (void **)(a1 + 512);
  sub_100CBD658(&v7);
  v2 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44(a1 + 480);
  v3 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  v4 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1008B9D24(a1 + 128, *(_QWORD **)(a1 + 136));
  return sub_1011AA144(a1);
}

uint64_t sub_1011AA484(uint64_t a1)
{
  return sub_1011AA3A0(a1 - 112);
}

uint64_t sub_1011AA48C(uint64_t a1)
{
  return sub_1011AA3A0(a1 - 120);
}

void sub_1011AA494(uint64_t a1)
{
  sub_1011AA3A0(a1);
  operator delete();
}

void sub_1011AA4B8(uint64_t a1)
{
  sub_1011AA3A0(a1 - 112);
  operator delete();
}

void sub_1011AA4E0(uint64_t a1)
{
  sub_1011AA3A0(a1 - 120);
  operator delete();
}

void sub_1011AA508(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v7;
  int v8;
  double v9;
  double v10;
  NSObject *v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  int v19;
  const char *v20;
  char *v21;
  int v22;
  int v23;
  _BOOL4 v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[24];
  int v32;
  _BYTE v33[10];
  _DWORD v34[4];
  _BYTE buf[14];
  _DWORD v36[406];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    v36[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: onDataProtectionNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v19 = *a3;
    v32 = 134218240;
    *(_QWORD *)v33 = a1;
    *(_WORD *)&v33[8] = 1024;
    v34[0] = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: onDataProtectionNotification, %p, notification, %d", &v32, 18);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
  if (!*a3)
  {
    v10 = v9;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(unsigned __int8 *)(a1 + 216);
      v13 = *a4;
      v14 = *a4 != 1;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      LOWORD(v36[0]) = 1024;
      *(_DWORD *)((char *)v36 + 2) = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WIFITILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v22 = *(unsigned __int8 *)(a1 + 216);
      v23 = *a4;
      v24 = *a4 != 1;
      v32 = 67109632;
      *(_DWORD *)v33 = v22;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v24;
      LOWORD(v34[0]) = 1024;
      *(_DWORD *)((char *)v34 + 2) = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d", &v32, 20, v30);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v15 = *(unsigned __int8 *)(a1 + 216);
    v16 = *a4;
    v17 = *a4 != 1;
    *(_BYTE *)(a1 + 216) = v17;
    if (v16 == 1)
    {
      sub_101369C68(*(_QWORD *)(a1 + 480));
      sub_1011A9BF0(a1, v10);
      sub_1011A9410((_QWORD *)(a1 + 128), a1 + 424, (uint64_t)v31);
      *(_QWORD *)buf = v31;
      sub_100259608((void ***)buf);
      sub_1011A99C8(a1);
    }
    if (v15 != v17)
    {
      sub_1011AAA4C(a1, v10);
      if (!*(_BYTE *)(a1 + 216))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v18 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: updateProtectionClass, skip on unlock", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A5408);
          LOWORD(v32) = 0;
          LODWORD(v29) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: updateProtectionClass, skip on unlock", &v32, v29);
          v28 = (char *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        sub_101369BF0(*(_QWORD *)(a1 + 480), (uint64_t)"Unlock");
      }
      sub_100075414(a1, 0, v10);
    }
  }
}

void sub_1011AAA4C(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL4 v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  NSObject *v26;
  int v27;
  int v28;
  const char *v29;
  char *v30;
  int v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  int v37;
  _BYTE v38[14];
  char v39;
  int v40;
  _BYTE *v41;
  _BYTE buf[14];
  char v43;

  if (qword_1022A02D0 != -1)
    goto LABEL_53;
  while (1)
  {
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WIFITILE: cleanUpDownloadList, start, isLocked, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v28 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)v38 = 67109120;
      *(_DWORD *)&v38[4] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: cleanUpDownloadList, start, isLocked, %d", v38);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    if (*(_QWORD *)(a1 + 144) >= (unint64_t)*(int *)(a1 + 416))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 144);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILES: cleanUpDownloadList, download list is too large, %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v34 = *(_QWORD *)(a1 + 144);
        *(_DWORD *)v38 = 134217984;
        *(_QWORD *)&v38[4] = v34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILES: cleanUpDownloadList, download list is too large, %lu", v38);
        v36 = (char *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      sub_1011ABD3C(a1);
    }
    v37 = 0;
    if (*(_BYTE *)(a1 + 216))
      break;
    v8 = *(uint64_t **)(a1 + 128);
    if (v8 == (uint64_t *)(a1 + 136))
      break;
    v37 = 0;
    while (1)
    {
      v9 = (uint64_t *)v8[1];
      v10 = v8;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = (unsigned int *)v8[10];
      v14 = v13 + 12;
      if (v13[12])
        break;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
      v16 = *(_DWORD *)(a1 + 408);
      v17 = sub_1001C0618(v15 + 184, v14);
      if (v17)
      {
        v18 = sub_1001C85FC(v15 + 184, v14);
        v19 = sub_100077820(v18, v16 > 1, *(float *)(v15 + 128), a2);
      }
      else
      {
        v19 = 0;
      }
      if (!sub_1000782F4((uint64_t)v13) && !v19 && (v17 & sub_1001C94A8((uint64_t)v13)) == 1)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v20 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v13 + 16))(buf, v13);
          v21 = buf;
          if (v43 < 0)
            v21 = *(_BYTE **)buf;
          *(_DWORD *)v38 = 136315138;
          *(_QWORD *)&v38[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WIFITILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download", v38, 0xCu);
          if (v43 < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A5408);
          v22 = qword_1022A02D8;
          (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v13 + 16))(v38, v13);
          v23 = v38;
          if (v39 < 0)
            v23 = *(_BYTE **)v38;
          v40 = 136315138;
          v41 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "WIFITILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download", (const char *)&v40);
          v25 = v24;
          if (v39 < 0)
            operator delete(*(void **)v38);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v25);
          if (v25 != buf)
            free(v25);
        }
        sub_10008A9F0((uint64_t **)(a1 + 128), v8);
        sub_1008B9B1C((uint64_t)(v8 + 4));
        operator delete(v8);
        ++v37;
      }
      if (!*(_BYTE *)(a1 + 216))
      {
        v8 = v11;
        if (v11 != (uint64_t *)(a1 + 136))
          continue;
      }
      goto LABEL_46;
    }
    sub_1019445F4();
    __break(1u);
LABEL_53:
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
LABEL_46:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v26 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v27 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v27;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v37;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "WIFITILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v31 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)v38 = 67109376;
    *(_DWORD *)&v38[4] = v31;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)&v38[10] = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u", v38, 14);
    v33 = (char *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
}

void sub_1011AB20C(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  double v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "onCompanionNotification, notification, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v11 = *a3;
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "onCompanionNotification, notification, %d", v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*a3 == 5)
  {
    v10 = *a4;
    *(_BYTE *)(a1 + 412) = v10;
    if (v10)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 32))(*(_QWORD *)(a1 + 496));
    sub_100075414(a1, 1u, v7);
  }
}

void sub_1011AB420(uint64_t a1)
{
  double v2;
  _BYTE v3[24];
  void **v4;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
  if (!*(_BYTE *)(a1 + 216))
  {
    sub_101369C68(*(_QWORD *)(a1 + 480));
    sub_1011A99C8(a1);
  }
  (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 232))(a1, v2);
  sub_1011A9410((_QWORD *)(a1 + 128), a1 + 424, (uint64_t)v3);
  v4 = (void **)v3;
  sub_100259608(&v4);
  sub_1011AB4D4(a1);
  sub_100075414(a1, 0, v2);
}

void sub_1011AB4D4(uint64_t a1)
{
  uint64_t v2;
  double v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _QWORD *v12;
  NSObject *v13;
  void **v14;
  CFAbsoluteTime Current;
  void **v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  void **v24;
  char *v25;
  char *v26;
  int v27;
  NSObject *v28;
  const char *v29;
  __int128 *v30;
  uint64_t v31;
  const char *v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  __int128 buf;
  void **v41;
  CFAbsoluteTime v42;
  __int16 v43;
  void **v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  void **v48;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
  v36 = *(_DWORD *)(a1 + 408);
  v4 = (_QWORD *)sub_100129380(v2 + 184);
  v5 = sub_1000DCFC0(v2 + 184);
  if (v4 != (_QWORD *)v5)
  {
    v6 = (_QWORD *)v5;
    v33 = 0;
    v7 = a1;
    v8 = a1 + 128;
    v34 = v7;
    v35 = (_QWORD *)(v7 + 136);
    do
    {
      v9 = v4[10];
      v10 = sub_100FA0798(v9, v36 > 1, v3, *(float *)(v2 + 128));
      v11 = sub_100077820(v9, v36 > 1, *(float *)(v2 + 128), v3);
      v12 = sub_1001C8840(v8, v9 + 48);
      if (sub_1001C94A8(v9))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v13 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&v44, v9);
          v14 = (void **)&v44;
          if (SHIBYTE(v48) < 0)
            v14 = v44;
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v10;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v11;
          HIWORD(buf) = 2080;
          v41 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WIFITILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s", (uint8_t *)&buf, 0x18u);
          if (SHIBYTE(v48) < 0)
            operator delete(v44);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A5408);
          v23 = qword_1022A02D8;
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(__p, v9);
          v24 = __p;
          if (v39 < 0)
            v24 = (void **)__p[0];
          LODWORD(v44) = 67109634;
          HIDWORD(v44) = v10;
          v45 = 1024;
          v46 = v11;
          v47 = 2080;
          v48 = v24;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "WIFITILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s", &v44, 24, v32);
          v26 = v25;
          if (v39 < 0)
            operator delete(__p[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::refreshTilesDataIfNeeded()", "%s\n", v26);
          if (v26 != (char *)&buf)
            free(v26);
        }
        if (v35 == v12 && v10)
        {
          sub_101191978(*(_DWORD *)(v2 + 4), &v44);
          Current = CFAbsoluteTimeGetCurrent();
          LOWORD(buf) = 0;
          BYTE2(buf) = 0;
          *((_QWORD *)&buf + 1) = 0xBFF0000000000000;
          v42 = Current;
          v43 = 1;
          LODWORD(v41) = 0;
          sub_100FA0AB0((uint64_t)v44, v9);
          v17 = v44;
          v44 = 0;
          v37 = (uint64_t)v17;
          sub_1011AEFB0(v34, &v37, v9 + 48, &buf);
          v18 = v37;
          v37 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          v19 = v44;
          v44 = 0;
          if (v19)
            (*((void (**)(void **))*v19 + 1))(v19);
          v33 = 1;
        }
      }
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v22 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v22);
      }
      v4 = v21;
    }
    while (v21 != v6);
    if ((v33 & 1) != 0)
    {
      v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 448) + 80))(*(_QWORD *)(v34 + 448));
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v28 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67240192;
        DWORD1(buf) = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@TileSched, wifi, set, %{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        LODWORD(v44) = 67240192;
        HIDWORD(v44) = v27;
        LODWORD(v31) = 8;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, wifi, set, %{public}d", &v44, v31);
        v30 = (__int128 *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::refreshTilesDataIfNeeded()", "%s\n", v29);
        if (v30 != &buf)
          free(v30);
      }
    }
  }
}

void sub_1011ABA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v21;

  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  v21 = *(_QWORD *)(v19 - 144);
  *(_QWORD *)(v19 - 144) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(exception_object);
}

id *sub_1011ABAAC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  id v12[2];
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  sub_100131938(v12, (uint64_t)"clearLocationInformationWifi", 0);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    v16 = "clearLocationInformationWifi";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v13 = 136446210;
    v14 = "clearLocationInformationWifi";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: %{public}s", &v13, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::clearLocationInformation()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1011ABD3C(a1);
  *(_DWORD *)(a1 + 232) = 0xFFFF;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 252) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_OWORD *)(a1 + 284) = _Q0;
  *(_OWORD *)(a1 + 300) = _Q0;
  *(_DWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 348) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 356) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  sub_100F5A36C(a1 + 456);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 40))(*(_QWORD *)(a1 + 448));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, 1, *(unsigned int *)(v8 + 4));
  return sub_100131740(v12);
}

void sub_1011ABD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_1011ABD3C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)buf = 134217984;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: cancelAllDownloads, planned, %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v11 = *(_QWORD *)(a1 + 144);
    v14 = 134217984;
    v15 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: cancelAllDownloads, planned, %lu", &v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::cancelAllDownloads()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v4 = *(_QWORD *)(a1 + 208);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *(_BYTE *)(a1 + 192) = 0;
  }
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *(_BYTE *)(a1 + 160) = 0;
  }
  v6 = *(_QWORD **)(a1 + 128);
  v7 = (_QWORD *)(a1 + 136);
  if (v6 != (_QWORD *)(a1 + 136))
  {
    do
    {
      sub_100FA2FF8(v6[10]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  sub_1008B9D24(a1 + 128, *(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v7;
}

id *sub_1011ABF88(uint64_t a1)
{
  return sub_1011ABAAC(a1 - 112);
}

void sub_1011ABF90(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  int v33;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 134218240;
    v31 = a1;
    v32 = 1024;
    v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: onClientNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v15 = *a3;
    v26 = 134218240;
    v27 = a1;
    v28 = 1024;
    v29 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: onClientNotification, %p, notification, %d", &v26, 18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v9 = *a3;
  if (*a3 == 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WIFITILE: #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      LOWORD(v26) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WIFITILE: #CacheDelete kNotificationSoftwareUpdateStorageRecovery", &v26, v25);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  }
  else if (v9 == 4)
  {
    *(_BYTE *)(a1 + 413) = *(_DWORD *)(a4 + 188) == 1;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(unsigned __int8 *)(a1 + 413);
      *(_DWORD *)buf = 67240192;
      LODWORD(v31) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WIFITILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v22 = *(unsigned __int8 *)(a1 + 413);
      v26 = 67240192;
      LODWORD(v27) = v22;
      LODWORD(v25) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %{public}d", &v26, v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    if (*(_BYTE *)(a1 + 413))
    {
      v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
      v14 = *(unsigned __int8 *)(a1 + 413);
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 496) + 16))(*(_QWORD *)(a1 + 496), v14);
  }
  else if (!v9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WIFITILE: kNotificationReset", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      LOWORD(v26) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: kNotificationReset", &v26, v25);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 496) + 16))(*(_QWORD *)(a1 + 496), 2);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 88))(*(_QWORD *)(a1 + 448));
  }
}

void sub_1011AC5B4(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  char v26;
  NSObject *v27;
  _BYTE *v28;
  NSObject *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  char *v35;
  char *v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  NSObject *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  uint8_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void *v55[2];
  uint64_t v56;
  _BYTE __p[24];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint8_t buf[4];
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  _BYTE *v68;

  if (qword_1022A02D0 != -1)
    goto LABEL_58;
  while (1)
  {
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedDownloadItems, start", buf, 2u);
    }
    v7 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      LOWORD(v59) = 0;
      LODWORD(v49) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: deleteAgedDownloadItems, start", &v59);
      v45 = (uint8_t *)v44;
      v7 = sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    v16 = *(uint64_t **)a2;
    if (*(_QWORD *)a2 == a2 + 8)
      break;
    v17 = 0;
    *(_QWORD *)&v15 = 134349571;
    v53 = v15;
    *(_QWORD *)&v15 = 134284033;
    v52 = v15;
    while (1)
    {
      v18 = v16[10];
      v59 = *((_OWORD *)v16 + 2);
      v60 = v16[6];
      if (*((char *)v16 + 79) < 0)
      {
        v7 = (uint64_t)sub_100115CE4(&v61, (void *)v16[7], v16[8]);
      }
      else
      {
        v61 = *(_OWORD *)(v16 + 7);
        v62 = v16[9];
      }
      if (*(_DWORD *)(v18 + 48))
        break;
      v19 = (uint64_t *)v16[1];
      v20 = v16;
      if (v19)
      {
        do
        {
          v21 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v21 = (uint64_t *)v20[2];
          v22 = *v21 == (_QWORD)v20;
          v20 = v21;
        }
        while (!v22);
      }
      v23 = *(double *)(v18 + 136);
      v24 = *(double *)(*(_QWORD *)(a1 + 480) + 16);
      v7 = sub_1000782F4(v18);
      v25 = vabdd_f64(a3, v23);
      if (v25 < v24)
        v26 = 1;
      else
        v26 = v7;
      if ((v26 & 1) == 0)
      {
        sub_10136937C(*(_QWORD *)(a1 + 480), v18 + 48);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v27 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v18 + 16))(__p, v18);
          v28 = __p;
          if (__p[23] < 0)
            v28 = *(_BYTE **)__p;
          *(_DWORD *)buf = v53;
          v64 = v25;
          v65 = 2050;
          v66 = v24;
          v67 = 2081;
          v68 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WifiTile, deleteAgedDownloadItems, delete, age, %{public}.1lf, %{public}.1lf, tile, %{private}s", buf, 0x20u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A53E8);
          v33 = qword_1022A0048;
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v18 + 16))(v55, v18);
          v34 = v55;
          if (v56 < 0)
            v34 = (void **)v55[0];
          *(_DWORD *)__p = v53;
          *(double *)&__p[4] = v25;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v24;
          *(_WORD *)&__p[22] = 2081;
          v58 = (uint64_t)v34;
          LODWORD(v49) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "WifiTile, deleteAgedDownloadItems, delete, age, %{public}.1lf, %{public}.1lf, tile, %{private}s", __p);
          v36 = v35;
          if (SHIBYTE(v56) < 0)
            operator delete(v55[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v36);
          if (v36 != (char *)buf)
            free(v36);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v29 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v30 = sub_1001C087C((uint64_t)&v59);
          v31 = sub_1001C0858((uint64_t)&v59);
          v32 = *(_QWORD *)(a2 + 16) - 1;
          *(_DWORD *)buf = v52;
          v64 = v30;
          v65 = 2049;
          v66 = v31;
          v67 = 2050;
          v68 = (_BYTE *)v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A53E8);
          v37 = qword_1022A0048;
          v38 = sub_1001C087C((uint64_t)&v59);
          v39 = sub_1001C0858((uint64_t)&v59);
          v40 = *(_QWORD *)(a2 + 16) - 1;
          *(_DWORD *)__p = v52;
          *(double *)&__p[4] = v38;
          *(_WORD *)&__p[12] = 2049;
          *(double *)&__p[14] = v39;
          *(_WORD *)&__p[22] = 2050;
          v58 = v40;
          LODWORD(v49) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "@TileReq, wifi, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", __p);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v41);
          if (v42 != buf)
            free(v42);
        }
        sub_10008A9F0((uint64_t **)a2, v16);
        sub_1008B9B1C((uint64_t)(v16 + 4));
        operator delete(v16);
        ++v17;
      }
      if (SHIBYTE(v62) < 0)
        operator delete((void *)v61);
      v16 = v21;
      if (v21 == (uint64_t *)(a2 + 8))
        goto LABEL_51;
    }
    sub_1019448F0(v7, v8, v9, v10, v11, v12, v13, v14, v48, v49, v50, v51, v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54, (uint64_t)v55[0], (uint64_t)v55[1],
      v56,
      *(uint64_t *)__p,
      *(uint64_t *)&__p[8],
      *(uint64_t *)&__p[16],
      v58);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm", 426, "deleteAgedDownloadItems");
    __break(1u);
LABEL_58:
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  v17 = 0;
LABEL_51:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v64) = v17;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedDownloadItems, deleted, %u, done", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    LODWORD(v59) = 67109120;
    DWORD1(v59) = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: deleteAgedDownloadItems, deleted, %u, done", &v59);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
}

void sub_1011ACDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011ACDF0(uint64_t a1, double a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t **v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  double v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  double *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  double *v39;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  int v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  double *v50;
  int v51;
  _BYTE v52[10];
  double v53;
  __int16 v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  void *__p;
  char v62;
  uint8_t buf[4];
  _BYTE v64[10];
  uint64_t v65;
  __int16 v66;
  uint64_t v67;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v4 + 31) >= 0)
      v6 = v4 + 8;
    else
      v6 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v64 = v6;
    *(_WORD *)&v64[8] = 2048;
    v65 = sub_100026CC8(v4 + 184);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedTiles, start, name, %s, size, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v34 = qword_1022A02D8;
    if (*(char *)(v4 + 31) >= 0)
      v35 = v4 + 8;
    else
      v35 = *(_QWORD *)(v4 + 8);
    v56 = 136315394;
    v57 = v35;
    v58 = 2048;
    v59 = sub_100026CC8(v4 + 184);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "WIFITILE: deleteAgedTiles, start, name, %s, size, %lu", (const char *)&v56, 22);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  sub_10136AA64(*(_QWORD *)(a1 + 480), (uint64_t)&v49, a2);
  v48 = v4;
  v7 = (double *)v49;
  v8 = v50;
  if (v49 != v50)
  {
    v9 = (uint64_t **)(v4 + 184);
    do
    {
      sub_1000C18E4(v7, (uint64_t)&v56);
      v10 = sub_1001C85FC((uint64_t)v9, &v56);
      if (v10)
      {
        if (!sub_1001C94A8(v10))
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A5428);
          v11 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67174913;
            *(_DWORD *)v64 = v57;
            *(_WORD *)&v64[4] = 1025;
            *(_DWORD *)&v64[6] = HIDWORD(v57);
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Deleted wifi #tile isFileExistsOnServer is false. x, %{private}d, y, %{private}d, #CloneMe", buf, 0xEu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021A5428);
            v51 = 67174913;
            *(_DWORD *)v52 = v57;
            *(_WORD *)&v52[4] = 1025;
            *(_DWORD *)&v52[6] = HIDWORD(v57);
            LODWORD(v46) = 14;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "Deleted wifi #tile isFileExistsOnServer is false. x, %{private}d, y, %{private}d, #CloneMe", &v51, v46);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 0, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v13 = sub_1001C087C((uint64_t)&v56);
          v14 = sub_1001C0858((uint64_t)&v56);
          v15 = sub_100026CC8((uint64_t)v9);
          *(_DWORD *)buf = 134284033;
          *(double *)v64 = v13;
          *(_WORD *)&v64[8] = 2049;
          v65 = *(_QWORD *)&v14;
          v66 = 2050;
          v67 = v15 - 1;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A53E8);
          v17 = qword_1022A0048;
          v18 = sub_1001C087C((uint64_t)&v56);
          v19 = sub_1001C0858((uint64_t)&v56);
          v20 = sub_100026CC8((uint64_t)v9);
          v51 = 134284033;
          *(double *)v52 = v18;
          *(_WORD *)&v52[8] = 2049;
          v53 = v19;
          v54 = 2050;
          v55 = v20 - 1;
          LODWORD(v46) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", &v51, v46);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        sub_1008B92E4(v9, &v56);
      }
      else if (*(_BYTE *)(a1 + 217))
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A5428);
        v16 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67174913;
          *(_DWORD *)v64 = v57;
          *(_WORD *)&v64[4] = 1025;
          *(_DWORD *)&v64[6] = HIDWORD(v57);
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Missing wifi #tile, x, %{private}d, y, %{private}d, #CloneMe", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A5428);
          v51 = 67174913;
          *(_DWORD *)v52 = v57;
          *(_WORD *)&v52[4] = 1025;
          *(_DWORD *)&v52[6] = HIDWORD(v57);
          LODWORD(v46) = 14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "Missing wifi #tile, x, %{private}d, y, %{private}d, #CloneMe", &v51, v46);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
      }
      if (v62 < 0)
        operator delete(__p);
      v7 += 18;
    }
    while (v7 != v8);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v27 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v29 = v49;
    v28 = v50;
    v30 = sub_100026CC8(v48 + 184);
    v31 = v48 + 8;
    v32 = *(_QWORD *)(v48 + 8);
    v33 = *(char *)(v48 + 31);
    *(_DWORD *)buf = 134218498;
    if (v33 < 0)
      v31 = v32;
    *(_QWORD *)v64 = 0x8E38E38E38E38E39 * (((char *)v28 - v29) >> 4);
    *(_WORD *)&v64[8] = 2048;
    v65 = v30;
    v66 = 2080;
    v67 = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v38 = qword_1022A02D8;
    v40 = v49;
    v39 = v50;
    v41 = sub_100026CC8(v48 + 184);
    v42 = *(void **)(v48 + 8);
    v43 = *(char *)(v48 + 31);
    v56 = 134218498;
    if (v43 >= 0)
      v42 = (void *)(v48 + 8);
    v57 = 0x8E38E38E38E38E39 * (((char *)v39 - v40) >> 4);
    v58 = 2048;
    v59 = v41;
    v60 = 2080;
    __p = v42;
    LODWORD(v46) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 2, "WIFITILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s", &v56, v46, v47);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  if (v49)
  {
    v50 = (double *)v49;
    operator delete(v49);
  }
}

void sub_1011AD724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011AD784(uint64_t a1, uint64_t a2)
{
  return sub_100077034(a1 - 112, a2);
}

void sub_1011AD78C(uint64_t a1, double a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = v4 + 8;
    if (*(char *)(v4 + 31) < 0)
      v6 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)buf = 136315138;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WIFITILE: dispatch, deleteAgedTiles, for, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v10 = *(_QWORD *)(v4 + 8);
    v9 = v4 + 8;
    v8 = v10;
    if (*(char *)(v9 + 23) >= 0)
      v8 = v9;
    v15 = 136315138;
    v16 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: dispatch, deleteAgedTiles, for, %s", (const char *)&v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::deleteAgedTiles(CFAbsoluteTime)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedTiles, fTilesToDownload", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: deleteAgedTiles, fTilesToDownload", &v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::deleteAgedTiles(CFAbsoluteTime)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  sub_1011AC5B4(a1, a1 + 128, a2);
  sub_1011ACDF0(a1, a2);
}

void sub_1011ADAB8(uint64_t a1, double a2)
{
  sub_1011AD78C(a1 - 112, a2);
}

void sub_1011ADAC0(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t i;
  size_t v26;
  std::string *v27;
  const void *v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  std::string v53;
  _BYTE __p[24];
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  _BYTE buf[22];
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = v52 + 8;
    if (*(char *)(v52 + 31) < 0)
      v7 = *(_QWORD *)(v52 + 8);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: removeAllTiles, cleaning map, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v40 = v52 + 8;
    if (*(char *)(v52 + 31) < 0)
      v40 = *(_QWORD *)(v52 + 8);
    *(_DWORD *)__p = 67109378;
    *(_DWORD *)&__p[4] = a3;
    *(_WORD *)&__p[8] = 2080;
    *(_QWORD *)&__p[10] = v40;
    LODWORD(v50) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: removeAllTiles, cleaning map, %d, %s", __p, v50);
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  v8 = v52 + 184;
  v9 = (_QWORD *)sub_100129380(v52 + 184);
  if (v9 != (_QWORD *)sub_1000DCFC0(v52 + 184))
  {
    do
    {
      if (a2)
      {
        v10 = v9[10] + 48;
        sub_10136937C(*(_QWORD *)(a1 + 480), v10);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v11 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v12 = sub_1001C087C(v10);
          v13 = sub_1001C0858(v10);
          v14 = sub_100026CC8(v8);
          *(_DWORD *)buf = 134284033;
          *(double *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v13;
          v59 = 2050;
          v60 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A53E8);
          v18 = qword_1022A0048;
          v19 = sub_1001C087C(v10);
          v20 = sub_1001C0858(v10);
          v21 = sub_100026CC8(v8);
          *(_DWORD *)__p = 134284033;
          *(double *)&__p[4] = v19;
          *(_WORD *)&__p[12] = 2049;
          *(double *)&__p[14] = v20;
          *(_WORD *)&__p[22] = 2050;
          v55 = v21;
          LODWORD(v50) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", __p, v50);
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
      }
      v15 = (_QWORD *)v9[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v9[2];
          v17 = *v16 == (_QWORD)v9;
          v9 = v16;
        }
        while (!v17);
      }
      v9 = v16;
    }
    while (v16 != (_QWORD *)sub_1000DCFC0(v8));
  }
  sub_1008B97D8(v8);
  sub_10136B5B4(*(_QWORD **)(a1 + 480));
  if ((a2 & 1) != 0)
  {
    sub_1011AE280((const char *)(a1 + 424), (uint64_t *)buf);
    v24 = *(_QWORD *)buf;
    for (i = *(_QWORD *)&buf[8]; v24 != i; v24 += 24)
    {
      if (*(char *)(a1 + 447) >= 0)
        v26 = *(unsigned __int8 *)(a1 + 447);
      else
        v26 = *(_QWORD *)(a1 + 432);
      sub_100259584((uint64_t)&v53, v26 + 1);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v53;
      else
        v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if (v26)
      {
        if (*(char *)(a1 + 447) >= 0)
          v28 = (const void *)(a1 + 424);
        else
          v28 = *(const void **)(a1 + 424);
        memmove(v27, v28, v26);
      }
      *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 47;
      v29 = *(char *)(v24 + 23);
      if (v29 >= 0)
        v30 = (const std::string::value_type *)v24;
      else
        v30 = *(const std::string::value_type **)v24;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v24 + 23);
      else
        v31 = *(_QWORD *)(v24 + 8);
      v32 = std::string::append(&v53, v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (__p[23] >= 0)
        v34 = __p;
      else
        v34 = *(const char **)__p;
      sub_1005164F0(v34);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    sub_10136A380(*(_QWORD *)(a1 + 480));
    *(_QWORD *)__p = buf;
    sub_100259608((void ***)__p);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v35 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v52 + 31) >= 0)
      v36 = v52 + 8;
    else
      v36 = *(_QWORD *)(v52 + 8);
    v37 = sub_100026CC8(v8);
    v38 = sub_1008B97D0(v8);
    v39 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v36;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v37;
    v59 = 2048;
    v60 = v38;
    v61 = 2048;
    v62 = v39;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "WIFITILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v43 = qword_1022A02D8;
    if (*(char *)(v52 + 31) >= 0)
      v44 = v52 + 8;
    else
      v44 = *(_QWORD *)(v52 + 8);
    v45 = sub_100026CC8(v8);
    v46 = sub_1008B97D0(v8);
    v47 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v44;
    *(_WORD *)&__p[12] = 2048;
    *(_QWORD *)&__p[14] = v45;
    *(_WORD *)&__p[22] = 2048;
    v55 = v46;
    v56 = 2048;
    v57 = v47;
    LODWORD(v50) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 2, "WIFITILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu", __p, v50, v51, v52);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
}

void sub_1011AE22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  __p = &a31;
  sub_100259608((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1011AE280(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  DIR *v4;
  dirent *v5;
  char *d_name;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t *v15;
  uint8_t buf[4];
  uint64_t *v17;

  v2 = (uint64_t *)a1;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = opendir(a1);
  if (v4)
  {
    while (1)
    {
      v5 = readdir(v4);
      if (!v5)
        break;
      d_name = v5->d_name;
      if (strcmp(".", v5->d_name) && strcmp("..", d_name))
      {
        v7 = a2[1];
        if (v7 >= a2[2])
        {
          v8 = sub_100FC2BEC(a2, d_name);
        }
        else
        {
          sub_1015A2E04((_QWORD *)a2[1], d_name);
          v8 = v7 + 24;
          a2[1] = v7 + 24;
        }
        a2[1] = v8;
      }
    }
    closedir(v4);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v2 + 23) >= 0)
        v10 = v2;
      else
        v10 = (uint64_t *)*v2;
      *(_DWORD *)buf = 136380675;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning, failed to read directory, %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      if (*((char *)v2 + 23) >= 0)
        v11 = v2;
      else
        v11 = (uint64_t *)*v2;
      v14 = 136380675;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#warning, failed to read directory, %{private}s", &v14, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "static std::vector<std::string> CLWifiTilesManager::listFilesInDirectory(const std::string &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_1011AE4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100259608((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1011AE528(uint64_t a1, int a2, int a3)
{
  sub_1011ADAC0(a1 - 112, a2, a3);
}

void sub_1011AE530()
{
  operator new();
}

void sub_1011AE578()
{
  operator delete();
}

uint64_t sub_1011AE59C(uint64_t *a1, double a2)
{
  _BYTE v5[8];
  char *v6;

  (*(void (**)(uint64_t *, _QWORD))(*a1 + 208))(a1, 0);
  sub_1011AE7B0(a1, (uint64_t)v5, a2);
  sub_100067A00((uint64_t)v5, v6);
  return 1;
}

void sub_1011AE5FC(id a1, unint64_t a2, unint64_t a3)
{
  double v5;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  double v17;
  __int16 v18;
  CFAbsoluteTime Current;

  v5 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A5448);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v7[0] = 68290306;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = "elapsed";
    v12 = 2050;
    v13 = a2;
    v14 = 2050;
    v15 = a3;
    v16 = 2050;
    v17 = v5;
    v18 = 2050;
    Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLWifiTilesManager::lockAllOnDiskWifiTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v7, 0x44u);
  }
}

uint64_t sub_1011AE72C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    sub_1018932E8((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_1011AE7B0(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  NSObject *v6;
  double *v7;
  double *v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  NSObject *v28;
  double v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  double *v38;
  _BYTE v39[12];
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  void *__p;
  char v51;
  _BYTE buf[12];
  __int16 v53;
  double v54;
  __int16 v55;
  uint64_t v56;

  if (!*(_BYTE *)(a1[60] + 53))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "The WifiAccessPointLocationService schema is incorrect.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      LOWORD(v46) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "The WifiAccessPointLocationService schema is incorrect.", &v46, 2);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 0, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  sub_100214C64(a1[60], &v37);
  v7 = (double *)v37;
  v8 = v38;
  if (v37 != v38)
  {
    do
    {
      v36 = 0;
      v9 = (*(uint64_t (**)(uint64_t *, double *, double))(*a1 + 256))(a1, v7, a3);
      v36 = v10;
      sub_1000C18E4(v7, (uint64_t)&v46);
      if (v9)
      {
        sub_1011B6C5C((uint64_t **)a2, (uint64_t)&v46, (uint64_t)&v46, &v36);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v11 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v12 = sub_1001C087C((uint64_t)&v46);
          v13 = sub_1001C0858((uint64_t)&v46);
          v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
          v15 = sub_100026CC8(v14 + 184);
          *(_DWORD *)buf = 134284033;
          *(double *)&buf[4] = v12;
          v53 = 2049;
          v54 = v13;
          v55 = 2050;
          v56 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, database, size, %{public}lu", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_25;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v16 = qword_1022A0048;
        v17 = sub_1001C087C((uint64_t)&v46);
        v18 = sub_1001C0858((uint64_t)&v46);
        v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
        v20 = sub_100026CC8(v19 + 184);
        *(_DWORD *)v39 = 134284033;
        *(double *)&v39[4] = v17;
        v40 = 2049;
        v41 = v18;
        v42 = 2050;
        v43 = v20;
        LODWORD(v35) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, database, size, %{public}lu", v39, v35);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 2, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v21);
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A5428);
        v23 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          sub_100BCC240(&v46, buf);
          v24 = buf;
          if (v55 < 0)
            v24 = *(_BYTE **)buf;
          *(_DWORD *)v39 = 136380675;
          *(_QWORD *)&v39[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to create tile file object, %{private}s", v39, 0xCu);
          if (SHIBYTE(v55) < 0)
            operator delete(*(void **)buf);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_25;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A5428);
        v25 = qword_1022A0058;
        sub_100BCC240(&v46, v39);
        v26 = v39;
        if (v42 < 0)
          v26 = *(_BYTE **)v39;
        v44 = 136380675;
        v45 = v26;
        LODWORD(v35) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 16, "Failed to create tile file object, %{private}s", &v44, v35);
        v22 = v27;
        if (SHIBYTE(v42) < 0)
          operator delete(*(void **)v39);
        sub_100512490("Generic", 1, 0, 0, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v22);
      }
      if (v22 != buf)
        free(v22);
LABEL_25:
      if (v51 < 0)
        operator delete(__p);
      v7 += 18;
    }
    while (v7 != v8);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v28 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v29 = *(double *)(a2 + 16);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = 0x8E38E38E38E38E39 * (((char *)v38 - (_BYTE *)v37) >> 4);
    v53 = 2048;
    v54 = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "WIFITILE: db to map, %lu, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v30 = *(_QWORD *)(a2 + 16);
    v46 = 134218240;
    v47 = 0x8E38E38E38E38E39 * (((char *)v38 - (_BYTE *)v37) >> 4);
    v48 = 2048;
    v49 = v30;
    LODWORD(v35) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: db to map, %lu, %lu", &v46, v35);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (v37)
  {
    v38 = (double *)v37;
    operator delete(v37);
  }
}

void sub_1011AEF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (__p)
    operator delete(__p);
  sub_100067A00(v33, *(char **)(v33 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1011AEFB0(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  __int128 v35;
  uint64_t v36;
  _BYTE buf[24];
  uint64_t v38;
  _BYTE v39[22];
  void *__p[2];
  char v41;

  v34 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_100115CE4(&v35, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    v35 = *(_OWORD *)(a3 + 24);
    v36 = *(_QWORD *)(a3 + 40);
  }
  sub_100FBCB08(*a2, &v34);
  v7 = *a2;
  v8 = *a4;
  v9 = a4[1];
  *(_WORD *)(v7 + 144) = *((_WORD *)a4 + 16);
  *(_OWORD *)(v7 + 112) = v8;
  *(_OWORD *)(v7 + 128) = v9;
  sub_100FA21A0(*a2, (uint64_t)&qword_10230D2F0);
  v10 = (uint64_t **)(a1 + 128);
  if ((_QWORD *)(a1 + 136) != sub_1001C8840(a1 + 128, (uint64_t)&v34))
  {
    sub_101944BAC(qword_1022A02D0 == -1, v11, v12, v13, v14, v15, v16, v17, v30, v31, v32, v33, (uint64_t)v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_, v34.__r_.__value_.__r.__words[2], v35, *((uint64_t *)&v35 + 1), v36, *(uint64_t *)buf,
      *(uint64_t *)&buf[8],
      *(uint64_t *)&buf[16],
      v38,
      *(uint64_t *)v39,
      *(uint64_t *)&v39[8]);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm", 1529, "addToDownloadList");
    __break(1u);
    goto LABEL_19;
  }
  if (qword_1022A02D0 != -1)
LABEL_19:
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v18 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 16))(__p);
    v19 = v41 >= 0 ? __p : (void **)__p[0];
    v20 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu", buf, 0x16u);
    if (v41 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v25 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 16))(buf);
    if (buf[23] >= 0)
      v26 = buf;
    else
      v26 = *(_BYTE **)buf;
    v27 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)v39 = 136315394;
    *(_QWORD *)&v39[4] = v26;
    *(_WORD *)&v39[12] = 2048;
    *(_QWORD *)&v39[14] = v27;
    LODWORD(v31) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 2, "WIFITILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu", v39, v31);
    v29 = v28;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)", "%s\n", v29);
    if (v29 != (char *)__p)
      free(v29);
  }
  __p[0] = &v34;
  v21 = sub_1008B9D6C(v10, (uint64_t)&v34, (uint64_t)&unk_101B9EB60, (_OWORD **)__p);
  v22 = *a2;
  *a2 = 0;
  v23 = v21[10];
  v21[10] = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  return 1;
}

void sub_1011AF31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011AF350(uint64_t a1, _BYTE *a2)
{
  int v4;
  int v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;
  char v9;
  char v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char v17;
  NSObject *v18;
  void **v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  NSObject *v23;
  void **v24;
  NSObject *v26;
  void **v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  _BYTE buf[12];
  char v41;
  int v42;
  _BYTE *v43;
  void *__p[2];
  char v45;

  v4 = *(_DWORD *)(a1 + 408);
  if (v4 <= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 412);
    v6 = *(_BYTE *)(a1 + 412) != 0;
    goto LABEL_5;
  }
  if (v4 == 1)
  {
    v5 = *(unsigned __int8 *)(a1 + 412);
    v6 = 1;
LABEL_5:
    v7 = v5 != 0;
    goto LABEL_7;
  }
  v6 = 1;
  v7 = 1;
LABEL_7:
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 240))(a1, a2))
  {
    v9 = !v6;
    if (a2[112])
      v10 = !v6;
    else
      v10 = 1;
    if ((v10 & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(__p, a2);
        v12 = v45 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, rule, isCurrent, isAllowCellularIfCurrent,  IsOkToDownloadRealtime, %s", buf, 0xCu);
        if (v45 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v13 = qword_1022A02D8;
        (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(buf, a2);
        if (v41 >= 0)
          v14 = buf;
        else
          v14 = *(_BYTE **)buf;
        v42 = 136315138;
        v43 = v14;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 2, "WIFITILE: checkDownloadSchedule, rule, isCurrent, isAllowCellularIfCurrent,  IsOkToDownloadRealtime, %s", (const char *)&v42);
        v16 = v15;
        if (v41 < 0)
          operator delete(*(void **)buf);
LABEL_101:
        sub_100512490("Generic", 1, 0, 2, "int CLWifiTilesManager::getDownloadConnectionType(CLTileFile *)", "%s\n", v16);
        if (v16 != (char *)__p)
          free(v16);
        return !*(_BYTE *)(a1 + 160);
      }
      return !*(_BYTE *)(a1 + 160);
    }
    if (!*(_BYTE *)(v8 + 177))
      v9 = 1;
    if ((v9 & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v23 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(__p, a2);
        v24 = v45 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, rule, isCurrent, fDownloadCurrentTileOverCell, IsOkToDownloadRealtime, %s", buf, 0xCu);
        if (v45 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v34 = qword_1022A02D8;
        (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(buf, a2);
        if (v41 >= 0)
          v35 = buf;
        else
          v35 = *(_BYTE **)buf;
        v42 = 136315138;
        v43 = v35;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v34, 2, "WIFITILE: checkDownloadSchedule, rule, isCurrent, fDownloadCurrentTileOverCell, IsOkToDownloadRealtime, %s", (const char *)&v42);
        v16 = v36;
        if (v41 < 0)
          operator delete(*(void **)buf);
        goto LABEL_101;
      }
      return !*(_BYTE *)(a1 + 160);
    }
    if (v7)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v32 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(__p, a2);
        v33 = v45 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, rule, isCurrent, IsOkToDownloadLarge, %s", buf, 0xCu);
        if (v45 < 0)
          operator delete(__p[0]);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_91;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v37 = qword_1022A02D8;
      (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v41 >= 0)
        v38 = buf;
      else
        v38 = *(_BYTE **)buf;
      v42 = 136315138;
      v43 = v38;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 2, "WIFITILE: checkDownloadSchedule, rule, isCurrent, IsOkToDownloadLarge, %s", (const char *)&v42);
      v31 = v39;
      if (v41 < 0)
        operator delete(*(void **)buf);
LABEL_110:
      sub_100512490("Generic", 1, 0, 2, "int CLWifiTilesManager::getDownloadConnectionType(CLTileFile *)", "%s\n", v31);
      if (v31 != (char *)__p)
        free(v31);
      goto LABEL_91;
    }
    return 0;
  }
  v17 = !v6;
  if (!a2[113])
    v17 = 1;
  if ((v17 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(__p, a2);
      v19 = v45 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, rule, isAllowCellularIfNotCurrent, IsOkToDownloadRealtime, %s", buf, 0xCu);
      if (v45 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v20 = qword_1022A02D8;
      (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v41 >= 0)
        v21 = buf;
      else
        v21 = *(_BYTE **)buf;
      v42 = 136315138;
      v43 = v21;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 2, "WIFITILE: checkDownloadSchedule, rule, isAllowCellularIfNotCurrent, IsOkToDownloadRealtime, %s", (const char *)&v42);
      v16 = v22;
      if (v41 < 0)
        operator delete(*(void **)buf);
      goto LABEL_101;
    }
    return !*(_BYTE *)(a1 + 160);
  }
  if (!v7)
    return 0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v26 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(__p, a2);
    v27 = v45 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, rule, IsOkToDownloadLarge, %s", buf, 0xCu);
    if (v45 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v28 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)a2 + 16))(buf, a2);
    if (v41 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    v42 = 136315138;
    v43 = v29;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v28, 2, "WIFITILE: checkDownloadSchedule, rule, IsOkToDownloadLarge, %s", (const char *)&v42);
    v31 = v30;
    if (v41 < 0)
      operator delete(*(void **)buf);
    goto LABEL_110;
  }
LABEL_91:
  if (*(_BYTE *)(a1 + 192))
    return 0;
  return 2;
}

_QWORD *sub_1011AFD00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 128);
  v3 = (_QWORD *)(a1 + 136);
  if (v2 != (_QWORD *)(a1 + 136))
  {
    while (sub_1000753C8(v2[10]) != a2)
    {
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
      if (v6 == v3)
        return v3;
    }
  }
  return v2;
}

id *sub_1011AFD84(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  int v33;
  NSObject *v34;
  double v35;
  double v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  uint8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  __int128 v62;
  uint64_t v63;
  _BYTE __p[24];
  _BYTE v65[24];
  _BYTE buf[12];
  __int16 v67;
  _BYTE v68[10];
  _BYTE v69[6];
  _BYTE v70[6];
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  sub_100131938(&v59, (uint64_t)"wifiTileDownloaded", 0);
  v9 = sub_1011AFD00(a1, a2);
  if ((_QWORD *)(a1 + 136) == v9)
  {
    HIDWORD(v58) = 0;
  }
  else
  {
    v10 = (_DWORD *)v9[10];
    HIDWORD(v58) = 0;
    if (v10)
    {
      v11 = *(_QWORD *)(sub_1000753C8((uint64_t)v10) + 96);
      v12 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
      v13 = v12;
      v14 = a1 + 456;
      if ((a3 & 1) != 0 || v11 == -1100)
        v15 = sub_100F5A36C(v14);
      else
        sub_100F5A398(v14, v12);
      if (v10[12])
      {
        sub_1019448F0((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v55, v56, v57, v58, v59, v60, *(uint64_t *)v61, *(uint64_t *)&v61[8], *(uint64_t *)&v61[16], v62, *((uint64_t *)&v62 + 1),
          v63,
          *(uint64_t *)__p,
          *(uint64_t *)&__p[8],
          *(uint64_t *)&__p[16],
          *(uint64_t *)v65);
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm", 1016, "tileDownloadCompleted");
        __break(1u);
      }
      else
      {
        v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
        if (a3)
        {
          if ((_os_feature_enabled_impl("CoreLocation", "TilesService") & 1) != 0)
            v5 = 1;
          else
            v5 = (*(uint64_t (**)(_DWORD *, char *))(*(_QWORD *)v10 + 40))(v10, (char *)&v58 + 4);
        }
        else
        {
          v5 = 0;
        }
        v4 = &qword_1022A0000;
        if (qword_1022A02D0 == -1)
          goto LABEL_24;
      }
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
LABEL_24:
      v26 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v27 = v5;
        (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)v10 + 16))(__p, v10);
        v28 = __p[23];
        v29 = *(_BYTE **)__p;
        v30 = *(_QWORD *)(sub_1000753C8((uint64_t)v10) + 96);
        v31 = *(_DWORD *)(a1 + 408);
        v32 = __p;
        if (v28 < 0)
          v32 = v29;
        v33 = *(unsigned __int8 *)(a1 + 216);
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = v32;
        v67 = 1024;
        v5 = v27;
        *(_DWORD *)v68 = v27;
        *(_WORD *)&v68[4] = 1024;
        *(_DWORD *)&v68[6] = v30;
        *(_WORD *)v69 = 1024;
        *(_DWORD *)&v69[2] = v11 == -1100;
        *(_WORD *)v70 = 1024;
        *(_DWORD *)&v70[2] = v31;
        v71 = 1024;
        v72 = v33;
        v73 = 1024;
        v74 = HIDWORD(v58);
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d", buf, 0x30u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v4 = &qword_1022A0000;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v4[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v40 = qword_1022A02D8;
        (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)v10 + 16))(v61, v10);
        v41 = v61[23];
        v42 = *(_BYTE **)v61;
        v43 = *(_QWORD *)(sub_1000753C8((uint64_t)v10) + 96);
        v44 = *(_DWORD *)(a1 + 408);
        v45 = v61;
        if (v41 < 0)
          v45 = v42;
        v46 = *(unsigned __int8 *)(a1 + 216);
        *(_DWORD *)__p = 136316674;
        *(_QWORD *)&__p[4] = v45;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v5;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v43;
        *(_WORD *)v65 = 1024;
        *(_DWORD *)&v65[2] = v11 == -1100;
        *(_WORD *)&v65[6] = 1024;
        *(_DWORD *)&v65[8] = v44;
        *(_WORD *)&v65[12] = 1024;
        *(_DWORD *)&v65[14] = v46;
        *(_WORD *)&v65[18] = 1024;
        *(_DWORD *)&v65[20] = HIDWORD(v58);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "WIFITILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d", __p, 48, v57, v58, v59, v60, *(_DWORD *)v61);
        v48 = v47;
        if ((v61[23] & 0x80000000) != 0)
          operator delete(*(void **)v61);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v48);
        if (v48 != buf)
          free(v48);
      }
      *(_OWORD *)__p = *((_OWORD *)v10 + 3);
      *(_QWORD *)&__p[16] = *((_QWORD *)v10 + 8);
      if (*((char *)v10 + 95) < 0)
      {
        sub_100115CE4(v65, *((void **)v10 + 9), *((_QWORD *)v10 + 10));
      }
      else
      {
        *(_OWORD *)v65 = *(_OWORD *)(v10 + 18);
        *(_QWORD *)&v65[16] = *((_QWORD *)v10 + 11);
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v34 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v35 = sub_1001C087C((uint64_t)__p);
        v36 = sub_1001C0858((uint64_t)__p);
        v37 = *(_QWORD *)(sub_1000753C8((uint64_t)v10) + 96);
        *(_DWORD *)buf = 134284289;
        *(double *)&buf[4] = v35;
        v67 = 2049;
        *(double *)v68 = v36;
        *(_WORD *)&v68[8] = 1026;
        *(_DWORD *)v69 = v5;
        *(_WORD *)&v69[4] = 1026;
        *(_DWORD *)v70 = v37;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v49 = qword_1022A0048;
        v50 = sub_1001C087C((uint64_t)__p);
        v51 = sub_1001C0858((uint64_t)__p);
        v52 = *(_QWORD *)(sub_1000753C8((uint64_t)v10) + 96);
        *(_DWORD *)v61 = 134284289;
        *(double *)&v61[4] = v50;
        *(_WORD *)&v61[12] = 2049;
        *(double *)&v61[14] = v51;
        *(_WORD *)&v61[22] = 1026;
        LODWORD(v62) = v5;
        WORD2(v62) = 1026;
        *(_DWORD *)((char *)&v62 + 6) = v52;
        LODWORD(v56) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "@TileReq, wifi, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", v61, v56);
        v54 = (char *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      if (v5)
      {
        v38 = HIDWORD(v58);
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 232) + 16))(v3 + 232);
        *(_DWORD *)(v3 + 276) += v38;
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 232) + 24))(v3 + 232);
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 232) + 16))(v3 + 232);
        ++*(_DWORD *)(v3 + 284);
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 232) + 24))(v3 + 232);
        sub_1015A2E04(buf, "tileDownloadCompleted");
        sub_100CDC4CC(v3 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 408));
        if ((v68[9] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      sub_1011B0670(a1, a2, v5, v13);
      if ((v65[23] & 0x80000000) != 0)
        operator delete(*(void **)v65);
      return sub_100131740((id *)&v59);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v23 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "WifiTile, where did this download request come from?, download, %{public}p, #CloneMe", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    *(_DWORD *)__p = 134349056;
    *(_QWORD *)&__p[4] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, where did this download request come from?, download, %{public}p, #CloneMe", __p, 12);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 0, "void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  return sub_100131740((id *)&v59);
}

void sub_1011B05B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a35 < 0)
    operator delete(__p);
  sub_100131740(&a13);
  _Unwind_Resume(a1);
}

void sub_1011B0670(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  int v28;
  int v29;
  double v30;
  uint64_t v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  NSObject *v38;
  _BYTE *v39;
  NSObject *v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  void **v44;
  uint64_t v45;
  void **v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void **v51;
  int v52;
  int v53;
  double v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v58;
  char *v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _BYTE *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  double v72;
  char *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  std::string v78;
  void *v79[2];
  uint64_t v80;
  void *v81[4];
  char v82;
  _DWORD v83[3];
  _BYTE __p[12];
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  _BYTE v90[10];
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  _BYTE buf[12];
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  _BYTE v102[10];
  uint64_t v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;

  v10 = sub_1011AFD00(a1, a2);
  if ((uint64_t *)(a1 + 136) == v10)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "WifiTile, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_DWORD *)__p = 134349056;
      *(_QWORD *)&__p[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe", __p, 12);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    v11 = v10;
    LODWORD(v12) = a1 + 128;
    v13 = v10[10];
    if (v13)
    {
      if (*(_DWORD *)(v13 + 48))
      {
        sub_101944E7C();
      }
      else
      {
        v73 = (char *)(a1 + 128);
        v74 = (uint64_t)(v10 + 4);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
        HIDWORD(v72) = *(_DWORD *)(a1 + 408);
        if (*(_QWORD *)(a1 + 176) == a2)
        {
          v76 = 0;
          v77 = a1 + 152;
LABEL_23:
          v5 = *(_QWORD *)(sub_1000753C8(v13) + 96);
          v4 = &qword_1022A0000;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A5408);
          v19 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(__p, v13);
            v20 = v12;
            v21 = SHIBYTE(v88);
            v22 = *(_BYTE **)__p;
            v23 = *(_QWORD *)(sub_1000753C8(v13) + 96);
            v24 = __p;
            v25 = *(_DWORD *)(a1 + 408);
            if (v21 < 0)
              v24 = v22;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v24;
            v97 = 1024;
            v98 = a3;
            v99 = 1024;
            v100 = v23;
            v101 = 1024;
            *(_DWORD *)v102 = v5 == -1100;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = v25;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d", buf, 0x24u);
            if (SHIBYTE(v88) < 0)
              operator delete(*(void **)__p);
            v12 = v20;
            v4 = &qword_1022A0000;
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_32;
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 == -1)
          {
LABEL_74:
            v42 = qword_1022A02D8;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v79, v13);
            v71 = v12;
            v43 = SHIBYTE(v80);
            v44 = (void **)v79[0];
            v45 = *(_QWORD *)(sub_1000753C8(v13) + 96);
            v46 = v79;
            v47 = *(_DWORD *)(a1 + 408);
            if (v43 < 0)
              v46 = v44;
            *(_DWORD *)__p = 136316162;
            *(_QWORD *)&__p[4] = v46;
            v85 = 1024;
            v86 = a3;
            v87 = 1024;
            v88 = v45;
            v89 = 1024;
            *(_DWORD *)v90 = v5 == -1100;
            *(_WORD *)&v90[4] = 1024;
            *(_DWORD *)&v90[6] = v47;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "WIFITILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d", __p, 36, v71, LODWORD(v72), (_DWORD)v73);
            v49 = v48;
            if (SHIBYTE(v80) < 0)
              operator delete(v79[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v49);
            v12 = v70;
            if (v49 != buf)
              free(v49);
LABEL_32:
            v82 = 0;
            v82 = sub_100FA3220(v13, a3, v5 == -1100, a4);
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
            *(_BYTE *)(v77 + 8) = 0;
            if (v4[90] != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A5408);
            v26 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(__p, v13);
              v27 = v88 >= 0 ? __p : *(_BYTE **)__p;
              v28 = *(_DWORD *)(a1 + 408);
              v29 = *(unsigned __int8 *)(a1 + 216);
              v30 = a4 - *(double *)(v77 + 16);
              v31 = *(_QWORD *)v77;
              v32 = *(unsigned __int8 *)(a1 + 160);
              v33 = *(unsigned __int8 *)(a1 + 192);
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = v27;
              v97 = 1024;
              v98 = v28;
              v99 = 1024;
              v100 = v29;
              v101 = 2048;
              *(double *)v102 = v30;
              *(_WORD *)&v102[8] = 2080;
              v103 = v31;
              v104 = 1024;
              v105 = v32;
              v106 = 1024;
              v107 = v33;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d", buf, 0x38u);
              if (SHIBYTE(v88) < 0)
                operator delete(*(void **)__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v4[90] != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021A5408);
              v50 = qword_1022A02D8;
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v79, v13);
              if (v80 >= 0)
                v51 = v79;
              else
                v51 = (void **)v79[0];
              v52 = *(_DWORD *)(a1 + 408);
              v53 = *(unsigned __int8 *)(a1 + 216);
              v54 = a4 - *(double *)(v77 + 16);
              v55 = *(_QWORD *)v77;
              v56 = *(unsigned __int8 *)(a1 + 160);
              v57 = *(unsigned __int8 *)(a1 + 192);
              *(_DWORD *)__p = 136316674;
              *(_QWORD *)&__p[4] = v51;
              v85 = 1024;
              v86 = v52;
              v87 = 1024;
              v88 = v53;
              v89 = 2048;
              *(double *)v90 = v54;
              *(_WORD *)&v90[8] = 2080;
              v91 = v55;
              v92 = 1024;
              v93 = v56;
              v94 = 1024;
              v95 = v57;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 2, "WIFITILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d", __p, 56, v70, v72, v73, v74, v75);
              v59 = v58;
              if (SHIBYTE(v80) < 0)
                operator delete(v79[0]);
              sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v59);
              if (v59 != buf)
                free(v59);
            }
            sub_1011B1A94(a1, v82, (_DWORD *)v13, v12);
            if (sub_1001DFAE8())
            {
              sub_100119F3C(buf);
              v34 = (char *)(v13 + 8);
              if (*(char *)(v13 + 31) < 0)
                v34 = *(char **)v34;
              sub_1005285B4((uint64_t)buf, "gotTile", v34);
              sub_10011B47C((uint64_t)buf, "success", &v82);
              sub_10011B47C((uint64_t)buf, "protection", (_BYTE *)(a1 + 216));
              sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
              sub_10011A5A8(buf);
            }
            if (v82)
            {
              v35 = v11[10];
              v11[10] = 0;
              *(_OWORD *)v79 = *(_OWORD *)(v35 + 48);
              v80 = *(_QWORD *)(v35 + 64);
              if (*(char *)(v35 + 95) < 0)
              {
                sub_100115CE4(v81, *(void **)(v35 + 72), *(_QWORD *)(v35 + 80));
              }
              else
              {
                *(_OWORD *)v81 = *(_OWORD *)(v35 + 72);
                v81[2] = *(void **)(v35 + 88);
              }
              sub_10008A9F0((uint64_t **)v73, v11);
              sub_1008B9B1C(v74);
              operator delete(v11);
              v36 = (uint64_t **)(v12 + 184);
              if (sub_1001C0618(v12 + 184, (unsigned int *)v79))
              {
                v37 = sub_1001C85FC(v12 + 184, (unsigned int *)v79);
                if (v4[90] != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021A5408);
                v38 = qword_1022A02D8;
                if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                {
                  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v37 + 16))(buf, v37);
                  v39 = v100 >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)__p = 136315138;
                  *(_QWORD *)&__p[4] = v39;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, replacing from, %s", __p, 0xCu);
                  if (SHIBYTE(v100) < 0)
                    operator delete(*(void **)buf);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (v4[90] != -1)
                    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
                  v62 = qword_1022A02D8;
                  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v37 + 16))(__p, v37);
                  if (v88 >= 0)
                    v63 = __p;
                  else
                    v63 = *(_BYTE **)__p;
                  v83[0] = 136315138;
                  *(_QWORD *)&v83[1] = v63;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "WIFITILE: tileDecompressionCompleted, replacing from, %s", (const char *)v83);
                  v65 = v64;
                  if (SHIBYTE(v88) < 0)
                    operator delete(*(void **)__p);
                  sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v65);
                  if (v65 != buf)
                    free(v65);
                }
                if (v4[90] != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021A5408);
                v40 = qword_1022A02D8;
                if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                {
                  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v35 + 16))(buf, v35);
                  v41 = v100 >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)__p = 136315138;
                  *(_QWORD *)&__p[4] = v41;
                  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, replacing to, %s", __p, 0xCu);
                  if (SHIBYTE(v100) < 0)
                    operator delete(*(void **)buf);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (v4[90] != -1)
                    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
                  v66 = qword_1022A02D8;
                  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v35 + 16))(__p, v35);
                  if (v88 >= 0)
                    v67 = __p;
                  else
                    v67 = *(_BYTE **)__p;
                  v83[0] = 136315138;
                  *(_QWORD *)&v83[1] = v67;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 2, "WIFITILE: tileDecompressionCompleted, replacing to, %s", (const char *)v83);
                  v69 = v68;
                  if (SHIBYTE(v88) < 0)
                    operator delete(*(void **)__p);
                  sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v69);
                  if (v69 != buf)
                    free(v69);
                }
                sub_10136937C(*(_QWORD *)(a1 + 480), v37 + 48);
                sub_1008B92E4(v36, (unsigned int *)v79);
              }
              sub_100FA2C30(v35, &v78);
              sub_1011B1EC0(*(_QWORD *)(a1 + 480), a4);
            }
            sub_100075414(a1, v76, a4);
            return;
          }
LABEL_115:
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
          goto LABEL_74;
        }
        if (*(_QWORD *)(a1 + 208) == a2)
        {
          v77 = a1 + 184;
          v76 = 1;
          goto LABEL_23;
        }
        sub_101944D08();
      }
      __break(1u);
      goto LABEL_115;
    }
    v17 = (uint64_t)(v10 + 4);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v18 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Null pointer in fTilesToDownload", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "Null pointer in fTilesToDownload", __p, 2);
      v61 = (char *)v60;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v60);
      if (v61 != buf)
        free(v61);
    }
    sub_10008A9F0((uint64_t **)(a1 + 128), v11);
    sub_1008B9B1C(v17);
    operator delete(v11);
    sub_100075414(a1, 1u, a4);
  }
}

void sub_1011B1970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void sub_1011B1A94(uint64_t a1, char a2, _DWORD *a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  void **v10;
  void **v11;
  std::string *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  int v20;
  void *v21[2];
  const char *v22;
  _BYTE v23[4];
  int v24;
  void *v25[2];
  void *__p[4];
  std::string v27;
  _BYTE v28[12];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  std::string *v38;
  std::string buf;
  __int16 v40;
  void **v41;
  __int16 v42;
  void **v43;
  __int16 v44;
  std::string *v45;

  v7 = (uint64_t)(a3 + 12);
  v6 = a3[12];
  memset(&v27, 0, sizeof(v27));
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v25 = 0u;
  v23[0] = a2;
  v24 = v6;
  std::string::operator=((std::string *)v25, (const std::string *)(a4 + 56));
  sub_100BCC62C(v7, &buf);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(std::string *)&__p[1] = buf;
  sub_100FA2C30((uint64_t)a3, &buf);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27 = buf;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v28, a3);
    v9 = v32 >= 0 ? v28 : *(_BYTE **)v28;
    v10 = SHIBYTE(__p[0]) >= 0 ? v25 : (void **)v25[0];
    v11 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    v12 = (v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v27
        : (std::string *)v27.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v23[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v24;
    v40 = 2080;
    v41 = v10;
    v42 = 2080;
    v43 = v11;
    v44 = 2080;
    v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WIFITILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s", (uint8_t *)&buf, 0x36u);
    if (SHIBYTE(v32) < 0)
      operator delete(*(void **)v28);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v13 = qword_1022A02D8;
    (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v21, a3);
    if (SHIBYTE(v22) >= 0)
      v14 = v21;
    else
      v14 = (void **)v21[0];
    if (SHIBYTE(__p[0]) >= 0)
      v15 = v25;
    else
      v15 = (void **)v25[0];
    if (SHIBYTE(__p[3]) >= 0)
      v16 = &__p[1];
    else
      v16 = (void **)__p[1];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v27;
    else
      v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
    *(_DWORD *)v28 = 136316418;
    *(_QWORD *)&v28[4] = v14;
    v29 = 1024;
    v30 = v23[0];
    v31 = 1024;
    v32 = v24;
    v33 = 2080;
    v34 = v15;
    v35 = 2080;
    v36 = v16;
    v37 = 2080;
    v38 = v17;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v13, 2, "WIFITILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s", v28, 54, v20, (const char *)v21[0], (const char *)v21[1], v22);
    v19 = v18;
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &)", "%s\n", (const char *)v19);
    if (v19 != &buf)
      free(v19);
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &buf, v23, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v25[0]);
}

void sub_1011B1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011B1EC0(uint64_t a1, double a2)
{
  sub_101368C10(a1, a2);
}

BOOL sub_1011B1F9C(uint64_t a1, uint64_t *a2, unsigned int *a3, double a4)
{
  _BOOL8 v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE buf[12];
  char v26;
  int v27;
  _BYTE *v28;
  void *__p[2];
  char v30;

  if (*(_DWORD *)(*a2 + 48))
  {
    sub_1019450E8();
    __break(1u);
LABEL_20:
    dispatch_once(&qword_1022A0050, &stru_1021A5428);
    goto LABEL_9;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  sub_100FA4E8C(*a2, 0, a3, a4);
  v10 = *a2;
  v21 = *(_OWORD *)(*a2 + 48);
  v22 = *(_QWORD *)(v10 + 64);
  if (*(char *)(v10 + 95) < 0)
  {
    sub_100115CE4(&v23, *(void **)(v10 + 72), *(_QWORD *)(v10 + 80));
  }
  else
  {
    v23 = *(_OWORD *)(v10 + 72);
    v24 = *(_QWORD *)(v10 + 88);
  }
  v4 = sub_1001C8DA8((unsigned int *)&v21);
  if (v4)
  {
    v11 = sub_1008B985C((uint64_t **)(v9 + 184), (unsigned int *)&v21);
    v12 = *a2;
    *a2 = 0;
    v13 = *v11;
    *v11 = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_16;
  }
  v5 = &qword_1022A0000;
  if (qword_1022A0050 != -1)
    goto LABEL_20;
LABEL_9:
  v14 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
  {
    sub_100BCC240((unsigned int *)&v21, __p);
    v15 = v30 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid tile ID in updateTileFileObject: %{private}s, #CloneMe", buf, 0xCu);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (v5[10] != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v17 = qword_1022A0058;
    sub_100BCC240((unsigned int *)&v21, buf);
    if (v26 >= 0)
      v18 = buf;
    else
      v18 = *(_BYTE **)buf;
    v27 = 136380675;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 17, "Invalid tile ID in updateTileFileObject: %{private}s, #CloneMe", &v27, 12, v21, v22, v23, v24);
    v20 = v19;
    if (v26 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiTilesManager::updateTileFileObject(std::unique_ptr<CLTileFile>, const CLWifiTileHeaderEntry &, CFAbsoluteTime)", "%s\n", v20);
    if (v20 != (char *)__p)
      free(v20);
  }
LABEL_16:
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  return v4;
}

void sub_1011B2288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id *sub_1011B22B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v5 = *(unsigned __int8 *)(a1 + 56);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: _tileDownloadCompleted, success, %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_1011AFD84(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

void sub_1011B2478(uint64_t a1, uint64_t a2, _BYTE *a3, double a4)
{
  int v8;
  NSObject *v9;
  uint64_t *v10;
  NSObject *v11;
  double v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  double v17;
  double v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  _BYTE buf[40];
  const char *v32;

  *(_OWORD *)buf = *(_OWORD *)(a2 + 48);
  *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4(&buf[24], *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    *(_OWORD *)&buf[24] = *(_OWORD *)(a2 + 72);
    v32 = *(const char **)(a2 + 88);
  }
  sub_1011B6D9C((uint64_t)v24, (uint64_t)buf, 1);
  if (SHIBYTE(v32) < 0)
    operator delete(*(void **)&buf[24]);
  sub_1000C6828(*(_QWORD *)(a1 + 480), v24, (unint64_t)*(double *)&qword_1022FDCC8, &v22, a4);
  if (v23 - v22 != 56)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v14 = qword_1022A02D8;
    v10 = (uint64_t *)"assert";
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 3);
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = "assert";
      *(_WORD *)&buf[38] = 2081;
      v32 = "results.size() == 1";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expecting exactly one result from updateAccessTimestampsIfNecessary\", \"size\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    }
    v15 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 3);
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = "assert";
      *(_WORD *)&buf[38] = 2081;
      v32 = "results.size() == 1";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Expecting exactly one result from updateAccessTimestampsIfNecessary", "{\"msg%{public}.0s\":\"Expecting exactly one result from updateAccessTimestampsIfNecessary\", \"size\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    }
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 3);
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = "assert";
      *(_WORD *)&buf[38] = 2081;
      v32 = "results.size() == 1";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expecting exactly one result from updateAccessTimestampsIfNecessary\", \"size\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm", 2035, "touchMTime");
    __break(1u);
LABEL_24:
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    goto LABEL_9;
  }
  v8 = *(unsigned __int8 *)(v22 + 48);
  *a3 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = (a2 + 48);
  v10 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    goto LABEL_24;
LABEL_9:
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v12 = sub_1001C087C((uint64_t)v9);
    v13 = sub_1001C0858((uint64_t)v9);
    *(_DWORD *)buf = 134284033;
    *(double *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@TileList, wifi, touch, llsw, %{private}.2lf, %{private}.2lf, time, %{public}.1f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v10[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v16 = qword_1022A0048;
    v17 = sub_1001C087C((uint64_t)v9);
    v18 = sub_1001C0858((uint64_t)v9);
    v25 = 134284033;
    v26 = v17;
    v27 = 2049;
    v28 = v18;
    v29 = 2050;
    v30 = a4;
    LODWORD(v21) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 1, "@TileList, wifi, touch, llsw, %{private}.2lf, %{private}.2lf, time, %{public}.1f", &v25, v21);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::touchMTime(CFAbsoluteTime, CLTileFile *, BOOL *)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
LABEL_12:
  *(_QWORD *)buf = &v22;
  sub_1011B6E1C((void ***)buf);
  sub_100067A00((uint64_t)v24, (char *)v24[1]);
}

void sub_1011B29D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a23 = &a13;
  sub_1011B6E1C((void ***)&a23);
  sub_100067A00((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1011B2A34(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  double v7;
  double v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
  if (*a3 == 6)
  {
    v8 = v7;
    *(_DWORD *)(a1 + 408) = a4[1];
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a4;
      v11 = a4[1];
      *(_DWORD *)buf = 67109376;
      v20 = v10;
      v21 = 1024;
      v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WIFITILE: onStatusNotification, kNotificationReachability, from, %d, to, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v12 = *a4;
      v13 = a4[1];
      v16[0] = 67109376;
      v16[1] = v12;
      v17 = 1024;
      v18 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: onStatusNotification, kNotificationReachability, from, %d, to, %d", v16, 14);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (a4[1] >= 1)
      sub_100075414(a1, 0, v8);
  }
}

void sub_1011B2C50(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileSched, wifi, called, %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v8 = 134349056;
    v9 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, wifi, called, %{public}ld", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::onScheduledTileDownloadsCallback(CLTileDownloadReachabilityRequirement)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (a2 != 1)
  {
    v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
    sub_100075414(a1, 1u, v5);
  }
}

void sub_1011B2E20(uint64_t a1, uint64_t a2)
{
  sub_1011B2C50(a1 - 120, a2);
}

uint64_t sub_1011B2E28(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: CLWifiTilesManager::shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: CLWifiTilesManager::shutdown", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::shutdown()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1011ABD3C(a1);
  v3 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1011B2FF0(uint64_t a1)
{
  return sub_100077470(a1 - 112);
}

void sub_1011B2FF8(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  void *__p[2];
  uint8_t buf[23];

  if (*(_BYTE *)(a1 + 216))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v3 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tiles, data protection enabled, ending side load.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#tiles, data protection enabled, ending side load.", __p, 2);
    v6 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDeleteRecursive(CFAbsoluteTime, std::vector<std::string>)", "%s\n", v7);
LABEL_21:
    if (v6 != buf)
      free(v6);
    goto LABEL_7;
  }
  if (a2[1] != *a2)
    sub_1011B3624();
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A5428);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#tiles, finished side-loading raw wifi tiles from disk", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#tiles, finished side-loading raw wifi tiles from disk", __p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDeleteRecursive(CFAbsoluteTime, std::vector<std::string>)", "%s\n", v5);
    goto LABEL_21;
  }
LABEL_7:
  *(_BYTE *)(a1 + 504) = 0;
}

void sub_1011B35D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011B3624()
{
  size_t v0;
  void **v1;
  uint64_t *v2;
  void *__p[2];
  char v4;
  std::locale v5;

  if (byte_10230D307 >= 0)
    v0 = byte_10230D307;
  else
    v0 = qword_10230D2F8;
  v1 = __p;
  sub_100259584((uint64_t)__p, v0 + 10);
  if (v4 < 0)
    v1 = (void **)__p[0];
  if (v0)
  {
    if (byte_10230D307 >= 0)
      v2 = &qword_10230D2F0;
    else
      v2 = (uint64_t *)qword_10230D2F0;
    memmove(v1, v2, v0);
  }
  strcpy((char *)v1 + v0, "([0-9]{8})");
  sub_100F8F6B0(&v5, (uint64_t)__p, 0);
}

void sub_1011B37A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (__p)
    operator delete(__p);
  sub_100261F44(v14 - 64);
  std::locale::~locale((std::locale *)(v14 - 104));
  _Unwind_Resume(a1);
}

void sub_1011B37E8(uint64_t a1, uint64_t a2, double a3)
{
  const void **v6;
  const char *v7;
  double v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  char v15;
  void *v16[2];
  char v17;
  int v18;
  const void *v19;
  uint8_t buf[4];
  const void *v21;

  v6 = (const void **)sub_100FA2F60();
  sub_1003625F4((const void **)a2, v6, (uint64_t)v16);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  if (sub_100FA7578(v7))
  {
    sub_100FA7ED8((uint64_t)v16, (uint64_t)&v14);
    v8 = v14;
    if (!v15)
      v8 = a3;
    sub_1011B1EC0(*(_QWORD *)(a1 + 480), v8);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A5428);
  v9 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const void *)a2;
    else
      v10 = *(const void **)a2;
    *(_DWORD *)buf = 136380675;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning, failed to unlock wifi tile, %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    if (*(char *)(a2 + 23) >= 0)
      v11 = (const void *)a2;
    else
      v11 = *(const void **)a2;
    v18 = 136380675;
    v19 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#warning, failed to unlock wifi tile, %{private}s", &v18, 12);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::addWifiTileToDatabaseAndDelete(const std::string &, CFAbsoluteTime)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_1011B3E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011B3E88(uint64_t a1)
{
  uint64_t v2;
  double v3;
  _QWORD v4[3];
  void **v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 448) + 56))(*(_QWORD *)(v2 + 448));
  memset(v4, 0, sizeof(v4));
  sub_100259B94((char *)v4, *(__int128 **)(a1 + 40), *(__int128 **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
  sub_1011B2FF8(v2, v4, v3);
  v5 = (void **)v4;
  sub_100259608(&v5);
}

void sub_1011B3F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100259608(&a12);
  _Unwind_Resume(a1);
}

char *sub_1011B3F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 16) = 0;
  return sub_100259B94((char *)v2, *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
}

void sub_1011B3F58(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_100259608(&v1);
}

void sub_1011B3F80(const void **a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  const char *v5;
  void **v6;
  void *__p[2];
  char v8;

  if (*((char *)a1 + 23) >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (size_t)a1[1];
  v3 = __p;
  sub_100259584((uint64_t)__p, v2 + 6);
  if (v8 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*((char *)a1 + 23) >= 0)
      v4 = a1;
    else
      v4 = *a1;
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, ".plist");
  if (*((char *)a1 + 23) >= 0)
    v5 = (const char *)a1;
  else
    v5 = (const char *)*a1;
  sub_100512FA8(v5);
  if (v8 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  sub_1005164F0((const char *)v6);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1011B405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1011B4078@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  char *result;
  char *v5;

  sub_101191978(*a1, &v5);
  sub_100FBCB08((uint64_t)v5, (const std::string *)a1);
  sub_100FA21A0((uint64_t)v5, (uint64_t)&qword_10230D2F0);
  sub_1002E6448(v5, a2);
  result = v5;
  v5 = 0;
  if (result)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1011B40F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011B4114(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE buf[12];
  char v25;
  int v26;
  _BYTE *v27;
  void *__p[2];
  char v29;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  sub_101191978(0, &v23);
  sub_100FA4E8C(v23, 0, a2, a3);
  v19 = *(_OWORD *)(v23 + 48);
  v20 = *(_QWORD *)(v23 + 64);
  if (*(char *)(v23 + 95) < 0)
  {
    sub_100115CE4(&v21, *(void **)(v23 + 72), *(_QWORD *)(v23 + 80));
  }
  else
  {
    v21 = *(_OWORD *)(v23 + 72);
    v22 = *(_QWORD *)(v23 + 88);
  }
  if (sub_1001C8DA8((unsigned int *)&v19))
  {
    v6 = (uint64_t **)(v5 + 184);
    v7 = sub_1008B985C(v6, (unsigned int *)&v19);
    v8 = v23;
    v23 = 0;
    v9 = *v7;
    *v7 = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    sub_1001C85FC((uint64_t)v6, (unsigned int *)&v19);
    v10 = 1;
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v11 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      sub_100BCC240((unsigned int *)&v19, __p);
      v12 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid tile ID in createWifiTileFileObject: %{private}s, #CloneMe", buf, 0xCu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      v15 = qword_1022A0058;
      sub_100BCC240((unsigned int *)&v19, buf);
      if (v25 >= 0)
        v16 = buf;
      else
        v16 = *(_BYTE **)buf;
      v26 = 136380675;
      v27 = v16;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 17, "Invalid tile ID in createWifiTileFileObject: %{private}s, #CloneMe", &v26, 12, v19, v20, v21, v22);
      v18 = v17;
      if (v25 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual std::tuple<BOOL, CLTileFile *> CLWifiTilesManager::createWifiTileFileObject(const CLWifiTileHeaderEntry &, CFAbsoluteTime)", "%s\n", v18);
      if (v18 != (char *)__p)
        free(v18);
    }
    v10 = 0;
  }
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  v13 = v23;
  v23 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v10;
}

void sub_1011B4434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a19 < 0)
    operator delete(__p);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011B448C(uint64_t a1, unsigned int *a2, double a3)
{
  return sub_1011B4114(a1 - 112, a2, a3);
}

void sub_1011B4494(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_10230D320, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1011B4514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011B4530(id a1)
{
  std::string::assign((std::string *)&xmmword_10230D348, "https://cl2.apple.com/1/v1");
}

void sub_1011B4544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A53C8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021A53C8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::removeClient(int) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1011B47B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FDD90);
}

BOOL sub_1011B47CC(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _DWORD *buf[205];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, buf) + 32) = v34;
        LOBYTE(buf[0]) = 0;
        *(_OWORD *)((char *)buf + 4) = 0u;
        memset((char *)&buf[2] + 4, 0, 32);
        memset((char *)&buf[6] + 4, 0, 28);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _DWORD **))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1011B731C();
        }
        if (SHIBYTE(buf[9]) < 0)
          operator delete(buf[7]);
        if (SHIBYTE(buf[6]) < 0)
          operator delete(buf[4]);
        if (SHIBYTE(buf[3]) < 0)
          operator delete(buf[1]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FDD91;
        HIDWORD(v38) = v16;
        buf[0] = (_DWORD *)&v38 + 1;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        buf[0] = (_DWORD *)&v38 + 1;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        buf[0] = (_DWORD *)&v38 + 1;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, buf);
        buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A53C8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_DWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = *(_DWORD **)v15;
    LODWORD(buf[0]) = 136446466;
    *(_DWORD **)((char *)buf + 4) = v15;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A53C8);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != (char *)buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_1011B4C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1011B4C98(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A53C8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A53C8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1011B4F18(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A53C8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A53C8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1011B52A0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1011B66A0(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1011B534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011B5360(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A53C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1011B66A0(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1011B6070();
    os_activity_scope_leave(&state);
  }
}

void sub_1011B597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1011B59C8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A53C8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A53C8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A53C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A53C8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021A53C8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A53C8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

uint64_t sub_1011B5F74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_1011B5F7C(uint64_t a1)
{
  return a1 + 232;
}

uint64_t sub_1011B5F84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 105);
}

uint64_t sub_1011B5F8C(uint64_t a1)
{
  return a1 + 120;
}

void sub_1011B5F94(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1011B5FC0(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1011B5FEC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1011B6018(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1011B6044(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1011B6070()
{
  operator new();
}

void sub_1011B6198()
{
  uint64_t v0;
  void **v1;
  void **v2;

  if (*(char *)(v0 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  operator delete();
}

void sub_1011B61EC(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1011B6838(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1011B65C4(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A53C8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A53C8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1011B65C4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1011B6838(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_1011B66A0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = sub_1011B66F8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011B66E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011B66F8(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021A5558;
  a1[1] = 0;
  sub_100FC2474((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1011B6744(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1011B6758(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A5558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011B676C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A5558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1011B67A0(uint64_t a1)
{
  char v1;

  sub_100C13204((uint64_t)&v1, a1 + 24);
}

uint64_t sub_1011B67C8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

id sub_1011B6838(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1011B6884(a1);
  else
    return 0;
}

id sub_1011B6884(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A5598);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C43FF1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A5598);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A5598);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C43FF1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A5598);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1011B6C30(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_1011B6C5C(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)sub_1000C17A4((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    sub_1011B6CE0((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000145B0(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

_BYTE *sub_1011B6CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  result = v8 + 56;
  if (*(char *)(a2 + 47) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 40);
  }
  *((_QWORD *)v8 + 10) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1011B6D80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1008B9C00(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B6D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_1000C084C((uint64_t **)a1, v4, a2, a2);
      a2 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1011B6E04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067A00(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1011B6E1C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1011B6E5C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1011B6E5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void *sub_1011B6EA8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1011B710C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_1002A20A8(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B7128(_QWORD **a1, const std::string *a2)
{
  void **v4;
  __int128 v5;
  const void **v6;
  const void **v7;
  uint64_t v8;
  char *v9;
  int v10;
  BOOL v11;
  const std::string *v12;
  std::string::size_type size;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t i;
  std::string __p;
  char v27;
  __int128 __dst;
  void *v29;
  _BYTE v30[32];

  v4 = (void **)sub_100FA4DF4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_100115CE4(&__dst, *v4, (unint64_t)v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v29 = v4[2];
    __dst = v5;
  }
  v6 = (const void **)sub_100FA4DF4();
  v7 = (const void **)sub_100FA14D0();
  sub_1003625F4(v6, v7, (uint64_t)v30);
  v8 = 0;
  while (2)
  {
    v9 = (char *)&__dst + 24 * v8;
    v10 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    v11 = v10 < 0;
    v12 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      v12 = a2;
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v11)
      size = a2->__r_.__value_.__l.__size_;
    v14 = v9[23];
    v15 = *(char **)v9;
    v16 = *((_QWORD *)v9 + 1);
    if (v14 >= 0)
      v15 = (char *)&__dst + 24 * v8;
    v17 = v9[23];
    if (v14 < 0)
      v17 = v16;
    v18 = (uint64_t)&v12[-1].__r_.__value_.__r.__words[2] + 7;
    v19 = v15 - 1;
    while (size && v17)
    {
      v20 = *(unsigned __int8 *)(v18 + size);
      v21 = v19[v17];
      --size;
      --v17;
      if (v20 != v21)
        goto LABEL_22;
    }
    if (!v17)
    {
      std::string::basic_string(&__p, a2, 0, 9uLL, (std::allocator<char> *)&v27);
      v22 = sub_1001987C8(*a1, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v22)
      {
        v23 = 1;
        goto LABEL_24;
      }
    }
LABEL_22:
    if (++v8 != 2)
      continue;
    break;
  }
  v23 = 0;
LABEL_24:
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v30[i + 23] < 0)
      operator delete(*(void **)&v30[i]);
  }
  return v23;
}

void sub_1011B72C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_1011B731C()
{
  operator new();
}

void sub_1011B7444()
{
  uint64_t v0;
  void **v1;
  void **v2;

  if (*(char *)(v0 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  operator delete();
}

uint64_t sub_1011B7498(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_1011B7508()
{
  sub_1015A2E04(&qword_10230D2F0, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230D2F0, (void *)&_mh_execute_header);
}

void sub_1011B754C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
  v0 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "creating the BinaryLog instance", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "creating the BinaryLog instance", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "static void CLBinaryLog::create()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
  operator new();
}

void sub_1011B787C()
{
  operator delete();
}

uint64_t *sub_1011B78A8(uint64_t *a1)
{
  sub_1011B7CE4(*a1);
  return a1;
}

uint64_t sub_1011B78D4()
{
  if (qword_10230D380 != -1)
    dispatch_once(&qword_10230D380, &stru_1021A55B8);
  return qword_102311CE0;
}

uint64_t sub_1011B7918(uint64_t a1)
{
  char *v2;
  const std::string::value_type *v3;
  char *v4;
  void **v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  void **v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  uid_t v17;
  gid_t v18;
  NSObject *v19;
  NSObject *global_queue;
  const char *v22;
  std::string *v23;
  std::string v24;
  _QWORD v25[3];

  v2 = sub_1012246D0((char *)a1);
  *(_QWORD *)v2 = &off_1021A55E8;
  *((_DWORD *)v2 + 552) = 0;
  v2[2240] = 0;
  v3 = v2 + 112;
  *(_OWORD *)(v2 + 2216) = 0u;
  std::string::assign((std::string *)(v2 + 112), ".bin");
  v4 = (char *)sub_1001FD94C();
  sub_1000B7884(v4, (uint64_t)&v24);
  v5 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
  std::string::assign((std::string *)(a1 + 88), "locationdSensors");
  sub_1003625F4((const void **)(a1 + 64), (const void **)(a1 + 88), (uint64_t)&v24);
  v6 = *(char *)(a1 + 135);
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = *(const std::string::value_type **)(a1 + 112);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 135);
  else
    v8 = *(_QWORD *)(a1 + 120);
  v9 = std::string::append(&v24, v7, v8);
  v10 = v9->__r_.__value_.__r.__words[0];
  v25[0] = v9->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v12);
  v13 = v25[0];
  *(_QWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 144) = v13;
  *(_QWORD *)(a1 + 151) = *(_QWORD *)((char *)v25 + 7);
  *(_BYTE *)(a1 + 159) = v11;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = (void *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      v15 = *v12;
    LODWORD(v24.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Notice Logging binary sensor data to %{public}s", (uint8_t *)&v24, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v24, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
    if (*(char *)(a1 + 159) < 0)
      v12 = (void **)*v12;
    LODWORD(v25[0]) = 136446210;
    *(_QWORD *)((char *)v25 + 4) = v12;
    _os_log_send_and_compose_impl(2, 0, &v24, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Notice Logging binary sensor data to %{public}s", v25, 12);
    v23 = (std::string *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLBinaryLog::CLBinaryLog()", "%s\n", v22);
    if (v23 != &v24)
      free(v23);
  }
  v16 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v16 = (const char *)*v5;
  if (!sub_1000B78B0(v16))
  {
    if (*(char *)(a1 + 87) < 0)
      v5 = (void **)*v5;
    v17 = getuid();
    v18 = getgid();
    sub_100512E84(v5, v17, v18);
  }
  v19 = dispatch_queue_create("com.apple.locationd.binlog.compression", 0);
  *(_QWORD *)(a1 + 2232) = v19;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v19, global_queue);
  return a1;
}

void sub_1011B7C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;

  sub_10122480C(v16);
  _Unwind_Resume(a1);
}

void sub_1011B7C98(_QWORD *a1)
{
  sub_10122480C(a1);
  operator delete();
}

void sub_1011B7CBC(uint64_t a1, char a2)
{
  const char *v3;

  *(_BYTE *)(a1 + 2240) = a2;
  if ((a2 & 1) == 0)
  {
    v3 = (const char *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      v3 = *(const char **)v3;
    sub_1005164F0(v3);
  }
}

uint64_t sub_1011B7CE4(uint64_t a1)
{
  _QWORD *v2;
  FILE *v3;
  size_t v4;

  v2 = (_QWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v3 = (FILE *)v2[271];
  if (v3)
  {
    v4 = *(int *)(a1 + 2208);
    if ((_DWORD)v4)
      fwrite((const void *)(a1 + 160), 1uLL, v4, v3);
    *(_DWORD *)(a1 + 2208) = 0;
    sub_1011B7D78(a1);
  }
  return (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
}

void sub_1011B7D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B7D78(uint64_t a1)
{
  uint64_t result;

  if (!sub_1000CDFB0(a1 + 48))
    sub_10194525C();
  result = fclose(*(FILE **)(a1 + 2216));
  *(_QWORD *)(a1 + 2216) = 0;
  return result;
}

uint64_t sub_1011B7DB0(uint64_t a1)
{
  uint64_t v2;
  FILE **v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int *v7;
  char *v8;
  uint64_t v9;
  NSDate *v11;
  size_t v12;
  __int128 *v13;
  const void *v14;
  std::string::size_type size;
  void **v16;
  std::string *v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  __int128 *v21;
  _BYTE *v22;
  uid_t v23;
  gid_t v24;
  std::error_code *v25;
  const std::__fs::filesystem::path **v26;
  const std::__fs::filesystem::path *v27;
  const std::__fs::filesystem::path *v28;
  NSObject *v29;
  const std::__fs::filesystem::path *v30;
  int v31;
  std::string::size_type v32;
  int *v33;
  std::string *v34;
  int v35;
  int v36;
  NSObject *v37;
  uint64_t v39;
  int v40;
  int *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  std::string::size_type v46;
  int *v47;
  std::string *v48;
  int v49;
  char *v50;
  const char *v51;
  int v52;
  _QWORD block[5];
  std::string v54;
  __int128 v55;
  uint64_t v56;
  __int128 __p;
  uint64_t v58;
  int v59;
  void *v60[2];
  uint64_t v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  _BYTE v68[18];
  __int16 v69;
  int v70;
  _BYTE buf[22];
  __int16 v72;
  int v73;

  v3 = (FILE **)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 48);
  v65 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  v66 = 256;
  v4 = ftell(v3[271]);
  if (ferror(v3[271]))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v6 = *__error();
      v7 = __error();
      v8 = strerror(*v7);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to determine if log rotation is needed. errno, %{public}d, %{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
      v39 = qword_1022A01D8;
      v40 = *__error();
      v41 = __error();
      v42 = strerror(*v41);
      v67 = 67240450;
      *(_DWORD *)v68 = v40;
      *(_WORD *)&v68[4] = 2082;
      *(_QWORD *)&v68[6] = v42;
      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 17, "Failed to determine if log rotation is needed. errno, %{public}d, %{public}s", &v67, 18);
      sub_100512490("Generic", 1, 0, 0, "void CLBinaryLog::rotateIfNeeded(const double &)", "%s\n", v43);
      if (v43 != buf)
        free(v43);
    }
    clearerr(*(FILE **)(a1 + 2216));
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 12);
    if ((int)v9 >= 1 && v4 > v9)
    {
      v11 = sub_1012256C0();
      if (*(char *)(a1 + 87) >= 0)
        v12 = *(unsigned __int8 *)(a1 + 87);
      else
        v12 = *(_QWORD *)(a1 + 72);
      v13 = &v63;
      sub_100259584((uint64_t)&v63, v12 + 4);
      if (v64 < 0)
        v13 = (__int128 *)v63;
      if (v12)
      {
        if (*(char *)(a1 + 87) >= 0)
          v14 = (const void *)(a1 + 64);
        else
          v14 = *(const void **)(a1 + 64);
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "logs");
      sub_1012252CC((const void **)&v63, a1 + 88, a1 + 112, (uint64_t)v11, &v62);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        size = v62.__r_.__value_.__l.__size_;
      v16 = v60;
      sub_100259584((uint64_t)v60, size + 4);
      if (v61 < 0)
        v16 = (void **)v60[0];
      if (size)
      {
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v62;
        else
          v17 = (std::string *)v62.__r_.__value_.__r.__words[0];
        memmove(v16, v17, size);
      }
      strcpy((char *)v16 + size, ".bz2");
      if (v64 >= 0)
        v18 = (const char *)&v63;
      else
        v18 = (const char *)v63;
      if (!sub_1000B78B0(v18))
      {
        if (v64 >= 0)
          v19 = HIBYTE(v64);
        else
          v19 = *((_QWORD *)&v63 + 1);
        v20 = buf;
        sub_100259584((uint64_t)buf, v19 + 1);
        if (v72 < 0)
          v20 = *(_BYTE **)buf;
        if (v19)
        {
          if (v64 >= 0)
            v21 = &v63;
          else
            v21 = (__int128 *)v63;
          memmove(v20, v21, v19);
        }
        *(_WORD *)&v20[v19] = 47;
        if (v72 >= 0)
          v22 = buf;
        else
          v22 = *(_BYTE **)buf;
        v23 = getuid();
        v24 = getgid();
        sub_100512E84(v22, v23, v24);
        if (SHIBYTE(v72) < 0)
          operator delete(*(void **)buf);
      }
      sub_1011B7D78(a1);
      v26 = (const std::__fs::filesystem::path **)(a1 + 136);
      v27 = (const std::__fs::filesystem::path *)(a1 + 136);
      if (*(char *)(a1 + 159) < 0)
        v27 = *v26;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = (const std::__fs::filesystem::path *)&v62;
      else
        v28 = (const std::__fs::filesystem::path *)v62.__r_.__value_.__r.__words[0];
      if (!sub_100512FE0(v27, v28, v25))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
        v29 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v30 = (const std::__fs::filesystem::path *)(a1 + 136);
          if (*(char *)(a1 + 159) < 0)
            v30 = *v26;
          v31 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
          v32 = v62.__r_.__value_.__r.__words[0];
          v33 = __error();
          v34 = &v62;
          v35 = *v33;
          if (v31 < 0)
            v34 = (std::string *)v32;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v30;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v34;
          v72 = 1024;
          v73 = v35;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning Failed to move aside log file %s to %s (%d)", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
          if (*(char *)(a1 + 159) < 0)
            v26 = (const std::__fs::filesystem::path **)*v26;
          v44 = qword_1022A01D8;
          v45 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
          v46 = v62.__r_.__value_.__r.__words[0];
          v47 = __error();
          v48 = &v62;
          v49 = *v47;
          if (v45 < 0)
            v48 = (std::string *)v46;
          v67 = 136315650;
          *(_QWORD *)v68 = v26;
          *(_WORD *)&v68[8] = 2080;
          *(_QWORD *)&v68[10] = v48;
          v69 = 1024;
          v70 = v49;
          LODWORD(v51) = 28;
          v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "#Warning Failed to move aside log file %s to %s (%d)", (const char *)&v67, v51, v52);
          sub_100512490("Generic", 1, 0, 2, "void CLBinaryLog::rotateIfNeeded(const double &)", "%s\n", v50);
          if (v50 != buf)
            free(v50);
        }
      }
      sub_1011B85F4(a1);
      *(_QWORD *)(a1 + 2224) = 0;
      v36 = *(_DWORD *)(a1 + 16);
      v37 = *(NSObject **)(a1 + 2232);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_1011B87F0;
      block[3] = &unk_1021A5640;
      block[4] = a1;
      v59 = v36;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&v54, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      else
        v54 = v62;
      if (SHIBYTE(v61) < 0)
      {
        sub_100115CE4(&v55, v60[0], (unint64_t)v60[1]);
      }
      else
      {
        v55 = *(_OWORD *)v60;
        v56 = v61;
      }
      if (SHIBYTE(v64) < 0)
      {
        sub_100115CE4(&__p, (void *)v63, *((unint64_t *)&v63 + 1));
      }
      else
      {
        __p = v63;
        v58 = v64;
      }
      dispatch_async(v37, block);
      if (SHIBYTE(v58) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61) < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64) < 0)
        operator delete((void *)v63);
    }
  }
  return ((uint64_t (*)(FILE **))(*v3)->_bf._base)(v3);
}

void sub_1011B851C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a38 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  sub_10187E514((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1011B85E4(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1011B85DCLL);
}

void sub_1011B85F4(uint64_t a1)
{
  const char **v2;
  const char *v3;
  FILE *v4;
  NSObject *v5;
  const char *v6;
  char *v7;
  int v8;
  const char **v9;
  uint8_t buf[4];
  const char *v11;

  if (!sub_1000CDFB0(a1 + 48))
    sub_1019453C8();
  v2 = (const char **)(a1 + 136);
  v3 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    v3 = *v2;
  v4 = fopen(v3, "ab");
  *(_QWORD *)(a1 + 2216) = v4;
  if (!v4)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (const char *)(a1 + 136);
      if (*(char *)(a1 + 159) < 0)
        v6 = *v2;
      *(_DWORD *)buf = 136315138;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unable to open %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A56E8);
      if (*(char *)(a1 + 159) < 0)
        v2 = (const char **)*v2;
      v8 = 136315138;
      v9 = v2;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Unable to open %s", (const char *)&v8);
      sub_100512490("Generic", 1, 0, 2, "void CLBinaryLog::open()", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

void sub_1011B87F0(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  int v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, std::string::value_type *);
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_DWORD *)(a1 + 112))
    goto LABEL_7;
  v3 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v3 = *(const char **)v3;
  v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v4 = *(const char **)v4;
  if (sub_100514F40(v3, v4))
  {
LABEL_7:
    v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v5 = *(const char **)v5;
    sub_100512FA8(v5);
  }
  v6 = *(_DWORD *)(a1 + 112);
  if (v6 >= 1)
  {
    v17[0] = 0;
    v17[1] = v17;
    v17[2] = 0x2020000000;
    v18 = 0;
    if (*(char *)(a1 + 111) < 0)
    {
      v8 = _NSConcreteStackBlock;
      v9 = 3321888768;
      v10 = sub_1011B8984;
      v11 = &unk_1021A5610;
      v13 = v2;
      v7 = *(void **)(a1 + 88);
      sub_100115CE4(__p, v7, *(_QWORD *)(a1 + 96));
      v6 = *(_DWORD *)(a1 + 112);
    }
    else
    {
      v7 = (void *)(a1 + 88);
      v8 = _NSConcreteStackBlock;
      v9 = 3321888768;
      v10 = sub_1011B8984;
      v11 = &unk_1021A5610;
      v13 = v2;
      *(_OWORD *)__p = *(_OWORD *)(a1 + 88);
      v15 = *(_QWORD *)(a1 + 104);
    }
    v12 = v17;
    v16 = v6;
    sub_100AD4F6C((uint64_t)v7, (uint64_t)&v8);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    _Block_object_dispose(v17, 8);
  }
}

void sub_1011B8954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B8984(uint64_t a1, std::string::value_type *a2)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  int v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  const char *v16;
  void *__p[2];
  char v19;
  std::string v20;
  void *v21[2];
  std::string::size_type v22;
  void *v23[2];
  char v24;
  std::string __dst;
  __int128 v26;
  std::string::size_type v27;
  std::string v28;
  __int128 v29;
  int64_t v30;

  v4 = *(_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 71) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = &v28;
  sub_100259584((uint64_t)&v28, v5 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0)
      v7 = (const void *)(a1 + 48);
    else
      v7 = *(const void **)(a1 + 48);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  v8 = std::string::append(&v28, a2);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v30 = v8->__r_.__value_.__r.__words[2];
  v29 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v28, a2);
  if (*(char *)(v4 + 111) < 0)
    sub_100115CE4(&__dst, *(void **)(v4 + 88), *(_QWORD *)(v4 + 96));
  else
    __dst = *(std::string *)(v4 + 88);
  v10 = std::string::append(&__dst, "_");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27 = v10->__r_.__value_.__r.__words[2];
  v26 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (sub_1012256CC(v4, &v28.__r_.__value_.__l.__data_, (char *)&v26))
  {
    sub_1015A2E04(v23, a2);
    if (*(char *)(v4 + 135) < 0)
      sub_100115CE4(&v20, *(void **)(v4 + 112), *(_QWORD *)(v4 + 120));
    else
      v20 = *(std::string *)(v4 + 112);
    v13 = std::string::append(&v20, ".bz2");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v22 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)v21 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((sub_1012257A0(v4, v23, (char *)v21) & 1) != 0)
    {
      v12 = 1;
    }
    else
    {
      sub_1015A2E04(__p, a2);
      v12 = sub_1012257A0(v4, __p, (char *)(v4 + 112));
      if (v19 < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  else
  {
    v12 = 0;
  }
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (!v12)
      goto LABEL_48;
  }
  else if (!v12)
  {
    goto LABEL_48;
  }
  if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 72))
  {
    v15 = v30 >= 0 ? (const char *)&v29 : (const char *)v29;
    if (!sub_100512FA8(v15))
    {
      if (v30 >= 0)
        v16 = (const char *)&v29;
      else
        v16 = (const char *)v29;
      syslog(5, "%s,%s,Failed to delete log: %s", "NOTICE", "CLLog", v16);
    }
  }
LABEL_48:
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  return 1;
}

void sub_1011B8C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v42 - 81) < 0)
    operator delete(*(void **)(v42 - 104));
  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  _Unwind_Resume(exception_object);
}

void sub_1011B8D58()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    JUMPOUT(0x1011B8D4CLL);
  JUMPOUT(0x1011B8D50);
}

_QWORD *sub_1011B8D6C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1011B8D9C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t sub_1011B8DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v10;
  uint64_t v11;
  __int16 v12;

  v5 = (_BYTE *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 48);
  v11 = a1 + 48;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 48);
  v12 = 256;
  if (v5[2192])
  {
    if (*(_QWORD *)(a1 + 2216) || (sub_1011B85F4(a1), *(_QWORD *)(a1 + 2216)))
    {
      v10 = 0;
      v6 = *(_DWORD *)(a1 + 2208);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v8 = *(_DWORD *)(a1 + 2208);
      if (v7 + v6 >= 2048)
      {
        fwrite((const void *)(a1 + 160), 1uLL, v8, *(FILE **)(a1 + 2216));
        sub_1011B7DB0(a1);
        v8 = 0;
        *(_DWORD *)(a1 + 2208) = 0;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 16))(a2, a1 + v8 + 160, 2048, &v10))
      {
        *(_DWORD *)(a1 + 2208) += v10;
      }
    }
  }
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 24))(v5);
}

void sub_1011B8EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B8ED0(uint64_t a1)
{
  sub_1000CDFB0(a1 + 48);
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogFileRotationSizeBinary", (_DWORD *)(a1 + 12));
  return sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogFileStorageCountBinary", (_DWORD *)(a1 + 16));
}

uint64_t sub_1011B8F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSDate *v4;
  FILE *v5;
  size_t v6;
  const char *v7;
  const char *v8;
  std::error_code *v9;
  const std::__fs::filesystem::path *v10;
  const std::__fs::filesystem::path *p_p;
  int v12;
  std::string::size_type v13;
  int *v14;
  std::string *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  std::string *v19;
  std::string *v20;
  _QWORD v22[5];
  std::string v23;
  std::string __p;
  uint64_t v25;
  __int16 v26;

  v3 = a1 + 48;
  v2 = *(_QWORD *)(a1 + 48);
  v25 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  v26 = 256;
  v4 = sub_1012256C0();
  v5 = *(FILE **)(a1 + 2216);
  if (v5)
  {
    v6 = *(unsigned int *)(a1 + 2208);
    if ((int)v6 >= 1)
    {
      if (!fwrite((const void *)(a1 + 160), 1uLL, v6, v5))
        syslog(5, "%s,%s,Failed to write CLBinaryLog Buffer to disk\n", "NOTICE", "CLLog");
      *(_DWORD *)(a1 + 2208) = 0;
    }
    sub_1011B7D78(a1);
  }
  v7 = (const char *)(a1 + 136);
  v8 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    v8 = *(const char **)v7;
  if (sub_1000B78B0(v8))
  {
    sub_101225524(a1, a1 + 88, (uint64_t)v4, &__p);
    v10 = (const std::__fs::filesystem::path *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      v10 = *(const std::__fs::filesystem::path **)v7;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (const std::__fs::filesystem::path *)&__p;
    else
      p_p = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
    if (!sub_100512FE0(v10, p_p, v9))
    {
      if (*(char *)(a1 + 159) < 0)
        v7 = *(const char **)v7;
      v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v13 = __p.__r_.__value_.__r.__words[0];
      v14 = __error();
      v15 = &__p;
      if (v12 < 0)
        v15 = (std::string *)v13;
      syslog(5, "%s,%s,Failed to move file %s to %s (%d)\n", "NOTICE", "CLLog", v7, (const char *)v15, *v14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_1011B85F4(a1);
  *(_QWORD *)(a1 + 2224) = 0;
  if (*(char *)(a1 + 87) >= 0)
    v16 = *(unsigned __int8 *)(a1 + 87);
  else
    v16 = *(_QWORD *)(a1 + 72);
  v17 = &__p;
  sub_100259584((uint64_t)&__p, v16 + 4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v16)
  {
    if (*(char *)(a1 + 87) >= 0)
      v18 = (const void *)(a1 + 64);
    else
      v18 = *(const void **)(a1 + 64);
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, "logs");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (sub_1000B78B0((const char *)v19))
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3321888768;
    v22[2] = sub_1011B9250;
    v22[3] = &unk_1021A5670;
    v22[4] = a1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_100115CE4(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v23 = __p;
      v20 = &__p;
    }
    sub_100AD4F6C((uint64_t)v20, (uint64_t)v22);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_1011B91FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  sub_10187E514(v30 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B9250(uint64_t a1, std::string::value_type *a2)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::error_code *v19;
  int v20;
  std::string *v21;
  __int128 v22;
  const std::__fs::filesystem::path *v23;
  const std::__fs::filesystem::path *v24;
  int v25;
  const char *v26;
  int v27;
  std::string::size_type v28;
  int *v29;
  std::string *v30;
  const char *v31;
  void *__p[2];
  char v34;
  std::string v35;
  void *v36[2];
  std::string::size_type v37;
  void *v38[2];
  char v39;
  std::string __dst;
  std::string v41;
  std::string v42;
  std::string v43;
  __int128 v44;
  int64_t v45;

  v4 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 63);
  else
    v5 = *(_QWORD *)(a1 + 48);
  v6 = &v43;
  sub_100259584((uint64_t)&v43, v5 + 1);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(a1 + 40);
    v8 = (char *)(a1 + 40);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  v11 = std::string::append(&v43, a2);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v45 = v11->__r_.__value_.__r.__words[2];
  v44 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  sub_101224E58((uint64_t)&v41);
  v13 = std::string::append(&v41, "/");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v42, a2);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v42, a2);
  if (*(char *)(v4 + 111) < 0)
    sub_100115CE4(&__dst, *(void **)(v4 + 88), *(_QWORD *)(v4 + 96));
  else
    __dst = *(std::string *)(v4 + 88);
  v17 = std::string::append(&__dst, "_");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (sub_1012256CC(v4, &v42.__r_.__value_.__l.__data_, (char *)&v41))
  {
    sub_1015A2E04(v38, a2);
    if (*(char *)(v4 + 135) < 0)
      sub_100115CE4(&v35, *(void **)(v4 + 112), *(_QWORD *)(v4 + 120));
    else
      v35 = *(std::string *)(v4 + 112);
    v21 = std::string::append(&v35, ".bz2");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v37 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)v36 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((sub_1012257A0(v4, v38, (char *)v36) & 1) != 0)
    {
      v20 = 1;
    }
    else
    {
      sub_1015A2E04(__p, a2);
      v20 = sub_1012257A0(v4, __p, (char *)(v4 + 112));
      if (v34 < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v37) < 0)
      operator delete(v36[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  else
  {
    v20 = 0;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if (!v20)
      goto LABEL_56;
  }
  else if (!v20)
  {
    goto LABEL_56;
  }
  if (v45 >= 0)
    v23 = (const std::__fs::filesystem::path *)&v44;
  else
    v23 = (const std::__fs::filesystem::path *)v44;
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = (const std::__fs::filesystem::path *)&v43;
  else
    v24 = (const std::__fs::filesystem::path *)v43.__r_.__value_.__r.__words[0];
  if (!sub_100512FE0(v23, v24, v19))
  {
    v25 = SHIBYTE(v45);
    v26 = (const char *)v44;
    v27 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
    v28 = v43.__r_.__value_.__r.__words[0];
    v29 = __error();
    v30 = &v43;
    if (v27 < 0)
      v30 = (std::string *)v28;
    if (v25 >= 0)
      v31 = (const char *)&v44;
    else
      v31 = v26;
    syslog(5, "%s,%s,Failed to move file %s to %s (%d)\n", "NOTICE", "CLLog", v31, (const char *)v30, *v29);
  }
LABEL_56:
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  return 1;
}

void sub_1011B95DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a38 < 0)
    operator delete(__p);
  if (a51 < 0)
    operator delete(a46);
  if (a44 < 0)
    operator delete(a39);
  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  if (*(char *)(v51 - 89) < 0)
    operator delete(*(void **)(v51 - 112));
  if (*(char *)(v51 - 57) < 0)
    operator delete(*(void **)(v51 - 80));
  _Unwind_Resume(exception_object);
}

void sub_1011B96E8()
{
  JUMPOUT(0x1011B96D0);
}

void sub_1011B96F0()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x1011B96DCLL);
  JUMPOUT(0x1011B96E0);
}

void sub_1011B9704(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1011B9730(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

__n128 sub_1011B975C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_1011B9790(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;

  result = sub_100182290(a1);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 96);
    v6 = v5 > 0xB;
    v7 = (1 << v5) & 0xC02;
    v8 = v6 || v7 == 0;
    return !v8 && *(double *)(a1 + 20) <= 30.0 && vabdd_f64(*(double *)(a1 + 76), *(double *)(a2 + 76)) <= 1.25;
  }
  return result;
}

uint64_t sub_1011B9808(uint64_t a1, uint64_t a2)
{
  return sub_100124100(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 4), *(double *)(a1 + 12));
}

__n128 sub_1011B981C@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 112);
  a2[6] = *(_OWORD *)(a1 + 96);
  a2[7] = v2;
  a2[8] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)((char *)a2 + 140) = *(_OWORD *)(a1 + 140);
  v3 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v4;
  result = *(__n128 *)a1;
  v6 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v6;
  return result;
}

uint64_t sub_1011B9850()
{
  sub_100197040();
  if (sub_100195F08())
    return 1;
  else
    return 2;
}

float sub_1011B9874(int a1)
{
  float result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (a1 > 2104)
  {
    if (a1 > 12149)
    {
      switch(a1)
      {
        case 17150:
          return 5.97;
        case 15110:
          return 6.95;
        case 12150:
          return 9.33;
      }
    }
    else
    {
      switch(a1)
      {
        case 2105:
          return 3.71;
        case 2150:
          return 4.6;
        case 3015:
          return 5.87;
      }
    }
  }
  else if (a1 > 2023)
  {
    switch(a1)
    {
      case 2024:
        return 5.13;
      case 2071:
        return 5.91;
      case 2101:
        return 6.07;
    }
  }
  else
  {
    switch(a1)
    {
      case 2010:
        return 6.35;
      case 2020:
        return 7.55;
      case 2022:
        return 5.38;
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5728);
  v3 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unexpected activity type passed to lookup model, %d", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 4.4021;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5728);
    v7[0] = 67109120;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "Unexpected activity type passed to lookup model, %d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "float CLCalorieUtils::lookupMetsForActivity(const CLMotionActivity::Type)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 4.4021;
  }
  return result;
}

void sub_1011B9B44(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_1011B9B70(_QWORD *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021A5758;
  a1[3] = a2;
  return a1;
}

void sub_1011B9BB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = &off_10217E550;
  sub_100261F44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1011B9BE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A5758;

  *(_QWORD *)a1 = &off_10217E550;
  sub_100261F44(a1 + 8);
  return a1;
}

void sub_1011B9C34(uint64_t a1)
{
  sub_1011B9BE0(a1);
  operator delete();
}

uint64_t sub_1011B9C58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  _BYTE *v6;
  uint64_t v7;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v5 = objc_msgSend(*(id *)(a1 + 24), "length");
  v6 = objc_msgSend(objc_alloc((Class)PBDataReader), "initWithData:", a2);
  if (*(_QWORD *)&v6[OBJC_IVAR___PBDataReader__pos] < *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__length]
    && !v6[OBJC_IVAR___PBDataReader__error])
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__pos];
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__length])
        break;
      v21 = *(_BYTE *)(*(_QWORD *)&v6[OBJC_IVAR___PBDataReader__bytes] + v12);
      *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__pos] = v13;
      v11 |= (unint64_t)(v21 & 0x7F) << v9;
      if ((v21 & 0x80) == 0)
        goto LABEL_9;
      v9 += 7;
      if (v10++ >= 9)
      {
        v16 = 0;
        v14 = OBJC_IVAR___PBDataReader__error;
        v15 = v6[OBJC_IVAR___PBDataReader__error];
LABEL_12:
        if (v15)
          v17 = 1;
        else
          v17 = (v16 & 7) == 4;
        if (v17)
          return 0;
        v7 = (unsigned __int16)(v16 >> 3);
        if (8 * (uint64_t)v5 - 1 < (unint64_t)(unsigned __int16)(v16 >> 3) || (_DWORD)v7 == 0)
          return 1;
        if ((_DWORD)v7 != 1)
          return v7;
        v19 = *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__pos];
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__length])
        {
          v6[v14] = 1;
          v20 = 0;
          if (!a3)
            goto LABEL_25;
LABEL_24:
          *a3 = v20;
          goto LABEL_25;
        }
        v20 = *(_QWORD *)(*(_QWORD *)&v6[OBJC_IVAR___PBDataReader__bytes] + v19);
        *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__pos] = v19 + 8;
        if (a3)
          goto LABEL_24;
LABEL_25:
        if (*(_QWORD *)&v6[OBJC_IVAR___PBDataReader__pos] >= *(_QWORD *)&v6[OBJC_IVAR___PBDataReader__length])
          return 1;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        if (v6[OBJC_IVAR___PBDataReader__error])
          return 1;
      }
    }
    v6[OBJC_IVAR___PBDataReader__error] = 1;
LABEL_9:
    v14 = OBJC_IVAR___PBDataReader__error;
    v15 = v6[OBJC_IVAR___PBDataReader__error];
    if (v6[OBJC_IVAR___PBDataReader__error])
      v16 = 0;
    else
      v16 = v11;
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1011B9E38(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  unsigned int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  unsigned int v15;

  v3 = sub_1011B9C58(a1, a2, 0);
  v4 = sub_1011BA018(a1, v3);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5788);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v13 = v4;
    v14 = 1024;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "tagEnabled returns %d for tag %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5788);
    v9[0] = 67109376;
    v9[1] = v4;
    v10 = 1024;
    v11 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "tagEnabled returns %d for tag %d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerMsgPolicy::shouldILog(NSData *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v4;
}

uint64_t sub_1011BA018(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *v4;
  id v5;

  v4 = (unsigned __int8 *)objc_msgSend(*(id *)(a1 + 24), "bytes");
  v5 = objc_msgSend(*(id *)(a1 + 24), "length");
  if (a2 == 1)
    return 1;
  if ((unint64_t)v5 <= (unint64_t)a2 >> 3)
    return 0;
  return (v4[(unint64_t)a2 >> 3] >> (~(_BYTE)a2 & 7)) & 1;
}

void sub_1011BA090(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1011BA0BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v11 = a1 + 54460;
  v10 = a1 + 53412;
  v2 = a1 + 52352;
  v3 = a1 + 51300;
  v4 = a1 + 50252;
  v5 = a1 + 49192;
  v6 = a1 + 48140;
  v7 = a1 + 47092;
  v8 = a1 + 46032;
  *(_OWORD *)(a1 + 688) = xmmword_101C44090;
  *(_QWORD *)(a1 + 3776) = 0x10000000000;
  *(_QWORD *)(a1 + 6856) = 0x10000000000;
  *(_QWORD *)(a1 + 9936) = 0x10000000000;
  *(_QWORD *)(a1 + 13016) = 0x10000000000;
  *(_QWORD *)(a1 + 16096) = 0x10000000000;
  *(_QWORD *)(a1 + 19176) = 0x8000000000;
  sub_10087DA44(a1 + 19696, &off_1021A57A8);
  sub_10087DA44(a1 + 19760, &off_1021A57A8);
  sub_10087DA44(a1 + 19824, &off_1021A57A8);
  sub_10087DA44(a1 + 19888, &off_1021A57C0);
  sub_10087DA44(a1 + 19952, &off_1021A57C0);
  sub_10087DA44(a1 + 20016, &off_1021A57C0);
  sub_10087DA44(a1 + 20080, &off_1021A57A8);
  sub_10087DA44(a1 + 20144, &off_1021A57A8);
  sub_10087DA44(a1 + 20208, &off_1021A57A8);
  sub_10087DA44(a1 + 20272, &off_1021A57A8);
  sub_10087DA44(a1 + 20336, &off_1021A57A8);
  sub_10087DA44(a1 + 20400, &off_1021A57A8);
  sub_10087DA44(a1 + 20464, &off_1021A57A8);
  sub_10087DA44(a1 + 20528, &off_1021A57A8);
  sub_10087DA44(a1 + 20592, &off_1021A57A8);
  sub_10087DA44(a1 + 20656, &off_1021A57A8);
  sub_10087DA44(a1 + 20720, &off_1021A57A8);
  sub_10087DA44(a1 + 20784, &off_1021A57A8);
  sub_10087DA44(a1 + 20848, &off_1021A57A8);
  sub_10087DA44(a1 + 20912, &off_1021A57A8);
  sub_10087DA44(a1 + 20976, &off_1021A57A8);
  sub_10087DA44(a1 + 21040, &off_1021A57D8);
  sub_10087DA44(a1 + 21104, &off_1021A57D8);
  sub_10087DA44(a1 + 21168, &off_1021A57D8);
  sub_10087DA44(a1 + 21232, &off_1021A57F0);
  sub_10087DA44(a1 + 21296, &off_1021A57F0);
  sub_10087DA44(a1 + 21360, &off_1021A57F0);
  *(_QWORD *)(a1 + 21424) = 0x20000000000;
  *(_QWORD *)(a1 + 27576) = 0x20000000000;
  *(_QWORD *)(a1 + 33728) = 0x20000000000;
  *(_QWORD *)(a1 + 39880) = 0x20000000000;
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(v8 + 8) = 100;
  *(_BYTE *)(v8 + 12) = 1;
  *(_QWORD *)(v8 + 28) = 0x10000000000;
  *(_DWORD *)(v8 + 24) = 1031798784;
  *(_BYTE *)v7 = 1;
  *(_QWORD *)(v7 + 16) = 0x10000000000;
  *(_DWORD *)(v7 + 12) = 1031798784;
  *(_BYTE *)v6 = 1;
  *(_QWORD *)(v6 + 16) = 0x10000000000;
  *(_DWORD *)(v6 + 12) = 1031798784;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 50;
  *(_BYTE *)(v5 + 12) = 1;
  *(_QWORD *)(v5 + 28) = 0x10000000000;
  *(_DWORD *)(v5 + 24) = 1031798784;
  *(_BYTE *)v4 = 1;
  *(_QWORD *)(v4 + 16) = 0x10000000000;
  *(_DWORD *)(v4 + 12) = 1031798784;
  *(_BYTE *)v3 = 1;
  *(_QWORD *)(v3 + 16) = 0x10000000000;
  *(_DWORD *)(v3 + 12) = 1031798784;
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 25;
  *(_BYTE *)(v2 + 12) = 1;
  *(_QWORD *)(v2 + 28) = 0x10000000000;
  *(_DWORD *)(v2 + 24) = 1031798784;
  *(_BYTE *)v10 = 1;
  *(_QWORD *)(v10 + 16) = 0x10000000000;
  *(_DWORD *)(v10 + 12) = 1031798784;
  *(_BYTE *)v11 = 1;
  *(_QWORD *)(v11 + 16) = 0x10000000000;
  *(_DWORD *)(v11 + 12) = 1031798784;
  nullsub_34(a1 + 61656);
  *(_DWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 3776) = 0;
  *(_DWORD *)(a1 + 6856) = 0;
  *(_DWORD *)(a1 + 9936) = 0;
  *(_DWORD *)(a1 + 13016) = 0;
  *(_DWORD *)(a1 + 16096) = 0;
  *(_DWORD *)(a1 + 21424) = 0;
  *(_DWORD *)(a1 + 27576) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 33728) = 0;
  *(_DWORD *)(a1 + 39880) = 0;
  sub_1011BA4DC(a1);
  return a1;
}

float sub_1011BA470(uint64_t a1, float *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  float v8;
  float v9;

  sub_10087DA48(a3, *a2);
  v9 = v8;
  sub_10087DA48(a4, a2[1]);
  sub_10087DA48(a5, a2[2]);
  return v9;
}

uint64_t sub_1011BA4DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_10087DA38(a1 + 19696);
  sub_10087DA38(a1 + 19760);
  sub_10087DA38(a1 + 19824);
  sub_10087DA38(a1 + 19888);
  sub_10087DA38(a1 + 19952);
  sub_10087DA38(a1 + 20016);
  sub_10087DA38(a1 + 20080);
  sub_10087DA38(a1 + 20144);
  sub_10087DA38(a1 + 20208);
  sub_10087DA38(a1 + 20272);
  sub_10087DA38(a1 + 20336);
  sub_10087DA38(a1 + 20400);
  sub_10087DA38(a1 + 20464);
  sub_10087DA38(a1 + 20528);
  sub_10087DA38(a1 + 20592);
  sub_10087DA38(a1 + 20656);
  sub_10087DA38(a1 + 20720);
  sub_10087DA38(a1 + 20784);
  sub_10087DA38(a1 + 20848);
  sub_10087DA38(a1 + 20912);
  sub_10087DA38(a1 + 20976);
  v2 = a1 + 21040;
  v3 = 3;
  do
  {
    sub_10087DA38(v2);
    result = sub_10087DA38(v2 + 192);
    v2 += 64;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t sub_1011BA61C(uint64_t a1, float32x2_t *a2, float *a3, float32x2_t *a4, float *a5, float *a6, float *a7)
{
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned __int16 *v37;
  unint64_t v38;
  _WORD *v39;
  unint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD v55[3];
  _DWORD v56[3];
  _DWORD v57[3];
  _DWORD v58[3];
  _DWORD v59[3];
  _DWORD v60[3];
  _DWORD v61[3];
  float32x2_t v62;
  float v63;

  sub_100687774((unsigned __int16 *)(a1 + 21424), (uint64_t)a2);
  sub_100687774((unsigned __int16 *)(a1 + 27576), (uint64_t)a3);
  sub_100687774((unsigned __int16 *)(a1 + 33728), (uint64_t)a4);
  sub_100687774((unsigned __int16 *)(a1 + 39880), (uint64_t)a5);
  v14 = a2[1].f32[0] + a4[1].f32[0];
  v62 = vadd_f32(*a2, *a4);
  v63 = v14;
  v15 = sub_10103AF90(a1 + 46032, &v62);
  v61[0] = sub_1011BA470(v15, (float *)a2, (unsigned __int16 *)(a1 + 19696), (unsigned __int16 *)(a1 + 19760), (unsigned __int16 *)(a1 + 19824));
  v61[1] = v16;
  v61[2] = v17;
  v60[0] = sub_1011BA470(v18, a3, (unsigned __int16 *)(a1 + 20272), (unsigned __int16 *)(a1 + 20336), (unsigned __int16 *)(a1 + 20400));
  v60[1] = v19;
  v60[2] = v20;
  v59[0] = sub_1011BA470(v21, (float *)a4, (unsigned __int16 *)(a1 + 20080), (unsigned __int16 *)(a1 + 20144), (unsigned __int16 *)(a1 + 20208));
  v59[1] = v22;
  v59[2] = v23;
  v58[0] = sub_1011BA470(v24, a5, (unsigned __int16 *)(a1 + 20464), (unsigned __int16 *)(a1 + 20528), (unsigned __int16 *)(a1 + 20592));
  v58[1] = v25;
  v58[2] = v26;
  v57[0] = sub_1011BA470(v27, a6, (unsigned __int16 *)(a1 + 20656), (unsigned __int16 *)(a1 + 20720), (unsigned __int16 *)(a1 + 20784));
  v57[1] = v28;
  v57[2] = v29;
  v56[0] = sub_1011BA470(v30, a7, (unsigned __int16 *)(a1 + 20848), (unsigned __int16 *)(a1 + 20912), (unsigned __int16 *)(a1 + 20976));
  v56[1] = v31;
  v56[2] = v32;
  v55[0] = sub_1011BA470(v33, (float *)&v62, (unsigned __int16 *)(a1 + 19888), (unsigned __int16 *)(a1 + 19952), (unsigned __int16 *)(a1 + 20016));
  v55[1] = v34;
  v55[2] = v35;
  v36 = *(_DWORD *)(a1 + 688) + 1;
  *(_DWORD *)(a1 + 688) = v36;
  if ((v36 & 1) != 0)
    return 0;
  v37 = (unsigned __int16 *)(a1 + 16098);
  sub_100687774((unsigned __int16 *)(a1 + 696), (uint64_t)v61);
  sub_100687774((unsigned __int16 *)(a1 + 3776), (uint64_t)v60);
  sub_100687774((unsigned __int16 *)(a1 + 6856), (uint64_t)v59);
  sub_100687774((unsigned __int16 *)(a1 + 9936), (uint64_t)v58);
  sub_100687774((unsigned __int16 *)(a1 + 13016), (uint64_t)v57);
  sub_100687774((unsigned __int16 *)(a1 + 16096), (uint64_t)v56);
  sub_10103AF90(a1 + 49192, v55);
  ++*(_DWORD *)(a1 + 692);
  if ((*(_BYTE *)(a1 + 688) & 3) == 0)
    sub_10103AF90(a1 + 52352, v55);
  v38 = *v37;
  if (*(_DWORD *)(a1 + 16100) != (_DWORD)v38)
    goto LABEL_27;
  v39 = (_WORD *)(a1 + 19176);
  v40 = v38 >> 1;
  if ((v38 >> 1) >= v38)
  {
    v49 = -INFINITY;
    goto LABEL_19;
  }
  v41 = 0.0;
  v42 = 3.4028e38;
  v43 = -3.4028e38;
  v44 = 0.0;
  do
  {
    v45 = v44;
    v46 = (float *)sub_100687A34((unsigned __int16 *)(a1 + 16096), v40);
    v44 = atan2f(v46[1], *v46) * 57.296;
    v47 = v44 - v45;
    if ((float)(v44 - v45) <= 180.0)
    {
      if (v47 >= -180.0)
        goto LABEL_12;
      v48 = 360.0;
    }
    else
    {
      v48 = -360.0;
    }
    v47 = v47 + v48;
LABEL_12:
    v41 = v41 + v47;
    if (v42 > v41)
      v42 = v41;
    if (v43 < v41)
      v43 = v41;
    ++v40;
  }
  while (v40 < *v37);
  v49 = v43 - v42;
LABEL_19:
  v50 = *(unsigned __int16 *)(a1 + 19178);
  v51 = *(unsigned int *)(a1 + 19180);
  v52 = (unsigned __int16)*v39;
  if (v52 + v50 >= v51)
    v53 = *(unsigned int *)(a1 + 19180);
  else
    v53 = 0;
  *(float *)(a1 + 4 * (v52 + v50 - v53) + 19184) = v49;
  if (v51 <= v50)
  {
    if (v52 + 1 < v51)
      LOWORD(v51) = 0;
    *v39 = v52 + 1 - v51;
  }
  else
  {
    *(_WORD *)(a1 + 19178) = v50 + 1;
  }
LABEL_27:
  if (*(_DWORD *)(a1 + 700) == *(unsigned __int16 *)(a1 + 698) && *(int *)(a1 + 692) >= 128)
  {
    sub_1011BAA14(a1);
    *(_DWORD *)(a1 + 692) = 0;
    return 1;
  }
  return 0;
}

float sub_1011BAA14(uint64_t a1)
{
  unsigned __int16 *v2;
  double v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  float *v13;
  float v14;
  float v15;
  float result;
  __int128 v17;
  __int128 v18;
  _OWORD v19[4];

  v2 = (unsigned __int16 *)(a1 + 19176);
  sub_1011BABAC(a1);
  sub_1011BC850(a1);
  sub_1011BD138(a1, v3);
  sub_1011BD418(a1);
  v18 = 0u;
  memset(v19, 0, 60);
  v17 = 0u;
  sub_100E2DD8C(a1 + 57048, a1 + 57560, a1 + 58072, a1 + 55512, a1 + 56024, a1 + 56536, (float *)&v17);
  v4 = v18;
  *(_OWORD *)(a1 + 84) = v17;
  *(_OWORD *)(a1 + 100) = v4;
  *(_DWORD *)(a1 + 116) = v19[0];
  *(_QWORD *)&v5 = *(_QWORD *)((char *)v19 + 4);
  *((_QWORD *)&v5 + 1) = *(_QWORD *)((char *)&v19[1] + 4);
  *(_OWORD *)(a1 + 120) = v5;
  *(_QWORD *)&v5 = *(_QWORD *)((char *)v19 + 12);
  *((_QWORD *)&v5 + 1) = *(_QWORD *)&v19[2];
  *(_DWORD *)(a1 + 136) = HIDWORD(v19[1]);
  *(_OWORD *)(a1 + 140) = v5;
  *(_OWORD *)(a1 + 156) = *(_OWORD *)((char *)&v19[2] + 8);
  *(_DWORD *)(a1 + 172) = DWORD2(v19[3]);
  sub_1011BE08C(a1);
  v6 = v2[1];
  v7 = *v2 + v6 - 1;
  v8 = *((unsigned int *)v2 + 1);
  if (v7 < v8)
    v8 = 0;
  *(_DWORD *)(a1 + 680) = *(_DWORD *)&v2[2 * (v7 - v8) + 4];
  if (!v6)
    goto LABEL_8;
  v9 = 0.0;
  v10 = -1;
  v11 = 0.0;
  do
  {
    v12 = v10++;
    v13 = (float *)sub_1004784C4(v2, v10);
    v14 = *v13 - v11;
    v11 = v11 + (float)(v14 / (float)(v12 + 2));
    v9 = v9 + (float)(v14 * (float)(*v13 - v11));
  }
  while (v12 + 2 < v2[1]);
  if (v10)
    v15 = v9 / (float)v10;
  else
LABEL_8:
    v15 = 0.0;
  result = sqrtf(v15);
  *(float *)(a1 + 684) = result;
  return result;
}

void sub_1011BABAC(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  float *v32;
  _DWORD *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  float v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  int v46;
  float v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unint64_t v101;
  float *v102;
  float *v103;
  uint64_t v104;
  float *v105;
  float v106;
  float v107;
  uint64_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  int v121;
  float v122;
  float v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  int v133;
  int v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  int v144;
  int v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  _DWORD *v156;
  _DWORD *v157;
  char *v158;
  char *v159;
  float v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  int v168;
  __int128 v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float32x4_t *v179;
  float v180;
  int v181;
  float v182;
  int v183;
  int v184;
  int v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float32x4_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t i;
  uint64_t v199;
  float32x4_t *v200;
  uint64_t v201;
  float32x4_t *v202;
  uint64_t j;
  uint64_t v204;
  float v205;
  int v206;
  float v207;
  float v208;
  uint64_t v209;
  float v210;
  int v211;
  uint64_t v212;
  float v213;
  int v214;
  uint64_t v215;
  float v216;
  int v217;
  uint64_t v218;
  float v219;
  int v220;
  uint64_t v221;
  float v222;
  uint64_t v223;
  float v224;
  uint64_t v225;
  float v226;
  uint64_t v227;
  float v228;
  uint64_t v229;
  float v230;
  uint64_t v231;
  float v232;
  unint64_t v233;
  uint64_t v234;
  float v235;
  int v236;
  uint64_t v237;
  float v238;
  int v239;
  uint64_t v240;
  float v241;
  int v242;
  uint64_t v243;
  float v244;
  int v245;
  uint64_t v246;
  float v247;
  int v248;
  float v249;
  float v250;
  float v251;
  float v252;
  int v253;
  int v254;
  float v255;
  float v256;
  uint64_t v257;
  float *v258;
  float v259;
  float v260;
  uint64_t v261;
  float v262;
  uint64_t k;
  float v264;
  float v265;
  float v266;
  uint64_t v267;
  BOOL v268;
  float v269;
  uint64_t v270;
  float *v271;
  float32x4_t *v272;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  int v278;
  int v279;
  unint64_t v280;
  unsigned __int16 *v281;
  unint64_t v282;
  unsigned __int16 *v283;
  int v284;
  unsigned __int16 *v285;
  float v286;
  unint64_t v287;
  int8x8_t v288;
  uint64_t v289;
  float v290;
  uint64_t v291;
  float v292;
  unsigned int v293;
  uint64_t v294;
  float v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  float v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  float v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  float v307;
  float v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  float v313;
  float v314;
  uint64_t v315;
  float v316;
  uint64_t v317;
  float v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  __int128 v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  float v326;
  unint64_t v327;
  unint64_t v328;
  float v329;
  unint64_t v330;
  unint64_t v331;
  float v332;
  int v333;
  unint64_t v334;
  float v335;
  float v336;
  unint64_t v337;
  float v338;
  unint64_t v339;
  unint64_t v340;
  float v341;
  uint64_t v342;
  unint64_t v343;
  float v344;
  uint64_t v345;
  unsigned __int16 v346;
  float v347;
  uint64_t v348;
  _BYTE v349[2200];
  void *v350;
  char *v351;
  char *v352;
  void *v353;
  char *v354;
  char *v355;
  void *v356;
  char *v357;
  char *v358;
  void *__p;
  char *v360;
  char *v361;
  _OWORD v362[3];
  uint64_t v363;
  _OWORD v364[3];
  uint64_t v365;
  _OWORD v366[3];
  uint64_t v367;
  _QWORD v368[2];
  int v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  float v374[256];
  float v375[256];
  _DWORD v376[128];
  _DWORD v377[128];
  _DWORD v378[128];
  _DWORD v379[128];
  _DWORD v380[128];
  _DWORD v381[128];
  int v382[128];
  int v383[128];
  _DWORD v384[128];
  unsigned __int16 v385[516];
  unsigned __int16 v386[516];
  unsigned __int16 v387[516];
  unsigned __int16 v388[516];
  unsigned __int16 v389[516];
  unsigned __int16 v390[516];
  unsigned __int16 v391[516];
  unsigned __int16 v392[516];
  unsigned __int16 v393[516];
  unsigned __int16 v394[516];
  unsigned __int16 v395[516];
  unsigned __int16 v396[516];
  unsigned __int16 v397[516];
  unsigned __int16 v398[516];
  unsigned __int16 v399[516];
  unsigned __int16 v400[516];
  unsigned __int16 v401[516];
  unsigned __int16 v402[516];
  unsigned __int16 v403[516];
  unsigned __int16 v404[516];
  unsigned __int16 v405[516];

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v346 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v272 = (float32x4_t *)(a1 + 55512);
  *(_QWORD *)v405 = 0x10000000000;
  *(_QWORD *)v404 = 0x10000000000;
  *(_QWORD *)v403 = 0x10000000000;
  *(_QWORD *)v402 = 0x10000000000;
  *(_QWORD *)v401 = 0x10000000000;
  *(_QWORD *)v400 = 0x10000000000;
  *(_QWORD *)v399 = 0x10000000000;
  *(_QWORD *)v398 = 0x10000000000;
  *(_QWORD *)v397 = 0x10000000000;
  *(_QWORD *)v396 = 0x10000000000;
  *(_QWORD *)v395 = 0x10000000000;
  *(_QWORD *)v394 = 0x10000000000;
  v281 = (unsigned __int16 *)(a1 + 6856);
  v271 = (float *)(a1 + 412);
  v285 = (unsigned __int16 *)(a1 + 696);
  v283 = (unsigned __int16 *)(a1 + 3776);
  do
  {
    v287 = v3;
    v289 = v24;
    v291 = v23;
    v294 = v22;
    v298 = v21;
    v302 = v20;
    v306 = v19;
    v312 = v17;
    v315 = v16;
    v317 = v15;
    v321 = v4;
    v25 = v14;
    v325 = v5;
    v331 = v6;
    v334 = v7;
    v337 = v8;
    v340 = v10;
    v26 = v11;
    v343 = v9;
    v27 = v2;
    v28 = v1;
    v29 = v12;
    v30 = v13;
    v31 = (float *)sub_100687A34(v285, v13);
    v32 = (float *)sub_100687A34(v281, v30);
    v328 = v30;
    v33 = (_DWORD *)sub_100687A34(v283, v30);
    v12 = v29;
    v34 = v31[1];
    v35 = v31[2];
    v36 = v32[1];
    v37 = v32[2];
    v38 = v29 + v346;
    if (v38 >= 0x100)
      v39 = -256;
    else
      v39 = 0;
    *(float *)&v405[2 * v39 + 4 + 2 * v38] = *v31 + *v32;
    if (v29 > 0xFF)
    {
      if (v346 >= 0xFFu)
        v40 = -256;
      else
        v40 = 0;
      v346 += v40 + 1;
      v405[0] = v346;
    }
    else
    {
      v12 = v29 + 1;
      v405[1] = v29 + 1;
    }
    v11 = v26;
    v14 = v25;
    v41 = v34 + v36;
    v42 = v26 + (unsigned __int16)v25;
    if (v42 >= 0x100)
      v43 = -256;
    else
      v43 = 0;
    *(float *)&v404[2 * v43 + 4 + 2 * v42] = v41;
    v44 = v26 > 0xFF;
    v1 = v28;
    v2 = v27;
    v3 = v287;
    v4 = v321;
    v5 = v325;
    v6 = v331;
    v7 = v334;
    v8 = v337;
    v10 = v340;
    v9 = v343;
    v17 = v312;
    v16 = v315;
    v19 = v306;
    v20 = v302;
    if (v44)
    {
      if ((unsigned __int16)v14 >= 0xFFu)
        v45 = -256;
      else
        v45 = 0;
      v46 = v14 + v45;
      v14 = (v46 + 1);
      v404[0] = v46 + 1;
    }
    else
    {
      v404[1] = ++v11;
    }
    v15 = v317;
    v23 = v291;
    v22 = v294;
    v47 = v35 + v37;
    v48 = v340 + (unsigned __int16)v317;
    if (v48 >= 0x100)
      v49 = -256;
    else
      v49 = 0;
    *(float *)&v403[2 * v49 + 4 + 2 * v48] = v47;
    if (v340 > 0xFF)
    {
      if ((unsigned __int16)v317 >= 0xFFu)
        v50 = -256;
      else
        v50 = 0;
      v51 = v317 + v50;
      v15 = (v51 + 1);
      v403[0] = v51 + 1;
    }
    else
    {
      v10 = v340 + 1;
      v403[1] = v340 + 1;
    }
    v52 = v343 + (unsigned __int16)v315;
    if (v52 >= 0x100)
      v53 = -256;
    else
      v53 = 0;
    *(_DWORD *)&v402[2 * v53 + 4 + 2 * v52] = *v33;
    if (v343 > 0xFF)
    {
      if ((unsigned __int16)v315 >= 0xFFu)
        v54 = -256;
      else
        v54 = 0;
      v55 = v315 + v54;
      v16 = (v55 + 1);
      v402[0] = v55 + 1;
    }
    else
    {
      v9 = v343 + 1;
      v402[1] = v343 + 1;
    }
    v56 = v337 + (unsigned __int16)v312;
    if (v56 >= 0x100)
      v57 = -256;
    else
      v57 = 0;
    *(_DWORD *)&v401[2 * v57 + 4 + 2 * v56] = v33[1];
    if (v337 > 0xFF)
    {
      if ((unsigned __int16)v312 >= 0xFFu)
        v58 = -256;
      else
        v58 = 0;
      v59 = v312 + v58;
      v17 = (v59 + 1);
      v401[0] = v59 + 1;
    }
    else
    {
      v8 = v337 + 1;
      v401[1] = v337 + 1;
    }
    v60 = v334 + (unsigned __int16)v18;
    if (v60 >= 0x100)
      v61 = -256;
    else
      v61 = 0;
    *(_DWORD *)&v400[2 * v61 + 4 + 2 * v60] = v33[2];
    if (v334 > 0xFF)
    {
      if ((unsigned __int16)v18 >= 0xFFu)
        v62 = -256;
      else
        v62 = 0;
      v63 = v18 + v62;
      v18 = v63 + 1;
      v400[0] = v63 + 1;
    }
    else
    {
      v7 = v334 + 1;
      v400[1] = v334 + 1;
    }
    v64 = v331 + (unsigned __int16)v306;
    if (v64 >= 0x100)
      v65 = -256;
    else
      v65 = 0;
    *(float *)&v399[2 * v65 + 4 + 2 * v64] = *v31;
    if (v331 > 0xFF)
    {
      if ((unsigned __int16)v306 >= 0xFFu)
        v66 = -256;
      else
        v66 = 0;
      v67 = v306 + v66;
      v19 = (v67 + 1);
      v399[0] = v67 + 1;
    }
    else
    {
      v6 = v331 + 1;
      v399[1] = v331 + 1;
    }
    v68 = v325 + (unsigned __int16)v302;
    if (v68 >= 0x100)
      v69 = -256;
    else
      v69 = 0;
    *(float *)&v398[2 * v69 + 4 + 2 * v68] = v31[1];
    if (v325 > 0xFF)
    {
      if ((unsigned __int16)v302 >= 0xFFu)
        v70 = -256;
      else
        v70 = 0;
      v71 = v302 + v70;
      v20 = (v71 + 1);
      v398[0] = v71 + 1;
    }
    else
    {
      v5 = v325 + 1;
      v398[1] = v325 + 1;
    }
    v72 = *((_DWORD *)v31 + 2);
    v21 = v298;
    v73 = v321 + (unsigned __int16)v298;
    if (v73 >= 0x100)
      v74 = -256;
    else
      v74 = 0;
    *(_DWORD *)&v397[2 * v74 + 4 + 2 * v73] = v72;
    if (v321 > 0xFF)
    {
      if ((unsigned __int16)v298 >= 0xFFu)
        v75 = -256;
      else
        v75 = 0;
      v76 = v298 + v75;
      v21 = (v76 + 1);
      v397[0] = v76 + 1;
    }
    else
    {
      v4 = v321 + 1;
      v397[1] = v321 + 1;
    }
    v77 = v287 + (unsigned __int16)v294;
    if (v77 >= 0x100)
      v78 = -256;
    else
      v78 = 0;
    *(float *)&v396[2 * v78 + 4 + 2 * v77] = *v32;
    if (v287 > 0xFF)
    {
      if ((unsigned __int16)v294 >= 0xFFu)
        v79 = -256;
      else
        v79 = 0;
      v80 = v294 + v79;
      v22 = (v80 + 1);
      v396[0] = v80 + 1;
    }
    else
    {
      v3 = v287 + 1;
      v396[1] = v287 + 1;
    }
    v81 = v2 + (unsigned __int16)v291;
    if (v81 >= 0x100)
      v82 = -256;
    else
      v82 = 0;
    *(float *)&v395[2 * v82 + 4 + 2 * v81] = v32[1];
    if (v2 > 0xFF)
    {
      if ((unsigned __int16)v291 >= 0xFFu)
        v83 = -256;
      else
        v83 = 0;
      v84 = v291 + v83;
      v23 = (v84 + 1);
      v395[0] = v84 + 1;
    }
    else
    {
      v395[1] = ++v2;
    }
    v85 = *((_DWORD *)v32 + 2);
    v24 = v289;
    v86 = v1 + (unsigned __int16)v289;
    if (v86 >= 0x100)
      v87 = -256;
    else
      v87 = 0;
    *(_DWORD *)&v394[2 * v87 + 4 + 2 * v86] = v85;
    if (v1 > 0xFF)
    {
      if ((unsigned __int16)v289 >= 0xFFu)
        v88 = -256;
      else
        v88 = 0;
      v89 = v289 + v88;
      v24 = (v89 + 1);
      v394[0] = v89 + 1;
    }
    else
    {
      v394[1] = ++v1;
    }
    v13 = v328 + 1;
  }
  while (v328 != 255);
  *(_QWORD *)v393 = 0x10000000000;
  *(_QWORD *)v392 = 0x10000000000;
  *(_QWORD *)v391 = 0x10000000000;
  *(_QWORD *)v390 = 0x10000000000;
  *(_QWORD *)v389 = 0x10000000000;
  *(_QWORD *)v388 = 0x10000000000;
  *(_QWORD *)v387 = 0x10000000000;
  *(_QWORD *)v386 = 0x10000000000;
  *(_QWORD *)v385 = 0x10000000000;
  sub_1011BE410(v396, v393);
  sub_1011BE410(v395, v392);
  sub_1011BE410(v394, v391);
  sub_1011BE410(v399, v390);
  sub_1011BE410(v398, v389);
  sub_1011BE410(v397, v388);
  sub_1011BE410(v402, v387);
  sub_1011BE410(v401, v386);
  sub_1011BE410(v400, v385);
  v368[1] = 0;
  v368[0] = 0;
  v369 = 0;
  v371 = 0;
  v370 = 0;
  v372 = 0;
  v373 = 0;
  v367 = 0;
  *((_QWORD *)&v90 + 1) = 0;
  memset(v366, 0, 44);
  v365 = 0;
  memset(v364, 0, 44);
  v363 = 0;
  memset(v362, 0, 44);
  v360 = 0;
  __p = 0;
  v361 = 0;
  v357 = 0;
  v356 = 0;
  v358 = 0;
  v354 = 0;
  v353 = 0;
  v355 = 0;
  v351 = 0;
  v350 = 0;
  v352 = 0;
  v91 = *(unsigned __int16 *)(a1 + 698);
  if (*(_WORD *)(a1 + 698))
  {
    v92 = 0;
    *(_QWORD *)&v90 = 0x8000007F7FFFFFLL;
    v322 = v90;
    v318 = 0.0;
    v316 = 0.0;
    v290 = 0.0;
    v93 = 0.0;
    v94 = 3.4028e38;
    v303 = 0.0;
    v95 = 1.1755e-38;
    v96 = 0.0;
    v299 = 0.0;
    v97 = 0.0;
    v295 = 0.0;
    v98 = 0.0;
    v332 = 3.4028e38;
    v292 = 0.0;
    v99 = 0.0;
    v335 = 3.4028e38;
    v329 = 3.4028e38;
    v326 = 1.1755e-38;
    v307 = 1.1755e-38;
    v338 = 1.1755e-38;
    v341 = 3.4028e38;
    v347 = 1.1755e-38;
    v344 = 3.4028e38;
    v100 = 0.0;
    v308 = 0.0;
    do
    {
      v101 = v92;
      v102 = (float *)sub_100687A34(v285, v92);
      v313 = v93;
      v103 = (float *)sub_100687A34(v283, v92);
      v104 = sub_100687A34(v281, v92);
      v105 = (float *)v104;
      v106 = *(float *)(v104 + 8);
      if (v94 > v106)
        v94 = *(float *)(v104 + 8);
      if (v95 < v106)
        v95 = *(float *)(v104 + 8);
      v107 = *v103;
      sub_10083D1DC((uint64_t)v366, fabsf(*v102), fabsf(v103[1]));
      sub_10083D1DC((uint64_t)v364, *v102, v102[1]);
      sub_10083D1DC((uint64_t)v362, *v102, v103[2]);
      v108 = 0;
      v308 = v308 + (float)(v107 * v107);
      ++v92;
      v109 = 0.0;
      do
      {
        v109 = v109 + (float)(v103[v108] * v103[v108]);
        ++v108;
      }
      while (v108 != 3);
      sub_10115A020((float *)v368, fabsf(*v102), fabsf(v103[1]), sqrtf(v109));
      v110 = v103[2];
      v111 = v344;
      if (v344 > v110)
        v111 = v103[2];
      v344 = v111;
      v112 = v347;
      if (v347 < v110)
        v112 = v103[2];
      v347 = v112;
      v113 = v105[2];
      v114 = v341;
      if (v341 > v113)
        v114 = v105[2];
      v341 = v114;
      v115 = v338;
      if (v338 < v113)
        v115 = v105[2];
      v338 = v115;
      v116 = v105[1];
      v117 = fabsf(*v105);
      v118 = v307;
      if (v307 < v117)
        v118 = v117;
      v307 = v118;
      v119 = v329;
      if (v329 > v116)
        v119 = v105[1];
      v329 = v119;
      v120 = v326;
      if (v326 < v116)
        v120 = v105[1];
      v326 = v120;
      v121 = *((_DWORD *)v102 + 1);
      v122 = v335;
      if (v335 > *v102)
        v122 = *v102;
      v335 = v122;
      v288 = *(int8x8_t *)v103;
      v123 = v332;
      if (v332 > *v105)
        v123 = *v105;
      v332 = v123;
      v124 = v360;
      if (v360 >= v361)
      {
        v126 = (char *)__p;
        v127 = (v360 - (_BYTE *)__p) >> 2;
        v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 62)
          sub_100259694();
        v129 = v361 - (_BYTE *)__p;
        if ((v361 - (_BYTE *)__p) >> 1 > v128)
          v128 = v129 >> 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
          v130 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v130 = v128;
        if (v130)
        {
          v131 = (char *)sub_100260634((uint64_t)&v361, v130);
          v124 = v360;
          v126 = (char *)__p;
        }
        else
        {
          v131 = 0;
        }
        v132 = &v131[4 * v127];
        *(_DWORD *)v132 = v121;
        v125 = v132 + 4;
        while (v124 != v126)
        {
          v133 = *((_DWORD *)v124 - 1);
          v124 -= 4;
          *((_DWORD *)v132 - 1) = v133;
          v132 -= 4;
        }
        __p = v132;
        v360 = v125;
        v361 = &v131[4 * v130];
        if (v126)
          operator delete(v126);
      }
      else
      {
        *(_DWORD *)v360 = v121;
        v125 = v124 + 4;
      }
      v360 = v125;
      v134 = *((_DWORD *)v103 + 2);
      v135 = v357;
      if (v357 >= v358)
      {
        v137 = (char *)v356;
        v138 = (v357 - (_BYTE *)v356) >> 2;
        v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 62)
          sub_100259694();
        v140 = v358 - (_BYTE *)v356;
        if ((v358 - (_BYTE *)v356) >> 1 > v139)
          v139 = v140 >> 1;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
          v141 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        if (v141)
        {
          v142 = (char *)sub_100260634((uint64_t)&v358, v141);
          v135 = v357;
          v137 = (char *)v356;
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[4 * v138];
        *(_DWORD *)v143 = v134;
        v136 = v143 + 4;
        while (v135 != v137)
        {
          v144 = *((_DWORD *)v135 - 1);
          v135 -= 4;
          *((_DWORD *)v143 - 1) = v144;
          v143 -= 4;
        }
        v356 = v143;
        v357 = v136;
        v358 = &v142[4 * v141];
        if (v137)
          operator delete(v137);
      }
      else
      {
        *(_DWORD *)v357 = v134;
        v136 = v135 + 4;
      }
      v357 = v136;
      v145 = *((_DWORD *)v105 + 2);
      v146 = v354;
      if (v354 >= v355)
      {
        v148 = (char *)v353;
        v149 = (v354 - (_BYTE *)v353) >> 2;
        v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 62)
          sub_100259694();
        v151 = v355 - (_BYTE *)v353;
        if ((v355 - (_BYTE *)v353) >> 1 > v150)
          v150 = v151 >> 1;
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
          v152 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v152 = v150;
        if (v152)
        {
          v153 = (char *)sub_100260634((uint64_t)&v355, v152);
          v146 = v354;
          v148 = (char *)v353;
        }
        else
        {
          v153 = 0;
        }
        v154 = &v153[4 * v149];
        *(_DWORD *)v154 = v145;
        v147 = v154 + 4;
        while (v146 != v148)
        {
          v155 = *((_DWORD *)v146 - 1);
          v146 -= 4;
          *((_DWORD *)v154 - 1) = v155;
          v154 -= 4;
        }
        v353 = v154;
        v354 = v147;
        v355 = &v153[4 * v152];
        if (v148)
          operator delete(v148);
      }
      else
      {
        *(_DWORD *)v354 = v145;
        v147 = v146 + 4;
      }
      v354 = v147;
      v156 = (_DWORD *)sub_1004784C4(v387, v101);
      v157 = v156;
      v158 = v351;
      if (v351 >= v352)
      {
        v161 = (char *)v350;
        v162 = (v351 - (_BYTE *)v350) >> 2;
        v163 = v162 + 1;
        if ((unint64_t)(v162 + 1) >> 62)
          sub_100259694();
        v164 = v352 - (_BYTE *)v350;
        if ((v352 - (_BYTE *)v350) >> 1 > v163)
          v163 = v164 >> 1;
        if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
          v165 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v165 = v163;
        if (v165)
        {
          v166 = (char *)sub_100260634((uint64_t)&v352, v165);
          v158 = v351;
          v161 = (char *)v350;
        }
        else
        {
          v166 = 0;
        }
        v167 = &v166[4 * v162];
        *(_DWORD *)v167 = *v157;
        v159 = v167 + 4;
        if (v158 == v161)
        {
          v160 = v313;
        }
        else
        {
          v160 = v313;
          do
          {
            v168 = *((_DWORD *)v158 - 1);
            v158 -= 4;
            *((_DWORD *)v167 - 1) = v168;
            v167 -= 4;
          }
          while (v158 != v161);
        }
        v350 = v167;
        v351 = v159;
        v352 = &v166[4 * v165];
        if (v161)
          operator delete(v161);
      }
      else
      {
        *(_DWORD *)v351 = *v156;
        v159 = v158 + 4;
        v160 = v313;
      }
      *((_QWORD *)&v169 + 1) = *((_QWORD *)&v322 + 1);
      *(int8x8_t *)&v169 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v288.u32[1], v322), (float32x2_t)__PAIR64__(DWORD1(v322), v288.u32[0])), v288, *(int8x8_t *)&v322);
      v322 = v169;
      v100 = v100 + *(float *)v288.i32;
      v351 = v159;
      v170 = v103[2];
      v171 = v170 - v99;
      v99 = v99 + (float)((float)(v170 - v99) / (float)v92);
      v292 = v292 + (float)(v171 * (float)(v170 - v99));
      v318 = v318 + (float)((float)(v170 * v170) + (float)((float)(*v103 * *v103) + (float)(v103[1] * v103[1])));
      v172 = *v105 * *v105;
      v173 = v105[2] * v105[2];
      v316 = v316 + (float)((float)(v172 + (float)(v105[1] * v105[1])) + v173);
      v290 = v290 + v173;
      v93 = v160 + v172;
      v174 = v102[1];
      v175 = *v102 - v98;
      v98 = v98 + (float)(v175 / (float)v92);
      v295 = v295 + (float)(v175 * (float)(*v102 - v98));
      v176 = v174 - v97;
      v97 = v97 + (float)((float)(v174 - v97) / (float)v92);
      v299 = v299 + (float)(v176 * (float)(v174 - v97));
      v177 = v102[2];
      v178 = v177 - v96;
      v96 = v96 + (float)((float)(v177 - v96) / (float)v92);
      v303 = v303 + (float)(v178 * (float)(v177 - v96));
    }
    while (v92 != v91);
  }
  else
  {
    *(_QWORD *)&v322 = 0x8000007F7FFFFFLL;
    v308 = 0.0;
    v95 = 1.1755e-38;
    v94 = 3.4028e38;
    v100 = 0.0;
    v341 = 3.4028e38;
    v338 = 1.1755e-38;
    v307 = 1.1755e-38;
    v292 = 0.0;
    v295 = 0.0;
    v326 = 1.1755e-38;
    v329 = 3.4028e38;
    v335 = 3.4028e38;
    v332 = 3.4028e38;
    v299 = 0.0;
    v303 = 0.0;
    v344 = 3.4028e38;
    v347 = 1.1755e-38;
    v93 = 0.0;
    v290 = 0.0;
    v316 = 0.0;
    v318 = 0.0;
  }
  v179 = v272;
  *(float *)a1 = sub_10115A0A8((uint64_t)v368);
  *(float *)(a1 + 4) = sub_10083D408((uint64_t)v366);
  if ((_DWORD)v91)
  {
    *(float *)(a1 + 20) = sqrtf(v308 / (float)v91);
    *(float *)(a1 + 8) = v95 - v94;
    *(_QWORD *)(a1 + 12) = v322;
    v180 = v100 / (float)v91;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = 0;
    *(float *)(a1 + 8) = v95 - v94;
    *(_QWORD *)(a1 + 12) = v322;
    v180 = 0.0;
  }
  *(float *)(a1 + 24) = v180;
  sub_1011BE4E8((float **)&__p, 0);
  *(_DWORD *)(a1 + 328) = v181;
  *(float *)(a1 + 348) = v347 - v344;
  v182 = sub_100AA7BF8((uint64_t)&v350, 50);
  *(float *)(a1 + 176) = (float)(int)sub_1011BE574(v387, v182);
  *(float *)(a1 + 352) = v338 - v341;
  *(float *)(a1 + 356) = v335;
  sub_1011BE60C((uint64_t)v400);
  *(_DWORD *)(a1 + 228) = v183;
  sub_1011BE60C((uint64_t)v393);
  *(_DWORD *)(a1 + 188) = v184;
  sub_1011BE6E0((uint64_t)v399);
  *(_DWORD *)(a1 + 252) = v185;
  *(float *)(a1 + 180) = (float)(int)sub_1011BE574(v386, 0.0);
  *(float *)(a1 + 248) = sub_100AA7BF8((uint64_t)&v356, 10);
  *(float *)(a1 + 244) = sub_100AA7BF8((uint64_t)&v353, 90);
  v186 = sub_100AA7BF8((uint64_t)&v356, 90);
  *(float *)(a1 + 236) = v347 - v344;
  *(float *)(a1 + 240) = v186;
  *(float *)(a1 + 232) = v326 - v329;
  v187 = 0.0;
  if (v91 >= 2)
    v187 = v292 / (float)v91;
  *(float *)(a1 + 256) = sqrtf(v187);
  *(float *)(a1 + 332) = v332;
  *(float *)(a1 + 336) = sub_100AA7BF8((uint64_t)&v353, 50);
  *(float *)(a1 + 340) = v318;
  *(float *)(a1 + 392) = sub_10083D408((uint64_t)v364);
  *(float *)(a1 + 396) = sub_10083D408((uint64_t)v362);
  if (v91 < 2)
  {
    v188 = 0.0;
    v189 = 1.1755e-38;
LABEL_218:
    if (v189 == v188)
      v192 = 1.0;
    else
      v192 = 2.0;
    goto LABEL_221;
  }
  v190 = v295 / (float)v91;
  v191 = fmaxf(v190, 1.1755e-38);
  v188 = v299 / (float)v91;
  if (v191 < v188)
    v191 = v299 / (float)v91;
  v189 = v303 / (float)v91;
  if (v191 >= v189)
    v189 = v191;
  v192 = 0.0;
  if (v189 != v190)
    goto LABEL_218;
LABEL_221:
  *(float *)(a1 + 372) = v192;
  sub_1014022D8(v349);
  sub_1014022DC((uint64_t)v349, v272, v405);
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 56024), v404);
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 56536), v403);
  v193 = v272 + 96;
  sub_1014022DC((uint64_t)v349, (float32x4_t *)v272[96].i32, v402);
  v348 = a1 + 57560;
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 57560), v401);
  v194 = a1 + 58072;
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 58072), v400);
  v195 = (uint64_t)&v272[192];
  sub_1014022DC((uint64_t)v349, (float32x4_t *)v272[192].i32, v399);
  v196 = a1 + 59096;
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 59096), v398);
  v345 = a1 + 59608;
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 59608), v397);
  v197 = (uint64_t)&v272[288];
  sub_1014022DC((uint64_t)v349, (float32x4_t *)v272[288].i32, v396);
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 60632), v395);
  sub_1014022DC((uint64_t)v349, (_DWORD *)(a1 + 61144), v394);
  sub_1014022DC((uint64_t)v349, v384, v393);
  sub_1014022DC((uint64_t)v349, v383, v392);
  sub_1014022DC((uint64_t)v349, v382, v391);
  sub_1014022DC((uint64_t)v349, v381, v390);
  sub_1014022DC((uint64_t)v349, v380, v389);
  sub_1014022DC((uint64_t)v349, v379, v388);
  sub_1014022DC((uint64_t)v349, v378, v387);
  sub_1014022DC((uint64_t)v349, v377, v386);
  sub_1014022DC((uint64_t)v349, v376, v385);
  for (i = 0; i != 128; i += 4)
  {
    *(float32x4_t *)&v375[i + 128] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v179, *v179), vmulq_f32(v179[32], v179[32])), vmulq_f32(v179[64], v179[64])));
    ++v179;
  }
  v199 = 0;
  v200 = v272 + 192;
  do
  {
    *(float32x4_t *)&v375[v199] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v200, *v200), vmulq_f32(v200[32], v200[32])), vmulq_f32(v200[64], v200[64])));
    ++v200;
    v199 += 4;
  }
  while (v199 != 128);
  v201 = 0;
  v202 = v272 + 288;
  do
  {
    *(float32x4_t *)&v374[v201 + 128] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v202, *v202), vmulq_f32(v202[32], v202[32])), vmulq_f32(v202[64], v202[64])));
    ++v202;
    v201 += 4;
  }
  while (v201 != 128);
  for (j = 0; j != 128; j += 4)
  {
    *(float32x4_t *)&v374[j] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v193, *v193), vmulq_f32(v193[32], v193[32])), vmulq_f32(v193[64], v193[64])));
    ++v193;
  }
  v204 = 0;
  v205 = 0.0;
  v206 = -1;
  v207 = 0.0;
  do
  {
    v208 = v375[v204 + 128];
    v207 = v207 + v208;
    if (v208 > v205)
    {
      v205 = v375[v204 + 128];
      v206 = v204;
    }
    ++v204;
  }
  while (v204 != 128);
  v336 = v207;
  v209 = 0;
  v210 = 0.0;
  v211 = -1;
  do
  {
    if (*(float *)(v195 + 4 * v209) > v210)
    {
      v210 = *(float *)(v195 + 4 * v209);
      v211 = v209;
    }
    ++v209;
  }
  while (v209 != 128);
  v286 = v210;
  v293 = v91;
  v212 = 0;
  v213 = 0.0;
  v214 = -1;
  do
  {
    if (*(float *)(v196 + 4 * v212) > v213)
    {
      v213 = *(float *)(v196 + 4 * v212);
      v214 = v212;
    }
    ++v212;
  }
  while (v212 != 128);
  v342 = a1 + 59096;
  v314 = v93;
  v215 = 0;
  v216 = 0.0;
  v217 = -1;
  do
  {
    if (*(float *)(v345 + 4 * v215) > v216)
    {
      v216 = *(float *)(v345 + 4 * v215);
      v217 = v215;
    }
    ++v215;
  }
  while (v215 != 128);
  v218 = 0;
  v219 = 0.0;
  v220 = -1;
  do
  {
    if (*(float *)&v384[v218] > v219)
    {
      v219 = *(float *)&v384[v218];
      v220 = v218;
    }
    ++v218;
  }
  while (v218 != 128);
  v221 = 0;
  v222 = 0.0;
  do
  {
    if (*(float *)&v381[v221] > v222)
      v222 = *(float *)&v381[v221];
    ++v221;
  }
  while (v221 != 128);
  v223 = 0;
  v224 = 0.0;
  do
  {
    if (*(float *)&v380[v223] > v224)
      v224 = *(float *)&v380[v223];
    ++v223;
  }
  while (v223 != 128);
  v225 = 0;
  v226 = 0.0;
  do
  {
    if (*(float *)&v379[v225] > v226)
      v226 = *(float *)&v379[v225];
    ++v225;
  }
  while (v225 != 128);
  v227 = 0;
  v228 = 0.0;
  do
  {
    if (*(float *)&v378[v227] > v228)
      v228 = *(float *)&v378[v227];
    ++v227;
  }
  while (v227 != 128);
  v229 = 0;
  v230 = 0.0;
  do
  {
    if (*(float *)&v377[v229] > v230)
      v230 = *(float *)&v377[v229];
    ++v229;
  }
  while (v229 != 128);
  v231 = 0;
  v232 = 0.0;
  do
  {
    if (*(float *)&v376[v231] > v232)
      v232 = *(float *)&v376[v231];
    ++v231;
  }
  while (v231 != 128);
  v333 = sub_1011BE8A0((uint64_t)v380, 2.0, 0.25);
  v233 = sub_1011BE8A0((uint64_t)v377, 6.0, 2.0);
  v323 = sub_1011BE8A0((uint64_t)v376, 6.0, 1.0);
  v234 = 0;
  v235 = 0.0;
  v236 = -1;
  do
  {
    if (v374[v234 + 128] > v235)
    {
      v235 = v374[v234 + 128];
      v236 = v234;
    }
    ++v234;
  }
  while (v234 != 128);
  v330 = HIDWORD(v233);
  v327 = sub_1011BE8A0(v194, 2.0, 0.25);
  v309 = sub_1011BE8A0(v197, 2.0, 0.25);
  v319 = sub_1011BE8A0(a1 + 60632, 2.0, 0.5);
  v237 = 0;
  v238 = 0.0;
  v239 = -1;
  do
  {
    if (*(float *)(v197 + 4 * v237) > v238)
    {
      v238 = *(float *)(v197 + 4 * v237);
      v239 = v237;
    }
    ++v237;
  }
  while (v237 != 128);
  v339 = HIDWORD(v309);
  v324 = HIDWORD(v323);
  v284 = sub_1011BE8A0(v195, 2.0, 0.25);
  v304 = sub_1011BE8A0(v342, 4.0, 1.0);
  v282 = sub_1011BE8A0(v342, 6.0, 1.0);
  v300 = sub_1011BE8A0(v195, 6.0, 1.0);
  v310 = sub_1011BE8A0(v348, 2.0, 0.25);
  v296 = sub_1011BE8A0(v348, 6.0, 2.0);
  v280 = sub_1011BE8A0(v194, 6.0, 2.0);
  v240 = 0;
  v241 = 0.0;
  v242 = -1;
  do
  {
    if (*(float *)(v194 + 4 * v240) > v241)
    {
      v241 = *(float *)(v194 + 4 * v240);
      v242 = v240;
    }
    ++v240;
  }
  while (v240 != 128);
  v243 = 0;
  v297 = HIDWORD(v296);
  v301 = HIDWORD(v300);
  v244 = 0.0;
  v305 = HIDWORD(v304);
  v245 = -1;
  v320 = HIDWORD(v319);
  do
  {
    if (v375[v243] > v244)
    {
      v244 = v375[v243];
      v245 = v243;
    }
    ++v243;
  }
  while (v243 != 128);
  v311 = HIDWORD(v310);
  v277 = sub_1011BE8A0((uint64_t)v375, 4.0, 2.0);
  v279 = sub_1011BE8A0((uint64_t)v375, 4.0, 1.0);
  v278 = sub_1011BE8A0((uint64_t)v375, 6.0, 1.0);
  v276 = sub_1011BE8A0((uint64_t)v374, 2.0, 0.25);
  v275 = sub_1011BE8A0((uint64_t)v374, 2.0, 0.5);
  v274 = sub_1011BE8A0((uint64_t)v374, 6.0, 2.0);
  v246 = 0;
  v247 = 0.0;
  v248 = -1;
  do
  {
    if (*(float *)(v348 + 4 * v246) > v247)
    {
      v247 = *(float *)(v348 + 4 * v246);
      v248 = v246;
    }
    ++v246;
  }
  while (v246 != 128);
  v249 = *(float *)&dword_10230D388 * (float)v206;
  *(float *)(a1 + 28) = v205;
  *(float *)(a1 + 32) = v249;
  *(float *)(a1 + 36) = v336 * 0.0078125;
  *(float *)(a1 + 184) = v219;
  if (v222 <= v224)
    v250 = v224;
  else
    v250 = v222;
  if (v250 <= v226)
    v250 = v226;
  *(float *)(a1 + 192) = v250;
  *(_DWORD *)(a1 + 196) = v333;
  *(float *)(a1 + 200) = (float)(int)v330;
  *(float *)(a1 + 204) = (float)(int)v324;
  *(float *)(a1 + 208) = (float)v236;
  *(float *)(a1 + 216) = (float)SHIDWORD(v327);
  *(float *)(a1 + 220) = (float)(int)v339;
  v251 = sub_100D043B4(50, 0x80uLL, 0.4);
  v252 = sub_100D043B4(50, 0x80uLL, 4.3);
  v253 = (int)v251;
  v254 = (int)v252;
  v255 = 0.0;
  v256 = 0.0;
  if ((int)v251 < v254)
  {
    v257 = v254 - (uint64_t)v253;
    v258 = (float *)(a1 + 4 * v253 + 60120);
    do
    {
      v256 = (float)((float)(v256 + *v258) + v258[128]) + v258[256];
      ++v258;
      --v257;
    }
    while (v257);
  }
  *(float *)(a1 + 212) = v256;
  *(float *)(a1 + 224) = (float)(int)v320;
  *(float *)(a1 + 260) = (float)v211;
  *(float *)(a1 + 264) = v286;
  *(_DWORD *)(a1 + 268) = v284;
  *(float *)(a1 + 272) = (float)(int)v305;
  *(float *)(a1 + 276) = (float)SHIDWORD(v282);
  *(float *)(a1 + 280) = (float)(int)v311;
  *(float *)(a1 + 284) = (float)v242;
  *(float *)(a1 + 288) = (float)v245;
  *(float *)(a1 + 292) = (float)SHIDWORD(v277);
  *(_DWORD *)(a1 + 296) = v279;
  *(float *)(a1 + 304) = (float)SHIDWORD(v276);
  *(float *)(a1 + 308) = (float)SHIDWORD(v275);
  *(_DWORD *)(a1 + 300) = v278;
  *(float *)(a1 + 312) = (float)v248;
  *(float *)(a1 + 316) = (float)v220;
  *(float *)(a1 + 320) = (float)(v222 + v224) + v226;
  *(float *)(a1 + 324) = (float)(v228 + v230) + v232;
  *(float *)(a1 + 344) = (float)(int)v301;
  v259 = (float)v214;
  *(float *)(a1 + 360) = (float)v214;
  *(float *)(a1 + 364) = (float)(int)v297;
  *(float *)(a1 + 368) = (float)SHIDWORD(v280);
  *(float *)(a1 + 384) = (float)SHIDWORD(v274);
  *(float *)(a1 + 388) = (float)v239;
  v260 = (float)(v374[0] + 0.0) + v374[1];
  v261 = 2;
  *(float *)(a1 + 400) = v260;
  do
    v255 = v255 + v374[v261++];
  while (v261 != 15);
  *(float *)(a1 + 404) = v255;
  v262 = 0.0;
  for (k = 46; k != 128; ++k)
    v262 = v262 + v374[k];
  v264 = fabsf(v262);
  v265 = v260 / v262;
  if (v264 <= 0.0000011921)
    v265 = -1.0;
  *(float *)(a1 + 408) = v265;
  v266 = *(float *)(a1 + 372);
  if (v266 != 1.0)
    v259 = (float)v217;
  v267 = a1 + 59608;
  if (v266 == 1.0)
    v267 = a1 + 59096;
  v268 = v266 == 0.0;
  if (v266 == 0.0)
    v269 = (float)v211;
  else
    v269 = v259;
  if (v268)
    v270 = (uint64_t)&v272[192];
  else
    v270 = v267;
  *(float *)(a1 + 376) = v269;
  *(float *)(a1 + 380) = (float)(int)(sub_1011BE8A0(v270, 4.0, 2.0) >> 32);
  *(_QWORD *)v271 = 0;
  if (fabsf(v316) > 0.0000011921)
    *v271 = v290 / v316;
  if (v293 && fabsf(v314) > 0.0000011921)
    *(float *)(a1 + 416) = v307 / sqrtf(v314 / (float)v293);
  if (v350)
  {
    v351 = (char *)v350;
    operator delete(v350);
  }
  if (v353)
  {
    v354 = (char *)v353;
    operator delete(v353);
  }
  if (v356)
  {
    v357 = (char *)v356;
    operator delete(v356);
  }
  if (__p)
  {
    v360 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1011BC7C8(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)STACK[0x9E0];
  if (STACK[0x9E0])
  {
    STACK[0x9E8] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x9F8];
  if (STACK[0x9F8])
  {
    STACK[0xA00] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0xA10];
  if (STACK[0xA10])
  {
    STACK[0xA18] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0xA28];
  if (STACK[0xA28])
  {
    STACK[0xA30] = (unint64_t)v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_1011BC850(uint64_t a1)
{
  unint64_t v1;
  _DWORD *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int16 *v54;
  float *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  float *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t j;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  float v73;
  float v75;
  float v76;
  float v77;
  float v78;
  _WORD *v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[2200];
  _BYTE v92[512];
  _DWORD v93[128];
  _DWORD v94[128];
  _DWORD v95[128];
  _DWORD v96[128];
  unsigned __int16 v97[516];
  unsigned __int16 v98[516];
  unsigned __int16 v99[516];
  unsigned __int16 v100[516];
  _BYTE v101[512];
  _DWORD v102[128];
  _DWORD v103[128];
  _DWORD v104[128];
  _QWORD v105[129];
  _QWORD v106[129];
  _QWORD v107[129];

  sub_1014022D8(v91);
  v1 = 0;
  v79 = (_WORD *)(a1 + 13018);
  v107[0] = 0x10000000000;
  v106[0] = 0x10000000000;
  v105[0] = 0x10000000000;
  do
  {
    v2 = (_DWORD *)sub_100687A34((unsigned __int16 *)(a1 + 696), v1);
    v3 = WORD1(v107[0]);
    v4 = HIDWORD(v107[0]);
    v5 = LOWORD(v107[0]);
    if (LOWORD(v107[0]) + (unint64_t)WORD1(v107[0]) >= HIDWORD(v107[0]))
      v6 = HIDWORD(v107[0]);
    else
      v6 = 0;
    *((_DWORD *)&v107[1] + LOWORD(v107[0]) + (unint64_t)WORD1(v107[0]) - v6) = *v2;
    if (v4 <= v3)
    {
      if (v5 + 1 < v4)
        LOWORD(v4) = 0;
      LOWORD(v107[0]) = v5 + 1 - v4;
    }
    else
    {
      WORD1(v107[0]) = v3 + 1;
    }
    v7 = WORD1(v106[0]);
    v8 = HIDWORD(v106[0]);
    v9 = LOWORD(v106[0]);
    if (LOWORD(v106[0]) + (unint64_t)WORD1(v106[0]) >= HIDWORD(v106[0]))
      v10 = HIDWORD(v106[0]);
    else
      v10 = 0;
    *((_DWORD *)&v106[1] + LOWORD(v106[0]) + (unint64_t)WORD1(v106[0]) - v10) = v2[1];
    if (v8 <= v7)
    {
      if (v9 + 1 < v8)
        LOWORD(v8) = 0;
      LOWORD(v106[0]) = v9 + 1 - v8;
    }
    else
    {
      WORD1(v106[0]) = v7 + 1;
    }
    v11 = WORD1(v105[0]);
    v12 = HIDWORD(v105[0]);
    v13 = LOWORD(v105[0]);
    if (LOWORD(v105[0]) + (unint64_t)WORD1(v105[0]) >= HIDWORD(v105[0]))
      v14 = HIDWORD(v105[0]);
    else
      v14 = 0;
    *((_DWORD *)&v105[1] + LOWORD(v105[0]) + (unint64_t)WORD1(v105[0]) - v14) = v2[2];
    if (v12 <= v11)
    {
      if (v13 + 1 < v12)
        LOWORD(v12) = 0;
      LOWORD(v105[0]) = v13 + 1 - v12;
    }
    else
    {
      WORD1(v105[0]) = v11 + 1;
    }
    ++v1;
  }
  while (v1 != 256);
  sub_1011BE7AC(v104, (uint64_t)v91, (unsigned __int16 *)v107, 1);
  sub_1011BE7AC(v103, (uint64_t)v91, (unsigned __int16 *)v106, 1);
  sub_1011BE7AC(v102, (uint64_t)v91, (unsigned __int16 *)v105, 1);
  for (i = 0; i != 128; i += 4)
    *(float32x4_t *)&v101[i * 4] = vaddq_f32(vaddq_f32(*(float32x4_t *)&v104[i], *(float32x4_t *)&v103[i]), *(float32x4_t *)&v102[i]);
  if (!*(_WORD *)(a1 + 16098))
  {
    v37 = (float *)a1;
    *(_QWORD *)(a1 + 40) = 0xFF7FFFFFBF800000;
    v38 = 0.0;
    v39 = NAN;
    goto LABEL_57;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0.0;
  v19 = 3.4028e38;
  v20 = 1.1755e-38;
  v78 = 3.4028e38;
  v21 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  v77 = 1.1755e-38;
  v22 = 0.0;
  do
  {
    v23 = sub_100687A34((unsigned __int16 *)(a1 + 16096), v16);
    v24 = *(float *)v23;
    v25 = *(float *)(v23 + 4);
    v26 = asinf(*(float *)(v23 + 8)) * 57.296;
    v27 = v26 - v21;
    if ((float)(v26 - v21) <= 180.0)
    {
      if (v27 >= -180.0)
        goto LABEL_36;
      v28 = 360.0;
    }
    else
    {
      v28 = -360.0;
    }
    v27 = v27 + v28;
LABEL_36:
    v18 = v18 + v27;
    if (v19 > v18)
      v19 = v18;
    if (v20 < v18)
      v20 = v18;
    if (fabsf(v26) < 60.0)
    {
      v29 = atan2f(v25, v24) * 57.296;
      v30 = v29 - v75;
      if ((float)(v29 - v75) > 180.0)
      {
        v31 = -360.0;
        goto LABEL_45;
      }
      if (v30 < -180.0)
      {
        v31 = 360.0;
LABEL_45:
        v30 = v30 + v31;
      }
      v32 = v76 + v30;
      if (v78 <= (float)(v76 + v30))
        v33 = v78;
      else
        v33 = v76 + v30;
      v34 = v77;
      v75 = v29;
      v76 = v32;
      if (v77 < v32)
        v34 = v32;
      v77 = v34;
      v78 = v33;
      ++v17;
    }
    v22 = v22 + v26;
    ++v16;
    v35 = *(unsigned __int16 *)(a1 + 16098);
    v21 = v26;
  }
  while (v16 < v35);
  v36 = v77 - v78;
  if (v17 <= 0)
    v36 = -1.0;
  v37 = (float *)a1;
  *(float *)(a1 + 40) = v36;
  *(float *)(a1 + 44) = v20 - v19;
  v38 = v22 / (float)v16;
  v39 = (float)v17 / (float)v35;
LABEL_57:
  v37[12] = v38;
  v37[13] = 1.0 - v39;
  v89 = 0;
  v90 = 0;
  sub_1011BE90C((float *)&v89, (float *)&v90, v37 + 14, (uint64_t)v104);
  sub_1011BE90C((float *)&v90 + 1, (float *)&v90, (float *)&v89 + 1, (uint64_t)v103);
  sub_1011BE90C((float *)&v90 + 1, (float *)&v90, (float *)&v89 + 1, (uint64_t)v102);
  v88 = 0.0;
  *(float *)&v40 = sub_1011BE90C(&v88, (float *)&v90, (float *)&v89 + 1, (uint64_t)v101);
  sub_1011BE9D0((unsigned __int16 *)(a1 + 9936), v40);
  v45 = v44;
  *(_QWORD *)v100 = 0x10000000000;
  *(_QWORD *)v99 = 0x10000000000;
  *(_QWORD *)v98 = 0x10000000000;
  *(_QWORD *)v97 = 0x10000000000;
  if (*v79)
  {
    v46 = v41;
    v47 = v42;
    v48 = v43;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = (unsigned __int16 *)(a1 + 13016);
    do
    {
      v55 = (float *)sub_100687A34(v54, v53);
      v56 = v52 + (unsigned __int16)v51;
      if (v56 >= 0x100)
        v57 = -256;
      else
        v57 = 0;
      *(float *)&v100[2 * v57 + 4 + 2 * v56] = (float)((float)(v55[2] * 0.0) + (float)(v46 * v55[1]))
                                             + (float)(v45 * *v55);
      if (v52 > 0xFF)
      {
        if ((unsigned __int16)v51 >= 0xFFu)
          v58 = -256;
        else
          v58 = 0;
        v59 = v51 + v58;
        v51 = v59 + 1;
        v100[0] = v59 + 1;
      }
      else
      {
        v100[1] = ++v52;
      }
      v60 = (float *)sub_100687A34(v54, v53);
      v61 = v50 + (unsigned __int16)v49;
      if (v61 >= 0x100)
        v62 = -256;
      else
        v62 = 0;
      *(float *)&v99[2 * v62 + 4 + 2 * v61] = (float)((float)(v60[2] * 0.0) + (float)(v48 * v60[1]))
                                            + (float)(v47 * *v60);
      if (v50 > 0xFF)
      {
        if ((unsigned __int16)v49 >= 0xFFu)
          v63 = -256;
        else
          v63 = 0;
        v64 = v49 + v63;
        v49 = v64 + 1;
        v99[0] = v64 + 1;
      }
      else
      {
        v99[1] = ++v50;
      }
      v65 = sub_100687A34(v54, v53);
      sub_10087DBE8(v98, (_DWORD *)(v65 + 8));
      v66 = sub_100687A34((unsigned __int16 *)(a1 + 9936), v53);
      sub_10087DBE8(v97, (_DWORD *)(v66 + 8));
      ++v53;
    }
    while (v53 < (unsigned __int16)*v79);
  }
  sub_1011BE7AC(v96, (uint64_t)v91, v100, 1);
  sub_1011BE7AC(v95, (uint64_t)v91, v99, 1);
  sub_1011BE7AC(v94, (uint64_t)v91, v98, 1);
  sub_1011BE7AC(v93, (uint64_t)v91, v97, 1);
  sub_1011BE90C((float *)&v90 + 1, (float *)&v90, (float *)&v89 + 1, (uint64_t)v96);
  v87 = 0.0;
  v86 = 0;
  sub_1011BE90C(&v87, (float *)&v86 + 1, (float *)&v86, (uint64_t)v95);
  v85 = 0;
  v84 = 0;
  sub_1011BE90C((float *)&v85 + 1, (float *)&v85, (float *)&v84, (uint64_t)v96);
  v83 = 0.0;
  v82 = 0;
  sub_1011BE90C(&v83, (float *)&v82 + 1, (float *)&v82, (uint64_t)v94);
  sub_1011BE90C((float *)&v90 + 1, (float *)&v90, (float *)&v89 + 1, (uint64_t)v94);
  v81 = 0.0;
  sub_1011BE90C(&v81, (float *)&v90, (float *)&v89 + 1, (uint64_t)v93);
  for (j = 0; j != 128; j += 4)
    *(float32x4_t *)&v92[j * 4] = vaddq_f32(vaddq_f32(*(float32x4_t *)&v96[j], *(float32x4_t *)&v95[j]), *(float32x4_t *)&v94[j]);
  v80 = 0.0;
  sub_1011BE90C(&v80, (float *)&v90, (float *)&v89 + 1, (uint64_t)v92);
  *(_QWORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 500) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  v68 = v80;
  v70 = *((float *)&v86 + 1);
  v69 = v87;
  if (fabsf(v80) > 0.0000011921)
  {
    *(float *)(a1 + 60) = v88 / v80;
    *(float *)(a1 + 72) = v70 / v68;
    *(float *)(a1 + 468) = *((float *)&v82 + 1) / v68;
    *(float *)(a1 + 472) = *(float *)&v85 / v68;
    *(float *)(a1 + 504) = v69 / v68;
    *(float *)(a1 + 508) = v83 / v68;
    *(float *)(a1 + 500) = *((float *)&v85 + 1) / v68;
  }
  *(float *)(a1 + 452) = v68;
  if (fabsf(v69) > 0.0000011921)
  {
    *(float *)(a1 + 64) = *(float *)&v89 / v69;
    *(float *)(a1 + 68) = v70 / v69;
  }
  *(float *)(a1 + 456) = v69;
  *(float *)(a1 + 460) = v70;
  v72 = HIDWORD(v85);
  v71 = *(float *)&v86;
  *(_DWORD *)(a1 + 464) = v86;
  *(_DWORD *)(a1 + 476) = v72;
  *(_DWORD *)(a1 + 480) = v85;
  *(_DWORD *)(a1 + 484) = v84;
  *(float *)(a1 + 488) = v83;
  *(_DWORD *)(a1 + 492) = HIDWORD(v82);
  v73 = *(float *)(a1 + 56);
  *(_DWORD *)(a1 + 496) = v82;
  if (fabsf(v73) > 0.0000011921)
    *(float *)(a1 + 76) = v71 / v73;
  if (fabsf(v88) > 0.0000011921)
    *(float *)(a1 + 80) = v81 / v88;
}

uint64_t sub_1011BD138(uint64_t a1, double a2)
{
  unsigned __int16 *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t i;
  float *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  float *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t result;
  int v39;
  unsigned __int16 v41[32];
  unsigned __int16 v42[32];
  unsigned __int16 v43[32];
  _QWORD v44[257];
  _QWORD v45[257];
  _QWORD v46[257];

  v2 = (unsigned __int16 *)(a1 + 39880);
  sub_1011BE9D0((unsigned __int16 *)(a1 + 39880), a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v46[0] = 0x20000000000;
  v45[0] = 0x20000000000;
  v44[0] = 0x20000000000;
  sub_10087DA44(v43, &off_1021A5808);
  sub_10087DA44(v42, &off_1021A5808);
  sub_10087DA44(v41, &off_1021A5808);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  for (i = 0; i != 512; ++i)
  {
    v18 = (float *)sub_100687A34(v2, i);
    sub_10087DA48(v43, (float)((float)(v18[2] * 0.0) + (float)(v6 * v18[1])) + (float)(v4 * *v18));
    v20 = v16 + (unsigned __int16)v15;
    if (v20 >= 0x200)
      v21 = 0x7FFFFFFFFFFFFF00;
    else
      v21 = 0;
    *((_DWORD *)&v46[v21 + 1] + v20) = v19;
    if (v16 > 0x1FF)
    {
      if ((unsigned __int16)v15 >= 0x1FFu)
        v22 = -512;
      else
        v22 = 0;
      v23 = v15 + v22;
      v15 = v23 + 1;
      LOWORD(v46[0]) = v23 + 1;
    }
    else
    {
      WORD1(v46[0]) = ++v16;
    }
    v24 = (float *)sub_100687A34(v2, i);
    sub_10087DA48(v42, (float)((float)(v24[2] * 0.0) + (float)(v10 * v24[1])) + (float)(v8 * *v24));
    v26 = v14 + (unsigned __int16)v13;
    if (v26 >= 0x200)
      v27 = 0x7FFFFFFFFFFFFF00;
    else
      v27 = 0;
    *((_DWORD *)&v45[v27 + 1] + v26) = v25;
    if (v14 > 0x1FF)
    {
      if ((unsigned __int16)v13 >= 0x1FFu)
        v28 = -512;
      else
        v28 = 0;
      v29 = v13 + v28;
      v13 = v29 + 1;
      LOWORD(v45[0]) = v29 + 1;
    }
    else
    {
      WORD1(v45[0]) = ++v14;
    }
    v30 = sub_100687A34(v2, i);
    sub_10087DA48(v41, *(float *)(v30 + 8));
    v32 = v12 + (unsigned __int16)v11;
    if (v32 >= 0x200)
      v33 = 0x7FFFFFFFFFFFFF00;
    else
      v33 = 0;
    *((_DWORD *)&v44[v33 + 1] + v32) = v31;
    if (v12 > 0x1FF)
    {
      if ((unsigned __int16)v11 >= 0x1FFu)
        v34 = -512;
      else
        v34 = 0;
      v35 = v11 + v34;
      v11 = v35 + 1;
      LOWORD(v44[0]) = v35 + 1;
    }
    else
    {
      WORD1(v44[0]) = ++v12;
    }
  }
  sub_1011BEB24((uint64_t)v46, 0, 0.0);
  *(_DWORD *)(a1 + 420) = v36;
  sub_1011BEB24((uint64_t)v45, 0, 0.0);
  *(_DWORD *)(a1 + 424) = v37;
  result = sub_1011BEB24((uint64_t)v44, 0, 0.0);
  *(_DWORD *)(a1 + 428) = v39;
  return result;
}

void sub_1011BD418(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  double v31;
  float32x4_t v32;
  unint64_t i;
  float v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  unsigned __int16 *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  unsigned __int16 v70;
  unint64_t v71;
  float v72;
  unint64_t v73;
  uint64_t v74;
  __int16 v75;
  float v76;
  unint64_t v77;
  uint64_t v78;
  __int16 v79;
  float v80;
  unint64_t v81;
  uint64_t v82;
  __int16 v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  double v105;
  float v106;
  float v107;
  float v108;
  __float2 v109;
  unint64_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  float *v119;
  float v120;
  float v121;
  float v122;
  float *v123;
  float *v124;
  float *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  float *v131;
  int v132;
  float *v133;
  float *v134;
  float *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  float *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  double v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  void *v154;
  char *v155;
  char *v156;
  void *v157;
  float *v158;
  float *v159;
  void *v160;
  float *v161;
  char *v162;
  _DWORD v163[3];
  unsigned __int16 v164[48];
  float v165;
  _QWORD v166[257];
  _QWORD v167[257];
  _QWORD v168[257];
  void *__p;
  char *v170;
  _QWORD v171[255];
  _QWORD v172[257];
  _QWORD v173[257];

  v2 = (char *)operator new(8uLL);
  *(_QWORD *)v2 = a1 + 21424;
  v171[0] = v2 + 8;
  __p = v2;
  v170 = v2 + 8;
  v4 = (char *)sub_10025E6A0((uint64_t)v171, 2uLL);
  *((_QWORD *)v4 + 1) = a1 + 27576;
  v5 = v4 + 8;
  v6 = &v4[8 * v3];
  v7 = v4 + 16;
  v8 = (char *)__p;
  v9 = v170;
  if (v170 != __p)
  {
    do
    {
      v10 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      *((_QWORD *)v5 - 1) = v10;
      v5 -= 8;
    }
    while (v9 != v8);
    v8 = (char *)__p;
  }
  __p = v5;
  v170 = v4 + 16;
  v171[0] = &v4[8 * v3];
  if (v8)
  {
    operator delete(v8);
    v6 = (char *)v171[0];
  }
  v11 = a1 + 33728;
  v170 = v4 + 16;
  if (v7 >= v6)
  {
    v13 = (v7 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_100259694();
    v14 = v6 - (_BYTE *)__p;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)sub_10025E6A0((uint64_t)v171, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = v11;
    v12 = v18 + 8;
    v20 = v170;
    v21 = (char *)__p;
    if (v170 != __p)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)__p;
    }
    __p = v18;
    v170 = v12;
    v171[0] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *((_QWORD *)v4 + 2) = v11;
    v12 = v4 + 24;
  }
  v143 = a1;
  v170 = v12;
  bzero(v164, 0x800uLL);
  if (v12 == __p)
  {
    v34 = 0.0;
  }
  else
  {
    v23 = 0;
    v12 = (char *)__p;
    do
    {
      v24 = 0;
      v25 = *(unsigned __int16 **)&v12[8 * v23];
      do
      {
        v26 = 0;
        v27 = 0.0;
        do
        {
          v28 = sub_100687A34(v25, v26);
          v29 = sub_100533668(v28, v24);
          *((float *)v173 + v26) = v29;
          v27 = v27 + v29;
          ++v26;
        }
        while (v26 != 512);
        v30 = 0;
        v31 = v27 * 0.001953125;
        *(float *)&v31 = v27 * 0.001953125;
        v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v31, 0);
        do
        {
          *(float32x4_t *)&v173[v30] = vsubq_f32(*(float32x4_t *)&v173[v30], v32);
          v30 += 2;
        }
        while (v30 != 256);
        sub_1011A2B90((uint64_t)v173, (float *)v172, 512, 1);
        for (i = 0; i != 2048; i += 16)
          *(float32x4_t *)&v164[i / 2] = vaddq_f32(*(float32x4_t *)&v172[i / 8], *(float32x4_t *)&v164[i / 2]);
        ++v24;
      }
      while (v24 != 3);
      ++v23;
      v12 = (char *)__p;
    }
    while (v23 < (v170 - (_BYTE *)__p) >> 3);
    v34 = v165;
  }
  v35 = 0;
  v36 = 0;
  v37 = 1.1755e-38;
  do
  {
    v38 = v34;
    v39 = (float *)&v164[2 * v35];
    v34 = v39[25];
    if (v34 > v38 && v34 >= v39[26] && v34 > v37)
    {
      v36 = v35 + 25;
      v37 = v39[25];
    }
    ++v35;
  }
  while (v35 != 486);
  v40 = v37 / 9.0;
  if (v12)
  {
    v170 = v12;
    operator delete(v12);
  }
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v143 + 432) = _D0;
  *(_DWORD *)(v143 + 440) = -1082130432;
  *(float *)(v143 + 444) = v40;
  *(float *)(v143 + 448) = (float)v36 / 100.0;
  if (v36 && v40 > 0.1)
  {
    v46 = (unsigned __int16 *)(v143 + 39880);
    v47 = *(unsigned __int16 *)(v143 + 39882);
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v48 = v47 / v36 * v36;
    if (v48)
    {
      v49 = 0;
      v50 = 0.0;
      v51 = 0.0;
      v52 = 0.0;
      do
      {
        v53 = *(float *)sub_100687A34(v46, v49);
        v54 = *(float *)(sub_100687A34(v46, v49) + 4);
        v55 = sub_100687A34(v46, v49);
        v52 = v52 + v53;
        ++v49;
        v51 = v51 + v54;
        v50 = v50 + *(float *)(v55 + 8);
      }
      while (v48 != v49);
    }
    else
    {
      v52 = 0.0;
      v51 = 0.0;
      v50 = 0.0;
    }
    if (v36 <= v47)
    {
      v56 = 0;
      v57 = v51 / (float)v48;
      v58 = (float)(v36 - 1);
      v59 = 0.01 * v58;
      if (v48)
        v60 = v52 / (float)v48;
      else
        v60 = 0.0;
      if (v48)
        v61 = v57;
      else
        v61 = 0.0;
      if (v48)
        v62 = v50 / (float)v48;
      else
        v62 = 0.0;
      if (v47 / v36 <= 1)
        v63 = 1;
      else
        v63 = v47 / v36;
      v147 = v60;
      v148 = 0.01 * v58;
      v145 = v62;
      v146 = v61;
      v144 = v63;
      do
      {
        *(_QWORD *)v164 = 0x20000000000;
        v173[0] = 0x20000000000;
        v172[0] = 0x20000000000;
        __p = (void *)0x20000000000;
        v64 = v36 * v56++;
        if (v64 >= v36 * v56)
        {
          v70 = 0;
          v69 = 0;
          v68 = 0;
        }
        else
        {
          v153 = v56;
          v65 = 0;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = v36;
          do
          {
            v72 = *(float *)sub_100687A34(v46, v64) - v60;
            v73 = v67 + v68;
            v74 = 0x7FFFFFFFFFFFFF00;
            if (v73 < 0x200)
              v74 = 0;
            *((float *)&v173[v74 + 1] + v73) = v72;
            if (v67 > 0x1FF)
            {
              if (v68 >= 0x1FFu)
                v75 = -512;
              else
                v75 = 0;
              v68 += v75 + 1;
            }
            else
            {
              ++v67;
            }
            v76 = *(float *)(sub_100687A34(v46, v64) + 4) - v61;
            v77 = v66 + v69;
            v78 = 0x7FFFFFFFFFFFFF00;
            if (v77 < 0x200)
              v78 = 0;
            *((float *)&v172[v78 + 1] + v77) = v76;
            if (v66 > 0x1FF)
            {
              if (v69 >= 0x1FFu)
                v79 = -512;
              else
                v79 = 0;
              v69 += v79 + 1;
            }
            else
            {
              ++v66;
            }
            v80 = *(float *)(sub_100687A34(v46, v64) + 8) - v62;
            v81 = v65 + v70;
            v82 = 0x7FFFFFFFFFFFFF00;
            if (v81 < 0x200)
              v82 = 0;
            *((float *)&v171[v82 - 1] + v81) = v80;
            if (v65 > 0x1FF)
            {
              if (v70 >= 0x1FFu)
                v83 = -512;
              else
                v83 = 0;
              v70 += v83 + 1;
            }
            else
            {
              ++v65;
            }
            ++v64;
            --v71;
          }
          while (v71);
          WORD1(v173[0]) = v67;
          WORD1(v172[0]) = v66;
          WORD1(__p) = v65;
          v56 = v153;
          v63 = v144;
        }
        LOWORD(v173[0]) = v68;
        LOWORD(v172[0]) = v69;
        LOWORD(__p) = v70;
        v168[0] = 0x20000000000;
        v167[0] = 0x20000000000;
        v166[0] = 0x20000000000;
        sub_1011BEB24((uint64_t)v173, (unsigned __int16 *)v168, 0.0);
        v84 = LOWORD(v168[0]) + (unint64_t)WORD1(v168[0]) - 1;
        v85 = HIDWORD(v168[0]);
        if (v84 < HIDWORD(v168[0]))
          v85 = 0;
        sub_1011BEB24((uint64_t)v173, (unsigned __int16 *)v168, (float)-*((float *)&v168[1] + v84 - v85) / v59);
        sub_1011BEB24((uint64_t)v172, (unsigned __int16 *)v167, 0.0);
        v86 = LOWORD(v167[0]) + (unint64_t)WORD1(v167[0]) - 1;
        v87 = HIDWORD(v167[0]);
        if (v86 < HIDWORD(v167[0]))
          v87 = 0;
        sub_1011BEB24((uint64_t)v172, (unsigned __int16 *)v167, (float)-*((float *)&v167[1] + v86 - v87) / v59);
        sub_1011BEB24((uint64_t)&__p, (unsigned __int16 *)v166, 0.0);
        v88 = LOWORD(v166[0]) + (unint64_t)WORD1(v166[0]) - 1;
        v89 = HIDWORD(v166[0]);
        if (v88 < HIDWORD(v166[0]))
          v89 = 0;
        sub_1011BEB24((uint64_t)&__p, 0, (float)-*((float *)&v166[1] + v88 - v89) / v59);
        v91 = v90;
        v92 = v155;
        if (v155 >= v156)
        {
          v94 = (char *)v154;
          v95 = (v155 - (_BYTE *)v154) >> 2;
          v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 62)
            sub_100259694();
          v97 = v156 - (_BYTE *)v154;
          if ((v156 - (_BYTE *)v154) >> 1 > v96)
            v96 = v97 >> 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
            v98 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v98 = v96;
          if (v98)
          {
            v99 = (char *)sub_100260634((uint64_t)&v156, v98);
            v94 = (char *)v154;
            v92 = v155;
          }
          else
          {
            v99 = 0;
          }
          v100 = &v99[4 * v95];
          *(_DWORD *)v100 = v91;
          v93 = v100 + 4;
          while (v92 != v94)
          {
            v101 = *((_DWORD *)v92 - 1);
            v92 -= 4;
            *((_DWORD *)v100 - 1) = v101;
            v100 -= 4;
          }
          v154 = v100;
          v155 = v93;
          v156 = &v99[4 * v98];
          if (v94)
            operator delete(v94);
        }
        else
        {
          *(_DWORD *)v155 = v90;
          v93 = v92 + 4;
        }
        v102 = 0;
        v155 = v93;
        do
        {
          v103 = *(_DWORD *)sub_1004784C4((unsigned __int16 *)v168, v102);
          v104 = *(_DWORD *)sub_1004784C4((unsigned __int16 *)v167, v102);
          v163[0] = v103;
          v163[1] = v104;
          v163[2] = 0;
          sub_100687774(v164, (uint64_t)v163);
          ++v102;
        }
        while (v36 != v102);
        v105 = 0.0;
        v106 = 0.0;
        v107 = 3.4028e38;
        v108 = 0.0;
        do
        {
          v149 = v105;
          v150 = v106;
          v151 = v107;
          v109 = __sincosf_stret(v108);
          v110 = 0;
          v152 = -v109.__sinval;
          v111 = 3.4028e38;
          v112 = 1.1755e-38;
          v113 = 1.1755e-38;
          v114 = 3.4028e38;
          do
          {
            v115 = (float *)sub_100687A34(v164, v110);
            v117 = *v115;
            v116 = v115[1];
            v118 = v115[2];
            v119 = (float *)sub_100687A34(v164, v110);
            v120 = (float)((float)(v118 * 0.0) + (float)(v152 * v116)) + (float)(v109.__cosval * v117);
            if (v112 < v120)
              v112 = (float)((float)(v118 * 0.0) + (float)(v152 * v116)) + (float)(v109.__cosval * v117);
            if (v111 > v120)
              v111 = (float)((float)(v118 * 0.0) + (float)(v152 * v116)) + (float)(v109.__cosval * v117);
            v121 = (float)(v119[2] * 0.0) + (float)(v109.__cosval * v119[1]);
            v122 = v121 + (float)(v109.__sinval * *v119);
            if (v114 > v122)
              v114 = v121 + (float)(v109.__sinval * *v119);
            if (v113 < v122)
              v113 = v121 + (float)(v109.__sinval * *v119);
            ++v110;
          }
          while (v36 != v110);
          v106 = v150;
          v107 = v151;
          if ((float)(v113 - v114) < v151)
          {
            v106 = v112 - v111;
            v107 = v113 - v114;
          }
          v108 = v149 + 0.0523598776;
          v105 = v108;
        }
        while (v108 < 3.14159265);
        v123 = v161;
        if (v161 >= (float *)v162)
        {
          v125 = (float *)v160;
          v126 = ((char *)v161 - (_BYTE *)v160) >> 2;
          v127 = v126 + 1;
          v60 = v147;
          v59 = v148;
          v62 = v145;
          v61 = v146;
          if ((unint64_t)(v126 + 1) >> 62)
            goto LABEL_171;
          v128 = v162 - (_BYTE *)v160;
          if ((v162 - (_BYTE *)v160) >> 1 > v127)
            v127 = v128 >> 1;
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
            v129 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v129 = v127;
          if (v129)
          {
            v130 = (char *)sub_100260634((uint64_t)&v162, v129);
            v125 = (float *)v160;
            v123 = v161;
          }
          else
          {
            v130 = 0;
          }
          v131 = (float *)&v130[4 * v126];
          *v131 = v106;
          v124 = v131 + 1;
          while (v123 != v125)
          {
            v132 = *((_DWORD *)v123-- - 1);
            *((_DWORD *)v131-- - 1) = v132;
          }
          v160 = v131;
          v161 = v124;
          v162 = &v130[4 * v129];
          if (v125)
            operator delete(v125);
        }
        else
        {
          *v161 = v106;
          v124 = v123 + 1;
          v60 = v147;
          v59 = v148;
          v62 = v145;
          v61 = v146;
        }
        v161 = v124;
        v133 = v158;
        if (v158 >= v159)
        {
          v135 = (float *)v157;
          v136 = ((char *)v158 - (_BYTE *)v157) >> 2;
          v137 = v136 + 1;
          if ((unint64_t)(v136 + 1) >> 62)
LABEL_171:
            sub_100259694();
          v138 = (char *)v159 - (_BYTE *)v157;
          if (((char *)v159 - (_BYTE *)v157) >> 1 > v137)
            v137 = v138 >> 1;
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
            v139 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v139 = v137;
          if (v139)
          {
            v140 = (char *)sub_100260634((uint64_t)&v159, v139);
            v135 = (float *)v157;
            v133 = v158;
          }
          else
          {
            v140 = 0;
          }
          v141 = (float *)&v140[4 * v136];
          *v141 = v107;
          v134 = v141 + 1;
          while (v133 != v135)
          {
            v142 = *((_DWORD *)v133-- - 1);
            *((_DWORD *)v141-- - 1) = v142;
          }
          v157 = v141;
          v158 = v134;
          v159 = (float *)&v140[4 * v139];
          if (v135)
            operator delete(v135);
        }
        else
        {
          *v158 = v107;
          v134 = v133 + 1;
        }
        v158 = v134;
      }
      while (v56 != v63);
    }
    *(float *)(v143 + 432) = sub_1011BEC94((uint64_t)&v160);
    *(float *)(v143 + 436) = sub_1011BEC94((uint64_t)&v157);
    *(float *)(v143 + 440) = sub_1011BEC94((uint64_t)&v154);
    if (v154)
    {
      v155 = (char *)v154;
      operator delete(v154);
    }
    if (v157)
    {
      v158 = (float *)v157;
      operator delete(v157);
    }
    if (v160)
    {
      v161 = (float *)v160;
      operator delete(v160);
    }
  }
}

void sub_1011BE008(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x3118];
  if (STACK[0x3118])
  {
    STACK[0x3120] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1011BE08C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;
  int v18;
  int v19;
  _BYTE v20[2200];
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD v24[4];
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  _DWORD v36[128];
  _DWORD v37[128];
  _DWORD v38[128];

  v2 = a1 + 48140;
  v3 = a1 + 47092;
  v4 = a1 + 46044;
  v5 = a1 + 564;
  v33 = 0uLL;
  v35 = 0;
  v34 = 0;
  v6 = a1 + 46032;
  sub_101104BAC(a1 + 46032, 1, (uint64_t)&v33);
  sub_101105208((unsigned __int16 *)(a1 + 49192), &v25, (uint64_t)v24, (uint64_t)&v21);
  sub_1014022D8(v20);
  sub_1014022DC((uint64_t)v20, v38, (unsigned __int16 *)(a1 + 46060));
  sub_1014022DC((uint64_t)v20, v37, (unsigned __int16 *)(a1 + 47108));
  sub_1014022DC((uint64_t)v20, v36, (unsigned __int16 *)(a1 + 48156));
  v7 = sub_100D04600(1, 11, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36);
  v8 = sub_100D04600(49, 127, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36);
  *(_QWORD *)(a1 + 512) = v25;
  v9 = HIDWORD(v25);
  *(float *)(a1 + 520) = (float)SDWORD2(v25);
  *(_DWORD *)(a1 + 524) = v9;
  v10 = v27;
  *(float *)(a1 + 528) = (float)v26;
  v11 = v29;
  *(_DWORD *)(a1 + 532) = v31;
  *(_DWORD *)(a1 + 536) = v10;
  *(_DWORD *)(a1 + 540) = v32;
  *(_OWORD *)(a1 + 544) = v28;
  *(_DWORD *)(a1 + 560) = v11;
  *(_QWORD *)&v12 = v30;
  *((_QWORD *)&v12 + 1) = v24[0];
  *(_OWORD *)v5 = v12;
  *(_DWORD *)(a1 + 580) = v24[1];
  *(_QWORD *)&v12 = *(_QWORD *)((char *)&v24[1] + 4);
  v13 = v21;
  *((_QWORD *)&v12 + 1) = v21;
  *(_OWORD *)(v5 + 20) = v12;
  *(_DWORD *)(a1 + 600) = v22;
  *(_QWORD *)&v12 = v23;
  *((_QWORD *)&v12 + 1) = v33;
  *(_OWORD *)(v5 + 40) = v12;
  *(_QWORD *)(v5 + 56) = *((_QWORD *)&v33 + 1);
  v14 = HIDWORD(v34);
  *(_DWORD *)(a1 + 628) = v34;
  *(float *)(a1 + 632) = v7;
  *(float *)(a1 + 636) = v8;
  *(_DWORD *)(a1 + 640) = v13;
  *(_DWORD *)(a1 + 644) = v35;
  *(_DWORD *)(a1 + 648) = v11;
  *(_DWORD *)(a1 + 652) = v14;
  *(float *)(a1 + 656) = sub_1011BE314(a1);
  if (*(_BYTE *)v4)
    sub_1004786E8(v4);
  v15 = *(float *)(v4 + 4);
  if (*(_BYTE *)v3)
    sub_1004786E8(v3);
  v16 = *(float *)(v3 + 4);
  if (*(_BYTE *)v2)
    sub_1004786E8(v2);
  *(float *)(a1 + 660) = -atan2f(v15, sqrtf((float)(v16 * v16) + (float)(*(float *)(v2 + 4) * *(float *)(v2 + 4))));
  *(float *)(a1 + 664) = sub_1011FD548(v6);
  *(_DWORD *)(a1 + 668) = v17;
  *(_DWORD *)(a1 + 672) = v18;
  *(_DWORD *)(a1 + 676) = v19;
}

float sub_1011BE314(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  float v3;
  unint64_t i;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  float *v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  _DWORD v16[3];
  _BYTE v17[12];

  v1 = (unsigned __int16 *)(a1 + 52352);
  v2 = a1 + 21040;
  v3 = 0.0;
  for (i = 192; i != 256; ++i)
  {
    v5 = 0;
    v6 = v2;
    do
    {
      v16[0] = sub_101105B08(v1, i);
      v16[1] = v7;
      v16[2] = v8;
      v9 = (float *)sub_100534E68((uint64_t)v16, v5);
      sub_10087DA48((unsigned __int16 *)v6, *v9);
      sub_10087DA48((unsigned __int16 *)(v6 + 192), v10);
      v11 = *(_DWORD *)(v6 + 200);
      *(_DWORD *)sub_100534E68((uint64_t)v17, v5++) = v11;
      v6 += 64;
    }
    while (v5 != 3);
    v12 = 0;
    v13 = 0.0;
    do
    {
      v13 = v13 + (float)(*(float *)&v17[v12] * *(float *)&v17[v12]);
      v12 += 4;
    }
    while (v12 != 12);
    v14 = sqrtf(v13);
    v3 = v3 + (float)(v14 * v14);
  }
  return v3;
}

unsigned __int16 *sub_1011BE410(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned __int16 *v4;
  unint64_t i;
  float v6;
  unint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  *(_DWORD *)a2 = 0;
  v4 = a2 + 4;
  for (i = 1; i != 256; i = v7 + 2)
  {
    v6 = *(float *)sub_1004784C4(a1, i);
    v7 = i - 1;
    v8 = v6 - *(float *)sub_1004784C4(a1, v7);
    v9 = a2[1];
    v10 = *((unsigned int *)a2 + 1);
    v11 = *a2;
    if (v11 + v9 >= v10)
      v12 = *((unsigned int *)a2 + 1);
    else
      v12 = 0;
    *(float *)&v4[2 * (v11 + v9 - v12)] = v8;
    if (v10 <= v9)
    {
      if (++v11 >= v10)
        v13 = v10;
      else
        v13 = 0;
      LOWORD(v11) = v11 - v13;
      *a2 = v11;
    }
    else
    {
      LOWORD(v9) = v9 + 1;
      a2[1] = v9;
    }
  }
  v14 = (unsigned __int16)v11 + (unint64_t)(unsigned __int16)v9 - 1;
  if (v14 < v10)
    v10 = 0;
  return sub_10087DBE8(a2, &v4[2 * (v14 - v10)]);
}

void sub_1011BE4E8(float **a1, int a2)
{
  float *v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v9;
  float v10;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    if (a2)
    {
      v4 = 0.0;
      v5 = *a1;
      do
      {
        v6 = *v5++;
        v4 = v4 + v6;
      }
      while (v5 != v3);
      v7 = v4 / (float)(unint64_t)(v3 - *a1);
    }
    else
    {
      v7 = sub_100B4EDE0((uint64_t)a1);
      v2 = *a1;
      v3 = a1[1];
    }
    v9 = 0.0;
    while (v2 != v3)
    {
      v10 = *v2++;
      v9 = v9 + vabds_f32(v7, v10);
    }
  }
}

uint64_t sub_1011BE574(unsigned __int16 *a1, float a2)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;

  if (a1[1] < 2u)
    return 0;
  LODWORD(v4) = 0;
  v5 = 1;
  do
  {
    v6 = *(float *)sub_1004784C4(a1, v5 - 1) <= a2;
    v4 = v4 + (v6 ^ (*(float *)sub_1004784C4(a1, v5++) <= a2));
  }
  while (v5 < a1[1]);
  return v4;
}

uint64_t sub_1011BE60C(uint64_t result)
{
  uint64_t v1;
  unsigned __int16 *v2;
  unint64_t v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v1 = *(unsigned __int16 *)(result + 2);
  if (*(_WORD *)(result + 2))
  {
    v2 = (unsigned __int16 *)result;
    v3 = 0;
    v4 = 0.0;
    do
      v4 = v4 + *(float *)sub_1004784C4(v2, v3++);
    while (v1 != v3);
    v5 = 0;
    v6 = v4 / (float)v1;
    v7 = 0.0;
    v8 = 0.0;
    do
    {
      result = sub_1004784C4(v2, v5);
      v9 = (float)(*(float *)result - v6) * (float)(*(float *)result - v6);
      v7 = v7 + v9;
      v8 = v8 + (float)(v9 * v9);
      ++v5;
    }
    while (v1 != v5);
  }
  return result;
}

uint64_t sub_1011BE6E0(uint64_t result)
{
  uint64_t v1;
  unsigned __int16 *v2;
  unint64_t v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v1 = *(unsigned __int16 *)(result + 2);
  if (*(_WORD *)(result + 2))
  {
    v2 = (unsigned __int16 *)result;
    v3 = 0;
    v4 = 0.0;
    do
      v4 = v4 + *(float *)sub_1004784C4(v2, v3++);
    while (v1 != v3);
    v5 = 0;
    v6 = v4 / (float)v1;
    v7 = 0.0;
    v8 = 0.0;
    do
    {
      result = sub_1004784C4(v2, v5);
      v9 = *(float *)result - v6;
      v7 = v7 + (float)(v9 * v9);
      v8 = v8 + (float)((float)(v9 * v9) * v9);
      ++v5;
    }
    while (v1 != v5);
  }
  return result;
}

void sub_1011BE7AC(_DWORD *a1, uint64_t a2, unsigned __int16 *a3, int a4)
{
  uint64_t v6;
  unsigned __int16 v7[516];
  float v8[256];

  if (a4)
  {
    sub_1011A2B90((uint64_t)(a3 + 4), v8, 256, 0);
    v6 = 0;
    *(_QWORD *)v7 = 0x10000000000;
    do
      sub_10087DBE8(v7, &v8[v6++]);
    while (v6 != 256);
    sub_1014022DC(a2, a1, v7);
  }
  else
  {
    sub_1014022DC(a2, a1, a3);
  }
}

unint64_t sub_1011BE8A0(uint64_t a1, float a2, float a3)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  BOOL v12;
  unint64_t v13;

  v3 = 0;
  v4 = 0.0;
  v5 = 0.0;
  v6 = -1;
  do
  {
    v7 = *(float *)(a1 + 4 * v3);
    v5 = v5 + v7;
    if (v7 > v4)
    {
      v4 = *(float *)(a1 + 4 * v3);
      v6 = v3;
    }
    ++v3;
  }
  while (v3 != 128);
  v8 = v5 * 0.0078125;
  v9 = v4 / v8;
  v10 = v8 == 0.0;
  v11 = 0.0;
  if (!v10)
    v11 = v9;
  v12 = v4 <= a3 || v11 <= a2;
  v13 = LODWORD(v4) | ((unint64_t)(int)(float)v6 << 32);
  if (v12)
    return 0xFFFFFFFF00000000;
  else
    return v13;
}

float sub_1011BE90C(float *a1, float *a2, float *a3, uint64_t a4)
{
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  float result;

  *a1 = 0.0;
  *a2 = 0.0;
  v8 = sub_100D043B4(50, 0x80uLL, 0.25);
  v9 = sub_100D041E0(v8);
  v10 = sub_100D043B4(50, 0x80uLL, 10.0);
  v11 = sub_100D041E0(v10);
  if (v9 < v11)
  {
    v12 = (int)v9;
    do
    {
      v13 = *(float *)(a4 + 4 * v12);
      *a1 = v13 + *a1;
      if (v13 > *a2)
      {
        *a3 = (float)v12;
        *a2 = v13;
      }
      ++v12;
    }
    while (v12 < (int)v11);
  }
  result = *(float *)&dword_10230D388 * *a3;
  *a3 = result;
  return result;
}

float *sub_1011BE9D0(unsigned __int16 *a1, double a2)
{
  uint64_t v3;
  unint64_t v4;
  float32x2_t v5;
  unint64_t v6;
  float32x2_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v17;
  int v18;
  int v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a1[1];
  if (a1[1])
  {
    v4 = 0;
    v5 = 0;
    do
    {
      a2 = *(double *)sub_100687A34(a1, v4);
      v5 = vadd_f32(v5, *(float32x2_t *)&a2);
      ++v4;
    }
    while (v3 != v4);
  }
  else
  {
    v5 = 0;
  }
  v21 = 0;
  v22 = 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    *(float *)&a2 = (float)v3;
    v7 = vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
    do
    {
      v20 = vsub_f32(*(float32x2_t *)sub_100687A34(a1, v6), v7);
      v8 = 0;
      LODWORD(v17) = sub_1011BED3C((uint64_t)&v20);
      HIDWORD(v17) = v9;
      v18 = v10;
      v19 = v11;
      do
      {
        *((float *)&v21 + v8) = sub_100751518((uint64_t)&v17, v8) + *((float *)&v21 + v8);
        ++v8;
      }
      while (v8 != 4);
      ++v6;
    }
    while (v6 != v3);
    v13 = *((float *)&v21 + 1);
    v12 = *(float *)&v21;
    v15 = *((float *)&v22 + 1);
    v14 = *(float *)&v22;
  }
  else
  {
    v15 = 0.0;
    v14 = 0.0;
    v13 = 0.0;
    v12 = 0.0;
  }
  return sub_1011BEE3C(&v17, v12, v13, v14, v15);
}

uint64_t sub_1011BEB24(uint64_t result, unsigned __int16 *a2, float a3)
{
  unsigned __int16 *v4;
  int v5;
  float v6;
  float v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (unsigned __int16 *)result;
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    v5 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 2) = 0;
    if (v5)
      a2[1] = 1;
    else
      *a2 = 1;
  }
  if (*(unsigned __int16 *)(result + 2) >= 2u)
  {
    v6 = 0.0;
    v7 = 1.1755e-38;
    v8 = 3.4028e38;
    v9 = 1;
    do
    {
      v10 = a3;
      v11 = *(float *)sub_1004784C4(v4, v9 - 1);
      result = sub_1004784C4(v4, v9);
      a3 = v10 + (float)((float)((float)(0.01 * 9.81) * 0.5) * (float)(v11 + *(float *)result));
      v6 = v6 + (float)((float)(0.01 * 0.5) * (float)(v10 + a3));
      if (v8 > v6)
        v8 = v6;
      if (v7 < v6)
        v7 = v6;
      if (a2)
      {
        v12 = a2[1];
        v13 = *((unsigned int *)a2 + 1);
        v14 = *a2;
        if (v14 + v12 >= v13)
          v15 = *((unsigned int *)a2 + 1);
        else
          v15 = 0;
        *(float *)&a2[2 * (v14 + v12 - v15) + 4] = v6;
        if (v13 <= v12)
        {
          if (v14 + 1 < v13)
            LOWORD(v13) = 0;
          *a2 = v14 + 1 - v13;
        }
        else
        {
          a2[1] = v12 + 1;
        }
      }
      ++v9;
    }
    while (v9 < v4[1]);
  }
  return result;
}

float sub_1011BEC94(uint64_t a1)
{
  unint64_t v1;
  float v2;
  float *v4;
  float *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_10027205C(&v4, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  std::__sort<std::__less<float,float> &,float *>(v4, v5, &v7);
  v1 = (unint64_t)(v5 - v4) >> 1;
  if ((((_DWORD)v5 - (_DWORD)v4) & 4) != 0)
    v2 = v4[v1];
  else
    v2 = (float)(v4[v1 - 1] + v4[v1]) * 0.5;
  v5 = v4;
  operator delete(v4);
  return v2;
}

void sub_1011BED20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_1011BED3C(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;

  v2 = sub_10075078C(a1, 0);
  v3 = v2 * sub_10075078C(a1, 0);
  *(float *)sub_100749250((uint64_t)&v11, 0, 0) = v3;
  v4 = sub_10075078C(a1, 0);
  v5 = v4 * sub_10075078C(a1, 1uLL);
  *(float *)sub_100749250((uint64_t)&v11, 0, 1uLL) = v5;
  v6 = sub_10075078C(a1, 1uLL);
  v7 = v6 * sub_10075078C(a1, 0);
  *(float *)sub_100749250((uint64_t)&v11, 1uLL, 0) = v7;
  v8 = sub_10075078C(a1, 1uLL);
  v9 = v8 * sub_10075078C(a1, 1uLL);
  *(float *)sub_100749250((uint64_t)&v11, 1uLL, 1uLL) = v9;
  return v11;
}

float *sub_1011BEE3C(_QWORD *a1, float a2, float a3, float a4, float a5)
{
  unint64_t v6;
  char v7;
  char v8;
  int v9;
  int v10;
  float *result;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  char v34;
  char v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  _DWORD v40[2];
  float v41;
  float v42;
  float32x2_t v43;

  v6 = 0;
  *(float *)v40 = a2;
  *(float *)&v40[1] = a3;
  v41 = a4;
  v42 = a5;
  v7 = 1;
  *a1 = 0;
  a1[1] = 0;
  do
  {
    v8 = v7;
    *(_DWORD *)sub_100749250((uint64_t)a1, v6, v6) = 1065353216;
    v9 = *(_DWORD *)sub_100749250((uint64_t)v40, v6, v6);
    *(_DWORD *)sub_100749078((uint64_t)&v43, v6) = v9;
    v10 = *(_DWORD *)sub_100749250((uint64_t)v40, v6, v6);
    *(_DWORD *)sub_100749078((uint64_t)&v39, v6) = v10;
    result = (float *)sub_100749078((uint64_t)&v38, v6);
    v7 = 0;
    *result = 0.0;
    v6 = 1;
  }
  while ((v8 & 1) != 0);
  v12 = 0;
  v13 = 0.0;
  do
  {
    v14 = -v41;
    if (v41 >= 0.0)
      v14 = v41;
    if ((float)(v14 + 0.0) == 0.0)
      break;
    if (v12 < 3)
      v13 = (float)((float)(v14 + 0.0) * 0.2) * 0.25;
    v15 = v14 * 100.0;
    if (v12 < 4)
      goto LABEL_38;
    v16 = v43.f32[0];
    v17 = v15 + v43.f32[0];
    if ((float)(v15 + v43.f32[0]) < 0.0)
      v17 = -(float)(v15 + v43.f32[0]);
    if (v43.f32[0] < 0.0)
      v16 = -v43.f32[0];
    if (v17 != v16)
      goto LABEL_38;
    v18 = v43.f32[1];
    v19 = v15 + v43.f32[1];
    if ((float)(v15 + v43.f32[1]) < 0.0)
      v19 = -(float)(v15 + v43.f32[1]);
    if (v43.f32[1] < 0.0)
      v18 = -v43.f32[1];
    if (v19 == v18)
    {
      v41 = 0.0;
    }
    else
    {
LABEL_38:
      if (v14 > v13)
      {
        v20 = 0;
        v21 = v43.f32[1] - v43.f32[0];
        v22 = v15 + (float)(v43.f32[1] - v43.f32[0]);
        if (v22 < 0.0)
          v22 = -v22;
        v23 = -v21;
        if (v21 >= 0.0)
          v23 = v43.f32[1] - v43.f32[0];
        v24 = (float)(v21 * 0.5) / v41;
        v25 = -v24;
        v26 = v24 < 0.0;
        if (v24 >= 0.0)
          v25 = (float)(v21 * 0.5) / v41;
        v27 = 1.0 / (float)(v25 + sqrtf((float)(v24 * v24) + 1.0));
        if (v26)
          v27 = -v27;
        v28 = v41 / v21;
        if (v22 == v23)
          v29 = v28;
        else
          v29 = v27;
        v30 = 1.0 / sqrtf((float)(v29 * v29) + 1.0);
        v31 = v29 * v30;
        v32 = (float)(v29 * v30) / (float)(v30 + 1.0);
        v38.f32[0] = v38.f32[0] - (float)(v41 * v29);
        v38.f32[1] = (float)(v41 * v29) + v38.f32[1];
        v43.f32[0] = v43.f32[0] - (float)(v41 * v29);
        v43.f32[1] = v43.f32[1] + (float)(v41 * v29);
        v41 = 0.0;
        v33 = -(float)(v29 * v30);
        v34 = 1;
        do
        {
          v35 = v34;
          v36 = *(float *)sub_100749250((uint64_t)a1, v20, 0);
          v37 = *(float *)sub_100749250((uint64_t)a1, v20, 1uLL);
          *(float *)sub_100749250((uint64_t)a1, v20, 0) = v36 + (float)(v33 * (float)(v37 + (float)(v36 * v32)));
          result = (float *)sub_100749250((uint64_t)a1, v20, 1uLL);
          v34 = 0;
          *result = v37 + (float)(v31 * (float)(v36 - (float)(v37 * v32)));
          v20 = 1;
        }
        while ((v35 & 1) != 0);
      }
    }
    ++v12;
    v39 = vadd_f32(v38, v39);
    v43 = v39;
    v38 = 0;
    v13 = 0.0;
  }
  while (v12 != 10);
  return result;
}

void sub_1011BF124()
{
  dword_10230D388 = sub_100D043E4(50, 0x80uLL);
}

uint64_t sub_1011BF148(uint64_t a1, void *a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *sub_100F9B3D0(a1, a2) = &off_1021A5830;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5918);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5918);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLAutopauseProviderDummy::CLAutopauseProviderDummy(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return a1;
}

void sub_1011BF2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100F9B498(v1);
  _Unwind_Resume(a1);
}

void sub_1011BF30C(uint64_t a1)
{
  sub_100F9B498(a1);
  operator delete();
}

uint64_t sub_1011BF330(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5918);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1, a2);
    v5 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PAUSE: Client registered for %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5918);
    v7 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(buf, a1, a2);
    if (v12 >= 0)
      v8 = buf;
    else
      v8 = *(_BYTE **)buf;
    v13 = 136315138;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 2, "PAUSE: Client registered for %s", (const char *)&v13);
    v10 = v9;
    if (v12 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLAutopauseProviderDummy::registerForNotificationInternal(const CLAutopauseProvider_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)__p)
      free(v10);
  }
  return 1;
}

uint64_t sub_1011BF568(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5918);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1, a2);
    v5 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PAUSE: Client unregistered for %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5918);
    v7 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(buf, a1, a2);
    if (v12 >= 0)
      v8 = buf;
    else
      v8 = *(_BYTE **)buf;
    v13 = 136315138;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 2, "PAUSE: Client unregistered for %s", (const char *)&v13);
    v10 = v9;
    if (v12 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLAutopauseProviderDummy::unregisterForNotificationInternal(const CLAutopauseProvider_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)__p)
      free(v10);
  }
  return 1;
}

void sub_1011BF7A0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1011BF7CC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C4416C;
      v1[3] = unk_101C4417C;
      v1[4] = xmmword_101C4418C;
      v1[0] = xmmword_101C4414C;
      v1[1] = unk_101C4415C;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1011BF8A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1011BF8B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t j;

  v1 = 0;
  *(_OWORD *)result = xmmword_101C44210;
  *(_OWORD *)(result + 16) = unk_101C44220;
  *(_OWORD *)(result + 32) = xmmword_101C44230;
  *(_OWORD *)(result + 48) = xmmword_101C441E0;
  *(_OWORD *)(result + 64) = unk_101C441F0;
  *(_OWORD *)(result + 80) = xmmword_101C44200;
  __asm { FMOV            V4.2D, #1.0 }
  *(_OWORD *)(result + 96) = xmmword_101C441C0;
  *(_OWORD *)(result + 112) = _Q4;
  v7 = result + 128;
  *(_OWORD *)(result + 128) = xmmword_101C44210;
  *(_OWORD *)(result + 144) = unk_101C44220;
  *(_OWORD *)(result + 192) = xmmword_101C44250;
  *(_OWORD *)(result + 208) = unk_101C44260;
  *(_OWORD *)(result + 160) = xmmword_101C44230;
  *(_OWORD *)(result + 176) = xmmword_101C44240;
  *(_OWORD *)(result + 224) = xmmword_101C441D0;
  *(_OWORD *)(result + 240) = _Q4;
  *(_DWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 256) = result + 128;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 296) = result + 128;
  *(_QWORD *)(result + 304) = 0;
  *(_DWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 336) = result + 128;
  *(_QWORD *)(result + 344) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 360) = 0;
  do
  {
    v8 = result + v1;
    *(_QWORD *)(v8 + 376) = off_10214EBA0;
    v9 = (_OWORD *)(result + v1 + 392);
    *v9 = 0uLL;
    v9[1] = 0uLL;
    v9[2] = 0uLL;
    *(_QWORD *)(v8 + 448) = 0;
    *(_QWORD *)(v8 + 456) = 0;
    *(_QWORD *)(v8 + 440) = result + v1 + 448;
    v1 += 88;
    *(_DWORD *)(v8 + 384) = 0;
  }
  while (v1 != 264);
  v10 = 0;
  *(_QWORD *)(result + 640) = result;
  *(_QWORD *)(result + 648) = 0;
  *(_QWORD *)(result + 664) = 0;
  *(_QWORD *)(result + 656) = 0;
  *(_DWORD *)(result + 672) = 0;
  *(_QWORD *)(result + 680) = result;
  *(_QWORD *)(result + 688) = 0;
  *(_QWORD *)(result + 704) = 0;
  *(_QWORD *)(result + 696) = 0;
  *(_DWORD *)(result + 712) = 0;
  *(_QWORD *)(result + 720) = result;
  *(_QWORD *)(result + 728) = 0;
  *(_QWORD *)(result + 744) = 0;
  *(_QWORD *)(result + 736) = 0;
  *(_DWORD *)(result + 752) = 0;
  *(_QWORD *)(result + 760) = v7;
  *(_QWORD *)(result + 776) = 0;
  *(_QWORD *)(result + 768) = 0;
  *(_DWORD *)(result + 792) = 0;
  *(_QWORD *)(result + 784) = 0;
  *(_QWORD *)(result + 800) = v7;
  *(_QWORD *)(result + 816) = 0;
  *(_QWORD *)(result + 808) = 0;
  *(_DWORD *)(result + 832) = 0;
  *(_QWORD *)(result + 824) = 0;
  *(_QWORD *)(result + 840) = result;
  *(_QWORD *)(result + 856) = 0;
  *(_QWORD *)(result + 848) = 0;
  *(_DWORD *)(result + 872) = 0;
  *(_QWORD *)(result + 864) = 0;
  *(_QWORD *)(result + 880) = result;
  *(_QWORD *)(result + 896) = 0;
  *(_QWORD *)(result + 888) = 0;
  *(_DWORD *)(result + 912) = 0;
  *(_QWORD *)(result + 904) = 0;
  do
  {
    v11 = result + v10;
    *(_QWORD *)(v11 + 920) = off_10214EBA0;
    v12 = (_OWORD *)(result + v10 + 936);
    *v12 = 0uLL;
    v12[1] = 0uLL;
    v12[2] = 0uLL;
    *(_OWORD *)(v11 + 992) = 0uLL;
    *(_QWORD *)(v11 + 984) = result + v10 + 992;
    v10 += 88;
    *(_DWORD *)(v11 + 928) = 0;
  }
  while (v10 != 176);
  v13 = 0;
  *(_QWORD *)(result + 1096) = v7;
  *(_QWORD *)(result + 1136) = v7;
  *(_QWORD *)(result + 1104) = 0;
  *(_QWORD *)(result + 1120) = 0;
  *(_QWORD *)(result + 1112) = 0;
  *(_DWORD *)(result + 1128) = 0;
  *(_QWORD *)(result + 1144) = 0;
  *(_QWORD *)(result + 1160) = 0;
  *(_QWORD *)(result + 1152) = 0;
  *(_DWORD *)(result + 1168) = 0;
  *(_QWORD *)(result + 1176) = result;
  *(_QWORD *)(result + 1184) = 0;
  *(_QWORD *)(result + 1200) = 0;
  *(_QWORD *)(result + 1192) = 0;
  *(_DWORD *)(result + 1208) = 0;
  *(_QWORD *)(result + 1216) = result;
  *(_QWORD *)(result + 1232) = 0;
  *(_QWORD *)(result + 1224) = 0;
  *(_DWORD *)(result + 1248) = 0;
  *(_QWORD *)(result + 1240) = 0;
  do
  {
    v14 = result + v13;
    *(_QWORD *)(v14 + 1256) = off_10214EBA0;
    v15 = (_OWORD *)(result + v13 + 1272);
    *v15 = 0uLL;
    v15[1] = 0uLL;
    v15[2] = 0uLL;
    *(_OWORD *)(v14 + 1328) = 0uLL;
    *(_QWORD *)(v14 + 1320) = result + v13 + 1328;
    v13 += 88;
    *(_DWORD *)(v14 + 1264) = 0;
  }
  while (v13 != 176);
  *(_QWORD *)(result + 1432) = 0;
  *(_QWORD *)(result + 1440) = 0x80000000800000;
  *(_DWORD *)(result + 1448) = -8388609;
  *(_BYTE *)(result + 1452) = 1;
  *(_QWORD *)(result + 1472) = 0;
  *(_QWORD *)(result + 1464) = 0;
  *(_QWORD *)(result + 1480) = 0xA00000000;
  *(_QWORD *)(result + 1528) = 0x500000000;
  *(_QWORD *)(result + 1596) = 0x500000000;
  *(_QWORD *)(result + 1644) = 0x500000000;
  *(_QWORD *)(result + 1692) = 0;
  *(_DWORD *)(result + 1700) = 0;
  *(_BYTE *)(result + 1704) = 1;
  *(_QWORD *)(result + 1716) = 0;
  *(_QWORD *)(result + 1724) = 0;
  *(_QWORD *)(result + 1732) = 0xA00000000;
  *(_QWORD *)(result + 1780) = 0;
  *(_DWORD *)(result + 1788) = 0;
  *(_BYTE *)(result + 1792) = 1;
  *(_QWORD *)(result + 1820) = 0xA00000000;
  v16 = 928;
  *(_QWORD *)(result + 1804) = 0;
  *(_QWORD *)(result + 1812) = 0;
  do
  {
    *(_DWORD *)(result + v16) = 10;
    v16 += 88;
  }
  while (v16 != 1104);
  for (i = 1264; i != 1440; i += 88)
    *(_DWORD *)(result + i) = 10;
  for (j = 384; j != 648; j += 88)
    *(_DWORD *)(result + j) = 10;
  return result;
}

uint64_t sub_1011BFBBC(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  float v35[3];
  unint64_t v36;
  unint64_t v37;

  result = sub_1011BFE60(a1, a2, (uint64_t)v35, &v37, &v36);
  if ((_DWORD)result)
  {
    result = sub_1011C02C4(a1, (float *)&v37, (float *)&v36, v35);
    if ((_DWORD)result)
    {
      v6 = a1 + 1740;
      v7 = *(unsigned __int16 *)(a1 + 1732);
      v8 = *(unsigned __int16 *)(a1 + 1734);
      v9 = v7 + v8 - 1;
      v10 = *(unsigned int *)(a1 + 1736);
      if (v9 < v10)
        v10 = 0;
      v11 = *(float *)(v6 + 4 * (v9 - v10));
      v12 = *(float *)(v6 + 4 * v7);
      v13 = a1 + 1828;
      v14 = *(unsigned __int16 *)(a1 + 1820);
      v15 = *(unsigned __int16 *)(a1 + 1822);
      v16 = v14 + v15 - 1;
      v17 = *(unsigned int *)(a1 + 1824);
      if (v16 < v17)
        v17 = 0;
      v18 = *(float *)(v13 + 4 * (v16 - v17));
      v19 = *(float *)(v13 + 4 * v14);
      v20 = 0.0;
      v21 = 0.0;
      if (v8 >= 2)
      {
        v22 = 1;
        do
        {
          v23 = *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1732), v22);
          v21 = v21 + vabds_f32(v23, *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1732), v22++ - 1));
        }
        while (v22 < *(unsigned __int16 *)(a1 + 1734));
        LODWORD(v15) = *(unsigned __int16 *)(a1 + 1822);
      }
      if (v15 >= 2)
      {
        v20 = 0.0;
        v24 = 1;
        do
        {
          v25 = *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1820), v24);
          v20 = v20 + vabds_f32(v25, *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1820), v24++ - 1));
        }
        while (v24 < *(unsigned __int16 *)(a1 + 1822));
      }
      v26 = vabds_f32(v11, v12);
      if (*(_BYTE *)(a1 + 1704))
        sub_1011C087C(a1 + 1704);
      v27 = *(float *)(a1 + 1712);
      v28 = 0.0;
      if (v27 < 0.0)
        v27 = 0.0;
      *(float *)(a3 + 8) = sqrtf(v27);
      v29 = vabds_f32(v18, v19);
      *(float *)(a3 + 16) = v26;
      *(float *)(a3 + 20) = v21;
      *(_DWORD *)(a3 + 12) = *(_DWORD *)sub_1004784C4((unsigned __int16 *)(a1 + 1732), 5uLL);
      v30 = a1 + 1596 + 8 * *(unsigned __int16 *)(a1 + 1596);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v30 + 8);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(v30 + 12);
      if (*(_BYTE *)(a1 + 1792))
        sub_1011C087C(a1 + 1792);
      v31 = *(float *)(a1 + 1800);
      if (v31 < 0.0)
        v31 = 0.0;
      *(float *)(a3 + 32) = sqrtf(v31);
      *(float *)(a3 + 40) = v29;
      *(float *)(a3 + 44) = v20;
      *(_DWORD *)(a3 + 36) = *(_DWORD *)sub_1004784C4((unsigned __int16 *)(a1 + 1820), 5uLL);
      v32 = a1 + 1644 + 8 * *(unsigned __int16 *)(a1 + 1644);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(v32 + 8);
      *(_DWORD *)(a3 + 52) = *(_DWORD *)(v32 + 12);
      v33 = 0;
      *(CFAbsoluteTime *)a3 = CFAbsoluteTimeGetCurrent() + -10.0;
      do
        v28 = v28 + *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1480), v33++);
      while (v33 != 10);
      *(float *)(a3 + 56) = v28;
      v34 = (_DWORD *)(a1 + 1528 + 12 * *(unsigned __int16 *)(a1 + 1528));
      *(_DWORD *)(a3 + 60) = v34[2];
      *(_DWORD *)(a3 + 64) = v34[3];
      *(_DWORD *)(a3 + 68) = v34[4];
      return 1;
    }
  }
  return result;
}

uint64_t sub_1011BFE60(uint64_t a1, float *a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  int v10;
  int v11;
  float *v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float *v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t i;
  float *v30;
  float v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t j;
  _DWORD *v43;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  float v50[9];

  sub_100B61F44(a2, v50);
  v49 = __PAIR64__(LODWORD(v50[3]), LODWORD(v50[0]));
  v48 = __PAIR64__(LODWORD(v50[5]), LODWORD(v50[2]));
  LODWORD(v46) = sub_10012C7A4(a2);
  HIDWORD(v46) = v10;
  v47 = v11;
  v12 = (float *)sub_100749078((uint64_t)&v49, 0);
  v13 = sub_100AFB91C((_QWORD *)(a1 + 840), 0, *v12);
  *(float *)(a1 + 848) = v13;
  *(float *)(a1 + 848) = sub_100AFB91C((_QWORD *)(a1 + 840), 1, v13);
  v14 = (float *)sub_100749078((uint64_t)&v49, 1uLL);
  v15 = sub_100AFB91C((_QWORD *)(a1 + 880), 0, *v14);
  *(float *)(a1 + 888) = v15;
  *(float *)(a1 + 888) = sub_100AFB91C((_QWORD *)(a1 + 880), 1, v15);
  v16 = (float *)sub_100749078((uint64_t)&v48, 0);
  v17 = sub_100AFB91C((_QWORD *)(a1 + 1176), 0, *v16);
  *(float *)(a1 + 1184) = v17;
  *(float *)(a1 + 1184) = sub_100AFB91C((_QWORD *)(a1 + 1176), 1, v17);
  v18 = (float *)sub_100749078((uint64_t)&v48, 1uLL);
  v19 = sub_100AFB91C((_QWORD *)(a1 + 1216), 0, *v18);
  *(float *)(a1 + 1224) = v19;
  v20 = 0;
  *(float *)(a1 + 1224) = sub_100AFB91C((_QWORD *)(a1 + 1216), 1, v19);
  v21 = a1 + 640;
  do
  {
    v22 = (float *)sub_100534E68((uint64_t)&v46, v20);
    v23 = sub_100AFB91C((_QWORD *)v21, 0, *v22);
    *(float *)(v21 + 8) = v23;
    *(float *)(v21 + 8) = sub_100AFB91C((_QWORD *)v21, 1, v23);
    ++v20;
    v21 += 40;
  }
  while (v20 != 3);
  v24 = *(_DWORD *)(a1 + 1432);
  *(_DWORD *)(a1 + 1432) = v24 + 1;
  if (v24 <= 9)
    return 0;
  *(_DWORD *)(a1 + 1432) = 0;
  v25 = sub_100AFB91C((_QWORD *)(a1 + 760), 0, *(float *)(a1 + 848));
  *(float *)(a1 + 768) = v25;
  *(float *)(a1 + 768) = sub_100AFB91C((_QWORD *)(a1 + 760), 1, v25);
  v26 = sub_100AFB91C((_QWORD *)(a1 + 800), 0, *(float *)(a1 + 888));
  *(float *)(a1 + 808) = v26;
  *(float *)(a1 + 808) = sub_100AFB91C((_QWORD *)(a1 + 800), 1, v26);
  v27 = sub_100AFB91C((_QWORD *)(a1 + 1096), 0, *(float *)(a1 + 1184));
  *(float *)(a1 + 1104) = v27;
  *(float *)(a1 + 1104) = sub_100AFB91C((_QWORD *)(a1 + 1096), 1, v27);
  v28 = sub_100AFB91C((_QWORD *)(a1 + 1136), 0, *(float *)(a1 + 1224));
  *(float *)(a1 + 1144) = v28;
  *(float *)(a1 + 1144) = sub_100AFB91C((_QWORD *)(a1 + 1136), 1, v28);
  for (i = 264; i != 384; i += 40)
  {
    v30 = (float *)(a1 + i);
    v31 = sub_100AFB91C((_QWORD *)(a1 + i - 8), 0, *(float *)(a1 + i + 384));
    *v30 = v31;
    *v30 = sub_100AFB91C((_QWORD *)(a1 + i - 8), 1, v31);
  }
  v32 = *(_DWORD *)(a1 + 1436);
  *(_DWORD *)(a1 + 1436) = v32 + 1;
  if (v32 <= 9)
    return 0;
  *(_DWORD *)(a1 + 1436) = 0;
  v45 = *(_DWORD *)(a1 + 768);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(a1 + 920) + 24))(a1 + 920, &v45);
  v45 = *(_DWORD *)(a1 + 808);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(a1 + 1008) + 24))(a1 + 1008, &v45);
  v45 = *(_DWORD *)(a1 + 1104);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(a1 + 1256) + 24))(a1 + 1256, &v45);
  v45 = *(_DWORD *)(a1 + 1144);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(a1 + 1344) + 24))(a1 + 1344, &v45);
  v33 = 0;
  v34 = (_QWORD *)(a1 + 376);
  v35 = (_QWORD *)(a1 + 376);
  v36 = (_QWORD *)(a1 + 376);
  do
  {
    v45 = *(_DWORD *)(a1 + 264 + v33);
    v37 = *v36;
    v36 += 11;
    (*(void (**)(_QWORD *, int *))(v37 + 24))(v35, &v45);
    v33 += 40;
    v35 = v36;
  }
  while (v33 != 120);
  if (*(_QWORD *)(a1 + 1000) != *(_DWORD *)(a1 + 928))
    return 0;
  v38 = (_DWORD *)sub_100749078((uint64_t)&v49, 0);
  sub_100A4533C((_QWORD *)(a1 + 920), 2, v38);
  v39 = (_DWORD *)sub_100749078((uint64_t)&v49, 1uLL);
  sub_100A4533C((_QWORD *)(a1 + 1008), 2, v39);
  v40 = (_DWORD *)sub_100749078((uint64_t)&v48, 0);
  sub_100A4533C((_QWORD *)(a1 + 1256), 2, v40);
  v41 = (_DWORD *)sub_100749078((uint64_t)&v48, 1uLL);
  sub_100A4533C((_QWORD *)(a1 + 1344), 2, v41);
  for (j = 0; j != 3; ++j)
  {
    v43 = (_DWORD *)sub_100534E68((uint64_t)&v46, j);
    sub_100A4533C(v34, 2, v43);
    v34 += 11;
  }
  *(_QWORD *)a3 = v46;
  *(_DWORD *)(a3 + 8) = v47;
  *a4 = v49;
  *a5 = v48;
  sub_100687774((unsigned __int16 *)(a1 + 1528), a3);
  sub_1011C0768((unsigned __int16 *)(a1 + 1596), a4);
  sub_1011C0768((unsigned __int16 *)(a1 + 1644), a5);
  return 1;
}

BOOL sub_1011C02C4(uint64_t a1, float *a2, float *a3, float *a4)
{
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _BOOL8 result;
  float *v24;
  float *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  float v29;
  NSObject *v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  const char *v49;
  uint8_t *v50;
  double v51;
  int v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  uint8_t buf[4];
  unint64_t v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;

  v8 = 0;
  v10 = *a4;
  v9 = a4[1];
  v11 = a4[2];
  *(float *)buf = *a4;
  v73 = __PAIR64__(LODWORD(v11), LODWORD(v9));
  v12 = 0.0;
  do
  {
    v12 = v12 + (float)(*(float *)&buf[v8] * *(float *)&buf[v8]);
    v8 += 4;
  }
  while (v8 != 12);
  if (sqrtf(v12) > 0.00000011921)
  {
    v13 = 0;
    v14 = 0.0;
    do
    {
      v14 = v14 + (float)(*(float *)&buf[v13] * *(float *)&buf[v13]);
      v13 += 4;
    }
    while (v13 != 12);
    v15 = sqrtf(v14);
    v10 = v10 / v15;
    v9 = v9 / v15;
    v11 = v11 / v15;
  }
  v16 = *a2;
  v17 = a2[1];
  v18 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
  if (v18 > 0.00000011921)
  {
    v16 = v16 / v18;
    v17 = v17 / v18;
  }
  v19 = *a3;
  v20 = a3[1];
  v21 = sqrtf((float)(v19 * v19) + (float)(v20 * v20));
  if (v21 > 0.00000011921)
  {
    v19 = v19 / v21;
    v20 = v20 / v21;
  }
  v22 = *(float *)(a1 + 1440);
  if (v22 == -3.4028e38)
  {
    result = 0;
    *(float *)(a1 + 1440) = v10;
    *(float *)(a1 + 1444) = v9;
    *(float *)(a1 + 1448) = v11;
  }
  else
  {
    HIDWORD(v51) = acosf(fmaxf(fminf((float)((float)(v11 * *(float *)(a1 + 1448)) + (float)(*(float *)(a1 + 1444) * v9))+ (float)(v22 * v10), 1.0), -1.0));
    sub_100AFB84C(a1 + 1452, (float *)&v51 + 1);
    *(float *)(a1 + 1440) = v10;
    *(float *)(a1 + 1444) = v9;
    *(float *)(a1 + 1448) = v11;
    v24 = (float *)(a1 + 1692);
    *(float *)(a1 + 1692) = atan2f(v17, v16);
    v25 = (float *)(a1 + 1780);
    *(float *)(a1 + 1780) = atan2f(v20, v19);
    v27 = sub_1011C07C8(v26, a1 + 1692);
    sub_1011C07C8((uint64_t)v27, a1 + 1780);
    v28 = 0;
    v29 = 0.0;
    do
      v29 = v29 + *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1480), v28++);
    while (v28 != 10);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A5938);
    v30 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(double *)&v31 = *v24;
      v32 = *v25;
      v33 = *a2;
      v34 = a2[1];
      v35 = *a3;
      v36 = a3[1];
      v37 = *a4;
      v38 = a4[1];
      v39 = a4[2];
      *(_DWORD *)buf = 134220288;
      v73 = v31;
      v74 = 2048;
      v75 = v32;
      v76 = 2048;
      v77 = v29;
      v78 = 2048;
      v79 = v33;
      v80 = 2048;
      v81 = v34;
      v82 = 2048;
      v83 = v35;
      v84 = 2048;
      v85 = v36;
      v86 = 2048;
      v87 = v37;
      v88 = 2048;
      v89 = v38;
      v90 = 2048;
      v91 = v39;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "headingCrown,%f,headingFace,%f,bodySum,%f,cx,%f,cy,%f,fx,%f,fy,%f,gx,%f,gy,%f,gz,%f", buf, 0x66u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A5938);
      v40 = *v24;
      v41 = *v25;
      v42 = *a2;
      v43 = a2[1];
      v44 = *a3;
      v45 = a3[1];
      v46 = *a4;
      v47 = a4[1];
      v48 = a4[2];
      v52 = 134220288;
      v53 = v40;
      v54 = 2048;
      v55 = v41;
      v56 = 2048;
      v57 = v29;
      v58 = 2048;
      v59 = v42;
      v60 = 2048;
      v61 = v43;
      v62 = 2048;
      v63 = v44;
      v64 = 2048;
      v65 = v45;
      v66 = 2048;
      v67 = v46;
      v68 = 2048;
      v69 = v47;
      v70 = 2048;
      v71 = v48;
      LODWORD(v51) = 102;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "headingCrown,%f,headingFace,%f,bodySum,%f,cx,%f,cy,%f,fx,%f,fy,%f,gx,%f,gy,%f,gz,%f", COERCE_DOUBLE(&v52), v51);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTurnDetector::accumulateAngleDeltas(const CMVector<float, 2> &, const CMVector<float, 2> &, const CMVector<float, 3> &)", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    return *(_DWORD *)(a1 + 1736) == *(unsigned __int16 *)(a1 + 1734);
  }
  return result;
}

unsigned __int16 *sub_1011C0768(unsigned __int16 *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  *(_QWORD *)&result[4 * (v3 - v2) + 4] = *a2;
  v4 = result[1];
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    v6 = *result + 1;
    if (v6 < v5)
      LOWORD(v5) = 0;
    *result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

unsigned __int16 *sub_1011C07C8(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  int v4;
  int v5;
  float v6;
  float v8;

  v2 = *(float *)a2;
  v3 = *(float *)(a2 + 4);
  v8 = v3;
  if (*(unsigned __int16 *)(a2 + 42) >= 2u)
  {
    if (vabds_f32(v2, v3) <= 3.1416)
    {
      v5 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      v4 = *(_DWORD *)(a2 + 8);
      if (v2 < v3)
        v5 = v4 + 1;
      else
        v5 = v4 - 1;
      *(_DWORD *)(a2 + 8) = v5;
    }
    v6 = v2 + (double)v5 * 6.28318531;
    v8 = v6;
  }
  *(float *)(a2 + 4) = v2;
  return sub_100AFB84C(a2 + 12, &v8);
}

void sub_1011C0850(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_1011C087C(uint64_t result)
{
  unsigned int v1;
  float v2;
  float v3;
  float v4;

  v1 = *(unsigned __int16 *)(result + 30);
  if (v1 > 1)
  {
    v4 = *(float *)(result + 12);
    v2 = v4 / (float)v1;
    v3 = (float)(*(float *)(result + 20) - (float)(v4 * v2)) / (float)v1;
  }
  else
  {
    v2 = *(float *)(result + 12);
    v3 = 0.0;
  }
  *(float *)(result + 4) = v2;
  *(float *)(result + 8) = v3;
  *(_BYTE *)result = 0;
  return result;
}

uint64_t sub_1011C08B8(uint64_t a1, uint64_t a2)
{
  sub_1001FD98C(a2, "maximumTimeOffsetThreshold", (void *)(a1 + 8));
  sub_1001FD98C(a2, "maximumTimeOffsetThresholdNotMoving", (void *)(a1 + 16));
  sub_1001FD98C(a2, "maximumWaitTimeForActiveBestLocationRequest", (void *)(a1 + 24));
  sub_1001FD98C(a2, "maximumWaitTimeForActiveFineLocationRequest", (void *)(a1 + 32));
  sub_100526244(a2, "maximumNumberOfAdvertisementsInCache", (_DWORD *)(a1 + 40));
  sub_100526244(a2, "maximumBestRequestsPerDay", (_DWORD *)(a1 + 44));
  sub_100526244(a2, "maximumFineRequestsPerDay", (_DWORD *)(a1 + 48));
  sub_1001FD98C(a2, "analyticsHoldoffInterval", (void *)(a1 + 56));
  sub_1001E4874(a2, "crossValidationEnabled", (BOOL *)(a1 + 64));
  sub_100526244(a2, "maximumCrossvalidationRequests", (_DWORD *)(a1 + 68));
  sub_1001FD98C(a2, "crossValidationRequestLimitShortResetInterval", (void *)(a1 + 72));
  sub_1001FD98C(a2, "crossValidationRequestLimitLongResetInterval", (void *)(a1 + 80));
  sub_1001FD98C(a2, "crossValidationDurationInterval", (void *)(a1 + 88));
  sub_1001FD98C(a2, "crossValidationQueryBAInterval", (void *)(a1 + 96));
  sub_1001FD98C(a2, "crossValidationFinalQueryInterval", (void *)(a1 + 104));
  sub_1001E4874(a2, "crossValidationAllowedToRunWithoutVisit", (BOOL *)(a1 + 112));
  sub_1001FD98C(a2, "crossValidationRequestInterval", (void *)(a1 + 120));
  sub_1001FD98C(a2, "enabledAnalyticsHoldoffInterval", (void *)(a1 + 128));
  sub_100526244(a2, "maximumDataCollectionRequests", (_DWORD *)(a1 + 136));
  sub_1001FD98C(a2, "dataCollectionRequestResetInterval", (void *)(a1 + 144));
  sub_1001FD98C(a2, "dataCollectionRequestInterval", (void *)(a1 + 144));
  sub_1001FD98C(a2, "dataCollectionRequestWaitInterval", (void *)(a1 + 160));
  sub_1001FD98C(a2, "activityBasedSpeedDriving", (void *)(a1 + 168));
  sub_1001FD98C(a2, "activityBasedSpeedCycling", (void *)(a1 + 176));
  sub_1001FD98C(a2, "activityBasedSpeedRunning", (void *)(a1 + 184));
  sub_1001FD98C(a2, "activityBasedSpeedWalking", (void *)(a1 + 192));
  return sub_1001FD98C(a2, "saveBeaconPayloadCacheInterval", (void *)(a1 + 200));
}

void sub_1011C0B68(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;

  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerMaximumTimeOffsetThreshold", (void *)(a1 + 8));
  v2 = v84;
  if (v84)
  {
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerMaximumTimeOffsetThresholdNotMoving", (void *)(a1 + 16));
  v5 = v84;
  if (v84)
  {
    v6 = (unint64_t *)&v84->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerMaximumWaitTimeForActiveBestLocationRequest", (void *)(a1 + 24));
  v8 = v84;
  if (v84)
  {
    v9 = (unint64_t *)&v84->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerMaximumWaitTimeForActiveFineLocationRequest", (void *)(a1 + 32));
  v11 = v84;
  if (v84)
  {
    v12 = (unint64_t *)&v84->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1001E4804(&v83);
  sub_100526244(v83, "HarvestAvengerMaximumNumberOfAdvertisementsInCache", (_DWORD *)(a1 + 40));
  v14 = v84;
  if (v84)
  {
    v15 = (unint64_t *)&v84->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_1001E4804(&v83);
  sub_100526244(v83, "HarvestAvengerMaximumBestRequestsPerDay", (_DWORD *)(a1 + 44));
  v17 = v84;
  if (v84)
  {
    v18 = (unint64_t *)&v84->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_1001E4804(&v83);
  sub_100526244(v83, "HarvestAvengerMaximumFineRequestsPerDay", (_DWORD *)(a1 + 48));
  v20 = v84;
  if (v84)
  {
    v21 = (unint64_t *)&v84->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerAnalyticsHoldoffInterval", (void *)(a1 + 56));
  v23 = v84;
  if (v84)
  {
    v24 = (unint64_t *)&v84->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_1001E4804(&v83);
  sub_1001E4874(v83, "HarvestAvengerCrossValidationEnabled", (BOOL *)(a1 + 64));
  v26 = v84;
  if (v84)
  {
    v27 = (unint64_t *)&v84->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_1001E4804(&v83);
  sub_100526244(v83, "HarvestAvengerMaximumCrossvalidationRequests", (_DWORD *)(a1 + 68));
  v29 = v84;
  if (v84)
  {
    v30 = (unint64_t *)&v84->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerCrossValidationRequestLimitShortResetInterval", (void *)(a1 + 72));
  v32 = v84;
  if (v84)
  {
    v33 = (unint64_t *)&v84->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerCrossValidationRequestLimitLongResetInterval", (void *)(a1 + 80));
  v35 = v84;
  if (v84)
  {
    v36 = (unint64_t *)&v84->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerCrossValidationDurationInterval", (void *)(a1 + 88));
  v38 = v84;
  if (v84)
  {
    v39 = (unint64_t *)&v84->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerCrossValidationQueryBAInterval", (void *)(a1 + 96));
  v41 = v84;
  if (v84)
  {
    v42 = (unint64_t *)&v84->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerCrossValidationFinalQueryInterval", (void *)(a1 + 104));
  v44 = v84;
  if (v84)
  {
    v45 = (unint64_t *)&v84->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  sub_1001E4804(&v83);
  sub_1001E4874(v83, "HarvestAvengerCrossValidationAllowedToRunWithoutVisit", (BOOL *)(a1 + 112));
  v47 = v84;
  if (v84)
  {
    v48 = (unint64_t *)&v84->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerCrossValidationRequestInterval", (void *)(a1 + 120));
  v50 = v84;
  if (v84)
  {
    v51 = (unint64_t *)&v84->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerEnabledAnalyticsHoldoffInterval", (void *)(a1 + 128));
  v53 = v84;
  if (v84)
  {
    v54 = (unint64_t *)&v84->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_1001E4804(&v83);
  sub_100526244(v83, "HarvestAvengerMaximumDataCollectionRequests", (_DWORD *)(a1 + 136));
  v56 = v84;
  if (v84)
  {
    v57 = (unint64_t *)&v84->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerDataCollectionRequestResetInterval", (void *)(a1 + 144));
  v59 = v84;
  if (v84)
  {
    v60 = (unint64_t *)&v84->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerDataCollectionRequestInterval", (void *)(a1 + 152));
  v62 = v84;
  if (v84)
  {
    v63 = (unint64_t *)&v84->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerDataCollectionRequestWaitInterval", (void *)(a1 + 160));
  v65 = v84;
  if (v84)
  {
    v66 = (unint64_t *)&v84->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerActivityBasedSpeedDriving", (void *)(a1 + 168));
  v68 = v84;
  if (v84)
  {
    v69 = (unint64_t *)&v84->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerActivityBasedSpeedCycling", (void *)(a1 + 176));
  v71 = v84;
  if (v84)
  {
    v72 = (unint64_t *)&v84->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerActivityBasedSpeedRunning", (void *)(a1 + 184));
  v74 = v84;
  if (v84)
  {
    v75 = (unint64_t *)&v84->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerActivityBasedSpeedWalking", (void *)(a1 + 192));
  v77 = v84;
  if (v84)
  {
    v78 = (unint64_t *)&v84->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  sub_1001E4804(&v83);
  sub_1001FD98C(v83, "HarvestAvengerSaveBeaconPayloadCacheInterval", (void *)(a1 + 200));
  v80 = v84;
  if (v84)
  {
    v81 = (unint64_t *)&v84->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_1011C14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1011C1550()
{
  operator delete();
}

double sub_1011C1564(uint64_t a1)
{
  uint64_t v2;

  sub_100197040();
  if (sub_10075A924() && (sub_100197040(), sub_10075A924() != 2))
    v2 = a1 + 80;
  else
    v2 = a1 + 72;
  return *(double *)v2;
}

double sub_1011C15AC(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t sub_1011C15B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

double sub_1011C15BC(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

double sub_1011C15C4(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

uint64_t sub_1011C15CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

double sub_1011C15D4(uint64_t a1)
{
  return *(double *)(a1 + 144);
}

double sub_1011C15DC(uint64_t a1)
{
  return *(double *)(a1 + 152);
}

double sub_1011C15E4(uint64_t a1)
{
  return *(double *)(a1 + 168);
}

double sub_1011C15EC(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

double sub_1011C15F4(uint64_t a1)
{
  return *(double *)(a1 + 184);
}

double sub_1011C15FC(uint64_t a1)
{
  return *(double *)(a1 + 192);
}

double sub_1011C1604(uint64_t a1)
{
  return *(double *)(a1 + 200);
}

double sub_1011C160C(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double sub_1011C1614(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

double sub_1011C161C(uint64_t a1)
{
  return *(double *)(a1 + 232);
}

double sub_1011C1624(uint64_t a1)
{
  return *(double *)(a1 + 240);
}

double sub_1011C162C(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

void sub_1011C1A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1011C1B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1011C2268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011C2500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1011C3118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1011C3258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1011C336C(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1011C3398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A5AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011C33AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A5AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1011C33E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A5B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011C33F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A5B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1011C3428()
{
  sub_1015A2E04(qword_10230D390, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D390, (void *)&_mh_execute_header);
}

void sub_1011C3510(id a1)
{
  qword_10230D400 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLNatalimetryNotifierSilo"));
}

uint64_t sub_1011C35C4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011C5830;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230D420 != -1)
    dispatch_once(&qword_10230D420, block);
  return qword_102311CE8;
}

uint64_t sub_1011C3748(uint64_t a1, float a2)
{
  int v5;
  _DWORD v6[2];
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[174];
  uint64_t v11;
  NSNumber *v12;

  v11 = CMNatalimeterSetUserPal;
  v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1), 1, 0);
  v6[1] = 2146435071;
  v7 = 0;
  v8 = 0xBFF0000000000000;
  v9 = 0;
  v10[0] = 0;
  *(_QWORD *)((char *)v10 + 5) = 0;
  memset(&v10[2], 0, 24);
  *(float *)v6 = a2;
  v5 = 3;
  return (*(uint64_t (**)(uint64_t, int *, _DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v5, v6, 1, 0xFFFFFFFFLL, 0);
}

void sub_1011C38A0(uint64_t a1)
{
  uint64_t v2;
  float v3;
  float v4;
  int v5;
  float v6;
  NSObject *v7;
  NSObject *v8;
  NSNumber **v9;
  uint64_t *v10;
  NSObject *v11;
  double v12;
  NSObject *v13;
  NSNumber **v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  _WORD v30[8];
  __int128 v31;
  float v32;
  __int128 v33;
  float v34;
  int v35;
  float v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  NSNumber *v40;
  uint64_t v41;
  _UNKNOWN **v42;
  uint64_t v43;
  NSNumber *v44;
  uint64_t v45;
  _UNKNOWN **v46;
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 2752);
  v31 = *(_OWORD *)(v2 + 1352);
  v3 = *(float *)(v2 + 1368);
  v4 = *(float *)(v2 + 1388);
  v5 = *(_DWORD *)(v2 + 1392);
  v6 = *(float *)(v2 + 1396);
  v32 = v3;
  v33 = *(_OWORD *)(v2 + 1372);
  v34 = v4;
  v35 = v5;
  v36 = v6;
  v37 = *(_QWORD *)(v2 + 1400);
  v38 = *(_DWORD *)(v2 + 1408);
  if (sub_1011CD250(a1))
  {
    if (v34 == v4)
    {
      if (v32 != v3)
      {
        if (v32 >= 0.0)
        {
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v11 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "UserProfile, Forcing a vo2max update.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            v30[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Forcing a vo2max update.", v30, 2);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::refreshMetrics()", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          v43 = CMNatalimeterSetUserVo2max;
          *(float *)&v12 = v32;
          v44 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12);
          v9 = &v44;
          v10 = &v43;
        }
        else
        {
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v8 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "UserProfile, Forcing a vo2max clear.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            v30[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Forcing a vo2max clear.", v30, 2);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::refreshMetrics()", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          v45 = CMNatalimeterSetUserVo2max;
          v46 = &off_102220C38;
          v9 = (NSNumber **)&v46;
          v10 = &v45;
        }
        sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v10, 1), 0, 0);
      }
      if (v36 != v6)
      {
        if (v36 >= 0.0)
        {
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v16 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "UserProfile, Forcing a run vo2max update.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            v30[0] = 0;
            LODWORD(v29) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Forcing a run vo2max update.", v30, v29);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::refreshMetrics()", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          v17 = sub_1001FD94C();
          buf[0] = 1;
          sub_10011B81C(v17, CFSTR("ActiveJacksonCalibration"), buf);
          sub_1011C40D4(a1, 1);
          v39 = CMNatalimeterSetUserRunVo2max;
          *(float *)&v18 = v36;
          v40 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18);
          v14 = &v40;
          v15 = &v39;
        }
        else
        {
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v13 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "UserProfile, Forcing a run vo2max clear.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            v30[0] = 0;
            LODWORD(v29) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Forcing a run vo2max clear.", v30, v29);
            v26 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::refreshMetrics()", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }
          sub_1011C40D4(a1, 0);
          v41 = CMNatalimeterSetUserRunVo2max;
          v42 = &off_102220C38;
          v14 = (NSNumber **)&v42;
          v15 = &v41;
        }
        sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v15, 1), 1, 0);
      }
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v7 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "UserProfile, Forcing a pal update.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v30[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Forcing a pal update.", v30, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::refreshMetrics()", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      sub_1011C3748(a1, v34);
    }
  }
}

void sub_1011C40D4(uint64_t a1, char a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v2 = (_BYTE *)(a1 + 392);
  *(_BYTE *)(a1 + 392) = a2;
  v3 = sub_1001FD94C();
  sub_10011B81C(v3, CFSTR("ActiveJacksonCalibration"), v2);
  v4 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v5 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *v2;
    *(_DWORD *)buf = 67109120;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "fActiveVo2maxOverride has been set to %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v7 = *v2;
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "fActiveVo2maxOverride has been set to %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::setActiveVo2maxOverride(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

id sub_1011C42C0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  double v3;
  NSNumber *v4;
  NSNumber *v5;
  NSNumber *v6;
  NSNumber *v7;
  NSNumber *v8;
  NSNumber *v9;
  id v10;

  if (!*(_BYTE *)(a1 + 416))
    return &__NSDictionary0__struct;
  v1 = *(_QWORD *)(a1 + 2752);
  v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 6);
  if (*(_BYTE *)(v1 + 1409))
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 1360);
    v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CMNatalimeterSetUserHeightMeter);
  }
  if (*(_BYTE *)(v1 + 1410))
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 1364);
    v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CMNatalimeterSetUserWeightKG);
  }
  if (*(_BYTE *)(v1 + 1408))
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 1372);
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CMNatalimeterSetUserAgeYr);
  }
  v7 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 1356));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CMNatalimeterSetUserBiologicalSex);
  v8 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 1392));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CMNatalimeterSetUserCondition);
  v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 1400));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CMNatalimeterSetUserBetaBlockerUse);
  v10 = objc_msgSend(v2, "copy");

  return v10;
}

id sub_1011C4430(uint64_t a1)
{
  id v2;
  double v3;
  uint64_t v4;
  NSNumber *v5;
  NSNumber *v6;
  NSNumber *v7;
  NSNumber *v8;
  NSNumber *v9;
  NSNumber *v10;
  double v11;
  NSNumber *v12;
  double v13;
  NSNumber *v14;
  double v15;
  NSNumber *v16;
  double v17;
  NSNumber *v18;
  double v19;
  NSNumber *v20;
  double v21;
  NSNumber *v22;
  id v23;

  if (!*(_BYTE *)(a1 + 416))
    return &__NSDictionary0__struct;
  v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 11);
  v4 = *(_QWORD *)(a1 + 2752);
  if (*(_BYTE *)(v4 + 1409))
  {
    LODWORD(v3) = *(_DWORD *)(v4 + 1360);
    v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CMNatalimeterSetUserHeightMeter);
  }
  if (*(_BYTE *)(v4 + 1410))
  {
    LODWORD(v3) = *(_DWORD *)(v4 + 1364);
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CMNatalimeterSetUserWeightKG);
  }
  if (*(_BYTE *)(v4 + 1408))
  {
    LODWORD(v3) = *(_DWORD *)(v4 + 1372);
    v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CMNatalimeterSetUserAgeYr);
  }
  v8 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v4 + 1356));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CMNatalimeterSetUserBiologicalSex);
  v9 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v4 + 1392));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CMNatalimeterSetUserCondition);
  v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v4 + 1400));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CMNatalimeterSetUserBetaBlockerUse);
  LODWORD(v11) = *(_DWORD *)(v4 + 1376);
  v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CMNatalimeterSetUserHrmin);
  LODWORD(v13) = *(_DWORD *)(v4 + 1384);
  v14 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CMNatalimeterSetUserHronset);
  LODWORD(v15) = *(_DWORD *)(v4 + 1368);
  v16 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CMNatalimeterSetUserVo2max);
  LODWORD(v17) = *(_DWORD *)(v4 + 1396);
  v18 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v17);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CMNatalimeterSetUserRunVo2max);
  LODWORD(v19) = *(_DWORD *)(v4 + 1404);
  v20 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v20, CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold);
  LODWORD(v21) = *(_DWORD *)(v4 + 1388);
  v22 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v22, CMNatalimeterSetUserPal);
  v23 = objc_msgSend(v2, "copy");

  return v23;
}

void sub_1011C468C(uint64_t a1, void *a2)
{
  NSArray *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  _QWORD v16[6];

  v16[0] = CMNatalimeterSetUserBiologicalSex;
  v16[1] = CMNatalimeterSetUserAgeYr;
  v16[2] = CMNatalimeterSetUserWeightKG;
  v16[3] = CMNatalimeterSetUserHeightMeter;
  v16[4] = CMNatalimeterSetUserCondition;
  v16[5] = CMNatalimeterSetUserBetaBlockerUse;
  v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 6);
  v5 = +[NSMutableArray array](NSMutableArray, "array");
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v4);
        v10 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if (!objc_msgSend(a2, "objectForKeyedSubscript:", v10))
          objc_msgSend(v5, "addObject:", v10);
      }
      v7 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }
  sub_1011CB9E0(a1, a2, 1, v5);
}

void sub_1011C487C(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSDictionary *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  id v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _QWORD v28[9];
  _QWORD v29[9];
  int v30;
  void *v31;
  uint8_t buf[1640];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "UserProfile, Resetting to defaults for keys, %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v30 = 138412290;
    v31 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "UserProfile, Resetting to defaults for keys, %@", &v30, 12);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::resetUserProfileForKeys(NSArray<NSString *> *)", "%s\n", v20);
    if (v21 != (char *)buf)
      free(v21);
  }
  v28[0] = CMNatalimeterSetUserBiologicalSex;
  v28[1] = CMNatalimeterSetUserPal;
  v29[0] = &off_10221CFC8;
  v29[1] = &off_102220C18;
  v5 = CMNatalimeterSetUserVo2max;
  v28[2] = CMNatalimeterSetUserHrmin;
  v28[3] = CMNatalimeterSetUserVo2max;
  v29[2] = &off_102220C28;
  v29[3] = &off_102220C38;
  v28[4] = CMNatalimeterSetUserRunVo2max;
  v28[5] = CMNatalimeterSetUserHronset;
  v29[4] = &off_102220C38;
  v29[5] = &off_102220C28;
  v28[6] = CMNatalimeterSetUserCondition;
  v28[7] = CMNatalimeterSetUserBetaBlockerUse;
  v29[6] = &off_10221CFC8;
  v29[7] = &__kCFBooleanFalse;
  v28[8] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  v29[8] = &off_102220C48;
  v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 9);
  v7 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(a2);
        v12 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v11);
        objc_msgSend(v7, "setObject:forKeyedSubscript:", -[NSDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", v12), v12);
        if (objc_msgSend(v12, "isEqualToString:", v5))
        {
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v13 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "UserProfile, Resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            LOWORD(v30) = 0;
            LODWORD(v22) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "UserProfile, Resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.", &v30, v22);
            v18 = (char *)v17;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::resetUserProfileForKeys(NSArray<NSString *> *)", "%s\n", v17);
            if (v18 != (char *)buf)
              free(v18);
          }
          sub_1011C40D4(a1, 0);
          v14 = sub_1001FD94C();
          *(_DWORD *)buf = 0;
          sub_10011B5B8(v14, CFSTR("NumActiveCalibrations"), buf);
          v15 = sub_1001FD94C();
          *(_QWORD *)buf = 0xFFEFFFFFFFFFFFFFLL;
          sub_10018A534(v15, CFSTR("TimeFirstPAL"), buf);
          v16 = sub_1001FD94C();
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 944))(v16);
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v19 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      v9 = v19;
    }
    while (v19);
  }
  sub_1011CB9E0(a1, v7, 0, 0);
}

void sub_1011C4EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011C4F0C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  v5 = sub_101387100(*(_QWORD *)(a1 + 128));
  if ((_DWORD)v5 == 100)
    sub_1004FEDC4((double **)&__p, a2, a3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1011C4F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011C5398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011C53E0(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state;
  xpc_activity_state_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint8_t *v12;
  __int128 v13;
  uint8_t buf[4];
  xpc_activity_state_t v15;

  if (!activity)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v7 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid xpc activity.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Invalid xpc activity.");
LABEL_31:
    v12 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::onCalorieAggregationActivity(xpc_activity_t)", "%s\n", v8);
    if (v12 != buf)
      free(v12);
    return;
  }
  state = xpc_activity_get_state(activity);
  if (state == 4 || (v5 = state, state == 2))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Running aggregation for calorie-related tables", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Running aggregation for calorie-related tables", &v13, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onCalorieAggregationActivity(xpc_activity_t)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1011C9090(a1, activity);
    return;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v9 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unexpected activity state: %ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Unexpected activity state: %ld", &v13);
    goto LABEL_31;
  }
}

void sub_1011C5800(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
  {
    if (sub_100C1DCF8())
      byte_10230D410 = 1;
  }
}

void sub_1011C5830()
{
  operator new();
}

void sub_1011C5878()
{
  operator delete();
}

uint64_t sub_1011C589C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011C5910;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230D430 != -1)
    dispatch_once(&qword_10230D430, block);
  return byte_10230D428;
}

id sub_1011C5910(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLNatalimetryNotifier"));
  byte_10230D428 = (char)result;
  return result;
}

unsigned __int8 *sub_1011C593C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unsigned __int8 v6[8];
  uint64_t v7;

  result = sub_1018BEA14(v6, "MotionLoggerPostWorkoutLoggingInterval", &qword_101C44418, 0);
  if (v6[0]
    || (result = (unsigned __int8 *)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLWorkoutRecorder")), (_DWORD)result))
  {
    *(_BYTE *)a2 = 1;
    v5 = v7;
    *(_QWORD *)(a2 + 8) = v7;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0x403E000000000000;
    v5 = v7;
  }
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_1011C59C8(uint64_t a1, void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_1011C6DB0(a1, "CLNatalimetryNotifier", a2);
  v2[14] = off_1021A5CD0;
  v2[15] = off_1021A5D08;
  *v2 = off_1021A5BC0;
  operator new();
}

void sub_1011C69A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v45 = v38[680];
  v38[680] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_1011D73B0(v40);
  sub_1004A4854(v39);
  v46 = v38[635];
  v38[635] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = v38[634];
  v38[634] = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v38[633];
  v38[633] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v38[632];
  v38[632] = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = v38[631];
  v38[631] = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *v43;
  *v43 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  sub_100CCA46C(a16);
  sub_100261F44(a17);
  sub_1011C83A4(a18);
  sub_100261F44(a19);
  sub_10113B69C(a31);
  v52 = v38[347];
  v38[347] = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 48))(v52);
  v53 = *a32;
  *a32 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53);
  sub_100261F44(a20);
  sub_1011D7468(a21);
  sub_1011DC454(a33);
  sub_1011DC3EC(a22);
  sub_100CDD7EC(v42);
  sub_1011DC384(a34);
  sub_1011C8430(v41);
  sub_1011DC31C(a35);
  sub_1011DC2B4(a36);
  sub_1011DC234(a37);
  sub_1011DC1CC(a38);
  v54 = v38[46];
  v38[46] = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_100261F44(a23);
  sub_100261F44(a24);
  sub_10041D328(a25);
  sub_100261F44(a26);
  sub_10041D328(a27);
  sub_100261F44(a28);
  sub_10041D328(a29);
  sub_100261F44(a30);
  sub_1011C8480((uint64_t)v38);
  _Unwind_Resume(a1);
}

uint64_t sub_1011C6DB0(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021A68C0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1011C6E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1011C6E4C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFAbsoluteTime v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLNatalimetryNotifier::onCatherineNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onCatherineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onCatherineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1011CE874(a4, v8, v7, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1011C7004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C7024(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNatalimetryNotifier::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011CF0B0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1011C71DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C71FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLNatalimetryNotifier::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 6)
    sub_10113B768((id *)(a4 + 2936), *(unsigned __int8 *)(a3 + 1));
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1011C73BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C73DC(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNatalimetryNotifier::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011CF55C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1011C7594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C75B4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNatalimetryNotifier::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011CF738(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1011C776C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C778C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLNatalimetryNotifier::onStoredUserInfo");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onStoredUserInfo", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onStoredUserInfo\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1011CF37C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1011C793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C795C(id *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  xpc_object_t v6;
  id v7;
  _QWORD v8[5];
  uint64_t v9;
  std::__shared_weak_count *v10;
  int v11;

  sub_1011C8940(a1 + 18, 86400.0);
  sub_1011C8BF4(a1 + 26, 604800.0);
  v11 = 7200;
  v2 = sub_100127B9C();
  sub_100081C10(v2, &v9);
  sub_1001E4B84(v9, "CalorieAggregationTimeInterval", &v11);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, v11);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  v7 = objc_msgSend(objc_msgSend(a1[4], "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1011C8EA8;
  v8[3] = &unk_102144B48;
  v8[4] = v7;
  xpc_activity_register("com.apple.locationd.Calorimetry.CalorieAggregation", v6, v8);
  xpc_release(v6);
}

void sub_1011C7ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011C7AD0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  _QWORD v7[5];

  v2 = a1[16];
  v3 = (void *)a1[5];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1011CB1D0;
  v7[3] = &unk_1021A5D30;
  v7[4] = a1;
  sub_1013856F8(v2, v3, v7);
  v4 = a1[24];
  v5 = (void *)a1[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1011CB748;
  v6[3] = &unk_1021A5D50;
  v6[4] = a1;
  sub_100A04A18(v4, v5, v6);
}

void sub_1011C7B6C(uint64_t a1, __int128 *a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  _OWORD v13[2];
  _BYTE v14[28];
  int v15;

  sub_100654238(*(_QWORD *)(a1 + 2752), a2);
  v4 = (__int128 *)(*(_QWORD *)(a1 + 128) + 460);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(__int128 *)((char *)v4 + 44) = *(__int128 *)((char *)a2 + 44);
  v4[1] = v6;
  v4[2] = v7;
  *v4 = v5;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 2768) + 16))(*(_QWORD *)(a1 + 2768), a2);
  sub_100F0416C(a1 + 5096, (uint64_t)a2);
  sub_101308D84(a1 + 5192, (uint64_t)a2);
  bzero(&v15, 0x554uLL);
  v8 = a2[1];
  v13[0] = *a2;
  v13[1] = v8;
  *(_OWORD *)v14 = a2[2];
  *(_OWORD *)&v14[12] = *(__int128 *)((char *)a2 + 44);
  v12 = 2;
  (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v12, v13, 1, 0xFFFFFFFFLL, 0);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  *(_OWORD *)(a1 + 3004) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 2992) = v11;
  *(_OWORD *)(a1 + 2976) = v10;
  *(_OWORD *)(a1 + 2960) = v9;
  sub_10100EB40(a1 + 3168, (uint64_t)a2);
  sub_10083E1C8((_OWORD *)(a1 + 4864), a2);
}

void sub_1011C7CB4(uint64_t a1)
{
  __int128 *v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[4];
  __int128 v17;
  __int128 v18;
  _BYTE v19[28];
  uint8_t buf[16];
  __int128 v21;
  _DWORD v22[7];

  v2 = (__int128 *)(*(_QWORD *)(a1 + 2752) + 1352);
  v3 = *(_OWORD *)(*(_QWORD *)(a1 + 2752) + 1368);
  v17 = *v2;
  v18 = v3;
  *(_OWORD *)v19 = v2[2];
  *(_OWORD *)&v19[12] = *(__int128 *)((char *)v2 + 44);
  if (sub_1011CD250(a1))
  {
    *(_BYTE *)(a1 + 416) = 1;
    v16[0] = *(_DWORD *)&v19[8];
    v4 = sub_100127B9C();
    sub_100081C10(v4, buf);
    v5 = sub_1001E4B84(*(uint64_t *)buf, "UserCondition", v16);
    v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v7 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v5)
      *(_DWORD *)&v19[8] = v16[0];
    v9 = sub_100E014F8(a1 + 2929, (uint64_t)&v17);
    *((float *)&v18 + 3) = v9;
    *(_DWORD *)&v19[20] = sub_100E0ADC8(a1 + 5168, (float *)&v17);
    v21 = 0u;
    memset(v22, 0, sizeof(v22));
    *(_OWORD *)buf = 0u;
    sub_1011CC3E0(a1, *(void **)(a1 + 384), (uint64_t)&v17, 1, (uint64_t)buf);
    sub_1011C7B6C(a1, (__int128 *)buf);
    v10 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)(v10 + 56) + 32))(v10 + 56, buf);
    v11 = *(float *)(*(_QWORD *)(a1 + 2752) + 1360);
    v12 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v12 + 56) + 16))(v12 + 56, (int)(float)((float)(v11 * 100.0) + 0.5));
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v13 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "UserProfile, Unable to read from disk!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Unable to read from disk!", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::readUserProfile()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_1011C7F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011C7FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = nullsub_1441;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1011C81B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011C81D0(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLNatalimetryNotifier::onDeviceMotionData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1011D0108(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1011C8380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1011C83A4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[156];
  if (v2)
  {
    a1[157] = v2;
    operator delete(v2);
  }
  sub_100261F44((uint64_t)(a1 + 154));
  sub_10050C79C(a1 + 148);
  sub_100261F44((uint64_t)(a1 + 143));
  v3 = (void *)a1[133];
  if (v3)
  {
    a1[134] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  sub_101480AF4(a1 + 17);
  sub_10034111C(a1 + 9);
  return a1;
}

uint64_t sub_1011C8430(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A67D8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011C8480(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A68C0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1011C84F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1021A5BC0;
  *(_QWORD *)(a1 + 112) = off_1021A5CD0;
  *(_QWORD *)(a1 + 120) = off_1021A5D08;

  *(_QWORD *)(a1 + 384) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v2 = *(_QWORD *)(a1 + 5440);
  *(_QWORD *)(a1 + 5440) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1011D73B0(a1 + 5192);
  sub_1004A4854((_QWORD *)(a1 + 5112));
  v3 = *(_QWORD *)(a1 + 5080);
  *(_QWORD *)(a1 + 5080) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 5072);
  *(_QWORD *)(a1 + 5072) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 5064);
  *(_QWORD *)(a1 + 5064) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 5056);
  *(_QWORD *)(a1 + 5056) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 5048);
  *(_QWORD *)(a1 + 5048) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 5040);
  *(_QWORD *)(a1 + 5040) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100261F44(a1 + 5016);
  sub_100261F44(a1 + 5000);
  sub_100261F44(a1 + 4984);
  sub_100261F44(a1 + 4864);
  v9 = *(void **)(a1 + 4416);
  if (v9)
  {
    *(_QWORD *)(a1 + 4424) = v9;
    operator delete(v9);
  }
  sub_100261F44(a1 + 4400);
  sub_10050C79C((_QWORD *)(a1 + 4352));
  sub_100261F44(a1 + 4312);
  v10 = *(void **)(a1 + 4232);
  if (v10)
  {
    *(_QWORD *)(a1 + 4240) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 4208);
  if (v11)
  {
    *(_QWORD *)(a1 + 4216) = v11;
    operator delete(v11);
  }
  sub_101480AF4(a1 + 3304);
  sub_10034111C((_QWORD *)(a1 + 3240));
  sub_100261F44(a1 + 3144);
  sub_10113B69C(a1 + 2936);
  v12 = *(_QWORD *)(a1 + 2776);
  *(_QWORD *)(a1 + 2776) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  v13 = *(_QWORD *)(a1 + 2768);
  *(_QWORD *)(a1 + 2768) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  sub_100261F44(a1 + 2752);
  sub_1011D7468(a1 + 1968);
  sub_1011DC454(a1 + 1824);
  sub_1011DC3EC(a1 + 1680);
  *(_QWORD *)(a1 + 1552) = off_10217E6D0;
  free(*(void **)(a1 + 1560));
  sub_100691160((_QWORD *)(a1 + 1576));
  sub_1011DC384(a1 + 1408);
  *(_QWORD *)(a1 + 1280) = off_1021A67D8;
  free(*(void **)(a1 + 1288));
  sub_10034111C((_QWORD *)(a1 + 1304));
  sub_1011DC31C(a1 + 1136);
  sub_1011DC2B4(a1 + 992);
  sub_1011DC234(a1 + 592);
  sub_1011DC1CC(a1 + 448);
  v14 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_100261F44(a1 + 336);
  sub_100261F44(a1 + 320);
  sub_10041D328(a1 + 272);
  sub_100261F44(a1 + 256);
  sub_10041D328(a1 + 208);
  sub_100261F44(a1 + 192);
  sub_10041D328(a1 + 144);
  sub_100261F44(a1 + 128);
  return sub_1011C8480(a1);
}

uint64_t sub_1011C87D0(uint64_t a1)
{
  return sub_1011C84F4(a1 - 112);
}

uint64_t sub_1011C87D8(uint64_t a1)
{
  return sub_1011C84F4(a1 - 120);
}

void sub_1011C87E0(uint64_t a1)
{
  sub_1011C84F4(a1);
  operator delete();
}

void sub_1011C8804(uint64_t a1)
{
  sub_1011C84F4(a1 - 112);
  operator delete();
}

void sub_1011C882C(uint64_t a1)
{
  sub_1011C84F4(a1 - 120);
  operator delete();
}

void sub_1011C8854(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v8;

  v2 = *(NSObject **)(a1 + 360);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 360));
    *(_QWORD *)(a1 + 360) = 0;
  }
  v3 = *(_QWORD *)(a1 + 5040);
  *(_QWORD *)(a1 + 5040) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 5056);
  *(_QWORD *)(a1 + 5056) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 5048);
  *(_QWORD *)(a1 + 5048) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  dispatch_release(*(dispatch_object_t *)(a1 + 5432));
  v6 = sub_1001FBB04(0);
  sub_1000A4A6C(v6, 4, *(_QWORD *)(a1 + 408));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, CFSTR("NanolifestyleSessionTrackerAppForegroundedNotification"), 0);
  v8 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v8, (const void *)a1, CFSTR("NanolifestyleSessionTrackerAppForegroundedForMachinePairingNotification"), 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);

  *(_QWORD *)(a1 + 2784) = 0;
  *(_BYTE *)(a1 + 108) = 1;
}

void sub_1011C8940(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLNatalieData>::setExpirationRule(CFTimeInterval) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1011C8BF4(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLExerciseMinuteData>::setExpirationRule(CFTimeInterval) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1011C8EA8(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  xpc_activity_state_t v8;
  uint8_t buf[4];
  xpc_activity_state_t state;

  objc_msgSend(*(id *)(a1 + 32), "onCalorieAggregationActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v4 = qword_10229FC98;
      v7 = 134349056;
      v8 = xpc_activity_get_state(a2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::setUpAggregationOnTimer()_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_1011C9090(uint64_t a1, _xpc_activity_s *a2)
{
  double v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  double Current;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  _QWORD *v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  double v42;
  __int16 v43;
  double v44;
  _BYTE buf[1632];
  uint64_t v46;
  NSNumber *v47;

  if (*(_DWORD *)(a1 + 5032) == 1)
  {
    v46 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    *(float *)&v4 = sub_100E0ADC8(a1 + 5168, (float *)(*(_QWORD *)(a1 + 2752) + 1352));
    v47 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4);
    sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1), 0, 0);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Estimating MaxMets", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v41) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Estimating MaxMets", &v41, 2);
      v27 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    CFAbsoluteTimeGetCurrent();
    v6 = nullsub_34(a1 + 4984);
    if (!sub_1011C9E60(v6, a2))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v7 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating CalorieHistory", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        LOWORD(v41) = 0;
        LODWORD(v40) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Aggregating CalorieHistory", &v41, v40);
        v29 = (char *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      sub_1011CA174(a1 + 144);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v8 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating ftp data history", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        LOWORD(v41) = 0;
        LODWORD(v40) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Aggregating ftp data history", &v41, v40);
        v31 = (char *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      sub_101309F8C(a1 + 5192);
      v9 = sub_1011B9850();
      if (v9 == 2)
      {
        Current = CFAbsoluteTimeGetCurrent();
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2776) + 32))(*(_QWORD *)(a1 + 2776), 1))
        {
          v11 = vabdd_f64(Current, *(double *)(a1 + 2824)) + 2.56;
          v12 = vabdd_f64(Current, *(double *)(a1 + 2832));
          v13 = v12 + 2.56;
          if (v11 >= v12 + 2.56)
            v14 = v11;
          else
            v14 = v12 + 2.56;
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v15 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134349312;
            *(double *)&buf[4] = v11;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v13;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Secondary CalorieHistory aggregation with activeDelay, %{public}f, basalDelay, %{public}f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            v41 = 134349312;
            v42 = v11;
            v43 = 2050;
            v44 = v13;
            LODWORD(v40) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Secondary CalorieHistory aggregation with activeDelay, %{public}f, basalDelay, %{public}f", &v41, v40);
            v17 = (char *)v16;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
        }
        else
        {
          v14 = 3600.0;
        }
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v18 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Secondary CalorieHistory aggregation for %{public}f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v41 = 134349056;
          v42 = v14;
          LODWORD(v40) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Secondary CalorieHistory aggregation for %{public}f", &v41, v40);
          v33 = (char *)v32;
          sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        v19 = operator new(0x18uLL);
        *(_QWORD *)buf = v19;
        *(_QWORD *)&buf[16] = v19 + 3;
        *(double *)v19 = v14;
        v19[1] = 0x7FEFFFFFFFFFFFFFLL;
        *((_BYTE *)v19 + 16) = 0;
        *(_QWORD *)&buf[8] = v19 + 3;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), buf);
        v9 = *(_DWORD *)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
      }
      if (!sub_1011C9E60(v9, a2))
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v20 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating MaxMetsHistory", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          LOWORD(v41) = 0;
          LODWORD(v40) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Aggregating MaxMetsHistory", &v41, v40);
          v35 = (char *)v34;
          sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        v21 = sub_1011CA6E8(a1 + 272);
        if (!sub_1011C9E60(v21, a2))
        {
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v22 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating ExerciseMinuteHistory", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            LOWORD(v41) = 0;
            LODWORD(v40) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Aggregating ExerciseMinuteHistory", &v41, v40);
            v37 = (char *)v36;
            sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v36);
            if (v37 != buf)
              free(v37);
          }
          v23 = sub_1011CAC5C(a1 + 208);
          if (!sub_1011C9E60(v23, a2))
          {
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A5F68);
            v24 = qword_10229FC98;
            if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating VO2Max data", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC90 != -1)
                dispatch_once(&qword_10229FC90, &stru_1021A5F68);
              LOWORD(v41) = 0;
              LODWORD(v40) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CalorieAggregation: Aggregating VO2Max data", &v41, v40);
              v39 = (char *)v38;
              sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v38);
              if (v39 != buf)
                free(v39);
            }
            sub_10100E250(a1 + 3168);
            sub_1011C9C94(v25, a2);
          }
        }
      }
    }
  }
  else
  {
    sub_1011C9C94(a1, a2);
  }
}

void sub_1011C9C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011C9C94(int a1, xpc_activity_t activity)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  xpc_activity_state_t v8;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (!xpc_activity_set_state(activity, 5))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      state = xpc_activity_get_state(activity);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark CalorieAggregation activity as done. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v4 = qword_10229FC98;
      v7 = 134349056;
      v8 = xpc_activity_get_state(activity);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "Failed to mark CalorieAggregation activity as done. Current state is %{public}ld", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::markXpcActivityDone(xpc_activity_t)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

BOOL sub_1011C9E60(int a1, xpc_activity_t activity)
{
  _BOOL8 result;
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t state;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t v18;

  result = xpc_activity_should_defer(activity);
  if (result)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to defer CalorieAggregation activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Attempting to defer CalorieAggregation activity", &v15, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::deferXpcActivityIfNecessary(xpc_activity_t)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    if (xpc_activity_set_state(activity, 3))
    {
      return 1;
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v5 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
      {
        state = xpc_activity_get_state(activity);
        *(_DWORD *)buf = 134349056;
        v18 = state;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark CalorieAggregation activity as deferred. Current state is %{public}ld", buf, 0xCu);
      }
      v7 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v10 = qword_10229FC98;
        v11 = xpc_activity_get_state(activity);
        v15 = 134349056;
        v16 = v11;
        LODWORD(v14) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Failed to mark CalorieAggregation activity as deferred. Current state is %{public}ld", &v15, v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::deferXpcActivityIfNecessary(xpc_activity_t)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1011CA174(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1011DC4BC(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1011DC4BC(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1011DC4BC(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1011CA6E8(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1011DC6B8(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1011DC6B8(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1011DC6B8(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1011CAC5C(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1011DC8B4(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1011DC8B4(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1011DC8B4(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1011CB1D0(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  double v38;
  _BYTE v39[48];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  _OWORD v63[5];
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;

  v11 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 2776) + 32))(*(_QWORD *)(v11 + 2776), 1))
  {
    if (a3 >= 1)
    {
      v13 = (void *)sub_1011CB56C(a3, v12, a2[2], a2[8]);
      v14 = *(void **)(v11 + 2800);
      v67 = v13;
      sub_1011CB650((id)v11, a5, v14, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v67, 1));

    }
    v15 = (void *)sub_1011CB56C(a4, v12, a2[2], a2[8]);
    v16 = *(void **)(v11 + 2808);
    v66 = v15;
    sub_1011CB650((id)v11, a6, v16, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v66, 1));

  }
  bzero(&v65, 0x538uLL);
  v17 = *((_OWORD *)a2 + 3);
  v63[2] = *((_OWORD *)a2 + 2);
  v63[3] = v17;
  v63[4] = *((_OWORD *)a2 + 4);
  v64 = *((_QWORD *)a2 + 10);
  v18 = *((_OWORD *)a2 + 1);
  v63[0] = *(_OWORD *)a2;
  v63[1] = v18;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v19 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v20 = *(_DWORD *)a2;
    v21 = *((_QWORD *)a2 + 2);
    v23 = *((_QWORD *)a2 + 7);
    v22 = *((_QWORD *)a2 + 8);
    v24 = *((_DWORD *)a2 + 6);
    v25 = *((_QWORD *)a2 + 4);
    v26 = *((_QWORD *)a2 + 6);
    *(_DWORD *)buf = 67111168;
    v46 = v20;
    v47 = 2048;
    v48 = v21;
    v49 = 2048;
    v50 = v22;
    v51 = 1024;
    v52 = v24;
    v53 = 2048;
    v54 = v25;
    v55 = 2048;
    v56 = v26;
    v57 = 2048;
    v58 = v23;
    v59 = 2048;
    v60 = a3;
    v61 = 2048;
    v62 = a4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "CalorieHistory,recordId,%d,startTime,%.3f,duration,%f,activityType,%d,userMets,%lf,calories,%lld,basalCalories,%lld,incrementalActiveCalories,%lld,incrementalBasalCalories,%lld", buf, 0x54u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v28 = *(_DWORD *)a2;
    v29 = *((_QWORD *)a2 + 2);
    v31 = *((_QWORD *)a2 + 7);
    v30 = *((_QWORD *)a2 + 8);
    v32 = *((_DWORD *)a2 + 6);
    v33 = *((_QWORD *)a2 + 4);
    v34 = *((_QWORD *)a2 + 6);
    LODWORD(v38) = 67111168;
    HIDWORD(v38) = v28;
    *(_WORD *)v39 = 2048;
    *(_QWORD *)&v39[2] = v29;
    *(_WORD *)&v39[10] = 2048;
    *(_QWORD *)&v39[12] = v30;
    *(_WORD *)&v39[20] = 1024;
    *(_DWORD *)&v39[22] = v32;
    *(_WORD *)&v39[26] = 2048;
    *(_QWORD *)&v39[28] = v33;
    *(_WORD *)&v39[36] = 2048;
    *(_QWORD *)&v39[38] = v34;
    *(_WORD *)&v39[46] = 2048;
    v40 = v31;
    v41 = 2048;
    v42 = a3;
    v43 = 2048;
    v44 = a4;
    LODWORD(v37) = 84;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "CalorieHistory,recordId,%d,startTime,%.3f,duration,%f,activityType,%d,userMets,%lf,calories,%lld,basalCalories,%lld,incrementalActiveCalories,%lld,incrementalBasalCalories,%lld", &v38, v37, v38, *(_DWORD *)v39, *(double *)&v39[8], *(_QWORD *)&v39[16], *(_QWORD *)&v39[24], *(_QWORD *)&v39[32], *(_QWORD *)&v39[40]);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  *(_DWORD *)buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 152))(v11, buf, v63, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_1011CB56C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t result;
  id v8;
  id v9;

  result = objc_opt_class(HKQuantity, a2);
  if (result)
  {
    v8 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:duration:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a3 - a4), a4);
    v9 = objc_msgSend(objc_alloc((Class)HKQuantityDatum), "initWithIdentifier:dateInterval:quantity:resumeContext:", +[NSUUID UUID](NSUUID, "UUID"), v8, +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("cal")), (double)a1), 0);

    return (uint64_t)v9;
  }
  return result;
}

id sub_1011CB650(id result, uint64_t a2, void *a3, void *a4)
{
  id v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD v9[6];
  unsigned __int8 v10;

  if ((_DWORD)a2)
  {
    v6 = result;
    result = (id)objc_opt_class(HKQuantity, a2);
    if (result)
    {
      v7 = objc_msgSend(objc_msgSend(a3, "quantityType"), "isEqual:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierActiveEnergyBurned));
      objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a4, "lastObject"), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate");
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1011D4A7C;
      v9[3] = &unk_1021A5E50;
      v9[4] = v6;
      v9[5] = v8;
      v10 = v7;
      return objc_msgSend(a3, "insertDatums:device:metadata:completion:", a4, +[HKDevice localDevice](HKDevice, "localDevice"), 0, v9);
    }
  }
  return result;
}

uint64_t sub_1011CB748(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 32);
  bzero(&v21, 0x578uLL);
  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    *(_DWORD *)buf = 67240448;
    v16 = v5;
    v17 = 2050;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ExerciseMinuteHistory,recordId,%{public}d,startTime,%{public}.3f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = *(_DWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v12[0] = 67240448;
    v12[1] = v8;
    v13 = 2050;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "ExerciseMinuteHistory,recordId,%{public}d,startTime,%{public}.3f", v12, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_DWORD *)buf = 4;
  return (*(uint64_t (**)(uint64_t, uint8_t *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, buf, &v19, 1, 0xFFFFFFFFLL, 0);
}

_QWORD *sub_1011CB968@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_1011CB9E0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  ALActivityLog *v17;
  int v18;
  ALCLBodyMetrics *v19;
  double v20;
  int v21;
  ALCLBodyMetrics *v22;
  double v23;
  int v24;
  ALCLBodyMetrics *v25;
  double v26;
  int v27;
  ALCLBodyMetrics *v28;
  double v29;
  int v30;
  ALCLBodyMetrics *v31;
  double v32;
  int v33;
  ALCLBodyMetrics *v34;
  double v35;
  int v36;
  ALCLBodyMetrics *v37;
  double v38;
  int v39;
  ALCLBodyMetrics *v40;
  double v41;
  CFAbsoluteTime Current;
  __int128 v43;
  __int128 v44;
  _DWORD v45[7];
  _OWORD v46[2];
  _OWORD v47[2];

  objc_msgSend(*(id *)(a1 + 384), "addEntriesFromDictionary:", a2);
  v8 = objc_msgSend(a4, "mutableCopy");
  sub_1011CBCC4(a1, v8);
  v9 = (_OWORD *)(*(_QWORD *)(a1 + 2752) + 1352);
  v10 = *(_OWORD *)(*(_QWORD *)(a1 + 2752) + 1368);
  v46[0] = *v9;
  v46[1] = v10;
  v47[0] = v9[2];
  *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)((char *)v9 + 44);
  if (v8)
    sub_1011CC098((uint64_t)objc_msgSend(*(id *)(a1 + 384), "removeObjectsForKeys:", v8), v8, (uint64_t)v46);

  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v43 = 0u;
  sub_1011CC3E0(a1, *(void **)(a1 + 384), (uint64_t)v46, a3, (uint64_t)&v43);
  if (*(int *)(a1 + 396) >= 1)
  {
    if (objc_msgSend(a2, "objectForKey:", CMNatalimeterSetUserPal))
    {
      v11 = sub_1001FD94C();
      if ((sub_1001FD9FC(v11, (uint64_t)CFSTR("TimeFirstPAL"), (void *)(a1 + 2848)) & 1) == 0)
      {
        v12 = sub_1001FD94C();
        Current = CFAbsoluteTimeGetCurrent();
        sub_10018A534(v12, CFSTR("TimeFirstPAL"), &Current);
      }
    }
  }
  sub_1011C7B6C(a1, &v43);
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserHeightMeter))
  {
    v13 = (int)(float)((float)(*(float *)(*(_QWORD *)(a1 + 2752) + 1360) * 100.0) + 0.5);
    v14 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 + 56) + 16))(v14 + 56, v13);
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v15 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v15 + 56) + 32))(v15 + 56, &v43);
  }
  if (!*(_BYTE *)(a1 + 376) && sub_1011CCC34(a1))
    objc_msgSend(*(id *)(a1 + 384), "removeAllObjects");
  v16 = objc_autoreleasePoolPush();
  v17 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v17, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[ALActivityLog setBodyMetrics:](v17, "setBodyMetrics:", objc_alloc_init(ALCLBodyMetrics));
  -[ALCLBodyMetrics setGender:](-[ALActivityLog bodyMetrics](v17, "bodyMetrics"), "setGender:", v43);
  v18 = DWORD2(v43);
  v19 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v20) = v18;
  -[ALCLBodyMetrics setHeightM:](v19, "setHeightM:", v20);
  v21 = HIDWORD(v43);
  v22 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v23) = v21;
  -[ALCLBodyMetrics setWeightKG:](v22, "setWeightKG:", v23);
  v24 = v44;
  v25 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v26) = v24;
  -[ALCLBodyMetrics setVo2max:](v25, "setVo2max:", v26);
  v27 = DWORD1(v44);
  v28 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v29) = v27;
  -[ALCLBodyMetrics setAge:](v28, "setAge:", v29);
  v30 = DWORD2(v44);
  v31 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v32) = v30;
  -[ALCLBodyMetrics setHrmin:](v31, "setHrmin:", v32);
  v33 = HIDWORD(v44);
  v34 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v35) = v33;
  -[ALCLBodyMetrics setHrmax:](v34, "setHrmax:", v35);
  v36 = v45[0];
  v37 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v38) = v36;
  -[ALCLBodyMetrics setHronset:](v37, "setHronset:", v38);
  v39 = v45[1];
  v40 = -[ALActivityLog bodyMetrics](v17, "bodyMetrics");
  LODWORD(v41) = v39;
  -[ALCLBodyMetrics setPal:](v40, "setPal:", v41);
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v17);
  objc_autoreleasePoolPop(v16);
}

void sub_1011CBCC4(uint64_t a1, void *a2)
{
  uint64_t v4;
  float v5;
  float v6;
  NSObject *v7;
  uint64_t v8;
  float v9;
  float v10;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  uint8_t buf[4];
  double v20;

  v4 = CMNatalimeterSetUserHeightMeter;
  if (objc_msgSend(*(id *)(a1 + 384), "objectForKeyedSubscript:", CMNatalimeterSetUserHeightMeter))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 384), "objectForKeyedSubscript:", v4), "floatValue");
    v6 = v5;
    if (v5 < 0.54 || v5 > 2.73)
    {
      objc_msgSend(*(id *)(a1 + 384), "removeObjectForKey:", v4);
      objc_msgSend(a2, "addObject:", v4);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v7 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "UserProfile, Error in user info,heightM,%f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v17 = 134217984;
        v18 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "UserProfile, Error in user info,heightM,%f", COERCE_DOUBLE(&v17));
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::sanitizeUserProfile(NSMutableArray<NSString *> *)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
  v8 = CMNatalimeterSetUserAgeYr;
  if (objc_msgSend(*(id *)(a1 + 384), "objectForKeyedSubscript:", CMNatalimeterSetUserAgeYr))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 384), "objectForKeyedSubscript:", v8), "floatValue");
    v10 = v9;
    if (v9 < 5.0 || v9 > 150.0)
    {
      objc_msgSend(*(id *)(a1 + 384), "removeObjectForKey:", v8);
      objc_msgSend(a2, "addObject:", v8);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v12 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "UserProfile, Error in user info,ageYr,%f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v17 = 134217984;
        v18 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "UserProfile, Error in user info,ageYr,%f", COERCE_DOUBLE(&v17));
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::sanitizeUserProfile(NSMutableArray<NSString *> *)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
}

id sub_1011CC098(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  void *v10;
  uint8_t buf[4];
  void *v12;

  result = objc_msgSend(a2, "count");
  if (result)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "UserProfile, resetting CLBodyMetrics for keys: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v9 = 138477827;
      v10 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, resetting CLBodyMetrics for keys: %{private}@", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::resetBodyMetricFieldsForKeys(NSArray<NSString *> *, CLBodyMetrics &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserBiologicalSex))
      *(_QWORD *)a3 = 1;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserHeightMeter))
    {
      *(_BYTE *)(a3 + 57) = 0;
      *(_DWORD *)(a3 + 8) = 1071225242;
    }
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserWeightKG))
    {
      *(_BYTE *)(a3 + 58) = 0;
      *(_DWORD *)(a3 + 12) = 1116213084;
    }
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserAgeYr))
    {
      *(_BYTE *)(a3 + 56) = 0;
      *(_DWORD *)(a3 + 20) = 1106247680;
    }
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserPal))
      *(_DWORD *)(a3 + 36) = 1082130432;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserHrmin))
      *(_DWORD *)(a3 + 24) = 1115815936;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserVo2max))
      *(_DWORD *)(a3 + 16) = 1092616192;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserRunVo2max))
      *(_DWORD *)(a3 + 44) = 1092616192;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold))
      *(_DWORD *)(a3 + 52) = -1082130432;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserHronset))
      *(_DWORD *)(a3 + 32) = 1115815936;
    if (objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserCondition))
      *(_DWORD *)(a3 + 40) = 0;
    result = objc_msgSend(a2, "containsObject:", CMNatalimeterSetUserBetaBlockerUse);
    if ((_DWORD)result)
      *(_BYTE *)(a3 + 48) = 0;
  }
  return result;
}

void sub_1011CC3E0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  __int128 v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _BOOL4 v47;
  double v48;
  double v49;
  NSObject *v50;
  double v51;
  int v52;
  double v53;
  double v54;
  double v55;
  NSObject *v56;
  double v57;
  int v58;
  double v59;
  double v60;
  double v61;
  const char *v62;
  uint8_t *v63;
  const char *v64;
  uint8_t *v65;
  uint64_t v66;
  _BOOL4 v67;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  int v72;
  double v73;
  __int16 v74;
  int v75;
  __int16 v76;
  _BOOL4 v77;
  __int16 v78;
  double v79;
  __int16 v80;
  int v81;
  __int16 v82;
  double v83;
  __int16 v84;
  _BOOL4 v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  int v95;
  __int16 v96;
  _BOOL4 v97;
  __int16 v98;
  double v99;
  uint8_t buf[4];
  double v101;
  __int16 v102;
  int v103;
  __int16 v104;
  _BOOL4 v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  double v111;
  __int16 v112;
  _BOOL4 v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  int v123;
  __int16 v124;
  _BOOL4 v125;
  __int16 v126;
  double v127;

  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a3;
  *(_OWORD *)(a5 + 16) = v9;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a5 + 44) = *(_OWORD *)(a3 + 44);
  v10 = CMNatalimeterSetUserBiologicalSex;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserBiologicalSex))
  {
    v11 = sub_100653354((uint64_t)objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v10), "intValue"));
    *(_DWORD *)a5 = v11 != 2;
    *(_DWORD *)(a5 + 4) = v11;
  }
  v12 = CMNatalimeterSetUserHeightMeter;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserHeightMeter))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v12), "floatValue");
    *(_BYTE *)(a5 + 57) = 1;
    *(_DWORD *)(a5 + 8) = v13;
  }
  v14 = CMNatalimeterSetUserWeightKG;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserWeightKG))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v14), "floatValue");
    *(_BYTE *)(a5 + 58) = 1;
    *(_DWORD *)(a5 + 12) = v15;
  }
  v16 = CMNatalimeterSetUserAgeYr;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserAgeYr))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v16), "floatValue");
    *(_BYTE *)(a5 + 56) = 1;
    *(_DWORD *)(a5 + 20) = v17;
  }
  v18 = CMNatalimeterSetUserPal;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserPal))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v18), "floatValue");
    *(float *)(a5 + 36) = v19;
    *(_DWORD *)(a1 + 400) = (int)(float)(*(float *)(a3 + 36) - v19);
  }
  v20 = CMNatalimeterSetUserHronset;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserHronset))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v20), "floatValue");
    *(_DWORD *)(a5 + 32) = v21;
  }
  v22 = CMNatalimeterSetUserCondition;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserCondition))
    *(_DWORD *)(a5 + 40) = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v22), "intValue");
  v23 = CMNatalimeterSetUserBetaBlockerUse;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserBetaBlockerUse))
    *(_BYTE *)(a5 + 48) = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v23), "BOOLValue");
  v24 = CMNatalimeterSetUserRunVo2max;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserRunVo2max))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v24), "floatValue");
    *(_DWORD *)(a5 + 44) = v25;
  }
  v26 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v26), "floatValue");
    *(_DWORD *)(a5 + 52) = v27;
  }
  v28 = CMNatalimeterSetUserVo2max;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserVo2max))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v28), "floatValue");
    *(_DWORD *)(a5 + 16) = v29;
  }
  v30 = CMNatalimeterSetUserHrmax;
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserHrmax))
  {
    objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v30), "floatValue");
    *(_DWORD *)(a5 + 28) = v31;
  }
  sub_10065403C(a5);
  *(_DWORD *)(a5 + 24) = v32;
  v33 = *(unsigned __int8 *)(a3 + 48);
  v34 = *(unsigned __int8 *)(a5 + 48);
  if (a4)
  {
    v35 = objc_msgSend(a2, "objectForKeyedSubscript:", v24);
    v36 = CMNatalimeterSetUserOnsetVo2max;
    v37 = objc_msgSend(a2, "objectForKeyedSubscript:", CMNatalimeterSetUserOnsetVo2max);
    v38 = objc_msgSend(a2, "objectForKeyedSubscript:", v18);
    v39 = *(_OWORD *)(a5 + 16);
    v69 = *(_OWORD *)a5;
    v70 = v39;
    v71[0] = *(_OWORD *)(a5 + 32);
    *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(a5 + 44);
    sub_100653518((uint64_t)&v69);
    v41 = v40;
    v42 = 7.0;
    if (v37)
    {
      objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v36), "floatValue");
      v42 = v43;
    }
    v44 = *(float *)(a5 + 44);
    if (!*(_BYTE *)(a1 + 392))
      v44 = 7.0;
    v45 = fmaxf(fmaxf(v44, v41), v42);
    v46 = v45;
    if (v33 == v34)
      v46 = sub_1011CCFD0(a1, v45, *(float *)(a3 + 16));
    HIDWORD(v66) = v37 != 0;
    v67 = v38 != 0;
    v47 = v35 != 0;
    *(float *)(a5 + 16) = fmaxf(v46, 7.0);
    v48 = v41;
    v49 = v45;
  }
  else
  {
    HIDWORD(v66) = 0;
    v67 = 0;
    v47 = 0;
    v46 = 7.0;
    v49 = 7.0;
    v42 = 7.0;
    v48 = 7.0;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v50 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v51 = *(float *)(a5 + 44);
    v52 = *(unsigned __int8 *)(a1 + 392);
    v53 = *(float *)(a3 + 16);
    v54 = *(float *)(a5 + 16);
    v55 = *(float *)(a5 + 52);
    *(_DWORD *)buf = 134221312;
    v101 = v51;
    v102 = 1024;
    v103 = v52;
    v104 = 1024;
    v105 = v47;
    v106 = 2048;
    v107 = v42;
    v108 = 1024;
    v109 = HIDWORD(v66);
    v110 = 2048;
    v111 = v48;
    v112 = 1024;
    v113 = v67;
    v114 = 2048;
    v115 = v53;
    v116 = 2048;
    v117 = v49;
    v118 = 2048;
    v119 = v46;
    v120 = 2048;
    v121 = v54;
    v122 = 1024;
    v123 = a4;
    v124 = 1024;
    v125 = v33 != v34;
    v126 = 2048;
    v127 = v55;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "UserProfile,runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d,betaBlockerUseChanged,%d,adaptiveEmThresh,%f", buf, 0x76u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v57 = *(float *)(a5 + 44);
    v58 = *(unsigned __int8 *)(a1 + 392);
    v59 = *(float *)(a3 + 16);
    v60 = *(float *)(a5 + 16);
    v61 = *(float *)(a5 + 52);
    v72 = 134221312;
    v73 = v57;
    v74 = 1024;
    v75 = v58;
    v76 = 1024;
    v77 = v47;
    v78 = 2048;
    v79 = v42;
    v80 = 1024;
    v81 = HIDWORD(v66);
    v82 = 2048;
    v83 = v48;
    v84 = 1024;
    v85 = v67;
    v86 = 2048;
    v87 = v59;
    v88 = 2048;
    v89 = v49;
    v90 = 2048;
    v91 = v46;
    v92 = 2048;
    v93 = v60;
    v94 = 1024;
    v95 = a4;
    v96 = 1024;
    v97 = v33 != v34;
    v98 = 2048;
    v99 = v61;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "UserProfile,runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d,betaBlockerUseChanged,%d,adaptiveEmThresh,%f", COERCE_DOUBLE(&v72), 118, v67, *(double *)&a1, (_DWORD)v69, *((double *)&v69 + 1), (_DWORD)v70, *((double *)&v70 + 1), *(double *)v71,
      *((double *)v71 + 1),
      *(double *)&v71[1],
      DWORD2(v71[1]));
    v63 = (uint8_t *)v62;
    sub_100512490("Generic", 1, 0, 2, "CLBodyMetrics CLNatalimetryNotifier::setUserProfileToBodyMetrics(NSDictionary *, const CLBodyMetrics &, BOOL) const", "%s\n", v62);
    if (v63 != buf)
      free(v63);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v56 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138477827;
    v101 = *(double *)&a2;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "UserProfile, update completed with result, %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v72 = 138477827;
    v73 = *(double *)&a2;
    LODWORD(v66) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "UserProfile, update completed with result, %{private}@", &v72, v66);
    v65 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 2, "CLBodyMetrics CLNatalimetryNotifier::setUserProfileToBodyMetrics(NSDictionary *, const CLBodyMetrics &, BOOL) const", "%s\n", v64);
    if (v65 != buf)
      free(v65);
  }
}

uint64_t sub_1011CCC34(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20[2];
  uint8_t buf[16];
  __int128 v22;
  _BYTE v23[28];

  v2 = *(_QWORD *)(a1 + 368);
  if (v2)
  {
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 2752) + 1352);
    *(_OWORD *)&v23[12] = *(_OWORD *)(*(_QWORD *)(a1 + 2752) + 1396);
    v4 = v3[1];
    *(_OWORD *)buf = *v3;
    v22 = v4;
    *(_OWORD *)v23 = v3[2];
    if (v23[25])
    {
      v20[0] = *(float *)&buf[8];
      sub_10018A534(v2, CMNatalimeterSetUserHeightMeter, v20);
    }
    else
    {
      sub_1005254E4(v2);
    }
    v10 = *(_QWORD *)(a1 + 368);
    if (v23[26])
    {
      v20[0] = *(float *)&buf[12];
      sub_10018A534(v10, CMNatalimeterSetUserWeightKG, v20);
    }
    else
    {
      sub_1005254E4(v10);
    }
    v11 = *(_QWORD *)(a1 + 368);
    if (v23[24])
    {
      v20[0] = *((float *)&v22 + 1);
      sub_10018A534(v11, CMNatalimeterSetUserAgeYr, v20);
    }
    else
    {
      sub_1005254E4(v11);
    }
    v12 = *(_QWORD *)(a1 + 368);
    LODWORD(v20[0]) = *(_DWORD *)buf;
    sub_10011B5B8(v12, CMNatalimeterSetUserBiologicalSex, v20);
    v13 = *(_QWORD *)(a1 + 368);
    LODWORD(v20[0]) = *(_DWORD *)&buf[4];
    sub_10011B5B8(v13, CFSTR("HKBiologicalSex"), v20);
    v14 = *(_QWORD *)(a1 + 368);
    v20[0] = *(float *)&v23[4];
    sub_10018A534(v14, CMNatalimeterSetUserPal, v20);
    v15 = *(_QWORD *)(a1 + 368);
    v20[0] = *((float *)&v22 + 2);
    sub_10018A534(v15, CMNatalimeterSetUserHrmin, v20);
    v16 = *(_QWORD *)(a1 + 368);
    v20[0] = *(float *)&v22;
    sub_10018A534(v16, CMNatalimeterSetUserVo2max, v20);
    v17 = *(_QWORD *)(a1 + 368);
    v20[0] = *(float *)&v23[12];
    sub_10018A534(v17, CMNatalimeterSetUserRunVo2max, v20);
    v18 = *(_QWORD *)(a1 + 368);
    v20[0] = *(float *)&v23[20];
    sub_10018A534(v18, CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold, v20);
    v19 = *(_QWORD *)(a1 + 368);
    LODWORD(v20[0]) = *(_DWORD *)&v23[8];
    sub_10011B5B8(v19, CMNatalimeterSetUserCondition, v20);
    sub_10011B81C(*(_QWORD *)(a1 + 368), CMNatalimeterSetUserBetaBlockerUse, &v23[16]);
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 944))(*(_QWORD *)(a1 + 368));
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "UserProfile, Persistent store not yet initialized ", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v20[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "UserProfile, Persistent store not yet initialized ", v20, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::persistCachedValues()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
      return 0;
    }
  }
  return result;
}

float sub_1011CCFD0(uint64_t a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  double v13;
  int v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  double v20;
  int v21;
  _DWORD v22[2];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;

  v21 = 0;
  v20 = 2.22507386e-308;
  v6 = sub_1001FD94C();
  sub_1001C1194(v6, (uint64_t)CFSTR("NumActiveCalibrations"), &v21);
  v7 = sub_1001FD94C();
  sub_1001FD9FC(v7, (uint64_t)CFSTR("TimeFirstPAL"), &v20);
  v8 = a2 - a3;
  v9 = (float)(v8 * 100.0) / a3;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v10 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(a1 + 2840);
    v12 = *(_QWORD *)(a1 + 2848);
    *(_DWORD *)buf = 67109632;
    v28 = v11;
    v29 = 2048;
    v30 = v12;
    v31 = 2048;
    v32 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "UserProfile, Number of active vo2max calibrations, %d, first PAL estimate at, %.3f, VO2max delta, %f", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v15 = *(_DWORD *)(a1 + 2840);
    v16 = *(_QWORD *)(a1 + 2848);
    v22[0] = 67109632;
    v22[1] = v15;
    v23 = 2048;
    v24 = v16;
    v25 = 2048;
    v26 = v9;
    LODWORD(v19) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Number of active vo2max calibrations, %d, first PAL estimate at, %.3f, VO2max delta, %f", v22, v19, v20);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "float CLNatalimetryNotifier::mergeVo2max(float, float) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v13 = -2.0;
  if (v9 > 0.0)
    v13 = 20.0;
  return v13 * fabsf(v8) / 100.0 + a3;
}

BOOL sub_1011CD250(uint64_t a1)
{
  int v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _DWORD v6[4];
  uint8_t buf[1640];

  v1 = *(unsigned __int8 *)(a1 + 376);
  if (!*(_BYTE *)(a1 + 376))
    operator new();
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "UserProfile, read before device unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    LOWORD(v6[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, read before device unlock", v6, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::readFromDisk(CLBodyMetrics &)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v1 == 0;
}

void sub_1011CD64C()
{
  operator delete();
}

uint64_t sub_1011CD678(_QWORD *a1)
{
  double Current;
  NSObject *v3;
  uint8_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  double v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;

  Current = CFAbsoluteTimeGetCurrent();
  if (sub_1011CDA40(a1 + 56, &v12) && vabdd_f64(*(double *)&v12, Current) < 10.0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218752;
      v23 = Current;
      v24 = 2048;
      v25 = v12;
      v26 = 2048;
      v27 = v13;
      v28 = 1024;
      v29 = 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v14 = 134218752;
      v15 = Current;
      v16 = 2048;
      v17 = v12;
      v18 = 2048;
      v19 = v13;
      v20 = 1024;
      v21 = 1;
      LODWORD(v11) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d", COERCE_DOUBLE(&v14), v11, *(double *)&v12, DWORD2(v12));
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::checkAndNotifyGpsAvailability()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v4 = 1;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v23 = Current;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "GPS not available at time %lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v14 = 134217984;
      v15 = Current;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "GPS not available at time %lf", COERCE_DOUBLE(&v14));
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::checkAndNotifyGpsAvailability()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = 0;
  }
  bzero(buf, 0x590uLL);
  buf[0] = v4;
  v14 = 1;
  return (*(uint64_t (**)(_QWORD *, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, &v14, buf, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_1011CDA40(_QWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = a1[4];
  if (a1[5] == v2)
    return 0;
  v3 = a1[7];
  v4 = v3 + a1[8];
  v5 = v4 / 0x15;
  v6 = v4 % 0x15;
  v7 = *(_QWORD *)(v2 + 8 * (v4 / 0x15)) + 192 * (v4 % 0x15);
  if (v7 == *(_QWORD *)(v2 + 8 * (v3 / 0x15)) + 192 * (v3 % 0x15))
    return 0;
  if (!v6)
    v7 = *(_QWORD *)(v2 + 8 * v5 - 8) + 4032;
  v8 = *(_OWORD *)(v7 - 192);
  v9 = *(_OWORD *)(v7 - 176);
  v10 = *(_OWORD *)(v7 - 144);
  a2[2] = *(_OWORD *)(v7 - 160);
  a2[3] = v10;
  *a2 = v8;
  a2[1] = v9;
  v11 = *(_OWORD *)(v7 - 128);
  v12 = *(_OWORD *)(v7 - 112);
  v13 = *(_OWORD *)(v7 - 80);
  a2[6] = *(_OWORD *)(v7 - 96);
  a2[7] = v13;
  a2[4] = v11;
  a2[5] = v12;
  v14 = *(_OWORD *)(v7 - 64);
  v15 = *(_OWORD *)(v7 - 48);
  v16 = *(_OWORD *)(v7 - 16);
  a2[10] = *(_OWORD *)(v7 - 32);
  a2[11] = v16;
  a2[8] = v14;
  a2[9] = v15;
  return 1;
}

void sub_1011CDAFC(uint64_t a1, uint64_t a2)
{
  id v4;
  NSDate *v5;
  HKQuantity *v6;
  id v7;
  id v8;
  void *v9;
  HKQuantitySample *v10;
  void *v11;
  HKQuantitySample *v12;

  if (objc_opt_class(HKQuantity, a2))
  {
    v4 = +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierVO2Max);
    v5 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2);
    v6 = +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("ml/(kg*min)")), round(*(double *)(a2 + 16) * 100.0) / 100.0);
    if (uuid_is_null((const unsigned __int8 *)(a2 + 28)))
      v7 = 0;
    else
      v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 28);
    v8 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", &off_10221CFE0, HKMetadataKeyVO2MaxTestType);
    if (*(_BYTE *)(a2 + 25))
      v9 = &__kCFBooleanTrue;
    else
      v9 = &__kCFBooleanFalse;
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, _HKPrivateMetadataKeyUserOnBetaBlocker);
    if (v7)
    {
      objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(v7, "UUIDString"), HKMetadataKeySyncIdentifier);
      objc_msgSend(v8, "setObject:forKeyedSubscript:", &off_10221CFF8, HKMetadataKeySyncVersion);
    }
    v10 = +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:metadata:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:metadata:", v4, v6, v5, v5, v8);
    v11 = *(void **)(a1 + 2784);
    v12 = v10;
    objc_msgSend(v11, "saveObjects:withCompletion:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1), &stru_1021A5E10);

  }
}

uint64_t sub_1011CDD14()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  v7 = 0;
  v0 = sub_100127B9C();
  sub_100081C10(v0, &v5);
  sub_1001E4874(v5, "ForceTriggerVO2MaxAlert", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_100197040();
  LODWORD(result) = sub_10075D288();
  if (v7)
    return result;
  else
    return 0;
}

void sub_1011CDDA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1011CDDBC(uint64_t a1)
{
  uint64_t v1;
  id result;
  void *v3;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  result = (id)sub_1011CDE28(v1);
  if ((_DWORD)result)
  {
    v3 = *(void **)(v1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1011CE1A8;
    v4[3] = &unk_10212ECA0;
    v4[4] = v1;
    return objc_msgSend(v3, "async:", v4);
  }
  return result;
}

BOOL sub_1011CDE28(uint64_t a1)
{
  id v1;
  id v2;
  NSObject *v3;
  _BOOL4 v4;
  _BOOL8 result;
  const char *v6;
  uint8_t *v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  const char *v15;
  uint8_t *v16;
  void *v17;
  int v18;
  id v19;
  __int16 v20;
  id v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  id v25;

  v1 = objc_msgSend(objc_alloc((Class)HKHRCardioFitnessFeatureStatusManager), "initWithHealthStore:", *(_QWORD *)(a1 + 2784));
  v17 = 0;
  v2 = objc_msgSend(v1, "notificationStatusWithError:", &v17);
  if (v17)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error retrieving cardio fitness notification status, %{public}@", buf, 0xCu);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v18 = 138543362;
      v19 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Error retrieving cardio fitness notification status, %{public}@", &v18, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::isVO2MaxAlertEnabled() const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  else
  {
    v8 = v2;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(v8, "state");
      v11 = objc_msgSend(v8, "notificationUnavailableReasons");
      *(_DWORD *)buf = 134349312;
      v23 = v10;
      v24 = 2050;
      v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Cardio fitness, notificationState, %{public}ld, notificationUnavailableReasons, %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v12 = qword_10229FC98;
      v13 = objc_msgSend(v8, "state");
      v14 = objc_msgSend(v8, "notificationUnavailableReasons");
      v18 = 134349312;
      v19 = v13;
      v20 = 2050;
      v21 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "Cardio fitness, notificationState, %{public}ld, notificationUnavailableReasons, %{public}ld", &v18, 22);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::isVO2MaxAlertEnabled() const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    return objc_msgSend(v8, "state") == (id)1;
  }
  return result;
}

void sub_1011CE1A8(uint64_t a1)
{
  sub_1011CE1B4(*(_QWORD *)(a1 + 32), 1);
}

void sub_1011CE1B4(uint64_t a1, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  _BOOL4 v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  double v38[5];
  BOOL v39;
  _DWORD v40[2];
  _BYTE v41[7];
  _BYTE v42[7];
  BOOL v43;
  double v44;
  double Current;
  double v46;
  _QWORD v47[3];
  uint64_t v48;
  int v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  _BOOL4 v58;
  _BYTE buf[24];
  _BYTE v60[10];
  _BYTE v61[14];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(double *)&v48 = 15.0;
  v4 = sub_100127B9C();
  sub_100081C10(v4, buf);
  sub_1001FD98C(*(uint64_t *)buf, "FakeCardioFitnessVO2Max", &v48);
  v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_100CD89E0(v47);
  v8 = *(_QWORD *)(a1 + 2752);
  v9 = *(_BYTE *)(v8 + 1400);
  v46 = sub_100CD8DE4(v47, *(_DWORD *)(v8 + 1356), (int)*(float *)(v8 + 1372));
  v10 = sub_100127B9C();
  sub_100081C10(v10, buf);
  sub_1001FD98C(*(uint64_t *)buf, "FakeCardioFitnessThreshold", &v46);
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  Current = CFAbsoluteTimeGetCurrent();
  v14 = sub_100127B9C();
  sub_100081C10(v14, buf);
  sub_1001FD98C(*(uint64_t *)buf, "FakeCardioFitnessEndTime", &Current);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v44 = Current + -5184000.0;
  v18 = sub_100127B9C();
  sub_100081C10(v18, buf);
  sub_1001FD98C(*(uint64_t *)buf, "FakeCardioFitnessStartTime", &v44);
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v43 = 0;
  v22 = sub_100127B9C();
  sub_100081C10(v22, buf);
  sub_1001E4874(*(uint64_t *)buf, "FakeCardioFitnessIsRepeatAlert", &v43);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(double *)&v48;
  v28 = Current;
  v27 = v46;
  v29 = v44;
  v30 = v43;
  if (a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v31 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283777;
      *(double *)&buf[4] = v26;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v28;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Forcing a fake VO2Max sample: vo2Max, %{private}.2f, startTime, %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v49 = 134283777;
      v50 = v26;
      v51 = 2050;
      v52 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Forcing a fake VO2Max sample: vo2Max, %{private}.2f, startTime, %{public}f", &v49, 22);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeFakeCardioFitnessEventToHealthKit(BOOL) const", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    *(double *)buf = v28;
    *(_QWORD *)&buf[8] = 0;
    *(double *)&buf[16] = v26;
    v60[0] = 0;
    v60[1] = v9 & 1;
    *(_QWORD *)v61 = 0;
    *(_QWORD *)&v60[2] = 0;
    *(_DWORD *)&v61[7] = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    uuid_clear(&v60[4]);
    sub_1011CDAFC(a1, (uint64_t)buf);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v32 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134284545;
    *(double *)&buf[4] = v26;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = v27;
    *(_WORD *)&buf[22] = 2050;
    *(double *)v60 = v29;
    *(_WORD *)&v60[8] = 2050;
    *(double *)v61 = v28;
    *(_WORD *)&v61[8] = 1025;
    *(_DWORD *)&v61[10] = v30;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Forcing a fake Cardio Fitness Event: latestVO2Max, %{private}.2f, lowClassificationThreshold, %{private}.2f, alertPeriodStartTime, %{public}f, alertPeriodEndTime, %{public}f, isRepeatAlert, %{private}d", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v49 = 134284545;
    v50 = v26;
    v51 = 2049;
    v52 = v27;
    v53 = 2050;
    v54 = v29;
    v55 = 2050;
    v56 = v28;
    v57 = 1025;
    v58 = v30;
    LODWORD(v37) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Forcing a fake Cardio Fitness Event: latestVO2Max, %{private}.2f, lowClassificationThreshold, %{private}.2f, alertPeriodStartTime, %{public}f, alertPeriodEndTime, %{public}f, isRepeatAlert, %{private}d", &v49, v37);
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeFakeCardioFitnessEventToHealthKit(BOOL) const", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  LOBYTE(v38[0]) = 1;
  *(_DWORD *)((char *)v38 + 1) = *(_DWORD *)v42;
  HIDWORD(v38[0]) = *(_DWORD *)&v42[3];
  v38[1] = v26;
  v38[2] = v27;
  v38[3] = v29;
  v38[4] = v28;
  v39 = v30;
  v40[0] = *(_DWORD *)v41;
  *(_DWORD *)((char *)v40 + 3) = *(_DWORD *)&v41[3];
  sub_1011D386C(a1, v38);
  *(_QWORD *)buf = v47;
  sub_10025E1F0((void ***)buf);
}

void sub_1011CE800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a23;
  sub_10025E1F0(&a33);
  _Unwind_Resume(a1);
}

float sub_1011CE874(uint64_t a1, CFAbsoluteTime Current, uint64_t a3, int *a4, uint64_t a5)
{
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CFAbsoluteTime v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  int v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  double v40;
  double v41;
  float v42;
  float v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  uint64_t v51;
  NSNumber *v52;
  __int128 buf;
  double v54;
  BOOL v55;
  CFAbsoluteTime v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  NSNumber *v67;

  switch(*a4)
  {
    case 2:
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v8 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(a5 + 8);
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Received Onset notification from CatherineNotifier (%f bpm)!", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v44 = *(_QWORD *)(a5 + 8);
        LODWORD(v59) = 134217984;
        *(_QWORD *)((char *)&v59 + 4) = v44;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Received Onset notification from CatherineNotifier (%f bpm)!", COERCE_DOUBLE(&v59));
        v46 = (char *)v45;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v45);
        if (v46 != (char *)&buf)
          free(v46);
      }
      v66 = CMNatalimeterSetUserHronset;
      v67 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a5 + 8));
      sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v67, &v66, 1), 0, 0);
      if ((*(_DWORD *)a5 - 3) <= 1)
      {
        v10 = *(_OWORD *)a5;
        v11 = *(_OWORD *)(a5 + 16);
        v12 = *(_OWORD *)(a5 + 48);
        *(_OWORD *)(a1 + 2888) = *(_OWORD *)(a5 + 32);
        *(_OWORD *)(a1 + 2904) = v12;
        *(_OWORD *)(a1 + 2856) = v10;
        *(_OWORD *)(a1 + 2872) = v11;
        *(_BYTE *)(a1 + 2928) = 1;
      }
      Current = CFAbsoluteTimeGetCurrent();
      if (*(_BYTE *)(a1 + 353))
      {
        v13 = Current;
        *(_QWORD *)&v59 = off_102171BF8;
        *((CFAbsoluteTime *)&v59 + 1) = Current;
        v60 = *(_QWORD *)a5;
        v61 = *(_OWORD *)(a5 + 8);
        v62 = *(_BYTE *)(a5 + 24);
        v63 = *(_OWORD *)(a5 + 32);
        v64 = *(_QWORD *)(a5 + 48);
        v65 = *(_DWORD *)(a5 + 56) == 5;
        v14 = sub_1011B78D4();
        sub_1011B8DB0(v14, (uint64_t)&v59);
        sub_1015EB864(&buf);
        sub_1016053AC((uint64_t)&buf);
        v58 |= 1u;
        v56 = v13;
        v15 = v57;
        v16 = *(_DWORD *)a5;
        *(_WORD *)(v57 + 68) |= 0x40u;
        *(_DWORD *)(v15 + 52) = v16;
        v17 = v57;
        v18 = *(_DWORD *)(a5 + 4);
        *(_WORD *)(v57 + 68) |= 0x80u;
        *(_DWORD *)(v17 + 56) = v18;
        v19 = v57;
        v20 = *(_QWORD *)(a5 + 8);
        *(_WORD *)(v57 + 68) |= 2u;
        *(_QWORD *)(v19 + 16) = v20;
        v21 = v57;
        v22 = *(_QWORD *)(a5 + 16);
        *(_WORD *)(v57 + 68) |= 1u;
        *(_QWORD *)(v21 + 8) = v22;
        v23 = v57;
        LOBYTE(v18) = *(_BYTE *)(a5 + 24);
        *(_WORD *)(v57 + 68) |= 0x200u;
        *(_BYTE *)(v23 + 64) = v18;
        v24 = v57;
        v25 = *(_QWORD *)(a5 + 32);
        *(_WORD *)(v57 + 68) |= 0x10u;
        *(_QWORD *)(v24 + 40) = v25;
        v26 = v57;
        v27 = *(_QWORD *)(a5 + 40);
        *(_WORD *)(v57 + 68) |= 8u;
        *(_QWORD *)(v26 + 32) = v27;
        v28 = v57;
        v29 = *(_QWORD *)(a5 + 48);
        *(_WORD *)(v57 + 68) |= 4u;
        *(_QWORD *)(v28 + 24) = v29;
        v30 = v57;
        v31 = *(_DWORD *)(a5 + 56);
        *(_WORD *)(v57 + 68) |= 0x20u;
        *(_DWORD *)(v30 + 48) = v31;
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021A6870);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)&buf);
        sub_1015EE304((PB::Base *)&buf);
      }
      break;
    case 3:
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v32 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v33 = *(_QWORD *)(a5 + 8);
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Updating min. HR, %f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v47 = *(_QWORD *)(a5 + 8);
        LODWORD(v59) = 134217984;
        *(_QWORD *)((char *)&v59 + 4) = v47;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Updating min. HR, %f", COERCE_DOUBLE(&v59));
        v49 = (char *)v48;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v48);
        if (v49 != (char *)&buf)
          free(v49);
      }
      v51 = CMNatalimeterSetUserHrmin;
      v52 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a5 + 8));
      sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1), 0, 0);
      break;
    case 5:
      sub_10100EBC8(a1 + 3168, (int *)a5);
      sub_100F03F50((_QWORD *)(a1 + 5096), a5);
      v39 = *(_QWORD *)(a5 + 8);
      v40 = *(double *)(a5 + 16);
      *(_QWORD *)&buf = *(_QWORD *)(a5 + 40);
      *((_QWORD *)&buf + 1) = v39;
      v55 = *(_DWORD *)a5 == 4;
      v41 = 1.0;
      if (!v55)
        v41 = v40;
      v54 = v41;
      LODWORD(Current) = sub_1011DCFB0((_QWORD *)(a1 + 1304), (uint64_t)&buf).n128_u32[0];
      break;
    case 6:
      if (*(_DWORD *)(a5 + 24) == 2)
        *(float *)&Current = sub_10100ECAC(a1 + 3168, *(double *)(a5 + 16));
      break;
    case 7:
      v42 = *(double *)(a5 + 16);
      v43 = *(double *)(a5 + 24);
      sub_10100EC38(a1 + 3168, v42, v43);
      break;
    default:
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v34 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
      {
        v35 = *a4;
        LODWORD(buf) = 67240192;
        DWORD1(buf) = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Natalimetry Notifier received unexpected catherine type: %{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v36 = *a4;
        LODWORD(v59) = 67240192;
        DWORD1(v59) = v36;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Natalimetry Notifier received unexpected catherine type: %{public}d", &v59, 8);
        v38 = (char *)v37;
        sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v37);
        if (v38 != (char *)&buf)
          free(v38);
      }
      break;
  }
  return *(float *)&Current;
}

void sub_1011CF070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

double sub_1011CF0A8(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_1011DCFB0((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

void sub_1011CF0B0(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  double v11;
  int v12;
  int v13;
  _BOOL4 v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  NSNumber *v18;
  _DWORD v19[2];
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  _BOOL4 v27;
  __int16 v28;
  int v29;

  if (*a3 == 1)
  {
    *(_BYTE *)(a1 + 377) = *((_BYTE *)a4 + 4);
  }
  else if (!*a3)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 376);
      v8 = *a4;
      v9 = *a4 != 1;
      *(_DWORD *)buf = 67109632;
      v25 = v7;
      v26 = 1024;
      v27 = v9;
      v28 = 1024;
      v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "UserProfile, Encrypted data availability, was, %d, now, %d, availability, %d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v12 = *(unsigned __int8 *)(a1 + 376);
      v13 = *a4;
      v14 = *a4 != 1;
      v19[0] = 67109632;
      v19[1] = v12;
      v20 = 1024;
      v21 = v14;
      v22 = 1024;
      v23 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Encrypted data availability, was, %d, now, %d, availability, %d", v19, 20, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v10 = *a4 == 1;
    *(_BYTE *)(a1 + 376) = *a4 != 1;
    if (v10)
    {
      if (!*(_BYTE *)(a1 + 416))
        sub_1011C7CB4(a1);
      v17 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
      *(float *)&v11 = sub_100E0ADC8(a1 + 5168, (float *)(*(_QWORD *)(a1 + 2752) + 1352));
      v18 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11);
      sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1), 0, 0);
      if (objc_msgSend(*(id *)(a1 + 384), "count"))
      {
        if (sub_1011CCC34(a1))
          objc_msgSend(*(id *)(a1 + 384), "removeAllObjects");
      }
    }
    sub_10113B760(a1 + 2936, *(_BYTE *)(a1 + 376) == 0);
  }
}

void sub_1011CF37C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[1640];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 376);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "UserProfile, Received from SPU, data protection enabled %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = *(unsigned __int8 *)(a1 + 376);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "UserProfile, Received from SPU, data protection enabled %d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onStoredUserInfo(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (!*(_BYTE *)(a1 + 416))
  {
    sub_1011CC3E0(a1, *(void **)(a1 + 384), a2, 1, (uint64_t)buf);
    sub_1011C7B6C(a1, (__int128 *)buf);
  }
}

void sub_1011CF55C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (!*a3)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a4;
      v7 = a4[1];
      *(_DWORD *)buf = 67240448;
      v17 = v7;
      v18 = 1026;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v10 = *a4;
      v9 = a4[1];
      v13[0] = 67240448;
      v13[1] = v9;
      v14 = 1026;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_QWORD *)(a1 + 2704) = *(_QWORD *)a4;
  }
}

uint64_t sub_1011CF738(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  v4 = result;
  v5 = *a3;
  if (!*a3)
  {
    v7 = *(_QWORD *)(result + 2752);
    if (*(_BYTE *)(a4 + 3))
      sub_100653C34(v7);
    else
      sub_10065384C(v7);
    v6 = *(uint64_t (**)(void))(**(_QWORD **)(v4 + 2776) + 8);
    return v6();
  }
  if (v5 == 5)
  {
    v6 = *(uint64_t (**)(void))(**(_QWORD **)(result + 2776) + 16);
    return v6();
  }
  if (v5 == 4)
  {
    *(_DWORD *)(result + 5032) = *(_DWORD *)a4;
    v6 = ***(uint64_t (****)(void))(result + 2776);
    return v6();
  }
  return result;
}

void sub_1011CF7E0(uint64_t a1, unint64_t *a2)
{
  NSObject *v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  uint8_t *v7;
  __n128 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint8_t buf[4];
  unint64_t v13;

  v8.n128_u64[0] = 0;
  v8.n128_u64[1] = *a2;
  v9 = 0;
  sub_1011CF9AC(a1 + 208, &v8);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v3 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 134349056;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, startTime, %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = *a2;
    v10 = 134349056;
    v11 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "ExerciseMinute, startTime, %{public}f", &v10, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::onExerciseMinuteUpdate(const ExerciseMinuteUpdate &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

uint64_t sub_1011CF9AC(uint64_t a1, __n128 *a2)
{
  uint64_t result;

  result = sub_1011DD350(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_1011CAC5C(a1);
    }
  }
  return result;
}

void sub_1011CFA00(uint64_t a1, unint64_t *a2)
{
  sub_1011CF7E0(a1 - 112, a2);
}

uint64_t sub_1011CFA08(_BYTE *a1, _OWORD *a2)
{
  double Current;
  BOOL v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v33;
  _OWORD __dst[89];
  __int128 v35;
  uint64_t v36;
  _QWORD v37[259];
  uint64_t v38;
  char v39;

  if (*((_BYTE *)a2 + 176))
  {
    sub_1011CFDC4((uint64_t)(a1 + 144), (uint64_t)a2);
    Current = CFAbsoluteTimeGetCurrent();
    if (a1[353])
      v5 = *((_BYTE *)a2 + 28) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = Current;
      sub_1015EB864(&v35);
      sub_101605280((uint64_t)&v35);
      v39 |= 1u;
      *(double *)&v37[74] = v6;
      v7 = v38;
      v8 = *((_QWORD *)a2 + 2);
      *(_WORD *)(v38 + 68) |= 0x10u;
      *(_QWORD *)(v7 + 40) = v8;
      v9 = v38;
      v10 = *((_DWORD *)a2 + 6);
      *(_WORD *)(v38 + 68) |= 0x20u;
      *(_DWORD *)(v9 + 48) = v10;
      v11 = v38;
      LOBYTE(v10) = *((_BYTE *)a2 + 29);
      *(_WORD *)(v38 + 68) |= 0x400u;
      *(_BYTE *)(v11 + 65) = v10;
      v12 = v38;
      v13 = *((_QWORD *)a2 + 12);
      *(_WORD *)(v38 + 68) |= 2u;
      *(_QWORD *)(v12 + 16) = v13;
      v14 = v38;
      v15 = *((_DWORD *)a2 + 26);
      *(_WORD *)(v38 + 68) |= 0x40u;
      *(_DWORD *)(v14 + 52) = v15;
      v16 = v38;
      v17 = *((_DWORD *)a2 + 22);
      *(_WORD *)(v38 + 68) |= 0x80u;
      *(_DWORD *)(v16 + 56) = v17;
      v18 = v38;
      v19 = *((_QWORD *)a2 + 15);
      *(_WORD *)(v38 + 68) |= 4u;
      *(_QWORD *)(v18 + 24) = v19;
      v20 = v38;
      v21 = *((_QWORD *)a2 + 4);
      *(_WORD *)(v38 + 68) |= 8u;
      *(_QWORD *)(v20 + 32) = v21;
      v22 = v38;
      v23 = *((_QWORD *)a2 + 8);
      *(_WORD *)(v38 + 68) |= 1u;
      *(_QWORD *)(v22 + 8) = v23;
      v24 = v38;
      LOBYTE(v17) = *((_BYTE *)a2 + 128);
      *(_WORD *)(v38 + 68) |= 0x200u;
      *(_BYTE *)(v24 + 64) = v17;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021A6870);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)&v35);
      sub_1015EE304((PB::Base *)&v35);
    }
    sub_10100E584((uint64_t)(a1 + 3168), *((_DWORD *)a2 + 26), *((unsigned __int8 *)a2 + 128), *((unsigned __int8 *)a2 + 152), (uint64_t)__dst, *((double *)a2 + 2), *((float *)a2 + 39), *((double *)a2 + 12), *((double *)a2 + 17), *((double *)a2 + 18));
    if (LOBYTE(__dst[0]))
    {
      v33 = 7;
      bzero(&v36, 0x580uLL);
      v35 = *(_OWORD *)((char *)__dst + 8);
      (*(void (**)(_BYTE *, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v33, &v35, 1, 0xFFFFFFFFLL, 0);
    }
  }
  sub_100230338((uint64_t)(a1 + 5192), (uint64_t)a2 + 184);
  bzero(v37, 0x578uLL);
  v25 = *((_QWORD *)a2 + 20);
  v26 = *((_QWORD *)a2 + 21);
  *(_QWORD *)&v35 = *((_QWORD *)a2 + 2);
  *((_QWORD *)&v35 + 1) = v25;
  v36 = v26;
  LODWORD(__dst[0]) = 5;
  (*(void (**)(_BYTE *, _OWORD *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, __dst, &v35, 1, 0xFFFFFFFFLL, 0);
  v33 = 11;
  memcpy(__dst, a2, sizeof(__dst));
  (*(void (**)(_BYTE *, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v33, __dst, 1, 0xFFFFFFFFLL, 0);
  v33 = 9;
  bzero((char *)&__dst[11] + 8, 0x4D8uLL);
  v27 = a2[9];
  __dst[8] = a2[8];
  __dst[9] = v27;
  __dst[10] = a2[10];
  *(_QWORD *)&__dst[11] = *((_QWORD *)a2 + 22);
  v28 = a2[5];
  __dst[4] = a2[4];
  __dst[5] = v28;
  v29 = a2[7];
  __dst[6] = a2[6];
  __dst[7] = v29;
  v30 = a2[1];
  __dst[0] = *a2;
  __dst[1] = v30;
  v31 = a2[3];
  __dst[2] = a2[2];
  __dst[3] = v31;
  return (*(uint64_t (**)(_BYTE *, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v33, __dst, 1, 0xFFFFFFFFLL, 0);
}

void sub_1011CFDA4(_Unwind_Exception *a1)
{
  sub_1015EE304((PB::Base *)&STACK[0x5A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1011CFDC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1011DD740(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_1011CA174(a1);
    }
  }
  return result;
}

uint64_t sub_1011CFE18(uint64_t a1, _OWORD *a2)
{
  return sub_1011CFA08((_BYTE *)(a1 - 112), a2);
}

void sub_1011CFE20(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (sub_1002433D4())
  {
    if (a2)
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v4 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enabled device motion for calorimetry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Enabled device motion for calorimetry", v12, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startStopDeviceMotion(BOOL)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      v5 = sub_1002433D4();
      sub_1011932BC(v5, *(_QWORD *)(a1 + 5440), 0.01);
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v6 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disabled device motion for calorimetry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Disabled device motion for calorimetry", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startStopDeviceMotion(BOOL)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      v7 = sub_1002433D4();
      sub_101193558(v7, *(_QWORD *)(a1 + 5440));
    }
  }
}

uint64_t sub_1011D0108(uint64_t a1, uint64_t *a2)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  CFAbsoluteTime Current;
  int8x16_t v13;

  v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 1)), *(float64x2_t *)(a2 + 3));
  v13 = vextq_s8(v4, v4, 4uLL);
  v8 = *(float32x4_t *)(a2 + 5);
  v5 = a2[7];
  sub_10012C97C((float32x4_t *)&v13, v8);
  v9[0] = v13;
  v9[1] = v8;
  v6 = *a2;
  v10 = v5;
  v11 = v6;
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100887474(a1 + 2640, (uint64_t)v9);
}

void sub_1011D018C(uint64_t a1, double *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  id v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)a2;
    *(_DWORD *)buf = 134349056;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MoveMinute, startTime, %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v11 = *(_QWORD *)a2;
    v16 = 134349056;
    v17 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "MoveMinute, startTime, %{public}f", &v16, 12);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::onMoveMinuteUpdate(const MoveMinuteUpdate &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (objc_opt_class(HKQuantityDatum, v6))
  {
    v7 = *(_QWORD *)a2;
    v8 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:duration:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *a2), 60.0);
    v9 = objc_msgSend(objc_alloc((Class)HKQuantityDatum), "initWithIdentifier:dateInterval:quantity:resumeContext:", +[NSUUID UUID](NSUUID, "UUID"), v8, +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit secondUnit](HKUnit, "secondUnit"), 60.0), 0);
    v10 = *(void **)(a1 + 2792);
    v15 = v9;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1011D0470;
    v14[3] = &unk_1021A5D70;
    v14[4] = v7;
    objc_msgSend(v10, "insertDatums:device:metadata:completion:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1), +[HKDevice localDevice](HKDevice, "localDevice"), 0, v14);

  }
}

void sub_1011D0470(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  if ((a2 & 1) != 0)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021A6890);
    v4 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134349056;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector successfully pushed move minute update with startTime, %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021A6890);
      v6 = *(_QWORD *)(a1 + 32);
      v16 = 134349056;
      v17 = v6;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "HKDataCollector successfully pushed move minute update with startTime, %{public}f", &v16, 12);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::onMoveMinuteUpdate(const MoveMinuteUpdate &)_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021A6890);
    v11 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134349314;
      v21 = v12;
      v22 = 2114;
      v23 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "HKDataCollector, insertDatums failed to insert a move minute with startTime, %{public}f, error, %{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021A6890);
      v13 = *(_QWORD *)(a1 + 32);
      v16 = 134349314;
      v17 = v13;
      v18 = 2114;
      v19 = a3;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "HKDataCollector, insertDatums failed to insert a move minute with startTime, %{public}f, error, %{public}@", &v16, 22);
      v9 = v15;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLNatalimetryNotifier::onMoveMinuteUpdate(const MoveMinuteUpdate &)_block_invoke", "%s\n", v14);
      goto LABEL_19;
    }
  }
}

void sub_1011D0774(uint64_t a1, double *a2)
{
  sub_1011D018C(a1 - 112, a2);
}

uint64_t sub_1011D077C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  NSObject *v5;
  int v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[5];
  int v22;
  int v23;
  uint8_t buf[4];
  int v25;

  v2 = a2;
  result = objc_opt_class(HKQuantityType, a2);
  if (result)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2776) + 32))(*(_QWORD *)(a1 + 2776), 1);
      *(_DWORD *)buf = 67240192;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to start calorie collectors, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11 = qword_10229FC98;
      v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2776) + 32))(*(_QWORD *)(a1 + 2776), 1);
      v22 = 67240192;
      v23 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "HKDataCollector, attempting to start calorie collectors, %{public}d", &v22, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if (!*(_QWORD *)(a1 + 2800))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v7 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v25 = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting active energy collector, handleHistorical, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v22 = 67240192;
        v23 = v2;
        LODWORD(v19) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, starting active energy collector, handleHistorical, %{public}d", &v22, v19);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      v8 = objc_msgSend(objc_alloc((Class)HKDataCollector), "initWithHealthStore:bundleIdentifier:quantityType:", *(_QWORD *)(a1 + 2784), CFSTR("com.apple.locationd"), +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierActiveEnergyBurned));
      *(_QWORD *)(a1 + 2800) = v8;
      if (v2)
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1011D0D4C;
        v21[3] = &unk_1021A5D90;
        v21[4] = a1;
        objc_msgSend(v8, "resumeWithCompletion:", v21);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 128) + 456) = 1;
      }
    }
    if (!*(_QWORD *)(a1 + 2808))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v9 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v25 = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting basal energy collector, handleHistorical, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v22 = 67240192;
        v23 = v2;
        LODWORD(v19) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, starting basal energy collector, handleHistorical, %{public}d", &v22, v19);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v10 = objc_msgSend(objc_alloc((Class)HKDataCollector), "initWithHealthStore:bundleIdentifier:quantityType:", *(_QWORD *)(a1 + 2784), CFSTR("com.apple.locationd"), +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierBasalEnergyBurned));
      *(_QWORD *)(a1 + 2808) = v10;
      if (v2)
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1011D1844;
        v20[3] = &unk_1021A5D90;
        v20[4] = a1;
        objc_msgSend(v10, "resumeWithCompletion:", v20);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 128) + 457) = 1;
      }
    }
    v22 = 10;
    bzero(buf, 0x590uLL);
    buf[0] = 1;
    return (*(uint64_t (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v22, buf, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1011D0D4C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get last active energy sample with error %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v8 = 138412290;
      v9 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, failed to get last active energy sample with error %@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_1011D0F18(*(_QWORD *)(a1 + 32), *(void **)(v4 + 2800), a2);
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 128) + 456) = 1;
}

void sub_1011D0F18(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  int v14;
  int v15;
  double v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  double v21;
  uint8_t *v22;
  uint8_t *v23;
  NSObject *v24;
  uint8_t *v25;
  uint8_t *v26;
  double v27;
  uint8_t *v28;
  uint64_t v29;
  double v30;
  int v31;
  double v32;
  int v33;
  double v34;
  double v35;
  uint8_t buf[4];
  double v37;

  if (!objc_opt_class(HKQuantity, a2))
    return;
  if (objc_msgSend(objc_msgSend(a2, "quantityType"), "isEqual:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierActiveEnergyBurned)))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, handling last persisted value for active energy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v33) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, handling last persisted value for active energy", &v33, 2);
LABEL_67:
      v26 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v7);
      if (v26 != buf)
        free(v26);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if (objc_msgSend(objc_msgSend(a2, "quantityType"), "isEqual:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierBasalEnergyBurned)))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKDataCollector, handling last persisted value for basal energy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v33) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, handling last persisted value for basal energy", &v33, 2);
      goto LABEL_67;
    }
LABEL_17:
    v30 = 0.0;
    if (a3)
    {
      objc_msgSend(objc_msgSend(objc_msgSend(a3, "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      v10 = v9;
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        v37 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "HKDataCollector, sent last persisted with time %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v33 = 134349056;
        v34 = v10;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, sent last persisted with time %{public}f", &v33, v29);
LABEL_62:
        v25 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v12);
        if (v25 != buf)
          free(v25);
      }
    }
    else
    {
      sub_101387F04(*(_QWORD *)(a1 + 128), (uint64_t)&v33);
      v10 = v35;
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v13 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        v37 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HKDataCollector, sent nil last persisted so grabbing earliest record with time %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v31 = 134349056;
        v32 = v10;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, sent nil last persisted so grabbing earliest record with time %{public}f", &v31, v29);
        goto LABEL_62;
      }
    }
    sub_1011D3D24(a1);
    v14 = 0;
    do
    {
      v30 = v10 + 3610.0;
      v15 = sub_1011D42D8(a1, (uint64_t)a2, &v30, v10);
      v16 = v30;
      if (v10 == v30)
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v17 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          v37 = v10;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "HKDataCollector, query range didn't change with last entry %{public}f, setting new", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A5F68);
          v33 = 134349056;
          v34 = v10;
          LODWORD(v29) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, query range didn't change with last entry %{public}f, setting new", &v33, v29);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        v16 = v16 + 1.0;
      }
      ++v14;
      v10 = v16;
    }
    while (!v15);
    sub_1011D4008(a1);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v20 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v37) = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "HKDataCollector, completed query with %{public}d iterations", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v33 = 67240192;
      LODWORD(v34) = v14;
      LODWORD(v29) = 8;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, completed query with %{public}d iterations", &v33, v29);
      v23 = v22;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v21);
LABEL_72:
      if (v23 != buf)
        free(v23);
      return;
    }
    return;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v24 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "HKDataCollector, unknown collector passed!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    LOWORD(v33) = 0;
    v27 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, unknown collector passed!", &v33, 2);
    v23 = v28;
    sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v27);
    goto LABEL_72;
  }
}

void sub_1011D1844(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get last basal energy sample with error %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v8 = 138412290;
      v9 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, failed to get last basal energy sample with error %@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_1011D0F18(*(_QWORD *)(a1 + 32), *(void **)(v4 + 2808), a2);
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 128) + 457) = 1;
}

uint64_t sub_1011D1A10(id *a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[4];
  uint8_t buf[1640];

  result = objc_opt_class(HKHealthStore, a2);
  if (result)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to stop initialized calorie collectors", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, attempting to stop initialized calorie collectors", v14, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    if (a1[350])
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v5 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping active energy collector", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        LOWORD(v14[0]) = 0;
        LODWORD(v13) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, stopping active energy collector", v14, v13);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(a1[350], "finishWithCompletion:", &stru_1021A5DB0);

      a1[350] = 0;
    }
    if (a1[351])
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v6 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping basal energy collector", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        LOWORD(v14[0]) = 0;
        LODWORD(v13) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, stopping basal energy collector", v14, v13);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      objc_msgSend(a1[351], "finishWithCompletion:", &stru_1021A5DD0);

      a1[351] = 0;
    }
    v14[0] = 10;
    bzero(buf, 0x590uLL);
    return (*((uint64_t (**)(id *, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, v14, buf, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1011D1E80(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (!a3 || a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKDataCollector, successfully finished with completion for active energy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v11) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, successfully finished with completion for active energy", &v11, 2);
      v7 = v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n", v9);
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to finish with completion for active energy, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11 = 138543362;
      v12 = a3;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, failed to finish with completion for active energy, error, %{public}@", &v11, 12);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n", v5);
LABEL_20:
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1011D2144(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (!a3 || a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKDataCollector, successfully finished with completion for basal energy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v11) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, successfully finished with completion for basal energy", &v11, 2);
      v7 = v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n", v9);
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to finish with completion for basal energy, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11 = 138543362;
      v12 = a3;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, failed to finish with completion for basal energy, error, %{public}@", &v11, 12);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n", v5);
LABEL_20:
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1011D2408(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (objc_opt_class(HKHealthStore, a2) && objc_opt_class(HKQuantityType, v3))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to start move minute collector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, attempting to start move minute collector", v11, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startMoveMinuteCollector()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    if (!*(_QWORD *)(a1 + 2792))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v5 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting move minute collector", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v11[0] = 0;
        LODWORD(v10) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, starting move minute collector", v11, v10);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startMoveMinuteCollector()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      *(_QWORD *)(a1 + 2792) = objc_msgSend(objc_alloc((Class)HKDataCollector), "initWithHealthStore:bundleIdentifier:quantityType:", *(_QWORD *)(a1 + 2784), CFSTR("com.apple.locationd"), +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleMoveTime));
    }
  }
}

void sub_1011D272C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (objc_opt_class(HKHealthStore, a2))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to stop initialized move minute collector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, attempting to stop initialized move minute collector", v10, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopMoveMinuteCollector()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    if (*(_QWORD *)(a1 + 2792))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v4 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping move minute collector", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v10[0] = 0;
        LODWORD(v9) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, stopping move minute collector", v10, v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopMoveMinuteCollector()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      objc_msgSend(*(id *)(a1 + 2792), "finishWithCompletion:", &stru_1021A5DF0);

      *(_QWORD *)(a1 + 2792) = 0;
    }
  }
}

void sub_1011D2A18(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (!a3 || a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKDataCollector, successfully finished with completion for move minutes", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v11) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, successfully finished with completion for move minutes", &v11, 2);
      v7 = v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopMoveMinuteCollector()_block_invoke", "%s\n", v9);
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to finish with completion for move minutes, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11 = 138543362;
      v12 = a3;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, failed to finish with completion for move minutes, error, %{public}@", &v11, 12);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::stopMoveMinuteCollector()_block_invoke", "%s\n", v5);
LABEL_20:
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1011D2CDC(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  const char *v12;
  char *v13;
  int v14;
  const char *v15;
  uint8_t buf[1640];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "ActiveEnergy";
    if (a2 == 2)
      v5 = "MoveMinutes";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, setting fitness controller to type %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v11 = "ActiveEnergy";
    if (a2 == 2)
      v11 = "MoveMinutes";
    v14 = 136446210;
    v15 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "FitnessMode, setting fitness controller to type %{public}s", &v14, 12);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::setFitnessController(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v12);
    if (v13 != (char *)buf)
      free(v13);
  }
  v6 = *(_QWORD *)(a1 + 2768);
  *(_QWORD *)(a1 + 2768) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  v7 = *(_DWORD *)(a1 + 5032);
  v8 = *(_QWORD *)(a1 + 2760);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_10087AF98(v7 == 2);
}

void sub_1011D2F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1011D2F9C(uint64_t a1, int a2)
{
  sub_1011D2CDC(a1 - 120, a2);
}

void sub_1011D2FA4(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "ActiveEnergy";
    if (a2 == 2)
      v7 = "MoveMinutes";
    *(_DWORD *)buf = 136446466;
    v21 = v7;
    v22 = 1026;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting HK collector for type %{public}s, handleHistorical, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v12 = "ActiveEnergy";
    if (a2 == 2)
      v12 = "MoveMinutes";
    v16 = 136446466;
    v17 = v12;
    v18 = 1026;
    v19 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, starting HK collector for type %{public}s, handleHistorical, %{public}d", &v16, 18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::startHealthKitCollector(CLFitnessTrackingNotifier_Type::ActivityMoveMode, BOOL)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      sub_1011D2408(a1, v8);
    }
    else if (a2 == 1)
    {
      sub_1011D077C(a1, a3);
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "HKDataCollector, attempting to start collector in unknown move mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v16) = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, attempting to start collector in unknown move mode", &v16, v15);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLNatalimetryNotifier::startHealthKitCollector(CLFitnessTrackingNotifier_Type::ActivityMoveMode, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1011D32F8(uint64_t a1, int a2, uint64_t a3)
{
  sub_1011D2FA4(a1 - 120, a2, a3);
}

void sub_1011D3300(id *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping HK collectors", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, stopping HK collectors", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::stopHealthKitCollector()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1011D1A10(a1, v3);
  sub_1011D272C((uint64_t)a1, v4);
}

void sub_1011D34A0(uint64_t a1)
{
  sub_1011D3300((id *)(a1 - 120));
}

void sub_1011D34A8(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "VO2Max successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2Max successfully pushed to HKHealthStore", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::storeVO2maxToHealthKit(const VO2MaxResult &) const_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKHealthStore, VO2Max, saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v11 = 138543362;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKHealthStore, VO2Max, saveObjects failed on, %{public}@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::storeVO2maxToHealthKit(const VO2MaxResult &) const_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

id sub_1011D3768(uint64_t a1)
{
  uint64_t v2;
  id result;
  void *v4;
  _QWORD v5[6];

  v2 = *(_QWORD *)(a1 + 32);
  result = (id)sub_1011CDE28(v2);
  if ((_DWORD)result)
  {
    v4 = *(void **)(v2 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1011D37E0;
    v5[3] = &unk_102143528;
    v5[4] = v2;
    v5[5] = *(_QWORD *)(a1 + 40);
    return objc_msgSend(v4, "async:", v5);
  }
  return result;
}

void sub_1011D37E0(uint64_t a1)
{
  uint64_t v1;
  _OWORD v2[3];
  _OWORD v3[3];

  v1 = *(_QWORD *)(a1 + 32);
  sub_10083E3D0(v1 + 4864, (uint64_t)v3, *(double *)(a1 + 40), (double)-[NSTimeZone secondsFromGMT](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMT"));
  if (LOBYTE(v3[0]))
  {
    v2[0] = v3[0];
    v2[1] = v3[1];
    v2[2] = v3[2];
    sub_1011D386C(v1, (double *)v2);
  }
  else if (sub_1011CDD14())
  {
    sub_1011CE1B4(v1, 0);
  }
}

void sub_1011D386C(uint64_t a1, double *a2)
{
  id v4;
  HKQuantity *v5;
  HKQuantity *v6;
  id v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = objc_msgSend(objc_alloc((Class)HKHRCardioFitnessStore), "initWithHealthStore:", *(_QWORD *)(a1 + 2784));
  v5 = +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("ml/(kg*min)")), a2[1]);
  v6 = +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("ml/(kg*min)")), a2[2]);
  v7 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2[3]), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2[4]));
  v11[1] = 3221225472;
  v8 = *((_OWORD *)a2 + 1);
  v12 = *(_OWORD *)a2;
  v9 = *((unsigned __int8 *)a2 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_1011D39BC;
  v11[3] = &unk_1021A5E30;
  v11[4] = a1;
  v10 = *((_OWORD *)a2 + 2);
  v13 = v8;
  v14 = v10;
  objc_msgSend(v4, "saveCardioFitnessEventWithValue:threshold:dateInterval:options:completion:", v5, v6, v7, v9, v11);

}

void sub_1011D39BC(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  _BYTE buf[22];
  __int16 v27;
  uint64_t v28;

  if ((a2 & 1) != 0)
  {
    v4 = a1[4];
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[8];
      v7 = a1[9];
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CardioFitnessEvent successfully pushed to HKHRCardioFitnessStore, startTime, %{public}f, endTime, %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v12 = a1[8];
      v13 = a1[9];
      v20 = 134349312;
      v21 = v12;
      v22 = 2050;
      v23 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CardioFitnessEvent successfully pushed to HKHRCardioFitnessStore, startTime, %{public}f, endTime, %{public}f", &v20, 22);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeCardioFitnessEventToHealthKit(VO2MaxAlertResult) const_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = a1[9];
    sub_100423B04(*(_QWORD *)(v4 + 336), (uint64_t)buf);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      v10 = a1[8];
      v11 = a1[9];
      *(_DWORD *)buf = 134349570;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v11;
      v27 = 2114;
      v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CardioFitnessEvent failed to push to HKHRCardioFitnessStore, startTime, %{public}f, endTime, %{public}f, error, %{public}@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v16 = a1[8];
      v17 = a1[9];
      v20 = 134349570;
      v21 = v16;
      v22 = 2050;
      v23 = v17;
      v24 = 2114;
      v25 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "CardioFitnessEvent failed to push to HKHRCardioFitnessStore, startTime, %{public}f, endTime, %{public}f, error, %{public}@", &v20, 32);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::writeCardioFitnessEventToHealthKit(VO2MaxAlertResult) const_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

CLOSTransaction *sub_1011D3D24(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  CLOSTransaction *result;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2816))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v2 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "HKDataCollector, attempting to create HistoricalPush transaction before releasing previous one", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, attempting to create HistoricalPush transaction before releasing previous one", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::createPushTransaction()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_1011D4008(a1);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A5F68);
  v3 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKDataCollector, creating HistoricalPush transaction", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v10[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, creating HistoricalPush transaction", v10, v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::createPushTransaction()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLNatalimetryNotifier.HistoricalPush");
  *(_QWORD *)(a1 + 2816) = result;
  return result;
}

void sub_1011D4008(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2816))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v2 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HKDataCollector, releasing HistoricalPush transaction", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, releasing HistoricalPush transaction", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::releasePushTransaction()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }

    *(_QWORD *)(a1 + 2816) = 0;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HKDataCollector, attempting to release HistoricalPush transaction after it was released", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, attempting to release HistoricalPush transaction after it was released", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::releasePushTransaction()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

uint64_t sub_1011D42D8(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  int v7;
  NSObject *v8;
  CFAbsoluteTime v9;
  NSObject *v10;
  double v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  CFAbsoluteTime v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  if (objc_opt_class(HKQuantityDatum, a2))
  {
    v7 = sub_101387100(*(_QWORD *)(a1 + 128));
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a3;
      *(_DWORD *)buf = 134349824;
      v27 = a4;
      v28 = 2050;
      v29 = v9;
      v30 = 2050;
      v31 = 0;
      v32 = 1026;
      v33 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKDataCollector, query from %{public}f to %{public}f returned %{public}lu records with result %{public}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v12 = *a3;
      v18 = 134349824;
      v19 = a4;
      v20 = 2050;
      v21 = v12;
      v22 = 2050;
      v23 = 0;
      v24 = 1026;
      v25 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "HKDataCollector, query from %{public}f to %{public}f returned %{public}lu records with result %{public}d", &v18, 38);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::queryCalorimetryDatabase(HKDataCollector *, CFAbsoluteTime, CFAbsoluteTime &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v10 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v27 = 0.0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "HKDataCollector, unable to perform incremental calculation since only %{public}lu entries in db", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v18 = 134349056;
      v19 = 0.0;
      LODWORD(v17) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, unable to perform incremental calculation since only %{public}lu entries in db", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::queryCalorimetryDatabase(HKDataCollector *, CFAbsoluteTime, CFAbsoluteTime &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a3 = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    *a3 = CFAbsoluteTimeGetCurrent();
  }
  return 1;
}

void sub_1011D4A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011D4A7C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if ((a2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HKDataCollector, successfully pushed energy sample", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "HKDataCollector, successfully pushed energy sample", &v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeDatumsToDataCollector(BOOL, HKDataCollector *, NSArray<HKQuantityDatum *> *) const_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v6 = 2824;
    if (!*(_BYTE *)(a1 + 48))
      v6 = 2832;
    *(_QWORD *)(v4 + v6) = *(_QWORD *)(a1 + 40);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to insert energy sample, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v13 = 138543362;
      v14 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKDataCollector, failed to insert energy sample, error, %{public}@", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetryNotifier::writeDatumsToDataCollector(BOOL, HKDataCollector *, NSArray<HKQuantityDatum *> *) const_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_1011D4D78()
{
  operator new();
}

void sub_1011D4E24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1011D4E60(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021A7560;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1011D4F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A5F48);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021A5F48);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1011D51A8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A5F48);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1011D5428(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x5A8uLL);
  v6[2] = 0;
  *v6 = off_1021A74F0;
  v6[1] = 0;
  memcpy(v6 + 3, a3, 0x590uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1011D5510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D5524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[3];
  _DWORD v10[6];
  uint64_t v11;
  uint64_t v12;
  int v13;

  bzero(v10, 0x578uLL);
  v9[0] = 0x7FEFFFFFFFFFFFFFLL;
  v9[1] = 0;
  v9[2] = 0xBFF0000000000000;
  v13 = 0;
  v10[0] = 0;
  v11 = 0;
  v12 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v9, a3, a4, 0);
}

void sub_1011D55E0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A5F48);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A5F48);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021A5F48);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A5F48);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1011D5B8C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1011D5BB8(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1011D5BE4(uint64_t a1, uint64_t a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t (***v24)();

  v22 = off_1021A5F98;
  v23 = sub_100270E34(a1, a2);
  v24 = &v22;
  sub_1011D625C(v23 + 32, (uint64_t)&v22, "Dance", 0, 10.0, 10.0, 30.0);
  v3 = v24;
  if (v24 == &v22)
  {
    v4 = 4;
    v3 = &v22;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_6:
  v20[0] = off_1021A6170;
  v20[1] = a1;
  v21 = v20;
  sub_1011D674C(a1 + 192, (uint64_t)v20, "FST", 0, 10.0, 10.0, 30.0);
  v5 = v21;
  if (v21 == v20)
  {
    v6 = 4;
    v5 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v18[0] = off_1021A6348;
  v18[1] = a1;
  v19 = v18;
  sub_1011D6BB4(a1 + 352, (uint64_t)v18, "Rowing", 0, 10.0, 10.0, 30.0);
  v7 = v19;
  if (v19 == v18)
  {
    v8 = 4;
    v7 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v16[0] = off_1021A6520;
  v16[1] = a1;
  v17 = v16;
  sub_1011D701C(a1 + 512, (uint64_t)v16, "Kickboxing", 0, 10.0, 10.0, 30.0);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v14[0] = off_1021A66F8;
  v14[1] = a1;
  v15 = v14;
  sub_1008870F4((_OWORD *)(a1 + 672), (uint64_t)v14);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_25;
  }
  if (v15)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

void sub_1011D5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_1011D5FAC(v17);
  sub_1011D602C(v16);
  sub_1011D60AC(v15);
  sub_1011D612C(v14);
  v21 = (_QWORD *)v13[3];
  if (v21 == v13)
  {
    v22 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
    v13 = (_QWORD *)v13[3];
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v22))(v13);
LABEL_11:
  _Unwind_Resume(a1);
}

void sub_1011D5F78()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 64);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 88);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1011D5F40);
}

uint64_t sub_1011D5FAC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A65A0;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)a1 = off_1021A66C0;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011D602C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A63C8;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)a1 = off_1021A64E8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011D60AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A61F0;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)a1 = off_1021A6310;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011D612C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A6018;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)a1 = off_1021A6138;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  return a1;
}

_QWORD *sub_1011D61AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A5F98;
  result[1] = v3;
  return result;
}

uint64_t sub_1011D61E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A5F98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1011D6204(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100F54278(*(_QWORD *)(a1 + 8), *a2, 0);
}

uint64_t sub_1011D6214(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021A5FF8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011D6250()
{
  return &off_1021A5FF8;
}

uint64_t sub_1011D625C(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  _QWORD *v9;

  v9 = (_QWORD *)sub_1011D62B8(a1, a3, a4, a5, a6, a7);
  *v9 = off_1021A6018;
  sub_100270E34((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1011D62A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1011D6378(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D62B8(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A6138;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A60C8;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D6378(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6138;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D63B8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A6018;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)a1 = off_1021A6138;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  operator delete();
}

double sub_1011D6448(uint64_t a1, __n128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_100F54334((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1011D6450(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v4 + *(_QWORD *)(a1 + 56) - 1) / 0xAAuLL))
                   + 24 * ((v4 + *(_QWORD *)(a1 + 56) - 1) % 0xAAuLL));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_100218F80(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_1011D6584(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  v1 = *(_QWORD *)(a1 + 152);
  result = 1;
  if (v1)
  {
    v3 = 1;
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
  }
  return result;
}

uint64_t sub_1011D65C0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(a1 + 152);
  if (!v1)
    return 1;
  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

void sub_1011D65FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6138;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011D664C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6138;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  operator delete();
}

_QWORD *sub_1011D669C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A6170;
  result[1] = v3;
  return result;
}

uint64_t sub_1011D66D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A6170;
  a2[1] = v2;
  return result;
}

uint64_t sub_1011D66F4(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100F54278(*(_QWORD *)(a1 + 8), *a2, 2);
}

uint64_t sub_1011D6704(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021A61D0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011D6740()
{
  return &off_1021A61D0;
}

uint64_t sub_1011D674C(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  _QWORD *v9;

  v9 = (_QWORD *)sub_1011D67A8(a1, a3, a4, a5, a6, a7);
  *v9 = off_1021A61F0;
  sub_100270E34((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1011D6794(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1011D6868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D67A8(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A6310;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A62A0;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D6868(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6310;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D68A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A61F0;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)a1 = off_1021A6310;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  operator delete();
}

double sub_1011D6938(uint64_t a1, __n128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_100F54A94((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1011D6940(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v4 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v4 + *(_BYTE *)(a1 + 56) - 1));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_100218CAC(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_1011D6A64(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6310;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011D6AB4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6310;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  operator delete();
}

_QWORD *sub_1011D6B04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A6348;
  result[1] = v3;
  return result;
}

uint64_t sub_1011D6B3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A6348;
  a2[1] = v2;
  return result;
}

uint64_t sub_1011D6B5C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100F54278(*(_QWORD *)(a1 + 8), *a2, 1);
}

uint64_t sub_1011D6B6C(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021A63A8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011D6BA8()
{
  return &off_1021A63A8;
}

uint64_t sub_1011D6BB4(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  _QWORD *v9;

  v9 = (_QWORD *)sub_1011D6C10(a1, a3, a4, a5, a6, a7);
  *v9 = off_1021A63C8;
  sub_100270E34((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1011D6BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1011D6CD0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D6C10(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A64E8;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A6478;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D6CD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A64E8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D6D10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A63C8;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)a1 = off_1021A64E8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  operator delete();
}

double sub_1011D6DA0(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_100F546F4((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1011D6DA8(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v4 + *(_QWORD *)(a1 + 56) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                   + 32 * ((v4 + *(_QWORD *)(a1 + 56) - 1) & 0x7F));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_100218E5C(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_1011D6ECC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A64E8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011D6F1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A64E8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  operator delete();
}

_QWORD *sub_1011D6F6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A6520;
  result[1] = v3;
  return result;
}

uint64_t sub_1011D6FA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A6520;
  a2[1] = v2;
  return result;
}

uint64_t sub_1011D6FC4(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100F54278(*(_QWORD *)(a1 + 8), *a2, 3);
}

uint64_t sub_1011D6FD4(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021A6580))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011D7010()
{
  return &off_1021A6580;
}

uint64_t sub_1011D701C(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  _QWORD *v9;

  v9 = (_QWORD *)sub_1011D7078(a1, a3, a4, a5, a6, a7);
  *v9 = off_1021A65A0;
  sub_100270E34((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1011D7064(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1011D7138(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D7078(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A66C0;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A6650;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D7138(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A66C0;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D7178(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021A65A0;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)a1 = off_1021A66C0;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  operator delete();
}

double sub_1011D7208(uint64_t a1, __n128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_100F54E30((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

void sub_1011D7210(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A66C0;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011D7260(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A66C0;
  free(*(void **)(a1 + 8));
  sub_10047F660((_QWORD *)(a1 + 24));
  operator delete();
}

_QWORD *sub_1011D72B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A66F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1011D72E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A66F8;
  a2[1] = v2;
  return result;
}

double sub_1011D7308(uint64_t a1, int *a2, __n128 *a3)
{
  int v3;
  __n128 v4;
  __n128 v6[2];

  v3 = *a2;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_100F542DC(*(_QWORD **)(a1 + 8), v3, v6);
}

uint64_t sub_1011D7338(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021A6768))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011D7374()
{
  return &off_1021A6768;
}

void sub_1011D7380(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1011D73B0(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_1021A67A8;
  v2 = a1 + 8;
  sub_100261F44(a1 + 160);
  sub_100261F44(a1 + 144);
  sub_100261F44(a1 + 128);
  sub_100261F44(a1 + 112);
  sub_100261F44(a1 + 96);
  v4 = (void **)(a1 + 72);
  sub_1002A3684(&v4);
  sub_100261F44(a1 + 56);
  sub_100261F44(a1 + 40);
  sub_100261F44(a1 + 24);
  sub_100261F44(v2);
  return a1;
}

void sub_1011D7444(uint64_t a1)
{
  sub_1011D73B0(a1);
  operator delete();
}

uint64_t sub_1011D7468(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = (_QWORD *)(a1 + 704);
  v3 = *(_QWORD **)(a1 + 728);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = 0;
  if (v5)
    operator delete();
  v6 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;
  if (v6)
    operator delete();
  v7 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = 0;
  if (v7)
    operator delete();
  v8 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = 0;
  if (v8)
    operator delete();
  *(_QWORD *)(a1 + 512) = off_1021A65A0;
  v9 = *(_QWORD **)(a1 + 664);
  if (v9 == (_QWORD *)(a1 + 640))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 640);
  }
  else
  {
    if (!v9)
      goto LABEL_19;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_19:
  *(_QWORD *)(a1 + 512) = off_1021A66C0;
  free(*(void **)(a1 + 520));
  sub_10047F660((_QWORD *)(a1 + 536));
  *(_QWORD *)(a1 + 352) = off_1021A63C8;
  v11 = *(_QWORD **)(a1 + 504);
  if (v11 == (_QWORD *)(a1 + 480))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 480);
  }
  else
  {
    if (!v11)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_24:
  *(_QWORD *)(a1 + 352) = off_1021A64E8;
  free(*(void **)(a1 + 360));
  sub_10034111C((_QWORD *)(a1 + 376));
  *(_QWORD *)(a1 + 192) = off_1021A61F0;
  v13 = *(_QWORD **)(a1 + 344);
  if (v13 == (_QWORD *)(a1 + 320))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 320);
  }
  else
  {
    if (!v13)
      goto LABEL_29;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_29:
  *(_QWORD *)(a1 + 192) = off_1021A6310;
  free(*(void **)(a1 + 200));
  sub_1004A4854((_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 32) = off_1021A6018;
  v15 = *(_QWORD **)(a1 + 184);
  if (v15 == (_QWORD *)(a1 + 160))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 160);
  }
  else
  {
    if (!v15)
      goto LABEL_34;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
  *(_QWORD *)(a1 + 32) = off_1021A6138;
  free(*(void **)(a1 + 40));
  sub_10047F660((_QWORD *)(a1 + 56));
  v17 = *(_QWORD **)(a1 + 24);
  if (v17 == (_QWORD *)a1)
  {
    v18 = 4;
    v17 = (_QWORD *)a1;
    goto LABEL_38;
  }
  if (v17)
  {
    v18 = 5;
LABEL_38:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  return a1;
}

void sub_1011D76E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A67D8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011D7734(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1011D7760(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1011D778C(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_1011D77BC(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1011D77E8(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1011D7840(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011D7860(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1011D7878(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1011D78B8@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = sub_1011D7910(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011D78FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011D7910(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021A6A18;
  sub_1013D9CF8(a1 + 3, *a2);
  return a1;
}

void sub_1011D794C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1011D7960(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A6A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011D7974(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A6A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1011D79A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1011D79B8@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1A0uLL);
  result = sub_1011D7A10(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011D79FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011D7A10(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021A6A68;
  sub_100E29278(a1 + 3, *a2);
  return a1;
}

void sub_1011D7A4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1011D7A60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A6A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011D7A74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A6A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1011D7AA8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1011D7AB8@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x158uLL);
  result = sub_1011D7B10(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011D7AFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011D7B10(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021A6AB8;
  sub_1009DCDF4(a1 + 3, *a2);
  return a1;
}

void sub_1011D7B4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1011D7B60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A6AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011D7B74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A6AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1011D7BA8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1011D7BB8(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_1011D7CA0(a1, a2, a4, a5, a6, a7) = off_1021A6B08;
  *(_QWORD *)(a1 + 128) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 136) = 0;
  sub_1004FAEDC();
}

void sub_1011D7C68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100B617EC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D7CA0(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = &off_102173FD0;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_102173F38;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D7D60(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[16], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

void sub_1011D7DB0(uint64_t a1)
{
  sub_1011DC1CC(a1);
  operator delete();
}

uint64_t sub_1011D7DD4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Activate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLOdometerEntry>::startActive() [Data_T = CLOdometerEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 2, 0);
  return 1;
}

uint64_t sub_1011D7F9C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Inactivate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLOdometerEntry>::stopActive() [Data_T = CLOdometerEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 2);
  return 1;
}

id sub_1011D8160(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Start spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLOdometerEntry>::startSpectator() [Data_T = CLOdometerEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 4, 0);
}

id sub_1011D8324(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stop spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLOdometerEntry>::stopSpectator() [Data_T = CLOdometerEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 4);
}

uint64_t sub_1011D84E4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4 || *a3 == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  return result;
}

void sub_1011D8508(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1011D8534(uint64_t a1, const char *a2, void *a3, char a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_101361F00(a1, a2, a4, a5, a6, a7) = off_1021A6BB8;
  *(_QWORD *)(a1 + 384) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 392) = 0;
  sub_1004FAEDC();
}

void sub_1011D85E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 392);
  *(_QWORD *)(v1 + 392) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1011D861C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D861C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B0B88;
  sub_1006D0BAC((_QWORD *)(a1 + 128));
  *(_QWORD *)a1 = off_1021A6C48;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D8670(uint64_t a1)
{
  sub_1011DC234(a1);
  operator delete();
}

uint64_t sub_1011D8694(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Activate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startActive() [Data_T = CLElevationChangeEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 392) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8), 3, 0);
  return 1;
}

uint64_t sub_1011D885C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Inactivate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLElevationChangeEntry>::stopActive() [Data_T = CLElevationChangeEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 392) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8), 3);
  return 1;
}

id sub_1011D8A20(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Start spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startSpectator() [Data_T = CLElevationChangeEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 392) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8), 7, 0);
}

id sub_1011D8BE4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stop spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLElevationChangeEntry>::stopSpectator() [Data_T = CLElevationChangeEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 392) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8), 7);
}

uint64_t sub_1011D8DA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6C48;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D8DE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6C48;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  operator delete();
}

double sub_1011D8E34(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_1000BE730((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

void sub_1011D8E3C(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_1011D8F24(a1, a2, a4, a5, a6, a7) = off_1021A6C90;
  *(_QWORD *)(a1 + 128) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 136) = 0;
  sub_1004FAEDC();
}

void sub_1011D8EEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1011D9038(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D8F24(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A6DB8;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A6D48;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) = a3;
  *(_BYTE *)(a1 + 123) = 0;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D8FE8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[16], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

uint64_t sub_1011D9038(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6DB8;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D9078(uint64_t a1)
{
  sub_1011DC2B4(a1);
  operator delete();
}

double sub_1011D909C(uint64_t a1, __n128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_1011D94EC((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

id sub_1011D90A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Start spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>::startSpectator() [Data_T = CLCoarseElevationChangeEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 5, 0);
}

id sub_1011D9268(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stop spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>::stopSpectator() [Data_T = CLCoarseElevationChangeEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 5);
}

uint64_t sub_1011D9428(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 5 || *a3 == -1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  return result;
}

void sub_1011D944C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6DB8;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011D949C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6DB8;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  operator delete();
}

__n128 sub_1011D94EC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1011D9574(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1011D9574(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1011D983C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1011D9888(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_1011D9970(a1, a2, a4, a5, a6, a7) = off_1021A6DF0;
  *(_QWORD *)(a1 + 128) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 136) = 0;
  sub_100A01AFC();
}

void sub_1011D9938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1011D9A80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011D9970(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A6F18;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A6EA8;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011D9A30(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[16], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

uint64_t sub_1011D9A80(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6F18;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011D9AC0(uint64_t a1)
{
  sub_1011DC31C(a1);
  operator delete();
}

uint64_t sub_1011D9AE4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Activate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLCatherineData>::startActive() [Data_T = CLCatherineData]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 1, 0);
  return 1;
}

uint64_t sub_1011D9CAC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Inactivate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLCatherineData>::stopActive() [Data_T = CLCatherineData]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 1);
  return 1;
}

id sub_1011D9E70(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Start spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCatherineData>::startSpectator() [Data_T = CLCatherineData]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0, 0);
}

id sub_1011DA034(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stop spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCatherineData>::stopSpectator() [Data_T = CLCatherineData]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0);
}

uint64_t sub_1011DA1F4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 <= 1u)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  return result;
}

void sub_1011DA214(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6F18;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DA264(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A6F18;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DA2B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A67D8;
  free(*(void **)(a1 + 8));
  sub_10034111C((_QWORD *)(a1 + 24));
  operator delete();
}

_QWORD *sub_1011DA304(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v34 = v7 - v4;
      v35 = 2048;
      v36 = v4;
      v37 = 2048;
      v38 = v7;
      v39 = 1024;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v25 = 134218752;
      v26 = v20 - v4;
      v27 = 2048;
      v28 = v4;
      v29 = 2048;
      v30 = v20;
      v31 = 1024;
      v32 = v21;
      LODWORD(v24) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v25), v24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLRawHR>::update(CFAbsoluteTime) [Data_T = CLRawHR]", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 7));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12 + 32 * (*(_QWORD *)(a1 + 56) & 0x7FLL);
  v14 = v10 + 8 * (v9 >> 7);
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(_QWORD *)(a1 + 64) + v9) & 0x7F);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 4;
    v13 += 32;
    if (*(_QWORD *)v14 + 4096 == v13)
    {
      v17 = *(_QWORD *)(v14 + 8);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = *(_QWORD *)v12 + 32 * (*(_QWORD *)(a1 + 56) & 0x7FLL);
  return sub_1000D9878((_QWORD *)(a1 + 24), v12, v18, (char *)v14, v13);
}

void sub_1011DA640(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_1011DA728(a1, a2, a4, a5, a6, a7) = off_1021A6FD8;
  *(_QWORD *)(a1 + 128) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 136) = 0;
  sub_10022AF5C();
}

void sub_1011DA6F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1011DA838(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DA728(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A7100;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A7090;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011DA7E8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[16], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

uint64_t sub_1011DA838(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A7100;
  free(*(void **)(a1 + 8));
  sub_1006CF50C((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011DA878(uint64_t a1)
{
  sub_1011DC384(a1);
  operator delete();
}

BOOL sub_1011DA89C(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x17));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 176 * (v4 % 0x17);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 / 0x17));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 176 * (v9 % 0x17);
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 4048;
      v19 = vabdd_f64(*(double *)(v18 - 168), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 4048;
        v15 = v19;
        if (*(double *)(v20 - 168) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 4048;
      }
      v16 -= 176;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

uint64_t sub_1011DA9F8(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v15, &v13);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1) == *((_QWORD *)&v14 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v16 == *((_QWORD *)&v16 + 1))
        v4 = *(_QWORD *)(v16 - 8) + 4048;
      v5 = *(_OWORD *)(v4 - 176);
      v6 = *(_OWORD *)(v4 - 144);
      a2[1] = *(_OWORD *)(v4 - 160);
      a2[2] = v6;
      *a2 = v5;
      v7 = *(_OWORD *)(v4 - 128);
      v8 = *(_OWORD *)(v4 - 112);
      v9 = *(_OWORD *)(v4 - 80);
      a2[5] = *(_OWORD *)(v4 - 96);
      a2[6] = v9;
      a2[3] = v7;
      a2[4] = v8;
      v10 = *(_OWORD *)(v4 - 64);
      v11 = *(_OWORD *)(v4 - 48);
      v12 = *(_OWORD *)(v4 - 16);
      a2[9] = *(_OWORD *)(v4 - 32);
      a2[10] = v12;
      a2[7] = v10;
      a2[8] = v11;
      return 1;
    }
  }
  return result;
}

double sub_1011DAABC(uint64_t a1, __int128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_100212098((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

id sub_1011DAAC4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Start spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLStepCountEntry>::startSpectator() [Data_T = CLStepCountEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0, 0);
}

id sub_1011DAC88(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stop spectator for src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLStepCountEntry>::stopSpectator() [Data_T = CLStepCountEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0);
}

uint64_t sub_1011DAE48(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 + 1) <= 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  return result;
}

void sub_1011DAE6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A7100;
  free(*(void **)(a1 + 8));
  sub_1006CF50C((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DAEBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A7100;
  free(*(void **)(a1 + 8));
  sub_1006CF50C((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DAF0C(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_1011DAFF4(a1, a2, a4, a5, a6, a7) = off_1021A7138;
  *(_QWORD *)(a1 + 128) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 136) = 0;
  sub_101499948();
}

void sub_1011DAFBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1011DB104(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DAFF4(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A7260;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A71F0;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011DB0B4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[16], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

uint64_t sub_1011DB104(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A7260;
  free(*(void **)(a1 + 8));
  sub_10047F6F4((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011DB144(uint64_t a1)
{
  sub_1011DC3EC(a1);
  operator delete();
}

double sub_1011DB168(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_10047ED34((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1011DB170(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v4 + *(_QWORD *)(a1 + 56) - 1) / 0x1AuLL))
                   + 152 * ((v4 + *(_QWORD *)(a1 + 56) - 1) % 0x1AuLL)
                   + 40);
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_1002194F0(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_1011DB2AC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Activate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLSwimEntry>::startActive() [Data_T = CLSwimEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0, 0);
  return 1;
}

uint64_t sub_1011DB474(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Inactivate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLSwimEntry>::stopActive() [Data_T = CLSwimEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0);
  return 1;
}

void sub_1011DB638(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A7260;
  free(*(void **)(a1 + 8));
  sub_10047F6F4((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DB688(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A7260;
  free(*(void **)(a1 + 8));
  sub_10047F6F4((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DB6D8(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(_QWORD *)sub_1011DB7C0(a1, a2, a4, a5, a6, a7) = off_1021A7298;
  *(_QWORD *)(a1 + 128) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 136) = 0;
  sub_1010C50B4();
}

void sub_1011DB788(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1011DB8D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DB7C0(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A73C0;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021A7350;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1011DB880(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[16], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

uint64_t sub_1011DB8D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A73C0;
  free(*(void **)(a1 + 8));
  sub_100544F70((_QWORD *)(a1 + 24));
  return a1;
}

void sub_1011DB910(uint64_t a1)
{
  sub_1011DC454(a1);
  operator delete();
}

BOOL sub_1011DB934(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v4 + *(_QWORD *)(a1 + 56) - 1) / 0x18uLL))
                   + 168 * ((v4 + *(_QWORD *)(a1 + 56) - 1) % 0x18uLL));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_1002192D8(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_1011DBA68(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Activate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<_CLFitnessMachineData>::startActive() [Data_T = _CLFitnessMachineData]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0, 0);
  return 1;
}

uint64_t sub_1011DBC30(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A6B88);
    v5 = *(_QWORD *)(a1 + 8);
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Inactivate src %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<_CLFitnessMachineData>::stopActive() [Data_T = _CLFitnessMachineData]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 0);
  return 1;
}

void sub_1011DBDF4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A73C0;
  free(*(void **)(a1 + 8));
  sub_100544F70((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_1011DBE44(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A73C0;
  free(*(void **)(a1 + 8));
  sub_100544F70((_QWORD *)(a1 + 24));
  operator delete();
}

__n128 sub_1011DBE94@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1011DBF60(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4032;
    }
    v18 = *a1 + 4032;
    v19 = a2;
  }
  sub_1011DBF60(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1011DBF60@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xCF3CF3CF3CF3CF3DLL * ((v11 - a1) >> 3);
      v11 -= 168 * v12;
      a4 -= 168 * v12;
      if (v12)
        result = memmove(a4, v11, 168 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_1011DC040(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1011DC098(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011DC0C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_1011DC0E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1011DC120(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021A7470;
  result[1] = v3;
  return result;
}

uint64_t sub_1011DC158(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021A7470;
  a2[1] = v2;
  return result;
}

void sub_1011DC178(uint64_t a1, unsigned __int8 *a2)
{
  sub_1011CFE20(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1011DC184(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021A74D0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011DC1C0()
{
  return &off_1021A74D0;
}

uint64_t sub_1011DC1CC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A6B08;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &off_102173FD0;
  free(*(void **)(a1 + 8));
  sub_1006CFD68((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC234(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A6BB8;
  v2 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_1021B0B88;
  sub_1006D0BAC((_QWORD *)(a1 + 128));
  *(_QWORD *)a1 = off_1021A6C48;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC2B4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A6C90;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_1021A6DB8;
  free(*(void **)(a1 + 8));
  sub_1004A4854((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC31C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A6DF0;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_1021A6F18;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC384(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A6FD8;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_1021A7100;
  free(*(void **)(a1 + 8));
  sub_1006CF50C((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC3EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A7138;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_1021A7260;
  free(*(void **)(a1 + 8));
  sub_10047F6F4((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC454(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A7298;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_1021A73C0;
  free(*(void **)(a1 + 8));
  sub_100544F70((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1011DC4BC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A6778);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A6778);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLNatalieData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_1011DC6B8(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A6778);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A6778);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_1011DC8B4(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A6778);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A6778);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLExerciseMinuteData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_1011DCAB0()
{
  operator new();
}

void sub_1011DCB48(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1000B357C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1000B3280(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A5F48);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A5F48);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

void sub_1011DCF1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021A74F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011DCF30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021A74F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1011DCF64(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1011DCF84(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

__n128 sub_1011DCFB0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1011DD03C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_1011DD03C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1011DD304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DD350(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = a2->n128_f64[1];
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, __n128 *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 248))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_10047FDC4(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A6778);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A6778);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLExerciseMinuteData>::addSuspectRecord(const T &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_1006D9AB0(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A6778);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A6778);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_1011DD718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DD740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 16);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 312))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_1011DDBF8(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A6778);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A6778);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLNatalieData>::addSuspectRecord(const T &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_1011DDB30(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A6778);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A6778);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_1011DDB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1011DDB30(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 46 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1011DDC54(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2E)) + 88 * (v7 % 0x2E);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  result = *(__n128 *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  *(__n128 *)(v8 + 32) = result;
  ++a1[5];
  return result;
}

uint64_t sub_1011DDBF8(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x2E)
    a2 = 1;
  if (v2 < 0x5C)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 46;
  }
  return v4 ^ 1u;
}

void sub_1011DDC54(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2E;
  v4 = v2 - 46;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1011DDF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DDF68()
{
  sub_1015A2E04(qword_10230D3A8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D3A8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230D3C0, "Acc800Fp");
  dword_10230D3D8 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230D3C0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230D3E0, "DmFp");
  dword_10230D3F8 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230D3E0, (void *)&_mh_execute_header);
}

double sub_1011DE020(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021A7588;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

_QWORD *sub_1011DE050(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1021A7588;
  v2 = a1 + 3;
  sub_100412390(a1 + 9);
  sub_100412390(v2);
  return a1;
}

void sub_1011DE090(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = off_1021A7588;
  v1 = a1 + 3;
  sub_100412390(a1 + 9);
  sub_100412390(v1);
  operator delete();
}

void sub_1011DE0E0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_1011DE10C(double *a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  BOOL v5;

  v2 = *a1;
  if (*a1 >= 51.1 && v2 <= 61.1 && *a2 >= -13.2 && *a2 <= 1.87)
    return 1;
  if (v2 >= 49.866 && v2 <= 61.1 && *a2 >= -6.48 && *a2 <= 0.15)
    return 1;
  if (v2 >= 50.688 && v2 <= 61.1 && *a2 >= 0.15 && *a2 <= 1.43)
    return 1;
  if (v2 >= 29.32 && v2 <= 35.8 && *a2 >= 130.0 && *a2 <= 141.0)
    return 1;
  if (v2 >= 35.8 && v2 <= 41.3 && *a2 >= 135.8 && *a2 <= 142.95)
    return 1;
  if (v2 >= 41.3 && v2 <= 45.7 && *a2 >= 139.5 && *a2 <= 145.8)
    return 1;
  if (v2 >= 25.7 && v2 <= 34.756 && *a2 >= 128.837 && *a2 <= 130.0)
    return 1;
  if (v2 >= 23.861 && v2 <= 27.891 && *a2 >= 122.927 && *a2 <= 131.426)
    return 1;
  if (v2 >= -45.0 && v2 <= 4.3 && *a2 >= 104.0 && *a2 <= 156.25)
    return 1;
  if (v2 >= 0.0 && v2 <= 7.408 && *a2 >= 108.75 && *a2 <= 119.215)
    return 1;
  if (v2 >= -14.25 && v2 <= 8.35 && *a2 >= 88.9289 && *a2 <= 108.75)
    return 1;
  if (v2 >= -56.4 && v2 <= -28.0)
  {
    v3 = *a2;
    if (*a2 >= 155.0 && v3 <= 180.1)
      return 1;
    if (v3 >= -180.1 && v3 <= -175.74)
      return 1;
  }
  if (v2 >= -9.0 && v2 <= 27.3 && *a2 >= 67.0 && *a2 <= 92.17)
    return 1;
  if (v2 >= 27.3 && v2 <= 35.44 && *a2 >= 71.746 && *a2 <= 77.876)
    return 1;
  if (v2 >= 26.29 && v2 <= 27.8959 && *a2 >= 79.734 && *a2 <= 88.251)
    return 1;
  if (v2 >= 27.3 && v2 <= 29.15 && *a2 >= 77.83 && *a2 <= 84.154)
    return 1;
  if (v2 >= 27.3 && v2 <= 30.0 && *a2 >= 77.83 && *a2 <= 82.4)
    return 1;
  if (v2 >= 24.18 && v2 <= 29.338 && *a2 >= 63.36 && *a2 <= 71.746)
    return 1;
  if (v2 >= 29.338 && v2 <= 30.917 && *a2 >= 66.437 && *a2 <= 71.746)
    return 1;
  if (v2 >= 30.917 && v2 <= 33.0 && *a2 >= 69.584 && *a2 <= 71.746)
    return 1;
  if (v2 >= -36.08 && v2 <= -18.04 && *a2 >= 11.32 && *a2 <= 37.9)
    return 1;
  if (v2 >= -18.5 && v2 <= -13.45 && *a2 >= 23.5008 && *a2 <= 41.892382)
    return 1;
  if (v2 >= -13.45 && v2 <= 1.68 && *a2 >= 30.905 && *a2 <= 40.987)
    return 1;
  if (v2 >= 1.68 && v2 <= 3.388 && *a2 >= 31.324836 && *a2 <= 40.987)
    return 1;
  if (v2 >= -13.8 && v2 <= -12.44 && *a2 >= 24.07 && *a2 <= 28.33)
    return 1;
  if (v2 >= 11.671 && v2 <= 14.258 && *a2 >= -62.322 && *a2 <= -59.263)
    return 1;
  if (v2 >= 22.950919 && v2 <= 27.567702 && *a2 >= -79.487787 && *a2 <= -72.604668)
    return 1;
  if (v2 >= 21.74346 && v2 <= 27.567702 && *a2 >= -76.173118 && *a2 <= -72.604668)
    return 1;
  if (v2 >= 20.668412 && v2 <= 27.567702 && *a2 >= -73.949372 && *a2 <= -72.604668)
    return 1;
  if (v2 >= 8.3 && v2 <= 17.45 && *a2 >= 99.675 && *a2 <= 102.316)
    return 1;
  if (v2 >= 14.481 && v2 <= 17.51 && *a2 >= 102.286 && *a2 <= 104.683)
    return 1;
  if (v2 >= 17.45 && v2 <= 19.45 && *a2 >= 98.1 && *a2 <= 100.94)
    return 1;
  if (v2 >= 18.142198 && v2 <= 18.315026 && *a2 >= -63.184398 && *a2 <= -62.912807)
    return 1;
  if (v2 >= 16.914842 && v2 <= 17.240077 && *a2 >= -61.964541 && *a2 <= -61.607641)
    return 1;
  if (v2 >= 21.497173 && v2 <= 26.635702 && *a2 >= 88.025462 && *a2 <= 92.577511)
    return 1;
  if (v2 >= 32.166353 && v2 <= 32.577428 && *a2 >= -65.0 && *a2 <= -64.50204)
    return 1;
  if (v2 >= 26.902547 && v2 <= 27.854393 && *a2 >= 89.351473 && *a2 <= 91.521758)
    return 1;
  if (v2 >= 19.103 && v2 <= 20.058 && *a2 >= -81.654 && *a2 <= -79.5)
    return 1;
  if (v2 >= -23.5 && v2 <= -8.32 && *a2 >= -166.288 && *a2 <= -155.88)
    return 1;
  if (v2 >= 34.3297 && v2 <= 35.757 && *a2 >= 32.09 && *a2 <= 34.6509)
    return 1;
  if (v2 >= 15.06 && v2 <= 15.816 && *a2 >= -61.61 && *a2 <= -60.984)
    return 1;
  if (v2 >= -53.02 && v2 <= -50.229 && *a2 >= -61.937 && *a2 <= -56.853)
    return 1;
  if (v2 >= -21.1769 && v2 <= -12.1 && *a2 >= 176.19 && *a2 <= 180.1)
    return 1;
  if (v2 >= -21.1769 && v2 <= -15.057 && *a2 >= -180.1 && *a2 <= -178.097)
    return 1;
  v4 = v2 > 49.589 || v2 < 49.07;
  if (!v4 && *a2 >= -2.82 && *a2 <= -1.96)
    return 1;
  v5 = v2 < 2.6019;
  if (v2 > 8.469)
    v5 = 1;
  return !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= 22.178 && v2 <= 22.4435 && *a2 >= 113.828 && *a2 <= 114.4585
      || v2 >= 22.4435 && v2 <= 22.502 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 17.366 && v2 <= 18.926 && *a2 >= -78.498 && *a2 <= -75.908
      || !v4 && *a2 >= -2.82 && *a2 <= -1.96
      || v2 >= 22.175 && v2 <= 22.203 && *a2 >= 113.53 && *a2 <= 113.6
      || v2 >= 22.107 && v2 <= 22.175 && *a2 >= 113.548 && *a2 <= 113.6
      || v2 >= 35.656 && v2 <= 36.201 && *a2 >= 14.04 && *a2 <= 14.713
      || v2 >= -20.76 && v2 <= -19.6 && *a2 >= 56.9 && *a2 <= 58.4
      || v2 >= 16.61 && v2 <= 16.91 && *a2 >= -62.3 && *a2 <= -62.06
      || v2 >= -0.6 && v2 <= -0.42 && *a2 >= 166.866 && *a2 <= 167.028
      || v2 >= -19.3 && v2 <= -18.67 && *a2 >= -170.126 && *a2 <= -169.6
      || v2 >= -25.858 && v2 <= -23.42 && *a2 >= -131.33 && *a2 <= -123.664
      || v2 >= -14.457 && v2 <= -12.864 && *a2 >= -173.081 && *a2 <= -171.117
      || v2 >= -16.4 && v2 <= -15.4 && *a2 >= -6.2 && *a2 <= -5.0
      || v2 >= 16.986 && v2 <= 17.508 && *a2 >= -62.918 && *a2 <= -62.478
      || v2 >= -5.4 && v2 <= -3.15 && *a2 >= 54.5 && *a2 <= 56.8
      || v2 >= -12.139 && v2 <= -6.353 && *a2 >= 156.267 && *a2 <= 167.87
      || !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= -9.8 && v2 <= -8.01 && *a2 >= -172.9 && *a2 <= -170.9
      || v2 >= -22.115 && v2 <= -14.7 && *a2 >= -176.47 && *a2 <= -172.98
      || v2 >= 10.0 && v2 <= 11.585 && *a2 >= -61.8316 && *a2 <= -60.32
      || v2 >= 20.8 && v2 <= 22.35 && *a2 >= -72.56 && *a2 <= -70.81
      || v2 >= 17.555 && v2 <= 18.9639 && *a2 >= -65.11 && *a2 <= -64.14;
}

BOOL sub_1011DF2F8(double *a1, double *a2)
{
  double v2;

  v2 = *a1;
  return *a1 >= 22.4434 && v2 <= 22.62 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 22.088 && v2 <= 22.244 && *a2 >= 113.511 && *a2 <= 113.621
      || v2 >= 20.439 && v2 <= 29.709 && *a2 >= 92.078 && *a2 <= 97.72
      || v2 >= 26.211 && v2 <= 30.6 && *a2 >= 77.862 && *a2 <= 97.72
      || v2 >= 8.42 && v2 <= 20.553 && *a2 >= 97.2 && *a2 <= 105.72
      || v2 >= 30.6 && v2 <= 37.23 && *a2 >= 69.13 && *a2 <= 80.725
      || v2 >= 24.09 && v2 <= 31.9 && *a2 >= 60.726 && *a2 <= 69.13
      || v2 >= -18.347 && v2 <= -16.74 && *a2 >= 11.05 && *a2 <= 23.74
      || v2 >= -17.067 && v2 <= -10.64 && *a2 >= 21.69 && *a2 <= 24.313
      || v2 >= -13.672 && v2 <= -10.44 && *a2 >= 23.327 && *a2 <= 31.131
      || v2 >= -10.65 && v2 <= 4.07 && *a2 >= 28.115 && *a2 <= 31.96
      || v2 >= -3.03 && v2 <= 5.2 && *a2 >= 31.65 && *a2 <= 42.51
      || v2 >= 0.96 && v2 <= 8.6 && *a2 >= -61.6 && *a2 <= -53.7;
}

BOOL sub_1011DF67C(double *a1, double *a2)
{
  double v2;
  BOOL v3;
  BOOL v4;
  _BOOL8 result;

  v2 = *a1;
  result = 1;
  if ((*a1 < 27.6 || v2 > 90.0 || *a2 < -180.0 || *a2 > -65.0) && (v2 < 37.1 || v2 > 90.0 || *a2 < 2.75 || *a2 > 129.7))
  {
    if (v2 < -49.0 || v2 > 0.0 || (*a2 >= -93.0 ? (v3 = *a2 > -30.0) : (v3 = 1), v3))
    {
      if ((v2 < 22.7 || v2 > 90.0 || *a2 < 97.7 || *a2 > 122.7)
        && (v2 < 5.24 || v2 > 33.0 || *a2 < -29.8 || *a2 > 54.475)
        && (v2 < 31.75 || v2 > 49.0 || *a2 < -13.0 || *a2 > 3.0))
      {
        v4 = v2 < -1.0 || v2 > 28.0;
        if ((v4 || *a2 < -120.0 || *a2 > -81.67) && (v2 < 14.3 || v2 > 25.4 || *a2 < -163.4 || *a2 > -150.8))
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1011DF880(double a1, double a2)
{
  double v3;
  double v4;

  v3 = a2;
  v4 = a1;
  if (sub_1011DF67C(&v4, &v3))
    return 2;
  if (sub_1011DE10C(&v4, &v3))
    return 1;
  if (sub_1011DF2F8(&v4, &v3))
    return 0;
  return 2;
}

void sub_1011DF8E4(id a1)
{
  +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", sub_10024455C());
  operator new();
}

void sub_1011DF944()
{
  operator delete();
}

void sub_1011DF968(uint64_t a1, uint64_t a2)
{
  char v3;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = off_102138340;
  *(_QWORD *)a1 = off_1021A7618;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 60;
  *(_QWORD *)(a1 + 56) = off_102138370;
  *(_QWORD *)(a1 + 64) = 60;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = off_102138370;
  *(_QWORD *)(a1 + 136) = 60;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = off_102138370;
  *(_QWORD *)(a1 + 208) = 60;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = off_102138340;
  *(_QWORD *)(a1 + 280) = 30;
  *(_QWORD *)(a1 + 288) = off_102138370;
  *(_QWORD *)(a1 + 296) = 30;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = off_102138370;
  *(_QWORD *)(a1 + 368) = 30;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = off_102138370;
  *(_QWORD *)(a1 + 440) = 30;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = off_102138370;
  *(_QWORD *)(a1 + 512) = 30;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = off_102138340;
  *(_QWORD *)(a1 + 584) = 256;
  *(_QWORD *)(a1 + 592) = off_102138370;
  *(_QWORD *)(a1 + 600) = 256;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = off_102138370;
  *(_QWORD *)(a1 + 672) = 256;
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 736) = off_102138370;
  *(_QWORD *)(a1 + 744) = 256;
  *(_QWORD *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 808) = off_102138370;
  *(_QWORD *)(a1 + 816) = 256;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_QWORD *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 912) = 1;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = 0x41E000007F7FFFFFLL;
  *(_QWORD *)(a1 + 936) = off_1021388A0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 960) = off_1021388A0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = off_1021388A0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_WORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  if ((sub_1001B7910() & 0x40000) != 0)
  {
    sub_100197040();
    v3 = sub_10075D1EC() ^ 1;
  }
  else
  {
    v3 = 0;
  }
  *(_BYTE *)(a1 + 1024) = v3;
  *(_BYTE *)(a1 + 1025) = 0;
  *(_WORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_QWORD *)(a1 + 1072) = a1 + 1072;
  *(_QWORD *)(a1 + 1080) = a1 + 1072;
  *(_QWORD *)(a1 + 1088) = 0;
  operator new();
}

void sub_1011DFF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_1000F34E0(v15);
  v18 = *v16;
  *v16 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v11[115];
  v11[115] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v11[101] = off_102138370;
  sub_100412390(v11 + 104);
  sub_100412424(v14);
  v11[63] = off_102138370;
  sub_100412390(v11 + 66);
  sub_100412424(v13);
  sub_100412424(v12);
  v20 = v11[4];
  v11[4] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v11[3];
  v11[3] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *a11;
  *a11 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E0024(uint64_t a1)
{
  return sub_100238298(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1011E002C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(result + 1008))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (*(_BYTE *)(v1 + 1065))
    {
      result = *(_QWORD *)(v1 + 1032);
      *(_QWORD *)(v1 + 1032) = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_1011E00C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1021A7618;
  dispatch_release(*(dispatch_object_t *)(a1 + 1016));
  sub_1000F34E0((_QWORD *)(a1 + 1072));
  v2 = *(_QWORD *)(a1 + 1032);
  *(_QWORD *)(a1 + 1032) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(a1 + 808) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 832));
  sub_100412424((_QWORD *)(a1 + 576));
  *(_QWORD *)(a1 + 504) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 528));
  sub_100412424((_QWORD *)(a1 + 272));
  sub_100412424((_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_1011E01B4(uint64_t a1)
{
  sub_1011E00C0(a1);
  operator delete();
}

uint64_t sub_1011E01D8(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 1065))
  {
    v1 = result;
    if (!*(_QWORD *)(result + 920) && !*(_BYTE *)(result + 1024))
    {
      sub_100128CC8();
      sub_100615894();
    }
    if (!*(_QWORD *)(result + 16))
    {
      result = sub_1000A42B0();
      if ((_DWORD)result)
        operator new();
    }
    if (!*(_QWORD *)(v1 + 24))
    {
      result = sub_1000A42B0();
      if ((_DWORD)result)
        operator new();
    }
    if (!*(_QWORD *)(v1 + 32))
    {
      result = sub_100ADB310();
      if ((_DWORD)result)
        operator new();
    }
  }
  return result;
}

void sub_1011E0554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v17)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  operator delete();
}

void sub_1011E0674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1011E06D4;
  v3[3] = &unk_10212ECA0;
  v3[4] = v1;
  sub_1000A57FC(v2, (uint64_t)v3);
}

uint64_t sub_1011E06D4(uint64_t a1)
{
  return sub_1011E002C(*(_QWORD *)(a1 + 32));
}

void sub_1011E06DC(int a1, _DWORD *a2, void *__src, uint64_t a4)
{
  _BYTE __dst[320];

  if (!*a2)
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_1011E2104(a4, (uint64_t)__dst);
  }
}

float32x2_t sub_1011E0750(uint64_t a1, float32x2_t *a2, float32x2_t a3)
{
  return sub_1011E0780(a2, a1, a3);
}

void sub_1011E0760(uint64_t a1, float32x2_t *a2)
{
  sub_1011E0958(a2, a1);
}

void sub_1011E0770(float32x2_t *a1, uint64_t a2)
{
  sub_1011E0B5C(a2, a1);
}

float32x2_t sub_1011E0780(float32x2_t *a1, uint64_t a2, float32x2_t result)
{
  int v5;
  float32x2_t *v6;
  float32x2_t v7;
  int v8;
  int v9;
  float v10;
  int v11;
  float32x2_t *v12;
  float v13;
  float32_t v14;
  uint64_t (**v15)();
  int v16;
  int v17;
  int v18;
  uint64_t (**v19)();
  uint64_t v20;
  int v21;
  float32x2_t v22[2];
  int v23;

  if (!a1[126].i8[1])
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = (float32x2_t *)a1[110];
    v22[0] = (float32x2_t)off_1021388A0;
    v22[1] = *(float32x2_t *)(a2 + 8);
    v23 = v5;
    sub_1011E0EA4(v6, v22);
    v7 = a1[110];
    v19 = off_1021388A0;
    v20 = *(_QWORD *)(*(_QWORD *)&v7 + 16);
    v21 = *(_DWORD *)(*(_QWORD *)&v7 + 24);
    sub_10007D084((uint64_t)&a1[36], (float *)&v20);
    sub_10007D084((uint64_t)&a1[45], (float *)&v20 + 1);
    sub_10007D084((uint64_t)&a1[54], (float *)&v21);
    sub_10007D084((uint64_t)&a1[63], (float *)&a1[116]);
    if (a1[114].i8[0] || a1[126].i8[0])
    {
      v8 = 0;
      v9 = 0;
      if (a1[44])
        v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[40] + ((*(_QWORD *)&a1[43] >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (*(_QWORD *)&a1[43] & 0x3FFLL));
      if (a1[53])
        v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[49] + ((*(_QWORD *)&a1[52] >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (*(_QWORD *)&a1[52] & 0x3FFLL));
      v10 = 0.0;
      v11 = 0;
      if (a1[62])
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[58] + ((*(_QWORD *)&a1[61] >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * (*(_QWORD *)&a1[61] & 0x3FFLL));
      v15 = off_1021388A0;
      v16 = v9;
      v17 = v8;
      v18 = v11;
      if (a1[71])
        v10 = *(float *)(*(_QWORD *)(*(_QWORD *)&a1[67] + ((*(_QWORD *)&a1[70] >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (*(_QWORD *)&a1[70] & 0x3FFLL));
      sub_1011E0F5C(a1, (float32x2_t *)&v15, v10, *(double *)a2);
    }
    else
    {
      v12 = (float32x2_t *)a1[112];
      ++v12->i32[0];
      v13 = v12->f32[1] * -0.2 + 1.0;
      v14 = v12[3].f32[0] * v13;
      result = vmul_n_f32(v12[2], v13);
      v12[2] = result;
      v12[3].f32[0] = v14;
    }
  }
  return result;
}

void sub_1011E0958(float32x2_t *a1, uint64_t a2)
{
  float v2;
  float32_t v3;
  NSObject *v6;
  double v7;
  double v8;
  char *v9;
  int v10;
  double v11;
  uint8_t buf[4];
  double v13;

  v2 = *(float *)(a2 + 8);
  a1[116].f32[0] = v2;
  v3 = (float)(v2 * a1[119].f32[0]) + a1[122].f32[0];
  a1[124] = vadd_f32(vmul_n_f32(a1[118], v2), a1[121]);
  a1[125].f32[0] = v3;
  if (!a1[113].i32[1])
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v6 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      v7 = a1[116].f32[0];
      *(_DWORD *)buf = 134349056;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[CLGBE] Notifying clients on temperature update,temperature,%{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v8 = a1[116].f32[0];
      v10 = 134349056;
      v11 = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Notifying clients on temperature update,temperature,%{public}f", &v10, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::feedGyroTemperature(const CLGyro::Temperature *)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    sub_1011E1078((uint64_t)a1, *(double *)a2);
  }
}

void sub_1011E0B5C(uint64_t a1, float32x2_t *a2)
{
  __int32 v3;
  float32x2_t *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  float32x2_t v37[2];
  __int32 v38;

  if (*(_BYTE *)(a1 + 1008))
    goto LABEL_2;
  v3 = a2[2].i32[0];
  v4 = *(float32x2_t **)(a1 + 888);
  v37[0] = (float32x2_t)off_1021388A0;
  v37[1] = a2[1];
  v38 = v3;
  sub_1011E0EA4(v4, v37);
  v5 = *(_QWORD *)(a1 + 888);
  v35 = *(_QWORD *)(v5 + 16);
  v36 = *(_DWORD *)(v5 + 24);
  sub_10007D084(a1 + 56, (float *)&v35);
  sub_10007D084(a1 + 128, (float *)&v35 + 1);
  sub_10007D084(a1 + 200, (float *)&v36);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = 0.0;
  if ((int)v6 >= 2)
  {
    v8 = *(_QWORD *)(a1 + 192);
    v9 = 0.0;
    v10 = 0.0;
    if (v8)
      v10 = *(float *)(a1 + 144) / (float)v8;
    v11 = *(_QWORD *)(a1 + 264);
    if (v11)
      v9 = *(float *)(a1 + 216) / (float)v11;
    v12 = *(_QWORD *)(a1 + 112);
    v13 = *(_QWORD *)(a1 + 120);
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    v18 = *(_QWORD *)(a1 + 184);
    v19 = 0.0;
    v20 = 0.0;
    v21 = *(_QWORD *)(a1 + 256);
    do
    {
      v22 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + ((v12 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v12 & 0x3FF))
          - (float)(*(float *)(a1 + 72) / (float)v6);
      v23 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v18 & 0x3FF))
          - v10;
      v24 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF)) - v9;
      v16 = v16 + (float)(v22 * v22);
      v15 = v15 + (float)(v23 * v23);
      v14 = v14 + (float)(v24 * v24);
      v20 = v20 + v22;
      v19 = v19 + v23;
      v17 = v17 + v24;
      ++v21;
      ++v18;
      ++v12;
      --v13;
    }
    while (v13);
    v7 = (float)((float)((float)((float)(v16 - (float)((float)(v20 * v20) / (float)(int)v6)) / (float)((int)v6 - 1))
                       + (float)((float)(v15 - (float)((float)(v19 * v19) / (float)(int)v6)) / (float)((int)v6 - 1)))
               + (float)((float)(v14 - (float)((float)(v17 * v17) / (float)(int)v6)) / (float)((int)v6 - 1)));
  }
  v25 = 0.0;
  v26 = 0.0;
  if (v6)
    v26 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + (((v6 + *(_QWORD *)(a1 + 112) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v6 + *(_QWORD *)(a1 + 112) - 1) & 0x3FF));
  v27 = *(_QWORD *)(a1 + 192);
  if (v27)
    v25 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                               + (((unint64_t)(v27 + *(_QWORD *)(a1 + 184) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v27 + *(_QWORD *)(a1 + 184) - 1) & 0x3FF));
  v28 = *(_QWORD *)(a1 + 264);
  v29 = 0.0;
  v30 = 0.0;
  if (v28)
    v30 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 232)
                               + (((unint64_t)(v28 + *(_QWORD *)(a1 + 256) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v28 + *(_QWORD *)(a1 + 256) - 1) & 0x3FF));
  if (v6)
    v29 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + ((*(_QWORD *)(a1 + 112) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*(_QWORD *)(a1 + 112) & 0x3FFLL));
  v31 = 0.0;
  v32 = 0.0;
  if (v27)
    v32 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((*(_QWORD *)(a1 + 184) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*(_QWORD *)(a1 + 184) & 0x3FFLL));
  if (v28)
    v31 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + ((*(_QWORD *)(a1 + 256) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*(_QWORD *)(a1 + 256) & 0x3FFLL));
  v33 = (unsigned int *)(a1 + 904);
  if (v7
     + (float)((float)((float)((float)(v25 - v32) * (float)(v25 - v32))
                     + (float)((float)(v26 - v29) * (float)(v26 - v29)))
             + (float)((float)(v30 - v31) * (float)(v30 - v31)))
     * 0.2 <= 0.5)
  {
    v34 = *v33 + 1;
    *v33 = v34;
    if (v34 >= 5)
LABEL_2:
      *(_BYTE *)(a1 + 912) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 912) = 0;
    *(_QWORD *)v33 = 0;
    sub_1011E1E48((_QWORD *)a1);
  }
}

float32x2_t sub_1011E0EA4(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t result;
  int v3;
  int v4;
  float v5;
  float v6;
  float32_t v7;

  if (&a1[4] != a2)
  {
    result = a2[1];
    a1[5] = result;
    a1[6].i32[0] = a2[2].i32[0];
  }
  v3 = a1->i32[0];
  v4 = a1->i32[0] + 1;
  a1->i32[0] = v4;
  if (v3 > 2)
  {
    v6 = a1->f32[1];
    v7 = (float)((float)(1.0 - v6) * a1[3].f32[0]) + (float)(v6 * a2[2].f32[0]);
    result = vadd_f32(vmul_n_f32(a1[2], 1.0 - v6), vmul_n_f32(a2[1], v6));
    a1[2] = result;
    a1[3].f32[0] = v7;
  }
  else
  {
    v5 = 1.0 / (double)v4;
    result.f32[0] = (float)((float)(a1[3].f32[0] * (float)v3) + a2[2].f32[0]) * v5;
    a1[2] = vmul_n_f32(vadd_f32(vmul_n_f32(a1[2], (float)v3), a2[1]), v5);
    a1[3].i32[0] = result.i32[0];
  }
  return result;
}

void sub_1011E0F5C(float32x2_t *a1, float32x2_t *a2, float a3, double a4)
{
  float v8;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x2_t *v16;
  _QWORD v17[2];
  __int32 v18;
  float32x2_t v19[2];
  float v20;

  if (a3 != 3.4028e38)
  {
    v8 = a1[125].f32[0];
    v9 = vsub_f32(a2[1], a1[124]);
    v10 = a2[2].f32[0];
    v11 = a1[116].f32[1];
    v12 = fabsf(v9.f32[1]);
    v13 = vabds_f32(v10, v8);
    if (fabsf(v9.f32[0]) <= v11 && v12 <= v11 && v13 <= v11)
    {
      ++a1[113].i32[1];
      v16 = (float32x2_t *)a1[112];
      v19[0] = (float32x2_t)off_1021388A0;
      v19[1] = v9;
      v20 = v10 - v8;
      sub_1011E0EA4(v16, v19);
      if ((a1[113].i32[1] & 7) == 1)
        sub_1011E1078((uint64_t)a1, a4);
      v17[0] = off_1021388A0;
      v17[1] = a2[1];
      v18 = a2[2].i32[0];
      sub_1011E158C((uint64_t)a1, (float *)v17, a3);
    }
    else
    {
      a1[113].i32[1] = 0;
      sub_1011E1E48(a1);
    }
  }
}

void sub_1011E1078(uint64_t a1, double a2)
{
  float32x2_t *v4;
  float32x2_t v5;
  float v6;
  unint64_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float32x2_t v17;
  unint64_t v18;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  NSObject *v36;
  double v37;
  float *v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  float *v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  uint64_t v74;
  uint8_t buf[4];
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  uint64_t v98;

  v4 = *(float32x2_t **)(a1 + 896);
  v5 = vmul_f32(vadd_f32(v4[2], *(float32x2_t *)(a1 + 992)), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  v6 = (float)(v4[3].f32[0] + *(float *)(a1 + 1000)) * 0.017453;
  v7 = *(_QWORD *)(a1 + 656);
  if ((int)v7 >= 2)
  {
    v10 = 0.0;
    v11 = 0.0;
    v12 = *(_QWORD *)(a1 + 728);
    if (v12)
      v11 = *(float *)(a1 + 680) / (float)v12;
    v13 = *(_QWORD *)(a1 + 800);
    if (v13)
      v10 = *(float *)(a1 + 752) / (float)v13;
    v14 = *(_QWORD *)(a1 + 648);
    v15 = *(_QWORD *)(a1 + 720);
    v16 = *(_QWORD *)(a1 + 656);
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 792);
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0;
    v22.f32[1] = v11;
    do
    {
      v23.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + ((v14 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v14 & 0x3FF));
      v23.i32[1] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + ((v15 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v15 & 0x3FF));
      v22.f32[0] = *(float *)(a1 + 608) / (float)v7;
      v24 = vsub_f32(v23, v22);
      v25 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v18 & 0x3FF))
          - v10;
      v17 = vmla_f32(v17, v24, v24);
      v19 = v19 + (float)(v25 * v25);
      v21 = vadd_f32(v21, v24);
      v20 = v20 + v25;
      ++v18;
      ++v15;
      ++v14;
      --v16;
    }
    while (v16);
    v26 = vmul_f32(v21, v21);
    v22.f32[0] = (float)(int)v7;
    v21.f32[0] = (float)((int)v7 - 1);
    v27 = vdiv_f32(vsub_f32(v17, vdiv_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v22, 0))), (float32x2_t)vdup_lane_s32((int32x2_t)v21, 0));
    v28 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
    v8 = vmul_f32(vmul_f32(v27, v28), v28);
    v9 = (float)((float)((float)(v19 - (float)((float)(v20 * v20) / (float)(int)v7)) / v21.f32[0]) * 0.017453)
       * 0.017453;
  }
  else
  {
    v8 = 0;
    v9 = 0.0;
  }
  *(float32x2_t *)(a1 + 1040) = v5;
  *(float *)(a1 + 1048) = v6;
  *(float32x2_t *)(a1 + 1052) = v8;
  *(float *)(a1 + 1060) = v9;
  *(_BYTE *)(a1 + 1064) = 1;
  v29 = *(_QWORD *)(a1 + 1080);
  if (v29 != a1 + 1072)
  {
    v30 = v5.f32[0];
    v31 = v5.f32[1];
    v32 = v6;
    v33 = v8.f32[0];
    v34 = v8.f32[1];
    v35 = v9;
    do
    {
      if (*(_BYTE *)(v29 + 32) || !*(_BYTE *)(a1 + 1024))
      {
        (*(void (**)(void))(*(_QWORD *)(v29 + 24) + 16))();
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021A7678);
        v36 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
        {
          v37 = *(float *)(a1 + 928);
          v38 = *(float **)(a1 + 896);
          v39 = v38[4];
          v40 = v38[5];
          v41 = v38[6];
          v42 = *(_QWORD *)(v29 + 16);
          *(_DWORD *)buf = 134351872;
          v76 = a2;
          v77 = 2050;
          v78 = v37;
          v79 = 2050;
          v80 = v30;
          v81 = 2050;
          v82 = v31;
          v83 = 2050;
          v84 = v32;
          v85 = 2050;
          v86 = v39;
          v87 = 2050;
          v88 = v40;
          v89 = 2050;
          v90 = v41;
          v91 = 2050;
          v92 = v33;
          v93 = 2050;
          v94 = v34;
          v95 = 2050;
          v96 = v35;
          v97 = 2050;
          v98 = v42;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "[CLGBE] GyroBias,time,%{public}f,temperature,%{public}f,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,dbias.x,%{public}f,dbias.y,%{public}f,dbias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f,client,%{public}p", buf, 0x7Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021A7678);
          v43 = *(float *)(a1 + 928);
          v44 = *(float **)(a1 + 896);
          v45 = v44[4];
          v46 = v44[5];
          v47 = v44[6];
          v48 = *(_QWORD *)(v29 + 16);
          v51 = 134351872;
          v52 = a2;
          v53 = 2050;
          v54 = v43;
          v55 = 2050;
          v56 = v30;
          v57 = 2050;
          v58 = v31;
          v59 = 2050;
          v60 = v32;
          v61 = 2050;
          v62 = v45;
          v63 = 2050;
          v64 = v46;
          v65 = 2050;
          v66 = v47;
          v67 = 2050;
          v68 = v33;
          v69 = 2050;
          v70 = v34;
          v71 = 2050;
          v72 = v35;
          v73 = 2050;
          v74 = v48;
          LODWORD(v50) = 122;
          v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "[CLGBE] GyroBias,time,%{public}f,temperature,%{public}f,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,dbias.x,%{public}f,dbias.y,%{public}f,dbias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f,client,%{public}p", &v51, v50);
          sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::notifyClients(CFTimeInterval)", "%s\n", v49);
          if (v49 != (char *)buf)
            free(v49);
        }
      }
      v29 = *(_QWORD *)(v29 + 8);
    }
    while (v29 != a1 + 1072);
  }
}

void sub_1011E158C(uint64_t a1, float *a2, float a3)
{
  _QWORD *v5;
  float v6;
  float v7;
  NSObject *v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  NSObject *v32;
  char *v33;
  float v34;
  float v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unint64_t v60;
  float v61;
  float v62;
  unint64_t v63;
  double v64;
  CFAbsoluteTime Current;
  id v66;
  char *v67;
  uint64_t v68;
  _QWORD v69[6];
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  uint8_t buf[4];
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;

  v76 = a3;
  v5 = (_QWORD *)(a1 + 808);
  sub_10007D084(a1 + 808, &v76);
  v6 = sub_1011E1D08(v5);
  v7 = sub_1011E1DA8(v5);
  if ((float)(v6 - v7) > 2.0)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v8 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349312;
      v84 = v6;
      v85 = 2050;
      v86 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CLGBE] #Warning Temperature is changing too quickly, clearing GYTT buffers,max,%{public}f,min,%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v77 = 134349312;
      v78 = v6;
      v79 = 2050;
      v80 = v7;
      v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "[CLGBE] #Warning Temperature is changing too quickly, clearing GYTT buffers,max,%{public}f,min,%{public}f", &v77, 22);
      sub_100512490("Generic", 1, 0, 0, "void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)", "%s\n", v67);
      if (v67 != (char *)buf)
        free(v67);
    }
    sub_1011E1E48((_QWORD *)a1);
    sub_10007D084((uint64_t)v5, &v76);
  }
  sub_10007D084(a1 + 592, a2 + 2);
  sub_10007D084(a1 + 664, a2 + 3);
  sub_10007D084(a1 + 736, a2 + 4);
  v9 = *(_QWORD *)(a1 + 656);
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  if ((int)v9 >= 2)
  {
    v13 = *(_QWORD *)(a1 + 728);
    v14 = 0.0;
    v15 = 0.0;
    if (v13)
      v15 = *(float *)(a1 + 680) / (float)v13;
    v16 = *(_QWORD *)(a1 + 800);
    if (v16)
      v14 = *(float *)(a1 + 752) / (float)v16;
    v17 = *(_QWORD *)(a1 + 648);
    v18 = *(_QWORD *)(a1 + 656);
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v23 = *(_QWORD *)(a1 + 720);
    v24 = 0.0;
    v25 = 0.0;
    v26 = *(_QWORD *)(a1 + 792);
    do
    {
      v27 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + ((v17 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v17 & 0x3FF))
          - (float)(*(float *)(a1 + 608) / (float)v9);
      v28 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF))
          - v15;
      v29 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + ((v26 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v26 & 0x3FF))
          - v14;
      v21 = v21 + (float)(v27 * v27);
      v20 = v20 + (float)(v28 * v28);
      v19 = v19 + (float)(v29 * v29);
      v25 = v25 + v27;
      v24 = v24 + v28;
      v22 = v22 + v29;
      ++v26;
      ++v23;
      ++v17;
      --v18;
    }
    while (v18);
    v30 = v21 - (float)((float)(v25 * v25) / (float)(int)v9);
    v31 = (float)((int)v9 - 1);
    v10 = v30 / v31;
    v11 = (float)(v20 - (float)((float)(v24 * v24) / (float)(int)v9)) / v31;
    v12 = (float)(v19 - (float)((float)(v22 * v22) / (float)(int)v9)) / v31;
  }
  if (*(_QWORD *)(a1 + 584) < 0x21uLL || (float)((float)(v10 + v11) + v12) <= 0.012)
  {
    if (v9 < *(_QWORD *)(a1 + 600))
      return;
    v34 = 0.0;
    v35 = 0.0;
    if (v9)
      v35 = *(float *)(a1 + 608) / (float)v9;
    v36 = *(_QWORD *)(a1 + 728);
    if (v36)
      v34 = *(float *)(a1 + 680) / (float)v36;
    v37 = *(_QWORD *)(a1 + 800);
    v38 = 0.0;
    v39 = 0.0;
    if (v37)
      v39 = *(float *)(a1 + 752) / (float)v37;
    v40 = 0.0;
    v41 = 0.0;
    if ((int)v9 >= 2)
    {
      v42 = *(_QWORD *)(a1 + 648);
      v43 = *(_QWORD *)(a1 + 656);
      v44 = 0.0;
      v45 = v43;
      v46 = 0.0;
      do
      {
        v47 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + ((v42 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v42 & 0x3FF))
            - (float)(*(float *)(a1 + 608) / (float)v9);
        v44 = v44 + (float)(v47 * v47);
        v46 = v46 + v47;
        ++v42;
        --v45;
      }
      while (v45);
      v48 = (float)(int)v9;
      v49 = v44 - (float)((float)(v46 * v46) / (float)(int)v9);
      v50 = (float)((int)v9 - 1);
      v51 = 0.0;
      v52 = 0.0;
      if (v36)
        v52 = *(float *)(a1 + 680) / (float)v36;
      v53 = *(_QWORD *)(a1 + 720);
      v54 = *(_QWORD *)(a1 + 656);
      v55 = 0.0;
      v40 = v49 / v50;
      do
      {
        v56 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + ((v53 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v53 & 0x3FF))
            - v52;
        v51 = v51 + (float)(v56 * v56);
        v55 = v55 + v56;
        ++v53;
        --v54;
      }
      while (v54);
      v57 = v51 - (float)((float)(v55 * v55) / v48);
      v58 = 0.0;
      v59 = 0.0;
      if (v37)
        v59 = *(float *)(a1 + 752) / (float)v37;
      v60 = *(_QWORD *)(a1 + 792);
      v61 = 0.0;
      v38 = v57 / v50;
      do
      {
        v62 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + ((v60 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v60 & 0x3FF))
            - v59;
        v58 = v58 + (float)(v62 * v62);
        v61 = v61 + v62;
        ++v60;
        --v43;
      }
      while (v43);
      v41 = (float)(v58 - (float)((float)(v61 * v61) / v48)) / v50;
    }
    v63 = *(_QWORD *)(a1 + 872);
    if (v63)
      v64 = (float)(*(float *)(a1 + 824) / (float)v63);
    else
      v64 = 0.0;
    Current = CFAbsoluteTimeGetCurrent();
    v66 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase"));
    v69[0] = _NSConcreteStackBlock;
    v69[1] = 3221225472;
    v69[2] = sub_1011E1E80;
    v69[3] = &unk_1021A7628;
    v70 = v35;
    v71 = v34;
    v72 = v39;
    v73 = v40;
    v74 = v38;
    v75 = v41;
    *(double *)&v69[4] = v64;
    *(CFAbsoluteTime *)&v69[5] = Current;
    objc_msgSend(v66, "doAsync:", v69);
  }
  else if (*(_BYTE *)(a1 + 1008))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v32 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      v84 = v10;
      v85 = 2050;
      v86 = v11;
      v87 = 2050;
      v88 = v12;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "[CLGBE] #Warning Could not insert GYTT because bump was detected,variance.x,%{public}f,y,%{public}f,z,%{public}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v77 = 134349568;
      v78 = v10;
      v79 = 2050;
      v80 = v11;
      v81 = 2050;
      v82 = v12;
      LODWORD(v68) = 32;
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "[CLGBE] #Warning Could not insert GYTT because bump was detected,variance.x,%{public}f,y,%{public}f,z,%{public}f", &v77, v68);
      sub_100512490("Generic", 1, 0, 0, "void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)", "%s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
    }
  }
  sub_1011E1E48((_QWORD *)a1);
}

float sub_1011E1D08(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  float **v3;
  float *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;

  v1 = a1[4];
  if (a1[5] == v1)
    goto LABEL_12;
  v2 = a1[7];
  v3 = (float **)(v1 + 8 * (v2 >> 10));
  v4 = *v3;
  v5 = (uint64_t)&(*v3)[v2 & 0x3FF];
  v6 = a1[8] + v2;
  v7 = v6 >> 10;
  v8 = *(_QWORD *)(v1 + 8 * (v6 >> 10));
  v9 = v6 & 0x3FF;
  v10 = (float *)(v8 + 4 * v9);
  if ((float *)v5 != v10)
  {
    v11 = &(*v3)[a1[7] & 0x3FFLL];
    while (1)
    {
      if ((char *)++v11 - (char *)v4 == 4096)
      {
        v12 = v3[1];
        ++v3;
        v4 = v12;
        v11 = v12;
      }
      if (v11 == v10)
        break;
      if (*(float *)v5 < *v11)
        v5 = (uint64_t)v11;
    }
  }
  if (v5 == *(_QWORD *)(v1 + 8 * v7) + 4 * v9)
LABEL_12:
    sub_101945880();
  return *(float *)v5;
}

float sub_1011E1DA8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  float **v3;
  float *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;

  v1 = a1[4];
  if (a1[5] == v1)
    goto LABEL_12;
  v2 = a1[7];
  v3 = (float **)(v1 + 8 * (v2 >> 10));
  v4 = *v3;
  v5 = (uint64_t)&(*v3)[v2 & 0x3FF];
  v6 = a1[8] + v2;
  v7 = v6 >> 10;
  v8 = *(_QWORD *)(v1 + 8 * (v6 >> 10));
  v9 = v6 & 0x3FF;
  v10 = (float *)(v8 + 4 * v9);
  if (v10 != (float *)v5)
  {
    v11 = &(*v3)[a1[7] & 0x3FFLL];
    while (1)
    {
      if ((char *)++v11 - (char *)v4 == 4096)
      {
        v12 = v3[1];
        ++v3;
        v4 = v12;
        v11 = v12;
      }
      if (v11 == v10)
        break;
      if (*v11 < *(float *)v5)
        v5 = (uint64_t)v11;
    }
  }
  if (v5 == *(_QWORD *)(v1 + 8 * v7) + 4 * v9)
LABEL_12:
    sub_1019459F4();
  return *(float *)v5;
}

void sub_1011E1E48(_QWORD *a1)
{
  sub_10041250C(a1 + 74);
  sub_10041250C(a1 + 83);
  sub_10041250C(a1 + 92);
  sub_10041250C(a1 + 101);
}

void sub_1011E1E80(uint64_t a1, uint64_t a2)
{
  float v3;
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  char *v19;
  int v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  uint64_t v47;

  v3 = *(double *)(a1 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, float, double))(*(_QWORD *)a2 + 208))(a2, a1 + 48, a1 + 60, v3, *(double *)(a1 + 40));
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(float *)(a1 + 48);
    v6 = *(float *)(a1 + 52);
    v7 = *(float *)(a1 + 56);
    v8 = *(float *)(a1 + 60);
    v9 = *(float *)(a1 + 64);
    v10 = *(float *)(a1 + 68);
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134350592;
    v35 = v5;
    v36 = 2050;
    v37 = v6;
    v38 = 2050;
    v39 = v7;
    v40 = 2050;
    v41 = v8;
    v42 = 2050;
    v43 = v9;
    v44 = 2050;
    v45 = v10;
    v46 = 2050;
    v47 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CLGBE] Bias estimate inserted: bias,%{public}f,%{public}f,%{public}f,variance,%{public}f,%{public}f,%{public}f,temperature,%{public}f", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v12 = *(float *)(a1 + 48);
    v13 = *(float *)(a1 + 52);
    v14 = *(float *)(a1 + 56);
    v15 = *(float *)(a1 + 60);
    v16 = *(float *)(a1 + 64);
    v17 = *(float *)(a1 + 68);
    v18 = *(_QWORD *)(a1 + 32);
    v20 = 134350592;
    v21 = v12;
    v22 = 2050;
    v23 = v13;
    v24 = 2050;
    v25 = v14;
    v26 = 2050;
    v27 = v15;
    v28 = 2050;
    v29 = v16;
    v30 = 2050;
    v31 = v17;
    v32 = 2050;
    v33 = v18;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "[CLGBE] Bias estimate inserted: bias,%{public}f,%{public}f,%{public}f,variance,%{public}f,%{public}f,%{public}f,temperature,%{public}f", &v20, 72);
    sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)_block_invoke", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
}

void sub_1011E2104(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;

  if (*(_DWORD *)a2 == 1)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v4 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(float *)(a2 + 32);
      v6 = *(float *)(a2 + 36);
      v7 = *(float *)(a2 + 40);
      v8 = *(float *)(a2 + 44);
      v9 = *(float *)(a2 + 48);
      v10 = *(float *)(a2 + 52);
      v11 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134350592;
      v37 = v5;
      v38 = 2050;
      v39 = v6;
      v40 = 2050;
      v41 = v7;
      v42 = 2050;
      v43 = v8;
      v44 = 2050;
      v45 = v9;
      v46 = 2050;
      v47 = v10;
      v48 = 2050;
      v49 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLGBE] GyroBiasFit,slope.x,%{public}f,slope.y,%{public}f,slope.z,%{public}f,intercept.x,%{public}f,intercept.y,%{public}f,intercept.z,%{public}f,lastMiniCal,%{public}f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v13 = *(float *)(a2 + 32);
      v14 = *(float *)(a2 + 36);
      v15 = *(float *)(a2 + 40);
      v16 = *(float *)(a2 + 44);
      v17 = *(float *)(a2 + 48);
      v18 = *(float *)(a2 + 52);
      v19 = *(_QWORD *)(a2 + 8);
      v22 = 134350592;
      v23 = v13;
      v24 = 2050;
      v25 = v14;
      v26 = 2050;
      v27 = v15;
      v28 = 2050;
      v29 = v16;
      v30 = 2050;
      v31 = v17;
      v32 = 2050;
      v33 = v18;
      v34 = 2050;
      v35 = v19;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "[CLGBE] GyroBiasFit,slope.x,%{public}f,slope.y,%{public}f,slope.z,%{public}f,intercept.x,%{public}f,intercept.y,%{public}f,intercept.z,%{public}f,lastMiniCal,%{public}f", &v22, 72);
      sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::feedGyroBiasFit(CLMotionTypeGyroBiasFit)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    if (!*(_BYTE *)(a1 + 1008))
      *(_DWORD *)(a1 + 932) = 1080033280;
    *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 952) = *(_DWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 52);
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v12 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[CLGBE] Expected linear fit.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      LOWORD(v22) = 0;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "[CLGBE] Expected linear fit.", &v22, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLGyroBiasEstimator::feedGyroBiasFit(CLMotionTypeGyroBiasFit)", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
}

void sub_1011E24D8(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1011E2508()
{
  operator delete();
}

_QWORD *sub_1011E251C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A76A8;
  return result;
}

void sub_1011E2540(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A76A8;
}

uint64_t sub_1011E2558(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for gyro notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Registering for gyro notifications", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Sample>]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = sub_10021C350();
  return sub_1000A4FD8(v4, 0, v2, 0.02);
}

uint64_t sub_1011E2700(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011E273C()
{
}

void sub_1011E274C()
{
  operator delete();
}

_QWORD *sub_1011E2760()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A7738;
  return result;
}

void sub_1011E2784(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A7738;
}

void sub_1011E279C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Unregistering for gyro notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Unregistering for gyro notifications", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Sample>]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = sub_10021C350();
  sub_1000A4A6C(v4, 0, v2);
}

uint64_t sub_1011E293C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011E2978()
{
}

_QWORD *sub_1011E2984(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;

  *a1 = off_1021D5F20;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_1021A77C8;
  a1[1] = 0;
  v7 = a1 + 4;
  a1[7] = 0;
  v12 = a1;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    sub_10025FD1C();
  if ((*(unsigned int (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v12))
    sub_100270E34((uint64_t)v13, a3);
  else
    v14 = 0;
  sub_10027839C(v7, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_9;
  }
  if (v14)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  return a1;
}

void sub_1011E2AA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1011E2AF8(_QWORD *a1)
{
  sub_1011E2B1C(a1);
  operator delete();
}

uint64_t sub_1011E2B1C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  *a1 = off_1021A77C8;
  v2 = a1[7];
  if (v2)
  {
    v6 = a1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 48))(v2, &v6);
    v3 = (_QWORD *)a1[7];
    if (v3 == a1 + 4)
    {
      v4 = 4;
      v3 = a1 + 4;
      goto LABEL_6;
    }
    if (v3)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return sub_100015E88((uint64_t)a1);
}

void sub_1011E2BAC()
{
  operator delete();
}

_QWORD *sub_1011E2BC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A7818;
  return result;
}

void sub_1011E2BE4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A7818;
}

uint64_t sub_1011E2BFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for gyro temperature notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Registering for gyro temperature notifications", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Temperature>]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = sub_10021C350();
  return sub_1000A4FD8(v4, 1, v2, 1.0);
}

uint64_t sub_1011E2DA0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011E2DDC()
{
}

void sub_1011E2DEC()
{
  operator delete();
}

_QWORD *sub_1011E2E00()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A78A8;
  return result;
}

void sub_1011E2E24(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A78A8;
}

void sub_1011E2E3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Unregistering for gyro temperature notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Unregistering for gyro temperature notifications", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Temperature>]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = sub_10021C350();
  sub_1000A4A6C(v4, 1, v2);
}

uint64_t sub_1011E2FDC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011E3018()
{
}

_QWORD *sub_1011E3024(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;

  *a1 = off_1021D5F20;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_1021A7938;
  a1[1] = 0;
  v7 = a1 + 4;
  a1[7] = 0;
  v12 = a1;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    sub_10025FD1C();
  if ((*(unsigned int (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v12))
    sub_100270E34((uint64_t)v13, a3);
  else
    v14 = 0;
  sub_10027839C(v7, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_9;
  }
  if (v14)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  return a1;
}

void sub_1011E3140(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1011E3198(_QWORD *a1)
{
  sub_1011E31BC(a1);
  operator delete();
}

uint64_t sub_1011E31BC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  *a1 = off_1021A7938;
  v2 = a1[7];
  if (v2)
  {
    v6 = a1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 48))(v2, &v6);
    v3 = (_QWORD *)a1[7];
    if (v3 == a1 + 4)
    {
      v4 = 4;
      v3 = a1 + 4;
      goto LABEL_6;
    }
    if (v3)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return sub_100015E88((uint64_t)a1);
}

void sub_1011E324C()
{
  operator delete();
}

_QWORD *sub_1011E3260()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A7988;
  return result;
}

void sub_1011E3284(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A7988;
}

uint64_t sub_1011E329C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for magnetometer notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Registering for magnetometer notifications", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMagnetometer::Sample>]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = sub_1000A6A30();
  return sub_1000A4FD8(v4, 0, v2, 0.025);
}

uint64_t sub_1011E3444(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011E3480()
{
}

void sub_1011E3490()
{
  operator delete();
}

_QWORD *sub_1011E34A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A7A18;
  return result;
}

void sub_1011E34C8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A7A18;
}

void sub_1011E34E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Unregistering for magnetometer notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Unregistering for magnetometer notifications", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMagnetometer::Sample>]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = sub_1000A6A30();
  sub_1000A4A6C(v4, 0, v2);
}

uint64_t sub_1011E3680(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1011E36BC()
{
}

_QWORD *sub_1011E36C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;

  *a1 = off_1021D5F20;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_1021A7AA8;
  a1[1] = 0;
  v7 = a1 + 4;
  a1[7] = 0;
  v12 = a1;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    sub_10025FD1C();
  if ((*(unsigned int (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v12))
    sub_100270E34((uint64_t)v13, a3);
  else
    v14 = 0;
  sub_10027839C(v7, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_9;
  }
  if (v14)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  return a1;
}

void sub_1011E37E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1011E383C(_QWORD *a1)
{
  sub_1011E3860(a1);
  operator delete();
}

uint64_t sub_1011E3860(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  *a1 = off_1021A7AA8;
  v2 = a1[7];
  if (v2)
  {
    v6 = a1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 48))(v2, &v6);
    v3 = (_QWORD *)a1[7];
    if (v3 == a1 + 4)
    {
      v4 = 4;
      v3 = a1 + 4;
      goto LABEL_6;
    }
    if (v3)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return sub_100015E88((uint64_t)a1);
}

void sub_1011E38F0()
{
  operator delete();
}

_QWORD *sub_1011E3904()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A7AF8;
  return result;
}

void sub_1011E3928(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A7AF8;
}

uint64_t sub_1011E3940(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for SPU Gyro Bias And Variance", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Registering for SPU Gyro Bias And Variance", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::prepareSPUGyroBiasAndVarianceDispatcher()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMotionCoprocessorInterface::GyroBiasAndVariance>]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = sub_1000A652C(0);
  return sub_1000A4FD8(v4, 8, v2, -1.0);
}

uint64_t sub_1011E3AE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1011E3B24()
{
}

void sub_1011E3B34()
{
  operator delete();
}

_QWORD *sub_1011E3B48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021A7B88;
  return result;
}

void sub_1011E3B6C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021A7B88;
}

void sub_1011E3B84(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Removing SPU Gyro Bias And Variance dispatcher", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Removing SPU Gyro Bias And Variance dispatcher", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::prepareSPUGyroBiasAndVarianceDispatcher()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMotionCoprocessorInterface::GyroBiasAndVariance>]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = sub_1000A652C(0);
  sub_1000A4A6C(v4, 8, v2);
}

uint64_t sub_1011E3D28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1011E3D64()
{
}

_QWORD *sub_1011E3D70(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;

  *a1 = off_1021D5F20;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_1021A7C18;
  a1[1] = 0;
  v7 = a1 + 4;
  a1[7] = 0;
  v12 = a1;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    sub_10025FD1C();
  if ((*(unsigned int (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v12))
    sub_100270E34((uint64_t)v13, a3);
  else
    v14 = 0;
  sub_10027839C(v7, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_9;
  }
  if (v14)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  return a1;
}

void sub_1011E3E8C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1011E3EE4(_QWORD *a1)
{
  sub_1011E3F08(a1);
  operator delete();
}

uint64_t sub_1011E3F08(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  *a1 = off_1021A7C18;
  v2 = a1[7];
  if (v2)
  {
    v6 = a1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 48))(v2, &v6);
    v3 = (_QWORD *)a1[7];
    if (v3 == a1 + 4)
    {
      v4 = 4;
      v3 = a1 + 4;
      goto LABEL_6;
    }
    if (v3)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return sub_100015E88((uint64_t)a1);
}

void sub_1011E3F94(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_1011E3FC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  sub_1011E401C();
  return a1;
}

void sub_1011E4008(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E401C()
{
  CFRunLoopRef Current;
  uint64_t result;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  result = sub_1001AD8D0();
  if (Current != (CFRunLoopRef)result)
    sub_101945B68();
  return result;
}

uint64_t sub_1011E4054(_QWORD *a1)
{
  sub_1011E407C(a1);
  return sub_100261F44((uint64_t)a1);
}

void sub_1011E407C(_QWORD *a1)
{
  NSObject *v2;
  IOCFPlugInInterface **v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  int v14;
  IOCFPlugInInterface **v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  IOCFPlugInInterface **v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  sub_1011E401C();
  if (!*a1)
    return;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021A7C90);
  v2 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Close hid driver interface", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    LOWORD(v14) = 0;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "[CLSPUHIDDriverInterface] Close hid driver interface", &v14, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::closeHIDDriverInterface()", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v3 = (IOCFPlugInInterface **)a1[2];
  v4 = a1[3];
  v5 = a1 + 2;
  if (v4)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v4 + 72))(a1[3], 0);
    if (!v3)
      goto LABEL_12;
  }
  else if (!v3)
  {
    *(_QWORD *)(*a1 + 8) = 0;
    *v5 = 0;
    a1[3] = 0;
    return;
  }
  ((void (*)(IOCFPlugInInterface **))(*v3)->Release)(v3);
  IODestroyPlugInInterface(v3);
LABEL_12:
  *(_QWORD *)(*a1 + 8) = 0;
  *v5 = 0;
  a1[3] = 0;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021A7C90);
  v6 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[2];
    v8 = a1[3];
    *(_DWORD *)buf = 134218752;
    v23 = v3;
    v24 = 2048;
    v25 = v4;
    v26 = 2048;
    v27 = v7;
    v28 = 2048;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLSPUHIDDriverInterface] Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v10 = a1[2];
    v11 = a1[3];
    v14 = 134218752;
    v15 = v3;
    v16 = 2048;
    v17 = v4;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    LODWORD(v13) = 42;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "[CLSPUHIDDriverInterface] Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", &v14, v13);
    sub_100512490("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::closeHIDDriverInterface()", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
}

void sub_1011E4404(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  __IOHIDServiceClient *v4;
  __IOHIDServiceClient *v5;
  const __CFNumber *RegistryID;
  const __CFDictionary *v7;
  io_service_t MatchingService;
  io_service_t v9;
  const __CFUUID *v10;
  const __CFUUID *v11;
  mach_error_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  IOCFPlugInInterface **v20;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v22;
  CFUUIDBytes v23;
  mach_error_t v24;
  mach_error_t v25;
  NSObject *v26;
  char *v27;
  mach_error_t v28;
  mach_error_t v29;
  NSObject *v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t byte15;
  uint64_t byte15a;
  const void *byte15b;
  const void *v49;
  const void *v50;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v53;
  _BYTE v54[28];
  __int16 v55;
  IOCFPlugInInterface **v56;
  __int16 v57;
  const void *v58;
  uint8_t buf[4];
  _BYTE v60[28];
  __int16 v61;
  IOCFPlugInInterface **v62;
  __int16 v63;
  const void *v64;

  sub_1011E401C();
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021A7C90);
  v2 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Open hid driver interface", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    LOWORD(v53) = 0;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "[CLSPUHIDDriverInterface] Open hid driver interface", &v53, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  v3 = *a1;
  if (!*a1)
    return;
  theInterface = 0;
  valuePtr = 0;
  v50 = 0;
  v4 = (__IOHIDServiceClient *)sub_100A0A3A0(v3);
  if (!v4)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v18 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[CLSPUHIDDriverInterface] IoHidDevice is not ready", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    LOWORD(v53) = 0;
    LODWORD(byte15) = 2;
    v17 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "[CLSPUHIDDriverInterface] IoHidDevice is not ready", &v53, byte15);
    sub_100512490("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n");
LABEL_35:
    if (v17 == buf)
      return;
    goto LABEL_36;
  }
  v5 = v4;
  RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v4);
  CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
  v7 = IORegistryEntryIDMatching(valuePtr);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v7);
  if (!MatchingService)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v19 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Service doesn't exist", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    LOWORD(v53) = 0;
    LODWORD(byte15) = 2;
    v17 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "[CLSPUHIDDriverInterface] Service doesn't exist", &v53, byte15);
    sub_100512490("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n");
    goto LABEL_35;
  }
  v9 = MatchingService;
  HIDWORD(v49) = 0;
  v10 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
  v11 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v12 = IOCreatePlugInInterfaceForService(v9, v10, v11, &theInterface, (SInt32 *)&v49 + 1);
  IOObjectRelease(v9);
  if (v12)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v13 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      v14 = mach_error_string(v12);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v60 = v12;
      *(_WORD *)&v60[4] = 2082;
      *(_QWORD *)&v60[6] = v14;
      *(_WORD *)&v60[14] = 2114;
      *(_QWORD *)&v60[16] = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to create plugin interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v15 = qword_10229FC88;
    v16 = mach_error_string(v12);
    v53 = 67240706;
    *(_DWORD *)v54 = v12;
    *(_WORD *)&v54[4] = 2082;
    *(_QWORD *)&v54[6] = v16;
    *(_WORD *)&v54[14] = 2114;
    *(_QWORD *)&v54[16] = v5;
    LODWORD(byte15a) = 28;
    v17 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "[CLSPUHIDDriverInterface] Unable to create plugin interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", &v53, byte15a);
    sub_100512490("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", (const char *)v17);
    if (v17 == buf)
      return;
LABEL_36:
    free(v17);
    return;
  }
  v20 = theInterface;
  QueryInterface = (*theInterface)->QueryInterface;
  v22 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
  v23 = CFUUIDGetUUIDBytes(v22);
  v24 = ((uint64_t (*)(IOCFPlugInInterface **, _QWORD, _QWORD, const void **))QueryInterface)(v20, *(_QWORD *)&v23.byte0, *(_QWORD *)&v23.byte8, &v50);
  if (v24)
  {
    v25 = v24;
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v26 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      v27 = mach_error_string(v25);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v60 = v25;
      *(_WORD *)&v60[4] = 2082;
      *(_QWORD *)&v60[6] = v27;
      *(_WORD *)&v60[14] = 2114;
      *(_QWORD *)&v60[16] = v5;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to set up query interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021A7C90);
      v37 = qword_10229FC88;
      v38 = mach_error_string(v25);
      v53 = 67240706;
      *(_DWORD *)v54 = v25;
      *(_WORD *)&v54[4] = 2082;
      *(_QWORD *)&v54[6] = v38;
      *(_WORD *)&v54[14] = 2114;
      *(_QWORD *)&v54[16] = v5;
      LODWORD(byte15b) = 28;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 17, "[CLSPUHIDDriverInterface] Unable to set up query interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", &v53, byte15b);
      sub_100512490("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v39);
      if (v39 != (char *)buf)
        free(v39);
    }
LABEL_43:
    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }
    return;
  }
  v28 = (*(uint64_t (**)(const void *, _QWORD))(*(_QWORD *)v50 + 64))(v50, 0);
  if (v28)
  {
    v29 = v28;
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v30 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      v31 = mach_error_string(v29);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v60 = v29;
      *(_WORD *)&v60[4] = 2082;
      *(_QWORD *)&v60[6] = v31;
      *(_WORD *)&v60[14] = 2114;
      *(_QWORD *)&v60[16] = v5;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to open hid driver interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021A7C90);
      v40 = qword_10229FC88;
      v41 = mach_error_string(v29);
      v53 = 67240706;
      *(_DWORD *)v54 = v29;
      *(_WORD *)&v54[4] = 2082;
      *(_QWORD *)&v54[6] = v41;
      *(_WORD *)&v54[14] = 2114;
      *(_QWORD *)&v54[16] = v5;
      LODWORD(byte15b) = 28;
      v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 17, "[CLSPUHIDDriverInterface] Unable to open hid driver interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", &v53, byte15b);
      sub_100512490("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v42);
      if (v42 != (char *)buf)
        free(v42);
    }
    if (v50)
      (*(void (**)(const void *, _QWORD))(*(_QWORD *)v50 + 72))(v50, 0);
    goto LABEL_43;
  }
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021A7C90);
  v32 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
  {
    v33 = a1[2];
    v34 = a1[3];
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)v60 = valuePtr;
    *(_WORD *)&v60[8] = 2048;
    *(_QWORD *)&v60[10] = v33;
    *(_WORD *)&v60[18] = 2048;
    *(_QWORD *)&v60[20] = v34;
    v61 = 2048;
    v62 = theInterface;
    v63 = 2048;
    v64 = v50;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[CLSPUHIDDriverInterface] Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v43 = a1[2];
    v44 = a1[3];
    v53 = 134219008;
    *(_QWORD *)v54 = valuePtr;
    *(_WORD *)&v54[8] = 2048;
    *(_QWORD *)&v54[10] = v43;
    *(_WORD *)&v54[18] = 2048;
    *(_QWORD *)&v54[20] = v44;
    v55 = 2048;
    v56 = theInterface;
    v57 = 2048;
    v58 = v50;
    LODWORD(byte15b) = 52;
    v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "[CLSPUHIDDriverInterface] Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", &v53, byte15b, v49, v50, theInterface);
    sub_100512490("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v45);
    if (v45 != (char *)buf)
      free(v45);
  }
  *(_QWORD *)(*a1 + 8) = valuePtr;
  v35 = (uint64_t)v50;
  a1[2] = (uint64_t)theInterface;
  a1[3] = v35;
}

uint64_t sub_1011E4FF0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  NSObject *v20;
  const char *v22;
  uint8_t *v23;
  double v24;
  uint8_t *v25;
  int v26;
  char *v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  char *v31;
  __int16 v32;
  int v33;

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021A7C90);
  v10 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Attempting to send command with reply to SPU,length,%zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v26 = 134217984;
    v27 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "[CLSPUHIDDriverInterface] Attempting to send command with reply to SPU,length,%zu", (size_t)&v26);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 80))(v11, a2, a3, a4, a5);
    if ((_DWORD)v12)
    {
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021A7C90);
      v13 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
      {
        v14 = mach_error_string(v12);
        *(_DWORD *)buf = 136446466;
        v31 = v14;
        v32 = 1026;
        v33 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] sendCommand() = %{public}s (0x%{public}x)", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021A7C90);
        v15 = qword_10229FC88;
        v16 = mach_error_string(v12);
        v26 = 136446466;
        v27 = v16;
        v28 = 1026;
        v29 = v12;
        v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "[CLSPUHIDDriverInterface] sendCommand() = %{public}s (0x%{public}x)", &v26, 18);
        v19 = v18;
        sub_100512490("Generic", 1, 0, 0, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "%s\n", v17);
LABEL_29:
        if (v19 != buf)
          free(v19);
      }
    }
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    v20 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[CLSPUHIDDriverInterface] hidDriverInterface NULL, unable to send command", buf, 2u);
    }
    v12 = 3758097084;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021A7C90);
      LOWORD(v26) = 0;
      v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "[CLSPUHIDDriverInterface] hidDriverInterface NULL, unable to send command", &v26, 2);
      v19 = v25;
      sub_100512490("Generic", 1, 0, 2, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "%s\n", v24);
      goto LABEL_29;
    }
  }
  return v12;
}

void sub_1011E5470(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_1011E549C(uint64_t a1, void *a2)
{
  uint64_t v3;
  float *v4;
  _BYTE *v5;
  NSObject *v6;
  double v7;
  uint64_t v8;
  char v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  _OWORD v27[5];
  int v28;
  double v29;
  _OWORD buf[102];

  v3 = sub_100C2229C(a1, a2);
  *(_QWORD *)v3 = off_1021A7CC0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 100;
  *(_BYTE *)(v3 + 148) = 1;
  *(_QWORD *)(v3 + 164) = 0x10000000000;
  *(_DWORD *)(v3 + 160) = 1031798784;
  *(_BYTE *)(v3 + 1196) = 1;
  *(_DWORD *)(v3 + 1216) = 256;
  *(_QWORD *)(v3 + 1208) = 1031798784;
  *(_BYTE *)(v3 + 2244) = 1;
  *(_DWORD *)(v3 + 2264) = 256;
  *(_QWORD *)(v3 + 2256) = 1031798784;
  sub_101476228(v3 + 3296, v3 + 136);
  sub_1008819DC((_QWORD *)(a1 + 17216));
  v4 = (float *)(a1 + 17512);
  *(_DWORD *)(a1 + 17512) = 1067030938;
  *(_WORD *)(a1 + 17516) = 0;
  *(_DWORD *)(a1 + 17520) = 3;
  *(_QWORD *)(a1 + 17528) = 0;
  *(_WORD *)(a1 + 17536) = 0;
  v5 = (_BYTE *)(a1 + 17536);
  memset(v27, 0, 77);
  sub_100E3A5AC(v27);
  sub_100881A44(a1 + 17216, (uint64_t)v27);
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
  v6 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *v4;
    LODWORD(buf[0]) = 134217984;
    *(double *)((char *)buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "configuration: wake threshold = %f", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v22 = *v4;
    v28 = 134217984;
    v29 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "configuration: wake threshold = %f", COERCE_DOUBLE(&v28));
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "CLOnBodyNotifier6::CLOnBodyNotifier6(id<CLIntersiloUniverse>)", "%s\n", v23);
    if (v24 != (char *)buf)
      free(v24);
  }
  sub_100881D1C(a1 + 17216);
  v8 = sub_100127B9C();
  sub_100081C10(v8, buf);
  v9 = sub_1001E4874(*(uint64_t *)&buf[0], "EnablePmOnBodyDetection", (BOOL *)(a1 + 17536));
  v10 = v9;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_10;
  v12 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_10:
    if ((v9 & 1) != 0)
      goto LABEL_11;
LABEL_19:
    *v5 = 0;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if ((v10 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  if (*v5)
  {
    sub_1011E5A64(a1, 1);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v14 = qword_10229FEF8;
    if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Registering with daemon status", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      LOWORD(v28) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Registering with daemon status", &v28, 2);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "CLOnBodyNotifier6::CLOnBodyNotifier6(id<CLIntersiloUniverse>)", "%s\n", v25);
      if (v26 != (char *)buf)
        free(v26);
    }
    sub_100647FA8();
  }
LABEL_20:
  v15 = sub_100127B9C();
  sub_100081C10(v15, buf);
  v16 = sub_1001E4874(*(uint64_t *)&buf[0], "ForceNoThrottlingOnBody", (BOOL *)(a1 + 17537));
  v17 = v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((v17 & 1) != 0)
        return a1;
      goto LABEL_25;
    }
  }
  if ((v16 & 1) == 0)
LABEL_25:
    *(_BYTE *)(a1 + 17537) = 0;
  return a1;
}

void sub_1011E59D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  *v3 = off_102158DA8;
  sub_100D0400C(v3);
  *v2 = off_102153490;
  v5 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100C22494(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E5A64(uint64_t result, int a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v2 = result + 17516;
  if (*(_BYTE *)(result + 17536))
    v3 = a2 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    v4 = result;
    if (sub_10024095C() && !*(_QWORD *)(v4 + 112))
    {
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      v5 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Registering with CLAccelerometer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Registering with CLAccelerometer", v11, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::startOnBodyDetectionHelper(BOOL)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      operator new();
    }
    if (!*(_BYTE *)(v2 + 21) && sub_10024095C() && !*(_QWORD *)(v4 + 120))
    {
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      v6 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Registering throttledDispatcher with CLAccelerometer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Registering throttledDispatcher with CLAccelerometer", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::startOnBodyDetectionHelper(BOOL)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      operator new();
    }
    *(_WORD *)v2 = 0;
    *(_DWORD *)(v2 + 4) = 3;
    return sub_100882454(v4 + 17216);
  }
  return result;
}

void sub_1011E5E0C()
{
  operator delete();
}

void sub_1011E5E54(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLOnBodyNotifier6::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A7DE0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier6::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A7DE0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier6::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_1011E74C4((_BYTE *)a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1011E6004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011E6028(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021A7CC0;
  a1[2152] = off_102158DA8;
  sub_100D0400C(a1 + 2152);
  a1[412] = off_102153490;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_100C22494((uint64_t)a1);
}

void sub_1011E609C(_QWORD *a1)
{
  sub_1011E6028(a1);
  operator delete();
}

void sub_1011E60C0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  _OWORD v11[5];
  int v12;
  double v13;
  uint8_t buf[4];
  double v15;

  v4 = a1 + 17512;
  v5 = *(_QWORD *)(a1 + 112);
  if (v5)
    sub_1011E6308((_BYTE *)a1, 1);
  memset(v11, 0, 77);
  sub_100E3A984(a2, 0, (uint64_t)v11);
  *(_DWORD *)v4 = DWORD1(v11[3]);
  sub_100881A44(a1 + 17216, (uint64_t)v11);
  *(_WORD *)(v4 + 4) = 0;
  *(_DWORD *)(v4 + 8) = 3;
  sub_100882454(a1 + 17216);
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
  v6 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float *)v4;
    *(_DWORD *)buf = 134217984;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "configuration: wake threshold = %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v8 = *(float *)v4;
    v12 = 134217984;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "configuration: wake threshold = %f", COERCE_DOUBLE(&v12));
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLOnBodyNotifier6::feedParams(NSDictionary *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100881D1C(a1 + 17216);
  if (v5)
    sub_1011E5A64(a1, 1);
}

_BYTE *sub_1011E6308(_BYTE *result, int a2)
{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v2 = result + 17536;
  if (result[17536])
    v3 = a2 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    v4 = result;
    result = (_BYTE *)sub_10024095C();
    if (result && *((_QWORD *)v4 + 14))
    {
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      v5 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Unregistering with CLAccelerometer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Unregistering with CLAccelerometer", v14, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::stopOnBodyDetectionHelper(BOOL)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      v6 = sub_10024095C();
      sub_1000A4A6C(v6, 0, *((_QWORD *)v4 + 14));
      result = (_BYTE *)*((_QWORD *)v4 + 14);
      if (result)
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
      *((_QWORD *)v4 + 14) = 0;
    }
    if (!v2[1])
    {
      result = (_BYTE *)sub_10024095C();
      if (result)
      {
        if (*((_QWORD *)v4 + 15))
        {
          if (qword_10229FEF0 != -1)
            dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
          v7 = qword_10229FEF8;
          if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Unregistering throttleDispatcher with CLAccelerometer", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEF0 != -1)
              dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
            v14[0] = 0;
            LODWORD(v13) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Unregistering throttleDispatcher with CLAccelerometer", v14, v13);
            v12 = (uint8_t *)v11;
            sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::stopOnBodyDetectionHelper(BOOL)", "%s\n", v11);
            if (v12 != buf)
              free(v12);
          }
          v8 = sub_10024095C();
          sub_1000A4A6C(v8, 0, *((_QWORD *)v4 + 15));
          result = (_BYTE *)*((_QWORD *)v4 + 15);
          if (result)
            result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
          *((_QWORD *)v4 + 15) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1011E665C(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = (_BYTE *)(a1 + 17536);
  if (*(_BYTE *)(a1 + 17536))
  {
    v3 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *v2 = 0;
  }
  return sub_100C224A0((_BYTE *)a1);
}

uint64_t sub_1011E66A8(uint64_t a1)
{
  return sub_1011E5A64(a1, 0);
}

void sub_1011E66B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLOnBodyNotifier6::onAccelerometerData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A7DE0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier6::onAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A7DE0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier6::onAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1011E6A60(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_1011E6868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1011E6888(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLOnBodyNotifier6::onThrottledAccelerometerData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A7DE0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier6::onThrottledAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A7DE0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier6::onThrottledAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1011E7024((uint64_t *)a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1011E6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1011E6A58(_BYTE *a1)
{
  return sub_1011E6308(a1, 0);
}

void sub_1011E6A60(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  unsigned __int16 v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int16 v21;
  unsigned __int16 v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int16 v27;
  unsigned __int16 v28;
  float v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  unsigned __int16 v34;
  double v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  float v39;
  float v40;
  float v41;
  NSObject *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  double v53;
  double v54;
  int v55;
  int v56;
  _BYTE v57[18];
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;
  uint8_t buf[4];
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;

  v4 = a1 + 17308;
  if (a3)
  {
    v5 = *(unsigned int *)(a1 + 168);
    v6 = *(unsigned int *)(a1 + 1216);
    v7 = *(unsigned int *)(a1 + 2264);
    v8 = *(_WORD *)(a1 + 166);
    v9 = *(unsigned __int16 *)(a1 + 164);
    v10 = *(_WORD *)(a1 + 1214);
    v11 = *(unsigned __int16 *)(a1 + 1212);
    v12 = 24 * (a3 - 1);
    v13 = a3;
    v14 = (float *)(a2 + 16);
    v15 = *(_WORD *)(a1 + 2262);
    v16 = *(unsigned __int16 *)(a1 + 2260);
    do
    {
      v17 = fminf(fmaxf(*(v14 - 2), -4.0), 4.0);
      v18 = v9 + v8;
      if (v18 >= v5)
        v19 = v5;
      else
        v19 = 0;
      *(float *)(a1 + 172 + 4 * (v18 - v19)) = v17;
      if (v5 <= v8)
      {
        v20 = v9 + 1;
        if (v20 >= v5)
          v21 = v5;
        else
          v21 = 0;
        v22 = v20 - v21;
        v9 = v22;
        *(_WORD *)(a1 + 164) = v22;
      }
      else
      {
        *(_WORD *)(a1 + 166) = ++v8;
      }
      v23 = fminf(fmaxf(*(v14 - 1), -4.0), 4.0);
      v24 = v11 + v10;
      if (v24 >= v6)
        v25 = v6;
      else
        v25 = 0;
      *(float *)(a1 + 1220 + 4 * (v24 - v25)) = v23;
      if (v6 <= v10)
      {
        v26 = v11 + 1;
        if (v26 >= v6)
          v27 = v6;
        else
          v27 = 0;
        v28 = v26 - v27;
        v11 = v28;
        *(_WORD *)(a1 + 1212) = v28;
      }
      else
      {
        *(_WORD *)(a1 + 1214) = ++v10;
      }
      v29 = fminf(fmaxf(*v14, -4.0), 4.0);
      v30 = v16 + v15;
      if (v30 >= v7)
        v31 = v7;
      else
        v31 = 0;
      *(float *)(a1 + 2268 + 4 * (v30 - v31)) = v29;
      if (v7 <= v15)
      {
        v32 = v16 + 1;
        if (v32 >= v7)
          v33 = v7;
        else
          v33 = 0;
        v34 = v32 - v33;
        v16 = v34;
        *(_WORD *)(a1 + 2260) = v34;
      }
      else
      {
        *(_WORD *)(a1 + 2262) = ++v15;
      }
      v14 += 6;
      --v13;
    }
    while (v13);
    v35 = *(double *)(a2 + v12);
    *(_BYTE *)(a1 + 148) = 1;
    *(_BYTE *)(a1 + 1196) = 1;
    *(_BYTE *)(a1 + 2244) = 1;
  }
  else
  {
    v35 = 0.0;
  }
  *(_QWORD *)(a1 + 136) = (unint64_t)(v35 * 1000000.0);
  sub_1014466E4((_QWORD *)(a1 + 3296));
  v36 = sub_10088252C(a1 + 17216);
  v37 = v36;
  v38 = HIDWORD(v36);
  v40 = *(float *)(v4 + 4);
  v39 = *(float *)(v4 + 8);
  if ((_DWORD)v36)
    v41 = *(float *)v4;
  else
    v41 = 1.0 - *(float *)v4;
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
  v42 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v43 = *(_QWORD *)(a1 + 136);
    *(_DWORD *)buf = 134219264;
    v67 = v43;
    v68 = 2048;
    v69 = v40;
    v70 = 2048;
    v71 = v39;
    v72 = 1024;
    v73 = v37;
    v74 = 1024;
    v75 = v38;
    v76 = 2048;
    v77 = v41;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "detection @ %llu : low %f high %f status %d confidence %d odds %.2f", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v50 = *(_QWORD *)(a1 + 136);
    v56 = 134219264;
    *(_QWORD *)v57 = v50;
    *(_WORD *)&v57[8] = 2048;
    *(double *)&v57[10] = v40;
    v58 = 2048;
    v59 = v39;
    v60 = 1024;
    v61 = v37;
    v62 = 1024;
    v63 = v38;
    v64 = 2048;
    v65 = v41;
    LODWORD(v53) = 54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "detection @ %llu : low %f high %f status %d confidence %d odds %.2f", &v56, v53, v54, v55);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  v56 = v37;
  *(_DWORD *)v57 = v38;
  *(double *)&v57[4] = v35;
  *(_DWORD *)buf = 0;
  (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v56, 1, 0xFFFFFFFFLL, 0);
  if (!*(_BYTE *)(v4 + 229))
  {
    if (*(_DWORD *)(v4 + 212) == v37)
    {
      v44 = (unsigned __int16)++*(_WORD *)(v4 + 208);
      *(_QWORD *)(a1 + 17528) = *(_QWORD *)(a1 + 136);
      if (v44 >= 8)
      {
        *(_WORD *)(v4 + 208) = 0;
        v45 = sub_10024095C();
        if ((sub_1000A4FD8(v45, 0, *(_QWORD *)(a1 + 120), 0.2) & 1) != 0)
        {
          v46 = sub_10024095C();
          sub_1000A4A6C(v46, 0, *(_QWORD *)(a1 + 112));
        }
        else
        {
          if (qword_10229FEF0 != -1)
            dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
          v47 = qword_10229FEF8;
          if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Failed to add throttled dispatcher", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEF0 != -1)
              dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
            LOWORD(v54) = 0;
            LODWORD(v53) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Failed to add throttled dispatcher", &v54, *(_QWORD *)&v53);
            v49 = (uint8_t *)v48;
            sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v48);
            if (v49 != buf)
              free(v49);
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 212) = v37;
      *(_WORD *)(v4 + 208) = 0;
      *(_QWORD *)(a1 + 17528) = *(_QWORD *)(a1 + 136);
    }
  }
}

void sub_1011E7024(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  float v5;
  float v6;
  unint64_t v7;
  float v8;
  float v9;
  NSObject *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  NSObject *v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  int v25;
  unint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  uint8_t buf[4];
  _BYTE v38[18];
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;

  v4 = a1 + 2189;
  v5 = fminf(fmaxf(*(float *)(a2 + 8), -4.0), 4.0);
  v6 = fminf(fmaxf(*(float *)(a2 + 12), -4.0), 4.0);
  v7 = (unint64_t)(*(double *)a2 * 1000000.0);
  v8 = fminf(fmaxf(*(float *)(a2 + 16), -4.0), 4.0);
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
  v9 = (float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v8 * v8);
  v10 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(float *)v4;
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)v38 = v7;
    *(_WORD *)&v38[8] = 2048;
    *(double *)&v38[10] = v5;
    v39 = 2048;
    v40 = v6;
    v41 = 2048;
    v42 = v8;
    v43 = 2048;
    v44 = v9;
    v45 = 2048;
    v46 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v19 = *(float *)v4;
    v25 = 134219264;
    v26 = v7;
    v27 = 2048;
    v28 = v5;
    v29 = 2048;
    v30 = v6;
    v31 = 2048;
    v32 = v8;
    v33 = 2048;
    v34 = v9;
    v35 = 2048;
    v36 = v19;
    LODWORD(v24) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f", &v25, v24);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onThrottledAccelerometerData(const CLAccelerometer::Sample *)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v12 = a1[2191];
  a1[2191] = v7;
  v13 = v12 + 400000;
  if (v9 <= *(float *)v4 && v13 >= v7)
  {
    v17 = (unsigned __int16)(*((_WORD *)v4 + 2) + 1) % 0xDu;
    *((_WORD *)v4 + 2) = v17;
    if (!v17)
    {
      *(_DWORD *)buf = *((_DWORD *)v4 + 2);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)&v38[4] = *(_QWORD *)a2;
      v25 = 0;
      (*(void (**)(uint64_t *, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, &v25, buf, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else
  {
    *((_WORD *)v4 + 2) = 0;
    *((_DWORD *)v4 + 2) = 3;
    sub_100882454((uint64_t)(a1 + 2152));
    v15 = sub_10024095C();
    if ((sub_1000A4FD8(v15, 0, a1[14], 0.01) & 1) != 0)
    {
      v16 = sub_10024095C();
      sub_1000A4A6C(v16, 0, a1[15]);
    }
    else
    {
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      v18 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Failed to add dispatcher", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
        LOWORD(v25) = 0;
        LODWORD(v24) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Failed to add dispatcher", &v25, *(_QWORD *)&v24);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onThrottledAccelerometerData(const CLAccelerometer::Sample *)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
    }
  }
}

_BYTE *sub_1011E74C4(_BYTE *result, uint64_t a2, _DWORD *a3)
{
  _BYTE *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v3 = result;
  if (*a3 == 3)
  {
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v5 = qword_10229FEF8;
    if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "kNotificationWake. Turning on on body detector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "kNotificationWake. Turning on on body detector", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return (_BYTE *)sub_1011E5A64((uint64_t)v3, 1);
  }
  else if (*a3 == 2)
  {
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
    v4 = qword_10229FEF8;
    if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "kNotificationSleep. Turning off on body detector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_1021A7DC0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "kNotificationSleep. Turning off on body detector", v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return sub_1011E6308(v3, 1);
  }
  return result;
}

void sub_1011E77B4(id a1)
{
  qword_10229FEF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_1011E77E0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1011E780C(uint64_t result, char a2, int a3, int a4, char a5, double a6, double a7, double a8)
{
  *(_BYTE *)result = a2;
  *(double *)(result + 8) = a6;
  *(double *)(result + 16) = a7;
  *(double *)(result + 24) = a8;
  *(_DWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 36) = a4;
  *(_BYTE *)(result + 40) = a5;
  return result;
}

uint64_t sub_1011E7824(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 16;
  if (!*(_BYTE *)(a2 + 9))
    v2 = 24;
  if (*(double *)(result + v2) == -1.0)
  {
    v3 = sub_101945D34();
    return sub_1011E785C(v3, v4);
  }
  return result;
}

uint64_t sub_1011E785C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 1000)
  {
    a1 = sub_101945E98();
    goto LABEL_8;
  }
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 == 1000)
  {
LABEL_8:
    v5 = sub_101945FFC(a1);
    return sub_1011E7898(v5);
  }
  if (*(_BYTE *)(a2 + 9))
    return v2;
  else
    return v3;
}

uint64_t sub_1011E7898@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  sub_100263E50((uint64_t)v25);
  v4 = sub_100263F7C(&v26, (uint64_t)"HarvestRule(", 12);
  v5 = sub_100263F7C(v4, (uint64_t)"harvesterEnabled,", 17);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(unsigned __int8 *)a1);
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_100263F7C(v7, (uint64_t)"harvestInterval,", 16);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[1]);
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"uploadInterval,", 15);
  v12 = (_QWORD *)std::ostream::operator<<(v11, a1[2]);
  v13 = sub_100263F7C(v12, (uint64_t)"/", 1);
  v14 = (_QWORD *)std::ostream::operator<<(v13, a1[3]);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"uploadReachability,", 19);
  v17 = (_QWORD *)std::ostream::operator<<(v16, *((unsigned int *)a1 + 8));
  v18 = sub_100263F7C(v17, (uint64_t)"/", 1);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *((unsigned int *)a1 + 9));
  v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
  v21 = sub_100263F7C(v20, (uint64_t)"skipDataUploadIfZeroHarvestPoint,", 33);
  v22 = (_QWORD *)std::ostream::operator<<(v21, *((unsigned __int8 *)a1 + 40));
  sub_100263F7C(v22, (uint64_t)")", 1);
  std::stringbuf::str(a2, v27);
  *(_QWORD *)((char *)v25
  v26 = v23;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf(v27);
  return std::ios::~ios(&v29);
}

void sub_1011E7A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1011E7A64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_1011E7A6C(uint64_t a1, uint64_t a2)
{
  int v4;
  int *v5;
  int v7;

  sub_1001E4874(a2, "HarvesterEnabled", (BOOL *)a1);
  sub_1001FD98C(a2, "HarvestInterval", (void *)(a1 + 8));
  sub_1001FD98C(a2, "UploadInterval", (void *)(a1 + 16));
  if ((sub_1001FD98C(a2, "UnpoweredUploadInterval", (void *)(a1 + 24)) & 1) == 0)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
  v7 = 0;
  if (sub_1001E4B84(a2, "UploadReachability", &v7))
    *(_DWORD *)(a1 + 32) = v7;
  v4 = sub_1001E4B84(a2, "UnpoweredUploadReachability", &v7);
  v5 = (int *)(a1 + 32);
  if (v4)
    v5 = &v7;
  *(_DWORD *)(a1 + 36) = *v5;
  return sub_1001E4874(a2, "SkipDataUploadIfZeroHarvestPoint", (BOOL *)(a1 + 40));
}

void sub_1011E7B80(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

int64_t sub_1011E809C(id a1, id a2, id a3)
{
  return (int64_t)objc_msgSend(objc_msgSend(objc_msgSend(a2, "advertisement"), "scanDate"), "compare:", objc_msgSend(objc_msgSend(a3, "advertisement"), "scanDate"));
}

void sub_1011E8680(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A7E80);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7[0] = 68289539;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v5;
    v12 = 2050;
    v13 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"regeotagBeaconPayloads: fetch estimated location at scan time\", \"scan date\":%{private, location:escape_only}@, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v7, 0x26u);
  }
  v6 = objc_msgSend(*(id *)(a1 + 40), "createActivityRefreshBeaconPayloadIfNeededWithLocation:payload:", a2, *(_QWORD *)(a1 + 48));
  if (v6)
    objc_msgSend(*(id *)(a1 + 56), "addObject:", v6);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1011E87A8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 312), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A7E80);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(*(id *)(a1 + 48), "count");
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2049;
    v9 = v3;
    v10 = 2050;
    v11 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"regeotagBeaconPayloads:\", \"refreshed beaconPayloads count\":%{private}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v5, 0x26u);
  }

  return objc_msgSend(*(id *)(a1 + 40), "uploadBeaconPayloadsIfAllowed");
}

id sub_1011E9348(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD v5[5];

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1011E93B0;
  v5[3] = &unk_10212BB58;
  v5[4] = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_1011E93B0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A7E80);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v6 = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v3;
      v12 = 2050;
      v13 = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WARN: uploadBeaconPayloadsIfAllowed: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A7E80);
    }
    v4 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v6 = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v5;
      v12 = 2050;
      v13 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WARN: uploadBeaconPayloadsIfAllowed: saveBeaconPayloads error received", "{\"msg%{public}.0s\":\"WARN: uploadBeaconPayloadsIfAllowed: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
    }
  }
}

void sub_1011E98E8(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1011E9914(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1011E99CC(a1, "VO2MaxSummaryHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021A7EB0;
  *(_QWORD *)(a1 + 72) = off_1021A7F68;
  *(_BYTE *)(a1 + 488) = 0;
  sub_1011EBA1C(a1);
  return a1;
}

void sub_1011E99A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_1011E9E48(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E99CC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021A8388;
  *(_QWORD *)(a1 + 72) = off_1021A8430;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021A8388;
  *(_QWORD *)(a1 + 72) = off_1021A8430;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 264) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 12000;
  *(_QWORD *)(a1 + 416) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 424));
  *(_QWORD *)(a1 + 424) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1011E9D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[52] = off_102138DA8;
  sub_100427950(v27);
  sub_100CF8838(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1011E9E40()
{
  JUMPOUT(0x1011E9E20);
}

_QWORD *sub_1011E9E48(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021A8430;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021A8388;
  a1[52] = off_102138DA8;
  sub_100427950(a1 + 53);
  sub_100CF8838(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1011E9EC8(uint64_t a1)
{
  return sub_1011E9E48((_QWORD *)(a1 - 72));
}

void sub_1011E9ED0(_QWORD *a1)
{
  sub_1011E9E48(a1);
  operator delete();
}

void sub_1011E9EF4(uint64_t a1)
{
  sub_1011E9E48((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1011E9F1C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    if (!*(_BYTE *)(a1 + 488))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxSummaryHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1011EA04C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EA06C(uint64_t a1, uint64_t a2)
{
  return sub_1011E9F1C(a1 - 72, a2);
}

uint64_t sub_1011EA074(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxSummaryHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1011EA374(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EA3A4(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  const unsigned __int8 *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  int v24;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 16) = sqlite3_column_int(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v10 = sqlite3_column_text(v9, 3);
  uuid_parse((const char *)v10, (unsigned __int8 *)(a2 + 24));
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 4);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 48) = sqlite3_column_int(v12, 5);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v13, 6);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v14, 7);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v15, 8);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v16, 9);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 104) = sqlite3_column_double(v17, 10);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v18, 11);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v19, 12);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v20, 13);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v21, 14);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 176) = sqlite3_column_int(v22, 15);
  v23 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v24 = sqlite3_column_int(v23, 16);
  result = 0;
  *(_DWORD *)(a2 + 180) = v24;
  return result;
}

uint64_t sub_1011EA55C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxSummaryHistory");
  return 0xFFFFFFFFLL;
}

void sub_1011EA5FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EA620(uint64_t a1)
{
  return sub_1011EA55C(a1 - 72);
}

uint64_t sub_1011EA628(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxSummaryHistory WHERE pointCount > 0 AND startTime > ? ORDER BY startTime DESC");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxSummaryHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::querySince(const CFAbsoluteTime, std::vector<VO2MaxSummary> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_1011EAA44(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EAA70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a3[1] = *a3;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT vsh.* FROM VO2MaxSummaryHistory vsh INNER JOIN VO2MaxSessionAttributesHistory vsah ON vsh.sessionId = vsah.sessionId WHERE vsah.betaBlockerUse = ? AND vsh.pointCount > 0 AND vsh.startTime > ? ORDER BY vsh.startTime DESC");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
  v5 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
    LOWORD(v9) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxSummaryHistory, DB not accessible", &v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::querySinceAndFilterByBetaBlockerUse(const CFAbsoluteTime, BOOL, std::vector<VO2MaxSummary> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 109;
}

void sub_1011EAEA8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EAED4(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxSummaryHistory WHERE pointCount > 0 AND startTime > ? and startTime < ? ORDER BY startTime DESC");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxSummaryHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::queryInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<VO2MaxSummary> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_1011EB30C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EB338(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  char out[48];
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a3[1] = *a3;
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxSummaryHistory WHERE sessionId = ?");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
  v6 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A7FF8);
    *(_WORD *)out = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxSummaryHistory, DB not accessible", out, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::queryBySessionId(unsigned char *, std::vector<VO2MaxSummary> &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return 109;
}

void sub_1011EB770(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EB79C(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result;
  char out[40];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxSummaryHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_1011EB9D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1011EB9FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxSummaryHistory");
}

_QWORD *sub_1011EBA0C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxSummaryHistory");
}

uint64_t sub_1011EBA1C(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1011EBA78(a1);
    result = sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxSummaryHistory", (const char **)&off_1021A8018, (const std::string::value_type **)&off_1022FDE00, 0);
    *(_BYTE *)(a1 + 488) = 1;
  }
  return result;
}

BOOL sub_1011EBA78(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxSummaryHistory");
  if (result)
  {
    v3 = "meanCadence";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxSummaryHistory", (uint64_t)"meanCadence", (uint64_t)&v3);
  }
  return result;
}

void sub_1011EBE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EBF28(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxSummaryHistory");
  return result;
}

void sub_1011EBFBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EBFDC(uint64_t a1)
{
  return sub_1011EBF28(a1 - 72);
}

uint64_t sub_1011EBFE4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM VO2MaxSummaryHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1011EC0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EC0CC(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE VO2MaxSummaryHistory SET startTime = startTime + ?");
  return result;
}

void sub_1011EC164(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EC184(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxSummaryHistory (startTime, workoutType, sessionId, durationInSeconds, pointCount, hrMax, hrMin, meanHr, meanVo2, meanSpeed, meanGrade, meanHrConfidence, meanHrCadenceAgreement, meanCadence, vo2MaxModelSource, sessionType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_1011EC3C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EC3F0()
{
  return 0;
}

uint64_t sub_1011EC3F8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxSummaryHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_1011EC478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EC498(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A8470);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8470);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1011ED630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void sub_1011ED950(uint64_t a1)
{
  sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxSummaryHistorySessionIdIndex'");
}

void sub_1011EDDC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011EDE18(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_1019462C4(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1011EE270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EE2E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021A8470);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A8470);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8470);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1011EE8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1011EE900(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  double v39;
  id v40[2];
  int v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;

  v40[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v40[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v40);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v49 = 0;
  v50 = 1.79769313e308;
  v51 = 0;
  v52 = 0x7FEFFFFFFFFFFFFFLL;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v53 = 0u;
  v54 = 0u;
  v56 = 0u;
  v55 = 0u;
  v61 = 1;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v49);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8470);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A8470);
        LOWORD(v41) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v41, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v50;
    v9 = v7 - v50;
    if (v7 - v50 < 0.0)
      v9 = -(v7 - v50);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8470);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v46 = v50;
        v47 = 2050;
        v48 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A8470);
        v31 = *((_QWORD *)a2 + 1);
        v41 = 134349312;
        v42 = v50;
        v43 = 2050;
        v44 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v41, 22);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v50;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A8470);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v46 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021A8470);
          v34 = *((double *)a2 + 1);
          v41 = 134217984;
          v42 = v34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v41));
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v39 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021A8470);
        v18 = v39;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v46 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021A8470);
        v41 = 134217984;
        v42 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v41));
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v49, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  v24 = a2[4];
  v25 = a2[5];
  v26 = a2[7];
  *(_OWORD *)(a1 + 320) = a2[6];
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  v27 = a2[8];
  v28 = a2[9];
  v29 = a2[10];
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v28;
  *(_OWORD *)(a1 + 384) = v29;
  *(_OWORD *)(a1 + 352) = v27;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v40);
}

void sub_1011EF0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EF0D8(uint64_t a1)
{
  return sub_1011EE2E0(a1 - 72);
}

void sub_1011EF0E0(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_1011EF10C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101946430(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v17 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1011EF520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EF590(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10194659C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1011EF7F0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101946708(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1011EFA28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101946874(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1011EFC50(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1011EFC7C()
{
  uint64_t result;

  if (qword_102311CF8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311CF8 + 8))(qword_102311CF8);
  if (qword_102311D00)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D00 + 8))(qword_102311D00);
  if (qword_102311D08)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D08 + 8))(qword_102311D08);
  if (qword_102311D10)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D10 + 8))(qword_102311D10);
  if (qword_102311D18)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D18 + 8))(qword_102311D18);
  if (qword_102311D20)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D20 + 8))(qword_102311D20);
  if (qword_102311D28)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D28 + 8))(qword_102311D28);
  if (qword_102311D30)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D30 + 8))(qword_102311D30);
  if (qword_102311D38)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D38 + 8))(qword_102311D38);
  if (qword_102311D40)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D40 + 8))(qword_102311D40);
  if (qword_102311D48)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311D48 + 8))(qword_102311D48);
  result = qword_102311D50;
  if (qword_102311D50)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102311D50 + 8))(qword_102311D50);
  return result;
}

void sub_1011EFDB0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10230D440 & 1) == 0)
  {
    byte_10230D440 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", a4);
    operator new();
  }
}

uint64_t sub_1011F0264(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (_QWORD *)result;
  v2 = qword_102311D08;
  if (!qword_102311D08)
  {
    result = sub_1011EFDB0();
    v2 = qword_102311D08;
  }
  v1[1] = v2;
  v3 = qword_102311D10;
  if (!qword_102311D10)
  {
    result = sub_1011EFDB0();
    v3 = qword_102311D10;
  }
  v1[2] = v3;
  v4 = qword_102311D18;
  if (!qword_102311D18)
  {
    result = sub_1011EFDB0();
    v4 = qword_102311D18;
  }
  v1[3] = v4;
  v5 = qword_102311D20;
  if (!qword_102311D20)
  {
    result = sub_1011EFDB0();
    v5 = qword_102311D20;
  }
  v1[4] = v5;
  v6 = qword_102311D30;
  if (!qword_102311D30)
  {
    result = sub_1011EFDB0();
    v6 = qword_102311D30;
  }
  v1[5] = v6;
  v7 = qword_102311D38;
  if (!qword_102311D38)
  {
    result = sub_1011EFDB0();
    v7 = qword_102311D38;
  }
  v1[6] = v7;
  v8 = qword_102311D40;
  if (!qword_102311D40)
  {
    result = sub_1011EFDB0();
    v8 = qword_102311D40;
  }
  v1[7] = v8;
  v9 = qword_102311D48;
  if (!qword_102311D48)
  {
    result = sub_1011EFDB0();
    v9 = qword_102311D48;
  }
  v1[8] = v9;
  v10 = qword_102311D50;
  if (!qword_102311D50)
  {
    result = sub_1011EFDB0();
    v10 = qword_102311D50;
  }
  v1[9] = v10;
  return result;
}

double sub_1011F0358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v26, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 570);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v25, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  v6 = *(_DWORD *)(a2 + 84);
  if (!(_BYTE)v6)
    goto LABEL_12;
  if ((v6 & 1) != 0)
  {
    *(_DWORD *)(a1 + 84) |= 1u;
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      operator new();
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311CF8 + 8);
    result = sub_1011F1900(v7, v8);
    v6 = *(_DWORD *)(a2 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 4) == 0)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 84) |= 2u;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    operator new();
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311CF8 + 16);
  sub_1011F1AF4(v9, v10);
  v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_24:
  *(_DWORD *)(a1 + 84) |= 4u;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    operator new();
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311CF8 + 24);
  result = sub_1011F1C0C(v11, v12);
  v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_29:
  *(_DWORD *)(a1 + 84) |= 8u;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    operator new();
  v14 = *(_QWORD *)(a2 + 32);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311CF8 + 32);
  result = sub_1011F1D68(v13, v14);
  v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_34:
  *(_DWORD *)(a1 + 84) |= 0x10u;
  v15 = *(_QWORD *)(a1 + 40);
  if (!v15)
    operator new();
  v16 = *(_QWORD *)(a2 + 40);
  if (!v16)
    v16 = *(_QWORD *)(qword_102311CF8 + 40);
  sub_1011F2254(v15, v16);
  v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_39:
  *(_DWORD *)(a1 + 84) |= 0x20u;
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    operator new();
  v18 = *(_QWORD *)(a2 + 48);
  if (!v18)
    v18 = *(_QWORD *)(qword_102311CF8 + 48);
  sub_1011F246C(v17, v18);
  v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 0x40) != 0)
  {
LABEL_44:
    *(_DWORD *)(a1 + 84) |= 0x40u;
    v19 = *(_QWORD *)(a1 + 56);
    if (!v19)
      operator new();
    v20 = *(_QWORD *)(a2 + 56);
    if (!v20)
      v20 = *(_QWORD *)(qword_102311CF8 + 56);
    result = sub_1011F2584(v19, v20);
    v6 = *(_DWORD *)(a2 + 84);
    if ((v6 & 0x80) != 0)
      goto LABEL_49;
LABEL_12:
    if ((v6 & 0x100) == 0)
      return result;
    goto LABEL_54;
  }
LABEL_11:
  if ((v6 & 0x80) == 0)
    goto LABEL_12;
LABEL_49:
  *(_DWORD *)(a1 + 84) |= 0x80u;
  v21 = *(_QWORD *)(a1 + 64);
  if (!v21)
    operator new();
  v22 = *(_QWORD *)(a2 + 64);
  if (!v22)
    v22 = *(_QWORD *)(qword_102311CF8 + 64);
  result = sub_1011F2690(v21, v22);
  if ((*(_DWORD *)(a2 + 84) & 0x100) != 0)
  {
LABEL_54:
    *(_DWORD *)(a1 + 84) |= 0x100u;
    v23 = *(_QWORD *)(a1 + 72);
    if (!v23)
      operator new();
    v24 = *(_QWORD *)(a2 + 72);
    if (!v24)
      v24 = *(_QWORD *)(qword_102311CF8 + 72);
    return sub_1011F279C(v23, v24);
  }
  return result;
}

void sub_1011F079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1011F07B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A84A0;
  sub_10008CE08(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1011F07F8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311CF8;
  if (!qword_102311CF8)
  {
    sub_1011EFDB0(0, a2, a3, a4);
    return qword_102311CF8;
  }
  return result;
}

void sub_1011F0824()
{
  operator new();
}

uint64_t sub_1011F0870(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 84);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_1011F094C(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_1011F09A8(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 24);
      if (result)
      {
        result = sub_1011F09DC(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_1011F0A10(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
      {
        result = sub_1011F0B6C(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 48);
      if (result)
      {
        result = sub_1011F0BB8(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 56);
      if (result)
      {
        result = sub_1011F0BEC(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 64);
      if (result)
      {
        result = sub_1011F0C20(result);
        v2 = *(_DWORD *)(v1 + 84);
      }
    }
  }
  if ((v2 & 0x100) != 0)
  {
    result = *(_QWORD *)(v1 + 72);
    if (result)
      result = sub_1011F0C54(result);
  }
  *(_DWORD *)(v1 + 84) = 0;
  return result;
}

uint64_t sub_1011F094C(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 52);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 52) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 36))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        v1 = *(_DWORD *)(result + 52);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_1011F09A8(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1011F09DC(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 36))
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1011F0A10(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  if ((*(_BYTE *)(result + 140) & 1) != 0)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 36))
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_QWORD *)(v2 + 16) = 0;
        *(_QWORD *)(v2 + 24) = 0;
      }
      *(_DWORD *)(v2 + 36) = 0;
    }
  }
  if (*(int *)(result + 24) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  if (*(int *)(v1 + 48) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  if (*(int *)(v1 + 72) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 72));
  }
  *(_DWORD *)(v1 + 72) = 0;
  if (*(int *)(v1 + 96) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v9);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 96));
  }
  *(_DWORD *)(v1 + 96) = 0;
  if (*(int *)(v1 + 120) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 8 * v11);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      ++v11;
    }
    while (v11 < *(int *)(v1 + 120));
  }
  *(_DWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 140) = 0;
  return result;
}

uint64_t sub_1011F0B6C(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 32);
  if ((_BYTE)v1)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 36))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        v1 = *(_DWORD *)(result + 32);
      }
    }
    *(_DWORD *)(result + 19) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  if ((v1 & 0xFF00) != 0)
    *(_WORD *)(result + 23) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1011F0BB8(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1011F0BEC(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1011F0C20(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1011F0C54(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1011F0C88(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t result;
  unsigned int v90;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
        *(_DWORD *)(a1 + 84) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v90 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F2D24(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 18)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
        goto LABEL_41;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
LABEL_41:
        *(_DWORD *)(a1 + 84) |= 2u;
        v18 = *(_QWORD *)(a1 + 16);
        if (!v18)
          operator new();
        v90 = 0;
        v19 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        v20 = *((_DWORD *)this + 14);
        v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21)
          return 0;
        v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F33C8(v18, this, v23) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        v24 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v15)
          *((_DWORD *)this + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 26)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
LABEL_55:
        *(_DWORD *)(a1 + 84) |= 4u;
        v27 = *(_QWORD *)(a1 + 24);
        if (!v27)
          operator new();
        v90 = 0;
        v28 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v28;
          *((_QWORD *)this + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)this + 14);
        v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30)
          return 0;
        v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F3864(v27, this, v32) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        v33 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v15)
          *((_DWORD *)this + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v35 >= *((_QWORD *)this + 2) || *v35 != 34)
          continue;
        *((_QWORD *)this + 1) = v35 + 1;
LABEL_69:
        *(_DWORD *)(a1 + 84) |= 8u;
        v36 = *(_QWORD *)(a1 + 32);
        if (!v36)
          operator new();
        v90 = 0;
        v37 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v37;
          *((_QWORD *)this + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)this + 14);
        v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F4314(v36, this, v41) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        v42 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v42, 1);
        v43 = v42 - 1;
        if (v43 < 0 == v15)
          *((_DWORD *)this + 14) = v43;
        v44 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 != 42)
          continue;
        *((_QWORD *)this + 1) = v44 + 1;
LABEL_83:
        *(_DWORD *)(a1 + 84) |= 0x10u;
        v45 = *(_QWORD *)(a1 + 40);
        if (!v45)
          operator new();
        v90 = 0;
        v46 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v46;
          *((_QWORD *)this + 1) = v46 + 1;
        }
        v47 = *((_DWORD *)this + 14);
        v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48)
          return 0;
        v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F506C(v45, this, v50) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        v51 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v51, 1);
        v52 = v51 - 1;
        if (v52 < 0 == v15)
          *((_DWORD *)this + 14) = v52;
        v53 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v53 >= *((_QWORD *)this + 2) || *v53 != 50)
          continue;
        *((_QWORD *)this + 1) = v53 + 1;
LABEL_97:
        *(_DWORD *)(a1 + 84) |= 0x20u;
        v54 = *(_QWORD *)(a1 + 48);
        if (!v54)
          operator new();
        v90 = 0;
        v55 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v55 >= *((_QWORD *)this + 2) || *v55 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v55;
          *((_QWORD *)this + 1) = v55 + 1;
        }
        v56 = *((_DWORD *)this + 14);
        v57 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v56 + 1;
        if (v56 >= v57)
          return 0;
        v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F5A28(v54, this, v59) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
        v60 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v60, 1);
        v61 = v60 - 1;
        if (v61 < 0 == v15)
          *((_DWORD *)this + 14) = v61;
        v62 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v62 >= *((_QWORD *)this + 2) || *v62 != 58)
          continue;
        *((_QWORD *)this + 1) = v62 + 1;
LABEL_111:
        *(_DWORD *)(a1 + 84) |= 0x40u;
        v63 = *(_QWORD *)(a1 + 56);
        if (!v63)
          operator new();
        v90 = 0;
        v64 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v64 >= *((_QWORD *)this + 2) || *v64 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v64;
          *((_QWORD *)this + 1) = v64 + 1;
        }
        v65 = *((_DWORD *)this + 14);
        v66 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v65 + 1;
        if (v65 >= v66)
          return 0;
        v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F5EBC(v63, this, v68) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
        v69 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v69, 1);
        v70 = v69 - 1;
        if (v70 < 0 == v15)
          *((_DWORD *)this + 14) = v70;
        v71 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v71 >= *((_QWORD *)this + 2) || *v71 != 66)
          continue;
        *((_QWORD *)this + 1) = v71 + 1;
LABEL_125:
        *(_DWORD *)(a1 + 84) |= 0x80u;
        v72 = *(_QWORD *)(a1 + 64);
        if (!v72)
          operator new();
        v90 = 0;
        v73 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v73 >= *((_QWORD *)this + 2) || *v73 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v73;
          *((_QWORD *)this + 1) = v73 + 1;
        }
        v74 = *((_DWORD *)this + 14);
        v75 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v74 + 1;
        if (v74 >= v75)
          return 0;
        v76 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F62E0(v72, this, v77) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v76);
        v78 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v78, 1);
        v79 = v78 - 1;
        if (v79 < 0 == v15)
          *((_DWORD *)this + 14) = v79;
        v80 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v80 >= *((_QWORD *)this + 2) || *v80 != 74)
          continue;
        *((_QWORD *)this + 1) = v80 + 1;
LABEL_139:
        *(_DWORD *)(a1 + 84) |= 0x100u;
        v81 = *(_QWORD *)(a1 + 72);
        if (!v81)
          operator new();
        v90 = 0;
        v82 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v82 >= *((_QWORD *)this + 2) || *v82 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0;
        }
        else
        {
          v90 = *v82;
          *((_QWORD *)this + 1) = v82 + 1;
        }
        v83 = *((_DWORD *)this + 14);
        v84 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v83 + 1;
        if (v83 >= v84)
          return 0;
        v85 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1011F6704(v81, this, v86) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v85);
        v87 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v87, 1);
        v88 = v87 - 1;
        if (v88 < 0 == v15)
          *((_DWORD *)this + 14) = v88;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_55;
        goto LABEL_29;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_69;
        goto LABEL_29;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_83;
        goto LABEL_29;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_97;
        goto LABEL_29;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_111;
        goto LABEL_29;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_125;
        goto LABEL_29;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
        goto LABEL_139;
      default:
        v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1011F1704(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_DWORD *)(result + 84);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311CF8 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311CF8 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_17:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311CF8 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_20:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311CF8 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_23:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311CF8 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_26:
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311CF8 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_29:
  v13 = *(_QWORD *)(v5 + 56);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311CF8 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return result;
    goto LABEL_35;
  }
LABEL_32:
  v14 = *(_QWORD *)(v5 + 64);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311CF8 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v14, a2, a4);
  if ((*(_DWORD *)(v5 + 84) & 0x100) != 0)
  {
LABEL_35:
    v15 = *(_QWORD *)(v5 + 72);
    if (!v15)
      v15 = *(_QWORD *)(qword_102311CF8 + 72);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v15, a2, a4);
  }
  return result;
}

double sub_1011F18B4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F0358(a1, (uint64_t)lpsrc);
}

double sub_1011F1900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 1175);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311D08 + 8);
      result = sub_1011F28C0(v7, v8);
      v6 = *(_DWORD *)(a2 + 52);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_23;
      }
    }
    else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 52) |= 2u;
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311D08 + 16);
    result = sub_1011F28C0(v9, v10);
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_25;
    }
LABEL_23:
    v11 = *(_DWORD *)(a2 + 24);
    if (v11 >= 3)
      sub_101946A08();
    *(_DWORD *)(a1 + 52) |= 4u;
    *(_DWORD *)(a1 + 24) = v11;
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_25:
    v12 = *(_DWORD *)(a2 + 28);
    if (v12 >= 4)
      sub_1019469E0();
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_DWORD *)(a1 + 28) = v12;
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 0x10) == 0)
      goto LABEL_10;
LABEL_9:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(double *)(a1 + 32) = result;
    v6 = *(_DWORD *)(a2 + 52);
LABEL_10:
    if ((v6 & 0x20) != 0)
    {
      result = *(double *)(a2 + 40);
      *(_DWORD *)(a1 + 52) |= 0x20u;
      *(double *)(a1 + 40) = result;
    }
  }
  return result;
}

void sub_1011F1ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1011F1AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 1429);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102311D10 + 8);
      sub_1011F28C0(v6, v7);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 6)
        sub_101946A30();
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_1011F1BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1011F1C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 1745);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311D18 + 8);
      result = sub_1011F28C0(v7, v8);
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 2) != 0)
    {
      v9 = *(_DWORD *)(a2 + 16);
      if (v9 >= 3)
        sub_101946A80();
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v9;
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 4) != 0)
    {
      v10 = *(_DWORD *)(a2 + 20);
      if (v10 >= 4)
        sub_101946A58();
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 20) = v10;
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 8) != 0)
    {
      result = *(double *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 8u;
      *(double *)(a1 + 24) = result;
    }
  }
  return result;
}

void sub_1011F1D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1011F1D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v34, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 2318);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v33, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 28);
      v8 = *(int *)(a1 + 24);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v7 + 1);
          v7 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v8 + 1;
      sub_1011F3DAC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 24));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40), *(_DWORD *)(a2 + 48) + *(_DWORD *)(a1 + 48));
  if (*(int *)(a2 + 48) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v10);
      v12 = *(_DWORD *)(a1 + 52);
      v13 = *(int *)(a1 + 48);
      if ((int)v13 >= v12)
      {
        if (v12 == *(_DWORD *)(a1 + 56))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40), v12 + 1);
          v12 = *(_DWORD *)(a1 + 52);
        }
        *(_DWORD *)(a1 + 52) = v12 + 1;
        operator new();
      }
      v14 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 48) = v13 + 1;
      sub_1011F3DAC(*(_QWORD *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *(int *)(a2 + 48));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 64), *(_DWORD *)(a2 + 72) + *(_DWORD *)(a1 + 72));
  if (*(int *)(a2 + 72) >= 1)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v15);
      v17 = *(_DWORD *)(a1 + 76);
      v18 = *(int *)(a1 + 72);
      if ((int)v18 >= v17)
      {
        if (v17 == *(_DWORD *)(a1 + 80))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 64), v17 + 1);
          v17 = *(_DWORD *)(a1 + 76);
        }
        *(_DWORD *)(a1 + 76) = v17 + 1;
        operator new();
      }
      v19 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 72) = v18 + 1;
      sub_1011F3DAC(*(_QWORD *)(v19 + 8 * v18), v16);
      ++v15;
    }
    while (v15 < *(int *)(a2 + 72));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), *(_DWORD *)(a2 + 96) + *(_DWORD *)(a1 + 96));
  if (*(int *)(a2 + 96) >= 1)
  {
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v20);
      v22 = *(_DWORD *)(a1 + 100);
      v23 = *(int *)(a1 + 96);
      if ((int)v23 >= v22)
      {
        if (v22 == *(_DWORD *)(a1 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), v22 + 1);
          v22 = *(_DWORD *)(a1 + 100);
        }
        *(_DWORD *)(a1 + 100) = v22 + 1;
        operator new();
      }
      v24 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 96) = v23 + 1;
      sub_1011F3DAC(*(_QWORD *)(v24 + 8 * v23), v21);
      ++v20;
    }
    while (v20 < *(int *)(a2 + 96));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), *(_DWORD *)(a2 + 120) + *(_DWORD *)(a1 + 120));
  if (*(int *)(a2 + 120) >= 1)
  {
    v26 = 0;
    do
    {
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v26);
      v28 = *(_DWORD *)(a1 + 124);
      v29 = *(int *)(a1 + 120);
      if ((int)v29 >= v28)
      {
        if (v28 == *(_DWORD *)(a1 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), v28 + 1);
          v28 = *(_DWORD *)(a1 + 124);
        }
        *(_DWORD *)(a1 + 124) = v28 + 1;
        operator new();
      }
      v30 = *(_QWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 120) = v29 + 1;
      *(float *)&result = sub_1011F3DAC(*(_QWORD *)(v30 + 8 * v29), v27);
      ++v26;
    }
    while (v26 < *(int *)(a2 + 120));
  }
  if ((*(_BYTE *)(a2 + 140) & 1) != 0)
  {
    *(_DWORD *)(a1 + 140) |= 1u;
    v31 = *(_QWORD *)(a1 + 8);
    if (!v31)
      operator new();
    v32 = *(_QWORD *)(a2 + 8);
    if (!v32)
      v32 = *(_QWORD *)(qword_102311D20 + 8);
    return sub_1011F28C0(v31, v32);
  }
  return result;
}

void sub_1011F223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1011F2254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  _BYTE v18[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v18, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 2768);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  v5 = *(_DWORD *)(a2 + 32);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 32) |= 1u;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 8);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311D30 + 8);
    sub_1011F28C0(v9, v10);
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v11 = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 32) |= 2u;
  *(_BYTE *)(a1 + 16) = v11;
  v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 32) |= 4u;
  *(_BYTE *)(a1 + 17) = v12;
  v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *(_BYTE *)(a2 + 18);
  *(_DWORD *)(a1 + 32) |= 8u;
  *(_BYTE *)(a1 + 18) = v13;
  v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_28:
    v15 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 0x20u;
    *(_BYTE *)(a1 + 20) = v15;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_27:
  v14 = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 32) |= 0x10u;
  *(_BYTE *)(a1 + 19) = v14;
  v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 0x20) != 0)
    goto LABEL_28;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_29:
  v16 = *(_BYTE *)(a2 + 21);
  *(_DWORD *)(a1 + 32) |= 0x40u;
  *(_BYTE *)(a1 + 21) = v16;
  v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_BYTE *)(a2 + 22);
    *(_DWORD *)(a1 + 32) |= 0x80u;
    *(_BYTE *)(a1 + 22) = v6;
    v5 = *(_DWORD *)(a2 + 32);
  }
LABEL_13:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v7 = *(_BYTE *)(a2 + 23);
      *(_DWORD *)(a1 + 32) |= 0x100u;
      *(_BYTE *)(a1 + 23) = v7;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 0x200) != 0)
    {
      v8 = *(_BYTE *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 0x200u;
      *(_BYTE *)(a1 + 24) = v8;
    }
  }
}

void sub_1011F2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1011F246C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 3084);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102311D38 + 8);
      sub_1011F28C0(v6, v7);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 0x1C)
        sub_101946AA8();
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_1011F256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1011F2584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 3292);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311D40 + 8);
      result = sub_1011F28C0(v7, v8);
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_1011F2678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1011F2690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 3500);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311D48 + 8);
      result = sub_1011F28C0(v7, v8);
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_1011F2784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1011F279C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 3708);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311D50 + 8);
      result = sub_1011F28C0(v7, v8);
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_1011F2890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F28A8()
{
  return 1;
}

_QWORD *sub_1011F28B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.LogEntry");
}

double sub_1011F28C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 827);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_1011F2990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1011F29A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A8518;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1011F29B8()
{
  operator new();
}

uint64_t sub_1011F29F8(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1011F2A10(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1011F2BD4(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

double sub_1011F2C4C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F28C0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F2C98()
{
  return 1;
}

_QWORD *sub_1011F2CA0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.Timestamp");
}

void sub_1011F2CB0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A8590;
  sub_10008CF54(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1011F2CE0()
{
  operator new();
}

uint64_t sub_1011F2D24(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t result;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_23;
        *(_DWORD *)(a1 + 52) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v37[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37))return 0;
        }
        else
        {
          v37[0] = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37[0]);
        if (!sub_1011F2A10(v8, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 18)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
        goto LABEL_35;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_23;
LABEL_35:
        *(_DWORD *)(a1 + 52) |= 2u;
        v22 = *(_QWORD *)(a1 + 16);
        if (!v22)
          operator new();
        v37[0] = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37))return 0;
        }
        else
        {
          v37[0] = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37[0]);
        if (!sub_1011F2A10(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v30 >= v10 || *v30 != 24)
          continue;
        v11 = v30 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_49:
        v37[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37);
          if (!(_DWORD)result)
            return result;
          v31 = v37[0];
        }
        else
        {
          v31 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v31 <= 2)
        {
          *(_DWORD *)(a1 + 52) |= 4u;
          *(_DWORD *)(a1 + 24) = v31;
        }
        v33 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v33 >= v12 || *v33 != 32)
          continue;
        v13 = v33 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_59:
        v37[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37);
          if (!(_DWORD)result)
            return result;
          v34 = v37[0];
        }
        else
        {
          v34 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v34 <= 3)
        {
          *(_DWORD *)(a1 + 52) |= 8u;
          *(_DWORD *)(a1 + 28) = v34;
        }
        v35 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v35 >= *((_QWORD *)this + 2) || *v35 != 41)
          continue;
        *((_QWORD *)this + 1) = v35 + 1;
LABEL_69:
        *(_QWORD *)v37 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v37) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v37;
        *(_DWORD *)(a1 + 52) |= 0x10u;
        v36 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v36 >= *((_QWORD *)this + 2) || *v36 != 49)
          continue;
        *((_QWORD *)this + 1) = v36 + 1;
LABEL_73:
        *(_QWORD *)v37 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v37) & 1) != 0)
        {
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v37;
          *(_DWORD *)(a1 + 52) |= 0x20u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_49;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_59;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_69;
        goto LABEL_23;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_23;
        goto LABEL_73;
      default:
        v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1011F31C4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311D08 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311D08 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 52) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
  return result;
}

double sub_1011F32B0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F1900(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F32FC()
{
  return 1;
}

_QWORD *sub_1011F3304@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.CLIndoorOutdoorUpdate");
}

void sub_1011F3314(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A8608;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D10 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F3368(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F3314(a1);
  operator delete();
}

void sub_1011F338C()
{
  operator new();
}

uint64_t sub_1011F33C8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v9 = (char *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_29;
        }
      }
      else
      {
        v7 = TagFallback & 7;
      }
LABEL_17:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *(_DWORD *)(a1 + 24) |= 1u;
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
      operator new();
    v23 = 0;
    v11 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))
        return 0;
    }
    else
    {
      v23 = *v11;
      *((_QWORD *)this + 1) = v11 + 1;
    }
    v12 = *((_DWORD *)this + 14);
    v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13)
      return 0;
    v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    if (!sub_1011F2A10(v10, this, v15) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    v16 = *((_DWORD *)this + 14);
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v18 < 0 == v17)
      *((_DWORD *)this + 14) = v18;
    v19 = (_BYTE *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      v9 = v19 + 1;
      *((_QWORD *)this + 1) = v9;
LABEL_29:
      v22 = 0;
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!(_DWORD)result)
          return result;
        v20 = v22;
      }
      else
      {
        v20 = *v9;
        *((_QWORD *)this + 1) = v9 + 1;
      }
      if (v20 <= 5)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1011F361C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311D10 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  return result;
}

uint64_t sub_1011F3688(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102311D10 + 8);
  v5 = *(unsigned __int8 *)(v4 + 36);
  if (*(_BYTE *)(v4 + 36))
  {
    v6 = (v5 << 31 >> 31) & 9;
    if ((v5 & 2) != 0)
      v6 += 9;
    if ((v5 & 4) != 0)
      v5 = v6 + 9;
    else
      v5 = v6;
  }
  *(_DWORD *)(v4 + 32) = v5;
  v3 = (v5 + 2);
  if ((*(_DWORD *)(a1 + 24) & 2) != 0)
  {
LABEL_15:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    }
    else
    {
      v8 = 2;
    }
    v3 = (v8 + v3);
  }
LABEL_21:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1011F3748(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1011F1AF4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F3794()
{
  return 1;
}

_QWORD *sub_1011F379C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.SignalEnvironment");
}

void sub_1011F37AC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A8680;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D18 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F3800(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F37AC(a1);
  operator delete();
}

void sub_1011F3824()
{
  operator new();
}

uint64_t sub_1011F3864(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t result;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        *(_DWORD *)(a1 + 36) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v27[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27))return 0;
        }
        else
        {
          v27[0] = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27[0]);
        if (!sub_1011F2A10(v8, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v21 >= v10 || *v21 != 16)
          continue;
        v11 = v21 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_31;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_31:
        v27[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27);
          if (!(_DWORD)result)
            return result;
          v22 = v27[0];
        }
        else
        {
          v22 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v22 <= 2)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v22;
        }
        v24 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 >= v12 || *v24 != 24)
          continue;
        v13 = v24 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_41:
        v27[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27);
          if (!(_DWORD)result)
            return result;
          v25 = v27[0];
        }
        else
        {
          v25 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v25 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 4u;
          *(_DWORD *)(a1 + 20) = v25;
        }
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 33)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
LABEL_51:
        *(_QWORD *)v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) != 0)
        {
          *(_QWORD *)(a1 + 24) = *(_QWORD *)v27;
          *(_DWORD *)(a1 + 36) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_41;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_19;
        goto LABEL_51;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1011F3BA4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311D18 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 24), a3);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 24), a3);
  return result;
}

uint64_t sub_1011F3C48(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311D18 + 8);
    v7 = *(unsigned __int8 *)(v6 + 36);
    if (*(_BYTE *)(v6 + 36))
    {
      v8 = (v7 << 31 >> 31) & 9;
      if ((v7 & 2) != 0)
        v8 += 9;
      if ((v7 & 4) != 0)
        v7 = v8 + 9;
      else
        v7 = v8;
    }
    *(_DWORD *)(v6 + 32) = v7;
    v4 = v7 + 2;
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
LABEL_15:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v10 = 2;
    }
    v4 += v10;
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 11;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v12 = 2;
    }
    v4 += v12;
  }
  if ((v3 & 8) != 0)
    result = v4 + 9;
  else
    result = v4;
LABEL_31:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

double sub_1011F3D48(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F1C0C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F3D94()
{
  return 1;
}

_QWORD *sub_1011F3D9C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.GnssAvailabilityPredictorData");
}

float sub_1011F3DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", 1980);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(float *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 24);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(float *)(a1 + 12) = result;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return result;
LABEL_7:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

void sub_1011F3E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1011F3E94(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A86F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1011F3EA4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A86F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1011F3ED4()
{
  operator new();
}

uint64_t sub_1011F3F10(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1011F3F28(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_27;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v14) & 1) == 0)
          return 0;
        a1[2] = v14;
        a1[6] |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 21)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v13 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0)
            return 0;
          a1[3] = v13;
          a1[6] |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 29)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 5)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0)
      return 0;
    a1[4] = v12;
    a1[6] |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1011F40EC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 24);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v4 + 16), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v4 + 12), a3);
  if ((*(_DWORD *)(v4 + 24) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v4 + 16), a3);
  return result;
}

uint64_t sub_1011F4164(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0)
      v2 += 5;
    if ((v1 & 4) != 0)
      v1 = v2 + 5;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

float sub_1011F419C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F3DAC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F41E8()
{
  return 1;
}

_QWORD *sub_1011F41F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.GnssLeechLocationData.SatelliteInfo");
}

void sub_1011F4200(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)off_1021A8770;
  if ((uint64_t *)qword_102311D20 != a1)
  {
    v2 = a1[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_10010C59C(a1 + 14);
  sub_10010C59C(a1 + 11);
  sub_10010C59C(a1 + 8);
  sub_10010C59C(a1 + 5);
  sub_10010C59C(a1 + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1011F4290(uint64_t *a1)
{
  sub_1011F4200(a1);
  operator delete();
}

void sub_1011F42B4()
{
  operator new();
}

uint64_t sub_1011F4314(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  char *v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  _BYTE *v81;
  uint64_t result;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v83;
  unsigned int v84;

  v83 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 64);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88);
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_24;
        *(_DWORD *)(a1 + 140) |= 1u;
        v12 = *(_QWORD *)(a1 + 8);
        if (!v12)
          operator new();
        v84 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0;
        }
        else
        {
          v84 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
        if (!sub_1011F2A10(v12, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 18)
          continue;
        goto LABEL_35;
      case 2u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_24;
        break;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_54;
        goto LABEL_24;
      case 4u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_72;
        goto LABEL_24;
      case 5u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_90;
        goto LABEL_24;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_24;
        goto LABEL_108;
      default:
        v11 = TagFallback & 7;
LABEL_24:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
    break;
  }
  while (1)
  {
    v22 = *(_DWORD *)(a1 + 28);
    v23 = *(int *)(a1 + 24);
    if ((int)v23 >= v22)
    {
      if (v22 == *(_DWORD *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v83, v22 + 1);
        v22 = *(_DWORD *)(a1 + 28);
      }
      *(_DWORD *)(a1 + 28) = v22 + 1;
      operator new();
    }
    v24 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v23 + 1;
    v25 = *(_DWORD **)(v24 + 8 * v23);
    v84 = 0;
    v26 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))
        return 0;
    }
    else
    {
      v84 = *v26;
      *((_QWORD *)this + 1) = v26 + 1;
    }
    v27 = *((_DWORD *)this + 14);
    v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28)
      return 0;
    v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
    if (!sub_1011F3F28(v25, this, v30) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    v31 = *((_DWORD *)this + 14);
    v19 = __OFSUB__(v31, 1);
    v32 = v31 - 1;
    if (v32 < 0 == v19)
      *((_DWORD *)this + 14) = v32;
    v21 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v21 >= *((_QWORD *)this + 2))
      goto LABEL_2;
    v33 = *v21;
    if (v33 != 18)
    {
      if (v33 != 26)
        goto LABEL_2;
      while (1)
      {
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_54:
        v34 = *(_DWORD *)(a1 + 52);
        v35 = *(int *)(a1 + 48);
        if ((int)v35 >= v34)
        {
          if (v34 == *(_DWORD *)(a1 + 56))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v34 + 1);
            v34 = *(_DWORD *)(a1 + 52);
          }
          *(_DWORD *)(a1 + 52) = v34 + 1;
          operator new();
        }
        v36 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 48) = v35 + 1;
        v37 = *(_DWORD **)(v36 + 8 * v35);
        v84 = 0;
        v38 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v38 >= *((_QWORD *)this + 2) || *v38 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0;
        }
        else
        {
          v84 = *v38;
          *((_QWORD *)this + 1) = v38 + 1;
        }
        v39 = *((_DWORD *)this + 14);
        v40 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v39 + 1;
        if (v39 >= v40)
          return 0;
        v41 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
        if (!sub_1011F3F28(v37, this, v42) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v41);
        v43 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v43, 1);
        v44 = v43 - 1;
        if (v44 < 0 == v19)
          *((_DWORD *)this + 14) = v44;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2))
          goto LABEL_2;
        v45 = *v21;
        if (v45 != 26)
        {
          if (v45 != 34)
            goto LABEL_2;
          while (1)
          {
            *((_QWORD *)this + 1) = v21 + 1;
LABEL_72:
            v46 = *(_DWORD *)(a1 + 76);
            v47 = *(int *)(a1 + 72);
            if ((int)v47 >= v46)
            {
              if (v46 == *(_DWORD *)(a1 + 80))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v46 + 1);
                v46 = *(_DWORD *)(a1 + 76);
              }
              *(_DWORD *)(a1 + 76) = v46 + 1;
              operator new();
            }
            v48 = *(_QWORD *)(a1 + 64);
            *(_DWORD *)(a1 + 72) = v47 + 1;
            v49 = *(_DWORD **)(v48 + 8 * v47);
            v84 = 0;
            v50 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0;
            }
            else
            {
              v84 = *v50;
              *((_QWORD *)this + 1) = v50 + 1;
            }
            v51 = *((_DWORD *)this + 14);
            v52 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v51 + 1;
            if (v51 >= v52)
              return 0;
            v53 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
            if (!sub_1011F3F28(v49, this, v54) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v53);
            v55 = *((_DWORD *)this + 14);
            v19 = __OFSUB__(v55, 1);
            v56 = v55 - 1;
            if (v56 < 0 == v19)
              *((_DWORD *)this + 14) = v56;
            v21 = (_BYTE *)*((_QWORD *)this + 1);
            if ((unint64_t)v21 >= *((_QWORD *)this + 2))
              goto LABEL_2;
            v57 = *v21;
            if (v57 != 34)
            {
              if (v57 != 42)
                goto LABEL_2;
              while (1)
              {
                *((_QWORD *)this + 1) = v21 + 1;
LABEL_90:
                v58 = *(_DWORD *)(a1 + 100);
                v59 = *(int *)(a1 + 96);
                if ((int)v59 >= v58)
                {
                  if (v58 == *(_DWORD *)(a1 + 104))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v58 + 1);
                    v58 = *(_DWORD *)(a1 + 100);
                  }
                  *(_DWORD *)(a1 + 100) = v58 + 1;
                  operator new();
                }
                v60 = *(_QWORD *)(a1 + 88);
                *(_DWORD *)(a1 + 96) = v59 + 1;
                v61 = *(_DWORD **)(v60 + 8 * v59);
                v84 = 0;
                v62 = (char *)*((_QWORD *)this + 1);
                if ((unint64_t)v62 >= *((_QWORD *)this + 2) || *v62 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0;
                }
                else
                {
                  v84 = *v62;
                  *((_QWORD *)this + 1) = v62 + 1;
                }
                v63 = *((_DWORD *)this + 14);
                v64 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v63 + 1;
                if (v63 >= v64)
                  return 0;
                v65 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
                if (!sub_1011F3F28(v61, this, v66) || !*((_BYTE *)this + 36))
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v65);
                v67 = *((_DWORD *)this + 14);
                v19 = __OFSUB__(v67, 1);
                v68 = v67 - 1;
                if (v68 < 0 == v19)
                  *((_DWORD *)this + 14) = v68;
                v21 = (_BYTE *)*((_QWORD *)this + 1);
                if ((unint64_t)v21 >= *((_QWORD *)this + 2))
                  goto LABEL_2;
                v69 = *v21;
                if (v69 != 42)
                {
                  if (v69 != 50)
                    goto LABEL_2;
                  while (1)
                  {
                    *((_QWORD *)this + 1) = v21 + 1;
LABEL_108:
                    v70 = *(_DWORD *)(a1 + 124);
                    v71 = *(int *)(a1 + 120);
                    if ((int)v71 >= v70)
                    {
                      if (v70 == *(_DWORD *)(a1 + 128))
                      {
                        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v70 + 1);
                        v70 = *(_DWORD *)(a1 + 124);
                      }
                      *(_DWORD *)(a1 + 124) = v70 + 1;
                      operator new();
                    }
                    v72 = *(_QWORD *)(a1 + 112);
                    *(_DWORD *)(a1 + 120) = v71 + 1;
                    v73 = *(_DWORD **)(v72 + 8 * v71);
                    v84 = 0;
                    v74 = (char *)*((_QWORD *)this + 1);
                    if ((unint64_t)v74 >= *((_QWORD *)this + 2) || *v74 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0;
                    }
                    else
                    {
                      v84 = *v74;
                      *((_QWORD *)this + 1) = v74 + 1;
                    }
                    v75 = *((_DWORD *)this + 14);
                    v76 = *((_DWORD *)this + 15);
                    *((_DWORD *)this + 14) = v75 + 1;
                    if (v75 >= v76)
                      return 0;
                    v77 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
                    if (!sub_1011F3F28(v73, this, v78) || !*((_BYTE *)this + 36))
                      return 0;
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v77);
                    v79 = *((_DWORD *)this + 14);
                    v19 = __OFSUB__(v79, 1);
                    v80 = v79 - 1;
                    if (v80 < 0 == v19)
                      *((_DWORD *)this + 14) = v80;
                    v21 = (_BYTE *)*((_QWORD *)this + 1);
                    v81 = (_BYTE *)*((_QWORD *)this + 2);
                    if (v21 >= v81 || *v21 != 50)
                    {
                      if (v21 == v81 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        result = 1;
                        *((_BYTE *)this + 36) = 1;
                        return result;
                      }
                      goto LABEL_2;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_35:
    *((_QWORD *)this + 1) = v21 + 1;
  }
}

uint64_t sub_1011F4BC8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if ((*(_BYTE *)(result + 140) & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311D20 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  if (*(int *)(v5 + 48) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 48));
  }
  if (*(int *)(v5 + 72) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 72));
  }
  if (*(int *)(v5 + 96) >= 1)
  {
    v10 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 96));
  }
  if (*(int *)(v5 + 120) >= 1)
  {
    v11 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*(_QWORD *)(v5 + 112) + 8 * v11++), a2, a4);
    while (v11 < *(int *)(v5 + 120));
  }
  return result;
}

uint64_t sub_1011F4D1C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  if ((*(_BYTE *)(a1 + 140) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (!v2)
      v2 = *(_QWORD *)(qword_102311D20 + 8);
    v3 = *(unsigned __int8 *)(v2 + 36);
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if (*(_BYTE *)(v2 + 36))
      v5 = v4;
    else
      v5 = 0;
    *(_DWORD *)(v2 + 32) = v5;
    v1 = v5 + 2;
  }
  else
  {
    v1 = 0;
  }
  v6 = *(unsigned int *)(a1 + 24);
  v7 = v6 + v1;
  if ((int)v6 >= 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    do
    {
      v9 = *(unsigned __int8 *)(*(_QWORD *)v8 + 24);
      if (*(_BYTE *)(*(_QWORD *)v8 + 24))
      {
        v10 = (v9 << 31 >> 31) & 5;
        if ((v9 & 2) != 0)
          v10 += 5;
        if ((v9 & 4) != 0)
          v9 = v10 + 5;
        else
          v9 = v10;
      }
      *(_DWORD *)(*(_QWORD *)v8 + 20) = v9;
      v7 += v9 + 1;
      v8 += 8;
      --v6;
    }
    while (v6);
  }
  v11 = *(unsigned int *)(a1 + 48);
  v12 = v11 + v7;
  if ((int)v11 >= 1)
  {
    v13 = *(_QWORD *)(a1 + 40);
    do
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)v13 + 24);
      if (*(_BYTE *)(*(_QWORD *)v13 + 24))
      {
        v15 = (v14 << 31 >> 31) & 5;
        if ((v14 & 2) != 0)
          v15 += 5;
        if ((v14 & 4) != 0)
          v14 = v15 + 5;
        else
          v14 = v15;
      }
      *(_DWORD *)(*(_QWORD *)v13 + 20) = v14;
      v12 += v14 + 1;
      v13 += 8;
      --v11;
    }
    while (v11);
  }
  v16 = *(unsigned int *)(a1 + 72);
  v17 = v16 + v12;
  if ((int)v16 >= 1)
  {
    v18 = *(_QWORD *)(a1 + 64);
    do
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)v18 + 24);
      if (*(_BYTE *)(*(_QWORD *)v18 + 24))
      {
        v20 = (v19 << 31 >> 31) & 5;
        if ((v19 & 2) != 0)
          v20 += 5;
        if ((v19 & 4) != 0)
          v19 = v20 + 5;
        else
          v19 = v20;
      }
      *(_DWORD *)(*(_QWORD *)v18 + 20) = v19;
      v17 += v19 + 1;
      v18 += 8;
      --v16;
    }
    while (v16);
  }
  v21 = *(unsigned int *)(a1 + 96);
  v22 = v21 + v17;
  if ((int)v21 >= 1)
  {
    v23 = *(_QWORD *)(a1 + 88);
    do
    {
      v24 = *(unsigned __int8 *)(*(_QWORD *)v23 + 24);
      if (*(_BYTE *)(*(_QWORD *)v23 + 24))
      {
        v25 = (v24 << 31 >> 31) & 5;
        if ((v24 & 2) != 0)
          v25 += 5;
        if ((v24 & 4) != 0)
          v24 = v25 + 5;
        else
          v24 = v25;
      }
      *(_DWORD *)(*(_QWORD *)v23 + 20) = v24;
      v22 += v24 + 1;
      v23 += 8;
      --v21;
    }
    while (v21);
  }
  v26 = *(unsigned int *)(a1 + 120);
  v27 = (v26 + v22);
  if ((int)v26 >= 1)
  {
    v28 = *(_QWORD *)(a1 + 112);
    do
    {
      v29 = *(unsigned __int8 *)(*(_QWORD *)v28 + 24);
      if (*(_BYTE *)(*(_QWORD *)v28 + 24))
      {
        v30 = (v29 << 31 >> 31) & 5;
        if ((v29 & 2) != 0)
          v30 += 5;
        if ((v29 & 4) != 0)
          v29 = v30 + 5;
        else
          v29 = v30;
      }
      *(_DWORD *)(*(_QWORD *)v28 + 20) = v29;
      v27 = (v27 + v29 + 1);
      v28 += 8;
      --v26;
    }
    while (v26);
  }
  *(_DWORD *)(a1 + 136) = v27;
  return v27;
}

double sub_1011F4F50(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F1D68(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F4F9C()
{
  return 1;
}

_QWORD *sub_1011F4FA4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.GnssLeechLocationData");
}

void sub_1011F4FB4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A87E8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D30 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F5008(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F4FB4(a1);
  operator delete();
}

void sub_1011F502C()
{
  operator new();
}

uint64_t sub_1011F506C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t result;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_31;
        *(_DWORD *)(a1 + 32) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v47 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47))return 0;
        }
        else
        {
          v47 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v20 = *((_DWORD *)this + 14);
        v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21)
          return 0;
        v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v47);
        if (!sub_1011F2A10(v8, this, v23) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        v24 = *((_DWORD *)this + 14);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v26 < 0 == v25)
          *((_DWORD *)this + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v27 >= v10 || *v27 != 16)
          continue;
        v11 = v27 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_44;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_44:
        v47 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v28 = v47;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v28 = *v11;
          v29 = v11 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_BYTE *)(a1 + 16) = v28 != 0;
        *(_DWORD *)(a1 + 32) |= 2u;
        if ((unint64_t)v29 >= v10 || *v29 != 24)
          continue;
        v12 = v29 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_52:
        v47 = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v31 = v47;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v31 = *v12;
          v32 = v12 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_BYTE *)(a1 + 17) = v31 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if ((unint64_t)v32 >= v10 || *v32 != 32)
          continue;
        v13 = v32 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_60:
        v47 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v33 = v47;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v33 = *v13;
          v34 = v13 + 1;
          *((_QWORD *)this + 1) = v34;
        }
        *(_BYTE *)(a1 + 18) = v33 != 0;
        *(_DWORD *)(a1 + 32) |= 8u;
        if ((unint64_t)v34 >= v10 || *v34 != 40)
          continue;
        v14 = v34 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_68:
        v47 = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v35 = v47;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v35 = *v14;
          v36 = v14 + 1;
          *((_QWORD *)this + 1) = v36;
        }
        *(_BYTE *)(a1 + 19) = v35 != 0;
        *(_DWORD *)(a1 + 32) |= 0x10u;
        if ((unint64_t)v36 >= v10 || *v36 != 48)
          continue;
        v15 = v36 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_76:
        v47 = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v37 = v47;
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v37 = *v15;
          v38 = v15 + 1;
          *((_QWORD *)this + 1) = v38;
        }
        *(_BYTE *)(a1 + 20) = v37 != 0;
        *(_DWORD *)(a1 + 32) |= 0x20u;
        if ((unint64_t)v38 >= v10 || *v38 != 56)
          continue;
        v16 = v38 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_84:
        v47 = 0;
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v39 = v47;
          v40 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v39 = *v16;
          v40 = v16 + 1;
          *((_QWORD *)this + 1) = v40;
        }
        *(_BYTE *)(a1 + 21) = v39 != 0;
        *(_DWORD *)(a1 + 32) |= 0x40u;
        if ((unint64_t)v40 >= v10 || *v40 != 64)
          continue;
        v17 = v40 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_92:
        v47 = 0;
        if ((unint64_t)v17 >= v10 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v41 = v47;
          v42 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v41 = *v17;
          v42 = v17 + 1;
          *((_QWORD *)this + 1) = v42;
        }
        *(_BYTE *)(a1 + 22) = v41 != 0;
        *(_DWORD *)(a1 + 32) |= 0x80u;
        if ((unint64_t)v42 >= v10 || *v42 != 72)
          continue;
        v18 = v42 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_100:
        v47 = 0;
        if ((unint64_t)v18 >= v10 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v43 = v47;
          v44 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v43 = *v18;
          v44 = v18 + 1;
          *((_QWORD *)this + 1) = v44;
        }
        *(_BYTE *)(a1 + 23) = v43 != 0;
        *(_DWORD *)(a1 + 32) |= 0x100u;
        if ((unint64_t)v44 >= v10 || *v44 != 80)
          continue;
        v19 = v44 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_108:
        v47 = 0;
        if ((unint64_t)v19 >= v10 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!(_DWORD)result)
            return result;
          v45 = v47;
          v46 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v45 = *v19;
          v46 = (unsigned __int8 *)(v19 + 1);
          *((_QWORD *)this + 1) = v46;
        }
        *(_BYTE *)(a1 + 24) = v45 != 0;
        *(_DWORD *)(a1 + 32) |= 0x200u;
        if (v46 != (unsigned __int8 *)v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_52;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_60;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v14 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_68;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v15 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_76;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v16 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_84;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v17 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_92;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v18 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_100;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v19 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_108;
      default:
        v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1011F56D8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311D30 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 16), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 17), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 18), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 19), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 21), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 22), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 24), (BOOL)a2, a4);
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 23), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 0x200) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 24), (BOOL)a2, a4);
  return result;
}

uint64_t sub_1011F5824(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 32);
  if ((_BYTE)v1)
  {
    if ((v1 & 1) != 0)
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (!v3)
        v3 = *(_QWORD *)(qword_102311D30 + 8);
      v4 = *(unsigned __int8 *)(v3 + 36);
      if (*(_BYTE *)(v3 + 36))
      {
        v5 = (v4 << 31 >> 31) & 9;
        if ((v4 & 2) != 0)
          v5 += 9;
        if ((v4 & 4) != 0)
          v4 = v5 + 9;
        else
          v4 = v5;
      }
      *(_DWORD *)(v3 + 32) = v4;
      v2 = v4 + 2;
      v1 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v2 += 2;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v2 += 2;
    if ((v1 & 0x10) != 0)
      v2 += 2;
    if ((v1 & 0x20) != 0)
      v2 += 2;
    if ((v1 & 0x40) != 0)
      v2 += 2;
    if ((v1 & 0x80) != 0)
      v2 += 2;
  }
  else
  {
    v2 = 0;
  }
  v6 = v2 + 2;
  if ((v1 & 0x100) == 0)
    v6 = v2;
  if ((v1 & 0x200) != 0)
    v6 += 2;
  if ((v1 & 0xFF00) != 0)
    v7 = v6;
  else
    v7 = v2;
  *(_DWORD *)(a1 + 28) = v7;
  return v7;
}

void sub_1011F5910(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1011F2254(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F595C()
{
  return 1;
}

_QWORD *sub_1011F5964@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.MapsRouteHintData");
}

void sub_1011F5974(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A8860;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D38 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F59C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F5974(a1);
  operator delete();
}

void sub_1011F59EC()
{
  operator new();
}

uint64_t sub_1011F5A28(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v9 = (char *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_29;
        }
      }
      else
      {
        v7 = TagFallback & 7;
      }
LABEL_17:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *(_DWORD *)(a1 + 24) |= 1u;
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
      operator new();
    v23 = 0;
    v11 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))
        return 0;
    }
    else
    {
      v23 = *v11;
      *((_QWORD *)this + 1) = v11 + 1;
    }
    v12 = *((_DWORD *)this + 14);
    v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13)
      return 0;
    v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    if (!sub_1011F2A10(v10, this, v15) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    v16 = *((_DWORD *)this + 14);
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v18 < 0 == v17)
      *((_DWORD *)this + 14) = v18;
    v19 = (_BYTE *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      v9 = v19 + 1;
      *((_QWORD *)this + 1) = v9;
LABEL_29:
      v22 = 0;
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!(_DWORD)result)
          return result;
        v20 = v22;
      }
      else
      {
        v20 = *v9;
        *((_QWORD *)this + 1) = v9 + 1;
      }
      if (v20 <= 0x1B)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1011F5C7C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311D38 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  return result;
}

uint64_t sub_1011F5CE8(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102311D38 + 8);
  v5 = *(unsigned __int8 *)(v4 + 36);
  if (*(_BYTE *)(v4 + 36))
  {
    v6 = (v5 << 31 >> 31) & 9;
    if ((v5 & 2) != 0)
      v6 += 9;
    if ((v5 & 4) != 0)
      v5 = v6 + 9;
    else
      v5 = v6;
  }
  *(_DWORD *)(v4 + 32) = v5;
  v3 = (v5 + 2);
  if ((*(_DWORD *)(a1 + 24) & 2) != 0)
  {
LABEL_15:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    }
    else
    {
      v8 = 2;
    }
    v3 = (v8 + v3);
  }
LABEL_21:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1011F5DA8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1011F246C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F5DF4()
{
  return 1;
}

_QWORD *sub_1011F5DFC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.MotionActivityType");
}

void sub_1011F5E0C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A88D8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D40 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F5E60(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F5E0C(a1);
  operator delete();
}

void sub_1011F5E84()
{
  operator new();
}

uint64_t sub_1011F5EBC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t result;
  unint64_t v19;
  unsigned int v20;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_17;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *(_DWORD *)(a1 + 28) |= 1u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v20 = 0;
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20))
        return 0;
    }
    else
    {
      v20 = *v9;
      *((_QWORD *)this + 1) = v9 + 1;
    }
    v10 = *((_DWORD *)this + 14);
    v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11)
      return 0;
    v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_1011F2A10(v8, this, v13) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    v14 = *((_DWORD *)this + 14);
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v16 < 0 == v15)
      *((_DWORD *)this + 14) = v16;
    v17 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 17)
    {
      *((_QWORD *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1011F60E8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311D40 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  return result;
}

uint64_t sub_1011F6154(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    if ((v1 & 1) != 0)
    {
      v1 = *(_QWORD *)(a1 + 8);
      if (!v1)
        v1 = *(_QWORD *)(qword_102311D40 + 8);
      v3 = *(unsigned __int8 *)(v1 + 36);
      if (*(_BYTE *)(v1 + 36))
      {
        v4 = (v3 << 31 >> 31) & 9;
        if ((v3 & 2) != 0)
          v4 += 9;
        if ((v3 & 4) != 0)
          v3 = v4 + 9;
        else
          v3 = v4;
      }
      *(_DWORD *)(v1 + 32) = v3;
      v2 = v3 + 2;
      LODWORD(v1) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1011F61CC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F2584(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F6218()
{
  return 1;
}

_QWORD *sub_1011F6220@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.CMGpsModelOutput");
}

void sub_1011F6230(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A8950;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D48 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F6284(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F6230(a1);
  operator delete();
}

void sub_1011F62A8()
{
  operator new();
}

uint64_t sub_1011F62E0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t result;
  unint64_t v19;
  unsigned int v20;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_17;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *(_DWORD *)(a1 + 28) |= 1u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v20 = 0;
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20))
        return 0;
    }
    else
    {
      v20 = *v9;
      *((_QWORD *)this + 1) = v9 + 1;
    }
    v10 = *((_DWORD *)this + 14);
    v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11)
      return 0;
    v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_1011F2A10(v8, this, v13) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    v14 = *((_DWORD *)this + 14);
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v16 < 0 == v15)
      *((_DWORD *)this + 14) = v16;
    v17 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 17)
    {
      *((_QWORD *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1011F650C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311D48 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  return result;
}

uint64_t sub_1011F6578(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    if ((v1 & 1) != 0)
    {
      v1 = *(_QWORD *)(a1 + 8);
      if (!v1)
        v1 = *(_QWORD *)(qword_102311D48 + 8);
      v3 = *(unsigned __int8 *)(v1 + 36);
      if (*(_BYTE *)(v1 + 36))
      {
        v4 = (v3 << 31 >> 31) & 9;
        if ((v3 & 2) != 0)
          v4 += 9;
        if ((v3 & 4) != 0)
          v3 = v4 + 9;
        else
          v3 = v4;
      }
      *(_DWORD *)(v1 + 32) = v3;
      v2 = v3 + 2;
      LODWORD(v1) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1011F65F0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F2690(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F663C()
{
  return 1;
}

_QWORD *sub_1011F6644@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.CMWiFiModelOutput");
}

void sub_1011F6654(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021A89C8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311D50 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011F66A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1011F6654(a1);
  operator delete();
}

void sub_1011F66CC()
{
  operator new();
}

uint64_t sub_1011F6704(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t result;
  unint64_t v19;
  unsigned int v20;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_17;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *(_DWORD *)(a1 + 28) |= 1u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v20 = 0;
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20))
        return 0;
    }
    else
    {
      v20 = *v9;
      *((_QWORD *)this + 1) = v9 + 1;
    }
    v10 = *((_DWORD *)this + 14);
    v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11)
      return 0;
    v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_1011F2A10(v8, this, v13) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    v14 = *((_DWORD *)this + 14);
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v16 < 0 == v15)
      *((_DWORD *)this + 14) = v16;
    v17 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 17)
    {
      *((_QWORD *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1011F6930(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311D50 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  return result;
}

uint64_t sub_1011F699C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    if ((v1 & 1) != 0)
    {
      v1 = *(_QWORD *)(a1 + 8);
      if (!v1)
        v1 = *(_QWORD *)(qword_102311D50 + 8);
      v3 = *(unsigned __int8 *)(v1 + 36);
      if (*(_BYTE *)(v1 + 36))
      {
        v4 = (v3 << 31 >> 31) & 9;
        if ((v3 & 2) != 0)
          v4 += 9;
        if ((v3 & 4) != 0)
          v3 = v4 + 9;
        else
          v3 = v4;
      }
      *(_DWORD *)(v1 + 32) = v3;
      v2 = v3 + 2;
      LODWORD(v1) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1011F6A14(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1011F279C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011F6A60()
{
  return 1;
}

_QWORD *sub_1011F6A68@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.OutdoorEstimator.CMALSModelOutput");
}

uint64_t sub_1011F6A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_101071770();
  sub_100CF57B4(v4 + 496, a2);
  sub_100CFDBB4(a1 + 984, a2);
  sub_101412C28(a1 + 1320, a2);
  return a1;
}

void sub_1011F6AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100CFDBB8(v3);
  sub_100CF57B8(v2);
  sub_101071774(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F6B10(_QWORD *a1, uint64_t a2)
{
  return sub_10041B300(a1, a2, 0);
}

uint64_t sub_1011F6B1C(uint64_t a1, uint64_t a2)
{
  return sub_10041B300((_QWORD *)(a1 + 496), a2, 0);
}

uint64_t sub_1011F6B28(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100CF5970(a1 + 496, a2);
}

uint64_t sub_1011F6B30(uint64_t a1, _QWORD *a2)
{
  if (!sub_10008950C(a1 + 568))
    return 109;
  sub_100CF5BD0(a1 + 496, a2);
  return 100;
}

uint64_t sub_1011F6B74(uint64_t a1, _QWORD *a2)
{
  return sub_100CF6028(a1 + 496, a2);
}

uint64_t sub_1011F6B80(uint64_t a1, uint64_t *a2)
{
  if (sub_10008950C(a1 + 72))
    return sub_101074104(a1, a2);
  else
    return 109;
}

uint64_t sub_1011F6BDC(uint64_t a1)
{
  NSObject *v2;
  unsigned __int8 v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[16];
  uint64_t v9;

  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021A8B50);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning aggregation for VO2Max staging data", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A8B50);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Beginning aggregation for VO2Max staging data", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxStagingOutputStore::aggregateRecords()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_10230D460);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10230D460))
  {
    v9 = 0;
    *(_OWORD *)buf = xmmword_101C46F60;
    sub_101109778(qword_10230D448, buf, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1004A6E3C, qword_10230D448, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D460);
  }
  sub_1010717CC(a1, (uint64_t)qword_10230D448);
  sub_100CF5830(a1 + 496, (uint64_t)qword_10230D448);
  return sub_100CFDC7C(a1 + 984, (uint64_t)qword_10230D448);
}

void sub_1011F6E10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230D460);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F6E30(_QWORD *a1)
{
  sub_101139070(a1 + 9);
  sub_101139070(a1 + 71);
  return sub_101139070(a1 + 132);
}

uint64_t sub_1011F6E60(uint64_t a1, uint64_t a2)
{
  return sub_10041B300((_QWORD *)(a1 + 984), a2, 0);
}

uint64_t sub_1011F6E6C(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100CFE07C(a1 + 984, a2);
}

uint64_t sub_1011F6E74(uint64_t a1, _QWORD *a2)
{
  if (!sub_10008950C(a1 + 1056))
    return 109;
  sub_100CFDDBC(a1 + 984, a2);
  return 100;
}

void sub_1011F6EB8(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_1011F6EE4(unsigned __int16 *a1, uint64_t a2, float a3)
{
  float v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  BOOL v30;
  NSObject *v31;
  NSObject *v32;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  double v38;
  int v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;

  if (*(_BYTE *)(a2 + 40))
  {
    v4 = -999.0;
  }
  else
  {
    v5 = *(double *)(a2 + 8);
    v6 = -999.0;
    if (v5 != -999.0)
    {
      v7 = *(double *)(a2 + 16);
      v8 = v7 - v5;
      if (v7 == -999.0)
        v6 = -999.0;
      else
        v6 = v8;
    }
    v4 = v6;
  }
  v9 = a1[1];
  v10 = *((unsigned int *)a1 + 1);
  v11 = *a1;
  if (v11 + v9 >= v10)
    v12 = *((unsigned int *)a1 + 1);
  else
    v12 = 0;
  *(float *)&a1[2 * (v11 + v9 - v12) + 4] = v4;
  if (v10 <= v9)
  {
    v13 = v11 + 1;
    if (v13 >= v10)
      v14 = v10;
    else
      v14 = 0;
    *a1 = v13 - v14;
  }
  else
  {
    LOWORD(v9) = v9 + 1;
    a1[1] = v9;
  }
  v16 = a1 + 124;
  v15 = a1[124];
  v17 = a1[125];
  v18 = *((unsigned int *)a1 + 63);
  if (v15 + v17 >= v18)
    v19 = *((unsigned int *)a1 + 63);
  else
    v19 = 0;
  *(float *)&v16[2 * (v15 + v17 - v19) + 4] = a3;
  if (v18 <= v17)
  {
    v20 = v15 + 1;
    if (v20 < v18)
      LOWORD(v18) = 0;
    *v16 = v20 - v18;
  }
  else
  {
    LOWORD(v17) = v17 + 1;
    a1[125] = v17;
  }
  if ((_DWORD)v10 != (unsigned __int16)v9)
    return 0;
  v21 = 0.0;
  if ((_WORD)v17)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0.0;
    do
    {
      if (*(float *)sub_1004784C4(a1, v22) != -999.0)
      {
        v24 = v24 + *(float *)sub_1004784C4(a1, v22);
        ++v23;
      }
      ++v22;
    }
    while (v22 < a1[125]);
    LOWORD(v9) = a1[1];
  }
  else
  {
    v23 = 0;
    v24 = 0.0;
  }
  v26 = (float)v23 / (float)(unsigned __int16)v9;
  v27 = sub_10076C0D4(a1 + 124, (unsigned int (*)(float, float))sub_100C9DA24, 0);
  v28 = v27 - sub_10076C0D4(a1 + 124, (unsigned int (*)(float, float))sub_10076C2D0, 0);
  if (!v23
    || ((v21 = v24 / (float)v23, v26 > 0.75) ? (v29 = v21 < -20.0) : (v29 = 0),
        v29 ? (v30 = v28 <= 180.0) : (v30 = 1),
        v30))
  {
    v25 = 0;
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A8B70);
    v31 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      v46 = v28;
      v47 = 2050;
      v48 = v21;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "HRHBS StopDetected,%{public}f,%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A8B70);
      v39 = 134349312;
      v40 = v28;
      v41 = 2050;
      v42 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "HRHBS StopDetected,%{public}f,%{public}f", &v39, 22);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLExerciseMachineHeadingHRBackstop::update(float, const CLWorkoutStopModelHR::Statistics &, int)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    v25 = 1;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021A8B70);
  v32 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218496;
    v46 = v26;
    v47 = 2048;
    v48 = v21;
    v49 = 2048;
    v50 = v28;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "HRHBS,good,%f,eDiff,%f,degree,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A8B70);
    v39 = 134218496;
    v40 = v26;
    v41 = 2048;
    v42 = v21;
    v43 = 2048;
    v44 = v28;
    LODWORD(v38) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "HRHBS,good,%f,eDiff,%f,degree,%f", COERCE_DOUBLE(&v39), v38);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLExerciseMachineHeadingHRBackstop::update(float, const CLWorkoutStopModelHR::Statistics &, int)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  return v25;
}

void sub_1011F741C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

id *sub_1011F74CC(uint64_t a1, uint64_t a2)
{
  char v4;
  NSObject *v5;
  __int128 *v6;
  __int128 *v7;
  const char *v8;
  char *v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  NSObject *v13;
  __int128 *v14;
  __int128 *v16;
  const char *v17;
  void *v18[2];
  char v19;
  void *__dst[2];
  uint64_t v21;
  int v22;
  void *__p[2];
  uint64_t v24;
  int v25;
  void *v26[2];
  char v27;
  id v28[2];
  int v29;
  __int128 *v30;
  _BYTE buf[1632];

  sub_100131938(v28, (uint64_t)"CLBatchedSensor.onAccelerometerData", 0);
  sub_1015A2E04(v26, "kCLConnectionMessageBatchedAccelerometer");
  if (byte_10230D47F < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_10230D468, *((unint64_t *)&xmmword_10230D468 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_10230D468;
    v24 = unk_10230D478;
  }
  v25 = dword_10230D480;
  v4 = sub_1011FA5CC(a1, (uint64_t)v26, (uint64_t *)__p);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (v27 < 0)
  {
    operator delete(v26[0]);
    if ((v4 & 1) == 0)
      return sub_100131740(v28);
  }
  else if ((v4 & 1) == 0)
  {
    return sub_100131740(v28);
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v5 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      if (byte_10230D47F >= 0)
        v6 = &xmmword_10230D468;
      else
        v6 = (__int128 *)xmmword_10230D468;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[subscription-%{public}s] data buffer is empty", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100131740(v28);
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (byte_10230D47F >= 0)
      v7 = &xmmword_10230D468;
    else
      v7 = (__int128 *)xmmword_10230D468;
    v29 = 136446210;
    v30 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[subscription-%{public}s] data buffer is empty", &v29, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::onBatchedAccelerometerData(const CLBatchedAccelerometerClient::Buffer &)", "%s\n", v8);
LABEL_49:
    if (v9 != buf)
      free(v9);
    return sub_100131740(v28);
  }
  if (byte_10230D47F < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_10230D468, *((unint64_t *)&xmmword_10230D468 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_10230D468;
    v21 = unk_10230D478;
  }
  v22 = dword_10230D480;
  v10 = sub_1011FA878((__int128 **)a2, (uint64_t *)__dst);
  v11 = v10;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst[0]);
    if (v11)
      goto LABEL_30;
  }
  else if (v10)
  {
LABEL_30:
    sub_1015A2E04(v18, "kCLConnectionMessageBatchedAccelerometer");
    v12 = sub_1011FAAFC((const char *)v18, v11);
    if (v19 < 0)
      operator delete(v18[0]);
    *(_QWORD *)buf = v12;
    sub_1011FAB98(a1, buf);
    xpc_release(v11);
    xpc_release(*(xpc_object_t *)buf);
    return sub_100131740(v28);
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v13 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
  {
    if (byte_10230D47F >= 0)
      v14 = &xmmword_10230D468;
    else
      v14 = (__int128 *)xmmword_10230D468;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[subscription-%{public}s] could not create payload", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (byte_10230D47F >= 0)
      v16 = &xmmword_10230D468;
    else
      v16 = (__int128 *)xmmword_10230D468;
    v29 = 136446210;
    v30 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[subscription-%{public}s] could not create payload", &v29, 12);
    v9 = (char *)v17;
    sub_100512490("Generic", 1, 0, 0, "void CLBatchedSensorSubscription::onBatchedAccelerometerData(const CLBatchedAccelerometerClient::Buffer &)", "%s\n", v17);
    goto LABEL_49;
  }
  return sub_100131740(v28);
}

void sub_1011F7964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,id a39)
{
  sub_100131740(&a39);
  _Unwind_Resume(a1);
}

id *sub_1011F7A1C(uint64_t a1, uint64_t a2)
{
  char v4;
  NSObject *v5;
  __int128 *v6;
  __int128 *v7;
  const char *v8;
  char *v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  NSObject *v13;
  __int128 *v14;
  __int128 *v16;
  const char *v17;
  void *v18[2];
  char v19;
  void *__dst[2];
  uint64_t v21;
  int v22;
  void *__p[2];
  uint64_t v24;
  int v25;
  void *v26[2];
  char v27;
  id v28[2];
  int v29;
  __int128 *v30;
  _BYTE buf[1632];

  sub_100131938(v28, (uint64_t)"CLBatchedSensor.onDeviceMotionData", 0);
  sub_1015A2E04(v26, "kCLConnectionMessageBatchedDeviceMotion");
  if (byte_10230D49F < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_10230D488, *((unint64_t *)&xmmword_10230D488 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_10230D488;
    v24 = unk_10230D498;
  }
  v25 = dword_10230D4A0;
  v4 = sub_1011FA5CC(a1, (uint64_t)v26, (uint64_t *)__p);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (v27 < 0)
  {
    operator delete(v26[0]);
    if ((v4 & 1) == 0)
      return sub_100131740(v28);
  }
  else if ((v4 & 1) == 0)
  {
    return sub_100131740(v28);
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v5 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      if (byte_10230D49F >= 0)
        v6 = &xmmword_10230D488;
      else
        v6 = (__int128 *)xmmword_10230D488;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[subscription-%{public}s] data buffer is empty", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100131740(v28);
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (byte_10230D49F >= 0)
      v7 = &xmmword_10230D488;
    else
      v7 = (__int128 *)xmmword_10230D488;
    v29 = 136446210;
    v30 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[subscription-%{public}s] data buffer is empty", &v29, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::onBatchedDeviceMotionData(const CLBatchedDeviceMotionClient::Buffer &)", "%s\n", v8);
LABEL_49:
    if (v9 != buf)
      free(v9);
    return sub_100131740(v28);
  }
  if (byte_10230D49F < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_10230D488, *((unint64_t *)&xmmword_10230D488 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_10230D488;
    v21 = unk_10230D498;
  }
  v22 = dword_10230D4A0;
  v10 = sub_1011FAC34((__int128 **)a2, (uint64_t *)__dst);
  v11 = v10;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst[0]);
    if (v11)
      goto LABEL_30;
  }
  else if (v10)
  {
LABEL_30:
    sub_1015A2E04(v18, "kCLConnectionMessageBatchedDeviceMotion");
    v12 = sub_1011FAAFC((const char *)v18, v11);
    if (v19 < 0)
      operator delete(v18[0]);
    *(_QWORD *)buf = v12;
    sub_1011FAB98(a1, buf);
    xpc_release(v11);
    xpc_release(*(xpc_object_t *)buf);
    return sub_100131740(v28);
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v13 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
  {
    if (byte_10230D49F >= 0)
      v14 = &xmmword_10230D488;
    else
      v14 = (__int128 *)xmmword_10230D488;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[subscription-%{public}s] could not create payload", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (byte_10230D49F >= 0)
      v16 = &xmmword_10230D488;
    else
      v16 = (__int128 *)xmmword_10230D488;
    v29 = 136446210;
    v30 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[subscription-%{public}s] could not create payload", &v29, 12);
    v9 = (char *)v17;
    sub_100512490("Generic", 1, 0, 0, "void CLBatchedSensorSubscription::onBatchedDeviceMotionData(const CLBatchedDeviceMotionClient::Buffer &)", "%s\n", v17);
    goto LABEL_49;
  }
  return sub_100131740(v28);
}

void sub_1011F7EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,id a39)
{
  sub_100131740(&a39);
  _Unwind_Resume(a1);
}

void sub_1011F8028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006BCA04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011F8044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  void *__dst[2];
  uint64_t v29;
  int v30;
  void *v31[2];
  char v32;
  void *__p[2];
  uint64_t v34;
  int v35;
  void *v36[2];
  char v37;
  _DWORD v38[2];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;

  v6 = sub_100F72B60(a2);
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v7 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 224);
    v10 = a3 + 16;
    v11 = *(_DWORD *)(a1 + 96);
    if (*(char *)(a3 + 39) < 0)
      v10 = *(_QWORD *)(a3 + 16);
    *(_DWORD *)buf = 67241218;
    v48 = v8;
    v49 = 1026;
    v50 = v9;
    v51 = 1026;
    v52 = v11;
    v53 = 1026;
    v54 = v6;
    v55 = 2082;
    v56 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[subscription] received workout event %{public}d, mode %{public}d, previous active state %{public}d, current active state %{public}d, appId %{public}s", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v22 = *(_QWORD *)(a2 + 16);
    v23 = *(_QWORD *)(a2 + 224);
    v24 = a3 + 16;
    v25 = *(_DWORD *)(a1 + 96);
    if (*(char *)(a3 + 39) < 0)
      v24 = *(_QWORD *)(a3 + 16);
    v38[0] = 67241218;
    v38[1] = v22;
    v39 = 1026;
    v40 = v23;
    v41 = 1026;
    v42 = v25;
    v43 = 1026;
    v44 = v6;
    v45 = 2082;
    v46 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[subscription] received workout event %{public}d, mode %{public}d, previous active state %{public}d, current active state %{public}d, appId %{public}s", v38, 36);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::onWorkoutSessionUpdate(CLMotionStateMediator_Type::WorkoutEvent, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  v14 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 128);
  v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  v17 = *(_OWORD *)(a2 + 176);
  v18 = *(_OWORD *)(a2 + 192);
  v19 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v17;
  std::string::operator=((std::string *)(a1 + 280), (const std::string *)(a3 + 16));
  v20 = sub_1011FAEC0(a1);
  if (sub_100F72B60(a2) == 1)
  {
    *(_DWORD *)(a1 + 96) = 1;
    sub_1015A2E04(v36, "kCLConnectionMessageBatchedAccelerometer");
    if (byte_10230D47F < 0)
    {
      sub_100115CE4(__p, (void *)xmmword_10230D468, *((unint64_t *)&xmmword_10230D468 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_10230D468;
      v34 = unk_10230D478;
    }
    v35 = dword_10230D480;
    sub_1011FAFBC(a1, (uint64_t)v36, __p, *(void **)(a1 + 56));
    if (SHIBYTE(v34) < 0)
      operator delete(__p[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    sub_1015A2E04(v31, "kCLConnectionMessageBatchedDeviceMotion");
    if (byte_10230D49F < 0)
    {
      sub_100115CE4(__dst, (void *)xmmword_10230D488, *((unint64_t *)&xmmword_10230D488 + 1));
    }
    else
    {
      *(_OWORD *)__dst = xmmword_10230D488;
      v29 = unk_10230D498;
    }
    v30 = dword_10230D4A0;
    sub_1011FAFBC(a1, (uint64_t)v31, __dst, *(void **)(a1 + 64));
    if (SHIBYTE(v29) < 0)
      operator delete(__dst[0]);
    if (v32 < 0)
      operator delete(v31[0]);
  }
  else if (sub_100F72B60(a2) == 2)
  {
    v21 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 96) = 2;
    objc_msgSend(*(id *)(a1 + 56), "unregisterForData:", v21);
    objc_msgSend(*(id *)(a1 + 64), "unregisterForData:", *(_QWORD *)(a1 + 48));
  }
  sub_1011FB45C(a1, v20);
}

void sub_1011F8478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1011F8508(_QWORD *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7;
  CLBatchedSensorSubscriptionAdapter **v8;
  _QWORD *v9;
  CLBatchedSensorSubscriptionAdapter *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v16[5];

  v7 = sub_1001B5A2C((uint64_t)a1, a2, a3, a4, a5);
  *(_QWORD *)v7 = off_1021A8BA0;
  *(_OWORD *)(v7 + 48) = 0u;
  v8 = (CLBatchedSensorSubscriptionAdapter **)(v7 + 48);
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_DWORD *)(v7 + 96) = 2;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 257) = 0u;
  sub_1015A2E04((_QWORD *)(v7 + 280), "");
  a1[38] = off_102141E98;
  v9 = operator new(0x20uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = off_102141ED0;
  *((_DWORD *)v9 + 6) = 31337;
  a1[39] = v9 + 3;
  a1[40] = v9;
  v10 = -[CLBatchedSensorSubscriptionAdapter initWithBatchedSensorSubscription:]([CLBatchedSensorSubscriptionAdapter alloc], "initWithBatchedSensorSubscription:", a1);
  *v8 = v10;
  -[CLBatchedSensorSubscriptionAdapter setValid:](v10, "setValid:", 1);
  v11 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLBatchedAccelerometerService"));
  a1[7] = v11;
  objc_msgSend(v11, "registerDelegate:inSilo:", a1[6], objc_msgSend(a3, "silo"));
  v12 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLBatchedDeviceMotionService"));
  a1[8] = v12;
  objc_msgSend(v12, "registerDelegate:inSilo:", a1[6], objc_msgSend(a3, "silo"));
  v13 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLMotionStateMediator"));
  a1[9] = v13;
  objc_msgSend(v13, "registerDelegate:inSilo:", a1[6], objc_msgSend(a3, "silo"));
  v14 = (void *)a1[9];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1011F873C;
  v16[3] = &unk_1021A8BC0;
  v16[4] = a1;
  objc_msgSend(v14, "currentWorkoutActiveStateWithReply:", v16);
  return a1;
}

void sub_1011F8700(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 303) < 0)
    operator delete(*v2);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_1011F873C(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[2];
  __int16 v21;
  std::string *v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  std::string *v26;
  uint64_t v27;
  std::string v28;
  _QWORD v29[6];

  v6 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a4 + 16))(&v27, a4);
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v7 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = &v28;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v28.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67240450;
    v24 = a2;
    v25 = 2082;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[subscription] received initial workout state of %{public}d, id %{public}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v17 = &v28;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    v20[0] = 67240450;
    v20[1] = a2;
    v21 = 2082;
    v22 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[subscription] received initial workout state of %{public}d, id %{public}s", v20, 18);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLBatchedSensorSubscription::CLBatchedSensorSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAuthorizationContext *, CLClientKeyPath *)_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(_BYTE *)(v6 + 272) = 1;
  *(_DWORD *)(v6 + 96) = a2;
  v9 = *a3;
  v10 = a3[1];
  *(_OWORD *)(v6 + 136) = a3[2];
  *(_OWORD *)(v6 + 120) = v10;
  *(_OWORD *)(v6 + 104) = v9;
  v11 = a3[3];
  v12 = a3[4];
  v13 = a3[5];
  *(_OWORD *)(v6 + 200) = a3[6];
  *(_OWORD *)(v6 + 184) = v13;
  *(_OWORD *)(v6 + 168) = v12;
  *(_OWORD *)(v6 + 152) = v11;
  v14 = a3[7];
  v15 = a3[8];
  v16 = a3[9];
  *(_QWORD *)(v6 + 264) = *((_QWORD *)a3 + 20);
  *(_OWORD *)(v6 + 248) = v16;
  *(_OWORD *)(v6 + 232) = v15;
  *(_OWORD *)(v6 + 216) = v14;
  std::string::operator=((std::string *)(v6 + 280), &v28);
  sub_1011F8A00(v6);
  objc_msgSend(*(id *)(v6 + 72), "registerForWorkoutSessionUpdates:", *(_QWORD *)(v6 + 48));
  sub_100691160(v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1011F89E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006BCA04(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1011F8A00(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void **v4;
  NSObject *v5;
  const char *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  void *v13[2];
  uint64_t v14;
  int v15;
  void *v16[2];
  char v17;
  void *__dst[2];
  uint64_t v19;
  int v20;
  void *v21[2];
  char v22;
  _BYTE buf[12];
  __int16 v24;
  void **v25;
  char v26;
  int v27;
  _QWORD *v28;
  __int16 v29;
  _BYTE *v30;
  void *__p[2];
  char v32;

  if (*(_BYTE *)(a1 + 272))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v2 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0)
        v3 = (_QWORD *)*v3;
      sub_1011F9E20(a1, (uint64_t)__p);
      if (v32 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v3;
      v24 = 2082;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[subscription] handling first workout with workout app id %{public}s, client id %{public}s", buf, 0x16u);
      if (v32 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
      v8 = (_QWORD *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0)
        v8 = (_QWORD *)*v8;
      v9 = qword_10229FFB8;
      sub_1011F9E20(a1, (uint64_t)buf);
      if (v26 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v27 = 136446466;
      v28 = v8;
      v29 = 2082;
      v30 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "[subscription] handling first workout with workout app id %{public}s, client id %{public}s", &v27, 22);
      v12 = v11;
      if (v26 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleFirstWorkoutNotification()", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
    sub_1015A2E04(v21, "kCLConnectionMessageBatchedAccelerometer");
    if (byte_10230D47F < 0)
    {
      sub_100115CE4(__dst, (void *)xmmword_10230D468, *((unint64_t *)&xmmword_10230D468 + 1));
    }
    else
    {
      *(_OWORD *)__dst = xmmword_10230D468;
      v19 = unk_10230D478;
    }
    v20 = dword_10230D480;
    sub_1011FAFBC(a1, (uint64_t)v21, __dst, *(void **)(a1 + 56));
    if (SHIBYTE(v19) < 0)
      operator delete(__dst[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    sub_1015A2E04(v16, "kCLConnectionMessageBatchedDeviceMotion");
    if (byte_10230D49F < 0)
    {
      sub_100115CE4(v13, (void *)xmmword_10230D488, *((unint64_t *)&xmmword_10230D488 + 1));
    }
    else
    {
      *(_OWORD *)v13 = xmmword_10230D488;
      v14 = unk_10230D498;
    }
    v15 = dword_10230D4A0;
    sub_1011FAFBC(a1, (uint64_t)v16, v13, *(void **)(a1 + 64));
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  else
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v5 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[subscription] we should know workout state here", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[subscription] we should know workout state here", buf, 2);
      v7 = (void **)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLBatchedSensorSubscription::handleFirstWorkoutNotification()", "%s\n", v6);
      if (v7 != __p)
        free(v7);
    }
  }
}

void sub_1011F8E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011F8F08(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021A8BA0;
  objc_msgSend(*(id *)(a1 + 56), "unregisterForData:", *(_QWORD *)(a1 + 48));

  *(_QWORD *)(a1 + 56) = 0;
  objc_msgSend(*(id *)(a1 + 64), "unregisterForData:", *(_QWORD *)(a1 + 48));

  *(_QWORD *)(a1 + 64) = 0;
  objc_msgSend(*(id *)(a1 + 72), "unregisterForWorkoutSessionUpdates:", *(_QWORD *)(a1 + 48));

  *(_QWORD *)(a1 + 72) = 0;
  if (objc_opt_class(HKHealthStore, v2))
  {

    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  objc_msgSend(*(id *)(a1 + 48), "setValid:", 0);

  *(_QWORD *)(a1 + 48) = 0;
  sub_100090A0C((_QWORD *)(a1 + 304));
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  return sub_10002FA68(a1);
}

void sub_1011F8FDC(uint64_t a1)
{
  sub_1011F8F08(a1);
  operator delete();
}

_QWORD *sub_1011F9000@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_1021A8CF8;
  v15[1] = sub_1011F9318;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
  sub_100BBF88C((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_1021A8CF8;
  v13[1] = sub_1011F9578;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageBatchedAccelerometer");
  sub_100BBF88C((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_1021A8CF8;
  v11[1] = sub_1011F99C8;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageBatchedDeviceMotion");
  sub_100BBF88C((uint64_t)v22, (uint64_t)v11);
  sub_1011FC568(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_1011F920C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

uint64_t sub_1011F9318(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v7;
  void **v8;
  char *v9;
  char *v10;
  void *v11[2];
  char v12;
  void *__p;
  __int16 v14;
  void **v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  void **v21;
  __int16 v22;
  uint64_t v23;

  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v4 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1011F9E20(a1, (uint64_t)&__p);
    v5 = (v17 & 0x80000000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67240706;
    v19 = a2;
    v20 = 2082;
    v21 = v5;
    v22 = 2050;
    v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[subscription] subscription changed for availability updates %{public}d, %{public}s, %{public}p", buf, 0x1Cu);
    if (SBYTE3(v17) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v7 = qword_10229FFB8;
    sub_1011F9E20(a1, (uint64_t)v11);
    if (v12 >= 0)
      v8 = v11;
    else
      v8 = (void **)v11[0];
    LODWORD(__p) = 67240706;
    HIDWORD(__p) = a2;
    v14 = 2082;
    v15 = v8;
    v16 = 2050;
    v17 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "[subscription] subscription changed for availability updates %{public}d, %{public}s, %{public}p", &__p, 28);
    v10 = v9;
    if (v12 < 0)
      operator delete(v11[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleRequestAvailabilityUpdate(BOOL, NSDictionary *)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return sub_1001A638C(a1);
}

void sub_1011F9578(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  __int128 *v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 *v10;
  void **v11;
  char *v12;
  char *v13;
  void *__dst[2];
  uint64_t v15;
  int v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *__p[2];
  uint64_t v22;
  int v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[12];
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  NSNumber *v39;

  if (byte_10230D47F < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_10230D468, *((unint64_t *)&xmmword_10230D468 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_10230D468;
    v22 = unk_10230D478;
  }
  v23 = dword_10230D480;
  v5 = sub_1011FA040(a1, 0, a3, (uint64_t *)__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if ((_DWORD)v5 == 100)
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v6 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = byte_10230D47F >= 0 ? &xmmword_10230D468 : (__int128 *)xmmword_10230D468;
      sub_1011F9E20(a1, (uint64_t)v24);
      v8 = SBYTE3(v28) >= 0 ? v24 : *(_BYTE **)v24;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v7;
      v32 = 1026;
      v33 = a2;
      v34 = 2082;
      v35 = v8;
      v36 = 2050;
      v37 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] subscription changed %{public}d, %{public}s, %{public}p", buf, 0x26u);
      if (SBYTE3(v28) < 0)
        operator delete(*(void **)v24);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
      v9 = qword_10229FFB8;
      if (byte_10230D47F >= 0)
        v10 = &xmmword_10230D468;
      else
        v10 = (__int128 *)xmmword_10230D468;
      sub_1011F9E20(a1, (uint64_t)v19);
      if (v20 >= 0)
        v11 = v19;
      else
        v11 = (void **)v19[0];
      *(_DWORD *)v24 = 136446978;
      *(_QWORD *)&v24[4] = v10;
      v25 = 1026;
      v26 = a2;
      v27 = 2082;
      v28 = v11;
      v29 = 2050;
      v30 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "[subscription-%{public}s] subscription changed %{public}d, %{public}s, %{public}p", v24, 38);
      v13 = v12;
      if (v20 < 0)
        operator delete(v19[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleRequestBatchedAccelerometer(BOOL, NSDictionary *)", "%s\n", v13);
      if (v13 != buf)
        free(v13);
    }
    sub_1001A638C(a1);
    if (a2)
    {
      sub_1015A2E04(v17, "kCLConnectionMessageBatchedAccelerometer");
      if (byte_10230D47F < 0)
      {
        sub_100115CE4(__dst, (void *)xmmword_10230D468, *((unint64_t *)&xmmword_10230D468 + 1));
      }
      else
      {
        *(_OWORD *)__dst = xmmword_10230D468;
        v15 = unk_10230D478;
      }
      v16 = dword_10230D480;
      sub_1011FA3B0(a1, (uint64_t *)v17, (__int128 *)__dst);
      if (SHIBYTE(v15) < 0)
        operator delete(__dst[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 56), "unregisterForData:", *(_QWORD *)(a1 + 48));
    }
  }
  else
  {
    sub_1001A638C(a1);
    objc_msgSend(*(id *)(a1 + 56), "unregisterForData:", *(_QWORD *)(a1 + 48));
    v38 = CMErrorMessage;
    v39 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    sub_1011FA310(a1, buf);
  }
}

void sub_1011F9974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1011F99C8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  __int128 *v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 *v10;
  void **v11;
  char *v12;
  char *v13;
  void *__dst[2];
  uint64_t v15;
  int v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *__p[2];
  uint64_t v22;
  int v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[12];
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  NSNumber *v39;

  if (byte_10230D49F < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_10230D488, *((unint64_t *)&xmmword_10230D488 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_10230D488;
    v22 = unk_10230D498;
  }
  v23 = dword_10230D4A0;
  v5 = sub_1011FA040(a1, 0, a3, (uint64_t *)__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if ((_DWORD)v5 == 100)
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v6 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = byte_10230D49F >= 0 ? &xmmword_10230D488 : (__int128 *)xmmword_10230D488;
      sub_1011F9E20(a1, (uint64_t)v24);
      v8 = SBYTE3(v28) >= 0 ? v24 : *(_BYTE **)v24;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v7;
      v32 = 1026;
      v33 = a2;
      v34 = 2082;
      v35 = v8;
      v36 = 2050;
      v37 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] subscription changed %{public}d, %{public}s, %{public}p", buf, 0x26u);
      if (SBYTE3(v28) < 0)
        operator delete(*(void **)v24);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
      v9 = qword_10229FFB8;
      if (byte_10230D49F >= 0)
        v10 = &xmmword_10230D488;
      else
        v10 = (__int128 *)xmmword_10230D488;
      sub_1011F9E20(a1, (uint64_t)v19);
      if (v20 >= 0)
        v11 = v19;
      else
        v11 = (void **)v19[0];
      *(_DWORD *)v24 = 136446978;
      *(_QWORD *)&v24[4] = v10;
      v25 = 1026;
      v26 = a2;
      v27 = 2082;
      v28 = v11;
      v29 = 2050;
      v30 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "[subscription-%{public}s] subscription changed %{public}d, %{public}s, %{public}p", v24, 38);
      v13 = v12;
      if (v20 < 0)
        operator delete(v19[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleRequestBatchedDeviceMotion(BOOL, NSDictionary *)", "%s\n", v13);
      if (v13 != buf)
        free(v13);
    }
    sub_1001A638C(a1);
    if (a2)
    {
      sub_1015A2E04(v17, "kCLConnectionMessageBatchedDeviceMotion");
      if (byte_10230D49F < 0)
      {
        sub_100115CE4(__dst, (void *)xmmword_10230D488, *((unint64_t *)&xmmword_10230D488 + 1));
      }
      else
      {
        *(_OWORD *)__dst = xmmword_10230D488;
        v15 = unk_10230D498;
      }
      v16 = dword_10230D4A0;
      sub_1011FA3B0(a1, (uint64_t *)v17, (__int128 *)__dst);
      if (SHIBYTE(v15) < 0)
        operator delete(__dst[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 64), "unregisterForData:", *(_QWORD *)(a1 + 48));
    }
  }
  else
  {
    sub_1001A638C(a1);
    objc_msgSend(*(id *)(a1 + 64), "unregisterForData:", *(_QWORD *)(a1 + 48));
    v38 = CMErrorMessage;
    v39 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    sub_1011FA310(a1, buf);
  }
}

void sub_1011F9DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1011F9E20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *v12[2];
  __int128 v13;
  void *v14[4];
  void *v15[2];
  void *__p[2];
  __int128 v17;
  uint64_t v18;

  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    objc_msgSend(v4, "clientName");
  }
  else
  {
    v18 = 0;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    *(_OWORD *)v8 = 0u;
  }
  sub_1001A8D50((uint64_t)v8);
  if (SHIBYTE(v14[3]) >= 0)
    v5 = (void *)HIBYTE(v14[3]);
  else
    v5 = v14[2];
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14[3]) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
  {
    operator delete(v8[0]);
    if (v5)
      goto LABEL_21;
LABEL_24:
    if (objc_msgSend(*(id *)(a1 + 24), "executablePath", v8[0], v8[1], v9[0]))
      v7 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "executablePath"), "UTF8String");
    else
      v7 = "";
    sub_1015A2E04((_QWORD *)a2, v7);
    return;
  }
  if (!v5)
    goto LABEL_24;
LABEL_21:
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    objc_msgSend(v6, "clientName");
  }
  else
  {
    v18 = 0;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    *(_OWORD *)v8 = 0u;
  }
  sub_1001A8D50((uint64_t)v8);
  if (SHIBYTE(v14[3]) < 0)
  {
    sub_100115CE4((_BYTE *)a2, v14[1], (unint64_t)v14[2]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v14[1];
    *(void **)(a2 + 16) = v14[3];
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14[3]) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
    operator delete(v8[0]);
}

void sub_1011FA028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1011FA040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  void **v11;
  char *v12;
  char *v13;
  void *v14[2];
  char v15;
  _BYTE __p[12];
  __int16 v17;
  void **v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t *v22;
  __int16 v23;
  _BYTE *v24;
  __int16 v25;
  uint64_t v26;

  if ((sub_1001BBC08(a1) & 1) != 0)
    return 100;
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v7 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a4;
    if (*((char *)a4 + 23) < 0)
      v8 = (uint64_t *)*a4;
    sub_1011F9E20(a1, (uint64_t)__p);
    if (v19 >= 0)
      v9 = __p;
    else
      v9 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446722;
    v22 = v8;
    v23 = 2082;
    v24 = v9;
    v25 = 2050;
    v26 = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] error, not authorized for motion activity %{public}s, %{public}p", buf, 0x20u);
    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (*((char *)a4 + 23) < 0)
      a4 = (uint64_t *)*a4;
    v10 = qword_10229FFB8;
    sub_1011F9E20(a1, (uint64_t)v14);
    if (v15 >= 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    *(_DWORD *)__p = 136446722;
    *(_QWORD *)&__p[4] = a4;
    v17 = 2082;
    v18 = v11;
    v19 = 2050;
    v20 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "[subscription-%{public}s] error, not authorized for motion activity %{public}s, %{public}p", __p, 32);
    v13 = v12;
    if (v15 < 0)
      operator delete(v14[0]);
    sub_100512490("Generic", 1, 0, 2, "CMError CLBatchedSensorSubscription::validateBatchedSensorRequest(BOOL, NSDictionary *, ConnectionInfo)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  return 105;
}

_QWORD *sub_1011FA2BC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  return __dst;
}

void sub_1011FA310(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(off_1021A8D78, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1011FA39C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011FA3B0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v4;
  id v6;
  id v7;
  void *v8;
  uint64_t *p_shared_weak_owners;
  unint64_t v10;
  _QWORD v11[8];
  std::__shared_weak_count *v12;
  __int128 __p;
  uint64_t v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD v18[5];
  id v19;

  v4 = a2;
  if (objc_opt_class(HKHealthStore, a2))
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      *(_QWORD *)(a1 + 80) = objc_opt_new(HKHealthStore);
      *(_QWORD *)(a1 + 88) = objc_msgSend(objc_alloc((Class)_HKWorkoutObserver), "initWithHealthStore:", *(_QWORD *)(a1 + 80));
    }
    v18[0] = 0;
    v18[1] = v18;
    v18[2] = 0x3052000000;
    v18[3] = sub_1002072F8;
    v18[4] = sub_100207E10;
    v19 = 0;
    v6 = objc_alloc((Class)NSString);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t *)*v4;
    v19 = objc_msgSend(v6, "initWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
    v7 = objc_msgSend(*(id *)(a1 + 8), "silo");
    sub_10052D218(a1 + 304, &v16);
    v8 = *(void **)(a1 + 88);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    v11[2] = sub_1011FB760;
    v11[3] = &unk_1021A8C68;
    v11[4] = v7;
    v11[6] = a1;
    v11[7] = v16;
    v12 = v17;
    if (v17)
    {
      p_shared_weak_owners = &v17->__shared_weak_owners_;
      do
        v10 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v10 + 1, (unint64_t *)p_shared_weak_owners));
    }
    v11[5] = v18;
    if (*((char *)a3 + 23) < 0)
    {
      sub_100115CE4(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      __p = *a3;
      v14 = *((_QWORD *)a3 + 2);
    }
    v15 = *((_DWORD *)a3 + 6);
    objc_msgSend(v8, "currentWorkoutSnapshotWithCompletion:", v11);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    _Block_object_dispose(v18, 8);
  }
}

void sub_1011FA578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  uint64_t v27;

  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  if (a27)
    std::__shared_weak_count::__release_weak(a27);
  _Block_object_dispose((const void *)(v27 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1011FA5CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  NSObject *v6;
  uint64_t *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  void *v15[2];
  char v16;
  _BYTE __p[12];
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  void **v21;
  uint8_t buf[4];
  uint64_t *v23;
  __int16 v24;
  _QWORD *v25;
  __int16 v26;
  _BYTE *v27;

  result = sub_100FFB214(a1);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 272))
      return 0;
    if (sub_1011FAEC0(a1))
      return 1;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v6 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v7 = a3;
      if (*((char *)a3 + 23) < 0)
        v7 = (uint64_t *)*a3;
      v8 = (_QWORD *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0)
        v8 = (_QWORD *)*v8;
      sub_1011F9E20(a1, (uint64_t)__p);
      if (v20 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446722;
      v23 = v7;
      v24 = 2082;
      v25 = v8;
      v26 = 2082;
      v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[subscription-%{public}s] not in applicable workout, workout id %{public}s, client id %{public}s", buf, 0x20u);
      if (SHIBYTE(v20) < 0)
        operator delete(*(void **)__p);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t *)*a3;
      v10 = (_QWORD *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_10229FFB8;
      sub_1011F9E20(a1, (uint64_t)v15);
      if (v16 >= 0)
        v12 = v15;
      else
        v12 = (void **)v15[0];
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = a3;
      v18 = 2082;
      v19 = v10;
      v20 = 2082;
      v21 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "[subscription-%{public}s] not in applicable workout, workout id %{public}s, client id %{public}s", __p, 32);
      v14 = v13;
      if (v16 < 0)
        operator delete(v15[0]);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLBatchedSensorSubscription::shouldSendBatchedData(std::string, ConnectionInfo)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

xpc_object_t sub_1011FA878(__int128 **a1, uint64_t *a2)
{
  unint64_t v4;
  _DWORD *v5;
  NSObject *v6;
  xpc_object_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  NSObject *v11;
  uint64_t *v12;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v4 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 2;
  v5 = malloc_type_malloc(4 * (int)v4, 0x24EF5720uLL);
  v6 = dispatch_data_create(v5, 4 * (int)v4, 0, _dispatch_data_destructor_free);
  v7 = xpc_data_create_with_dispatch_data(v6);

  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    v10 = *v8;
    v5[4] = *((_DWORD *)v8 + 4);
    *(_OWORD *)v5 = v10;
    v5 += 5;
    v8 = (__int128 *)((char *)v8 + 20);
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v11 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a2;
    if (*((char *)a2 + 23) < 0)
      v12 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446722;
    v23 = v12;
    v24 = 1026;
    v25 = 4 * v4;
    v26 = 1024;
    v27 = -858993459 * v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] created data size %{public}d num %d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v16 = 136446722;
    v17 = a2;
    v18 = 1026;
    v19 = 4 * v4;
    v20 = 1024;
    v21 = -858993459 * v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[subscription-%{public}s] created data size %{public}d num %d", &v16, 24);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static xpc_object_t CLBatchedSensorSubscription::createXpcPayload(const BufferT &, ConnectionInfo) [T = CMAccel800, BufferT = std::vector<CMAccel800>]", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return v7;
}

xpc_object_t sub_1011FAAFC(const char *a1, void *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v6[2];
  char *keys[2];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = xpc_string_create(a1);
  *(_OWORD *)keys = *(_OWORD *)off_1021A8BE0;
  v6[0] = v3;
  v6[1] = a2;
  v4 = xpc_dictionary_create((const char *const *)keys, v6, 2uLL);
  if (v3)
    xpc_release(v3);
  return v4;
}

void sub_1011FAB98(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1011FC948(a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1011FAC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1011FAC34(__int128 **a1, uint64_t *a2)
{
  unint64_t v4;
  _OWORD *v5;
  NSObject *v6;
  xpc_object_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  uint64_t *v14;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  uint64_t *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v4 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 1;
  v5 = malloc_type_malloc(2 * (int)v4, 0x24EF5720uLL);
  v6 = dispatch_data_create(v5, 2 * (int)v4, 0, _dispatch_data_destructor_free);
  v7 = xpc_data_create_with_dispatch_data(v6);

  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    v10 = *v8;
    v11 = v8[1];
    v12 = v8[2];
    *((_WORD *)v5 + 24) = *((_WORD *)v8 + 24);
    v5[1] = v11;
    v5[2] = v12;
    *v5 = v10;
    v5 = (_OWORD *)((char *)v5 + 50);
    v8 = (__int128 *)((char *)v8 + 50);
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v13 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = a2;
    if (*((char *)a2 + 23) < 0)
      v14 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446722;
    v25 = v14;
    v26 = 1026;
    v27 = 2 * v4;
    v28 = 1024;
    v29 = -1030792151 * v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] created data size %{public}d num %d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v18 = 136446722;
    v19 = a2;
    v20 = 1026;
    v21 = 2 * v4;
    v22 = 1024;
    v23 = -1030792151 * v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[subscription-%{public}s] created data size %{public}d num %d", &v18, 24);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static xpc_object_t CLBatchedSensorSubscription::createXpcPayload(const BufferT &, ConnectionInfo) [T = CMSPU::Safety::DMSample, BufferT = std::vector<CMSPU::Safety::DMSample>]", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return v7;
}

BOOL sub_1011FAEC0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  int v5;
  const void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  _BOOL4 v15;
  void *__p[2];
  unsigned __int8 v18;

  sub_1011F9E20(a1, (uint64_t)__p);
  v2 = *(unsigned __int8 *)(a1 + 303);
  if ((v2 & 0x80u) == 0)
    v3 = (void *)*(unsigned __int8 *)(a1 + 303);
  else
    v3 = *(void **)(a1 + 288);
  v4 = v18;
  v5 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v3 != (void *)v4)
  {
    v15 = 0;
    if (((char)v18 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v6 = (const void **)(a1 + 280);
  if ((v18 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v2 & 0x80) != 0)
  {
    v15 = memcmp(*v6, v7, *(_QWORD *)(a1 + 288)) == 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 303))
  {
    v8 = v2 - 1;
    do
    {
      v10 = *(unsigned __int8 *)v6;
      v6 = (const void **)((char *)v6 + 1);
      v9 = v10;
      v12 = *(unsigned __int8 *)v7;
      v7 = (void **)((char *)v7 + 1);
      v11 = v12;
      v14 = v8-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v15 = 1;
  if ((char)v18 < 0)
LABEL_23:
    operator delete(__p[0]);
LABEL_24:
  if (*(_DWORD *)(a1 + 96) != 1)
    return 0;
  if (*(_QWORD *)(a1 + 264))
    return 0;
  return v15;
}

id sub_1011FAFBC(uint64_t a1, uint64_t a2, void **a3, void *a4)
{
  NSObject *v8;
  int v9;
  void *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  void *v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL4 v20;
  char *v21;
  char *v22;
  void *v23[2];
  void *v24;
  int v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  char v29;
  void *v30[2];
  uint64_t v31;
  void *__p[2];
  void *v33;
  int v34;
  void *__dst[2];
  uint64_t v36;
  int v37;
  void *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  _BOOL4 v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _BOOL4 v52;

  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v8 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *((char *)a3 + 23);
    v10 = a3;
    if (v9 < 0)
      v10 = *a3;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100115CE4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      if ((*((_BYTE *)a3 + 23) & 0x80) == 0)
        goto LABEL_8;
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v36 = *(_QWORD *)(a2 + 16);
      if ((v9 & 0x80) == 0)
      {
LABEL_8:
        *(_OWORD *)__p = *(_OWORD *)a3;
        v33 = a3[2];
LABEL_11:
        v34 = *((_DWORD *)a3 + 6);
        v11 = sub_1011FA5CC(a1, (uint64_t)__dst, (uint64_t *)__p);
        v12 = sub_100FFB214(a1);
        v13 = sub_1011FAEC0(a1);
        *(_DWORD *)buf = 136446978;
        v46 = v10;
        v47 = 1026;
        v48 = v11;
        v49 = 1026;
        v50 = v12;
        v51 = 1026;
        v52 = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] toggling stream, should send data %{public}d, interested, %{public}d, in workout %{public}d", buf, 0x1Eu);
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v36) < 0)
          operator delete(__dst[0]);
        goto LABEL_15;
      }
    }
    sub_100115CE4(__p, *a3, (unint64_t)a3[1]);
    goto LABEL_11;
  }
LABEL_15:
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v16 = a3;
    if (*((char *)a3 + 23) < 0)
      v16 = *a3;
    v17 = qword_10229FFB8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100115CE4(v30, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v30 = *(_OWORD *)a2;
      v31 = *(_QWORD *)(a2 + 16);
    }
    sub_1011FA2BC(v28, (__int128 *)a3);
    v18 = sub_1011FA5CC(a1, (uint64_t)v30, (uint64_t *)v28);
    v19 = sub_100FFB214(a1);
    v20 = sub_1011FAEC0(a1);
    v37 = 136446978;
    v38 = v16;
    v39 = 1026;
    v40 = v18;
    v41 = 1026;
    v42 = v19;
    v43 = 1026;
    v44 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "[subscription-%{public}s] toggling stream, should send data %{public}d, interested, %{public}d, in workout %{public}d", &v37, 30);
    v22 = v21;
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::toggleStreamAsAllowed(std::string, ConnectionInfo, id<CLBatchedSensorServiceProtocol>)", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  if (sub_100FFB214(a1))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100115CE4(v26, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)a2;
      v27 = *(_QWORD *)(a2 + 16);
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_100115CE4(v23, *a3, (unint64_t)a3[1]);
    }
    else
    {
      *(_OWORD *)v23 = *(_OWORD *)a3;
      v24 = a3[2];
    }
    v25 = *((_DWORD *)a3 + 6);
    v14 = sub_1011FA5CC(a1, (uint64_t)v26, (uint64_t *)v23);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v27) < 0)
    {
      operator delete(v26[0]);
      if ((v14 & 1) != 0)
        return objc_msgSend(a4, "registerForData:", *(_QWORD *)(a1 + 48));
    }
    else if (v14)
    {
      return objc_msgSend(a4, "registerForData:", *(_QWORD *)(a1 + 48));
    }
  }
  return objc_msgSend(a4, "unregisterForData:", *(_QWORD *)(a1 + 48));
}

void sub_1011FB3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011FB45C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  NSObject *v6;
  const char *v7;
  void **v8;
  uint64_t v9;
  NSNumber *v10;
  _DWORD v11[4];
  void *__p[2];
  char v13;

  sub_1015A2E04(__p, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
  v4 = sub_100FFB214(a1);
  v5 = v4;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v5 & 1) == 0)
      return;
  }
  else if ((v4 & 1) == 0)
  {
    return;
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v6 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[subscription] sending availability update %{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v11[0] = 67240192;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[subscription] sending availability update %{public}d", v11, 8);
    v8 = (void **)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::sendAvailabilityUpdate(BOOL)", "%s\n", v7);
    if (v8 != __p)
      free(v8);
  }
  v9 = CMBatchedSensorAvailable;
  v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2);
  __p[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1);
  sub_1011FB6B8(a1, __p);
}

void sub_1011FB694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011FB6B8(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021A8D80, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1011FB74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011FB760(uint64_t a1, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[6];
  __int128 v9;
  std::__shared_weak_count *v10;
  __int128 __p;
  uint64_t v12;
  int v13;

  v3 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1011FB874;
  v8[3] = &unk_1021A8C30;
  v9 = *(_OWORD *)(a1 + 48);
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  v10 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8[4] = a2;
  v8[5] = v7;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 88);
  }
  v13 = *(_DWORD *)(a1 + 96);
  objc_msgSend(v3, "async:", v8);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1011FB844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  _Unwind_Resume(exception_object);
}

void sub_1011FB874(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  _QWORD v8[2];
  void (*v9)(uint64_t);
  void *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 48);
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v9 = sub_1011FBB34;
  v10 = &unk_1021A8BF8;
  v13 = v2;
  v11 = *(_OWORD *)(a1 + 32);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 88);
  }
  v16 = *(_DWORD *)(a1 + 96);
  v12 = &v17;
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 && *(_QWORD *)(v3 + 8) != -1)
    v9((uint64_t)v8);
  if (!*((_BYTE *)v18 + 24))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v4 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning, subscription expired before we received a reply for workout state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "Warning, subscription expired before we received a reply for workout state", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleSensorRequest(std::string, ConnectionInfo)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = 0;
  }
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  _Block_object_dispose(&v17, 8);
}

void sub_1011FBAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a26 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1011FBB34(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  const __CFString *v24;
  _BOOL4 v25;
  const void **v26;
  uint64_t v27;
  int v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  unsigned __int8 *v37;
  void **p_dst;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void *v43;
  const __CFString *v44;
  _BOOL4 v45;
  char *v46;
  char *v47;
  void *v48[2];
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  void *v53[2];
  uint64_t v54;
  int v55;
  __int128 __dst;
  uint64_t v57;
  void *v58[2];
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _UNKNOWN **v63;
  _BYTE __p[22];
  __int16 v65;
  _BOOL4 v66;
  __int16 v67;
  _BOOL4 v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  const __CFString *v72;
  __int16 v73;
  _BOOL4 v74;
  _BYTE __s1[22];
  __int16 v76;
  _BOOL4 v77;
  __int16 v78;
  _BOOL4 v79;
  __int16 v80;
  _BYTE *v81;
  __int16 v82;
  const __CFString *v83;
  __int16 v84;
  _BOOL4 v85;

  v2 = *(_QWORD *)(a1 + 56);
  sub_1015A2E04(&v60, (char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "UTF8String"));
  v3 = *(void **)(a1 + 32);
  if (!v3)
  {
    v5 = 0;
    v4 = 0;
    goto LABEL_33;
  }
  v4 = objc_msgSend(v3, "sessionState") != (id)1
    && objc_msgSend(*(id *)(a1 + 32), "sessionState") != (id)3
    && objc_msgSend(*(id *)(a1 + 32), "sessionState") != (id)6;
  if (!objc_msgSend(*(id *)(a1 + 32), "applicationIdentifier"))
  {
    v5 = 0;
    goto LABEL_33;
  }
  sub_1011F9E20(v2, (uint64_t)__s1);
  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "applicationIdentifier"), "UTF8String"));
  v6 = HIBYTE(v76);
  if (v76 >= 0)
    v7 = HIBYTE(v76);
  else
    v7 = *(_QWORD *)&__s1[8];
  v8 = HIBYTE(v65);
  v9 = SHIBYTE(v65);
  if (v65 < 0)
    v8 = *(_QWORD *)&__p[8];
  if (v7 != v8)
  {
    v5 = 0;
    if ((SHIBYTE(v65) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_28;
  }
  if (v65 >= 0)
    v10 = __p;
  else
    v10 = *(unsigned __int8 **)__p;
  if (SHIBYTE(v76) < 0)
  {
    v5 = memcmp(*(const void **)__s1, v10, *(size_t *)&__s1[8]) == 0;
    goto LABEL_31;
  }
  if (HIBYTE(v76))
  {
    v11 = HIBYTE(v76) - 1;
    v12 = __s1;
    do
    {
      v14 = *v12++;
      v13 = v14;
      v16 = *v10++;
      v15 = v16;
      v18 = v11-- != 0;
      v5 = v13 == v15;
    }
    while (v13 == v15 && v18);
LABEL_31:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_28:
    operator delete(*(void **)__p);
    if ((v76 & 0x8000u) == 0)
      goto LABEL_33;
    goto LABEL_29;
  }
  v5 = 1;
  if (SHIBYTE(v65) < 0)
    goto LABEL_28;
LABEL_32:
  if (v6 < 0)
LABEL_29:
    operator delete(*(void **)__s1);
LABEL_33:
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
  v19 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v20 = (_QWORD *)*v20;
    v21 = *(_QWORD *)(a1 + 32);
    sub_1011F9E20(v2, (uint64_t)__p);
    if (v65 >= 0)
      v22 = __p;
    else
      v22 = *(_BYTE **)__p;
    v23 = *(void **)(a1 + 32);
    if (v23)
      v24 = (const __CFString *)objc_msgSend(v23, "applicationIdentifier");
    else
      v24 = &stru_1021D8FB8;
    v25 = sub_1011FAEC0(v2);
    *(_DWORD *)__s1 = 136447746;
    *(_QWORD *)&__s1[4] = v20;
    *(_WORD *)&__s1[12] = 2114;
    *(_QWORD *)&__s1[14] = v21;
    v76 = 1026;
    v77 = v4;
    v78 = 1026;
    v79 = v5;
    v80 = 2082;
    v81 = v22;
    v82 = 2114;
    v83 = v24;
    v84 = 1026;
    v85 = v25;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] received current snapshot from HK %{public}@, inSession, %{public}d, appIdMatches, %{public}d, clientId, %{public}s, workout appId, %{public}@, internal workout %{public}d", __s1, 0x3Cu);
    if (SHIBYTE(v65) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__s1, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_1021A8CC8);
    v39 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v39 = (_QWORD *)*v39;
    v40 = qword_10229FFB8;
    v41 = *(_QWORD *)(a1 + 32);
    sub_1011F9E20(v2, (uint64_t)v58);
    if (v59 >= 0)
      v42 = v58;
    else
      v42 = (void **)v58[0];
    v43 = *(void **)(a1 + 32);
    if (v43)
      v44 = (const __CFString *)objc_msgSend(v43, "applicationIdentifier");
    else
      v44 = &stru_1021D8FB8;
    v45 = sub_1011FAEC0(v2);
    *(_DWORD *)__p = 136447746;
    *(_QWORD *)&__p[4] = v39;
    *(_WORD *)&__p[12] = 2114;
    *(_QWORD *)&__p[14] = v41;
    v65 = 1026;
    v66 = v4;
    v67 = 1026;
    v68 = v5;
    v69 = 2082;
    v70 = v42;
    v71 = 2114;
    v72 = v44;
    v73 = 1026;
    v74 = v45;
    _os_log_send_and_compose_impl(2, 0, __s1, 1628, &_mh_execute_header, v40, 0, "[subscription-%{public}s] received current snapshot from HK %{public}@, inSession, %{public}d, appIdMatches, %{public}d, clientId, %{public}s, workout appId, %{public}@, internal workout %{public}d", __p, 60);
    v47 = v46;
    if (v59 < 0)
      operator delete(v58[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleSensorRequest(std::string, ConnectionInfo)_block_invoke", "%s\n", v47);
    if (v47 != __s1)
      free(v47);
  }
  if (sub_100FFB214(v2) && (!v4 || !v5) && !sub_1011FAEC0(v2))
  {
    v62 = CMErrorMessage;
    v63 = &off_10221D040;
    *(_QWORD *)__s1 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
    sub_1011FA310(v2, __s1);
  }
  v26 = (const void **)(a1 + 64);
  v27 = *(unsigned __int8 *)(a1 + 87);
  v28 = *(unsigned __int8 *)(a1 + 87);
  v29 = *(_QWORD *)(a1 + 72);
  if ((v27 & 0x80u) == 0)
    v30 = *(unsigned __int8 *)(a1 + 87);
  else
    v30 = *(_QWORD *)(a1 + 72);
  v31 = *((_QWORD *)&xmmword_10230D468 + 1);
  if (byte_10230D47F >= 0)
    v31 = byte_10230D47F;
  if (v30 != v31)
    goto LABEL_67;
  if (byte_10230D47F >= 0)
    v32 = &xmmword_10230D468;
  else
    v32 = (__int128 *)xmmword_10230D468;
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*v26, v32, *(_QWORD *)(a1 + 72)))
      goto LABEL_67;
LABEL_79:
    if (SHIBYTE(v61) < 0)
    {
      sub_100115CE4(&__dst, (void *)v60, *((unint64_t *)&v60 + 1));
      if ((*(_BYTE *)(a1 + 87) & 0x80) == 0)
        goto LABEL_81;
    }
    else
    {
      __dst = v60;
      v57 = v61;
      if ((v28 & 0x80) == 0)
      {
LABEL_81:
        *(_OWORD *)v53 = *(_OWORD *)v26;
        v54 = *(_QWORD *)(a1 + 80);
LABEL_88:
        v55 = *(_DWORD *)(a1 + 88);
        sub_1011FAFBC(v2, (uint64_t)&__dst, v53, *(void **)(v2 + 56));
        if (SHIBYTE(v54) < 0)
          operator delete(v53[0]);
        if ((SHIBYTE(v57) & 0x80000000) == 0)
          goto LABEL_99;
        p_dst = (void **)&__dst;
        goto LABEL_98;
      }
    }
    sub_100115CE4(v53, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
    goto LABEL_88;
  }
  if (!*(_BYTE *)(a1 + 87))
    goto LABEL_79;
  v33 = (unsigned __int8 *)(a1 + 64);
  v34 = *(unsigned __int8 *)(a1 + 87);
  while (*v33 == *(unsigned __int8 *)v32)
  {
    ++v33;
    v32 = (__int128 *)((char *)v32 + 1);
    if (!--v34)
      goto LABEL_79;
  }
LABEL_67:
  v35 = *((_QWORD *)&xmmword_10230D488 + 1);
  if (byte_10230D49F >= 0)
    v35 = byte_10230D49F;
  if (v30 != v35)
    goto LABEL_99;
  if (byte_10230D49F >= 0)
    v36 = &xmmword_10230D488;
  else
    v36 = (__int128 *)xmmword_10230D488;
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*v26, v36, v29))
      goto LABEL_99;
LABEL_83:
    if (SHIBYTE(v61) < 0)
    {
      sub_100115CE4(&v51, (void *)v60, *((unint64_t *)&v60 + 1));
      if ((*(_BYTE *)(a1 + 87) & 0x80) == 0)
        goto LABEL_85;
    }
    else
    {
      v51 = v60;
      v52 = v61;
      if ((v28 & 0x80) == 0)
      {
LABEL_85:
        *(_OWORD *)v48 = *(_OWORD *)v26;
        v49 = *(_QWORD *)(a1 + 80);
LABEL_94:
        v50 = *(_DWORD *)(a1 + 88);
        sub_1011FAFBC(v2, (uint64_t)&v51, v48, *(void **)(v2 + 64));
        if (SHIBYTE(v49) < 0)
          operator delete(v48[0]);
        if ((SHIBYTE(v52) & 0x80000000) == 0)
          goto LABEL_99;
        p_dst = (void **)&v51;
LABEL_98:
        operator delete(*p_dst);
        goto LABEL_99;
      }
    }
    sub_100115CE4(v48, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
    goto LABEL_94;
  }
  if (!v28)
    goto LABEL_83;
  v37 = (unsigned __int8 *)(a1 + 64);
  while (*v37 == *(unsigned __int8 *)v36)
  {
    ++v37;
    v36 = (__int128 *)((char *)v36 + 1);
    if (!--v27)
      goto LABEL_83;
  }
LABEL_99:

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  if (SHIBYTE(v61) < 0)
    operator delete((void *)v60);
}

void sub_1011FC288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011FC358(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v5;

  result = (_QWORD *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    result[2] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)result = v5;
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return result;
}

void sub_1011FC3AC(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

_BYTE *sub_1011FC3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *result;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)result = v8;
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return result;
}

void sub_1011FC434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_1011FC44C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1011FC48C(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

__n128 sub_1011FC4B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A8CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1011FC4F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A8CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1011FC518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101167BF8(a1 + 8, a2, a3);
}

uint64_t sub_1011FC520(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1011FC55C()
{
}

uint64_t sub_1011FC568(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_1011FC5E0(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1011FC5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1011FC5E0(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1011FC860(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_1011FC848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011FC860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1011FC8D4(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1011FC8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011FC8D4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1011FC92C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1011FC948@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_1011FC9A0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011FC98C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1011FC9A0(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213D5E0;
  CLConnectionMessage::CLConnectionMessage(a1 + 3, *a2);
  return a1;
}

void sub_1011FC9DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011FC9F0()
{
  sub_1015A2E04(&xmmword_10230D468, "Acc800Fp");
  dword_10230D480 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, &xmmword_10230D468, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_10230D488, "DmFp");
  dword_10230D4A0 = 200;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, &xmmword_10230D488, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230D4A8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D4A8, (void *)&_mh_execute_header);
}

void sub_1011FCD58()
{
  operator delete();
}

uint64_t sub_1011FCDD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1011FD384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1011FD4D8(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_1011FD504()
{
  sub_1015A2E04(qword_10230D4C0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D4C0, (void *)&_mh_execute_header);
}

float sub_1011FD548(uint64_t a1)
{
  unint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unint64_t i;
  float v16;
  float v17;
  int *v18;
  int v19;
  float v20;
  int v21;
  float v22;
  int v23;
  float v24;
  float v25;
  int v26;
  float v27;
  int v28;
  float v29;
  int v30;
  float v31;
  int v32;
  float v33;
  int v34;
  float v36;
  float v37;
  float v38;
  _BYTE v39[2200];
  _DWORD v40[128];
  _DWORD v41[128];
  unsigned __int16 v42[516];

  *(_QWORD *)v42 = 0x10000000000;
  sub_1014022D8(v39);
  v2 = 0;
  v36 = sub_101105AA4(a1);
  v37 = v3;
  v4 = 0.0;
  v38 = v5;
  do
  {
    v6 = sub_100533668((uint64_t)&v36, v2);
    v4 = v4 + (float)((float)(v6 * 0.25) * (float)(v6 * 0.25));
    ++v2;
  }
  while (v2 != 3);
  v7 = 0;
  v8 = sqrtf(v4) * 4.0;
  v9 = v36 / v8;
  v10 = v37 / v8;
  v11 = v38 / v8;
  do
  {
    v12 = sub_101105B08((unsigned __int16 *)a1, v7);
    *(float *)sub_1004784C4(v42, v7++) = (float)((float)(v11 * v13) + (float)(v14 * v10)) + (float)(v12 * v9);
  }
  while (v7 != 256);
  sub_1014022DC((uint64_t)v39, v41, v42);
  for (i = 0; i != 256; ++i)
  {
    v16 = *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 1076), i);
    v17 = *(float *)sub_1004784C4(v42, i);
    *(float *)sub_1004784C4(v42, i) = v16 - (float)(v17 * v10);
  }
  sub_1014022DC((uint64_t)v39, v40, v42);
  v19 = *(_DWORD *)(a1 + 8);
  v18 = (int *)(a1 + 8);
  v20 = sub_100D043B4(v19, 0x80uLL, 15.0);
  v21 = sub_100D041E0(v20);
  v22 = sub_100D043B4(*v18, 0x80uLL, 50.0);
  v23 = sub_100D041E0(v22);
  v24 = sub_100D04400(v21, v23, (uint64_t)v40);
  v25 = sub_100D043B4(*v18, 0x80uLL, 5.0);
  v26 = sub_100D041E0(v25);
  v27 = sub_100D043B4(*v18, 0x80uLL, 15.0);
  v28 = sub_100D041E0(v27);
  sub_100D04400(v26, v28, (uint64_t)v41);
  v29 = sub_100D043B4(*v18, 0x80uLL, 15.0);
  v30 = sub_100D041E0(v29);
  v31 = sub_100D043B4(*v18, 0x80uLL, 50.0);
  v32 = sub_100D041E0(v31);
  sub_100D04400(v30, v32, (uint64_t)v41);
  v33 = sub_100D043B4(*v18, 0x80uLL, 25.0);
  v34 = sub_100D041E0(v33);
  sub_100D04400(v34, v32, (uint64_t)v41);
  return v24;
}

void sub_1011FD80C(_QWORD *a1)
{
  *a1 = &off_1021A8DE0;
  a1[1] = 0;
  sub_100EEC6C0();
}

void sub_1011FD908(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011FD944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 64))(a4, a1, a2, a3);
}

uint64_t sub_1011FD964(uint64_t result, uint64_t a2, _DWORD *a3, double *a4)
{
  switch(*a3)
  {
    case 0:
      result = (**(uint64_t (***)(uint64_t, _QWORD))result)(result, *(unsigned __int8 *)a4);
      break;
    case 1:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      break;
    case 2:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      break;
    case 3:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      break;
    case 4:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
      break;
    case 5:
      result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 40))(result, *a4);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_1011FD9DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1021A8DE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1011FDA24(uint64_t a1)
{
  sub_100F96154(a1);
}

void sub_1011FDA6C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_100F961B8(v1);
  _Unwind_Resume(a1);
}

void sub_1011FDA88(_DWORD *a1)
{
  sub_100F961B8(a1);
  operator delete();
}

void sub_1011FDAB0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  bzero(&v8, 0x12uLL);
  v8 = *(_QWORD *)(a1 + 126);
  v9 = *(_DWORD *)(a1 + 134);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021A8EA8);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67110656;
    v25 = (__int16)v8;
    v26 = 1024;
    v27 = SWORD1(v8);
    v28 = 1024;
    v29 = SWORD2(v8);
    v30 = 1024;
    v31 = SHIWORD(v8);
    v32 = 1024;
    v33 = (__int16)v9;
    v34 = 1024;
    v35 = SHIWORD(v9);
    v36 = 1024;
    v37 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021A8EA8);
    v4 = *(_DWORD *)(a1 + 64);
    v12 = 1024;
    v13 = SWORD1(v8);
    v14 = 1024;
    v15 = SWORD2(v8);
    v16 = 1024;
    v17 = SHIWORD(v8);
    v18 = 1024;
    v19 = (__int16)v9;
    v20 = 1024;
    v21 = SHIWORD(v9);
    v22 = 1024;
    v23 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", &v11, 44, v7, v8, v9, v10, 67110656);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV11::chooseOffsetData()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100F96F10((float32x2_t *)a1, (__int16 *)&v8);
}

void sub_1011FDD20(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1011FDD4C()
{
  operator new();
}

void sub_1011FDDAC()
{
  operator delete();
}

uint64_t sub_1011FDDD0()
{
  if (qword_10230D4D8 != -1)
    dispatch_once(&qword_10230D4D8, &stru_1021A8EC8);
  return qword_102311D58;
}

_QWORD *sub_1011FDE14(_QWORD *a1)
{
  *a1 = off_1021A8EF8;
  sub_100261F44((uint64_t)(a1 + 4));
  return sub_1009BAD18(a1);
}

void sub_1011FDE44(_QWORD *a1)
{
  *a1 = off_1021A8EF8;
  sub_100261F44((uint64_t)(a1 + 4));
  sub_1009BAD18(a1);
  operator delete();
}

void sub_1011FDE88(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  _DWORD v17[4];
  uint8_t buf[1640];

  if (a2 < 3)
  {
    v10 = (uint64_t **)(a1 + 32);
    v9 = *(uint64_t **)(a1 + 32);
    if (v9)
      goto LABEL_18;
    v11 = (uint64_t *)sub_100A07FA0();
    v15 = 0x320000FF00;
    v16 = 0;
    sub_1018E4078(v11, (uint64_t)&v15, (uint64_t *)buf);
    sub_1002B7674((uint64_t)v10, (__int128 *)buf);
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v9 = *v10;
    if (*v10)
    {
LABEL_18:
      if (a3)
        sub_100A0A4BC(v9, (uint64_t)sub_1011FE0E0, a1);
      else
        sub_100A0A4BC(v9, 0, 0);
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021A8F40);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid request for data type %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021A8F40);
      v17[0] = 67240192;
      v17[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "Invalid request for data type %{public}d", v17, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLPencilDebug::numberOfSpectatorsChanged(int, size_t)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_1011FE0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  BOOL v7;
  NSObject *v8;
  uint8_t *v9;
  double v10;
  unint64_t v11;
  unsigned int v12;
  NSObject *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t *v19;
  NSObject *v20;
  double v21;
  uint8_t *v22;
  unsigned __int8 *v23;
  int v24;
  float v25;
  unsigned __int8 *v26;
  int v27;
  NSObject *v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  __int16 v34;
  unsigned __int8 *v35;
  __int128 v36;
  double v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  unsigned __int8 *v41;

  if (IOHIDEventGetType(a4) != 1)
    return;
  v30 = 0;
  v31 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v31, &v30);
  v6 = v31;
  if (v31)
    v7 = v30 > 0xF;
  else
    v7 = 0;
  if (v7)
  {
    v11 = v30 - 15;
    v30 -= 15;
    v31 += 15;
    v36 = 0uLL;
    v37 = 0.0;
    v37 = (double)*(unint64_t *)(v6 + 5) * 0.000001;
    v12 = *v6;
    if (v12 > 0x94)
    {
      if (v12 == 150)
      {
LABEL_28:
        if (v11 < 8 || v6[13] != 192)
        {
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021A8F40);
          v18 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68157954;
            v39 = v30;
            v40 = 2096;
            v41 = v31;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Unexpected RID_JAKKU_ALGS record %.*P", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_1021A8F40);
            v32 = 68157954;
            v33 = v30;
            v34 = 2096;
            v35 = v31;
            v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "Unexpected RID_JAKKU_ALGS record %.*P", &v32, 18);
            goto LABEL_39;
          }
          return;
        }
        *(_QWORD *)((char *)&v36 + 4) = *(_QWORD *)(v6 + 15);
        v16 = a1;
        v17 = 0;
LABEL_54:
        sub_10014C2F4(v16, v17, (uint64_t)&v36, 24);
        return;
      }
      if (v12 != 149)
        goto LABEL_42;
    }
    else if (v12 != 133)
    {
      if (v12 != 134)
      {
LABEL_42:
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021A8F40);
        v20 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68157954;
          v39 = v30;
          v40 = 2096;
          v41 = v31;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Unexpected RID_JAKKU_ALGS record %.*P", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021A8F40);
          v32 = 68157954;
          v33 = v30;
          v34 = 2096;
          v35 = v31;
          v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "Unexpected RID_JAKKU_ALGS record %.*P", &v32, 18);
          v19 = v22;
          sub_100512490("Generic", 1, 0, 2, "static void CLPencilDebug::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)", "%s\n", v21);
          goto LABEL_40;
        }
        return;
      }
      goto LABEL_28;
    }
    if (v11 > 0xB)
    {
      if (v6[13] == 128)
      {
        LOBYTE(v36) = 2;
        v27 = *(_DWORD *)(v6 + 23);
        v26 = v6 + 23;
        *(float32x2_t *)((char *)&v36 + 4) = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(v26 - 8)), (float32x2_t)vdup_n_s32(0x37800000u));
        v31 = v26;
        *((float *)&v36 + 3) = (float)v27 * 0.000015259;
        v16 = a1;
        v17 = 2;
        goto LABEL_54;
      }
      if (!v6[13])
      {
        LOBYTE(v36) = 1;
        v24 = *(__int16 *)(v6 + 19);
        v23 = v6 + 19;
        v25 = (float)*((__int16 *)v23 - 1) * 0.00012207;
        *((float *)&v36 + 1) = (float)*((__int16 *)v23 - 2) * 0.00012207;
        *((float *)&v36 + 2) = v25;
        v31 = v23;
        *((float *)&v36 + 3) = (float)v24 * 0.00012207;
        v16 = a1;
        v17 = 1;
        goto LABEL_54;
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021A8F40);
      v28 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        v29 = v6[13];
        *(_DWORD *)buf = 67240448;
        v39 = v29;
        v40 = 1026;
        LODWORD(v41) = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Unexpected RID_JAKKU_DATA record %{public}u, size %{public}d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 == -1)
      {
LABEL_27:
        v15 = v6[13];
        v32 = 67240448;
        v33 = v15;
        v34 = 1026;
        LODWORD(v35) = v30;
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "Unexpected RID_JAKKU_DATA record %{public}u, size %{public}d", &v32, 14);
LABEL_39:
        v19 = v9;
        sub_100512490("Generic", 1, 0, 0, "static void CLPencilDebug::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)", "%s\n", v10);
LABEL_40:
        if (v19 != buf)
          free(v19);
        return;
      }
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021A8F40);
      v13 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        v14 = v6[13];
        *(_DWORD *)buf = 67240448;
        v39 = v14;
        v40 = 1026;
        LODWORD(v41) = v30;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Unexpected RID_JAKKU_DATA record %{public}u, size %{public}d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 == -1)
        goto LABEL_27;
    }
    dispatch_once(&qword_10229FD80, &stru_1021A8F40);
    goto LABEL_27;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_1021A8F40);
  v8 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v39 = v30;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid %{public}dB payload, returning", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021A8F40);
    LODWORD(v36) = 67240192;
    DWORD1(v36) = v30;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "Invalid %{public}dB payload, returning", &v36, 8);
    goto LABEL_39;
  }
}

void sub_1011FE88C(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

const __CFDictionary *sub_1011FE8B8(void *a1)
{
  const __CFDictionary *result;

  result = IOServiceNameMatching((const char *)objc_msgSend(a1, "UTF8String"));
  if (result)
    return (const __CFDictionary *)IOServiceGetMatchingService(kIOMainPortDefault, result);
  return result;
}

BOOL sub_1011FE8EC(void *a1, io_registry_entry_t entry, CFStringRef key)
{
  const __CFNumber *CFProperty;
  const __CFNumber *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  CFStringRef v12;
  uint8_t buf[4];
  CFStringRef v14;

  CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(entry, key, kCFAllocatorDefault, 0);
  v6 = CFProperty;
  if (CFProperty)
  {
    CFNumberGetValue(CFProperty, kCFNumberIntType, a1);
    CFRelease(v6);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A8F60);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v14 = key;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#warning Key %{public}@ not found!", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8F60);
      v11 = 138543362;
      v12 = key;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#warning Key %{public}@ not found!", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL getIntFromIOService(int *, io_service_t, CFStringRef)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v6 != 0;
}

BOOL sub_1011FEAE0(void *a1, io_registry_entry_t entry, __CFString *key, __objc2_class *a4)
{
  __CFString *v5;
  void *CFProperty;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  __CFString *v21;
  uint8_t buf[4];
  _BYTE v23[14];
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;

  v5 = key;
  CFProperty = (void *)IORegistryEntryCreateCFProperty(entry, key, kCFAllocatorDefault, 0);
  v8 = CFProperty;
  if (CFProperty)
  {
    v9 = objc_msgSend(CFProperty, "length");
    if (v9 == (id)(int)a4)
    {
      memcpy(a1, objc_msgSend(v8, "bytes"), (size_t)v9);
      CFRelease(v8);
      return v8 != 0;
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A8F60);
    v12 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      a4 = (__objc2_class *)-[__CFString UTF8String](v5, "UTF8String");
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(_QWORD *)&v23[6] = "";
      v24 = 2082;
      v25 = a4;
      v26 = 2050;
      v27 = objc_msgSend(v8, "length");
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "[data length] == expected_length";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8F60);
    }
    v13 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      a4 = (__objc2_class *)-[__CFString UTF8String](v5, "UTF8String");
      v14 = objc_msgSend(v8, "length");
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(_QWORD *)&v23[6] = "";
      v24 = 2082;
      v25 = a4;
      v26 = 2050;
      v27 = v14;
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "[data length] == expected_length";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected length!", "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A8F60);
    }
    v15 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v5 = (__CFString *)-[__CFString UTF8String](v5, "UTF8String");
      v16 = objc_msgSend(v8, "length");
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(_QWORD *)&v23[6] = "";
      v24 = 2082;
      v25 = v5;
      v26 = 2050;
      v27 = v16;
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "[data length] == expected_length";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIORegistryUtils.mm", 58, "getBytesFromIOService");
    goto LABEL_20;
  }
  a4 = DefaultObserver;
  if (qword_10229FC70 != -1)
LABEL_20:
    dispatch_once(&qword_10229FC70, &stru_1021A8F60);
  v10 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (a4[79].vtable != (void *)-1)
      dispatch_once(&qword_10229FC70, &stru_1021A8F60);
    v20 = 138543362;
    v21 = v5;
    LODWORD(v19) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#warning Key %{public}@ not found!", &v20, v19);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL getBytesFromIOService(void *, io_service_t, CFStringRef, int)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return v8 != 0;
}

void sub_1011FEF70(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1011FEF9C(uint64_t a1)
{
  float *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  *(_QWORD *)a1 = off_1021A8F90;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 8) = _D0;
  *(_DWORD *)(a1 + 16) = 1065353216;
  v7 = (float *)(a1 + 16);
  v8 = sub_100127B9C();
  sub_100081C10(v8, &v13);
  sub_100526804(v13, "RowingModelMetsScale", v7);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1011FF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1011FF058(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 88));
  }
  return result;
}

uint64_t sub_1011FF0F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 88) + 48))(*(_QWORD *)(a2 + 88));
}

void sub_1011FF100(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  NSObject *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  NSObject *v32;
  float v33;
  const char *v34;
  uint8_t *v35;
  float v36;
  const char *v37;
  uint8_t *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  _BYTE v55[34];
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  uint8_t buf[4];
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  _BYTE v77[34];
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;

  v5 = *(_DWORD *)(a2 + 1352);
  v6 = *(float *)(a2 + 308);
  v7 = *(float *)(a2 + 316);
  v8 = *(float *)(a2 + 1264);
  HIDWORD(v42) = *(_DWORD *)(a2 + 1268);
  LODWORD(v43) = *(_DWORD *)(a2 + 1256);
  v9 = *(float *)(a2 + 1272);
  v10 = v7 > 30.0 && v6 == 0.0;
  v11 = v6 * 60.0;
  if (v10)
    v12 = 46.154;
  else
    v12 = v11;
  v13 = *(float *)(a2 + 312);
  HIDWORD(v43) = *(_DWORD *)(a2 + 1360);
  v14 = v12;
  v15 = (float)((float)((float)((float)(v13 * 0.50634) + (float)(v7 * 0.015543)) + (float)(v12 * -0.032764))
              + (float)((float)(*((float *)&v43 + 1) * 0.013972) * v12))
      + 3.1475;
  if (v5 == 1)
    v15 = v15 * a1[2];
  HIDWORD(v40) = *(_DWORD *)(a2 + 1364);
  v41 = *(double *)(a2 + 128);
  HIDWORD(v39) = *(_DWORD *)(a2 + 1260);
  v16 = cbrtf(*((float *)&v39 + 1));
  LODWORD(v40) = cbrtf(*(float *)&v43);
  *(float *)&v42 = v9;
  v17 = (float)((float)((float)((float)((float)(*(float *)&v40 * 1.1203) + (float)(v16 * 1.4812))
                              + (float)(v8 * -0.082668))
                      + (float)((float)(*((float *)&v43 + 1) * 0.039268) * v8))
              + (float)(v9 * 1.1784))
      + (float)((float)(*((float *)&v42 + 1) * 0.0) * v8);
  v18 = v17 + -0.71494;
  if ((float)(v17 + -0.71494) >= 0.0)
    v19 = v17 + -0.71494;
  else
    v19 = 0.0;
  if (v19 <= 15.0)
    v20 = v19;
  else
    v20 = 15.0;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A8FD0);
  v21 = v13;
  v22 = qword_10229FC98;
  v23 = v14;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134221312;
    v67 = v41;
    v68 = 2048;
    v69 = v7;
    v70 = 2048;
    v71 = v21;
    v72 = 2048;
    v73 = v14;
    v74 = 2048;
    v75 = *((float *)&v43 + 1);
    v76 = 1024;
    *(_DWORD *)v77 = v5;
    *(_WORD *)&v77[4] = 2048;
    *(double *)&v77[6] = v20;
    *(_WORD *)&v77[14] = 2048;
    *(double *)&v77[16] = *((float *)&v39 + 1);
    *(_WORD *)&v77[24] = 2048;
    *(double *)&v77[26] = *(float *)&v43;
    v78 = 2048;
    v79 = v8;
    v80 = 2048;
    v81 = *(float *)&v42;
    v82 = 2048;
    v83 = *((float *)&v42 + 1);
    v84 = 2048;
    v85 = v18;
    v86 = 2048;
    v87 = v15;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Rowing, Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f, strokePowerDM, %f, strokeAmpDM, %f, strokeRateDM, %f, strokeDriveVelocityDM, %f, strokeLengthDM, %f, speedDM, %f, speedLegacy, %f", buf, 0x8Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A8FD0);
    v44 = 134221312;
    v45 = v41;
    v46 = 2048;
    v47 = v7;
    v48 = 2048;
    v49 = v21;
    v50 = 2048;
    v51 = v14;
    v52 = 2048;
    v53 = *((float *)&v43 + 1);
    v54 = 1024;
    *(_DWORD *)v55 = v5;
    *(_WORD *)&v55[4] = 2048;
    *(double *)&v55[6] = v20;
    *(_WORD *)&v55[14] = 2048;
    *(double *)&v55[16] = *((float *)&v39 + 1);
    *(_WORD *)&v55[24] = 2048;
    *(double *)&v55[26] = *(float *)&v43;
    v56 = 2048;
    v57 = v8;
    v58 = 2048;
    v59 = *(float *)&v42;
    v60 = 2048;
    v61 = *((float *)&v42 + 1);
    v62 = 2048;
    v63 = v18;
    v64 = 2048;
    v65 = v15;
    LODWORD(v39) = 138;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Rowing, Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f, strokePowerDM, %f, strokeAmpDM, %f, strokeRateDM, %f, strokeDriveVelocityDM, %f, strokeLengthDM, %f, speedDM, %f, speedLegacy, %f", COERCE_DOUBLE(&v44), v39, v40, v41, v42, LODWORD(v43));
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieRowingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  v24 = (float)((float)((float)(v15 * (float)(v15 * (float)(v15 * 4.7217))) / *((float *)&v40 + 1))
              + (float)((float)(v15 * -0.0083121) * v21))
      + 1.8196;
  if (v5 == 1)
  {
    v25 = a1[3];
    v24 = v24 * v25;
    v26 = (float)((float)(147.22 / *((float *)&v40 + 1)) + 1.8196) * v25;
  }
  else
  {
    v26 = (float)(147.22 / *((float *)&v40 + 1)) + 1.8196;
  }
  v27 = powf(*((float *)&v40 + 1), 0.66667);
  v28 = (float)((float)((float)((float)(*(float *)&v40 * (float)(v20 * 40.751)) / v27)
                      + (float)((float)(v20 * (float)(v20 * (float)(v20 * 0.62095))) / v27))
              + (float)((float)(*(float *)&v40 * (float)(v20 * (float)(v20 * -5.3983))) / v27))
      + -1.268;
  if (v8 == 0.0 && *(float *)&v42 == 0.0)
  {
    if (v23 <= 0.0)
      v29 = 2.1;
    else
      v29 = v24;
  }
  else
  {
    if (v26 >= v28)
      v30 = v26;
    else
      v30 = (float)((float)((float)((float)(*(float *)&v40 * (float)(v20 * 40.751)) / v27)
                          + (float)((float)(v20 * (float)(v20 * (float)(v20 * 0.62095))) / v27))
                  + (float)((float)(*(float *)&v40 * (float)(v20 * (float)(v20 * -5.3983))) / v27))
          + -1.268;
    v31 = fmaxf(v28, 2.1);
    if (v23 <= 0.0)
      v29 = v31;
    else
      v29 = v30;
    if (v29 < 4.8423 && v29 < v24)
      v29 = v24;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A8FD0);
  v32 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v33 = a1[4];
    *(_DWORD *)buf = 134219776;
    v67 = v41;
    v68 = 2048;
    v69 = v20;
    v70 = 2048;
    v71 = v21;
    v72 = 2048;
    v73 = *((float *)&v40 + 1);
    v74 = 2048;
    v75 = v29;
    v76 = 2048;
    *(double *)v77 = v33;
    *(_WORD *)&v77[8] = 2048;
    *(double *)&v77[10] = v28;
    *(_WORD *)&v77[18] = 2048;
    *(double *)&v77[20] = v24;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Rowing, WR Model, timestamp, %f, stroke speed, %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f, METSDM, %f, METSLegacy, %f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A8FD0);
    v36 = a1[4];
    v44 = 134219776;
    v45 = v41;
    v46 = 2048;
    v47 = v20;
    v48 = 2048;
    v49 = v21;
    v50 = 2048;
    v51 = *((float *)&v40 + 1);
    v52 = 2048;
    v53 = v29;
    v54 = 2048;
    *(double *)v55 = v36;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v28;
    *(_WORD *)&v55[18] = 2048;
    *(double *)&v55[20] = v24;
    LODWORD(v39) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Rowing, WR Model, timestamp, %f, stroke speed, %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f, METSDM, %f, METSLegacy, %f", COERCE_DOUBLE(&v44), v39, v40, v41, v42, v43);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieRowingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  *(_DWORD *)a3 = 0;
  *(float *)(a3 + 4) = v29;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v29;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v29 * a1[4];
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0x800000003;
}

void sub_1011FF908(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1011FF934(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  NSObject *v47;
  _BYTE *v48;
  int v49;
  uint64_t v50;
  double v51;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t v56;
  double v57;
  char *v58;
  char *v59;
  uint64_t v60;
  double v61;
  void *v62;
  char v63;
  __int128 v64[3];
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _BYTE __p[12];
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  double v77;
  _BYTE buf[28];
  __int16 v79;
  double v80;

  v14 = (std::__shared_weak_count *)a4[1];
  v69 = *a4;
  v70 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a5[1];
  v67 = *a5;
  v68 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)a6[1];
  v65 = *a6;
  v66 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v64[0] = xmmword_10230D4E0;
  v64[1] = *(_OWORD *)algn_10230D4F0;
  v64[2] = xmmword_10230D500;
  sub_100D04860(a1, a2, 3, &v69, &v67, &v65, a10, a9, v64);
  v23 = v66;
  if (v66)
  {
    v24 = (unint64_t *)&v66->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v68;
  if (v68)
  {
    v27 = (unint64_t *)&v68->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v70;
  if (v70)
  {
    v30 = (unint64_t *)&v70->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *(_QWORD *)a1 = off_1021A9000;
  *(_QWORD *)(a1 + 352) = *a3;
  v32 = a3[1];
  *(_QWORD *)(a1 + 360) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *(_QWORD *)(a1 + 368) = *a7;
  v35 = a7[1];
  *(_QWORD *)(a1 + 376) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(a1 + 384) = *a8;
  v38 = a8[1];
  *(_QWORD *)(a1 + 392) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)(a1 + 408) = 0xC35000000E10;
  v41 = (void **)(a1 + 416);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0xFFFF;
  *(_QWORD *)(a1 + 476) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 484) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 500) = _Q1;
  *(_OWORD *)(a1 + 516) = _Q1;
  *(_OWORD *)(a1 + 532) = _Q1;
  *(_DWORD *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 552) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 580) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 588) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  sub_1002433B8(a1 + 624);
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  sub_1002433B8(a1 + 712);
  *(_QWORD *)(a1 + 752) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1136) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), a1 + 408) & 1) == 0)
    *(_DWORD *)(a1 + 408) = 3600;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352), a1 + 412) & 1) == 0)
    *(_DWORD *)(a1 + 412) = 50000;
  *(_QWORD *)(a1 + 400) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvesterWithSubArchiving:itemCountThresholdForAutoCleanUp:", 3, 300);
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 384) + 40))(buf);
  if (*(char *)(a1 + 439) < 0)
    operator delete(*v41);
  *(_OWORD *)v41 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 432) = *(_QWORD *)&buf[16];
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A90E0);
  v47 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_100D04BD0(a1);
    if ((v75 & 0x80000000) == 0)
      v48 = __p;
    else
      v48 = *(_BYTE **)__p;
    v49 = *(_DWORD *)(a1 + 412);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v51 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v48;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v49;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v50;
    v79 = 2048;
    v80 = v51;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "%s: max %d locations, loaded %zu locations (last uploaded %.3fs ago)", buf, 0x26u);
    if (SBYTE3(v75) < 0)
      operator delete(*(void **)__p);
    v41 = (void **)(a1 + 416);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A90E0);
    v61 = *(double *)&v41;
    v53 = qword_1022A0208;
    sub_100D04BD0(a1);
    if (v63 >= 0)
      v54 = &v62;
    else
      v54 = v62;
    v55 = *(_DWORD *)(a1 + 412);
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v57 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v54;
    v72 = 1024;
    v73 = v55;
    v74 = 2048;
    v75 = v56;
    v76 = 2048;
    v77 = v57;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 1, "%s: max %d locations, loaded %zu locations (last uploaded %.3fs ago)", __p, 38, v60, v61);
    v59 = v58;
    if (v63 < 0)
      operator delete(v62);
    sub_100512490("Generic", 1, 0, 2, "CLSubHarvesterTracks::CLSubHarvesterTracks(id<CLIntersiloUniverse>, std::shared_ptr<CLTracksHarvestInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Configuration>, std::shared_ptr<CLHarvestSystemInterface::StatusMonitor>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLHarvestMonitorInterface::Gps>, std::shared_ptr<CLHarvestPolicyInterface::Trip>, CLHNetworkController *, CLHRequestStore *)", "%s\n", v59);
    if (v59 != buf)
      free(v59);
  }
  return a1;
}

void sub_1011FFFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_100EF4E44(v39);
  sub_1002A1C94(v38);
  if (*(char *)(v37 + 439) < 0)
    operator delete(*a12);
  sub_100261F44(v37 + 384);
  sub_100261F44(v37 + 368);
  sub_100261F44(a13);
  sub_100429668(v37);
  _Unwind_Resume(a1);
}

uint64_t sub_101200074(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  return sub_1011FF934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_101200080(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  NSObject *v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v11;
  int v12;
  void **v13;
  void **v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  void **v23;
  char v24;
  int v25;
  void **v26;
  __int16 v27;
  _BYTE *v28;
  void *v29[2];
  char v30;

  sub_100119F3C(v20);
  v4 = *(_OWORD *)algn_10230D4F0;
  *(_OWORD *)(a1 + 280) = xmmword_10230D4E0;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)&algn_10230D4F0[9];
  if (sub_100006BB4(a2, "Location", v20))
    sub_1011E7A6C(a1 + 280, (uint64_t)v20);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A90E0);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_100D04BD0(a1);
    v6 = v30;
    v7 = (void **)v29[0];
    sub_1011E7898((double *)(a1 + 280), __p);
    v8 = v29;
    if (v6 < 0)
      v8 = v7;
    if (v19 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %s", buf, 0x16u);
    if (v19 < 0)
      operator delete(__p[0]);
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v29, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A90E0);
    v11 = qword_1022A0208;
    sub_100D04BD0(a1);
    v12 = v19;
    v13 = (void **)__p[0];
    sub_1011E7898((double *)(a1 + 280), buf);
    v14 = __p;
    if (v12 < 0)
      v14 = v13;
    if (v24 >= 0)
      v15 = buf;
    else
      v15 = *(_BYTE **)buf;
    v25 = 136315394;
    v26 = v14;
    v27 = 2080;
    v28 = v15;
    _os_log_send_and_compose_impl(2, 0, v29, 1628, &_mh_execute_header, v11, 1, "%s %s", (const char *)&v25, 22);
    v17 = v16;
    if (v24 < 0)
      operator delete(*(void **)buf);
    if (v19 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterTracks::applyHarvestRules(const CLNameValuePair &)", "%s\n", v17);
    if (v17 != (char *)v29)
      free(v17);
  }
  return sub_10011A5A8(v20);
}

void sub_10120036C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1012003C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 40))(*(_QWORD *)(a1 + 368));
}

id sub_1012003D0(uint64_t a1)
{
  NSArray *v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v8[6];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  _QWORD v14[3];

  v14[0] = objc_msgSend(*(id *)(a1 + 400), "homeArchive");
  v14[1] = objc_msgSend(*(id *)(a1 + 400), "workArchive");
  v14[2] = objc_msgSend(*(id *)(a1 + 400), "mainArchive");
  v2 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v14, 3);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_101200534;
        v8[3] = &unk_102142178;
        v8[4] = v7;
        v8[5] = a1;
        objc_msgSend(v7, "iterateSubArchivesWithHandler:", v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

id sub_101200534(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  CLHUploadRequest *v6;
  id result;

  v4 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(a2, "count"))
  {
    v5 = objc_msgSend(a2, "mappedDataByDestructivelyCombiningPrimaryAndSecondaryData");
    if (v5)
    {
      v6 = -[CLHUploadRequest initWithPayload:]([CLHUploadRequest alloc], "initWithPayload:", v5);
      -[CLHUploadRequest setEndpoint:](v6, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v4 + 80), "endpointSelector"), "batchEndpoint"));
      objc_msgSend(*(id *)(v4 + 80), "submitRequest:", v6);

      *(_BYTE *)(v4 + 440) = 1;
      sub_100785E0C((char *)(v4 + 1144), (double)(int)objc_msgSend(a2, "count"));
    }
  }
  result = objc_msgSend(a2, "count");
  if (!result)
    return _objc_msgSend(*(id *)(a1 + 32), "deleteSubArchiveIfInactive:", a2);
  return result;
}

uint64_t sub_101200600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 24))(v1, v2, 2);
  return 1;
}

uint64_t sub_10120063C(uint64_t a1)
{
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 464) = 0xFFFF;
  *(_QWORD *)(a1 + 476) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 484) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 500) = _Q1;
  *(_OWORD *)(a1 + 516) = _Q1;
  *(_OWORD *)(a1 + 532) = _Q1;
  *(_DWORD *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 552) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 580) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 588) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 616) = 0;

  *(_QWORD *)(a1 + 456) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v8, 2);
}

void sub_1012006E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __n128 v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  CLHarvestDataTracks *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CLHarvestDataTracks *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  void **v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v39;
  int v40;
  int v41;
  id v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  void *i;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  NSObject *v53;
  int v54;
  CLHarvestDataTracks *v55;
  uint64_t v56;
  int v57;
  NSMutableArray *obj;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[8];
  uint64_t v64;
  _OWORD v65[8];
  uint64_t v66;
  _OWORD v67[8];
  uint64_t v68;
  _OWORD v69[8];
  _OWORD v70[2];
  id v71;
  void *v72[2];
  char v73;
  _OWORD v74[8];
  _OWORD v75[2];
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _BYTE v84[416];
  void *v85[2];
  char v86;
  uint64_t v87;
  __int128 __src;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[52];
  _BYTE __p[28];
  __int16 v97;
  _BYTE v98[14];
  _BYTE v99[128];

  ++*(_DWORD *)(a1 + 204);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 56))(*(_QWORD *)(a1 + 384));
  sub_100EF7534((uint64_t)&v87, v6);
  sub_1015A2E04(v85, "com.apple.harvester.tracks");
  sub_100787308(a1 + 712, (char *)v85, (CLMotionActivity *)&v95[35]);
  v7 = sub_101201230(a1, a4);
  if (((*(uint64_t (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 384) + 24))(*(_QWORD *)(a1 + 384), a4, v7) & 1) != 0)
  {
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 384) + 40))(__p);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 120))(*(_QWORD *)(a1 + 384));
    sub_10078588C(a1 + 712, v85, (std::string *)__p, v8, a4, (CLMotionActivity *)&v95[35]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v9 = *(double *)(a4 + 76);
    v10 = *(double *)(a1 + 448);
    sub_100204BE4(a1 + 280);
    v12 = v11;
    v13 = (*(_DWORD *)(a1 + 412) & 0x80000000) != 0
       || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 412);
    if (v9 - v10 >= v12 + -0.1 && v13)
    {
      v14 = [CLHarvestDataTracks alloc];
      v76 = v87;
      if (SHIBYTE(v89) < 0)
      {
        sub_100115CE4(&v77, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        v77 = __src;
        v78 = v89;
      }
      v79 = v90;
      if (SHIBYTE(v92) < 0)
      {
        sub_100115CE4(&v80, (void *)v91, *((unint64_t *)&v91 + 1));
      }
      else
      {
        v80 = v91;
        v81 = v92;
      }
      if (SHIBYTE(v94) < 0)
      {
        sub_100115CE4(&v82, (void *)v93, *((unint64_t *)&v93 + 1));
      }
      else
      {
        v82 = v93;
        v83 = v94;
      }
      memcpy(v84, v95, sizeof(v84));
      v15 = *(_OWORD *)(a4 + 112);
      v74[6] = *(_OWORD *)(a4 + 96);
      v74[7] = v15;
      v75[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v75 + 12) = *(_OWORD *)(a4 + 140);
      v16 = *(_OWORD *)(a4 + 48);
      v74[2] = *(_OWORD *)(a4 + 32);
      v74[3] = v16;
      v17 = *(_OWORD *)(a4 + 80);
      v74[4] = *(_OWORD *)(a4 + 64);
      v74[5] = v17;
      v18 = *(_OWORD *)(a4 + 16);
      v74[0] = *(_OWORD *)a4;
      v74[1] = v18;
      v19 = -[CLHarvestDataTracks initWithTracksData:andLocation:](v14, "initWithTracksData:andLocation:", &v76, v74);
      if (SHIBYTE(v83) < 0)
        operator delete((void *)v82);
      if (SHIBYTE(v81) < 0)
        operator delete((void *)v80);
      if (SHIBYTE(v78) < 0)
        operator delete((void *)v77);
      -[CLHarvestDataTracks setModeIndicator:](v19, "setModeIndicator:", *(unsigned int *)(a4 + 1176));
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 120))(*(_QWORD *)(a1 + 368));
      if (v20)
      {
        v21 = objc_msgSend(objc_alloc((Class)CLPAccessoryMeta), "initWithAccessory:", v20);
        -[CLHarvestDataTracks setActiveAccessory:](v19, "setActiveAccessory:", v21);

      }
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A90E0);
      v22 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        sub_100D04BD0(a1);
        v23 = v73 >= 0 ? v72 : (void **)v72[0];
        *(_QWORD *)__p = 68289539;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2081;
        *(_QWORD *)&__p[20] = v23;
        v97 = 2113;
        *(_QWORD *)v98 = v19;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"identifier\":%{private, location:escape_only}s, \"harvestData\":%{private, location:escape_only}@}", __p, 0x26u);
        if (v73 < 0)
          operator delete(v72[0]);
      }
      v24 = objc_alloc((Class)CLPLocation);
      v25 = *(_OWORD *)(a4 + 112);
      v69[6] = *(_OWORD *)(a4 + 96);
      v69[7] = v25;
      v70[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)(a4 + 140);
      v26 = *(_OWORD *)(a4 + 48);
      v69[2] = *(_OWORD *)(a4 + 32);
      v69[3] = v26;
      v27 = *(_OWORD *)(a4 + 80);
      v69[4] = *(_OWORD *)(a4 + 64);
      v69[5] = v27;
      v28 = *(_OWORD *)(a4 + 16);
      v69[0] = *(_OWORD *)a4;
      v69[1] = v28;
      if (v19)
      {
        -[CLHarvestDataTracks rawMotionActivity](v19, "rawMotionActivity");
        -[CLHarvestDataTracks motionActivity](v19, "motionActivity");
        -[CLHarvestDataTracks dominantMotionActivity](v19, "dominantMotionActivity");
      }
      else
      {
        v68 = 0;
        memset(v67, 0, sizeof(v67));
        memset(v65, 0, sizeof(v65));
        v66 = 0;
        v64 = 0;
        memset(v63, 0, sizeof(v63));
      }
      v29 = objc_msgSend(v24, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v69, v67, v65, v63, -[CLHarvestDataTracks motionVehicleConnected](v19, "motionVehicleConnected"), -[CLHarvestDataTracks motionVehicleConnectedStateChanged](v19, "motionVehicleConnectedStateChanged"));
      v71 = v29;
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 384) + 40))(__p);
      v30 = (void **)(a1 + 416);
      if (__p[23] >= 0)
        v31 = __p[23];
      else
        v31 = *(_QWORD *)&__p[8];
      v32 = *(unsigned __int8 *)(a1 + 439);
      v33 = (char)v32;
      if ((v32 & 0x80u) != 0)
        v32 = *(_QWORD *)(a1 + 424);
      if (v31 == v32)
      {
        if (v33 >= 0)
          v34 = (unsigned __int8 *)(a1 + 416);
        else
          v34 = (unsigned __int8 *)*v30;
        if ((__p[23] & 0x80) != 0)
        {
          v39 = *(void **)__p;
          v40 = memcmp(*(const void **)__p, v34, *(size_t *)&__p[8]);
          operator delete(v39);
          if (!v40)
          {
LABEL_62:
            v41 = 0;
            goto LABEL_63;
          }
        }
        else
        {
          if (!__p[23])
            goto LABEL_62;
          v35 = 0;
          do
          {
            v36 = __p[v35];
            v37 = v34[v35];
          }
          while (v36 == v37 && __p[23] - 1 != v35++);
          if (v36 == v37)
            goto LABEL_62;
        }
      }
      else if ((__p[23] & 0x80) != 0)
      {
        operator delete(*(void **)__p);
      }
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 384) + 40))(__p);
      if (*(char *)(a1 + 439) < 0)
        operator delete(*v30);
      *(_OWORD *)v30 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 432) = *(_QWORD *)&__p[16];
      sub_1002A21DC(a1 + 664);
      objc_msgSend(objc_msgSend(*(id *)(a1 + 400), "homeArchive"), "generateNewSubArchive");
      objc_msgSend(objc_msgSend(*(id *)(a1 + 400), "workArchive"), "generateNewSubArchive");
      objc_msgSend(objc_msgSend(*(id *)(a1 + 400), "mainArchive"), "generateNewSubArchive");
      v41 = 1;
LABEL_63:
      obj = +[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", sub_1012598F8(-[CLHarvestDataTracks bundleIds](v19, "bundleIds")));
      v42 = objc_alloc_init((Class)NSMutableArray);
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v43 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v59, v99, 16);
      v54 = v41;
      v55 = v19;
      v56 = a4;
      if (v43)
      {
        v57 = 0;
        v44 = *(_QWORD *)v60;
        v45 = (_QWORD *)(a1 + 664);
        do
        {
          for (i = 0; i != v43; i = (char *)i + 1)
          {
            if (*(_QWORD *)v60 != v44)
              objc_enumerationMutation(obj);
            sub_1015A2E04(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i), "UTF8String"));
            if (!sub_1001986C8(v45, __p))
            {
              v47 = *(_QWORD *)(a1 + 688);
              v72[0] = __p;
              *((_DWORD *)sub_100EF7E20((uint64_t)v45, __p, (uint64_t)&unk_101B9EB60, (__int128 **)v72) + 10) = v47;
              v57 = 1;
            }
            v72[0] = __p;
            objc_msgSend(v42, "addObject:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *((unsigned int *)sub_100EF7E20((uint64_t)v45, __p, (uint64_t)&unk_101B9EB60, (__int128 **)v72) + 10)));
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          v43 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v59, v99, 16);
        }
        while (v43);
      }
      else
      {
        v57 = 0;
      }
      objc_msgSend(v29, "setAppBundleIdIndices:", v42);
      if (((v54 | v57) & 1) != 0 || *(_BYTE *)(a1 + 440))
      {
        *(_BYTE *)(a1 + 440) = 0;
        sub_1012014F0(a1, (uint64_t)&v87);
      }
      v48 = *(_DWORD *)(v56 + 96);
      if (v48 == 9)
      {
LABEL_82:
        objc_msgSend(v29, "setIsProactiveLocation:", -[CLHarvestDataTracks isProactiveLocationSession](v55, "isProactiveLocationSession"));
        v49 = 2;
LABEL_98:
        objc_msgSend(*(id *)(a1 + 400), "writeSecondaryObject:collectedAt:toField:", v29, v29, v49);
LABEL_99:

        *(_QWORD *)(a1 + 448) = *(_QWORD *)(v56 + 76);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 96))(*(_QWORD *)(a1 + 384));
        ++*(_DWORD *)(a1 + 208);
        sub_100D05194(a1);
        goto LABEL_100;
      }
      if (v48 != 3)
      {
        if (v48 != 1)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021A90E0);
          v52 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
          {
            *(_QWORD *)__p = 68289795;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2050;
            *(_QWORD *)&__p[20] = 3;
            v97 = 1040;
            *(_DWORD *)v98 = 8;
            *(_WORD *)&v98[4] = 2097;
            *(_QWORD *)&v98[6] = &v71;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", __p, 0x2Cu);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_1021A90E0);
          }
          v53 = qword_1022A0208;
          if (os_signpost_enabled((os_log_t)qword_1022A0208))
          {
            *(_QWORD *)__p = 68289795;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2050;
            *(_QWORD *)&__p[20] = 3;
            v97 = 1040;
            *(_DWORD *)v98 = 8;
            *(_WORD *)&v98[4] = 2097;
            *(_QWORD *)&v98[6] = &v71;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "throwing out non-gps, non-accessory location", "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", __p, 0x2Cu);
          }
          goto LABEL_99;
        }
        goto LABEL_82;
      }
      objc_msgSend(v29, "setIsProactiveLocation:", 0);
      v50 = *(_DWORD *)(v56 + 1176);
      switch(v50)
      {
        case 'A':
          v51 = 2;
          break;
        case 'E':
          v51 = 4;
          break;
        case 'D':
          v51 = 3;
          break;
        default:
LABEL_97:
          v49 = 10;
          goto LABEL_98;
      }
      objc_msgSend(v29, "setModeIndicator:", v51);
      goto LABEL_97;
    }
  }
LABEL_100:
  if (v86 < 0)
    operator delete(v85[0]);
  if (SHIBYTE(v94) < 0)
    operator delete((void *)v93);
  if (SHIBYTE(v92) < 0)
    operator delete((void *)v91);
  if (SHIBYTE(v89) < 0)
    operator delete((void *)__src);
}

void sub_10120115C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  sub_100EF7338((uint64_t)&STACK[0x5A8]);
  _Unwind_Resume(a1);
}

__n128 sub_101201230(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  __n128 result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  double v50;

  v4 = (double *)(a1 + 468);
  v5 = a1 + 464;
  if (*(double *)(a1 + 484) < 0.0 || (sub_10011E258((double *)(a1 + 624), v5, a2), result.n128_f64[0] > 80000.0))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A90E0);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a2 + 4);
      v9 = *(_QWORD *)(a2 + 12);
      v10 = *v4;
      v11 = *((_QWORD *)v4 + 1);
      v12 = *(double *)(a2 + 76) - v4[9];
      *(_DWORD *)buf = 134219264;
      v40 = 0x40F3880000000000;
      v41 = 2048;
      v42 = v8;
      v43 = 2048;
      v44 = v9;
      v45 = 2048;
      v46 = v10;
      v47 = 2048;
      v48 = v11;
      v49 = 2048;
      v50 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "moved over %.2fm to <%+.8f,%+.8f> from <%+.8f,%+.8f> %.3fs ago - checking harvest rules", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A90E0);
      v19 = *(_QWORD *)(a2 + 4);
      v20 = *(_QWORD *)(a2 + 12);
      v21 = *v4;
      v22 = *((_QWORD *)v4 + 1);
      v23 = *(double *)(a2 + 76) - v4[9];
      v27 = 134219264;
      v28 = 0x40F3880000000000;
      v29 = 2048;
      v30 = v19;
      v31 = 2048;
      v32 = v20;
      v33 = 2048;
      v34 = v21;
      v35 = 2048;
      v36 = v22;
      v37 = 2048;
      v38 = v23;
      LODWORD(v26) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "moved over %.2fm to <%+.8f,%+.8f> from <%+.8f,%+.8f> %.3fs ago - checking harvest rules", COERCE_DOUBLE(&v27), v26);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterTracks::updatePolicyLocationFromGps(const CLDaemonLocation &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v13;
    v14 = *(_OWORD *)(a2 + 32);
    v15 = *(_OWORD *)(a2 + 48);
    v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v5 + 80) = v16;
    *(_OWORD *)(v5 + 32) = v14;
    *(_OWORD *)(v5 + 48) = v15;
    result = *(__n128 *)(a2 + 96);
    v17 = *(_OWORD *)(a2 + 112);
    v18 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v5 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(v5 + 112) = v17;
    *(_OWORD *)(v5 + 128) = v18;
    *(__n128 *)(v5 + 96) = result;
  }
  return result;
}

void sub_1012014F0(uint64_t a1, uint64_t a2)
{
  id v4;
  void **v5;
  _QWORD *v6;
  NSMutableArray *v7;
  int v8;
  uint64_t *i;
  _QWORD *v10;
  void *__p[2];
  char v12;

  v4 = objc_alloc_init((Class)CLPLocationCollectionRequest);
  objc_msgSend(v4, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 384) + 40))(__p);
  if (v12 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  objc_msgSend(v4, "setTripId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(v4, "setMcc:", *(unsigned int *)(a2 + 36));
  objc_msgSend(v4, "setMnc:", *(unsigned int *)(a2 + 40));
  objc_msgSend(v4, "setRat:", *(unsigned int *)(a2 + 32));
  v6 = (_QWORD *)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    if (!*(_QWORD *)(a2 + 56))
      goto LABEL_12;
    v6 = (_QWORD *)*v6;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a2 + 71))
LABEL_11:
    objc_msgSend(v4, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
LABEL_12:
  if (*(_QWORD *)(a1 + 688))
  {
    v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:");
    if (*(int *)(a1 + 688) >= 1)
    {
      v8 = 0;
      do
      {
        -[NSMutableArray addObject:](v7, "addObject:", &stru_1021D8FB8);
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 688));
    }
    for (i = *(uint64_t **)(a1 + 680); i; i = (uint64_t *)*i)
    {
      v10 = i + 2;
      if (*((char *)i + 39) < 0)
        v10 = (_QWORD *)*v10;
      -[NSMutableArray setObject:atIndexedSubscript:](v7, "setObject:atIndexedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10), *((int *)i + 10));
    }
    objc_msgSend(v4, "setAppBundleIds:", v7);
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 400), "homeArchive"), "overwritePrimaryObject:", v4);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 400), "workArchive"), "overwritePrimaryObject:", v4);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 400), "mainArchive"), "overwritePrimaryObject:", v4);

}

