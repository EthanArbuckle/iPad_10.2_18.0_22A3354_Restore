id sub_1012A0F24(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1012A0F7C;
  v5[3] = &unk_1021ABF38;
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[4] = a2;
  v5[5] = v3;
  return objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v5);
}

id sub_1012A0F7C(uint64_t a1, void *a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(objc_msgSend(a2, "advertisementData"), "isEqualToData:", *(_QWORD *)(a1 + 32));
  if (a3)
  {
    if ((_DWORD)result)
      return (id)(*(uint64_t (**)(uint64_t, void *, _QWORD, _QWORD, _QWORD))(a3 + 16))(a3, a2, 0, 0, *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1012A1110(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

BOOL sub_1012A113C()
{
  return os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT);
}

BOOL sub_1012A1150()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 56), OS_LOG_TYPE_INFO);
}

BOOL sub_1012A1160()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 56));
}

id sub_1012A1174(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onWakeGesture:", a1);
}

void sub_1012A11C0(id a1)
{
  sub_100197040();
  if (sub_100195F08())
    byte_10230DA98 = 1;
}

void sub_1012A12B8()
{
  operator delete();
}

void sub_1012A160C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  nullsub_34(va);
  _Unwind_Resume(a1);
}

void sub_1012A1684(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1012A16B0(double *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[10];
  char v32;
  uint64_t v33;
  _BYTE buf[12];
  char v35;
  int v36;
  _BYTE *v37;
  void *__p[2];
  char v39;

  sub_100263E50((uint64_t)v29);
  v2 = v30;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) |= 4u;
  *(_QWORD *)((char *)&v31[1] + *(_QWORD *)(v2 - 24)) = 3;
  v3 = sub_100263F7C(&v30, (uint64_t)"time,", 5);
  v4 = (_QWORD *)std::ostream::operator<<(v3, a1[4]);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 16) = 0;
  v5 = sub_100263F7C(v4, (uint64_t)",type,", 6);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(unsigned int *)a1);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 16) = 0;
  v7 = sub_100263F7C(v6, (uint64_t)",stepType,", 10);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *((unsigned int *)a1 + 1));
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 16) = 0;
  v9 = sub_100263F7C(v8, (uint64_t)",count,", 7);
  std::ostream::operator<<(v9, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 3));
  v10 = *((_QWORD *)a1 + 1);
  for (i = *((_QWORD *)a1 + 2); v10 != i; v10 += 40)
  {
    *(_QWORD *)((char *)&v31[1] + *(_QWORD *)(v30 - 24)) = 0;
    v12 = sub_100263F7C(&v30, (uint64_t)",id,", 4);
    v13 = (_QWORD *)std::ostream::operator<<(v12, *(_QWORD *)v10);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 16) = 7;
    v14 = sub_100263F7C(v13, (uint64_t)",startLL,", 9);
    v15 = (_QWORD *)std::ostream::operator<<(v14, *(double *)(v10 + 8));
    v16 = sub_100263F7C(v15, (uint64_t)",", 1);
    v17 = (_QWORD *)std::ostream::operator<<(v16, *(double *)(v10 + 16));
    *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 16) = 7;
    v18 = sub_100263F7C(v17, (uint64_t)",endLL,", 7);
    v19 = (_QWORD *)std::ostream::operator<<(v18, *(double *)(v10 + 24));
    v20 = sub_100263F7C(v19, (uint64_t)",", 1);
    std::ostream::operator<<(v20, *(double *)(v10 + 32));
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABFE0);
  v21 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(__p, v31);
    v22 = v39 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,RouteHints,%s", buf, 0xCu);
    if (v39 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABFE0);
    v25 = qword_1022A00D8;
    std::stringbuf::str(buf, v31);
    if (v35 >= 0)
      v26 = buf;
    else
      v26 = *(_BYTE **)buf;
    v36 = 136315138;
    v37 = v26;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 2, "CLMM,RouteHints,%s", (const char *)&v36);
    v28 = v27;
    if (v35 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLMapsRouteHintData::debugOutput() const", "%s\n", v28);
    if (v28 != (char *)__p)
      free(v28);
  }
  *(_QWORD *)((char *)v29
  v30 = v23;
  if (v32 < 0)
    operator delete((void *)v31[8]);
  std::streambuf::~streambuf(v31);
  return std::ios::~ios(&v33);
}

void sub_1012A1AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1012A1B34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  v2 = 0;
  v3 = -1;
  while (1)
  {
    v4 = a1[1];
    v5 = -1 - 858993459 * ((unint64_t)(a1[2] - v4) >> 3);
    if (++v3 >= v5)
      break;
    v6 = (double *)(v4 + v2);
    v7 = sub_100512A74(*(double *)(v4 + v2 + 24), *(double *)(v4 + v2 + 32), *(double *)(v4 + v2 + 48), *(double *)(v4 + v2 + 56), 0.0000001)|| sub_100512A74(v6[3], v6[4], v6[8], v6[9], 0.0000001);
    v8 = sub_100512A74(v6[1], v6[2], v6[6], v6[7], 0.0000001)
      || sub_100512A74(v6[1], v6[2], *(double *)(v4 + v2 + 64), *(double *)(v4 + v2 + 72), 0.0000001);
    v2 += 40;
    if (!v7 && !v8)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABFE0);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v10 = a1[4];
        *(_DWORD *)buf = 134217984;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABFE0);
        v12 = a1[4];
        v15 = 134217984;
        v16 = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%.3lf,RouteHints received without proper connections", COERCE_DOUBLE(&v15));
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::isConnectivityGood() const", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      return v3 >= v5;
    }
  }
  return v3 >= v5;
}

uint64_t sub_1012A1DB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  _BOOL4 v30;
  uint64_t v31;
  double *v32;
  double v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  BOOL v51;
  uint64_t v52;
  NSObject *v54;
  uint64_t v55;
  unint64_t v56;
  _BOOL4 v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  uint8_t *v62;
  uint64_t v63;
  int v64[2];
  void *__p;
  char *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  uint8_t buf[4];
  uint64_t v75;
  __int16 v76;
  unint64_t v77;
  __int16 v78;
  unint64_t v79;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v2 = a1[1];
  v1 = a1[2];
  if ((int)(-858993459 * ((unint64_t)(v1 - v2) >> 3)) < 2)
  {
    v50 = 0;
LABEL_45:
    v51 = v2 == v1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    *(_QWORD *)v64 = a1 + 1;
    while (1)
    {
      v6 = (__int128 *)(v2 + 40 * v5);
      if (__p == v4)
      {
        if ((unint64_t)v4 >= v67)
        {
          v10 = 0x999999999999999ALL * ((uint64_t)(v67 - (_QWORD)v4) >> 3);
          if (v10 <= 1)
            v10 = 1;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (_QWORD)v4) >> 3) >= 0x333333333333333)
            v11 = 0x666666666666666;
          else
            v11 = v10;
          v13 = sub_100357184((uint64_t)&v67, v11);
          v14 = (char *)__p;
          v15 = v66;
          v16 = *v6;
          v17 = v6[1];
          v13[4] = *((_QWORD *)v6 + 4);
          *(_OWORD *)v13 = v16;
          *((_OWORD *)v13 + 1) = v17;
          if (v15 == v14)
          {
            v21 = v13;
          }
          else
          {
            v18 = v13;
            do
            {
              v19 = *(_OWORD *)(v15 - 40);
              v20 = *(_OWORD *)(v15 - 24);
              v21 = v18 - 5;
              *(v18 - 1) = *((_QWORD *)v15 - 1);
              *(_OWORD *)(v18 - 3) = v20;
              *(_OWORD *)(v18 - 5) = v19;
              v15 -= 40;
              v18 -= 5;
            }
            while (v15 != v14);
          }
          v9 = (char *)(v13 + 5);
          __p = v21;
          v66 = (char *)(v13 + 5);
          v67 = (unint64_t)&v13[5 * v12];
          if (v14)
            operator delete(v14);
        }
        else
        {
          v7 = *v6;
          v8 = v6[1];
          v4[4] = *((_QWORD *)v6 + 4);
          *(_OWORD *)v4 = v7;
          *((_OWORD *)v4 + 1) = v8;
          v9 = (char *)(v4 + 5);
        }
        v66 = v9;
      }
      v22 = v5 + 1;
      v23 = v2 + 40 * v5;
      v25 = *(double *)(v23 + 24);
      v24 = (double *)(v23 + 24);
      v26 = v25;
      v27 = v2 + 40 * (v5 + 1);
      v29 = *(double *)(v27 + 8);
      v28 = (double *)(v27 + 8);
      v30 = sub_100512A74(v26, v24[1], v29, v28[1], 0.0000001)
         || sub_100512A74(*v24, v24[1], *(double *)(v2 + 40 * v22 + 24), *(double *)(v2 + 40 * v22 + 32), 0.0000001);
      v31 = v2 + 40 * v5;
      v33 = *(double *)(v31 + 8);
      v32 = (double *)(v31 + 8);
      if (!sub_100512A74(v33, v32[1], *v28, v28[1], 0.0000001)
        && ((v30 | sub_100512A74(*v32, v32[1], *(double *)(v2 + 40 * v22 + 24), *(double *)(v2 + 40 * v22 + 32), 0.0000001)) & 1) == 0)
      {
        break;
      }
      v34 = (__int128 *)((char *)v6 + 40);
      v35 = v66;
      if ((unint64_t)v66 >= v67)
      {
        v38 = __p;
        v39 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - (_BYTE *)__p) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0x666666666666666)
          sub_100259694();
        if (0x999999999999999ALL * ((uint64_t)(v67 - (_QWORD)__p) >> 3) > v40)
          v40 = 0x999999999999999ALL * ((uint64_t)(v67 - (_QWORD)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (_QWORD)__p) >> 3) >= 0x333333333333333)
          v41 = 0x666666666666666;
        else
          v41 = v40;
        if (v41)
        {
          v42 = (char *)sub_100357184((uint64_t)&v67, v41);
          v38 = __p;
          v35 = v66;
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[8 * ((v66 - (_BYTE *)__p) >> 3)];
        v44 = *v34;
        v45 = *(__int128 *)((char *)v6 + 56);
        *((_QWORD *)v43 + 4) = *((_QWORD *)v6 + 9);
        *(_OWORD *)v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        if (v35 == v38)
        {
          v49 = &v42[40 * v39];
        }
        else
        {
          v46 = &v42[40 * v39];
          do
          {
            v47 = *(_OWORD *)((char *)v35 - 40);
            v48 = *(_OWORD *)((char *)v35 - 24);
            v49 = v46 - 40;
            *((_QWORD *)v46 - 1) = *((_QWORD *)v35 - 1);
            *(_OWORD *)(v46 - 24) = v48;
            *(_OWORD *)(v46 - 40) = v47;
            v35 = (_OWORD *)((char *)v35 - 40);
            v46 -= 40;
          }
          while (v35 != v38);
        }
        v4 = v43 + 40;
        __p = v49;
        v66 = v43 + 40;
        v67 = (unint64_t)&v42[40 * v41];
        if (v38)
          operator delete(v38);
      }
      else
      {
        v36 = *v34;
        v37 = *(__int128 *)((char *)v6 + 56);
        *((_QWORD *)v66 + 4) = *((_QWORD *)v6 + 9);
        *v35 = v36;
        v35[1] = v37;
        v4 = (_QWORD *)v35 + 5;
      }
      v66 = (char *)v4;
      v2 = a1[1];
      v1 = a1[2];
      v5 = v22;
      if (v22 >= (int)(-1 - 858993459 * ((unint64_t)(v1 - v2) >> 3)))
      {
        v50 = (char *)__p;
        goto LABEL_45;
      }
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABFE0);
    v54 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v55 = a1[4];
      v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      *(_DWORD *)buf = 134218496;
      v75 = v55;
      v76 = 2048;
      v77 = v56;
      v78 = 2048;
      v79 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - (_BYTE *)__p) >> 3);
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections,changing segments from %lu,to,%lu", buf, 0x20u);
    }
    v57 = sub_1001BFF7C(115, 2);
    v58 = *(char **)v64;
    if (v57)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABFE0);
      v59 = a1[4];
      v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      v68 = 134218496;
      v69 = v59;
      v70 = 2048;
      v71 = v60;
      v72 = 2048;
      v73 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - (_BYTE *)__p) >> 3);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%.3lf,RouteHints received without proper connections,changing segments from %lu,to,%lu", COERCE_DOUBLE(&v68), 32, v63);
      v62 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::getConnectedRouteSegments() const", "%s\n", v61);
      if (v62 != buf)
        free(v62);
      v58 = *(char **)v64;
    }
    if (v58 != (char *)&__p)
      sub_1008AFA64(v58, (char *)__p, (uint64_t)v66, 0xCCCCCCCCCCCCCCCDLL * ((v66 - (_BYTE *)__p) >> 3));
    v50 = (char *)__p;
    v51 = v66 == __p;
  }
  v52 = !v51;
  if (v50)
  {
    v66 = v50;
    operator delete(v50);
  }
  return v52;
}

void sub_1012A2364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012A2390(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

double sub_1012A23BC(uint64_t a1, double a2)
{
  double result;

  *(double *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  return result;
}

void sub_1012A23D8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 32);
  if (*(double *)a1 > 0.0)
  {
    sub_1012A26EC(a1, a3);
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    if (v9 != v10)
    {
      v11 = 0;
      while (1)
      {
        if (vabdd_f64(a3, *(double *)(v9 + 56)) <= *(double *)a1)
        {
          *(_QWORD *)buf = *(_QWORD *)v9;
          v12 = (double *)sub_1000AF064(v7, buf);
          if (!v12)
            goto LABEL_8;
          if (*(double *)(v9 + 56) >= v12[10])
            break;
        }
LABEL_9:
        v9 += 88;
        if (v9 == v10)
          goto LABEL_16;
      }
      sub_1012A2BBC(v7, (uint64_t *)v12);
LABEL_8:
      *(_QWORD *)buf = *(_QWORD *)v9;
      sub_1000AFA6C((uint64_t)v7, buf, buf, v9);
      ++v11;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  sub_100212C5C(a1 + 8);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(uint64_t **)(a2 + 16);
  if ((uint64_t *)v13 == v14)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v11 = 0;
  v15 = (uint64_t *)v13;
  do
  {
    v16 = *v15;
    v15 += 11;
    *(_QWORD *)buf = v16;
    sub_1000AFA6C((uint64_t)v7, buf, buf, v13);
    ++v11;
    v13 = (uint64_t)v15;
  }
  while (v15 != v14);
LABEL_16:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021AC000);
  v17 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v8;
    v31 = 2050;
    v32 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 3);
    v33 = 2050;
    v34 = v11;
    v35 = 2050;
    v36 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Adding scanned,pre,%{public}zu,input,%{public}zu,updated,%{public}zu,result,%{public}zu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021AC000);
    v19 = *(_QWORD *)(a1 + 32);
    v22 = 134349824;
    v23 = v8;
    v24 = 2050;
    v25 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 3);
    v26 = 2050;
    v27 = v11;
    v28 = 2050;
    v29 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Adding scanned,pre,%{public}zu,input,%{public}zu,updated,%{public}zu,result,%{public}zu", &v22, 42);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiScanAggregator::addScanResult(const CFAbsoluteTime, const CLWifiService_Type::ScanResult &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_1012A26EC(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t i;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32); v3; v3 = *(_QWORD *)v3)
  {
    while (vabdd_f64(a2, *(double *)(v3 + 80)) > *(double *)a1)
    {
      v3 = sub_1012A2BBC((_QWORD *)(a1 + 8), (uint64_t *)v3);
      if (!v3)
        goto LABEL_6;
    }
  }
LABEL_6:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021AC000);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134349312;
    v16 = i;
    v17 = 2050;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Scrubbing done,pre,%{public}zu,post,%{public}zu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021AC000);
    v8 = *(_QWORD *)(a1 + 32);
    v11 = 134349312;
    v12 = i;
    v13 = 2050;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Scrubbing done,pre,%{public}zu,post,%{public}zu", &v11, 22);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiScanAggregator::pruneAggregatedResults(const CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_1012A28FC(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double *v8;
  unint64_t v9;
  double v10;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  if (*(double *)a1 > 0.0)
    sub_1012A26EC(a1, a3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = *(double **)(a1 + 24);
  if (v8)
  {
    v9 = 0;
    do
    {
      v10 = vabdd_f64(a3, v8[10]);
      if (a4 <= 0.0 || v10 <= a4)
      {
        v12 = (uint64_t)(v8 + 3);
        if (v9 >= a2[2])
        {
          v9 = sub_100279DEC(a2, v12);
        }
        else
        {
          sub_100279D64((uint64_t)a2, v12);
          v9 += 88;
        }
        a2[1] = v9;
      }
      v8 = *(double **)v8;
    }
    while (v8);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021AC000);
  v13 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v14 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134349056;
    v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Returning %{public}zu APs", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021AC000);
    v15 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    v18 = 134349056;
    v19 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Returning %{public}zu APs", &v18, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiService_Type::AccessPoint> CLWifiScanAggregator::getScannedAccessPoints(const CFAbsoluteTime, const CFTimeInterval)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_1012A2B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1012A2B90(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_1012A2BBC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_1000592D8(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_100279070((uint64_t)&v6, v3);
  return v2;
}

void sub_1012A2CA8(id a1)
{
  qword_10230DEE0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLGpsAssistantSilo"));
}

uint64_t sub_1012A2D5C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012A3AB4;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DEF0 != -1)
    dispatch_once(&qword_10230DEF0, block);
  return qword_102313B90;
}

void sub_1012A2EF4(unsigned __int8 *a1, double *a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  int v5;
  int v9;
  NSObject *v10;
  int v11;
  double v12;
  int v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _DWORD v22[2];
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[1640];

  v3 = *(_DWORD *)(a3 + 44);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v5 < 0 == v4)
  {
    v20 = 0.0;
    v21 = 0.0;
    v19 = *(double *)(a3 + 24) + *(double *)(a3 + 8 * v5 + 48);
    v9 = a1[352];
    a1[352] = sub_101449180((uint64_t)(a1 + 112), a2, &v19, &v21, &v20);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AC1C8);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v11 = a1[352];
      v12 = *a2;
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v20;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v21;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v12;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&buf[40] = v19;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "STARK,SpeedTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AC1C8);
      v13 = a1[352];
      v14 = *a2;
      v22[0] = 67110144;
      v22[1] = v13;
      v23 = 2048;
      v24 = v20;
      v25 = 2048;
      v26 = v21;
      v27 = 2048;
      v28 = v14;
      v29 = 2048;
      v30 = v19;
      LODWORD(v17) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "STARK,SpeedTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf", v22, v17, v18, v19, v20);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsAssistant::setVehicleSpeedAssistance(const double &, const CLNmeaSCD &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (a1[352])
    {
      if (v20 < 0.08)
      {
        *(_DWORD *)buf = 2;
        if (sub_1001B7864((uint64_t)a1, (int *)buf, 1))
        {
          memcpy(buf, (const void *)a3, 0x350uLL);
          if (v9 != a1[352])
            *(_DWORD *)&buf[40] = 1;
          *(double *)&buf[24] = v21 + *(double *)&buf[24];
          v22[0] = 2;
          (*(void (**)(unsigned __int8 *, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v22, buf, 1, 0xFFFFFFFFLL, 0);
        }
      }
    }
  }
}

void sub_1012A3224(uint64_t a1, double *a2, double *a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  int v9;
  NSObject *v10;
  double v11;
  int v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _DWORD v21[2];
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[1640];

  v3 = *((_DWORD *)a3 + 2);
  v4 = __OFSUB__(v3, 1);
  v5 = (v3 - 1);
  if ((int)v5 < 0 == v4)
  {
    v19 = 0.0;
    v20 = 0.0;
    v18 = *a3 + a3[4 * v5 + 3];
    v9 = sub_101449180(a1 + 360, a2, &v18, &v20, &v19);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AC1C8);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v11 = *a2;
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v19;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v11;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&buf[40] = v18;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "STARK,GyroTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AC1C8);
      v13 = *a2;
      v21[0] = 67110144;
      v21[1] = v9;
      v22 = 2048;
      v23 = v19;
      v24 = 2048;
      v25 = v20;
      v26 = 2048;
      v27 = v13;
      v28 = 2048;
      v29 = v18;
      LODWORD(v16) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "STARK,GyroTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf", v21, v16, v17, v18, v19);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsAssistant::setVehicleGyroAssistance(const double &, const CLNmeaGCD &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (v19 < 0.08)
      v12 = v9;
    else
      v12 = 0;
    if (v12 == 1)
    {
      *(_DWORD *)buf = 3;
      if (sub_1001B7864(a1, (int *)buf, 1))
      {
        memcpy(buf, a3, 0x658uLL);
        *(double *)buf = v20 + *(double *)buf;
        v21[0] = 3;
        (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v21, buf, 1, 0xFFFFFFFFLL, 0);
      }
    }
  }
}

uint64_t sub_1012A351C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _OWORD v9[6];
  uint64_t v10;

  LODWORD(v9[0]) = 0;
  result = sub_1001B7864(a1, (int *)v9, 1);
  if ((_DWORD)result)
  {
    v5 = *(_OWORD *)(a2 + 80);
    v9[4] = *(_OWORD *)(a2 + 64);
    v9[5] = v5;
    v10 = *(_QWORD *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v6;
    v7 = *(_OWORD *)(a2 + 48);
    v9[2] = *(_OWORD *)(a2 + 32);
    v9[3] = v7;
    v8 = 0;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v8, v9, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1012A35CC(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;
  int v6;
  _OWORD v7[102];

  LODWORD(v7[0]) = 1;
  result = sub_1001B7864(a1, (int *)v7, 1);
  if ((_DWORD)result)
  {
    v5 = a2[1];
    v7[0] = *a2;
    v7[1] = v5;
    v7[2] = a2[2];
    v6 = 1;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1012A3670(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;
  int v6;
  _OWORD v7[102];

  LODWORD(v7[0]) = 4;
  result = sub_1001B7864(a1, (int *)v7, 1);
  if ((_DWORD)result)
  {
    v5 = a2[1];
    v7[0] = *a2;
    v7[1] = v5;
    v7[2] = a2[2];
    v6 = 4;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1012A3714(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _OWORD v9[7];
  uint64_t v10;

  LODWORD(v9[0]) = 5;
  result = sub_1001B7864(a1, (int *)v9, 1);
  if ((_DWORD)result)
  {
    v5 = *(_OWORD *)(a2 + 80);
    v9[4] = *(_OWORD *)(a2 + 64);
    v9[5] = v5;
    v9[6] = *(_OWORD *)(a2 + 96);
    v10 = *(_QWORD *)(a2 + 112);
    v6 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v6;
    v7 = *(_OWORD *)(a2 + 48);
    v9[2] = *(_OWORD *)(a2 + 32);
    v9[3] = v7;
    v8 = 5;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v8, v9, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1012A37AC(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)sub_1012A3880(a1, "CLGpsAssistant", a2);
  *v3 = off_1021AC050;
  v5 = 0x4000000000000000;
  v6 = 20;
  sub_101448FC4((uint64_t)(v3 + 14), &qword_101C48D68, (int *)&v6, 1, (double *)&v5);
  *(_BYTE *)(a1 + 352) = 0;
  v5 = 0x4000000000000000;
  v6 = 20;
  sub_101448FC4(a1 + 360, &qword_101C48D70, (int *)&v6, 1, (double *)&v5);
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  return a1;
}

void sub_1012A385C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1012A391C(v2);
  sub_1012A3978(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A3880(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AC1F8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1012A3900(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012A391C(uint64_t a1)
{
  *(_QWORD *)(a1 + 144) = off_10213D2B0;
  sub_100008848(a1 + 208, *(_QWORD **)(a1 + 216));
  sub_10047F25C((_QWORD *)(a1 + 160));
  *(_QWORD *)(a1 + 56) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 88));
  return a1;
}

uint64_t sub_1012A3978(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AC1F8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1012A39EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AC050;
  sub_100008848(a1 + 600, *(_QWORD **)(a1 + 608));
  *(_QWORD *)(a1 + 504) = off_10213D2B0;
  sub_100008848(a1 + 568, *(_QWORD **)(a1 + 576));
  sub_10047F25C((_QWORD *)(a1 + 520));
  *(_QWORD *)(a1 + 416) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 448));
  *(_QWORD *)(a1 + 256) = off_10213D2B0;
  sub_100008848(a1 + 320, *(_QWORD **)(a1 + 328));
  sub_10047F25C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 168) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 200));
  return sub_1012A3978(a1);
}

void sub_1012A3A90(uint64_t a1)
{
  sub_1012A39EC(a1);
  operator delete();
}

void sub_1012A3AB4()
{
  operator new();
}

void sub_1012A3AFC()
{
  operator delete();
}

_QWORD *sub_1012A3B20@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_1012A3B98()
{
  operator new();
}

void sub_1012A3C44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1012A3C80(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021AC348;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1012A3D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::removeClient(int) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1012A3FC8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1012A4248(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x670uLL);
  v6[2] = 0;
  *v6 = off_1021AC2D8;
  v6[1] = 0;
  memcpy(v6 + 3, a3, 0x658uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1012A4330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A4344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v9[1624];

  bzero(v9, 0x658uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v9, a3, a4, 0);
}

void sub_1012A43B4(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x670uLL);
      v24[2] = 0;
      *v24 = off_1021AC2D8;
      v24[1] = 0;
      memcpy(v24 + 3, a3, 0x658uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1012A5094();
    os_activity_scope_leave(&state);
  }
}

void sub_1012A49F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1012A4A44(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

id sub_1012A4FF0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1012A564C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1012A503C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012A5068(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1012A5094()
{
  operator new();
}

void sub_1012A512C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1012A564C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1012A5500(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1012A5500(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1012A564C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1012A55DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AC2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012A55F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AC2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1012A562C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1012A564C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1012A56C4(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1012A5A4C(a1);
  else
    return 0;
}

id sub_1012A56C4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1012A5DF8((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C48EAALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C48EAALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGpsAssistant_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1012A5A4C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C48EAALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C48EAALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AC318);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGpsAssistant_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1012A5DF8(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221D238))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1624)
      sub_10194A518();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1012A5E6C(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1012A5E98()
{
  operator new();
}

uint64_t sub_1012A5F30(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1012A5F50()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C48D30;
      v1[3] = unk_101C48D40;
      v1[4] = xmmword_101C48D50;
      v1[0] = xmmword_101C48D10;
      v1[1] = unk_101C48D20;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1012A6024(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A603C()
{
  sub_1015A2E04(qword_10230DAA8, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DAA8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DAC0, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DAC0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DAD8, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DAD8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DAF0, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DAF0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB08, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB08, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB20, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB20, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB38, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB38, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB50, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB50, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB68, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB68, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB80, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB80, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DB98, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DB98, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DBB0, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DBB0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DBC8, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DBC8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DBE0, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DBE0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DBF8, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DBF8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DC10, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DC10, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DC28, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DC28, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DC40, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DC40, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DC58, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DC58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DC70, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DC70, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DC88, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DC88, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DCA0, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DCA0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DCB8, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DCB8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DCD0, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DCD0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DCE8, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DCE8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD00, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD00, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD18, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD18, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD30, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD30, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD48, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD48, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD60, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD60, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD78, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD78, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DD90, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DD90, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DDA8, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DDA8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DDC0, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DDC0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DDD8, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DDD8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DDF0, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DDF0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE08, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE08, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE20, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE20, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE38, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE38, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE50, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE50, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE68, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE68, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE80, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE80, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DE98, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DE98, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DEB0, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DEB0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230DEC8, "NumDaysLookbackForWorkouts");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DEC8, (void *)&_mh_execute_header);
}

BOOL sub_1012A6770()
{
  _BOOL8 result;

  result = sub_100C1DCF8();
  if (result)
    operator new();
  return result;
}

void sub_1012A67B8()
{
  operator delete();
}

uint64_t sub_1012A67DC()
{
  if (qword_10230DEF8 != -1)
    dispatch_once(&qword_10230DEF8, &stru_1021AC360);
  return qword_102313B98;
}

uint64_t sub_1012A6820(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  NSObject *global_queue;
  _QWORD block[5];

  sub_10055D44C(a1, "CLActivityAlarmConcentrator", 1, 1);
  for (i = 0; i != 672; i += 24)
  {
    v3 = a1 + i;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(a1 + i + 16) = a1 + i + 24;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012A68BC;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(global_queue, block);
  return a1;
}

uint64_t sub_1012A68BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1001FBB04(0);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1012A6928;
  v4[3] = &unk_1021AC380;
  v4[4] = v1;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v2 + 40) + 16))(v2 + 40, v4);
}

double sub_1012A6928(uint64_t a1, unsigned int a2, int a3, double a4)
{
  return sub_1012A6930(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

double sub_1012A6930(uint64_t a1, unsigned int a2, int a3, double a4)
{
  NSObject *v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  __CFString *v16;
  double v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  double v22;
  _DWORD v24[4];
  uint8_t buf[4];
  unsigned int v26;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (a2 < 0x1C)
  {
    v12 = a1 + 24 * a2;
    v15 = *(_QWORD **)(v12 + 16);
    v13 = v12 + 16;
    v14 = v15;
    if (v15 != (_QWORD *)(v13 + 8))
    {
      if (a3)
        v16 = CFSTR("Wake");
      else
        v16 = CFSTR("Fire");
      do
      {
        objc_msgSend((id)v14[4], "duration");
        if (v17 > a4)
          break;
        objc_msgSend((id)v14[4], "setActivityDuration:", a4);
        sub_1012A6D64((uint64_t)objc_msgSend((id)v14[4], "fire"), (void *)v14[4], v16);
        v18 = (_QWORD *)v14[1];
        v19 = v14;
        if (v18)
        {
          do
          {
            v20 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[2];
            v21 = *v20 == (_QWORD)v19;
            v19 = v20;
          }
          while (!v21);
        }

        sub_10008A9F0((uint64_t **)v13, v14);
        operator delete(v14);
        v14 = v20;
      }
      while (v20 != (_QWORD *)(v13 + 8));
    }
    if (*(_QWORD *)(v13 + 16))
    {
      objc_msgSend(*(id *)(*(_QWORD *)v13 + 32), "duration");
      v9 = v22;
    }
    else
    {
      v9 = -1.0;
    }
  }
  else
  {
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_1021AC3A0);
    v8 = qword_10229FCC8;
    if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Invalid trigger.trigger,%u", buf, 8u);
    }
    v9 = -1.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC3A0);
      v24[0] = 67109120;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 0, "#Warning Invalid trigger.trigger,%u", v24);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "NSTimeInterval CLActivityAlarmConcentrator::alarmHandler(CMActivityAlarmTrigger, NSTimeInterval, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v9;
}

void sub_1012A6C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1012A6C38(char *result, void *a2)
{
  char *v3;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t **v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  uint64_t v12;
  id v13[3];
  __int16 v14;

  if (a2)
  {
    v3 = result;
    v13[1] = result;
    (*(void (**)(char *))(*(_QWORD *)result + 16))(result);
    v14 = 256;
    v4 = (uint64_t)objc_msgSend(a2, "trigger");
    v5 = (id)v4;
    v6 = &v3[24 * v4];
    v7 = (uint64_t **)(v6 + 16);
    if (*((_QWORD *)v6 + 4))
    {
      objc_msgSend(a2, "duration");
      v9 = v8;
      v4 = (uint64_t)objc_msgSend((id)(*v7)[4], "duration");
      v11 = v9 < v10;
    }
    else
    {
      v11 = 1;
    }
    sub_1012A6D64(v4, a2, CFSTR("Add"));
    v13[0] = a2;
    sub_1012A757C(v7, v13, (uint64_t *)v13);
    if (v11)
    {
      v12 = sub_1001FBB04(0);
      objc_msgSend(a2, "duration");
      (*(void (**)(uint64_t, id))(*(_QWORD *)(v12 + 40) + 24))(v12 + 40, v5);
    }
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 24))(v3);
  }
  return result;
}

void sub_1012A6D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A6D64(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  double v9;
  int v10;
  id v11;
  double v12;
  uint64_t result;
  uint64_t v14;
  NSDictionary *v15;
  id v16;
  uint64_t v17;
  void *i;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t buf;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  id v36;
  __int16 v37;
  int v38;

  if (qword_10229FCC0 != -1)
    dispatch_once(&qword_10229FCC0, &stru_1021AC3A0);
  v5 = qword_10229FCC8;
  if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(objc_msgSend(a2, "bundleId"), "UTF8String");
    v7 = objc_msgSend(objc_msgSend(a2, "executable"), "UTF8String");
    v8 = objc_msgSend(a2, "trigger");
    objc_msgSend(a2, "duration");
    v10 = (int)v9;
    v11 = objc_msgSend(a3, "UTF8String");
    objc_msgSend(a2, "activityDuration");
    buf = 68290563;
    v25 = 2082;
    v26 = "";
    v27 = 2081;
    v28 = v6;
    v29 = 2081;
    v30 = v7;
    v31 = 2049;
    v32 = v8;
    v33 = 1025;
    v34 = v10;
    v35 = 2081;
    v36 = v11;
    v37 = 1025;
    v38 = (int)v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ActivityAlarm\", \"BundleID\":%{private, location:escape_only}s, \"Executable\":%{private, location:escape_only}s, \"AlarmTrigger\":%{private}lu, \"AlarmDuration\":%{private}d, \"Action\":%{private, location:escape_only}s, \"ActivityDuration\":%{private}d}", (uint8_t *)&buf, 0x46u);
  }
  result = sub_1001DFAE8();
  if ((_DWORD)result)
  {
    v14 = sub_100119F3C(&buf);
    sub_10011B54C(v14, "Action", (uint64_t)a3);
    v15 = sub_1012A7464(a2);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v16 = -[NSDictionary countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v17)
            objc_enumerationMutation(v15);
          -[NSDictionary objectForKey:](v15, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i));
          sub_10023EC14((uint64_t)&buf);
        }
        v16 = -[NSDictionary countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v16);
    }
    sub_1001DFAF4((uint64_t)&buf, (uint64_t)"MotionActivityAlarm");
    return sub_10011A5A8(&buf);
  }
  return result;
}

void sub_1012A6FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10011A5A8(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A6FF4(uint64_t result, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  __int16 v14[8];
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint8_t buf[1640];

  v17 = a2;
  if (a2)
  {
    v3 = result;
    v15 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    v16 = 256;
    v4 = objc_msgSend(a2, "trigger");
    v5 = (uint64_t **)(v3 + 24 * v4 + 16);
    v6 = sub_1012A76FC((uint64_t)v5, &v17);
    v7 = v6;
    if ((uint64_t *)(v3 + 24 * v4 + 24) == v6)
    {
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC3A0);
      v10 = qword_10229FCC8;
      if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Removing an alarm which has not been added.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCC0 != -1)
          dispatch_once(&qword_10229FCC0, &stru_1021AC3A0);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 16, "Removing an alarm which has not been added.", v14, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLActivityAlarmConcentrator::removeAlarm(CMActivityAlarmLocal *)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    else
    {
      v8 = *v5;
      sub_1012A6D64((uint64_t)v6, (void *)v6[4], CFSTR("Remove"));

      sub_10008A9F0(v5, v7);
      operator delete(v7);
      if (*(_QWORD *)(v3 + 24 * v4 + 32))
      {
        if (v8 == v7)
        {
          v9 = sub_1001FBB04(0);
          objc_msgSend((id)(*v5)[4], "duration");
          (*(void (**)(uint64_t, id))(*(_QWORD *)(v9 + 40) + 24))(v9 + 40, v4);
        }
      }
      else
      {
        v13 = sub_1001FBB04(0);
        (*(void (**)(uint64_t, id))(*(_QWORD *)(v13 + 40) + 32))(v13 + 40, v4);
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  return result;
}

void sub_1012A7274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A72A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v2 = 0;
  v3 = sub_1001FBB04(0) + 40;
  v4 = a1 + 4;
  do
  {
    if (*v4)
    {
      objc_msgSend(*(id *)(*(v4 - 2) + 32), "duration");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v2);
    }
    ++v2;
    v4 += 3;
  }
  while (v2 != 28);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
}

void sub_1012A734C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1012A7364(uint64_t a1)
{
  id v2;
  uint64_t i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v2 = objc_alloc_init((Class)NSMutableArray);
  for (i = 0; i != 28; ++i)
  {
    v4 = a1 + 24 * i;
    v5 = *(_QWORD **)(v4 + 16);
    v6 = (_QWORD *)(v4 + 24);
    if (v5 != (_QWORD *)(v4 + 24))
    {
      do
      {
        objc_msgSend(v2, "addObject:", sub_1012A7464((void *)v5[4]));
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v2;
}

void sub_1012A744C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1012A7464(void *a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("BundleID");
  v4[0] = objc_msgSend(a1, "bundleId");
  v3[1] = CFSTR("Executable");
  v4[1] = objc_msgSend(a1, "executable");
  v3[2] = CFSTR("AlarmTrigger");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "trigger"));
  v3[3] = CFSTR("AlarmDuration");
  objc_msgSend(a1, "duration");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_1012A7550(id a1)
{
  qword_10229FCC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

uint64_t *sub_1012A757C(uint64_t **a1, id *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)sub_1012A75FC((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    sub_1000145B0(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *sub_1012A75FC(uint64_t a1, _QWORD *a2, id *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  id v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v17;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = (id)v4[4];
        objc_msgSend(*a3, "duration");
        v11 = v10;
        objc_msgSend(v9, "duration");
        if (v11 >= v12)
        {
          objc_msgSend(v8, "duration");
          v14 = v13;
          objc_msgSend(v9, "duration");
          if (v8 >= v9 || v14 != v15)
            break;
        }
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_15;
      }
      v17 = (id)v7[4];
      v18 = *a3;
      objc_msgSend(v17, "duration");
      v20 = v19;
      objc_msgSend(v18, "duration");
      if (v20 >= v21)
      {
        objc_msgSend(v17, "duration");
        v23 = v22;
        objc_msgSend(v18, "duration");
        if (v17 >= v18 || v23 != v24)
          break;
      }
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_15:
  *a2 = v7;
  return v5;
}

_QWORD *sub_1012A76FC(uint64_t a1, void **a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v3 = (_QWORD *)(a1 + 8);
  v4 = sub_1012A7790(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = *a2;
  v7 = (void *)v4[4];
  objc_msgSend(v6, "duration");
  v9 = v8;
  objc_msgSend(v7, "duration");
  if (v9 < v10)
    return v3;
  objc_msgSend(v6, "duration");
  v12 = v11;
  objc_msgSend(v7, "duration");
  if (v6 < v7 && v12 == v13)
    return v3;
  return v5;
}

_QWORD *sub_1012A7790(uint64_t a1, void **a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = (void *)v5[4];
      v8 = *a2;
      objc_msgSend(v7, "duration");
      v10 = v9;
      objc_msgSend(v8, "duration");
      if (v10 >= v11
        && ((objc_msgSend(v7, "duration"), v13 = v12, objc_msgSend(v8, "duration"), v13 == v14)
          ? (v15 = v7 >= v8)
          : (v15 = 1),
            v15))
      {
        a4 = v5;
      }
      else
      {
        ++v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

void sub_1012A7D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

#error "1012A83CC: call analysis failed (funcsize=85)"

void sub_1012A8490(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1012A84BC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        v3 = sub_100261F44(v3 - 16);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_1012A9004((char **)a1, a2 - v4);
  }
}

uint64_t *sub_1012A8528(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1012A870C((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    if ((uint64_t *)v6 != a3)
    {
      v13 = (uint64_t *)v6;
      while (1)
      {
        v14 = *v13;
        v15 = (std::__shared_weak_count *)v13[1];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v18 = *a1;
        v19 = (std::__shared_weak_count *)a1[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          v22 = *(_DWORD *)(v14 + 24) > *(_DWORD *)(v18 + 24);
          do
            v23 = __ldaxr(v20);
          while (__stlxr(v23 - 1, v20));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        else
        {
          v22 = *(_DWORD *)(v14 + 24) > *(_DWORD *)(v18 + 24);
        }
        if (v15)
        {
          v24 = (unint64_t *)&v15->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
            break;
        }
        if (v22)
          goto LABEL_23;
LABEL_24:
        v13 += 2;
        if (v13 == a3)
          goto LABEL_29;
      }
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v22)
        goto LABEL_24;
LABEL_23:
      v26 = *v13;
      *v13 = *a1;
      *a1 = v26;
      v27 = v13[1];
      v13[1] = a1[1];
      a1[1] = v27;
      sub_1012A870C((uint64_t)a1, a4, v9, a1);
      goto LABEL_24;
    }
    a3 = (uint64_t *)v6;
LABEL_29:
    if (v8 >= 17)
    {
      v28 = (unint64_t)v8 >> 4;
      do
      {
        sub_1012A8B50((uint64_t)a1, v6, a4, v28);
        v6 -= 16;
      }
      while (v28-- > 2);
    }
  }
  return a3;
}

void sub_1012A870C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _BOOL4 v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v6 = a3 - 2;
  if (a3 < 2)
    return;
  v68 = v4;
  v69 = v5;
  v7 = a4;
  v66 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v10 = ((uint64_t)a4 - a1) >> 3;
  v11 = v10 | 1;
  v12 = (uint64_t *)(a1 + 16 * (v10 | 1));
  v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    v14 = *v12;
    v15 = (std::__shared_weak_count *)v12[1];
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = v12[2];
    v19 = (std::__shared_weak_count *)v12[3];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(_DWORD *)(v14 + 24) > *(_DWORD *)(v18 + 24);
      do
        v23 = __ldaxr(v20);
      while (__stlxr(v23 - 1, v20));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      v22 = *(_DWORD *)(v14 + 24) > *(_DWORD *)(v18 + 24);
    }
    if (!v15)
      goto LABEL_19;
    v24 = (unint64_t *)&v15->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (v25)
    {
LABEL_19:
      if (!v22)
        goto LABEL_21;
      goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v22)
    {
LABEL_20:
      v12 += 2;
      v11 = v13;
    }
  }
LABEL_21:
  v26 = *v12;
  v27 = (std::__shared_weak_count *)v12[1];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *v7;
  v31 = (std::__shared_weak_count *)v7[1];
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v34 = *(_DWORD *)(v26 + 24) > *(_DWORD *)(v30 + 24);
    do
      v35 = __ldaxr(v32);
    while (__stlxr(v35 - 1, v32));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  else
  {
    v34 = *(_DWORD *)(v26 + 24) > *(_DWORD *)(v30 + 24);
  }
  if (v27)
  {
    v36 = (unint64_t *)&v27->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!v34)
  {
    v67 = *(_OWORD *)v7;
    *v7 = 0;
    v7[1] = 0;
    while (1)
    {
      v38 = (uint64_t)v7;
      v7 = v12;
      sub_1002B7674(v38, (__int128 *)v12);
      if (v66 < v11)
      {
LABEL_80:
        sub_1002B7674((uint64_t)v7, &v67);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
      v39 = 2 * v11;
      v11 = (2 * v11) | 1;
      v12 = (uint64_t *)(a1 + 16 * v11);
      v40 = v39 + 2;
      if (v39 + 2 >= a3)
        goto LABEL_59;
      v41 = *v12;
      v42 = (std::__shared_weak_count *)v12[1];
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = v12[2];
      v46 = (std::__shared_weak_count *)v12[3];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v49 = *(_DWORD *)(v41 + 24) > *(_DWORD *)(v45 + 24);
        do
          v50 = __ldaxr(v47);
        while (__stlxr(v50 - 1, v47));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        if (v42)
        {
LABEL_54:
          v51 = (unint64_t *)&v42->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
            if (!v49)
              goto LABEL_59;
LABEL_58:
            v12 += 2;
            v11 = v40;
            goto LABEL_59;
          }
        }
      }
      else
      {
        v49 = *(_DWORD *)(v41 + 24) > *(_DWORD *)(v45 + 24);
        if (v42)
          goto LABEL_54;
      }
      if (v49)
        goto LABEL_58;
LABEL_59:
      v53 = *v12;
      v54 = (std::__shared_weak_count *)v12[1];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      if (*((_QWORD *)&v67 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        v59 = *(_DWORD *)(v53 + 24) > *(_DWORD *)(v67 + 24);
        do
          v60 = __ldaxr(v57);
        while (__stlxr(v60 - 1, v57));
        if (!v60)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 16))(*((_QWORD *)&v67 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
        }
      }
      else
      {
        v59 = *(_DWORD *)(v53 + 24) > *(_DWORD *)(v67 + 24);
      }
      if (!v54)
        goto LABEL_74;
      v61 = (unint64_t *)&v54->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if (v59)
          goto LABEL_80;
      }
      else
      {
LABEL_74:
        if (v59)
          goto LABEL_80;
      }
    }
  }
}

void sub_1012A8B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = sub_1012A8C44(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v9 == (__int128 *)v7)
    {
      sub_1002B7674(v7, &v13);
    }
    else
    {
      sub_1002B7674(v7, v9);
      sub_1002B7674((uint64_t)v9, &v13);
      sub_1012A8DB4(a1, v8 + 16, a3, (v8 + 16 - a1) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1012A8C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A8C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    a1 += 16 * (v5 + 1);
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 >= a3)
      goto LABEL_23;
    v11 = *(_QWORD *)a1;
    v12 = *(std::__shared_weak_count **)(a1 + 8);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(std::__shared_weak_count **)(a1 + 24);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_DWORD *)(v11 + 24) > *(_DWORD *)(v15 + 24);
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (!v12)
      {
LABEL_21:
        if (!v19)
          goto LABEL_23;
LABEL_22:
        a1 += 16;
        v5 = v10;
        goto LABEL_23;
      }
    }
    else
    {
      v19 = *(_DWORD *)(v11 + 24) > *(_DWORD *)(v15 + 24);
      if (!v12)
        goto LABEL_21;
    }
    v21 = (unint64_t *)&v12->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22)
      goto LABEL_21;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_22;
LABEL_23:
    sub_1002B7674(v8, (__int128 *)a1);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1012A8DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v38 = v4;
    v39 = v5;
    v8 = v6 >> 1;
    v9 = a1 + 16 * (v6 >> 1);
    v10 = *(_QWORD *)v9;
    v11 = *(std::__shared_weak_count **)(v9 + 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *(_QWORD *)(a2 - 16);
    v16 = *(std::__shared_weak_count **)(a2 - 8);
    v15 = a2 - 16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_DWORD *)(v10 + 24) > *(_DWORD *)(v14 + 24);
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v10 + 24) > *(_DWORD *)(v14 + 24);
    }
    if (!v11)
      goto LABEL_17;
    v21 = (unint64_t *)&v11->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v19)
        return;
    }
    else
    {
LABEL_17:
      if (!v19)
        return;
    }
    v37 = *(_OWORD *)v15;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    while (1)
    {
      v23 = v15;
      v15 = v9;
      sub_1002B7674(v23, (__int128 *)v9);
      if (!v8)
        break;
      v8 = (v8 - 1) >> 1;
      v9 = a1 + 16 * v8;
      v24 = *(_QWORD *)v9;
      v25 = *(std::__shared_weak_count **)(v9 + 8);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (*((_QWORD *)&v37 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v30 = *(_DWORD *)(v24 + 24) > *(_DWORD *)(v37 + 24);
        do
          v31 = __ldaxr(v28);
        while (__stlxr(v31 - 1, v28));
        if (!v31)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
      else
      {
        v30 = *(_DWORD *)(v24 + 24) > *(_DWORD *)(v37 + 24);
      }
      if (!v25)
        goto LABEL_37;
      v32 = (unint64_t *)&v25->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if (!v30)
          break;
      }
      else
      {
LABEL_37:
        if (!v30)
          break;
      }
    }
    sub_1002B7674(v15, &v37);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
}

void sub_1012A9004(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_100259694();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)sub_10028E224(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    sub_100014F20((uint64_t)&v22);
  }
}

uint64_t sub_1012A9128@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x38uLL);
  result = sub_1012A9170((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1012A915C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A9170(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1021AC3F0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 24) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 32) = nullsub_34(0);
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  return a1;
}

void sub_1012A91D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012A91E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AC3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012A91F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AC3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1012A92D8(id a1)
{
  qword_10230DF18 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWorkoutEffortServiceSilo"));
}

void sub_1012A93BC(id a1)
{
  sub_100197040();
  if (sub_100761E4C())
    byte_10230DF28 = 1;
}

id sub_1012A945C(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FFD0 != -1)
    dispatch_once(&qword_10229FFD0, &stru_1021AC4C0);
  v4 = qword_10229FFD8;
  if (os_log_type_enabled((os_log_t)qword_10229FFD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortService, In callback, calling the update function", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFD0 != -1)
      dispatch_once(&qword_10229FFD0, &stru_1021AC4C0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFD8, 2, "CLWorkoutEffortService, In callback, calling the update function", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void onWorkoutEffortScoreUpdate_bounce(const CLWorkoutEffort::Result &, void *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(a2, "onWorkoutEffortScoreUpdate:", a1);
}

void sub_1012A97E8()
{
  operator delete();
}

id sub_1012A9B98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onNatalimetryNotification:data:", a2, a3);
}

void sub_1012AA47C(id a1)
{
  qword_10229FFD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t *sub_1012AA4A8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[290];
  a1[290] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44((uint64_t)(a1 + 288));
  sub_100261F44((uint64_t)(a1 + 286));
  v3 = (void *)a1[270];
  if (v3)
  {
    a1[271] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = a1[236];
  a1[236] = 0;
  if (v4)
    operator delete();
  v5 = (uint64_t *)a1[205];
  if (v5 == a1 + 202)
  {
    v6 = 4;
    v5 = a1 + 202;
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = a1[198];
  a1[198] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[193];
  a1[193] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_1012AA58C(a1 + 191, 0);
  return a1;
}

uint64_t *sub_1012AA58C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1004A4854((_QWORD *)(v2 + 376));
    sub_1004A4854((_QWORD *)(v2 + 328));
    operator delete();
  }
  return result;
}

void sub_1012AA5E0(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

__n128 sub_1012AA60C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1012AA618()
{
  sub_1015A2E04(qword_10230DF00, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230DF00, (void *)&_mh_execute_header);
}

uint64_t sub_1012AA80C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  int v13;
  void *String;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    v13 = (unsigned __int16)(v6 >> 3);
    if (v13 == 2)
    {
      *(_BYTE *)(a1 + 24) |= 1u;
      v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v15 <= 0xFFFFFFFFFFFFFFF7 && v15 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v16 = 0;
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
    else if (v13 == 1)
    {
      String = (void *)PBReaderReadString(a2);

      *(_QWORD *)(a1 + 16) = String;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1012AB408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1012AB41C(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void sub_1012AB584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1012AB5A0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
}

void sub_1012AB5D4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
}

void sub_1012AB640(id a1)
{
  qword_10229FCC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

_QWORD *sub_1012AB66C(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1012AB724((uint64_t)a1, "ParkinsonsResultPersistence", a2, (uint64_t)__p, 1, 60.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021AC550;
  a1[9] = off_1021AC5F8;
  sub_1012ABBF4((uint64_t)a1);
  return a1;
}

void sub_1012AB6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_1012ABB78(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1012AB724(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021AC8E8;
  *(_QWORD *)(a1 + 72) = off_1021AC990;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021AC8E8;
  *(_QWORD *)(a1 + 72) = off_1021AC990;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 272) = 12000;
  *(_QWORD *)(a1 + 280) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 288));
  *(_QWORD *)(a1 + 288) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1012ABACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[35] = off_102138DA8;
  sub_100427950(v27);
  sub_10081FB1C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1012ABB70()
{
  JUMPOUT(0x1012ABB50);
}

_QWORD *sub_1012ABB78(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021AC990;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021AC8E8;
  a1[35] = off_102138DA8;
  sub_100427950(a1 + 36);
  sub_10081FB1C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

uint64_t sub_1012ABBF4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100634364(*(_QWORD *)(a1 + 80), "ParkinsonsResultPersistence", (const char **)&off_1021AC688, (const std::string::value_type **)&off_1022FE598, 0);
    v4 = *(_QWORD *)(a1 + 72);
    v3 = a1 + 72;
    result = (*(uint64_t (**)(uint64_t))(v4 + 48))(v3);
    *(_DWORD *)(v3 + 60) = result;
  }
  return result;
}

uint64_t sub_1012ABC54(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[8];
  uint8_t buf[8];
  uint64_t v13;
  unsigned __int8 v14;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)&v9);
    v3 = sub_100263F7C(&v10, (uint64_t)"INSERT INTO ", 12);
    (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a1 + 64))(buf, a1);
    if ((v14 & 0x80u) == 0)
      v4 = buf;
    else
      v4 = *(uint8_t **)buf;
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = v13;
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)"(startTime, endTime, percentNoObservation, percentDyskinesiaLikely, percentTremorAbsent, percentTremorSlight, percentTremorMild, percentTremorModerate, percentTremorStrong) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", 207);
    if ((char)v14 < 0)
      operator delete(*(void **)buf);
    v7 = a1[10];
    std::stringbuf::str(buf, v11);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)buf;
    else
      v8 = *(char **)buf;
    sub_1000CDA68(v7, v8);
  }
  return result;
}

void sub_1012AC02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 153) < 0)
    operator delete(*(void **)(v2 - 176));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_1012AC088(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  float v8;
  sqlite3_stmt *v9;
  float v10;
  sqlite3_stmt *v11;
  float v12;
  sqlite3_stmt *v13;
  float v14;
  sqlite3_stmt *v15;
  float v16;
  sqlite3_stmt *v17;
  float v18;
  sqlite3_stmt *v19;
  float result;

  v5 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)a3 = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 8) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v8 = sqlite3_column_double(v7, 3);
  *(float *)(a3 + 16) = v8;
  v9 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v10 = sqlite3_column_double(v9, 4);
  *(float *)(a3 + 20) = v10;
  v11 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v12 = sqlite3_column_double(v11, 5);
  *(float *)(a3 + 24) = v12;
  v13 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v14 = sqlite3_column_double(v13, 6);
  *(float *)(a3 + 28) = v14;
  v15 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v16 = sqlite3_column_double(v15, 7);
  *(float *)(a3 + 32) = v16;
  v17 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v18 = sqlite3_column_double(v17, 8);
  *(float *)(a3 + 36) = v18;
  v19 = (sqlite3_stmt *)sub_100026CC8(*a2);
  result = sqlite3_column_double(v19, 9);
  *(float *)(a3 + 40) = result;
  return result;
}

_QWORD *sub_1012AC178@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "ParkinsonsResultPersistence");
}

_QWORD *sub_1012AC188@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "ParkinsonsResultPersistence");
}

uint64_t sub_1012AC198(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  void *__p[2];
  unsigned __int8 v14;

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 9))
  {
    sub_10001E638(a1[10]);
    CFAbsoluteTimeGetCurrent();
    sub_100263E50((uint64_t)&v10);
    v3 = sub_100263F7C(&v11, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime < ?", 20);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v12);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return -1;
}

void sub_1012AC570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1012AC5D0(uint64_t a1, uint64_t a2)
{
  return sub_1012AC198((uint64_t *)(a1 - 72), a2);
}

void sub_1012AC5DC(_QWORD *a1)
{
  sub_1012ABB78(a1);
  operator delete();
}

uint64_t sub_1012AC600(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10194AAF4(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1012AC904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1012AC96C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10194AC60(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1012ACCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1012ACD1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1012AD304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1012AD334(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  double v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  double v33[6];
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)a1 + 104))(a1, v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)a2;
    v8 = v33[0];
    v9 = *(double *)a2 - v33[0];
    if (v9 < 0.0)
      v9 = -v9;
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(double *)a2;
        *(_DWORD *)buf = 134349312;
        v40 = v33[0];
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
        v24 = *(double *)a2;
        v35 = 134349312;
        v36 = v33[0];
        v37 = 2050;
        v38 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)a2;
      v8 = v33[0];
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)a2;
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
          v27 = *(double *)a2;
          v35 = 134217984;
          v36 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
        v18 = v32;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021AC8B8);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, double *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_1012ADA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012ADAA4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10194ADCC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1012ADD04(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194AF38(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1012ADF3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194B0A4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

_QWORD *sub_1012AE164(uint64_t a1)
{
  return sub_1012ABB78((_QWORD *)(a1 - 72));
}

void sub_1012AE16C(uint64_t a1)
{
  sub_1012ABB78((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1012AE194(uint64_t a1)
{
  return sub_1012ACD1C(a1 - 72);
}

void sub_1012AE19C(id a1)
{
  qword_10229FE18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

void sub_1012AE1C8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1012AE1F4()
{
  uint64_t result;

  if (qword_102313BA0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313BA0 + 8))(qword_102313BA0);
  result = qword_102313BA8;
  if (qword_102313BA8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102313BA8 + 8))(qword_102313BA8);
  return result;
}

void sub_1012AE238(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_10230DF38 & 1) == 0)
  {
    byte_10230DF38 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLogEntry.pb.cc", a4);
    sub_10089A8A4(v4, v5, v6, v7);
    operator new();
  }
}

void sub_1012AE30C()
{
  operator delete();
}

double sub_1012AE330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLogEntry.pb.cc", 280);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 44);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_12:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0)
      return result;
LABEL_8:
    v7 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_QWORD *)(a1 + 32) = v7;
  }
  return result;
}

void sub_1012AE420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1012AE438(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AC9E0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1012AE448()
{
  operator new();
}

uint64_t sub_1012AE48C(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1012AE4A8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t result;
  unint64_t v16;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_24;
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v16;
        *(_DWORD *)(a1 + 44) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_24;
LABEL_14:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 44) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) != 0)
        {
          *(_QWORD *)(a1 + 24) = v16;
          *(_DWORD *)(a1 + 44) |= 4u;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 < v10 && *v11 == 32)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
LABEL_28:
            v16 = 0;
            if ((unint64_t)v12 >= v10 || *v12 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v16);
              if (!(_DWORD)result)
                return result;
              v13 = v16;
              v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
              v10 = *((_QWORD *)this + 2);
            }
            else
            {
              v13 = *v12;
              v14 = (unsigned __int8 *)(v12 + 1);
              *((_QWORD *)this + 1) = v14;
            }
            *(_QWORD *)(a1 + 32) = v13;
            *(_DWORD *)(a1 + 44) |= 8u;
            if (v14 == (unsigned __int8 *)v10
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_24;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_28;
      default:
        v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1012AE6FC(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), a2, a4);
  return result;
}

double sub_1012AE790(uint64_t a1, void *lpsrc)
{
  return sub_1012AE330(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012AE7DC()
{
  return 1;
}

_QWORD *sub_1012AE7E4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.LogEntry.TimeStamp");
}

uint64_t sub_1012AE7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLogEntry.pb.cc", 521);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      v6 = *(_QWORD *)(a1 + 32);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 32);
      if (!v7)
        v7 = *(_QWORD *)(qword_102313BA0 + 32);
      sub_1012AE330(v6, v7);
      v5 = *(_DWORD *)(a2 + 52);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 2u;
      v8 = *(_QWORD *)(a1 + 40);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 40);
      if (!v9)
        v9 = *(_QWORD *)(qword_102313BA0 + 40);
      sub_10089ABB4(v8, v9);
    }
  }
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::MergeFrom((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a2 + 8));
}

void sub_1012AE940()
{
  operator delete();
}

void sub_1012AE978(_QWORD *a1)
{
  sub_100165A28(a1);
  operator delete();
}

void sub_1012AE99C()
{
  operator new();
}

void sub_1012AE9D8()
{
  operator delete();
}

uint64_t sub_1012AE9FC(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;

  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8));
  LOBYTE(v3) = *(_BYTE *)(a1 + 52);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 32);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 44))
        {
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        *(_DWORD *)(v4 + 44) = 0;
        v3 = *(_DWORD *)(a1 + 52);
      }
    }
    if ((v3 & 2) != 0)
    {
      result = *(_QWORD *)(a1 + 40);
      if (result)
        result = sub_10089C620(result);
    }
  }
  *(_DWORD *)(a1 + 52) = 0;
  return result;
}

uint64_t sub_1012AEA64(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::ExtensionSet *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t result;
  unsigned int v28;
  unsigned int v29;

  v5 = (wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        *(_DWORD *)(a1 + 52) |= 1u;
        v9 = *(_QWORD *)(a1 + 32);
        if (!v9)
          operator new();
        v28 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0;
        }
        else
        {
          v28 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v11 = *((_DWORD *)this + 14);
        v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12)
          return 0;
        v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
        if (!sub_1012AE4A8(v9, this, v14) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        v15 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)this + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 < *((_QWORD *)this + 2) && *v18 == 34)
        {
          *((_QWORD *)this + 1) = v18 + 1;
          goto LABEL_33;
        }
      }
      if (TagFallback >> 3 != 4)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
LABEL_33:
      *(_DWORD *)(a1 + 52) |= 2u;
      v19 = *(_QWORD *)(a1 + 40);
      if (!v19)
        operator new();
      v29 = 0;
      v20 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0;
      }
      else
      {
        v29 = *v20;
        *((_QWORD *)this + 1) = v20 + 1;
      }
      v21 = *((_DWORD *)this + 14);
      v22 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v21 + 1;
      if (v21 >= v22)
        return 0;
      v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
      if (!sub_10089CB20(v19, this, v24) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
      v25 = *((_DWORD *)this + 14);
      v16 = __OFSUB__(v25, 1);
      v26 = v25 - 1;
      if (v26 < 0 == v16)
        *((_DWORD *)this + 14) = v26;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((TagFallback & 0xFFFFFFF8) == 0x10)
    {
      if ((wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(v5, TagFallback, this, (const wireless_diagnostics::google::protobuf::MessageLite *)qword_102313BA0) & 1) == 0)return 0;
    }
    else if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
    {
      return 0;
    }
  }
}

void sub_1012AED6C()
{
  operator delete();
}

uint64_t sub_1012AED90(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (!v6)
      v6 = *(_QWORD *)(qword_102313BA0 + 32);
    wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizes((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8), 2, 3, a2);
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (!v9)
      v9 = *(_QWORD *)(qword_102313BA0 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, v8);
  }
  return result;
}

uint64_t sub_1012AEE1C(uint64_t a1, void *lpsrc)
{
  return sub_1012AE7F4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012AEE68(uint64_t a1)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::IsInitialized((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8));
}

_QWORD *sub_1012AEE70@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.LogEntry");
}

void sub_1012AEF28(id a1)
{
  qword_10230DF40 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBTLEBeaconProviderSilo"));
}

uint64_t sub_1012AEFDC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012AF200;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DF58 != -1)
    dispatch_once(&qword_10230DF58, block);
  return qword_10230DF50;
}

void sub_1012AF200()
{
  operator new();
}

void sub_1012AF248()
{
  operator delete();
}

void sub_1012AF26C()
{
  operator new();
}

void sub_1012AF318(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1012AF354(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021ACB98;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1012AF42C(uint64_t a1)
{
  sub_1012AF4C8(a1);
  operator delete();
}

id sub_1012AF450(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_101254BB4(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1012AF49C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1012AF4C8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021ACB98;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1012AF5CC(id a1)
{
  qword_10230DF60 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDarwinNotifierSilo"));
}

uint64_t sub_1012AF680(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012AF7E0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DF70 != -1)
    dispatch_once(&qword_10230DF70, block);
  return qword_102313BB0;
}

void sub_1012AF7E0()
{
  operator new();
}

void sub_1012AF850()
{
  operator delete();
}

uint64_t sub_1012AF874(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021ACE08;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1012AF8F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012AF910(_QWORD *a1)
{
  *a1 = off_1021ACBE0;
  sub_1012AFA80((uint64_t)a1);
  return sub_1012AF944((uint64_t)a1);
}

uint64_t sub_1012AF944(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021ACE08;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1012AF9BC(_QWORD *a1)
{
  sub_1012AF910(a1);
  operator delete();
}

uint64_t sub_1012AF9E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1001E4804(&v6);
  sub_100569514(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  LODWORD(v6) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v6, 0, 0xFFFFFFFFLL);
}

void sub_1012AFA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1012AFA80(uint64_t a1)
{
  *(_BYTE *)(a1 + 108) = 1;
  sub_1012AFB38(a1, 0);
  sub_1012AFEE0(a1, 0);
  sub_1012B01FC(a1, 0);
  sub_1012B052C(a1, 0);
  sub_1012B0848(a1, 0);
  sub_1012B0B78(a1, 0);
  sub_1012B0EB8(a1, 0);
  sub_1012B11D4(a1, 0);
  sub_1012B1504(a1, 0);
  sub_1012B17D8(a1, 0);
  sub_1012B1AAC(a1, 0);
  sub_1012B1D94(a1, 0);
  sub_1012B2088(a1, 0);
}

void sub_1012AFB38(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  double v14;
  uint8_t *v15;
  _QWORD v16[5];
  _QWORD handler[5];
  _WORD v18[8];
  uint8_t buf[1640];

  v4 = (int *)(a1 + 112);
  v3 = *(_DWORD *)(a1 + 112);
  if (a2)
  {
    if (v3 < 0 && (*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
    {
      v10 = (const char *)objc_msgSend(CFSTR("com.apple.locationd/Prefs"), "UTF8String");
      v11 = objc_msgSend(*(id *)(a1 + 40), "queue");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1012B2984;
      handler[3] = &unk_102145848;
      handler[4] = a1;
      notify_register_dispatch(v10, v4, v11, handler);
      v12 = (const char *)objc_msgSend(CFSTR("com.apple.ManagedConfiguration.profileListChanged"), "UTF8String");
      v13 = objc_msgSend(*(id *)(a1 + 40), "queue");
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1012B298C;
      v16[3] = &unk_102145848;
      v16[4] = a1;
      notify_register_dispatch(v12, (int *)(a1 + 116), v13, v16);
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for daemon settings while already registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v18[0] = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for daemon settings while already registered", v18, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForDaemonSettings(BOOL)", "%s\n", v6);
LABEL_25:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0 && (*(_DWORD *)(a1 + 116) & 0x80000000) == 0)
    {
      notify_cancel(v3);
      notify_cancel(*(_DWORD *)(a1 + 116));
      *(_QWORD *)(a1 + 112) = -1;
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for daemon settings while not registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v18[0] = 0;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for daemon settings while not registered", v18, 2);
      v8 = v15;
      sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForDaemonSettings(BOOL)", "%s\n", v14);
      goto LABEL_25;
    }
  }
}

void sub_1012AFEE0(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  __int16 v13;
  _QWORD handler[5];
  uint8_t buf[1640];

  v4 = (int *)(a1 + 124);
  v3 = *(_DWORD *)(a1 + 124);
  if (a2)
  {
    if (v3 < 0)
    {
      v9 = objc_msgSend(*(id *)(a1 + 40), "queue");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1012B2994;
      handler[3] = &unk_102145848;
      handler[4] = a1;
      notify_register_dispatch("com.apple.locationd.suggested-action-nudge", v4, v9, handler);
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for daemon settings while already registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v13 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for daemon settings while already registered", &v13, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForSuggestedActionNudge(BOOL)", "%s\n", v6);
LABEL_23:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *v4 = -1;
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for daemon settings while not registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v13 = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for daemon settings while not registered", &v13, 2);
      v8 = v12;
      sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForSuggestedActionNudge(BOOL)", "%s\n", v11);
      goto LABEL_23;
    }
  }
}

void sub_1012B01FC(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  double v12;
  uint8_t *v13;
  __int16 v14;
  _QWORD handler[5];
  uint8_t buf[1640];

  if (&MCCloudConfigurationDidChangeNotification)
  {
    v4 = (int *)(a1 + 128);
    v3 = *(_DWORD *)(a1 + 128);
    if (a2)
    {
      if (v3 < 0)
      {
        v9 = (const char *)objc_msgSend(MCCloudConfigurationDidChangeNotification, "UTF8String");
        v10 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B29D0;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v9, v4, v10, handler);
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v5 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for CloudConfigurationDidChange while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v14 = 0;
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for CloudConfigurationDidChange while already registered", &v14, 2);
        v8 = v7;
        sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForCloudConfigurationDidChange(BOOL)", "%s\n", v6);
LABEL_24:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if ((v3 & 0x80000000) == 0)
      {
        notify_cancel(v3);
        *v4 = -1;
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for CloudConfigurationDidChange while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v14 = 0;
        v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for CloudConfigurationDidChange while not registered", &v14, 2);
        v8 = v13;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForCloudConfigurationDidChange(BOOL)", "%s\n", v12);
        goto LABEL_24;
      }
    }
  }
}

void sub_1012B052C(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  __int16 v13;
  _QWORD handler[5];
  uint8_t buf[1640];

  v4 = (int *)(a1 + 120);
  v3 = *(_DWORD *)(a1 + 120);
  if (a2)
  {
    if (v3 < 0)
    {
      v9 = objc_msgSend(*(id *)(a1 + 40), "queue");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1012B2A0C;
      handler[3] = &unk_102145848;
      handler[4] = a1;
      notify_register_dispatch("com.apple.locationd.appleAccountDidChange", v4, v9, handler);
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for AppleAccountDidChange while already registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v13 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for AppleAccountDidChange while already registered", &v13, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForAppleAccountDidChange(BOOL)", "%s\n", v6);
LABEL_23:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *v4 = -1;
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for AppleAccountDidChange while not registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v13 = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for AppleAccountDidChange while not registered", &v13, 2);
      v8 = v12;
      sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForAppleAccountDidChange(BOOL)", "%s\n", v11);
      goto LABEL_23;
    }
  }
}

void sub_1012B0848(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  double v12;
  uint8_t *v13;
  __int16 v14;
  _QWORD handler[5];
  uint8_t buf[1640];

  if (&MCProfileListChangedNotification)
  {
    v4 = (int *)(a1 + 132);
    v3 = *(_DWORD *)(a1 + 132);
    if (a2)
    {
      if (v3 < 0)
      {
        v9 = (const char *)objc_msgSend(MCProfileListChangedNotification, "UTF8String");
        v10 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B2A48;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v9, v4, v10, handler);
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v5 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for ProfileListChange while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v14 = 0;
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for ProfileListChange while already registered", &v14, 2);
        v8 = v7;
        sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForProfileListChanged(BOOL)", "%s\n", v6);
LABEL_24:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if ((v3 & 0x80000000) == 0)
      {
        notify_cancel(v3);
        *v4 = -1;
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for ProfileListChange while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v14 = 0;
        v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for ProfileListChange while not registered", &v14, 2);
        v8 = v13;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForProfileListChanged(BOOL)", "%s\n", v12);
        goto LABEL_24;
      }
    }
  }
}

void sub_1012B0B78(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  double v12;
  uint8_t *v13;
  __int16 v14;
  _QWORD handler[5];
  uint8_t buf[1640];

  v2 = a2;
  if (objc_opt_class(SSAccountStore, a2))
  {
    v4 = *(_DWORD *)(a1 + 136);
    if (v2)
    {
      if (v4 < 0)
      {
        v9 = (const char *)objc_msgSend(SSAccountStoreChangedNotification, "UTF8String");
        v10 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B2A84;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v9, (int *)(a1 + 136), v10, handler);
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v5 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for AccountStoreChanged while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v14 = 0;
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for AccountStoreChanged while already registered", &v14, 2);
        v8 = v7;
        sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForAccountStoreChanged(BOOL)", "%s\n", v6);
LABEL_24:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if ((v4 & 0x80000000) == 0)
      {
        notify_cancel(v4);
        *(_DWORD *)(a1 + 136) = -1;
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for AccountStoreChanged while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v14 = 0;
        v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for AccountStoreChanged while not registered", &v14, 2);
        v8 = v13;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForAccountStoreChanged(BOOL)", "%s\n", v12);
        goto LABEL_24;
      }
    }
  }
}

void sub_1012B0EB8(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  __int16 v13;
  _QWORD handler[5];
  uint8_t buf[1640];

  v4 = (int *)(a1 + 140);
  v3 = *(_DWORD *)(a1 + 140);
  if (a2)
  {
    if (v3 < 0)
    {
      v9 = objc_msgSend(*(id *)(a1 + 40), "queue");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1012B2AC0;
      handler[3] = &unk_102145848;
      handler[4] = a1;
      notify_register_dispatch("SignificantTimeChangeNotification", v4, v9, handler);
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for SignificantTimeChange while already registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v13 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Attempted to re-register for SignificantTimeChange while already registered", &v13, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForSignificantTimeChange(BOOL)", "%s\n", v6);
LABEL_23:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *v4 = -1;
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for SignificantTimeChange while not registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v13 = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Attempted to unregister for SignificantTimeChange while not registered", &v13, 2);
      v8 = v12;
      sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForSignificantTimeChange(BOOL)", "%s\n", v11);
      goto LABEL_23;
    }
  }
}

void sub_1012B11D4(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD handler[5];
  uint8_t buf[1640];

  if (qword_10230DF78 != -1)
    dispatch_once(&qword_10230DF78, &stru_1021ACD78);
  if (qword_10230DF80 && off_1022FE668())
  {
    v4 = *(_DWORD *)(a1 + 144);
    if (a2)
    {
      if (v4 < 0)
      {
        v7 = (const char *)objc_msgSend((id)off_1022FE668(), "UTF8String");
        v8 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B2AFC;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v7, (int *)(a1 + 144), v8, handler);
        return;
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      v5 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for CarAutomaticTriggeringPreferenceChange while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ACD98);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to re-register for CarAutomaticTriggeringPreferenceChange while already registered", &v11, 2, v11);
LABEL_27:
        v10 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForCarAutomaticTriggeringPreferenceChange(BOOL)", "%s\n", v6);
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      if ((v4 & 0x80000000) == 0)
      {
        notify_cancel(v4);
        *(_DWORD *)(a1 + 144) = -1;
        return;
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      v9 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for CarAutomaticTriggeringPreferenceChange while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ACD98);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to unregister for CarAutomaticTriggeringPreferenceChange while not registered", &v11, 2, v11);
        goto LABEL_27;
      }
    }
  }
}

void sub_1012B1504(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD handler[5];
  uint8_t buf[1640];

  v4 = (int *)(a1 + 148);
  v3 = *(_DWORD *)(a1 + 148);
  if (a2)
  {
    if (v3 < 0)
    {
      v7 = objc_msgSend(*(id *)(a1 + 40), "queue");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1012B2B38;
      handler[3] = &unk_102145848;
      handler[4] = a1;
      notify_register_dispatch("com.apple.GeoServices.navigation.stopped", v4, v7, handler);
      return;
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ACD98);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for GEONavigationStopped while already registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to re-register for GEONavigationStopped while already registered", &v10, 2, v10);
LABEL_23:
      v9 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForGEONavigationStopped(BOOL)", "%s\n", v6);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *v4 = -1;
      return;
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ACD98);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for GEONavigationStopped while not registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to unregister for GEONavigationStopped while not registered", &v10, 2, v10);
      goto LABEL_23;
    }
  }
}

void sub_1012B17D8(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD handler[5];
  uint8_t buf[1640];

  v4 = (int *)(a1 + 152);
  v3 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    if (v3 < 0)
    {
      v7 = objc_msgSend(*(id *)(a1 + 40), "queue");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1012B2B74;
      handler[3] = &unk_102145848;
      handler[4] = a1;
      notify_register_dispatch("com.apple.sysdiagnose.sysdiagnoseStarted", v4, v7, handler);
      return;
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ACD98);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for SysdiagnoseTrigger while already registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to re-register for SysdiagnoseTrigger while already registered", &v10, 2, v10);
LABEL_23:
      v9 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForSysdiagnoseTrigger(BOOL)", "%s\n", v6);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *v4 = -1;
      return;
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ACD98);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for SysdiagnoseTrigger while not registered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to unregister for SysdiagnoseTrigger while not registered", &v10, 2, v10);
      goto LABEL_23;
    }
  }
}

void sub_1012B1AAC(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD handler[5];
  uint8_t buf[1640];

  if (&MCEffectiveSettingsChangedNotification)
  {
    v4 = (int *)(a1 + 156);
    v3 = *(_DWORD *)(a1 + 156);
    if (a2)
    {
      if (v3 < 0)
      {
        v7 = (const char *)objc_msgSend(MCEffectiveSettingsChangedNotification, "UTF8String");
        v8 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B2BB0;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v7, v4, v8, handler);
        return;
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      v5 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for ManagedConfiguration while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ACD98);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to re-register for ManagedConfiguration while already registered", &v11, 2, v11);
LABEL_24:
        v10 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForManagedConfigurationChange(BOOL)", "%s\n", v6);
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      if ((v3 & 0x80000000) == 0)
      {
        notify_cancel(v3);
        *v4 = -1;
        return;
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ACD98);
      v9 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for ManagedConfiguration while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ACD98);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Attempted to unregister for ManagedConfiguration while not registered", &v11, 2, v11);
        goto LABEL_24;
      }
    }
  }
}

void sub_1012B1D94(uint64_t a1, int a2)
{
  const char *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD handler[5];
  uint8_t buf[1640];

  if (&RTLocationsOfInterestDidChangeNotification)
  {
    v4 = (const char *)objc_msgSend(RTLocationsOfInterestDidChangeNotification, "UTF8String");
    v5 = *(_DWORD *)(a1 + 160);
    if (a2)
    {
      if (v5 < 0)
      {
        v8 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B2BEC;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v4, (int *)(a1 + 160), v8, handler);
        return;
      }
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021ACDB8);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for loi did change while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021ACDB8);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Attempted to re-register for loi did change while already registered", &v11, 2, v11);
LABEL_24:
        v10 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForLocationOfInterestDidChange(BOOL)", "%s\n", v7);
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      if ((v5 & 0x80000000) == 0)
      {
        notify_cancel(v5);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021ACDB8);
      v9 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for loi did change while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021ACDB8);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Attempted to unregister for loi did change while not registered", &v11, 2, v11);
        goto LABEL_24;
      }
    }
  }
}

void sub_1012B2088(uint64_t a1, int a2)
{
  const char *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD handler[5];
  uint8_t buf[1640];

  if (&RTLocationsOfInterestDidClearNotification)
  {
    v4 = (const char *)objc_msgSend(RTLocationsOfInterestDidClearNotification, "UTF8String");
    v5 = *(_DWORD *)(a1 + 164);
    if (a2)
    {
      if (v5 < 0)
      {
        v8 = objc_msgSend(*(id *)(a1 + 40), "queue");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1012B2C28;
        handler[3] = &unk_102145848;
        handler[4] = a1;
        notify_register_dispatch(v4, (int *)(a1 + 164), v8, handler);
        return;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021ACDD8);
      v6 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for loi did clear while already registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021ACDD8);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempted to re-register for loi did clear while already registered", &v11, 2, v11);
LABEL_24:
        v10 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForLocationOfInterestDidClear(BOOL)", "%s\n", v7);
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      if ((v5 & 0x80000000) == 0)
      {
        notify_cancel(v5);
        *(_DWORD *)(a1 + 164) = -1;
        return;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021ACDD8);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for loi did clear while not registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021ACDD8);
        LOWORD(v11) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempted to unregister for loi did clear while not registered", &v11, 2, v11);
        goto LABEL_24;
      }
    }
  }
}

_QWORD *sub_1012B237C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1012B23F4(uint64_t a1, int *a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  switch(*a2)
  {
    case 0:
      v2 = 1;
      sub_1012AFB38(a1, 1);
      break;
    case 1:
      v2 = 1;
      sub_1012AFEE0(a1, 1);
      break;
    case 2:
      v2 = 1;
      sub_1012B01FC(a1, 1);
      break;
    case 3:
      v2 = 1;
      sub_1012B052C(a1, 1);
      break;
    case 4:
      v2 = 1;
      sub_1012B0848(a1, 1);
      break;
    case 5:
      v2 = 1;
      sub_1012B0B78(a1, 1);
      break;
    case 6:
      v2 = 1;
      sub_1012B0EB8(a1, 1);
      break;
    case 7:
      v2 = 1;
      sub_1012B11D4(a1, 1);
      break;
    case 8:
      v2 = 1;
      sub_1012B1504(a1, 1);
      break;
    case 9:
      v2 = 1;
      sub_1012B17D8(a1, 1);
      break;
    case 10:
      v2 = 1;
      sub_1012B1AAC(a1, 1);
      break;
    case 11:
      v2 = 1;
      sub_1012B1D94(a1, 1);
      break;
    case 12:
      v2 = 1;
      sub_1012B2088(a1, 1);
      break;
    default:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v4 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v5 = *a2;
        *(_DWORD *)buf = 67240192;
        v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown registration requested: %{public}d", buf, 8u);
      }
      v2 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v6 = *a2;
        v10[0] = 67240192;
        v10[1] = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unknown registration requested: %{public}d", v10, 8);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLDarwinNotifier::registerForNotificationInternal(const CLDarwinNotifier_Type::Notification &)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
        v2 = 0;
      }
      break;
  }
  return v2;
}

uint64_t sub_1012B26D4(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  uint64_t result;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  switch(*a2)
  {
    case 0:
      sub_1012AFB38(a1, 0);
      goto LABEL_25;
    case 1:
      sub_1012AFEE0(a1, 0);
      goto LABEL_25;
    case 2:
      sub_1012B01FC(a1, 0);
      goto LABEL_25;
    case 3:
      sub_1012B052C(a1, 0);
      goto LABEL_25;
    case 4:
      sub_1012B0848(a1, 0);
      goto LABEL_25;
    case 5:
      sub_1012B0B78(a1, 0);
      goto LABEL_25;
    case 6:
      sub_1012B0EB8(a1, 0);
      goto LABEL_25;
    case 7:
      sub_1012B11D4(a1, 0);
      goto LABEL_25;
    case 8:
      sub_1012B1504(a1, 0);
      goto LABEL_25;
    case 9:
      sub_1012B17D8(a1, 0);
      goto LABEL_25;
    case 10:
      sub_1012B1AAC(a1, 0);
      goto LABEL_25;
    case 11:
      sub_1012B1D94(a1, 0);
      goto LABEL_25;
    case 12:
      sub_1012B2088(a1, 0);
LABEL_25:
      result = 1;
      break;
    default:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
      v3 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v4 = *a2;
        *(_DWORD *)buf = 67240192;
        v12 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unknown unregistration requested: %{public}d", buf, 8u);
      }
      v5 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021ACD58);
        v7 = *a2;
        v10[0] = 67240192;
        v10[1] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unknown unregistration requested: %{public}d", v10, 8);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLDarwinNotifier::unregisterForNotificationInternal(const CLDarwinNotifier_Type::Notification &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1012B2984(uint64_t a1)
{
  return sub_1012AF9E0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1012B298C(uint64_t a1)
{
  return sub_1012AF9E0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1012B2994(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 1;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B29D0(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 2;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2A0C(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 3;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2A48(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 4;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2A84(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 5;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2AC0(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 6;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2AFC(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 7;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2B38(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 8;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2B74(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 9;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2BB0(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 10;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2BEC(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 11;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1012B2C28(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 12;
  return (*(uint64_t (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

void sub_1012B2C64()
{
  operator new();
}

void sub_1012B2D10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1012B2D4C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021ACEE8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1012B2E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACD38);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021ACD38);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1012B3094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FE670);
}

uint64_t sub_1012B30A8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1012B4AA8();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FE671;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ACD38);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1012B3504(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACD38);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1012B3784(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ACD38);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021ACD38);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1012B3B0C(uint64_t a1, int *a2, char *a3)
{
  _QWORD *v6;
  char v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_1021ACF30;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_BYTE *)v6 + 24) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1012B3BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012B3BF4(uint64_t a1, signed __int32 *a2, _BYTE *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_1021ACF30;
      v24[1] = 0;
      *((_BYTE *)v24 + 24) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1012B54A4();
    os_activity_scope_leave(&state);
  }
}

void sub_1012B422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1012B4278(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACD38);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACD38);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021ACD38);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ACD38);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1012B4824(uint64_t a1)
{
  sub_1012B4A1C(a1);
  operator delete();
}

id sub_1012B4848(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1012B4C34(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1012B4894(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012B48C0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012B48EC(id a1)
{
  qword_10230DF80 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
}

uint64_t sub_1012B4914()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_10230DF78 != -1)
    dispatch_once(&qword_10230DF78, &stru_1021ACD78);
  v0 = (uint64_t *)dlsym((void *)qword_10230DF80, "CARAutomaticDNDTriggeringPreferenceChangedNotification");
  if (v0)
  {
    result = *v0;
    qword_10230DF88 = result;
  }
  else
  {
    result = qword_10230DF88;
  }
  off_1022FE668 = sub_1012B498C;
  return result;
}

uint64_t sub_1012B498C()
{
  return qword_10230DF88;
}

void sub_1012B4998(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1012B49C4(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_1012B49F0(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1012B4A1C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021ACEE8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1012B4A7C(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1012B4AA8()
{
  operator new();
}

_BYTE *sub_1012B4B38(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1012B4C34(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_1012B4C14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1012B4C34(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1012B4CAC(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1012B5034(a1);
  else
    return 0;
}

id sub_1012B4CAC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1012B53E0((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C49313 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C49313 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDarwinNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1012B5034(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49313 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49313 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDarwinNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1012B53E0(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221D250))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
      sub_10194B564();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1012B5454(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021ACF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012B5468(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021ACF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1012B54A4()
{
  operator new();
}

void sub_1012B5534(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1012B4C34(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1012B4B38(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ACD38);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021ACD38);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_1012B5908(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1012B5928(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  id v5;
  NSObject *v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  const char *v12;
  int v13;
  char *v14;
  __int16 v15;
  unsigned int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  unsigned int v20;

  if (*(_QWORD *)(a1 + 2600))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v1 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLMM,Pedestrian,Maps API already initialized", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    LOWORD(v13) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,Pedestrian,Maps API already initialized", &v13, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "%s\n", v2);
    if (v3 == buf)
      return;
LABEL_28:
    free(v3);
    return;
  }
  *(_QWORD *)(a1 + 2608) = dispatch_queue_create("cl_geo_access_map_feature_geometry_pedestrian_queue", 0);
  v5 = objc_msgSend(objc_alloc((Class)GEOMapFeatureAccess), "initWithQueue:", *(_QWORD *)(a1 + 2608));
  *(_QWORD *)(a1 + 2600) = v5;
  if (!v5)
    sub_10194B6D4();
  objc_msgSend(v5, "setAllowNetworkTileLoad:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setFlipNegativeTravelDirectionRoads:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setVisitDoubleTravelDirectionRoadsTwice:", 0);
  objc_msgSend(*(id *)(a1 + 2600), "setAllowStaleData:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setAllowOfflineData:", 1);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
  v6 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      v7 = "Cycling";
    else
      v7 = "Pedestrian";
    v8 = objc_msgSend(*(id *)(a1 + 2600), "allowStaleData");
    *(_DWORD *)buf = 136446466;
    v18 = v7;
    v19 = 1026;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLMMPED,%{public}s,using maps API,stale data,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v9 = qword_1022A00D8;
    v10 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) ? "Cycling" : "Pedestrian";
    v11 = objc_msgSend(*(id *)(a1 + 2600), "allowStaleData");
    v13 = 136446466;
    v14 = v10;
    v15 = 1026;
    v16 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "CLMMPED,%{public}s,using maps API,stale data,%{public}d", &v13, 18);
    v3 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "%s\n", v12);
    if (v3 != buf)
      goto LABEL_28;
  }
}

BOOL sub_1012B5CE8(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t *v18;
  uint64_t *v19;
  double *v20;
  unint64_t v26;
  double *v27;
  unint64_t v28;
  double v29;
  double v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _BOOL4 v49;
  double v50;
  NSObject *v51;
  int v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  uint8_t *v56;
  double v57;
  float v58;
  float v59;
  NSObject *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  uint8_t *v65;
  const char *v66;
  uint8_t *v67;
  const char *v68;
  NSObject *v69;
  const char *v70;
  NSObject *v71;
  uint64_t v73;
  const char *v74;
  uint8_t *v75;
  uint64_t v76;
  const char *v77;
  uint8_t *v78;
  const char *v79;
  uint64_t v80;
  void *context;
  __int128 v82;
  unint64_t v83;
  __n128 v84;
  float v85;
  __int16 v86;
  float v87;
  __int128 v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[64];
  __int16 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[80];
  uint64_t v116;
  unint64_t v117;
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 32))
  {
    context = objc_autoreleasePoolPush();
    v8 = *(double *)(a3 + 56);
    v9 = *(double *)(a3 + 64);
    v90 = 0;
    v91 = 0;
    v92 = 0;
    if (*(_BYTE *)(a1 + 33))
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v69 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_109;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v95[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", v95, 2);
        v14 = (uint8_t *)v70;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v70);
        goto LABEL_125;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v10 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 328)) >> 4;
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMMPED,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v76 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 328)) >> 4;
        LODWORD(v95[0]) = 134349056;
        *(_QWORD *)((char *)v95 + 4) = v76;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", v95, 12);
        v78 = (uint8_t *)v77;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v77);
        if (v78 != buf)
          free(v78);
      }
      if ((sub_100CC3FC8(*(_QWORD *)(a1 + 16), (uint64_t)&v90, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), a4) & 1) == 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v12 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,RoadBuffer,findRoadsNear returned false", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_109;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v95[0]) = 0;
        LODWORD(v80) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,Warning,RoadBuffer,findRoadsNear returned false", v95, v80);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v13);
LABEL_125:
        if (v14 != buf)
          free(v14);
LABEL_109:
        v17 = 0;
        goto LABEL_110;
      }
    }
    else if (!sub_1012B6D10(a1, (uint64_t)&v90, a3, a4))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v71 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,MapsAPI,findRoadsNear returned false", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_109;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      LOWORD(v95[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,Warning,MapsAPI,findRoadsNear returned false", v95, 2);
      v14 = (uint8_t *)v79;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v79);
      goto LABEL_125;
    }
    v18 = v90;
    v19 = v91;
    if (v90 == v91)
    {
      v17 = 1;
      goto LABEL_110;
    }
    v20 = (double *)(a1 + 56);
    __asm { FMOV            V0.2D, #-1.0 }
    v82 = _Q0;
LABEL_27:
    v84 = 0uLL;
    v85 = 0.0;
    v86 = 1;
    v87 = 0.0;
    v89 = 0;
    v88 = 0uLL;
    sub_100349198(&v84, v18);
    v26 = v84.n128_u64[0];
    if (!v84.n128_u64[0])
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v51 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v95[0]) = 0;
        LODWORD(v80) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", v95, v80);
        v65 = (uint8_t *)v64;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v64);
        if (v65 != buf)
          free(v65);
      }
      sub_1001A5CBC(a2);
      v52 = 1;
      goto LABEL_75;
    }
    v95[0] = 0uLL;
    v95[1] = v82;
    v96 = 0;
    v97 = 0;
    v98 = 0xBFF0000000000000;
    v110 = 0;
    v111 = 0;
    memset(&v108[32], 0, 32);
    v109 = 0;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    memset(v115, 0, 27);
    memset(&v115[32], 0, 48);
    v107 = 0u;
    memset(v108, 0, 30);
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v117 = 0xBFF0000000000000;
    v116 = 0;
    v27 = *(double **)(v84.n128_u64[0] + 136);
    v28 = *(_QWORD *)(v84.n128_u64[0] + 144) - (_QWORD)v27;
    v83 = 0xBFF0000000000000;
    if ((int)(v28 >> 4) <= 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v53 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v93) = 0;
        LODWORD(v80) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", &v93, v80);
        v67 = (uint8_t *)v66;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v66);
        if (v67 != buf)
          free(v67);
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v54 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,findClosestPointOnRoad returned false", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_72;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      LOWORD(v93) = 0;
      LODWORD(v80) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED,findClosestPointOnRoad returned false", &v93, v80);
      v56 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v55);
      goto LABEL_94;
    }
    v29 = *v27;
    v30 = v27[1];
    *(_OWORD *)buf = 0uLL;
    *(_QWORD *)&v93 = 0;
    sub_10011E780(v20, (double *)buf, (double *)&buf[8], (double *)&v93, v8, v9, 0.0, v29, v30, 0.0);
    v31 = v19;
    v32 = a2;
    v33 = 0;
    v34 = (v28 >> 4) - 1;
    v35 = 0.0;
    v36 = -1.0;
    v37 = 0.0;
    while (1)
    {
      v38 = *(_QWORD *)(v26 + 136) + v33;
      v39 = *(double *)(v38 + 16);
      v40 = *(double *)(v38 + 24);
      v93 = 0uLL;
      v94 = 0;
      sub_10011E780(v20, (double *)&v93, (double *)&v93 + 1, (double *)&v94, v8, v9, 0.0, v39, v40, 0.0);
      v41 = (*(double *)buf - *(double *)&v93) * (*(double *)buf - *(double *)&v93)
          + (*(double *)&buf[8] - *((double *)&v93 + 1)) * (*(double *)&buf[8] - *((double *)&v93 + 1));
      v42 = 0.0 - *(double *)buf;
      if (v41 >= 0.001)
      {
        v44 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v93 + 1) - *(double *)&buf[8])
             + v42 * (*(double *)&v93 - *(double *)buf))
            / v41;
        if (v44 < 0.0)
        {
          v46 = v42 * v42 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
          v44 = 0.0;
          goto LABEL_37;
        }
        if (v44 > 1.0)
        {
          v46 = (0.0 - *(double *)&v93) * (0.0 - *(double *)&v93)
              + (0.0 - *((double *)&v93 + 1)) * (0.0 - *((double *)&v93 + 1));
          v44 = 1.0;
          goto LABEL_37;
        }
        v43 = (0.0 - (*(double *)buf + (*(double *)&v93 - *(double *)buf) * v44))
            * (0.0 - (*(double *)buf + (*(double *)&v93 - *(double *)buf) * v44));
        v45 = 0.0 - (*(double *)&buf[8] + (*((double *)&v93 + 1) - *(double *)&buf[8]) * v44);
      }
      else
      {
        v43 = v42 * v42;
        v44 = 0.0;
        v45 = 0.0 - *(double *)&buf[8];
      }
      v46 = v43 + v45 * v45;
LABEL_37:
      v47 = sqrt(v41);
      v48 = sqrt(v46);
      v49 = v36 < 0.0;
      if (v48 < v36)
        v49 = 1;
      v50 = v37 + v47 * v44;
      if (v49)
      {
        v36 = v48;
        v35 = v50;
      }
      v37 = v37 + v47;
      *(_OWORD *)buf = v93;
      v33 += 16;
      if (!--v34)
      {
        v57 = v35 / v37;
        if (v37 < 0.001)
          v57 = 0.0;
        v83 = *(_QWORD *)&v57;
        a2 = v32;
        v19 = v31;
        if (!sub_1010CEB60(a1, (uint64_t)v95, (double **)&v84, 1, (double *)&v83, 1))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021AD038);
          v60 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,interpolateOnRoad returned false", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_72;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021AD038);
          LOWORD(v93) = 0;
          LODWORD(v80) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED,interpolateOnRoad returned false", &v93, v80);
          v56 = (uint8_t *)v68;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v68);
LABEL_94:
          if (v56 != buf)
            free(v56);
LABEL_72:
          v52 = 1;
          goto LABEL_73;
        }
        v58 = v36;
        v85 = v58;
        v88 = v105;
        v59 = *(double *)&v106;
        v87 = v59;
        v89 = v83;
        v86 = 1;
        sub_1010069D4((__n128 **)a2, &v84);
        v52 = 0;
LABEL_73:
        if (SHIBYTE(v104) < 0)
          operator delete(*((void **)&v103 + 1));
LABEL_75:
        v61 = (std::__shared_weak_count *)v84.n128_u64[1];
        if (v84.n128_u64[1])
        {
          v62 = (unint64_t *)(v84.n128_u64[1] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v17 = v52 == 0;
        if (v52 || (v18 += 2, v18 == v19))
        {
LABEL_110:
          *(_QWORD *)buf = &v90;
          sub_1002A3684((void ***)buf);
          objc_autoreleasePoolPop(context);
          return v17;
        }
        goto LABEL_27;
      }
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
  v15 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v16 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v73 = *(_QWORD *)(a1 + 8);
    LODWORD(v95[0]) = 134349056;
    *(_QWORD *)((char *)v95 + 4) = v73;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", v95, 12);
    v75 = (uint8_t *)v74;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v74);
    if (v75 != buf)
      free(v75);
  }
  return 0;
}

void sub_1012B6CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  a37 = &a30;
  sub_1002A3684((void ***)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_1012B6D10(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7;
  _QWORD *v8;
  _OWORD *v9;
  char *v10;
  __int128 v11;
  void *v12;
  NSObject *v13;
  dispatch_time_t v14;
  intptr_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  _BOOL8 v24;
  NSObject *v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  uint64_t i;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const char *v49;
  char *v50;
  id v51;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  const char *v57;
  char *v58;
  const char *v59;
  const char *v60;
  char *v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  void *context;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[6];
  _QWORD *v71;
  __int128 v72;
  double v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  void (*v82)(uint64_t);
  dispatch_group_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  _BYTE v88[128];
  _BYTE v89[24];
  _BYTE *v90;
  _BYTE v91[24];
  _BYTE *v92;
  int v93;
  uint64_t v94;
  uint8_t buf[1632];
  __int128 v96;
  void (*v97)(_QWORD *, void *);
  void *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;

  v73 = a4;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v20 = *(_QWORD *)(a1 + 8);
    LODWORD(v96) = 134349056;
    *(_QWORD *)((char *)&v96 + 4) = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", &v96, 12);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v21);
    goto LABEL_111;
  }
  if (*(_QWORD *)(a1 + 2600))
  {
    context = objc_autoreleasePoolPush();
    v72 = *(_OWORD *)(a3 + 56);
    v7 = +[NSMutableArray array](NSMutableArray, "array");
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472;
    v70[2] = sub_1012B7A3C;
    v70[3] = &unk_1021ACF78;
    v70[4] = v7;
    v70[5] = a1;
    v71 = v70;
    v8 = operator new(0x28uLL);
    *v8 = off_1021AD068;
    v8[1] = a1;
    v9 = v8 + 1;
    v8[2] = &v72;
    v8[3] = &v73;
    v8[4] = &v71;
    v92 = v8;
    ++*(_DWORD *)(a1 + 36);
    v10 = (char *)operator new(0x28uLL);
    *(_QWORD *)v10 = off_1021AD068;
    v11 = v9[1];
    *(_OWORD *)(v10 + 8) = *v9;
    *(_OWORD *)(v10 + 24) = v11;
    v90 = v10;
    v84 = 0;
    v85 = &v84;
    v86 = 0x2020000000;
    v87 = 0;
    v78 = 0;
    v79 = &v78;
    v80 = 0x3052000000;
    v81 = sub_100207308;
    v82 = sub_100207E1C;
    v83 = 0;
    v83 = dispatch_group_create();
    v74 = 0;
    v75 = &v74;
    v76 = 0x2020000000;
    v77 = 0;
    *(_QWORD *)&v96 = _NSConcreteStackBlock;
    *((_QWORD *)&v96 + 1) = 3221225472;
    v97 = sub_1012BCAF0;
    v98 = &unk_10218C058;
    v99 = &v84;
    v100 = &v78;
    v101 = &v74;
    dispatch_group_enter((dispatch_group_t)v79[5]);
    *(_QWORD *)buf = &v96;
    if (!v90)
      sub_10025FD1C();
    v12 = (void *)(*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v90 + 48))(v90, buf);
    v13 = v79[5];
    v14 = dispatch_time(0, 100000000);
    v15 = dispatch_group_wait(v13, v14);
    v75[3] = v15;
    if (v15)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v16 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v17 = v75[3];
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v56 = v75[3];
        v93 = 134349056;
        v94 = v56;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", &v93, 12);
        v58 = (char *)v57;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v57);
        if (v58 != (char *)buf)
          free(v58);
      }
      objc_msgSend(v12, "cancel");
    }
    else if (v79[5])
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v25 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v93) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,clearing dispatchGroup", &v93, 2);
        v63 = (char *)v62;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v62);
        if (v63 != (char *)buf)
          free(v63);
      }

      v79[5] = 0;
    }
    if (v75[3])
      v26 = 0;
    else
      v26 = *((_BYTE *)v85 + 24) == 0;
    _Block_object_dispose(&v74, 8);
    _Block_object_dispose(&v78, 8);
    _Block_object_dispose(&v84, 8);
    v27 = v90;
    if (v90 == v89)
    {
      v28 = 4;
      v27 = v89;
    }
    else
    {
      if (!v90)
        goto LABEL_40;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_40:
    if (v26)
    {
      *(_DWORD *)(a1 + 40) = 0;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v29 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v66, v88, 16);
      if (v29)
      {
        v30 = *(_QWORD *)v67;
LABEL_43:
        v31 = 0;
        while (1)
        {
          if (*(_QWORD *)v67 != v30)
            objc_enumerationMutation(v7);
          v32 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * v31);
          if (v32)
          {
            v33 = objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * v31), "isRoadPedestrianNavigable");
            v34 = objc_msgSend(v32, "walkableSide");
            v35 = objc_msgSend(v32, "isRail");
            v36 = v34 - 1 < 3 ? 1 : v33;
            v37 = v36 & (v35 ^ 1);
          }
          else
          {
            v37 = 0;
          }
          if (*(_BYTE *)(a1 + 2648) || (v37 & 1) != 0)
          {
            if (!*(_BYTE *)(a1 + 2648))
              v37 = 1;
            if ((v37 & 1) != 0
              || v32
              && ((v38 = objc_msgSend(v32, "bikeableSide"),
                   v39 = objc_msgSend(v32, "isRail"),
                   v38 - 4 < 0xFFFFFFFD)
                ? (v40 = 1)
                : (v40 = v39),
                  (v40 & 1) == 0))
            {
              sub_1012B7AF4(v32, (std::string **)&v96);
              v41 = v96;
              if ((_QWORD)v96)
              {
                if (sub_100408B10(v96))
                  sub_10033F68C((char **)a2, &v96);
                v42 = 0;
              }
              else
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021AD038);
                v43 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
                  LOWORD(v78) = 0;
                  LODWORD(v64) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", &v78, v64);
                  v50 = (char *)v49;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v49);
                  if (v50 != (char *)buf)
                    free(v50);
                }
                v45 = *(char **)a2;
                for (i = *(_QWORD *)(a2 + 8); (char *)i != v45; i = sub_100261F44(i - 16))
                  ;
                *(_QWORD *)(a2 + 8) = v45;
                v42 = 1;
              }
              v46 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
              if (*((_QWORD *)&v96 + 1))
              {
                v47 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              if (!v41)
                break;
            }
          }
          if ((id)++v31 == v29)
          {
            v51 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v66, v88, 16);
            v29 = v51;
            if (v51)
              goto LABEL_43;
            goto LABEL_88;
          }
        }
      }
      else
      {
LABEL_88:
        v42 = 0;
      }
      v24 = v42 == 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 40);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v52 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, query failed (roadsWithinDistance)", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v96) = 0;
        LODWORD(v64) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED, query failed (roadsWithinDistance)", &v96, v64);
        v61 = (char *)v60;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v60);
        if (v61 != (char *)buf)
          free(v61);
      }
      v24 = 0;
    }
    v53 = v92;
    if (v92 == v91)
    {
      v54 = 4;
      v53 = v91;
    }
    else
    {
      if (!v92)
      {
LABEL_101:
        objc_autoreleasePoolPop(context);
        return v24;
      }
      v54 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_101;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
  v23 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistanceLite,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    LOWORD(v96) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,roadsWithinDistanceLite,fGEOMapFeatureAccess is unexpectedly nil", &v96, 2);
    v22 = (char *)v59;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v59);
LABEL_111:
    if (v22 != (char *)buf)
      free(v22);
  }
  return 0;
}

void sub_1012B7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char *a66;
  char a67;
  char *a70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  v71 = a66;
  if (a66 == &a63)
  {
    v72 = 4;
    v71 = &a63;
  }
  else
  {
    if (!a66)
      goto LABEL_6;
    v72 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_6:
  v73 = a70;
  if (a70 == &a67)
  {
    v74 = 4;
    v73 = &a67;
  }
  else
  {
    if (!a70)
      goto LABEL_11;
    v74 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_11:
  _Unwind_Resume(a1);
}

_QWORD *sub_1012B7A3C(_QWORD *result, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (a2)
  {
    v3 = result;
    v4 = result[5];
    v5 = objc_msgSend(a2, "isRoadPedestrianNavigable");
    v6 = objc_msgSend(a2, "walkableSide");
    result = objc_msgSend(a2, "isRail");
    if (((v6 - 1 > 2) & ~v5) == 0 && !(_DWORD)result)
      return objc_msgSend((id)v3[4], "addObject:", a2);
    if (*(_BYTE *)(v4 + 2648))
    {
      v7 = objc_msgSend(a2, "bikeableSide");
      result = objc_msgSend(a2, "isRail");
      if ((result & 1) == 0 && v7 - 4 >= 0xFFFFFFFD)
        return objc_msgSend((id)v3[4], "addObject:", a2);
    }
  }
  return result;
}

double sub_1012B7AF4@<D0>(void *a1@<X2>, std::string **a2@<X8>)
{
  double result;
  std::string *v4;
  int v5;

  result = sub_100CC869C(a1, 1, a2);
  v4 = *a2;
  if (*a2)
  {
    v5 = v4[4].__r_.__value_.__r.__words[1];
    if (v5 >= 1)
    {
      result = 3.70000005 * (double)v5;
      *(double *)&v4[4].__r_.__value_.__l.__data_ = result;
    }
  }
  return result;
}

uint64_t sub_1012B7B4C(uint64_t a1, uint64_t *a2, uint64_t **a3, int a4, int a5, double a6, double a7)
{
  uint64_t *v9;
  double v12;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *i;
  uint64_t *v27;
  double v28;
  __n128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  NSObject *v33;
  uint64_t v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  __int16 v40[8];
  uint64_t *v41[2];
  __int128 v42;
  uint64_t v43;
  _BYTE buf[12];
  uint64_t v45;
  std::__shared_weak_count *v46;
  double v47;

  if (*(_BYTE *)(a1 + 32))
  {
    v9 = *a3;
    if (*a3)
    {
      v12 = a6;
      if (a4)
      {
        v15 = 1.0 - a6;
        sub_1004078E0(*a3);
        v12 = *((double *)v9 + 5);
      }
      else
      {
        sub_1004078E0(*a3);
        v15 = *((double *)v9 + 5);
      }
      if (v15 * v12 > a7)
        return 1;
      v42 = 0uLL;
      v43 = 0;
      v19 = *a3;
      v20 = a3[1];
      v41[0] = v19;
      v41[1] = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 1);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = sub_1012B8034(a1, v41, a4, (uint64_t *)&v42, a5, a7 - v15 * v12);
      v18 = v23;
      if (!v20)
        goto LABEL_21;
      v24 = (unint64_t *)(v20 + 1);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(uint64_t *))(*v20 + 16))(v20);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
        if ((v18 & 1) != 0)
        {
LABEL_22:
          v27 = (uint64_t *)*((_QWORD *)&v42 + 1);
          for (i = (uint64_t *)v42; i != v27; i += 3)
          {
            *(_WORD *)&buf[8] = 1;
            v45 = 0;
            v46 = 0;
            *(_QWORD *)buf = *(_QWORD *)*i;
            sub_100349198(&v45, i);
            buf[8] = *((_BYTE *)i + 16);
            if (buf[8])
              v28 = 0.0;
            else
              v28 = 1.0;
            v47 = v28;
            v29.n128_f64[0] = sub_1012B9384(a2, (uint64_t)buf);
            v30 = v46;
            if (v46)
            {
              p_shared_owners = (unint64_t *)&v46->__shared_owners_;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v30->__on_zero_shared)(v30, v29);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
LABEL_39:
          *(_QWORD *)buf = &v42;
          sub_1012BD248((void ***)buf);
          return v18;
        }
      }
      else
      {
LABEL_21:
        if ((v23 & 1) != 0)
          goto LABEL_22;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v33 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, findAllDigitizedRoads returned false", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v40[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED, findAllDigitizedRoads returned false", v40, 2);
        v39 = (char *)v38;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v35 = *(_QWORD *)(a1 + 8);
      LODWORD(v42) = 134349056;
      *(_QWORD *)((char *)&v42 + 4) = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", &v42, 12);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  return 0;
}

void sub_1012B7FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  sub_1012BD248(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1012B8034(uint64_t a1, uint64_t **a2, int a3, uint64_t *a4, int a5, double a6)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  uint64_t **v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *j;
  _QWORD *v85;
  double *v86;
  _QWORD *v87;
  double v88;
  double v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  uint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  int v144;
  char **v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  NSObject *v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  const char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  char *v173;
  uint64_t v174;
  const char *v175;
  char *v176;
  const char *v177;
  char *v178;
  uint64_t **v179;
  int v180;
  uint64_t v181;
  std::__shared_weak_count *v184;
  __int16 v185[8];
  __int128 v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  std::__shared_weak_count *v191;
  uint64_t v192[4];
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  __int16 v203;
  uint64_t v204;
  _OWORD v205[2];
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  _BYTE v218[64];
  __int16 v219;
  uint64_t v220;
  int v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _BYTE v225[80];
  uint64_t v226;
  unint64_t v227;
  _BYTE buf[32];
  _BYTE v229[30];
  __int16 v230;
  uint64_t v231;
  __int16 v232;
  uint64_t v233;
  __int16 v234;
  uint64_t v235;

  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v161 = *(_QWORD *)(a1 + 8);
      LODWORD(v205[0]) = 134349056;
      *(_QWORD *)((char *)v205 + 4) = v161;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", v205, 12);
      v163 = (char *)v162;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v162);
      if (v163 != buf)
        free(v163);
    }
    return 0;
  }
  v9 = *a2;
  if (*(_BYTE *)(a1 + 33))
  {
    v10 = (std::__shared_weak_count *)a2[1];
    v190 = *a2;
    v191 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = sub_1012B9688(a1, (uint64_t *)&v190, a3, a4, a5);
    v14 = v191;
    if (v191)
    {
      v15 = (unint64_t *)&v191->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    return v13;
  }
  if (!v9)
    return 0;
  v205[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v205[1] = _Q0;
  v206 = 0;
  v207 = 0;
  v208 = 0xBFF0000000000000;
  v220 = 0;
  v221 = 0;
  memset(&v218[32], 0, 32);
  v219 = 0;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  memset(v225, 0, 27);
  memset(&v225[32], 0, 48);
  memset(v218, 0, 30);
  v217 = 0u;
  v216 = 0u;
  v215 = 0u;
  v214 = 0u;
  v213 = 0u;
  v212 = 0u;
  v211 = 0u;
  v210 = 0u;
  v209 = 0u;
  v227 = 0xBFF0000000000000;
  v226 = 0;
  v26 = v9[17];
  v27 = v9[18];
  if (a3)
  {
    v28 = v27 - v26;
    if (v28)
    {
      v29 = (v28 >> 4) - 1;
      v30 = (_QWORD *)(v26 + 16 * v29);
LABEL_24:
      *(_QWORD *)&v209 = *v30;
      v31 = *(_QWORD *)(v26 + 16 * v29 + 8);
      goto LABEL_26;
    }
  }
  else if (v27 != v26)
  {
    v29 = 0;
    v30 = (_QWORD *)v9[17];
    goto LABEL_24;
  }
  v31 = 0;
LABEL_26:
  *((_QWORD *)&v209 + 1) = v31;
  v187 = &v187;
  v188 = (uint64_t *)&v187;
  v189 = 0;
  v186 = *(_OWORD *)v9;
  v32 = sub_100CC2FEC((uint64_t **)(a1 + 2616), &v186, 0);
  v33 = v32;
  v179 = (uint64_t **)(a1 + 2616);
  v181 = a1;
  v180 = a3;
  if (!v32)
  {
    if (v189)
    {
LABEL_74:
      v54 = 0;
      goto LABEL_75;
    }
LABEL_55:
    memset(v192, 0, 24);
    if (sub_1012B6D10(a1, (uint64_t)v192, (uint64_t)v205, a6))
    {
      v56 = (uint64_t *)v192[0];
      v55 = v192[1];
      if (v192[1] != v192[0])
        goto LABEL_57;
      v66 = fmin(a6 * 4.0, 250.0);
      if (v66 <= a6)
      {
LABEL_73:
        *(_QWORD *)buf = v192;
        sub_1002A3684((void ***)buf);
        goto LABEL_74;
      }
      if (sub_1012B6D10(a1, (uint64_t)v192, (uint64_t)v205, v66))
      {
        v56 = (uint64_t *)v192[0];
        v55 = v192[1];
LABEL_57:
        while (v56 != (uint64_t *)v55)
        {
          memset(buf, 0, 20);
          *(_WORD *)&buf[20] = 1;
          *(_DWORD *)&buf[24] = 0;
          memset(v229, 0, 24);
          sub_100349198(buf, v56);
          v57 = operator new(0x48uLL);
          v58 = *(_QWORD *)&buf[8];
          v57[2] = *(_QWORD *)buf;
          v57[3] = v58;
          if (v58)
          {
            v59 = (unint64_t *)(v58 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
            v61 = *(std::__shared_weak_count **)&buf[8];
          }
          else
          {
            v61 = 0;
          }
          v62 = *(_OWORD *)v229;
          *((_OWORD *)v57 + 2) = *(_OWORD *)&buf[16];
          *((_OWORD *)v57 + 3) = v62;
          v57[8] = *(_QWORD *)&v229[16];
          v63 = (uint64_t)v187;
          *v57 = v187;
          v57[1] = &v187;
          *(_QWORD *)(v63 + 8) = v57;
          v187 = v57;
          ++v189;
          if (v61)
          {
            v64 = (unint64_t *)&v61->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v56 += 2;
        }
        goto LABEL_73;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v160 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v185[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search", v185, 2);
        v178 = (char *)v177;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v177);
        if (v178 != buf)
          free(v178);
      }
    }
    *(_QWORD *)buf = v192;
    sub_1002A3684((void ***)buf);
    v13 = 0;
    goto LABEL_225;
  }
  v34 = (_OWORD *)((char *)v32 + 8);
  v35 = 8;
  if (a3)
  {
    v35 = 32;
    v34 = v32 + 2;
  }
  v36 = *(uint64_t **)((char *)v32 + v35);
  for (i = (uint64_t *)*((_QWORD *)v34 + 1); v36 != i; v36 += 2)
  {
    v39 = *v36;
    v38 = v36[1];
    v192[0] = *v36;
    v192[1] = v38;
    if (v38)
    {
      v40 = (unint64_t *)(v38 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    if (v39)
    {
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&buf[24] = 0;
      memset(v229, 0, 24);
      sub_100349198(buf, v192);
      v42 = operator new(0x48uLL);
      v43 = *(_QWORD *)&buf[8];
      v42[2] = *(_QWORD *)buf;
      v42[3] = v43;
      if (v43)
      {
        v44 = (unint64_t *)(v43 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v46 = *(std::__shared_weak_count **)&buf[8];
      }
      else
      {
        v46 = 0;
      }
      v47 = *(_OWORD *)v229;
      *((_OWORD *)v42 + 2) = *(_OWORD *)&buf[16];
      *((_OWORD *)v42 + 3) = v47;
      v42[8] = *(_QWORD *)&v229[16];
      v48 = (uint64_t)v187;
      *v42 = v187;
      v42[1] = &v187;
      *(_QWORD *)(v48 + 8) = v42;
      v187 = v42;
      ++v189;
      if (v46)
      {
        v49 = (unint64_t *)&v46->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }
    else
    {
      sub_1001A5CBC((uint64_t *)&v187);
    }
    v51 = (std::__shared_weak_count *)v192[1];
    if (v192[1])
    {
      v52 = (unint64_t *)(v192[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (!v39)
      break;
  }
  if (!v189)
    goto LABEL_55;
  *((_QWORD *)v33 + 7) = *(_QWORD *)(a1 + 8);
  v54 = 1;
LABEL_75:
  v67 = a2;
  if (a5)
  {
    v68 = *a2;
    v69 = (std::__shared_weak_count *)a2[1];
    v184 = v69;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      *(_QWORD *)buf = v68;
      *(_QWORD *)&buf[8] = v69;
      do
        v72 = __ldxr(v70);
      while (__stxr(v72 + 1, v70));
    }
    else
    {
      *(_QWORD *)buf = *a2;
      *(_QWORD *)&buf[8] = 0;
    }
    v73 = v180 ^ 1;
    buf[16] = v180 ^ 1;
    v74 = a4[1];
    if (v74 >= a4[2])
    {
      v78 = sub_1012BD2B8(a4, (uint64_t)buf);
    }
    else
    {
      *(_QWORD *)v74 = v68;
      v75 = *(_QWORD *)&buf[8];
      *(_QWORD *)(v74 + 8) = *(_QWORD *)&buf[8];
      if (v75)
      {
        v76 = (unint64_t *)(v75 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
        v73 = buf[16];
      }
      *(_BYTE *)(v74 + 16) = v73;
      v78 = v74 + 24;
    }
    a4[1] = v78;
    v79 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v80 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v184)
    {
      v82 = (unint64_t *)&v184->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
  }
  for (j = v188; j != (uint64_t *)&v187; j = (uint64_t *)j[1])
  {
    v85 = (_QWORD *)j[2];
    if (*v85 != **v67)
    {
      v87 = v85 + 17;
      v86 = (double *)v85[17];
      if ((double *)v87[1] == v86)
      {
        v88 = 0.0;
        v89 = 0.0;
      }
      else
      {
        v88 = *v86;
        v89 = v86[1];
      }
      v90 = v209;
      if (sub_100512A74(*(double *)&v209, *((double *)&v209 + 1), v88, v89, 0.0000001))
      {
        v91 = j[2];
        v92 = (std::__shared_weak_count *)j[3];
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          v192[0] = v91;
          v192[1] = (uint64_t)v92;
          do
            v95 = __ldxr(v93);
          while (__stxr(v95 + 1, v93));
        }
        else
        {
          v192[0] = j[2];
          v192[1] = 0;
        }
        LOBYTE(v192[2]) = 1;
        v99 = a4[1];
        v100 = a4[2];
        if (v99 >= v100)
        {
          v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *a4) >> 3);
          v105 = v104 + 1;
          if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *a4) >> 3);
          if (2 * v106 > v105)
            v105 = 2 * v106;
          if (v106 >= 0x555555555555555)
            v107 = 0xAAAAAAAAAAAAAAALL;
          else
            v107 = v105;
          *(_QWORD *)v229 = a4 + 2;
          if (v107)
            v108 = sub_1002596A8((uint64_t)(a4 + 2), v107);
          else
            v108 = 0;
          v113 = (uint64_t *)&v108[24 * v104];
          *(_QWORD *)buf = v108;
          *(_QWORD *)&buf[8] = v113;
          *(_QWORD *)&buf[24] = &v108[24 * v107];
          *v113 = v91;
          v113[1] = (uint64_t)v92;
          if (v92)
          {
            v114 = (unint64_t *)&v92->__shared_owners_;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          v108[24 * v104 + 16] = 1;
          *(_QWORD *)&buf[16] = v113 + 3;
          sub_1012BD3E4(a4, buf);
          v103 = a4[1];
          sub_1012BD480((uint64_t)buf);
          v67 = a2;
        }
        else
        {
          *(_QWORD *)v99 = v91;
          *(_QWORD *)(v99 + 8) = v92;
          if (v92)
          {
            v101 = (unint64_t *)&v92->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          *(_BYTE *)(v99 + 16) = 1;
          v103 = v99 + 24;
        }
        a4[1] = v103;
        if (v92)
        {
          v116 = (unint64_t *)&v92->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (!v92)
          continue;
        v118 = (unint64_t *)&v92->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
      }
      else
      {
        v96 = *(_QWORD *)(j[2] + 144);
        if (v96 == *(_QWORD *)(j[2] + 136))
        {
          v97 = 0.0;
          v98 = 0.0;
        }
        else
        {
          v97 = *(double *)(v96 - 16);
          v98 = *(double *)(v96 - 8);
        }
        if (!sub_100512A74(*(double *)&v90, *((double *)&v90 + 1), v97, v98, 0.0000001))
          continue;
        v109 = j[2];
        v92 = (std::__shared_weak_count *)j[3];
        if (v92)
        {
          v110 = (unint64_t *)&v92->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
          v192[0] = v109;
          v192[1] = (uint64_t)v92;
          do
            v112 = __ldxr(v110);
          while (__stxr(v112 + 1, v110));
        }
        else
        {
          v192[0] = j[2];
          v192[1] = 0;
        }
        LOBYTE(v192[2]) = 0;
        v120 = a4[1];
        v121 = a4[2];
        if (v120 >= v121)
        {
          v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - *a4) >> 3);
          v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - *a4) >> 3);
          if (2 * v127 > v126)
            v126 = 2 * v127;
          if (v127 >= 0x555555555555555)
            v128 = 0xAAAAAAAAAAAAAAALL;
          else
            v128 = v126;
          *(_QWORD *)v229 = a4 + 2;
          if (v128)
            v129 = sub_1002596A8((uint64_t)(a4 + 2), v128);
          else
            v129 = 0;
          v130 = (uint64_t *)&v129[24 * v125];
          *(_QWORD *)buf = v129;
          *(_QWORD *)&buf[8] = v130;
          *(_QWORD *)&buf[24] = &v129[24 * v128];
          *v130 = v109;
          v130[1] = (uint64_t)v92;
          if (v92)
          {
            v131 = (unint64_t *)&v92->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
          }
          v129[24 * v125 + 16] = 0;
          *(_QWORD *)&buf[16] = v130 + 3;
          sub_1012BD3E4(a4, buf);
          v124 = a4[1];
          sub_1012BD480((uint64_t)buf);
          v67 = a2;
        }
        else
        {
          *(_QWORD *)v120 = v109;
          *(_QWORD *)(v120 + 8) = v92;
          if (v92)
          {
            v122 = (unint64_t *)&v92->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          *(_BYTE *)(v120 + 16) = 0;
          v124 = v120 + 24;
        }
        a4[1] = v124;
        if (v92)
        {
          v133 = (unint64_t *)&v92->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (!v92)
          continue;
        v135 = (unint64_t *)&v92->__shared_owners_;
        do
          v119 = __ldaxr(v135);
        while (__stlxr(v119 - 1, v135));
      }
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  if ((v54 & 1) == 0 && a4[1] != *a4)
  {
    v136 = sub_100CC2FEC(v179, &v186, 1);
    v137 = v136;
    if (v136)
    {
      sub_100CC3130(v136, v180 ^ 1);
      *((_QWORD *)v137 + 7) = *(_QWORD *)(v181 + 8);
      v138 = *a4;
      v139 = a4[1];
      if (*a4 != v139)
      {
        do
        {
          v140 = *(_QWORD **)v138;
          v141 = *(_QWORD *)(v138 + 8);
          *(_QWORD *)buf = *(_QWORD *)v138;
          *(_QWORD *)&buf[8] = v141;
          if (v141)
          {
            v142 = (unint64_t *)(v141 + 8);
            do
              v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }
          buf[16] = *(_BYTE *)(v138 + 16);
          if (v140)
          {
            if (*v140 == **a2)
            {
              v144 = 27;
            }
            else
            {
              if ((v180 & 1) != 0)
              {
                *v137 = 1;
                v145 = (char **)(v137 + 32);
              }
              else
              {
                v137[1] = 1;
                v145 = (char **)(v137 + 8);
              }
              sub_10033F68C(v145, (__int128 *)buf);
              v144 = 0;
            }
          }
          else
          {
            sub_100CC3130(v137, v180 ^ 1);
            *((_QWORD *)v137 + 7) = 0xBFF0000000000000;
            v144 = 26;
          }
          v146 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v147 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
          if (v144 != 27 && v144)
            break;
          v138 += 24;
        }
        while (v138 != v139);
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v149 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v150 = *(_QWORD *)(v181 + 8);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v150;
        _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v174 = *(_QWORD *)(v181 + 8);
        LODWORD(v192[0]) = 134217984;
        *(uint64_t *)((char *)v192 + 4) = v174;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created", COERCE_DOUBLE(v192));
        v176 = (char *)v175;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v175);
        if (v176 != buf)
          free(v176);
      }
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == a5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v151 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v152 = *(_QWORD *)(v181 + 8);
      v153 = **a2;
      v154 = (uint64_t *)(*a2)[17];
      v155 = (uint64_t *)(*a2)[18];
      if (v155 == v154)
      {
        v158 = 0;
        v156 = 0;
        v157 = 0;
        v159 = 0;
      }
      else
      {
        v156 = *v154;
        v157 = v154[1];
        v158 = *(v155 - 2);
        v159 = *(v155 - 1);
      }
      *(_DWORD *)buf = 134351105;
      *(_QWORD *)&buf[4] = v152;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v153;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v189;
      *(_WORD *)v229 = 2049;
      *(_QWORD *)&v229[2] = v156;
      *(_WORD *)&v229[10] = 2049;
      *(_QWORD *)&v229[12] = v157;
      *(_WORD *)&v229[20] = 2049;
      *(_QWORD *)&v229[22] = v158;
      v230 = 2049;
      v231 = v159;
      v232 = 2049;
      v233 = v209;
      v234 = 2049;
      v235 = *((_QWORD *)&v209 + 1);
      _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v164 = *(_QWORD *)(v181 + 8);
      v165 = **a2;
      v166 = (uint64_t *)(*a2)[17];
      v167 = (uint64_t *)(*a2)[18];
      if (v167 == v166)
      {
        v170 = 0;
        v168 = 0;
        v169 = 0;
        v171 = 0;
      }
      else
      {
        v168 = *v166;
        v169 = v166[1];
        v170 = *(v167 - 2);
        v171 = *(v167 - 1);
      }
      LODWORD(v192[0]) = 134351105;
      *(uint64_t *)((char *)v192 + 4) = v164;
      WORD2(v192[1]) = 2049;
      *(uint64_t *)((char *)&v192[1] + 6) = v165;
      HIWORD(v192[2]) = 2050;
      v192[3] = v189;
      v193 = 2049;
      v194 = v168;
      v195 = 2049;
      v196 = v169;
      v197 = 2049;
      v198 = v170;
      v199 = 2049;
      v200 = v171;
      v201 = 2049;
      v202 = v209;
      v203 = 2049;
      v204 = *((_QWORD *)&v209 + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", v192, 92);
      v173 = (char *)v172;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v172);
      if (v173 != buf)
        free(v173);
    }
  }
  v13 = 1;
LABEL_225:
  sub_1001A5CBC((uint64_t *)&v187);
  if (SHIBYTE(v214) < 0)
    operator delete(*((void **)&v213 + 1));
  return v13;
}

void sub_1012B9284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;

  STACK[0x2D0] = (unint64_t)&a33;
  sub_1002A3684((void ***)&STACK[0x2D0]);
  sub_1001A5CBC(&a28);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_1012B9384(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  double result;
  uint64_t v9;

  v4 = operator new(0x38uLL);
  v4[2] = *(_QWORD *)a2;
  *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  v4[4] = *(_QWORD *)(a2 + 16);
  v4[5] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = *(double *)(a2 + 32);
  *((double *)v4 + 6) = result;
  v9 = *a1;
  *v4 = *a1;
  v4[1] = a1;
  *(_QWORD *)(v9 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

uint64_t sub_1012B9400(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  uint8_t *v8;
  __int128 v9;
  uint8_t buf[4];
  uint64_t v11;

  if (*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v1 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection - Code not implemented", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection - Code not implemented", &v9, 2, v9);
LABEL_19:
      v8 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v2);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v7 = *(_QWORD *)(a1 + 8);
      LODWORD(v9) = 134349056;
      *(_QWORD *)((char *)&v9 + 4) = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", &v9, 12, v9);
      goto LABEL_19;
    }
  }
  return 0;
}

uint64_t sub_1012B9688(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5)
{
  uint64_t v6;
  int v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  char *i;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  uint8_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double *v63;
  double v64;
  double v65;
  uint64_t *v66;
  _QWORD *v67;
  double *v68;
  _QWORD *v69;
  double v70;
  double v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  uint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint8_t *v138;
  uint64_t v139;
  int v140;
  std::__shared_weak_count *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  _BYTE v148[22];
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  uint8_t buf[62];
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;

  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v17 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v148 = 134349056;
    *(_QWORD *)&v148[4] = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", v148, 12);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v18);
    goto LABEL_191;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v20 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    *(_WORD *)v148 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,fRoadGeometryBuffer is unexpectedly nullptr", v148, 2);
    v19 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v21);
    goto LABEL_191;
  }
  if (*a2)
  {
    v145 = &v145;
    v146 = (uint64_t *)&v145;
    v147 = 0;
    v142 = 0;
    v143 = 0;
    v11 = a5 ^ 1;
    v144 = 0;
    if (a3)
    {
      if ((sub_100CC6B44(v6, a2, &v142, v11) & 1) == 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v12 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToEndOfThisRoad returned false", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_70;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        *(_WORD *)v148 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToEndOfThisRoad returned false", v148, 2);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v13);
LABEL_196:
        if (v14 != buf)
          free(v14);
LABEL_70:
        v23 = 0;
LABEL_186:
        *(_QWORD *)buf = &v142;
        sub_1002A3684((void ***)buf);
        sub_1001A5CBC((uint64_t *)&v145);
        return v23;
      }
    }
    else if ((sub_100CC7304(v6, a2, &v142, v11) & 1) == 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v47 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToStartOfThisRoad returned false", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_70;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      *(_WORD *)v148 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToStartOfThisRoad returned false", v148, 2);
      v14 = (uint8_t *)v128;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v128);
      goto LABEL_196;
    }
    v140 = a5;
    v139 = a1;
    v24 = v142;
    for (i = v143; v24 != i; v24 += 16)
    {
      v26 = *(_QWORD *)v24;
      v27 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v148 = *(_QWORD *)v24;
      *(_QWORD *)&v148[8] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      if (v26)
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        memset(&buf[32], 0, 24);
        sub_100349198(buf, (uint64_t *)v148);
        v30 = operator new(0x48uLL);
        v31 = *(_QWORD *)&buf[8];
        v30[2] = *(_QWORD *)buf;
        v30[3] = v31;
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v34 = *(std::__shared_weak_count **)&buf[8];
        }
        else
        {
          v34 = 0;
        }
        v35 = *(_OWORD *)&buf[32];
        *((_OWORD *)v30 + 2) = *(_OWORD *)&buf[16];
        *((_OWORD *)v30 + 3) = v35;
        v30[8] = *(_QWORD *)&buf[48];
        v36 = (uint64_t)v145;
        *v30 = v145;
        v30[1] = &v145;
        *(_QWORD *)(v36 + 8) = v30;
        v145 = v30;
        ++v147;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      v39 = *(std::__shared_weak_count **)&v148[8];
      if (*(_QWORD *)&v148[8])
      {
        v40 = (unint64_t *)(*(_QWORD *)&v148[8] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    if ((a5 & 1) != 0)
    {
      v42 = *a2;
      v43 = (std::__shared_weak_count *)a2[1];
      v141 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        *(_QWORD *)buf = v42;
        *(_QWORD *)&buf[8] = v43;
        do
          v46 = __ldxr(v44);
        while (__stxr(v46 + 1, v44));
      }
      else
      {
        *(_QWORD *)buf = *a2;
        *(_QWORD *)&buf[8] = 0;
      }
      v48 = a3 ^ 1;
      buf[16] = a3 ^ 1;
      v49 = a4[1];
      if (v49 >= a4[2])
      {
        v53 = sub_1012BD2B8(a4, (uint64_t)buf);
      }
      else
      {
        *(_QWORD *)v49 = v42;
        v50 = *(_QWORD *)&buf[8];
        *(_QWORD *)(v49 + 8) = *(_QWORD *)&buf[8];
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
          v48 = buf[16];
        }
        *(_BYTE *)(v49 + 16) = v48;
        v53 = v49 + 24;
      }
      a4[1] = v53;
      v54 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (v141)
      {
        v57 = (unint64_t *)&v141->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
    }
    v59 = *(_QWORD *)(*a2 + 136);
    v60 = *(_QWORD *)(*a2 + 144);
    if (a3)
    {
      v61 = v60 - v59;
      if (v61)
      {
        v62 = (v61 >> 4) - 1;
        v63 = (double *)(v59 + 16 * v62);
LABEL_94:
        v64 = *v63;
        v65 = *(double *)(v59 + 16 * v62 + 8);
        goto LABEL_96;
      }
    }
    else if (v60 != v59)
    {
      v62 = 0;
      v63 = *(double **)(*a2 + 136);
      goto LABEL_94;
    }
    v64 = 0.0;
    v65 = 0.0;
LABEL_96:
    v66 = v146;
    if (v146 == (uint64_t *)&v145)
    {
LABEL_176:
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == v140)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v117 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v118 = *(_QWORD *)(v139 + 8);
          v119 = *(_QWORD *)*a2;
          v120 = *(uint64_t **)(*a2 + 136);
          v121 = *(uint64_t **)(*a2 + 144);
          if (v121 == v120)
          {
            v124 = 0;
            v122 = 0;
            v123 = 0;
            v125 = 0;
          }
          else
          {
            v122 = *v120;
            v123 = v120[1];
            v124 = *(v121 - 2);
            v125 = *(v121 - 1);
          }
          *(_DWORD *)buf = 134351105;
          *(_QWORD *)&buf[4] = v118;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v119;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v147;
          *(_WORD *)&buf[32] = 2049;
          *(_QWORD *)&buf[34] = v122;
          *(_WORD *)&buf[42] = 2049;
          *(_QWORD *)&buf[44] = v123;
          *(_WORD *)&buf[52] = 2049;
          *(_QWORD *)&buf[54] = v124;
          v164 = 2049;
          v165 = v125;
          v166 = 2049;
          v167 = v64;
          v168 = 2049;
          v169 = v65;
          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads in buffer, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021AD038);
          v129 = *(_QWORD *)(v139 + 8);
          v130 = *(_QWORD *)*a2;
          v131 = *(uint64_t **)(*a2 + 136);
          v132 = *(uint64_t **)(*a2 + 144);
          if (v132 == v131)
          {
            v135 = 0;
            v133 = 0;
            v134 = 0;
            v136 = 0;
          }
          else
          {
            v133 = *v131;
            v134 = v131[1];
            v135 = *(v132 - 2);
            v136 = *(v132 - 1);
          }
          *(_DWORD *)v148 = 134351105;
          *(_QWORD *)&v148[4] = v129;
          *(_WORD *)&v148[12] = 2049;
          *(_QWORD *)&v148[14] = v130;
          v149 = 2050;
          v150 = v147;
          v151 = 2049;
          v152 = v133;
          v153 = 2049;
          v154 = v134;
          v155 = 2049;
          v156 = v135;
          v157 = 2049;
          v158 = v136;
          v159 = 2049;
          v160 = v64;
          v161 = 2049;
          v162 = v65;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads in buffer, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", v148, 92);
          v138 = (uint8_t *)v137;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v137);
          if (v138 != buf)
            free(v138);
        }
      }
      v23 = 1;
      goto LABEL_186;
    }
    while (1)
    {
      v67 = (_QWORD *)v66[2];
      if (*v67 != *(_QWORD *)*a2)
      {
        v69 = v67 + 17;
        v68 = (double *)v67[17];
        if ((double *)v69[1] == v68)
        {
          v70 = 0.0;
          v71 = 0.0;
        }
        else
        {
          v70 = *v68;
          v71 = v68[1];
        }
        if (sub_100512A74(v64, v65, v70, v71, 0.0000001))
        {
          v72 = v66[2];
          v73 = (std::__shared_weak_count *)v66[3];
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
            *(_QWORD *)v148 = v72;
            *(_QWORD *)&v148[8] = v73;
            do
              v76 = __ldxr(v74);
            while (__stxr(v76 + 1, v74));
          }
          else
          {
            *(_QWORD *)v148 = v66[2];
            *(_QWORD *)&v148[8] = 0;
          }
          v148[16] = 1;
          v80 = a4[1];
          v81 = a4[2];
          if (v80 >= v81)
          {
            v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *a4) >> 3);
            v86 = v85 + 1;
            if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *a4) >> 3);
            if (2 * v87 > v86)
              v86 = 2 * v87;
            if (v87 >= 0x555555555555555)
              v88 = 0xAAAAAAAAAAAAAAALL;
            else
              v88 = v86;
            *(_QWORD *)&buf[32] = a4 + 2;
            if (v88)
              v89 = sub_1002596A8((uint64_t)(a4 + 2), v88);
            else
              v89 = 0;
            v94 = (uint64_t *)&v89[24 * v85];
            *(_QWORD *)buf = v89;
            *(_QWORD *)&buf[8] = v94;
            *(_QWORD *)&buf[24] = &v89[24 * v88];
            *v94 = v72;
            v94[1] = (uint64_t)v73;
            if (v73)
            {
              v95 = (unint64_t *)&v73->__shared_owners_;
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            v89[24 * v85 + 16] = 1;
            *(_QWORD *)&buf[16] = v94 + 3;
            sub_1012BD3E4(a4, buf);
            v84 = a4[1];
            sub_1012BD480((uint64_t)buf);
          }
          else
          {
            *(_QWORD *)v80 = v72;
            *(_QWORD *)(v80 + 8) = v73;
            if (v73)
            {
              v82 = (unint64_t *)&v73->__shared_owners_;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            *(_BYTE *)(v80 + 16) = 1;
            v84 = v80 + 24;
          }
          a4[1] = v84;
          if (v73)
          {
            v97 = (unint64_t *)&v73->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          if (!v73)
            goto LABEL_175;
          v99 = (unint64_t *)&v73->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
        }
        else
        {
          v77 = *(_QWORD *)(v66[2] + 144);
          if (v77 == *(_QWORD *)(v66[2] + 136))
          {
            v78 = 0.0;
            v79 = 0.0;
          }
          else
          {
            v78 = *(double *)(v77 - 16);
            v79 = *(double *)(v77 - 8);
          }
          if (!sub_100512A74(v64, v65, v78, v79, 0.0000001))
            goto LABEL_175;
          v90 = v66[2];
          v73 = (std::__shared_weak_count *)v66[3];
          if (v73)
          {
            v91 = (unint64_t *)&v73->__shared_owners_;
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
            *(_QWORD *)v148 = v90;
            *(_QWORD *)&v148[8] = v73;
            do
              v93 = __ldxr(v91);
            while (__stxr(v93 + 1, v91));
          }
          else
          {
            *(_QWORD *)v148 = v66[2];
            *(_QWORD *)&v148[8] = 0;
          }
          v148[16] = 0;
          v101 = a4[1];
          v102 = a4[2];
          if (v101 >= v102)
          {
            v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *a4) >> 3);
            v107 = v106 + 1;
            if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - *a4) >> 3);
            if (2 * v108 > v107)
              v107 = 2 * v108;
            if (v108 >= 0x555555555555555)
              v109 = 0xAAAAAAAAAAAAAAALL;
            else
              v109 = v107;
            *(_QWORD *)&buf[32] = a4 + 2;
            if (v109)
              v110 = sub_1002596A8((uint64_t)(a4 + 2), v109);
            else
              v110 = 0;
            v111 = (uint64_t *)&v110[24 * v106];
            *(_QWORD *)buf = v110;
            *(_QWORD *)&buf[8] = v111;
            *(_QWORD *)&buf[24] = &v110[24 * v109];
            *v111 = v90;
            v111[1] = (uint64_t)v73;
            if (v73)
            {
              v112 = (unint64_t *)&v73->__shared_owners_;
              do
                v113 = __ldxr(v112);
              while (__stxr(v113 + 1, v112));
            }
            v110[24 * v106 + 16] = 0;
            *(_QWORD *)&buf[16] = v111 + 3;
            sub_1012BD3E4(a4, buf);
            v105 = a4[1];
            sub_1012BD480((uint64_t)buf);
          }
          else
          {
            *(_QWORD *)v101 = v90;
            *(_QWORD *)(v101 + 8) = v73;
            if (v73)
            {
              v103 = (unint64_t *)&v73->__shared_owners_;
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            *(_BYTE *)(v101 + 16) = 0;
            v105 = v101 + 24;
          }
          a4[1] = v105;
          if (v73)
          {
            v114 = (unint64_t *)&v73->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          if (!v73)
            goto LABEL_175;
          v116 = (unint64_t *)&v73->__shared_owners_;
          do
            v100 = __ldaxr(v116);
          while (__stlxr(v100 - 1, v116));
        }
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
LABEL_175:
      v66 = (uint64_t *)v66[1];
      if (v66 == (uint64_t *)&v145)
        goto LABEL_176;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
  v22 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    *(_WORD *)v148 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr", v148, 2);
    v19 = (uint8_t *)v127;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v127);
LABEL_191:
    if (v19 != buf)
      free(v19);
  }
  return 0;
}

void sub_1012BA690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a19;
  sub_1002A3684(&a25);
  sub_1001A5CBC(&a22);
  _Unwind_Resume(a1);
}

unint64_t sub_1012BA74C(uint64_t a1, uint64_t a2, unint64_t *a3, int a4, double a5, double a6)
{
  void *v12;
  unint64_t v13;
  double v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  float v54;
  float v55;
  double v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  double v60;
  double v61;
  NSObject *v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  char v67;
  float v68;
  double v69;
  const char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  uint64_t v74;
  __int16 v75;
  _QWORD *v76[2];
  double v77;
  __int128 v78;
  uint64_t *v79[2];
  uint64_t v80[4];
  _BYTE buf[12];
  __int16 v82;
  uint64_t v83;

  v12 = objc_autoreleasePoolPush();
  v13 = *a3;
  if (!*a3)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v23 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    LOWORD(v80[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "#Warning,CLMMPED,input road is nullptr", v80, 2);
    v22 = (char *)v24;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v24);
    goto LABEL_128;
  }
  sub_1004078E0((_QWORD *)*a3);
  v14 = *(double *)(v13 + 40);
  if (v14 <= 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    LOWORD(v80[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "#Warning,CLMMPED, road length is 0.0", v80, 2);
    v22 = (char *)v70;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v70);
    goto LABEL_128;
  }
  v15 = (uint64_t *)*a3;
  if ((int)((*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4) <= 1)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)*a3;
      v18 = (int)((uint64_t)(*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4);
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)&buf[4] = v17;
      v82 = 2050;
      v83 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v19 = *(_QWORD *)*a3;
    v20 = (int)((uint64_t)(*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4);
    LODWORD(v80[0]) = 134283777;
    *(uint64_t *)((char *)v80 + 4) = v19;
    WORD2(v80[1]) = 2050;
    *(uint64_t *)((char *)&v80[1] + 6) = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", v80, 22);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v21);
LABEL_128:
    if (v22 != buf)
      free(v22);
LABEL_25:
    objc_autoreleasePoolPop(v12);
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  v27 = fabs(a6);
  v28 = *((unsigned __int8 *)a3 + 20);
  v29 = 1.0 - a5;
  if (*((_BYTE *)a3 + 20))
  {
    if (a6 < 0.0)
      v29 = a5;
    v30 = v29 * v14;
    if (v29 * v14 <= v27)
    {
      HIDWORD(v74) = 0;
      if (a6 < 0.0)
        v31 = 0.0;
      else
        v31 = 1.0;
      goto LABEL_43;
    }
  }
  else
  {
    if (a6 >= 0.0)
      v29 = a5;
    v30 = v29 * v14;
    if (v29 * v14 <= v27)
    {
      HIDWORD(v74) = 0;
      if (a6 >= 0.0)
        v31 = 0.0;
      else
        v31 = 1.0;
      goto LABEL_43;
    }
  }
  v32 = a6 / v14;
  if (!*((_BYTE *)a3 + 20))
    v32 = -v32;
  v31 = v32 + a5;
  HIDWORD(v74) = 1;
LABEL_43:
  memset(v80, 0, 24);
  if ((a4 & 0x80000000) == 0 && v30 <= v27)
  {
    v13 = a3[1];
    v79[0] = v15;
    v79[1] = (uint64_t *)v13;
    if (v13)
    {
      v33 = (unint64_t *)(v13 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v28 = *((unsigned __int8 *)a3 + 20);
    }
    v35 = sub_1012B8034(a1, v79, v28 != 0, v80, 1, 10.0);
    if (v13)
    {
      v36 = (unint64_t *)(v13 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
    }
    if ((v35 & 1) == 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v13 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v13, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,moveOnRoad,findAllDigitizedRoads returned false", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v78) = 0;
        LODWORD(v74) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,Warning,moveOnRoad,findAllDigitizedRoads returned false", &v78, v74);
        v13 = (unint64_t)v73;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v73);
        if ((_BYTE *)v13 != buf)
          free((void *)v13);
      }
    }
  }
  if (a6 >= 0.0 || (v38 = v80[0], v39 = v80[1], v80[0] == v80[1]))
  {
    v41 = -1;
  }
  else
  {
    v40 = 0;
    v41 = -1;
    do
    {
      v42 = *(_QWORD **)v38;
      v13 = *(_QWORD *)(v38 + 8);
      if (v13)
      {
        v43 = (unint64_t *)(v13 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = a2;
      while (1)
      {
        v45 = *(_QWORD *)(v45 + 8);
        if (v45 == a2)
          break;
        if (*(_QWORD *)(v45 + 16) == *v42 && (*(_BYTE *)(v45 + 24) & 1) == *(_BYTE *)(v38 + 16))
        {
          v41 = v40;
          break;
        }
      }
      if (v13)
      {
        v47 = (unint64_t *)(v13 + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v13 + 16))(v13);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
        }
      }
      if ((v41 & 0x80000000) == 0)
        break;
      ++v40;
      v38 += 24;
    }
    while (v38 != v39);
  }
  if ((v74 & 0x100000000) != 0
    || (a6 < 0.0 ? (v57 = v41 == -1) : (v57 = 0),
        !v57 ? (v58 = 0) : (v58 = 1),
        a4 < 0 || (v59 = v80[0], v80[1] == v80[0]) || v58))
  {
    v49 = (std::__shared_weak_count *)a3[1];
    v76[0] = (_QWORD *)*a3;
    v76[1] = &v49->__vftable;
    v77 = 0.0;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(p_shared_owners);
      while (__stxr(v51 + 1, p_shared_owners));
    }
    LOBYTE(v13) = sub_1012BB28C((double *)(a1 + 56), v76, (double *)&v78, &v77, v31);
    if (v49)
    {
      v52 = (unint64_t *)&v49->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((v13 & 1) != 0)
    {
      *((double *)a3 + 6) = v31;
      *((_OWORD *)a3 + 2) = v78;
      v54 = v77;
      *((float *)a3 + 6) = v54;
      if (!*((_BYTE *)a3 + 20))
      {
        v55 = v54 + 180.0;
        *((float *)a3 + 6) = v55;
        sub_1001C6800(v55);
        *(float *)&v56 = v56;
        *((_DWORD *)a3 + 6) = LODWORD(v56);
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v62 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRoadInternal,interpolateProjections returned false", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v75 = 0;
        LODWORD(v74) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning CLMMPED,moveOnRoadInternal,interpolateProjections returned false", &v75, v74);
        v72 = (char *)v71;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
    }
    v63 = 0;
    goto LABEL_123;
  }
  v60 = -v30;
  if (a6 < 0.0)
    v60 = v30;
  v61 = v60 + a6;
  if ((v41 & 0x80000000) != 0)
  {
    v64 = sub_10100A8F4(a1 + 96);
    v59 = v80[0];
    v13 = v64 % (0xAAAAAAAAAAAAAAABLL * ((v80[1] - v80[0]) >> 3));
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v80[1] - v80[0]) >> 3) <= v41)
      goto LABEL_122;
    v13 = v41;
  }
  v65 = v59 + 24 * v13;
  v66 = *(unsigned __int8 *)(v65 + 16);
  sub_100349198(a3, (uint64_t *)v65);
  v67 = *(_BYTE *)(v80[0] + 24 * v13 + 16);
  *((_BYTE *)a3 + 20) = v67;
  if (v66)
  {
    v31 = 0.0;
    if (a6 >= 0.0)
      goto LABEL_122;
    goto LABEL_121;
  }
  v68 = *((float *)a3 + 6) + 180.0;
  *((float *)a3 + 6) = v68;
  sub_1001C6800(v68);
  *(float *)&v69 = v69;
  *((_DWORD *)a3 + 6) = LODWORD(v69);
  v31 = 1.0;
  if (a6 < 0.0)
  {
    v67 = *(_BYTE *)(v80[0] + 24 * v13 + 16);
LABEL_121:
    *((_BYTE *)a3 + 20) = v67 ^ 1;
  }
LABEL_122:
  v63 = 1;
  a6 = v61;
LABEL_123:
  *(_QWORD *)buf = v80;
  sub_1012BD248((void ***)buf);
  objc_autoreleasePoolPop(v12);
  if (v63)
    LOBYTE(v13) = sub_1012BA74C(a1, a2, a3, (a4 - 1), v31, a6);
  return v13 & 1;
}

void sub_1012BB23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  sub_1012BD248(&a23);
  _Unwind_Resume(a1);
}

BOOL sub_1012BB28C(double *a1, _QWORD **a2, double *a3, double *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  _BOOL4 v22;
  _BOOL8 result;
  double *v24;
  double v25;
  double *v26;
  NSObject *v27;
  double *v28;
  double v29;
  NSObject *v30;
  double *v31;
  double *v32;
  uint64_t v33;
  double v34;
  int v35;
  double v36;
  NSObject *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  long double v55;
  uint64_t v56;
  NSObject *v57;
  _BOOL4 v58;
  uint64_t v59;
  double __y[2];
  double __x[205];

  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v27 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__x[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)__x, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(__x, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      LOWORD(__y[0]) = 0;
      v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", __y, 2);
    }
    else
    {
      if ((_DWORD)v6 == 1)
        return 1;
      sub_1004078E0(*a2);
      v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == (_DWORD)v6 - 1)
      {
        v13 = (uint64_t)*a2;
        sub_1004078E0((_QWORD *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(_QWORD *)(v13 + 136);
          v14 = *a3;
          v15 = a3[1];
          v16 = *(double **)(v13 + 136);
LABEL_7:
          v17 = v16[2];
          v18 = v16[3];
          __x[0] = 0.0;
          v59 = 0;
          __y[0] = 0.0;
          sub_10011E780(a1, __x, __y, (double *)&v59, v14, v15, 0.0, v17, v18, 0.0);
          v19 = atan2(__y[0], __x[0]);
          if (v19 < 0.0)
            v19 = v19 + 6.28318531;
          v20 = v19 * 57.2957795;
          goto LABEL_54;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + 16 * v12);
          v20 = sub_10073C714(a1, *(double *)(*(_QWORD *)(v13 + 136) + 16 * v12 - 16), *(double *)(*(_QWORD *)(v13 + 136) + 16 * v12 - 8), *a3, a3[1]);
LABEL_54:
          *a4 = v20;
          return 1;
        }
        v31 = (double *)v5[20];
        v32 = (double *)v5[21];
        if (v31 != v32)
        {
          v33 = 0;
          v34 = 0.0;
          v35 = 2;
          while (1)
          {
            v36 = *v31 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v34 + v36) < 0.000001)
              break;
            if (v34 + v36 > a5)
            {
              v51 = (a5 - v34) / v36;
              v52 = (double *)(*(_QWORD *)(v13 + 136) + v33);
              v53 = v52[1];
              v54 = v52[3];
              *a3 = *v52 + (v52[2] - *v52) * v51;
              v55 = v53 + sub_1010B9110(v53, v54) * v51;
              a3[1] = v55;
              sub_100080DCC(v55);
              *((_QWORD *)a3 + 1) = v56;
              v16 = (double *)(*(_QWORD *)(v13 + 136) + v33);
              v14 = *v16;
              v15 = v16[1];
              goto LABEL_7;
            }
            ++v31;
            v33 += 16;
            ++v35;
            v34 = v34 + v36;
            if (v31 == v32)
              goto LABEL_45;
          }
          if (v35 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + v33 + 16);
            v38 = (double *)(*(_QWORD *)(v13 + 136) + v33);
            v39 = *v38;
            v40 = v38[1];
            v41 = *a3;
            v42 = a3[1];
            __x[0] = 0.0;
            v59 = 0;
            __y[0] = 0.0;
            sub_10011E780(a1, __x, __y, (double *)&v59, v39, v40, 0.0, v41, v42, 0.0);
            v43 = atan2(__y[0], __x[0]);
            if (v43 < 0.0)
              v43 = v43 + 6.28318531;
            v44 = v43 * 57.2957795;
            v45 = *a3;
            v46 = a3[1];
            v47 = *(_QWORD *)(v13 + 136) + v33;
            v48 = *(double *)(v47 + 32);
            v49 = *(double *)(v47 + 40);
            __x[0] = 0.0;
            v59 = 0;
            __y[0] = 0.0;
            sub_10011E780(a1, __x, __y, (double *)&v59, v45, v46, 0.0, v48, v49, 0.0);
            v50 = atan2(__y[0], __x[0]);
            if (v50 < 0.0)
              v50 = v50 + 6.28318531;
            sub_100512AA0(v44, v50 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021AD038);
          v57 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)__x, 2u);
          }
          v58 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v58)
          {
            bzero(__x, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021AD038);
            LOWORD(__y[0]) = 0;
            v25 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", __y, 2);
LABEL_18:
            v26 = v24;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v25);
LABEL_36:
            if (v26 != __x)
              free(v26);
            return 0;
          }
          return result;
        }
LABEL_45:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v37 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)__x, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(__x, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(__y[0]) = 0;
        v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", __y, 2);
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        v30 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)__x, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(__x, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(__y[0]) = 0;
        v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", __y, 2);
      }
    }
    v26 = v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v29);
    goto LABEL_36;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
  v21 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)__x, 2u);
  }
  v22 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v22)
  {
    bzero(__x, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    LOWORD(__y[0]) = 0;
    v25 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", __y, 2);
    goto LABEL_18;
  }
  return result;
}

unint64_t sub_1012BBA74(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (*(_BYTE *)(a1 + 32))
  {
    v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      v5 = a4;
      if (a4 < -1050.0)
        v5 = -1050.0;
    }
    return sub_1012BA74C(a1, a3, (unint64_t *)a2, 30, *(double *)(a2 + 48), v5);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v9 = *(_QWORD *)(a1 + 8);
      v12 = 134349056;
      v13 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 0;
  }
}

uint64_t sub_1012BBCA0(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4, double a5, double a6)
{
  double *v8;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  _BOOL8 v28;
  double v30;
  double v31;
  double v32;
  std::__shared_weak_count *v33;
  double v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  float v39;
  float v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  int v47;
  __n128 v48;
  float v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const char *v57;
  NSObject *v58;
  const char *v59;
  uint8_t *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  _QWORD *v67[2];
  double v68;
  _BYTE v69[28];
  uint8_t buf[4];
  uint64_t v71;
  __int16 v72;
  _QWORD v73[203];

  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v71 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v23 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v69 = 134349056;
    *(_QWORD *)&v69[4] = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", v69, 12);
    v20 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v24);
    goto LABEL_93;
  }
  v8 = (double *)*a2;
  if (!*a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    *(_WORD *)v69 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "#Warning,CLMMPED,input road is nullptr", v69, 2);
    v20 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v26);
    goto LABEL_93;
  }
  sub_1004078E0(*a2);
  v13 = v8[5];
  if (v13 <= 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v27 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    *(_WORD *)v69 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "#Warning,CLMMPED, road length is 0.0", v69, 2);
    v20 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v65);
    goto LABEL_93;
  }
  if ((int)((unint64_t)((*a2)[18] - (*a2)[17]) >> 4) <= 1)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v15 = **a2;
      v16 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
      *(_DWORD *)buf = 134283777;
      v71 = v15;
      v72 = 2050;
      v73[0] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v17 = **a2;
    v18 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
    *(_DWORD *)v69 = 134283777;
    *(_QWORD *)&v69[4] = v17;
    *(_WORD *)&v69[12] = 2050;
    *(_QWORD *)&v69[14] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", v69, 22);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v19);
LABEL_93:
    if (v20 != buf)
      free(v20);
    return 0;
  }
  v30 = 1.0 - a5;
  if (!*((_BYTE *)a2 + 20))
    v30 = a5;
  v31 = v13 * v30;
  if (v13 * v30 > fabs(a6))
  {
    v32 = a6 / v13;
    if (!*((_BYTE *)a2 + 20))
      v32 = -v32;
    v33 = (std::__shared_weak_count *)a2[1];
    v34 = v32 + a5;
    v67[0] = *a2;
    v67[1] = &v33->__vftable;
    v68 = 0.0;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    v28 = sub_1012BB28C((double *)(a1 + 56), v67, (double *)v69, &v68, v32 + a5);
    if (v33)
    {
      v37 = (unint64_t *)&v33->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v28)
    {
      *((double *)a2 + 6) = v34;
      *((_OWORD *)a2 + 2) = *(_OWORD *)v69;
      v39 = v68;
      *((float *)a2 + 6) = v39;
      if (!*((_BYTE *)a2 + 20))
      {
        v40 = v39 + 180.0;
        *((float *)a2 + 6) = v40;
        sub_1001C6800(v40);
        *(float *)&v41 = v41;
        *((_DWORD *)a2 + 6) = LODWORD(v41);
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v58 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRouteRoads,interpolateProjections returned false", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v66) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning CLMMPED,moveOnRouteRoads,interpolateProjections returned false", &v66, 2);
        v60 = (uint8_t *)v59;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
    }
    return v28;
  }
  v42 = *a4;
  v43 = v42 + 1;
  *a4 = v42 + 1;
  if ((int)v42 > 9 || a3[2] <= v43)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v50 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v51 = *(_QWORD *)(a1 + 8);
      v52 = *a4;
      v53 = a3[2];
      *(_DWORD *)buf = 134218496;
      v71 = v51;
      v72 = 1024;
      LODWORD(v73[0]) = v52;
      WORD2(v73[0]) = 2048;
      *(_QWORD *)((char *)v73 + 6) = v53;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%.3lf, no more route roads available to cover the distance travelled,index,%d,size,%lu", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v54 = *(_QWORD *)(a1 + 8);
    v55 = *a4;
    v56 = a3[2];
    *(_DWORD *)v69 = 134218496;
    *(_QWORD *)&v69[4] = v54;
    *(_WORD *)&v69[12] = 1024;
    *(_DWORD *)&v69[14] = v55;
    *(_WORD *)&v69[18] = 2048;
    *(_QWORD *)&v69[20] = v56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%.3lf, no more route roads available to cover the distance travelled,index,%d,size,%lu", COERCE_DOUBLE(v69), 28, v66);
    v20 = (uint8_t *)v57;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v57);
    goto LABEL_93;
  }
  v44 = (uint64_t *)a3[1];
  if ((int)v42 <= -2)
  {
    do
      v44 = (uint64_t *)*v44;
    while (!__CFADD__(v43++, 1));
  }
  else if ((_DWORD)v42 != -1)
  {
    v45 = v42 + 2;
    do
    {
      v44 = (uint64_t *)v44[1];
      --v45;
    }
    while (v45 > 1);
  }
  if (v44 == a3)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v61 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v62 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134217984;
      v71 = v62;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "CLMMPED,%.3lf, unexpectedly reached to the end of routeRoadList", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v63 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v69 = 134217984;
    *(_QWORD *)&v69[4] = v63;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%.3lf, unexpectedly reached to the end of routeRoadList", COERCE_DOUBLE(v69));
    v20 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v64);
    goto LABEL_93;
  }
  v47 = *((unsigned __int8 *)v44 + 36);
  sub_100349198(a2, v44 + 2);
  *((_BYTE *)a2 + 20) = *((_BYTE *)v44 + 36);
  v48.n128_u64[0] = 0;
  if (!v47)
  {
    v49 = *((float *)a2 + 6) + 180.0;
    *((float *)a2 + 6) = v49;
    sub_1001C6800(v49);
    v48.n128_f32[0] = v48.n128_f64[0];
    *((_DWORD *)a2 + 6) = v48.n128_u32[0];
    v48.n128_u64[0] = 1.0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *, int *, __n128, double))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, v48, a6 - v31);
}

void sub_1012BC858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012BC874(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      sub_100CC3224(v2, 0.5, 0.5);
    sub_100CC3260(a1 + 2616, *(double *)(a1 + 8), 60.0, 60.0);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v5 = *(_QWORD *)(a1 + 8);
      v8 = 134349056;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::clearStoredStaleConnections()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1012BCA84(uint64_t a1)
{
  sub_1010CDCEC(a1);
  operator delete();
}

uint64_t sub_1012BCAA8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 2648))
    return 3;
  else
    return 2;
}

uint64_t sub_1012BCABC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2648);
}

void sub_1012BCAC4(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1012BCAF0(_QWORD *a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  void *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;

  if (a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v29 = objc_msgSend(a2, "code");
      v30 = 2114;
      v31 = objc_msgSend(a2, "domain");
      v32 = 2113;
      v33 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v10 = qword_1022A00D8;
      v22 = 134349571;
      v23 = objc_msgSend(a2, "code");
      v24 = 2114;
      v25 = objc_msgSend(a2, "domain");
      v26 = 2113;
      v27 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v22, 32);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      v29 = v6;
      v30 = 1026;
      LODWORD(v31) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v13 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
      v14 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v22 = 134349312;
      v23 = v13;
      v24 = 1026;
      LODWORD(v25) = v14;
      LODWORD(v21) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", &v22, v21);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v8 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,clearing dispatchGroup when time-out has happened", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }

      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021AD038);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,dispatchGroup is unexpectedly nil", &v22, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
}

void sub_1012BD160()
{
  operator delete();
}

__n128 sub_1012BD174(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021AD068;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1012BD1B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021AD068;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_1012BD1DC(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 2600), "findRoadsNear:radius:handler:completionHandler:", **(_QWORD **)(a1 + 32), *a2, **(double **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 16) + 8), **(double **)(a1 + 24));
}

uint64_t sub_1012BD200(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012BD23C()
{
}

void sub_1012BD248(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100261F44(v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1012BD2B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[24 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v10[24 * v4 + 16] = *(_BYTE *)(a2 + 16);
  v17[2] = v11 + 3;
  sub_1012BD3E4(a1, v17);
  v15 = a1[1];
  sub_1012BD480((uint64_t)v17);
  return v15;
}

void sub_1012BD3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1012BD480((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1012BD3E4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    v5 = result[1];
    v6 = a2[1];
    do
    {
      v7 = *(_QWORD *)(v5 - 24);
      v5 -= 24;
      *(_QWORD *)(v6 - 24) = v7;
      v6 -= 24;
      v8 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v6 + 8) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *(_BYTE *)(v4 - 8) = *(_BYTE *)(v3 - 8);
      v3 = v5;
      v4 = v6;
    }
    while (v5 != v2);
  }
  a2[1] = v6;
  v11 = *result;
  *result = v6;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1012BD480(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_100261F44(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1012BD558(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v4 = *(_QWORD *)(a1 + 616);
  if (v4)
  {
    sub_1012C3B64(v4, a2, a3, a4);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,EmergencyContactsMetric nil object", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleIDSBatchIDQueryResponse,EmergencyContactsMetric nil object", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1012BD720(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p;

  *a1 = a2;
  sub_1015A2E04(&__p, "#ADR,state machine");
  v3 = a1;
  operator new();
}

void sub_1012BDA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  sub_100261F44((uint64_t)&a11);
  sub_1012C4804((uint64_t *)(v19 + 384), 0);
  sub_1012D2AE4((uint64_t *)(v19 + 376), 0);
  sub_100127554(v19 + 328);
  sub_100067AC4(v19 + 216);
  sub_100127554(v24);
  sub_100067AC4(v23);
  if (*(char *)(v25 + 263) < 0)
    operator delete(*(void **)(v25 + 240));
  v26 = *(_QWORD **)(v25 + 224);
  if (v26 == v22)
  {
    v27 = 4;
    v26 = v22;
  }
  else
  {
    if (!v26)
      goto LABEL_8;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_8:
  v28 = *(_QWORD **)(v25 + 192);
  if (v28 == v21)
  {
    v29 = 4;
    v28 = v21;
  }
  else
  {
    if (!v28)
      goto LABEL_13;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_13:
  v30 = *(_QWORD **)(v25 + 160);
  if (v30 == v20)
  {
    v31 = 4;
    v30 = v20;
  }
  else
  {
    if (!v30)
      goto LABEL_18;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_18:
  sub_1012D84A4(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1012BDB9C()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#ADR,deletePreCachedAdrInfo", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,deletePreCachedAdrInfo", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::deletePreCachedAdrInfo()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100119F3C(buf);
  v1 = sub_1001FD94C();
  if (byte_10230DFA7 >= 0)
    v2 = (const char *)&qword_10230DF90;
  else
    v2 = (const char *)qword_10230DF90;
  sub_1000CADE4(v1, v2, (uint64_t)buf);
  v3 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
  return sub_10011A5A8(buf);
}

void sub_1012BDD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BDD80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  id v16;
  std::string *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  const char *v22;
  id v23;
  std::string *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  std::string *v28;
  const char *v29;
  NSObject *v30;
  int v31;
  uint64_t *v32;
  std::string *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  uint64_t *v37;
  id v38;
  NSObject *v39;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  uint64_t v61;
  void *__p[2];
  char v63;
  int v64[4];
  std::string v65;
  std::string v66;
  _QWORD v67[2];
  uint8_t buf[1640];

  v2 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
  sub_100119F3C(v67);
  v3 = sub_1001FD94C();
  if (byte_10230DFA7 >= 0)
    v4 = (const char *)&qword_10230DF90;
  else
    v4 = (const char *)qword_10230DF90;
  if (sub_100006BB4(v3, v4, v67))
  {
    if (byte_10230DFBF >= 0)
      v5 = (const char *)&qword_10230DFA8;
    else
      v5 = (const char *)qword_10230DFA8;
    if ((sub_1001FD98C((uint64_t)v67, v5, (void *)(a1 + 504)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no time of last clear failure", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,loadPreCachedAdrInfo,no time of last clear failure", &v66, 2);
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
    }
    if (byte_10230DFD7 >= 0)
      v7 = (const char *)&qword_10230DFC0;
    else
      v7 = (const char *)qword_10230DFC0;
    if ((sub_1001E4B84((uint64_t)v67, v7, (_DWORD *)(a1 + 512)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no clear failure count", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,loadPreCachedAdrInfo,no clear failure count", &v66, v61);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
    }
    if (byte_10230DFEF >= 0)
      v9 = (const char *)&qword_10230DFD8;
    else
      v9 = (const char *)qword_10230DFD8;
    if ((sub_1001FD98C((uint64_t)v67, v9, (void *)(a1 + 520)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no time of last cache failure", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,loadPreCachedAdrInfo,no time of last cache failure", &v66, v61);
        v46 = (uint8_t *)v45;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
    }
    if (byte_10230E007 >= 0)
      v11 = (const char *)&qword_10230DFF0;
    else
      v11 = (const char *)qword_10230DFF0;
    if ((sub_1001E4B84((uint64_t)v67, v11, (_DWORD *)(a1 + 528)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no send failure count", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,loadPreCachedAdrInfo,no send failure count", &v66, v61);
        v48 = (uint8_t *)v47;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
    }
    if (byte_10230E01F >= 0)
      v13 = (const char *)&qword_10230E008;
    else
      v13 = (const char *)qword_10230E008;
    if ((sub_1001FD98C((uint64_t)v67, v13, (void *)(a1 + 536)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no time of last cache success", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,loadPreCachedAdrInfo,no time of last cache success", &v66, v61);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
    }
    memset(&v66, 0, sizeof(v66));
    if (byte_10230E037 >= 0)
      v15 = (const char *)&qword_10230E020;
    else
      v15 = (const char *)qword_10230E020;
    if (sub_1000BCB64((uint64_t)v67, v15, &v66))
    {

      v16 = objc_alloc((Class)NSData);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v66;
      else
        v17 = (std::string *)v66.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 544) = objc_msgSend(v16, "initWithBase64EncodedString:options:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17), 0);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no cloaking key", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v65.__r_.__value_.__l.__data_) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,loadPreCachedAdrInfo,no cloaking key", &v65, v61);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
    }
    memset(&v65, 0, sizeof(v65));
    if (byte_10230E04F >= 0)
      v22 = (const char *)&qword_10230E038;
    else
      v22 = (const char *)qword_10230E038;
    if (sub_1000BCB64((uint64_t)v67, v22, &v65))
    {

      v23 = objc_alloc((Class)NSData);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v65;
      else
        v24 = (std::string *)v65.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 552) = objc_msgSend(v23, "initWithBase64EncodedString:options:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24), 0);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no medical ID hash", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v64[0]) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,loadPreCachedAdrInfo,no medical ID hash", v64, v61);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
    }
    v26 = byte_10230E067;
    v27 = qword_10230E050;
    v64[0] = 0;
    *(_QWORD *)buf = v64;
    v28 = (std::string *)sub_1009707B4(a1 + 560, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    if (v26 >= 0)
      v29 = (const char *)&qword_10230E050;
    else
      v29 = (const char *)v27;
    if (!sub_1000BCB64((uint64_t)v67, v29, v28 + 1))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v30 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no phone number for inst 1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v64[0]) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,loadPreCachedAdrInfo,no phone number for inst 1", v64, v61);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
    }
    if (sub_1001DC538())
    {
      v31 = byte_10230E07F;
      v32 = (uint64_t *)qword_10230E068;
      v64[0] = 1;
      *(_QWORD *)buf = v64;
      v33 = (std::string *)sub_1009707B4(a1 + 560, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v34 = (const char *)(v31 >= 0 ? &qword_10230E068 : v32);
      if (!sub_1000BCB64((uint64_t)v67, v34, v33 + 1))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v35 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no phone number for inst 2", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v64[0]) = 0;
          LODWORD(v61) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,loadPreCachedAdrInfo,no phone number for inst 2", v64, v61);
          v60 = (uint8_t *)v59;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v59);
          if (v60 != buf)
            free(v60);
        }
      }
    }
    v36 = (void *)sub_10011A5AC((uint64_t)v67);
    if (byte_10230E097 >= 0)
      v37 = &qword_10230E080;
    else
      v37 = (uint64_t *)qword_10230E080;
    v38 = objc_msgSend(v36, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v37));
    if (v38)
    {

      *(_QWORD *)(a1 + 600) = v38;
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v39 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no emergency contact names", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v64[0]) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,loadPreCachedAdrInfo,no emergency contact names", v64, v61);
        v58 = (uint8_t *)v57;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v57);
        if (v58 != buf)
          free(v58);
      }
    }
    sub_1015A2E04(__p, "loaded");
    sub_1012CFA20(a1, (uint64_t *)__p);
    if (v63 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no pre-cached ADR info available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v66.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,loadPreCachedAdrInfo,no pre-cached ADR info available", &v66, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  return sub_10011A5A8(v67);
}

void sub_1012BEE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  sub_10011A5A8(&a33);
  _Unwind_Resume(a1);
}

uint64_t **sub_1012BEF1C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t **result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  int v21;
  _BYTE __p[12];
  __int16 v23;
  int v24;
  __int16 v25;
  void **v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE *v31;

  v21 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10194B8A0(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    sub_1012D0064(v7, __p);
    if (SBYTE3(v26) >= 0)
      v11 = __p;
    else
      v11 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v28 = 1024;
    v29 = v7;
    v30 = 2080;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v26) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v13 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v14 = qword_1022A0078;
    v15 = *(unsigned __int8 *)(v6 + 120);
    sub_1012D0064(v7, v19);
    if (v20 >= 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v13;
    v23 = 1024;
    v24 = v7;
    v25 = 2080;
    v26 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, v15, "%sstate,%d,%s", __p, 28, (const char *)v19[0]);
    v18 = v17;
    if (v20 < 0)
      operator delete(v19[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyADR>::setStateHandler(State, StateHandler) [T = CLEmergencyADR]", "%s\n", v18);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)buf = &v21;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1012BF1E8(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  uint8_t *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint8_t *v14;
  double v15;
  NSObject *v16;
  _BOOL4 v17;
  NSObject *v18;
  _BOOL4 v19;
  NSObject *v20;
  double v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t buf[1640];

  result = 0;
  switch(a2)
  {
    case 0:
      *(_BYTE *)(a1 + 330) = 0;
      LODWORD(v23) = 0;
      *(_QWORD *)buf = &v23;
      *((_BYTE *)sub_10096ED18(a1 + 336, (int *)&v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = 0;
      if (sub_1001DC538())
      {
        LODWORD(v23) = 1;
        *(_QWORD *)buf = &v23;
        *((_BYTE *)sub_10096ED18(a1 + 336, (int *)&v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = 0;
      }
      sub_1012D0078(a1 + 8, 10, 300.0);
      return 0;
    case 1:
      sub_1012D0B48(a1 + 8, 10);
      return 0;
    case 2:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,unexpected SendActivityTrigger event received", buf, 2u);
      }
      v13 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v13)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v23) = 0;
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Initializing,unexpected SendActivityTrigger event received", &v23, 2, v23);
      goto LABEL_48;
    case 4:
    case 5:
    case 6:
      if (sub_1012D0FD8(a1))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v4 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Initializing,required initialization info received", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v23) = 0;
          v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Initializing,required initialization info received", &v23, 2);
          v7 = v6;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n", v5);
LABEL_63:
          if (v7 != buf)
            free(v7);
        }
LABEL_56:
        if (sub_1012D1090(a1))
          return 2;
        else
          return 1;
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Initializing,still waiting for initialization data", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if ((_DWORD)result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v23) = 0;
          v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Initializing,still waiting for initialization data", &v23, 2);
          v11 = v10;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n", v9);
LABEL_49:
          if (v11 != buf)
            free(v11);
          return 0;
        }
      }
      return result;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,unexpected ResponseReceived event received", buf, 2u);
      }
      v17 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v17)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v23) = 0;
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Initializing,unexpected ResponseReceived event received", &v23, 2, v23);
      goto LABEL_48;
    case 9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,unexpected ResponseTimeout event received", buf, 2u);
      }
      v19 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v19)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v23) = 0;
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Initializing,unexpected ResponseTimeout event received", &v23, 2, v23);
LABEL_48:
      v11 = v14;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n", v15);
      goto LABEL_49;
    case 10:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,initialization timeout reached", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v23) = 0;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Initializing,initialization timeout reached", &v23, 2);
      v7 = v22;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n", v21);
      goto LABEL_63;
    default:
      return result;
  }
}

uint64_t sub_1012BF99C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v5;
  uint64_t *v6;
  uint64_t result;
  NSObject *v8;
  void **v9;
  int64_t v10;
  int64_t v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  void **v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  const char *v26;
  void **v27;
  int v28;
  const char *v29;
  void **v30;
  _BYTE buf[12];
  char v32;
  int v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v3 = *(_QWORD *)(a1 + 160);
  if (!v3)
    sub_10025FD1C();
  v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v6 = sub_100A587F4(v5);
  result = 1;
  switch(a2)
  {
    case 0:
      v10 = *((int *)v6 + 124);
      v11 = *((int *)v6 + 125);
      if (*(double *)(a1 + 520) != 0.0)
      {
        *(_QWORD *)(a1 + 520) = 0;
        *(_DWORD *)(a1 + 528) = 0;
        sub_1012CFCDC((_QWORD *)a1);
      }
      if (*(_QWORD *)(a1 + 544))
      {
        if (*(int *)(a1 + 512) > 2)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v20 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            v21 = *(_DWORD *)(a1 + 512);
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,Enter,max clear attempts exceeded,%{public}d", (uint8_t *)__p, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v28 = *(_DWORD *)(a1 + 512);
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v28;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Disabled,Enter,max clear attempts exceeded,%{public}d", buf, 8);
            v30 = (void **)v29;
            sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v29);
            if (v30 != __p)
              free(v30);
          }
          sub_1012D1C44(a1);
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v12 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Disabled,Enter,starting activity for clearing previously cached data", (uint8_t *)__p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            *(_WORD *)buf = 0;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Disabled,Enter,starting activity for clearing previously cached data", buf, 2);
            v27 = (void **)v26;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v26);
            if (v27 != __p)
              free(v27);
          }
          sub_1012D192C(a1, v10, v11);
        }
      }
      return 1;
    case 1:
      sub_1012D1C9C(a1);
      return 1;
    case 2:
      return 4;
    case 3:
    case 4:
    case 5:
    case 6:
      if (!sub_1012D1090(a1))
        return 1;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        sub_1012D0050(a2, __p);
        v9 = v36 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Disabled,%{public}s,now enabled", buf, 0xCu);
        if (v36 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v22 = qword_1022A0088;
        sub_1012D0050(a2, buf);
        if (v32 >= 0)
          v23 = buf;
        else
          v23 = *(_BYTE **)buf;
        v33 = 136446210;
        v34 = v23;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 0, "#ADR,state machine,Disabled,%{public}s,now enabled", &v33, 12);
        v25 = v24;
        if (v32 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v25);
        if (v25 != (char *)__p)
          free(v25);
      }
      return 2;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v13 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,unexpected ResponseReceived event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Disabled,unexpected ResponseReceived event received", buf, 2);
      v15 = (void **)v14;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v14);
      goto LABEL_50;
    case 9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,unexpected ResponseTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Disabled,unexpected ResponseTimeout event received", buf, 2);
      v15 = (void **)v17;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v17);
      goto LABEL_50;
    case 10:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,unexpected InitializationTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Disabled,unexpected InitializationTimeout event received", buf, 2);
      v15 = (void **)v19;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v19);
LABEL_50:
      if (v15 != __p)
        free(v15);
      return 1;
    default:
      return result;
  }
}

uint64_t sub_1012C0294(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  NSMutableData *v24;
  NSObject *v25;
  double v26;
  int v27;
  int v28;
  int v29;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  NSMutableData *v34;
  NSMutableData *v35;
  NSObject *v36;
  const char *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  void **v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  const char *v52;
  NSObject *v53;
  const char *v54;
  NSObject *v55;
  void *v56;
  unsigned __int8 *v57;
  std::string::size_type size;
  unsigned __int8 *v59;
  NSObject *v60;
  const char *v61;
  NSObject *v62;
  double v63;
  int v64;
  int v65;
  NSObject *v66;
  const char *v67;
  NSObject *v68;
  id v69;
  id v70;
  NSObject *v71;
  double v72;
  int v73;
  int v74;
  NSObject *v75;
  const char *v76;
  std::string::size_type v77;
  unsigned __int8 *v78;
  NSObject *v79;
  NSObject *v80;
  const char *v82;
  const char *v83;
  uint8_t *v84;
  const char *v85;
  uint8_t *v86;
  const char *v87;
  const char *v88;
  uint8_t *v89;
  const char *v90;
  uint64_t v91;
  int v92;
  std::string v93;
  void *__s1[2];
  uint64_t v95;
  uint8_t buf[8];
  __int16 v97;
  const char *v98;
  __int16 v99;
  id v100;
  __int16 v101;
  id v102;

  v3 = *(_QWORD *)(a1 + 160);
  if (!v3)
    goto LABEL_225;
  v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v6 = sub_100A587F4(v5);
  v7 = *((_DWORD *)v6 + 124);
  v8 = *((_DWORD *)v6 + 125);
  v9 = *((_DWORD *)v6 + 128);
  v10 = *((_DWORD *)v6 + 129);
  v11 = *((_DWORD *)v6 + 126);
  v12 = *((_DWORD *)v6 + 127);
  *(_DWORD *)buf = 0;
  v13 = *(_QWORD *)(a1 + 192);
  if (!v13)
LABEL_225:
    sub_10025FD1C();
  v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 48))(v13, buf);
  if (*(char *)(v14 + 159) < 0)
  {
    sub_100115CE4(__s1, *(void **)(v14 + 136), *(_QWORD *)(v14 + 144));
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)(v14 + 136);
    v95 = *(_QWORD *)(v14 + 152);
  }
  memset(&v93, 0, sizeof(v93));
  if (sub_1001DC538())
  {
    *(_DWORD *)buf = 1;
    v15 = *(_QWORD *)(a1 + 192);
    if (!v15)
      sub_10025FD1C();
    v16 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 48))(v15, buf);
    std::string::operator=(&v93, (const std::string *)(v16 + 136));
  }
  switch(a2)
  {
    case 0:
      if (*(double *)(a1 + 504) != 0.0)
      {
        *(_QWORD *)(a1 + 504) = 0;
        *(_DWORD *)(a1 + 512) = 0;
        sub_1012CFCDC((_QWORD *)a1);
      }
      v24 = sub_1012D1E48(a1);
      if (*(double *)(a1 + 520) != 0.0)
      {
        if (*(int *)(a1 + 528) > 2)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v62 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using backoff delay from previous failure", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            LOWORD(v92) = 0;
            LODWORD(v91) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,Enter,using backoff delay from previous failure", &v92, v91);
            v86 = (uint8_t *)v85;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v85);
            if (v86 != buf)
              free(v86);
          }
          v63 = *(double *)(a1 + 520);
          v64 = (int)(v63 + (double)v9 - CFAbsoluteTimeGetCurrent());
          if (v9 >= v64)
            v65 = v64;
          else
            v65 = v9;
          if (v7 <= v64)
            v7 = v65;
          v8 = v10;
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v25 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using retry delay from previous failure", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            LOWORD(v92) = 0;
            LODWORD(v91) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,Enter,using retry delay from previous failure", &v92, v91);
            v84 = (uint8_t *)v83;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v83);
            if (v84 != buf)
              free(v84);
          }
          v26 = *(double *)(a1 + 520);
          v27 = (int)(v26 + (double)v7 - CFAbsoluteTimeGetCurrent());
          if (v7 >= 0)
            v28 = v7;
          else
            v28 = v7 + 1;
          v29 = v28 >> 1;
          if (v7 >= v27 && v29 <= v27)
            v7 = v27;
        }
        goto LABEL_197;
      }
      if (v24 && (-[NSMutableData isEqualToData:](v24, "isEqualToData:", *(_QWORD *)(a1 + 552)) & 1) == 0)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v75 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using debounce delay due to medical ID change", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v92) = 0;
          LODWORD(v91) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,Enter,using debounce delay due to medical ID change", &v92, v91);
          v33 = (uint8_t *)v76;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v76);
          goto LABEL_56;
        }
      }
      else
      {
        v56 = (void *)HIBYTE(v95);
        if (v95 < 0)
          v56 = __s1[1];
        if (v56)
        {
          v92 = 0;
          *(_QWORD *)buf = &v92;
          v57 = (unsigned __int8 *)sub_1009707B4(a1 + 560, &v92, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          if (sub_10071C288((unsigned __int8 *)__s1, v57 + 24))
            goto LABEL_130;
        }
        size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v93.__r_.__value_.__l.__size_;
        if (size
          && (HIDWORD(v91) = 1,
              *(_QWORD *)buf = (char *)&v91 + 4,
              v59 = (unsigned __int8 *)sub_1009707B4(a1 + 560, (int *)&v91 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
              sub_10071C288((unsigned __int8 *)&v93, v59 + 24)))
        {
LABEL_130:
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v60 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using debounce delay due to phone number change", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            LOWORD(v92) = 0;
            LODWORD(v91) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,Enter,using debounce delay due to phone number change", &v92, v91);
            v33 = (uint8_t *)v61;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v61);
            goto LABEL_56;
          }
        }
        else
        {
          if (*(double *)(a1 + 536) != 0.0)
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v71 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using periodic delay from last success", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021AD148);
              LOWORD(v92) = 0;
              LODWORD(v91) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,Enter,using periodic delay from last success", &v92, v91);
              v89 = (uint8_t *)v88;
              sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v88);
              if (v89 != buf)
                free(v89);
            }
            v72 = *(double *)(a1 + 536);
            v73 = (int)(v72 + (double)v11 - CFAbsoluteTimeGetCurrent());
            if (v11 >= v73)
              v74 = v73;
            else
              v74 = v11;
            if (v7 <= v73)
              v7 = v74;
            v8 = v12;
            goto LABEL_197;
          }
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v80 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using debounce delay for first send attempt", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            LOWORD(v92) = 0;
            LODWORD(v91) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,Enter,using debounce delay for first send attempt", &v92, v91);
            v33 = (uint8_t *)v90;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v90);
            goto LABEL_56;
          }
        }
      }
      goto LABEL_197;
    case 1:
      sub_1012D1C9C(a1);
      goto LABEL_198;
    case 2:
      v20 = 3;
      goto LABEL_199;
    case 3:
    case 4:
      if (sub_1012D1090(a1))
        goto LABEL_198;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,ConfigChange,now disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_119;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v92) = 0;
      LODWORD(v91) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,ConfigChange,now disabled", &v92, v91);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v18);
      goto LABEL_207;
    case 5:
      if (!sub_1012D1090(a1))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v53 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,MedicalIdUpdate,now disabled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v92) = 0;
          LODWORD(v91) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,MedicalIdUpdate,now disabled", &v92, v91);
          v19 = (uint8_t *)v54;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v54);
LABEL_207:
          if (v19 != buf)
            free(v19);
        }
        goto LABEL_119;
      }
      v34 = sub_1012D1E48(a1);
      v35 = v34;
      if (v34)
      {
        if (-[NSMutableData isEqualToData:](v34, "isEqualToData:", *(_QWORD *)(a1 + 552)))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v36 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,MedicalIdUpdate,no change", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            LOWORD(v92) = 0;
            LODWORD(v91) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,MedicalIdUpdate,no change", &v92, v91);
            v23 = (uint8_t *)v37;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v37);
LABEL_104:
            if (v23 != buf)
              free(v23);
          }
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v68 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v69 = objc_msgSend(objc_msgSend(*(id *)(a1 + 552), "base64EncodedStringWithOptions:", 0), "UTF8String");
            v70 = objc_msgSend(-[NSMutableData base64EncodedStringWithOptions:](v35, "base64EncodedStringWithOptions:", 0), "UTF8String");
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            v97 = 2082;
            v98 = "";
            v99 = 2082;
            v100 = v69;
            v101 = 2082;
            v102 = v70;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,state machine,Idle,MedicalIdUpdate,changed\", \"old hash\":%{public, location:escape_only}s, \"new hash\":%{public, location:escape_only}s}", buf, 0x26u);
          }
LABEL_197:
          sub_1012D192C(a1, v7, v8);
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v66 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,MedicalIdUpdate,unable to get hash", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v92) = 0;
          LODWORD(v91) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,MedicalIdUpdate,unable to get hash", &v92, v91);
          v23 = (uint8_t *)v67;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v67);
          goto LABEL_104;
        }
      }
LABEL_198:
      v20 = 2;
      goto LABEL_199;
    case 6:
      if (sub_1012D1090(a1))
      {
        v38 = (void *)HIBYTE(v95);
        if (v95 < 0)
          v38 = __s1[1];
        if (v38)
        {
          v92 = 0;
          *(_QWORD *)buf = &v92;
          v39 = sub_1009707B4(a1 + 560, &v92, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          v40 = HIBYTE(v95);
          if (v95 >= 0)
            v41 = (void *)HIBYTE(v95);
          else
            v41 = __s1[1];
          v42 = (void *)*((unsigned __int8 *)v39 + 47);
          v43 = (char)v42;
          if ((char)v42 < 0)
            v42 = (void *)v39[4];
          if (v41 != v42)
            goto LABEL_186;
          v46 = (unsigned __int8 *)v39[3];
          v44 = (unsigned __int8 *)(v39 + 3);
          v45 = v46;
          if (v43 >= 0)
            v47 = v44;
          else
            v47 = v45;
          if (v95 < 0)
          {
            if (memcmp(__s1[0], v47, (size_t)__s1[1]))
              goto LABEL_186;
          }
          else if (HIBYTE(v95))
          {
            v48 = __s1;
            while (*(unsigned __int8 *)v48 == *v47)
            {
              v48 = (void **)((char *)v48 + 1);
              ++v47;
              if (!--v40)
                goto LABEL_182;
            }
LABEL_186:
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v79 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,PhoneNumberUpdate,changed", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021AD148);
              LOWORD(v92) = 0;
              LODWORD(v91) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,PhoneNumberUpdate,changed", &v92, v91);
              v33 = (uint8_t *)v87;
              sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v87);
              if (v33 != buf)
LABEL_57:
                free(v33);
            }
            goto LABEL_197;
          }
        }
LABEL_182:
        v77 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v77 = v93.__r_.__value_.__l.__size_;
        if (!v77)
          goto LABEL_198;
        HIDWORD(v91) = 1;
        *(_QWORD *)buf = (char *)&v91 + 4;
        v78 = (unsigned __int8 *)sub_1009707B4(a1 + 560, (int *)&v91 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        if (!sub_10071C288((unsigned __int8 *)&v93, v78 + 24))
          goto LABEL_198;
        goto LABEL_186;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v55 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,PhoneNumberUpdate,now disabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v92) = 0;
        LODWORD(v91) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,PhoneNumberUpdate,now disabled", &v92, v91);
        v19 = (uint8_t *)v82;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v82);
        goto LABEL_207;
      }
LABEL_119:
      v20 = 1;
LABEL_199:
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95) < 0)
        operator delete(__s1[0]);
      return v20;
    case 7:
      if (*(int *)(a1 + 528) < 1)
        goto LABEL_198;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v31 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,BAACertDownload,try caching ADR again", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v92) = 0;
        LODWORD(v91) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,state machine,Idle,BAACertDownload,try caching ADR again", &v92, v91);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v32);
LABEL_56:
        if (v33 != buf)
          goto LABEL_57;
      }
      goto LABEL_197;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v51 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#ADR,state machine,Idle,unexpected ResponseReceived event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_198;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v92) = 0;
      LODWORD(v91) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Idle,unexpected ResponseReceived event received", &v92, v91);
      v23 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v52);
      goto LABEL_104;
    case 9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#ADR,state machine,Idle,unexpected ResponseTimeout event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_198;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v92) = 0;
      LODWORD(v91) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Idle,unexpected ResponseTimeout event received", &v92, v91);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v22);
      goto LABEL_104;
    case 10:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v49 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#ADR,state machine,Idle,unexpected InitializationTimeout event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_198;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v92) = 0;
      LODWORD(v91) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Idle,unexpected InitializationTimeout event received", &v92, v91);
      v23 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v50);
      goto LABEL_104;
    default:
      goto LABEL_198;
  }
}

void sub_1012C1A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012C1B10(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  void **v7;
  _BOOL4 v8;
  NSObject *v9;
  const char *v10;
  int v11[4];
  void *__p[2];

  result = 3;
  switch(a2)
  {
    case 0:

      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 392) = 0;
      sub_1006B1678(a1 + 400);
      *(_BYTE *)(a1 + 488) = 0;
      sub_1012D236C(a1);

      *(_QWORD *)(a1 + 496) = 0;
      operator new();
    case 1:
      sub_1012D0B48(a1 + 8, 9);

      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 392) = 0;
      sub_1006B1678(a1 + 400);
      sub_1012D236C(a1);

      *(_QWORD *)(a1 + 496) = 0;
      v4 = *(uint64_t **)(a1 + 608);
      if (v4)
      {
        sub_1012CF08C(v4);
        sub_1012D2AE4((uint64_t *)(a1 + 608), 0);
      }
      return 3;
    case 2:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ADR,state machine,Sending,unexpected SendActivityTrigger event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 3;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Sending,unexpected SendActivityTrigger event received", v11, 2);
      v7 = (void **)v6;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Sending(CLEmergencyADR::Event)", "%s\n", v6);
      goto LABEL_30;
    case 8:
      if (sub_1012D2B20(a1))
        return 3;
      if (*(_BYTE *)(a1 + 488))
      {
        *(CFAbsoluteTime *)(a1 + 520) = CFAbsoluteTimeGetCurrent();
        ++*(_DWORD *)(a1 + 528);
        sub_1012CFCDC((_QWORD *)a1);
      }
      else
      {
        sub_1012D2BCC(a1);
      }
      v8 = sub_1012D1090(a1);
LABEL_35:
      if (v8)
        return 2;
      else
        return 1;
    case 9:
      if (*(_QWORD *)(a1 + 608))
      {
        v11[0] = 0;
        __p[0] = v11;
        if (*((_DWORD *)sub_10006A62C(a1 + 448, v11, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5))
          std::string::operator=((std::string *)(*(_QWORD *)(a1 + 608) + 144), &stru_102313C78);
        v11[0] = 1;
        __p[0] = v11;
        if (*((_DWORD *)sub_10006A62C(a1 + 448, v11, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5))
          sub_1012CEE70(*(std::string **)(a1 + 608), 1, &stru_102313C78);
      }
      *(CFAbsoluteTime *)(a1 + 520) = CFAbsoluteTimeGetCurrent();
      ++*(_DWORD *)(a1 + 528);
      sub_1012CFCDC((_QWORD *)a1);
      v8 = sub_1012D1090(a1);
      goto LABEL_35;
    case 10:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ADR,state machine,Sending,unexpected InitializationTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 3;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Sending,unexpected InitializationTimeout event received", v11, 2);
      v7 = (void **)v10;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Sending(CLEmergencyADR::Event)", "%s\n", v10);
LABEL_30:
      if (v7 != __p)
        free(v7);
      return 3;
    default:
      return result;
  }
}

void sub_1012C2188(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1012C21F8(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  void **v7;
  _BOOL4 v8;
  NSObject *v9;
  const char *v10;
  int v11[4];
  void *__p[2];

  result = 4;
  switch(a2)
  {
    case 0:
      *(_BYTE *)(a1 + 488) = 0;
      sub_1012D236C(a1);
      operator new();
    case 1:
      sub_1012D0B48(a1 + 8, 9);
      sub_1012D236C(a1);
      v4 = *(uint64_t **)(a1 + 608);
      if (v4)
      {
        sub_1012CF08C(v4);
        sub_1012D2AE4((uint64_t *)(a1 + 608), 0);
      }
      return 4;
    case 2:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ADR,state machine,Clearing,unexpected SendActivityTrigger event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 4;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Clearing,unexpected SendActivityTrigger event received", v11, 2);
      v7 = (void **)v6;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Clearing(CLEmergencyADR::Event)", "%s\n", v6);
      goto LABEL_30;
    case 8:
      if (sub_1012D2B20(a1))
        return 4;
      if (*(_BYTE *)(a1 + 488))
      {
        *(CFAbsoluteTime *)(a1 + 504) = CFAbsoluteTimeGetCurrent();
        ++*(_DWORD *)(a1 + 512);
        sub_1012CFCDC((_QWORD *)a1);
      }
      else
      {
        sub_1012D1C44(a1);
      }
      v8 = sub_1012D1090(a1);
LABEL_35:
      if (v8)
        return 2;
      else
        return 1;
    case 9:
      if (*(_QWORD *)(a1 + 608))
      {
        v11[0] = 0;
        __p[0] = v11;
        if (*((_DWORD *)sub_10006A62C(a1 + 448, v11, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5))
          std::string::operator=((std::string *)(*(_QWORD *)(a1 + 608) + 144), &stru_102313C78);
        v11[0] = 1;
        __p[0] = v11;
        if (*((_DWORD *)sub_10006A62C(a1 + 448, v11, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5))
          sub_1012CEE70(*(std::string **)(a1 + 608), 1, &stru_102313C78);
      }
      *(CFAbsoluteTime *)(a1 + 504) = CFAbsoluteTimeGetCurrent();
      ++*(_DWORD *)(a1 + 512);
      sub_1012CFCDC((_QWORD *)a1);
      v8 = sub_1012D1090(a1);
      goto LABEL_35;
    case 10:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ADR,state machine,Clearing,unexpected InitializationTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 4;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,state machine,Clearing,unexpected InitializationTimeout event received", v11, 2);
      v7 = (void **)v10;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Clearing(CLEmergencyADR::Event)", "%s\n", v10);
LABEL_30:
      if (v7 != __p)
        free(v7);
      return 4;
    default:
      return result;
  }
}

void sub_1012C2818(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1012C288C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 280) = 0;

  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 384) = 0;

  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 392) = 0;

  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;

  *(_QWORD *)(a1 + 600) = 0;
  sub_1012C4804((uint64_t *)(a1 + 616), 0);
  sub_1012D2AE4((uint64_t *)(a1 + 608), 0);
  sub_100127554(a1 + 560);
  sub_100067AC4(a1 + 448);
  sub_100127554(a1 + 400);
  sub_100067AC4(a1 + 336);
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v2 = *(_QWORD **)(a1 + 224);
  if (v2 == (_QWORD *)(a1 + 200))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 200);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  v4 = *(_QWORD **)(a1 + 192);
  if (v4 == (_QWORD *)(a1 + 168))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 168);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  v6 = *(_QWORD **)(a1 + 160);
  if (v6 == (_QWORD *)(a1 + 136))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 136);
    goto LABEL_17;
  }
  if (v6)
  {
    v7 = 5;
LABEL_17:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  sub_1012D84A4(a1 + 8);
  return a1;
}

void sub_1012C2A00(uint64_t a1)
{
  int64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  _QWORD handler[5];
  double v24;
  _BYTE v25[12];
  __int16 v26;
  int64_t v27;
  _BYTE buf[1628];

  sub_1012C30D8(a1);
  sub_1001E4804(buf);
  *(_DWORD *)v25 = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "IDSQueryInterval", v25))
    v2 = *(int *)v25;
  else
    v2 = 604800;
  v3 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v24 = 0.0;
  v6 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 936))(v6);
  v7 = sub_1001FD94C();
  if (sub_1001FD9FC(v7, (uint64_t)CFSTR("LastIDSQueryTime"), &v24))
  {
    v2 -= (uint64_t)(CFAbsoluteTimeGetCurrent() - v24);
    if (v2 < 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,Invalid interval value %{public}lld, reset to 0", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        *(_DWORD *)v25 = 134349056;
        *(_QWORD *)&v25[4] = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,registerIDSBatchIDQueryActivity,Invalid interval value %{public}lld, reset to 0", v25, 12);
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      v2 = 0;
    }
    else if ((unint64_t)v2 > 0x93A80)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,Invalid interval value %{public}lld, reset to kIDSQueryInterval value", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        *(_DWORD *)v25 = 134349056;
        *(_QWORD *)&v25[4] = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,registerIDSBatchIDQueryActivity,Invalid interval value %{public}lld, reset to kIDSQueryInterval value", v25, 12);
        v21 = (char *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v2 = 604800;
    }
  }
  sub_1001E4804(buf);
  *(_QWORD *)v25 = 0;
  if (sub_1005262B4(*(uint64_t *)buf, "IDSQueryGracePeriod", v25))
    v10 = *(_QWORD *)v25;
  else
    v10 = 600;
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v14, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v14, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_uint64(v14, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, 0x28uLL);
  xpc_dictionary_set_BOOL(v14, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
  xpc_dictionary_set_string(v14, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v14, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_int64(v14, XPC_ACTIVITY_DELAY, v2);
  xpc_dictionary_set_int64(v14, XPC_ACTIVITY_GRACE_PERIOD, v10);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ADR,#registerIDSBatchIDQueryActivity,registering IDS Query activity,interval,%{public}lld,gracePeriod,%{public}lld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    *(_DWORD *)v25 = 134349312;
    *(_QWORD *)&v25[4] = v2;
    v26 = 2050;
    v27 = v10;
    LODWORD(v22) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,#registerIDSBatchIDQueryActivity,registering IDS Query activity,interval,%{public}lld,gracePeriod,%{public}lld", v25, v22);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *(_BYTE *)(a1 + 624) = 1;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1012C3284;
  handler[3] = &unk_102154A38;
  handler[4] = a1;
  xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.locationd.emergencyContacts"), "UTF8String"), v14, handler);
  xpc_release(v14);
}

void sub_1012C30B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012C30D8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 624))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,unregistering IDS batch query activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,unregistering IDS batch query activity", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::unregisterIDSBatchIDQueryActivity()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    xpc_activity_unregister((const char *)objc_msgSend(CFSTR("com.apple.locationd.emergencyContacts"), "UTF8String"));
    *(_BYTE *)(a1 + 624) = 0;
  }
}

void sub_1012C3284(uint64_t a1, xpc_activity_t activity)
{
  id *v2;
  xpc_activity_state_t state;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD block[5];
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v2 = *(id **)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,IDS query activity handler triggered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,registerIDSBatchIDQueryActivity,IDS query activity handler triggered", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = objc_msgSend(objc_msgSend(*v2, "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1012C35B0;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    v6 = state;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,IDS query activity handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v13[0] = 67240192;
      v13[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,registerIDSBatchIDQueryActivity,IDS query activity handler triggered with unexpected state %{public}d", v13, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1012C35B0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 624) = 0;
  sub_1012C35DC(v1);
  sub_1012C3998(v1);
}

uint64_t sub_1012C35DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  NSObject *v7;
  uint64_t result;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v2 = sub_1001FD94C();
  *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
  sub_10018A534(v2, CFSTR("LastIDSQueryTime"), buf);
  v3 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
  if (!objc_opt_class(MCProfileConnection, v4)
    || (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,issueIDSBatchQuery,MCProfileConnection class unavailable or Health Data Submission not allowed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,issueIDSBatchQuery,MCProfileConnection class unavailable or Health Data Submission not allowed", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::issueIDSBatchIDQuery()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return sub_1012C2A00(a1);
  }
  if ((sub_1000C4240() & 1) != 0
    || ((sub_100197040(), v5 = sub_100195F08(), byte_102313FC8) ? (v6 = v5) : (v6 = 0), (v6 & 1) != 0))
  {
    operator new();
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ADR,issueIDSBatchQuery,the device is neither a phone nor a tinker supported watch", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,issueIDSBatchQuery,the device is neither a phone nor a tinker supported watch", v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::issueIDSBatchIDQuery()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_100197040();
  result = sub_100195F08();
  if ((_DWORD)result)
    return sub_1012C2A00(a1);
  return result;
}

void sub_1012C396C()
{
  operator delete();
}

void sub_1012C3998(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSNumber *v4;
  __CFBundle *v5;
  id v6;

  if (((sub_1000C4240() & 1) != 0 || sub_100195F08()) && objc_opt_class(SOSUtilities, v2))
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[SOSUtilities shouldPlayAudioDuringCountdown](SOSUtilities, "shouldPlayAudioDuringCountdown")), CFSTR("playAudioDuringCountdown"));
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[SOSUtilities isCallWithVolumeLockHoldEnabled](SOSUtilities, "isCallWithVolumeLockHoldEnabled")), CFSTR("clawAutoDialEnabled"));
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[SOSUtilities isCallWithSideButtonPressesEnabled](SOSUtilities, "isCallWithSideButtonPressesEnabled")), CFSTR("multipressAutoDialEnabled"));
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", +[SOSUtilities SOSTriggerClickCount](SOSUtilities, "SOSTriggerClickCount")), CFSTR("numberOfSideButtonPresses"));
    v3 = *(void **)(a1 + 280);
    if (v3)
      v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (int)objc_msgSend(objc_msgSend(v3, "emergencyContacts"), "count") > 0);
    else
      v4 = (NSNumber *)&__kCFBooleanFalse;
    objc_msgSend(v6, "setValue:forKey:", v4, CFSTR("hasEmergencyContacts"));
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[SOSUtilities kappaTriggersEmergencySOS](SOSUtilities, "kappaTriggersEmergencySOS")), CFSTR("kappaEnabled"));
    v5 = (__CFBundle *)+[SOSUtilities getKappaThirdPartyActiveAppBundle](SOSUtilities, "getKappaThirdPartyActiveAppBundle");
    if (v5)
      objc_msgSend(v6, "setValue:forKey:", CFBundleGetIdentifier(v5), CFSTR("kappaThirdPartyAppBundleId"));
    AnalyticsSendEvent(CFSTR("com.apple.locationd.emergency.sos_settings"), v6);

  }
}

void sub_1012C3B64(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  id v21;
  _DWORD *v22;
  int v23;
  NSObject *v24;
  id v25;
  id v26;
  NSObject *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  id v36;
  id v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  id v41;
  id v42;
  const char *v43;
  char *v44;
  id v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[22];
  uint8_t v57[128];
  _BYTE buf[22];
  char v59;

  if (a2 && a3)
  {
    if (a4)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = a4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ADR,handleIDSBatchIDQueryResponse,Early return,error:%{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        *(_DWORD *)v56 = 138543362;
        *(_QWORD *)&v56[4] = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,handleIDSBatchIDQueryResponse,Early return,error:%{public}@", v56, 12);
        v8 = (char *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v7);
LABEL_72:
        if (v8 != buf)
          free(v8);
        return;
      }
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = objc_msgSend(a2, "count");
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = objc_msgSend(a3, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Received %{public}u responses for service %{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v47 = qword_1022A0088;
      *(_DWORD *)v56 = 67240450;
      *(_DWORD *)&v56[4] = objc_msgSend(a2, "count");
      *(_WORD *)&v56[8] = 2082;
      *(_QWORD *)&v56[10] = objc_msgSend(a3, "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 0, "#ADR,handleIDSBatchIDQueryResponse,Received %{public}u responses for service %{public}s", v56, 18);
      v49 = (char *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    v54 = 0u;
    v55 = 0u;
    if (objc_msgSend(a3, "isEqualToString:", IDSServiceNameiMessage))
      v12 = 104;
    else
      v12 = 144;
    v52 = 0uLL;
    v53 = 0uLL;
    v13 = objc_msgSend(a2, "allKeys");
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
    if (!v14)
    {
LABEL_67:
      if (sub_1012D8128(a1))
        sub_1012D7498(a1);
      return;
    }
    v15 = a1 + v12;
    v16 = *(_QWORD *)v53;
LABEL_28:
    v17 = 0;
    while (1)
    {
      if (*(_QWORD *)v53 != v16)
        objc_enumerationMutation(v13);
      v18 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v17);
      if (objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v18), "integerValue") == (id)1)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v19 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v20 = objc_msgSend(v18, "UTF8String");
          v21 = objc_msgSend(a3, "UTF8String");
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v20;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Number %{private}s supports service %{public}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v30 = qword_1022A0088;
          v31 = objc_msgSend(v18, "UTF8String");
          v32 = objc_msgSend(a3, "UTF8String");
          *(_DWORD *)v56 = 136380931;
          *(_QWORD *)&v56[4] = v31;
          *(_WORD *)&v56[12] = 2082;
          *(_QWORD *)&v56[14] = v32;
          LODWORD(v50) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#ADR,handleIDSBatchIDQueryResponse,Number %{private}s supports service %{public}s", v56, v50);
          v34 = (char *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        sub_1015A2E04(buf, (char *)objc_msgSend(v18, "UTF8String"));
        *(_QWORD *)v56 = buf;
        v22 = sub_1012D8958(v15, buf, (uint64_t)&unk_101B9EB60, (__int128 **)v56);
        v23 = 1;
      }
      else
      {
        if (objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v18), "integerValue") != (id)2)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v27 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v28 = objc_msgSend(v18, "UTF8String");
            v29 = objc_msgSend(a3, "UTF8String");
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v29;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Unhandled status response for number %{private}s for service %{public}s", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v40 = qword_1022A0088;
            v41 = objc_msgSend(v18, "UTF8String");
            v42 = objc_msgSend(a3, "UTF8String");
            *(_DWORD *)v56 = 136380931;
            *(_QWORD *)&v56[4] = v41;
            *(_WORD *)&v56[12] = 2082;
            *(_QWORD *)&v56[14] = v42;
            LODWORD(v50) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 0, "#ADR,handleIDSBatchIDQueryResponse,Unhandled status response for number %{private}s for service %{public}s", v56, v50);
            v44 = (char *)v43;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v43);
            if (v44 != buf)
              free(v44);
          }
          goto LABEL_52;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v24 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v25 = objc_msgSend(v18, "UTF8String");
          v26 = objc_msgSend(a3, "UTF8String");
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Number %{private}s does not support service %{public}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v35 = qword_1022A0088;
          v36 = objc_msgSend(v18, "UTF8String");
          v37 = objc_msgSend(a3, "UTF8String");
          *(_DWORD *)v56 = 136380931;
          *(_QWORD *)&v56[4] = v36;
          *(_WORD *)&v56[12] = 2082;
          *(_QWORD *)&v56[14] = v37;
          LODWORD(v50) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 0, "#ADR,handleIDSBatchIDQueryResponse,Number %{private}s does not support service %{public}s", v56, v50);
          v39 = (char *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        sub_1015A2E04(buf, (char *)objc_msgSend(v18, "UTF8String"));
        *(_QWORD *)v56 = buf;
        v22 = sub_1012D8958(v15, buf, (uint64_t)&unk_101B9EB60, (__int128 **)v56);
        v23 = 2;
      }
      v22[10] = v23;
      if (v59 < 0)
        operator delete(*(void **)buf);
LABEL_52:
      if (v14 == (id)++v17)
      {
        v45 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
        v14 = v45;
        if (!v45)
          goto LABEL_67;
        goto LABEL_28;
      }
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ADR,handleIDSBatchIDQueryResponse,query response is Empty. Early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    *(_WORD *)v56 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,handleIDSBatchIDQueryResponse,query response is Empty. Early return", v56, 2);
    v8 = (char *)v46;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v46);
    goto LABEL_72;
  }
}

void sub_1012C462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012C4654(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 616))
  {
    sub_1012C4804((uint64_t *)(a1 + 616), 0);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,cleanupEmergencyContactsMetrics,fEmergencyContactsMetric is nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,cleanupEmergencyContactsMetrics,fEmergencyContactsMetric is nil", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::cleanupEmergencyContactsMetrics()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  return sub_1012C2A00(a1);
}

uint64_t sub_1012C4804(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1012D7C94(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1012C4840(uint64_t a1)
{
  return sub_1012C484C(a1 + 8, 3);
}

uint64_t sub_1012C484C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;
  _BYTE *v29;
  NSObject *v30;
  os_log_type_t v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  void **v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  const char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  void **v92;
  char *v93;
  char *v94;
  const char *v95;
  const char *v96;
  int v97;
  void *v98[2];
  char v99;
  int v100;
  _BYTE __p[12];
  __int16 v102;
  _BYTE *v103;
  __int16 v104;
  void **v105;
  _BYTE buf[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  _BYTE *v110;
  _BYTE v111[12];
  __int16 v112;
  _BYTE *v113;
  char v114;

  ++*(_DWORD *)(a1 + 88);
  v100 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10194BA14();
    goto LABEL_157;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_10194BB84(qword_1022A0070 == -1);
    goto LABEL_157;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    sub_1012D0064(*(_DWORD *)(a1 + 4), __p);
    v8 = SHIBYTE(v104);
    v9 = *(_BYTE **)__p;
    sub_1012D0050(a2, v111);
    v10 = __p;
    if (v8 < 0)
      v10 = v9;
    if (v114 >= 0)
      v11 = v111;
    else
      v11 = *(_BYTE **)v111;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v107 = 2080;
    v108 = v10;
    v109 = 2080;
    v110 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v114 < 0)
      operator delete(*(void **)v111);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v58 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v58 = (_QWORD *)*v58;
    v59 = qword_1022A0078;
    v60 = *(unsigned __int8 *)(a1 + 120);
    sub_1012D0064(*(_DWORD *)(a1 + 4), v111);
    v61 = v114;
    v62 = *(_BYTE **)v111;
    sub_1012D0050(a2, v98);
    v63 = v111;
    if (v61 < 0)
      v63 = v62;
    if (v99 >= 0)
      v64 = v98;
    else
      v64 = (void **)v98[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v58;
    v102 = 2080;
    v103 = v63;
    v104 = 2080;
    v105 = v64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, v60, "%scurrent_state,%s,event,%s", __p, 32, v96);
    v66 = v65;
    if (v99 < 0)
      operator delete(v98[0]);
    v3 = &qword_1022A0000;
    if (v114 < 0)
      operator delete(*(void **)v111);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v66);
    if (v66 != buf)
      free(v66);
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_28;
  v13 = (uint64_t **)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = a1 + 16;
  do
  {
    v16 = *(_DWORD *)(v12 + 32);
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = (uint64_t *)v12;
    else
      v18 = (uint64_t *)(v12 + 8);
    if (!v17)
      v15 = v12;
    v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_10194BCF8();
    goto LABEL_157;
  }
  v20 = *(uint64_t (**)(_QWORD *, uint64_t))(v15 + 40);
  v19 = *(_QWORD *)(v15 + 48);
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v19 >> 1));
  if ((v19 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v21 + v20);
  v22 = v20(v21, a2);
  v23 = v22;
  v97 = v22;
  if (a2 <= 1 && (_DWORD)v22 != v100)
  {
    sub_10194C148();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v25 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v73 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v73 = (_QWORD *)*v73;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v75 = (char *)v74;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
  v26 = qword_1022A0078;
  v27 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v27))
  {
    v28 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v28 = (_QWORD *)*v28;
    sub_1012D0064(v23, buf);
    if (v109 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    v102 = 2080;
    v103 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v67 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v67 = (_QWORD *)*v67;
    v68 = qword_1022A0078;
    v69 = *(unsigned __int8 *)(a1 + 120);
    sub_1012D0064(v23, __p);
    if (v104 >= 0)
      v70 = __p;
    else
      v70 = *(_BYTE **)__p;
    *(_DWORD *)v111 = 136315394;
    *(_QWORD *)&v111[4] = v67;
    v112 = 2080;
    v113 = v70;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, v69, "%snewState,%s", v111, v95);
    v72 = v71;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if ((_DWORD)v23 != v100)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v30 = qword_1022A0078;
    v31 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v31))
    {
      v32 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v32 = (_QWORD *)*v32;
      sub_1012D0064(v100, __p);
      v33 = v3;
      v34 = SHIBYTE(v104);
      v35 = *(_BYTE **)__p;
      sub_1015A2E04(v111, "Exit");
      v36 = __p;
      if (v34 < 0)
        v36 = v35;
      if (v114 >= 0)
        v37 = v111;
      else
        v37 = *(_BYTE **)v111;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v32;
      v107 = 2080;
      v108 = v36;
      v109 = 2080;
      v110 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v114 < 0)
        operator delete(*(void **)v111);
      v3 = v33;
      if (SHIBYTE(v104) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v76 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v76 = (_QWORD *)*v76;
      v77 = qword_1022A0078;
      v78 = *(unsigned __int8 *)(a1 + 120);
      sub_1012D0064(v100, v111);
      v79 = v3;
      v80 = v114;
      v81 = *(_BYTE **)v111;
      sub_1015A2E04(v98, "Exit");
      v82 = v111;
      if (v80 < 0)
        v82 = v81;
      if (v99 >= 0)
        v83 = v98;
      else
        v83 = (void **)v98[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v76;
      v102 = 2080;
      v103 = v82;
      v104 = 2080;
      v105 = v83;
      LODWORD(v95) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, v78, "%soldState,%s,event,%s", __p, v95, (const char *)(a1 + 8));
      v85 = v84;
      if (v99 < 0)
        operator delete(v98[0]);
      v3 = v79;
      v13 = (uint64_t **)v96;
      if (v114 < 0)
        operator delete(*(void **)v111);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v85);
      if (v85 != buf)
        free(v85);
    }
    v38 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v100;
    v39 = sub_1000610B4(v13, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v40 = v39[5];
    v41 = (uint64_t)v39[6];
    v42 = (_QWORD *)(v38 + (v41 >> 1));
    if ((v41 & 1) != 0)
      v40 = *(uint64_t **)(*v42 + v40);
    v43 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v42, 1);
    if (v43 == v100)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v44 = qword_1022A0078;
      v45 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v45))
      {
        v46 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v46 = (_QWORD *)*v46;
        sub_1012D0064(v23, __p);
        v47 = v3;
        v48 = SHIBYTE(v104);
        v49 = *(_BYTE **)__p;
        sub_1015A2E04(v111, "Enter");
        v50 = __p;
        if (v48 < 0)
          v50 = v49;
        if (v114 >= 0)
          v51 = v111;
        else
          v51 = *(_BYTE **)v111;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v46;
        v107 = 2080;
        v108 = v50;
        v109 = 2080;
        v110 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v114 < 0)
          operator delete(*(void **)v111);
        v3 = v47;
        if (SHIBYTE(v104) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
        v86 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v86 = (_QWORD *)*v86;
        v87 = qword_1022A0078;
        v88 = *(unsigned __int8 *)(a1 + 120);
        sub_1012D0064(v23, v111);
        v89 = v114;
        v90 = *(_BYTE **)v111;
        sub_1015A2E04(v98, "Enter");
        v91 = v111;
        if (v89 < 0)
          v91 = v90;
        if (v99 >= 0)
          v92 = v98;
        else
          v92 = (void **)v98[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v86;
        v102 = 2080;
        v103 = v91;
        v104 = 2080;
        v105 = v92;
        LODWORD(v95) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, v88, "%snewState,%s,event,%s", __p, v95, v96);
        v94 = v93;
        if (v99 < 0)
          operator delete(v98[0]);
        if (v114 < 0)
          operator delete(*(void **)v111);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v94);
        if (v94 != buf)
          free(v94);
      }
      v52 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v97;
      v53 = sub_1000610B4(v13, &v97, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v54 = v53[5];
      v55 = (uint64_t)v53[6];
      v56 = (_QWORD *)(v52 + (v55 >> 1));
      if ((v55 & 1) != 0)
        v54 = *(uint64_t **)(*v56 + v54);
      v23 = ((uint64_t (*)(_QWORD *, _QWORD))v54)(v56, 0);
      if ((_DWORD)v23 == v97)
        goto LABEL_89;
      sub_10194BE68();
    }
    else
    {
      sub_10194BFD8();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_1012C5534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012C5594(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _DWORD v9[4];
  uint8_t buf[8];

  HIDWORD(v8) = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handlePhoneNumberChange,received phone number update for inst %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v9[0] = 67240192;
    v9[1] = a2;
    LODWORD(v8) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ADR,handlePhoneNumberChange,received phone number update for inst %{public}d", v9, v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::handlePhoneNumberChange(SimInstance)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_QWORD *)buf = (char *)&v8 + 4;
  *((_BYTE *)sub_10096ED18(a1 + 336, (int *)&v8 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = 1;
  return sub_1012C484C(a1 + 8, 6);
}

std::string *sub_1012C577C(std::string *a1, const std::string *a2)
{
  NSObject *v4;
  const std::string *v5;
  const std::string *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const std::string *v11;
  uint8_t buf[4];
  const std::string *v13;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = a2;
    else
      v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380675;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handleCompanionNumberChange,companion phone number changed to %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = a2;
    else
      v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v10 = 136380675;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ADR,handleCompanionNumberChange,companion phone number changed to %{private}s", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::handleCompanionNumberChange(const std::string &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return std::string::operator=(a1 + 10, a2);
}

uint64_t sub_1012C5954(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  int v6;
  int v7;
  int v8;
  double v9;
  BOOL v12;
  const __CFString *v13;
  __CFString *v15;
  uint64_t v16;
  double v17;
  const __CFString *v20;
  unsigned int v22;
  uint64_t v23;
  _DWORD v25[2];
  __int16 v26;
  const char *v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(double *)a2;
    v6 = *(unsigned __int8 *)(a2 + 8);
    v7 = *(unsigned __int8 *)(a2 + 9);
    v8 = *(unsigned __int8 *)(a2 + 16);
    v25[0] = 68290050;
    v26 = 2082;
    v25[1] = 0;
    v27 = "";
    v28 = 2050;
    v29 = v5;
    v30 = 1026;
    v31 = v6;
    v32 = 1026;
    v33 = v7;
    v34 = 1026;
    v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handleBatteryStatusChange\", \"battery level\":\"%{public}.1f\", \"battery charged\":%{public}d, \"battery connected\":%{public}d, \"battery was connected\":%{public}d}", (uint8_t *)v25, 0x2Eu);
  }
  v9 = *(double *)(a1 + 304);
  if (v9 <= 0.0 || v9 > 10.0)
  {
    if (v9 <= 10.0 || v9 > 30.0)
    {
      v12 = v9 > 100.0 || v9 <= 60.0;
      v13 = CFSTR("61-100%");
      if (v12)
        v13 = CFSTR("Unknown");
      if (v9 <= 30.0 || v9 > 60.0)
        v15 = (__CFString *)v13;
      else
        v15 = CFSTR("31-60%");
    }
    else
    {
      v15 = CFSTR("11-30%");
    }
  }
  else
  {
    v15 = CFSTR("10% or less");
  }
  v16 = a1 + 304;
  v17 = *(double *)a2;
  if (*(double *)a2 <= 0.0 || v17 > 10.0)
  {
    if (v17 <= 10.0 || v17 > 30.0)
    {
      if (v17 <= 30.0 || v17 > 60.0)
      {
        if (v17 > 100.0 || v17 <= 60.0)
          v20 = CFSTR("Unknown");
        else
          v20 = CFSTR("61-100%");
      }
      else
      {
        v20 = CFSTR("31-60%");
      }
    }
    else
    {
      v20 = CFSTR("11-30%");
    }
  }
  else
  {
    v20 = CFSTR("10% or less");
  }
  v22 = -[__CFString isEqualToString:](v15, "isEqualToString:", v20);
  v23 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v16 = *(_OWORD *)a2;
  *(_QWORD *)(v16 + 16) = v23;
  return v22 ^ 1;
}

uint64_t sub_1012C5B98(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (_os_feature_enabled_impl("CoreTelephony", "Bifrost"))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,handleStewieSupportChange,supported,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8[0] = 67240192;
      v8[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleStewieSupportChange,supported,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::handleStewieSupportChange(const BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  *(_BYTE *)(a1 + 328) = a2;
  *(_BYTE *)(a1 + 329) = 1;
  return sub_1012C484C(a1 + 8, 4);
}

uint64_t sub_1012C5D74(uint64_t a1)
{
  return sub_1012C484C(a1 + 8, 7);
}

void sub_1012C5D80(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  _BYTE buf[12];
  char v11;
  int v12;
  _BYTE *v13;
  void *__p[2];
  char v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100A82650(a2, __p);
    v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handleCommTypeChange,comm type changed to %{public}s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v6 = qword_1022A0088;
    sub_100A82650(a2, buf);
    if (v11 >= 0)
      v7 = buf;
    else
      v7 = *(_BYTE **)buf;
    v12 = 136446210;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v6, 2, "#ADR,handleCommTypeChange,comm type changed to %{public}s", &v12, 12);
    v9 = v8;
    if (v11 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::handleCommTypeChange(Emergency::CommunicationType)", "%s\n", v9);
    if (v9 != (char *)__p)
      free(v9);
  }
  *(_DWORD *)(a1 + 272) = a2;
}

void sub_1012C5FA0(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  _BYTE buf[12];
  char v11;
  int v12;
  _BYTE *v13;
  void *__p[2];
  char v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100F789A8(a2, __p);
    v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handleTriggerTypeChange,call trigger type changed to %{public}s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v6 = qword_1022A0088;
    sub_100F789A8(a2, buf);
    if (v11 >= 0)
      v7 = buf;
    else
      v7 = *(_BYTE **)buf;
    v12 = 136446210;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v6, 2, "#ADR,handleTriggerTypeChange,call trigger type changed to %{public}s", &v12, 12);
    v9 = v8;
    if (v11 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::handleTriggerTypeChange(EmergencyTriggerType)", "%s\n", v9);
    if (v9 != (char *)__p)
      free(v9);
  }
  *(_DWORD *)(a1 + 276) = a2;
}

BOOL sub_1012C61C0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  unsigned int v7;
  const char *v8;
  id v9;
  NSObject *v11;
  NSObject *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  unsigned int v23;
  id v24;
  id v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  unsigned int v37;
  unsigned int v38;
  id v39;
  _QWORD block[5];
  _DWORD v41[2];
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  uint8_t buf[4];
  unsigned int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  id v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  _BOOL4 v61;
  __int16 v62;
  _BOOL4 v63;
  __int16 v64;
  _BOOL4 v65;
  __int16 v66;
  _BOOL4 v67;
  __int16 v68;
  _BOOL4 v69;
  __int16 v70;
  _BOOL4 v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  _BOOL4 v75;
  __int16 v76;
  _BOOL4 v77;
  __int16 v78;
  _BOOL4 v79;
  __int16 v80;
  _BOOL4 v81;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012C692C;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  if (qword_10230E098 != -1)
    dispatch_once(&qword_10230E098, block);
  *(_BYTE *)(a1 + 330) = 1;
  if (a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v7 = objc_msgSend(a3, "code");
      v8 = (const char *)objc_msgSend(objc_msgSend(a3, "domain"), "UTF8String");
      v9 = objc_msgSend(objc_msgSend(a3, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 67240706;
      v47 = v7;
      v48 = 2082;
      v49 = v8;
      v50 = 2082;
      v51 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ADR,handleMedicalIdChange,failed to fetch medical ID data,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v22 = qword_1022A0088;
      v23 = objc_msgSend(a3, "code");
      v24 = objc_msgSend(objc_msgSend(a3, "domain"), "UTF8String");
      v25 = objc_msgSend(objc_msgSend(a3, "localizedDescription"), "UTF8String");
      v41[0] = 67240706;
      v41[1] = v23;
      v42 = 2082;
      v43 = v24;
      v44 = 2082;
      v45 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 16, "#ADR,handleMedicalIdChange,failed to fetch medical ID data,error code,%{public}d,domain,%{public}s,reason,%{public}s", v41, 28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::handleMedicalIdChange(_HKMedicalIDData *, NSError *)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  else
  {

    if (a2)
    {
      *(_QWORD *)(a1 + 280) = a2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ADR,handleMedicalIdChange,successfully fetched medical ID data", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v41[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleMedicalIdChange,successfully fetched medical ID data", v41, 2);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleMedicalIdChange(_HKMedicalIDData *, NSError *)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v39 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "dateSaved"), "description"), "UTF8String");
        v38 = objc_msgSend(*(id *)(a1 + 280), "isDisabled");
        v37 = objc_msgSend(*(id *)(a1 + 280), "shareDuringEmergency");
        v36 = objc_msgSend(*(id *)(a1 + 280), "pictureData") != 0;
        v35 = objc_msgSend(*(id *)(a1 + 280), "name") != 0;
        v34 = objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate") != 0;
        v33 = objc_msgSend(*(id *)(a1 + 280), "height") != 0;
        v32 = objc_msgSend(*(id *)(a1 + 280), "weight") != 0;
        v13 = objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCode") != 0;
        v14 = objc_msgSend(*(id *)(a1 + 280), "bloodType") != 0;
        v15 = objc_msgSend(*(id *)(a1 + 280), "isOrganDonor") != 0;
        v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), "count");
        v17 = objc_msgSend(*(id *)(a1 + 280), "medicalConditions") != 0;
        v18 = objc_msgSend(*(id *)(a1 + 280), "medicalNotes") != 0;
        v19 = objc_msgSend(*(id *)(a1 + 280), "allergyInfo") != 0;
        v20 = objc_msgSend(*(id *)(a1 + 280), "medicationInfo");
        *(_DWORD *)buf = 68293122;
        v47 = 0;
        v48 = 2082;
        v49 = "";
        v50 = 2082;
        v51 = v39;
        v52 = 1026;
        v53 = v38;
        v54 = 1026;
        v55 = v37;
        v56 = 1026;
        v57 = v36;
        v58 = 1026;
        v59 = v35;
        v60 = 1026;
        v61 = v34;
        v62 = 1026;
        v63 = v33;
        v64 = 1026;
        v65 = v32;
        v66 = 1026;
        v67 = v13;
        v68 = 1026;
        v69 = v14;
        v70 = 1026;
        v71 = v15;
        v72 = 1026;
        v73 = v16;
        v74 = 1026;
        v75 = v17;
        v76 = 1026;
        v77 = v18;
        v78 = 1026;
        v79 = v19;
        v80 = 1026;
        v81 = v20 != 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handleMedicalIdChange\", \"date saved\":%{public, location:escape_only}s, \"lock screen disabled\":%{public}hhd, \"share during emergency\":%{public}hhd, \"picture available\":%{public}hhd, \"name set\":%{public}hhd, \"birthday set\":%{public}hhd, \"height set\":%{public}hhd, \"weight set\":%{public}hhd, \"primary language set\":%{public}hhd, \"blood type set\":%{public}hhd, \"organ donor set\":%{public}hhd, \"number of emergency contacts\":%{public}d, \"conditions set\":%{public}hhd, \"notes set\":%{public}hhd, \"allergies set\":%{public}hhd, \"medications\":%{public}hhd}", buf, 0x76u);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,handleMedicalIdChange,medical ID fetch succeeded but returned no data", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v41[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleMedicalIdChange,medical ID fetch succeeded but returned no data", v41, 2);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleMedicalIdChange(_HKMedicalIDData *, NSError *)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      *(_QWORD *)(a1 + 280) = 0;
    }
  }
  sub_1012C484C(a1 + 8, 5);
  return a3 == 0;
}

void sub_1012C692C(uint64_t a1)
{
  sub_1012C2A00(*(_QWORD *)(a1 + 32));
}

BOOL sub_1012C6934(uint64_t a1, void *a2, void *a3)
{
  NSObject *v4;
  _BOOL8 result;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  void **v14;
  id v15;
  id v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  uint8_t buf[4];
  unsigned int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  void **v48;
  __int16 v49;
  id v50;
  __int16 v51;
  id v52;

  if (a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240706;
      v42 = objc_msgSend(a3, "code");
      v43 = 2082;
      v44 = (const char *)objc_msgSend(objc_msgSend(a3, "domain"), "UTF8String");
      v45 = 2082;
      v46 = objc_msgSend(objc_msgSend(a3, "localizedDescription"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ADR,handleEmergencyResponseAreaUpdate,failed to fetch infered place,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x1Cu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v24 = qword_1022A0088;
    LODWORD(v36) = 67240706;
    HIDWORD(v36) = objc_msgSend(a3, "code");
    v37 = 2082;
    v38 = objc_msgSend(objc_msgSend(a3, "domain"), "UTF8String");
    v39 = 2082;
    v40 = objc_msgSend(objc_msgSend(a3, "localizedDescription"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 16, "#ADR,handleEmergencyResponseAreaUpdate,failed to fetch infered place,error code,%{public}d,domain,%{public}s,reason,%{public}s", &v36, 28);
    v19 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v25);
    goto LABEL_61;
  }
  if (a2)
  {
    if (!objc_msgSend(a2, "count"))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,handleEmergencyResponseAreaUpdate,no infered place available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleEmergencyResponseAreaUpdate,no infered place available", &v36, 2);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      if (!*(_QWORD *)(a1 + 296))
        return 0;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,handleEmergencyResponseAreaUpdate,clearing previous infered place", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v36) = 0;
        LODWORD(v33) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleEmergencyResponseAreaUpdate,clearing previous infered place", &v36, v33);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }

      *(_QWORD *)(a1 + 296) = 0;
      ++*(_DWORD *)(a1 + 288);
      return 1;
    }
    if ((unint64_t)objc_msgSend(a2, "count") >= 2)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v42 = objc_msgSend(a2, "count");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #ADR,handleEmergencyResponseAreaUpdate,received more than one infered place,only using first one,count,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v28 = qword_1022A0088;
        LODWORD(v36) = 67240192;
        HIDWORD(v36) = objc_msgSend(a2, "count");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#Warning #ADR,handleEmergencyResponseAreaUpdate,received more than one infered place,only using first one,count,%{public}d", &v36, 8);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
    }
    v9 = objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
    if (sub_1012C7388((uint64_t)v9, *(void **)(a1 + 296), v9))
    {

      *(_QWORD *)(a1 + 296) = 0;
      v10 = v9;
      *(_QWORD *)(a1 + 296) = v10;
      ++*(_DWORD *)(a1 + 288);
      v11 = objc_msgSend(v10, "placemark");
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v13 = &v36;
        sub_1015A2E04(&v36, off_1021AD1E8[(_QWORD)objc_msgSend(*(id *)(a1 + 296), "userType")]);
        if (SBYTE3(v40) < 0)
          v13 = v36;
        sub_1015A2E04(__p, off_1021AD210[(_QWORD)objc_msgSend(*(id *)(a1 + 296), "placeType")]);
        if (v35 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        v15 = objc_msgSend(objc_msgSend(v11, "name"), "UTF8String");
        v16 = objc_msgSend(objc_msgSend(v11, "mecardAddress"), "UTF8String");
        *(_DWORD *)buf = 68290051;
        v42 = 0;
        v43 = 2082;
        v44 = "";
        v45 = 2081;
        v46 = v13;
        v47 = 2082;
        v48 = v14;
        v49 = 2081;
        v50 = v15;
        v51 = 2081;
        v52 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handleEmergencyResponseAreaUpdate,received new infered place\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v35 < 0)
          operator delete(__p[0]);
        if (SBYTE3(v40) < 0)
          operator delete(v36);
      }
      return 1;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v22 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#ADR,handleEmergencyResponseAreaUpdate,infered place has not changed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v36) = 0;
      LODWORD(v33) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,handleEmergencyResponseAreaUpdate,infered place has not changed", &v36, v33);
      v19 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v23);
LABEL_61:
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,handleEmergencyResponseAreaUpdate,infered place array is nil", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v36) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,handleEmergencyResponseAreaUpdate,infered place array is nil", &v36, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v18);
      goto LABEL_61;
    }
  }
  return result;
}

void sub_1012C734C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1012C7388(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void **v8;
  void **v9;
  id v10;
  NSObject *v11;
  void **v12;
  void **v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unsigned int v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  _BYTE v38[10];
  void **v39;
  __int16 v40;
  id v41;

  if (a2)
  {
    if (a3)
    {
      v5 = objc_msgSend(a2, "placemark");
      v6 = objc_msgSend(a3, "placemark");
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v8 = v31;
        sub_1015A2E04(v31, off_1021AD1E8[(_QWORD)objc_msgSend(a2, "userType")]);
        if (v32 < 0)
          v8 = (void **)v31[0];
        v9 = __p;
        sub_1015A2E04(__p, off_1021AD210[(_QWORD)objc_msgSend(a2, "placeType")]);
        if (v30 < 0)
          v9 = (void **)__p[0];
        v10 = objc_msgSend(objc_msgSend(v5, "mecardAddress"), "UTF8String");
        *(_DWORD *)buf = 68289795;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        *(_QWORD *)v38 = v8;
        *(_WORD *)&v38[8] = 2082;
        v39 = v9;
        v40 = 2081;
        v41 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,hasEmergencyResponseAreaChanged,old infered place\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s}", buf, 0x30u);
        if (v30 < 0)
          operator delete(__p[0]);
        if (v32 < 0)
          operator delete(v31[0]);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
      }
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v12 = v31;
        sub_1015A2E04(v31, off_1021AD1E8[(_QWORD)objc_msgSend(a3, "userType")]);
        if (v32 < 0)
          v12 = (void **)v31[0];
        v13 = __p;
        sub_1015A2E04(__p, off_1021AD210[(_QWORD)objc_msgSend(a3, "placeType")]);
        if (v30 < 0)
          v13 = (void **)__p[0];
        v14 = objc_msgSend(objc_msgSend(v6, "mecardAddress"), "UTF8String");
        *(_DWORD *)buf = 68289795;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        *(_QWORD *)v38 = v12;
        *(_WORD *)&v38[8] = 2082;
        v39 = v13;
        v40 = 2081;
        v41 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,hasEmergencyResponseAreaChanged,new infered place\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s}", buf, 0x30u);
        if (v30 < 0)
          operator delete(__p[0]);
        if (v32 < 0)
          operator delete(v31[0]);
      }
      v15 = objc_msgSend(a2, "userType");
      v16 = objc_msgSend(a3, "userType");
      v17 = objc_msgSend(v5, "mecardAddress");
      v18 = objc_msgSend(v6, "mecardAddress");
      if (v17)
      {
        if (v18)
          v19 = objc_msgSend(v18, "isEqualToString:", v17) ^ 1;
        else
          v19 = 1;
      }
      else
      {
        v19 = v18 != 0;
      }
      if (v15 == v16)
        v21 = v19;
      else
        v21 = 1;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289794;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 1026;
        *(_DWORD *)v38 = v21;
        *(_WORD *)&v38[4] = 1026;
        *(_DWORD *)&v38[6] = v15 != v16;
        LOWORD(v39) = 1026;
        *(_DWORD *)((char *)&v39 + 2) = v19;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,hasEmergencyResponseAreaChanged,changed fields\", \"any field\":%{public}hhd, \"label\":%{public}hhd, \"mecardaddress\":%{public}hhd}", buf, 0x24u);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#ADR,hasEmergencyResponseAreaChanged,no new infered place", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v31[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,hasEmergencyResponseAreaChanged,no new infered place", v31, 2);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::hasEmergencyResponseAreaChanged(_CLPlaceInference *, _CLPlaceInference *) const", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      return 1;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#ADR,hasEmergencyResponseAreaChanged,no old infered place", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v31[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ADR,hasEmergencyResponseAreaChanged,no old infered place", v31, 2);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::hasEmergencyResponseAreaChanged(_CLPlaceInference *, _CLPlaceInference *) const", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    return a3 != 0;
  }
  return v21;
}

void sub_1012C79EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1012C7A30(uint64_t a1)
{
  *(_DWORD *)(a1 + 288) = 0;

  *(_QWORD *)(a1 + 296) = 0;
}

uint64_t sub_1012C7A5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  signed int v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  void *v37;
  NSObject *v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  uint64_t v61;
  _WORD v62[8];
  void *__p[2];
  uint64_t v64;
  id v65;
  _WORD v66[12];
  uint64_t v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  uint8_t buf[4];
  int v73;
  __int16 v74;
  const char *v75;

  if (a2 && *(_QWORD *)(a4 + 24))
  {
    v6 = *(_QWORD *)(a1 + 160);
    if (!v6)
      sub_10025FD1C();
    v9 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    v10 = sub_100A57ECC(v9);
    sub_100A53830((int *)v10, (uint64_t)v66);
    if (!v67)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v31 = qword_1022A0088;
      v30 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
      *(_DWORD *)buf = 68289026;
      v73 = 0;
      v74 = 2082;
      v75 = "";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,sendAdr,no valid partner certs\"}", buf, 0x12u);
      goto LABEL_41;
    }
    v11 = *(_QWORD *)(a1 + 160);
    if (!v11)
      sub_10025FD1C();
    v12 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
    v13 = objc_alloc_init((Class)NSMutableDictionary);
    v14 = sub_1012C8830(a1, v12, 0, a3);
    if (v14)
    {
      objc_msgSend(v13, "setValue:forKey:", v14, CFSTR("call_information"));

    }
    v15 = sub_1012C8EE8(a1, a3);
    if (v15)
    {
      objc_msgSend(v13, "setValue:forKey:", v15, CFSTR("caller_information"));

    }
    v16 = sub_1012C9BA4(a1, a3);
    if (v16)
    {
      objc_msgSend(v13, "setValue:forKey:", v16, CFSTR("caller_location"));

    }
    v17 = sub_100A82980((uint64_t)v13);
    if (v17)
    {
      v65 = 0;
      v18 = sub_100F4DC64(v17, 0x20u, &v65);
      v19 = v65;
      v20 = v18;
      if (v18 && v65)
      {
        v21 = objc_msgSend(objc_msgSend(a2, "valueForKey:", CFSTR("timestamp")), "intValue");
        v22 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 32);
        CC_SHA256(objc_msgSend(v18, "bytes"), (CC_LONG)objc_msgSend(v18, "length"), (unsigned __int8 *)objc_msgSend(v22, "mutableBytes"));
        v23 = sub_100F4E9D8((uint64_t)v66, v21, (uint64_t)v22, (uint64_t)v65);
        v24 = v23;
        v25 = sub_1012CA914(a1, v12, 0);
        v26 = v25;
        *(_DWORD *)buf = v12;
        v27 = *(_QWORD *)(a1 + 192);
        if (!v27)
          sub_10025FD1C();
        v28 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v27 + 48))(v27, buf);
        if (*(char *)(v28 + 159) < 0)
        {
          sub_100115CE4(__p, *(void **)(v28 + 136), *(_QWORD *)(v28 + 144));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v28 + 136);
          v64 = *(_QWORD *)(v28 + 152);
        }
        if (v64 >= 0)
          v37 = (void *)HIBYTE(v64);
        else
          v37 = __p[1];
        if (!v37)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v42 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,native number is empty, not sending ADR", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v62[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendAdr,native number is empty, not sending ADR", v62, 2);
            v60 = (uint8_t *)v59;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v59);
            if (v60 != buf)
              free(v60);
          }
          HIDWORD(v61) = 0;
LABEL_66:
          if (*(char *)(a1 + 263) < 0)
            v43 = *(_QWORD *)(a1 + 248);
          else
            v43 = *(unsigned __int8 *)(a1 + 263);
          if (!v43 || byte_102313FC8)
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v49 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,companion number is empty or device supports alternate account, not sending ADR", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021AD148);
              v62[0] = 0;
              LODWORD(v61) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendAdr,companion number is empty or device supports alternate account, not sending ADR", v62, v61);
              v56 = (uint8_t *)v55;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v55);
              if (v56 != buf)
                free(v56);
            }
            v46 = 0;
            goto LABEL_88;
          }
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v44 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,sending ADR for companion number", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v62[0] = 0;
            LODWORD(v61) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendAdr,sending ADR for companion number", v62, v61);
            v58 = (uint8_t *)v57;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v57);
            if (v58 != buf)
              free(v58);
          }
          v45 = sub_1012CAF30(a1, (uint64_t *)(a1 + 240), v21, (uint64_t)a2, v18, (uint64_t)v23, (uint64_t)v25);
          sub_100270E34((uint64_t)v68, a4);
          v46 = sub_1012CB434(a1, 1, (uint64_t)v45, a3, (uint64_t)v68);
          v47 = v69;
          if (v69 == v68)
          {
            v48 = 4;
            v47 = v68;
          }
          else
          {
            if (!v69)
            {
LABEL_87:

LABEL_88:
              v30 = HIDWORD(v61) | v46;
              if (SHIBYTE(v64) < 0)
                operator delete(__p[0]);
              goto LABEL_42;
            }
            v48 = 5;
          }
          (*(void (**)(void))(*v47 + 8 * v48))();
          goto LABEL_87;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v38 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,sending ADR for native number", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v62[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendAdr,sending ADR for native number", v62, 2);
          v54 = (uint8_t *)v53;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v53);
          if (v54 != buf)
            free(v54);
        }
        v39 = sub_1012CAF30(a1, (uint64_t *)__p, v21, (uint64_t)a2, v18, (uint64_t)v23, (uint64_t)v25);
        sub_100270E34((uint64_t)v70, a4);
        HIDWORD(v61) = sub_1012CB434(a1, 0, (uint64_t)v39, a3, (uint64_t)v70);
        v40 = v71;
        if (v71 == v70)
        {
          v41 = 4;
          v40 = v70;
        }
        else
        {
          if (!v71)
          {
LABEL_65:

            goto LABEL_66;
          }
          v41 = 5;
        }
        (*(void (**)(void))(*v40 + 8 * v41))();
        goto LABEL_65;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v35 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#ADR,sendAdr,encrypted ADR data and/or key are nil", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_41:
        v30 = 0;
LABEL_42:
        sub_100A9224C((uint64_t)v66);
        return v30;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,sendAdr,encrypted ADR data and/or key are nil", __p, 2);
      v34 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v52);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v32 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#ADR,sendAdr,failed to serialize ADR data dict into JSON", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_41;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,sendAdr,failed to serialize ADR data dict into JSON", __p, 2);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v33);
    }
    if (v34 != buf)
      free(v34);
    goto LABEL_41;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v29 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#ADR,sendAdr,required input is missing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v66[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,sendAdr,required input is missing", v66, 2);
    v51 = (uint8_t *)v50;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v50);
    if (v51 != buf)
      free(v51);
  }
  return 0;
}

void sub_1012C875C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a18 < 0)
    operator delete(__p);
  sub_100A9224C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1012C8828()
{
  JUMPOUT(0x1012C8820);
}

id sub_1012C8830(uint64_t a1, int a2, char a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  void **v14;
  void **v15;
  NSString *v16;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  int v22;
  void *v23;
  uint8_t *v24;
  void *v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v33[3];
  void **p_p;
  uint64_t v35;
  uint64_t v36[3];
  void *__p;
  uint64_t v38;
  char *v39;
  void *__dst[2];
  uint64_t v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  __int16 v50;
  id v51;
  __int16 v52;
  id v53;

  v8 = objc_alloc_init((Class)NSMutableDictionary);
  *(_DWORD *)buf = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (!v9)
    sub_10025FD1C();
  v10 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf);
  if (*(char *)(v10 + 159) < 0)
  {
    sub_100115CE4(__dst, *(void **)(v10 + 136), *(_QWORD *)(v10 + 144));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v10 + 136);
    v41 = *(_QWORD *)(v10 + 152);
  }
  sub_100197040();
  v11 = sub_100195F08();
  if (byte_102313FC8)
    v12 = 0;
  else
    v12 = v11;
  if (v12 != 1)
  {
    if (SHIBYTE(v41) < 0)
    {
      if (!__dst[1])
        goto LABEL_28;
      v14 = (void **)__dst[0];
    }
    else
    {
      if (!HIBYTE(v41))
        goto LABEL_28;
      v14 = __dst;
    }
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14);
    v17 = CFSTR("tel");
LABEL_27:
    objc_msgSend(v8, "setValue:forKey:", v16, v17);
    goto LABEL_28;
  }
  v13 = (_QWORD *)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
  {
    if (!*(_QWORD *)(a1 + 248))
      goto LABEL_18;
    v13 = (_QWORD *)*v13;
    goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 263))
LABEL_17:
    objc_msgSend(v8, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), CFSTR("tel"));
LABEL_18:
  if (SHIBYTE(v41) < 0)
  {
    if (__dst[1])
    {
      v15 = (void **)__dst[0];
      goto LABEL_26;
    }
  }
  else if (HIBYTE(v41))
  {
    v15 = __dst;
LABEL_26:
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15);
    v17 = CFSTR("tel_alt");
    goto LABEL_27;
  }
LABEL_28:
  v18 = *(void **)(a1 + 280);
  if (v18)
  {
    if (objc_msgSend(v18, "shareDuringEmergency"))
    {
      if (objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCode"))
      {
        objc_msgSend(v8, "setValue:forKey:", objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCode"), CFSTR("device_language"));
        if (a4)
        {
          if ((a3 & 1) == 0)
          {
            std::string::assign((std::string *)(a4 + 1152), (const std::string::value_type *)objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCode"), "UTF8String"));
            if (objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCodeModifiedDate"))
              *(_DWORD *)(a4 + 1236) = sub_1012CB9C8((uint64_t)objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCodeModifiedDate"));
            if (objc_opt_class(MCProfileConnection, v19)
              && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
            {
              v20 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCode"), "UTF8String");
              *(_DWORD *)buf = 126;
              sub_1015A2E04(v43, v20);
              *(_DWORD *)((char *)&v47 + 2) = 6;
              v38 = 0;
              v39 = 0;
              __p = 0;
              p_p = &__p;
              LOBYTE(v35) = 0;
              __p = operator new(0x28uLL);
              v38 = (uint64_t)__p;
              v39 = (char *)__p + 40;
              v38 = sub_1006AB40C((uint64_t)&v39, (uint64_t)buf, (uint64_t)&v49, (uint64_t)__p);
              sub_1001F8644((uint64_t)v43);
              v21 = *(void **)(a1 + 264);
              memset(v36, 0, sizeof(v36));
              sub_1006AB68C(v36, (uint64_t)__p, v38, 0xCCCCCCCCCCCCCCCDLL * ((v38 - (uint64_t)__p) >> 3));
              objc_msgSend(v21, "setMeasurements:", sub_1006A7590(v36));
              *(_QWORD *)buf = v36;
              sub_1006AB5A0((void ***)buf);
              if (objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCodeModifiedDate"))
              {
                v22 = sub_1012CB9C8((uint64_t)objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCodeModifiedDate"));
                *(_DWORD *)buf = 137;
                *(_DWORD *)v43 = v22;
                *(_DWORD *)((char *)&v47 + 2) = 0;
                sub_100A737CC(&p_p, (uint64_t)buf, 1uLL);
                sub_1001F8644((uint64_t)v43);
                v23 = *(void **)(a1 + 264);
                memset(v33, 0, sizeof(v33));
                sub_1006AB68C(v33, (uint64_t)p_p, v35, 0xCCCCCCCCCCCCCCCDLL * ((v35 - (uint64_t)p_p) >> 3));
                objc_msgSend(v23, "setMeasurements:", sub_1006A7590(v33));
                *(_QWORD *)buf = v33;
                sub_1006AB5A0((void ***)buf);
                *(_QWORD *)buf = &p_p;
                sub_1006AB5A0((void ***)buf);
              }
              *(_QWORD *)buf = &__p;
              sub_1006AB5A0((void ***)buf);
            }
          }
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    sub_100A82650(*(_DWORD *)(a1 + 272), buf);
    if (SBYTE3(v45) >= 0)
      v24 = buf;
    else
      v24 = *(uint8_t **)buf;
    objc_msgSend(v8, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24), CFSTR("medium"));
    if (!sub_1012CBA34(a1))
    {
LABEL_52:
      if (SBYTE3(v45) < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
    sub_1012CBA98(a1);
    if (SHIBYTE(v39) < 0)
    {
      if (!v38)
      {
LABEL_51:
        operator delete(__p);
        goto LABEL_52;
      }
      v25 = __p;
    }
    else
    {
      if (!HIBYTE(v39))
        goto LABEL_52;
      v25 = &__p;
    }
    objc_msgSend(v8, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25), CFSTR("trigger_type"));
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_54:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v26 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v27 = objc_msgSend(objc_msgSend(v8, "valueForKey:", CFSTR("tel")), "UTF8String");
    v28 = objc_msgSend(objc_msgSend(v8, "valueForKey:", CFSTR("tel_alt")), "UTF8String");
    v29 = objc_msgSend(objc_msgSend(v8, "valueForKey:", CFSTR("medium")), "UTF8String");
    v30 = objc_msgSend(objc_msgSend(v8, "valueForKey:", CFSTR("trigger_type")), "UTF8String");
    v31 = objc_msgSend(objc_msgSend(v8, "valueForKey:", CFSTR("device_language")), "UTF8String");
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v43 = 2082;
    *(_QWORD *)&v43[2] = "";
    v44 = 2081;
    v45 = v27;
    v46 = 2081;
    v47 = v28;
    v48 = 2082;
    v49 = v29;
    v50 = 2082;
    v51 = v30;
    v52 = 2082;
    v53 = v31;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createCallInfoDict\", \"tel\":%{private, location:escape_only}s, \"tel_alt\":%{private, location:escape_only}s, \"medium\":%{public, location:escape_only}s, \"trigger_type\":%{public, location:escape_only}s, \"device_language\":%{public, location:escape_only}s}", buf, 0x44u);
  }
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  return v8;
}

void sub_1012C8DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a31 = &a12;
  sub_1006AB5A0((void ***)&a31);
  a31 = (char *)&a18;
  sub_1006AB5A0((void ***)&a31);
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1012C8EE8(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *p_p;
  NSObject *v10;
  uint64_t v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unsigned int v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  int v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57[3];
  char *v58;
  _BYTE *v59;
  char *v60;
  _QWORD v61[5];
  void *__p;
  uint64_t v63;
  unsigned __int8 v64;
  void **v65;
  char v66;
  uint8_t buf[8];
  _BYTE v68[10];
  __int16 v69;
  _BOOL4 v70;
  __int16 v71;
  _BOOL4 v72;
  __int16 v73;
  _BOOL4 v74;
  __int16 v75;
  _BOOL4 v76;
  __int16 v77;
  int v78;
  __int16 v79;
  _BOOL4 v80;
  __int16 v81;
  _BOOL4 v82;
  __int16 v83;
  _BOOL4 v84;
  __int16 v85;
  _BOOL4 v86;
  __int16 v87;
  unsigned int v88;

  v4 = *(void **)(a1 + 280);
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerInfoDict,no data available for caller information dict so not sending", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createCallerInfoDict,no data available for caller information dict so not sending", &__p, 2);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerInfoDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    if (a2)
    {
      *(_QWORD *)&v12 = 0x200000002;
      *((_QWORD *)&v12 + 1) = 0x200000002;
      *(_OWORD *)(a2 + 1108) = v12;
      *(_OWORD *)(a2 + 1124) = v12;
      *(_QWORD *)(a2 + 1140) = 0x200000002;
      sub_1012CBB44(a1, v11);
    }
    return 0;
  }
  if ((objc_msgSend(v4, "shareDuringEmergency") & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerInfoDict,medical ID sharing not allowed by user", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createCallerInfoDict,medical ID sharing not allowed by user", &__p, 2);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerInfoDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    sub_1012CBD88(a1, (_DWORD *)a2);
    if (a2)
      sub_1012CBF80(a1, v14);
    return 0;
  }
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = objc_msgSend(*(id *)(a1 + 280), "name");
  if (v6)
    objc_msgSend(v5, "setValue:forKey:", sub_1013908B4(objc_msgSend(*(id *)(a1 + 280), "name"), 0x7D0u), CFSTR("name"));
  v7 = objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate");
  if (v7)
    objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSDateComponents year](-[NSCalendar components:fromDate:toDate:options:](+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian), "components:fromDate:toDate:options:", 4, objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate"), +[NSDate date](NSDate, "date"), 0), "year")), CFSTR("age"));
  v8 = objc_msgSend(*(id *)(a1 + 280), "weight");
  if (v8)
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "weight"), "doubleValueForUnit:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("kg")));
    objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("weight"));
  }
  v56 = objc_msgSend(*(id *)(a1 + 280), "height");
  if (v56)
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "height"), "doubleValueForUnit:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("m")));
    objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("height"));
  }
  sub_1012CC324((uint64_t)objc_msgSend(*(id *)(a1 + 280), "bloodType"), &__p);
  if ((char)v64 < 0)
  {
    if (v63)
    {
      p_p = __p;
      goto LABEL_31;
    }
  }
  else if (v64)
  {
    p_p = &__p;
LABEL_31:
    objc_msgSend(v5, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), CFSTR("blood_type"));
    v15 = 1;
    goto LABEL_33;
  }
  v15 = 0;
LABEL_33:
  v16 = objc_msgSend(*(id *)(a1 + 280), "medicalConditions");
  if (v16)
    objc_msgSend(v5, "setValue:forKey:", sub_1013908B4(objc_msgSend(*(id *)(a1 + 280), "medicalConditions"), 0x7D0u), CFSTR("medical_conditions"));
  v54 = v8;
  v55 = v7;
  v17 = objc_msgSend(*(id *)(a1 + 280), "medicalNotes");
  if (v17)
    objc_msgSend(v5, "setValue:forKey:", sub_1013908B4(objc_msgSend(*(id *)(a1 + 280), "medicalNotes"), 0x7D0u), CFSTR("medical_notes"));
  v18 = objc_msgSend(*(id *)(a1 + 280), "allergyInfo");
  if (v18)
    objc_msgSend(v5, "setValue:forKey:", sub_1013908B4(objc_msgSend(*(id *)(a1 + 280), "allergyInfo"), 0x7D0u), CFSTR("allergies"));
  v53 = v15;
  v19 = objc_msgSend(*(id *)(a1 + 280), "medicationInfo");
  if (v19)
    objc_msgSend(v5, "setValue:forKey:", sub_1013908B4(objc_msgSend(*(id *)(a1 + 280), "medicationInfo"), 0x7D0u), CFSTR("medications"));
  if (objc_msgSend(*(id *)(a1 + 280), "emergencyContacts")
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), "count"))
  {
    v20 = objc_alloc_init((Class)NSMutableArray);
    v21 = objc_msgSend(*(id *)(a1 + 280), "emergencyContacts");
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v61[2] = sub_1012CC664;
    v61[3] = &unk_1021AD0E0;
    v61[4] = v20;
    objc_msgSend(v21, "enumerateObjectsUsingBlock:", v61);
    v22 = objc_msgSend(v20, "count");
    objc_msgSend(v5, "setValue:forKey:", v20, CFSTR("emergency_contacts"));
    if (!a2)
      goto LABEL_52;
LABEL_46:
    v23 = objc_msgSend(*(id *)(a1 + 280), "name");
    v24 = objc_msgSend(*(id *)(a1 + 280), "nameModifiedDate");
    sub_1012CC7BC((uint64_t)v24, 1, (uint64_t)v23, (uint64_t)v24, (_DWORD *)(a2 + 1108), (_DWORD *)(a2 + 1200));
    v25 = objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate");
    v26 = objc_msgSend(*(id *)(a1 + 280), "gregorianBirthdayModifiedDate");
    sub_1012CC7BC((uint64_t)v26, 1, (uint64_t)v25, (uint64_t)v26, (_DWORD *)(a2 + 1112), (_DWORD *)(a2 + 1204));
    v27 = objc_msgSend(*(id *)(a1 + 280), "weight");
    v28 = objc_msgSend(*(id *)(a1 + 280), "weightModifiedDate");
    sub_1012CC7BC((uint64_t)v28, 1, (uint64_t)v27, (uint64_t)v28, (_DWORD *)(a2 + 1116), (_DWORD *)(a2 + 1208));
    v29 = objc_msgSend(*(id *)(a1 + 280), "height");
    v30 = objc_msgSend(*(id *)(a1 + 280), "heightModifiedDate");
    sub_1012CC7BC((uint64_t)v30, 1, (uint64_t)v29, (uint64_t)v30, (_DWORD *)(a2 + 1120), (_DWORD *)(a2 + 1212));
    v31 = v64;
    if ((v64 & 0x80u) != 0)
      v31 = v63;
    if (v31)
      v32 = 1;
    else
      v32 = 2;
    *(_DWORD *)(a2 + 1124) = v32;
    v33 = objc_msgSend(*(id *)(a1 + 280), "medicalConditions");
    v34 = objc_msgSend(*(id *)(a1 + 280), "medicalConditionsModifiedDate");
    sub_1012CC7BC((uint64_t)v34, 1, (uint64_t)v33, (uint64_t)v34, (_DWORD *)(a2 + 1144), (_DWORD *)(a2 + 1232));
    v35 = objc_msgSend(*(id *)(a1 + 280), "medicalNotes");
    v36 = objc_msgSend(*(id *)(a1 + 280), "medicalNotesModifiedDate");
    sub_1012CC7BC((uint64_t)v36, 1, (uint64_t)v35, (uint64_t)v36, (_DWORD *)(a2 + 1128), (_DWORD *)(a2 + 1216));
    v37 = objc_msgSend(*(id *)(a1 + 280), "allergyInfo");
    v38 = objc_msgSend(*(id *)(a1 + 280), "allergyInfoModifiedDate");
    sub_1012CC7BC((uint64_t)v38, 1, (uint64_t)v37, (uint64_t)v38, (_DWORD *)(a2 + 1132), (_DWORD *)(a2 + 1220));
    v39 = objc_msgSend(*(id *)(a1 + 280), "medicationInfo");
    v40 = objc_msgSend(*(id *)(a1 + 280), "medicationInfoModifiedDate");
    sub_1012CC7BC((uint64_t)v40, 1, (uint64_t)v39, (uint64_t)v40, (_DWORD *)(a2 + 1136), (_DWORD *)(a2 + 1224));
    v41 = objc_msgSend(*(id *)(a1 + 280), "emergencyContacts");
    v42 = objc_msgSend(*(id *)(a1 + 280), "emergencyContactsModifiedDate");
    sub_1012CC7BC((uint64_t)v42, 1, (uint64_t)v41, (uint64_t)v42, (_DWORD *)(a2 + 1140), (_DWORD *)(a2 + 1228));
    goto LABEL_52;
  }
  v22 = 0;
  if (a2)
    goto LABEL_46;
LABEL_52:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v43 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68291586;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v68 = 2082;
    *(_QWORD *)&v68[2] = "";
    v69 = 1026;
    v70 = v6 != 0;
    v71 = 1026;
    v72 = v55 != 0;
    v73 = 1026;
    v74 = v56 != 0;
    v75 = 1026;
    v76 = v54 != 0;
    v77 = 1026;
    v78 = v53;
    v79 = 1026;
    v80 = v16 != 0;
    v81 = 1026;
    v82 = v17 != 0;
    v83 = 1026;
    v84 = v18 != 0;
    v85 = 1026;
    v86 = v19 != 0;
    v87 = 1026;
    v88 = v22;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createCallerInfoDict\", \"name sent\":%{public}hhd, \"age sent\":%{public}hhd, \"height sent\":%{public}hhd, \"weight sent\":%{public}hhd, \"blood_type sent\":%{public}hhd, \"medical_conditions sent\":%{public}hhd, \"medical_notes sent\":%{public}hhd, \"allergies sent\":%{public}hhd, \"medications sent\":%{public}hhd, \"number of emergency contacts sent\":%{public}d}", buf, 0x4Eu);
  }
  if (a2
    && objc_opt_class(MCProfileConnection, v44)
    && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
  {
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "name"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "nameModifiedDate"), 116, 128);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "height"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "heightModifiedDate"), 119, 131);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "weight"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "weightModifiedDate"), 118, 130);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "allergyInfo"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "allergyInfoModifiedDate"), 122, 133);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "gregorianBirthdayModifiedDate"), 117, 129);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalConditions"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalConditionsModifiedDate"), 125, 136);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalNotes"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalNotesModifiedDate"), 121, 132);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicationInfo"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicationInfoModifiedDate"), 123, 134);
    sub_1012CC844(a1, 1, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "emergencyContactsModifiedDate"), 124, 135);
    v45 = v64;
    if ((v64 & 0x80u) != 0)
      v45 = v63;
    if (v45)
      v46 = 1;
    else
      v46 = 2;
    *(_DWORD *)buf = 120;
    *(_DWORD *)v68 = v46;
    v74 = 0;
    v59 = 0;
    v60 = 0;
    v58 = 0;
    v65 = (void **)&v58;
    v66 = 0;
    v58 = (char *)operator new(0x28uLL);
    v59 = v58;
    v60 = v58 + 40;
    v59 = (_BYTE *)sub_1006AB40C((uint64_t)&v60, (uint64_t)buf, (uint64_t)&v76 + 2, (uint64_t)v58);
    sub_1001F8644((uint64_t)v68);
    v47 = *(void **)(a1 + 264);
    memset(v57, 0, sizeof(v57));
    sub_1006AB68C(v57, (uint64_t)v58, (uint64_t)v59, 0xCCCCCCCCCCCCCCCDLL * ((v59 - v58) >> 3));
    objc_msgSend(v47, "setMeasurements:", sub_1006A7590(v57));
    *(_QWORD *)buf = v57;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v58;
    sub_1006AB5A0((void ***)buf);
  }
  if ((char)v64 < 0)
    operator delete(__p);
  return v5;
}

void sub_1012C9B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char *a36)
{
  a36 = &a19;
  sub_1006AB5A0((void ***)&a36);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1012C9BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v5;
  void *v6;
  id v7;
  void *v8;
  id v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  void *v19;
  uint64_t *v20;
  NSObject *v21;
  void *v22;
  id v23;
  id v25;
  id v26;
  id v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void **v31;
  id v32;
  id v33;
  NSObject *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  void *__p[2];
  char v46;
  void *v47;
  char v48;
  char v49;
  uint64_t v50[3];
  uint64_t v51[3];
  _BYTE *v52;
  _BYTE *v53;
  _QWORD v54[2];
  _BYTE v55[96];
  __int128 v56;
  __int128 v57;
  _BYTE v58[28];
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61[3];
  uint64_t v62[3];
  uint8_t buf[48];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[94];

  v3 = *(_QWORD *)(a1 + 160);
  if (!v3)
    sub_10025FD1C();
  v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if (!*((_BYTE *)sub_100A57ECC(v5) + 58))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerLocationDict,ERA disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)v55 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createCallerLocationDict,ERA disabled", v55, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    return 0;
  }
  v6 = *(void **)(a1 + 296);
  if (!v6)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerLocationDict,no data available for caller location dict so not sending", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)v55 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createCallerLocationDict,no data available for caller location dict so not sending", v55, 2);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    if (a2)
      *(_DWORD *)(a2 + 1104) = 2;
    *(_DWORD *)buf = 115;
    *(_DWORD *)&buf[8] = 2;
    *(_DWORD *)&buf[32] = 0;
    memset(v55, 0, 24);
    v52 = v55;
    LOBYTE(v53) = 0;
    *(_QWORD *)v55 = operator new(0x28uLL);
    *(_QWORD *)&v55[8] = *(_QWORD *)v55;
    *(_QWORD *)&v55[16] = *(_QWORD *)v55 + 40;
    *(_QWORD *)&v55[8] = sub_1006AB40C((uint64_t)&v55[16], (uint64_t)buf, (uint64_t)&buf[40], *(uint64_t *)v55);
    sub_1001F8644((uint64_t)&buf[8]);
    v22 = *(void **)(a1 + 264);
    memset(v62, 0, sizeof(v62));
    sub_1006AB68C(v62, *(uint64_t *)v55, *(uint64_t *)&v55[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v55[8] - *(_QWORD *)v55) >> 3));
    objc_msgSend(v22, "setMeasurements:", sub_1006A7590(v62));
    v20 = v62;
    goto LABEL_34;
  }
  v7 = objc_msgSend(v6, "placemark");
  if (!v7 || (v8 = v7, !objc_msgSend(v7, "mecardAddress")) || !objc_msgSend(v8, "location"))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ADR,createCallerLocationDict,invalid placemark", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)v55 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createCallerLocationDict,invalid placemark", v55, 2);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    if (a2)
      *(_DWORD *)(a2 + 1104) = 2;
    *(_DWORD *)buf = 115;
    *(_DWORD *)&buf[8] = 2;
    *(_DWORD *)&buf[32] = 0;
    memset(v55, 0, 24);
    v52 = v55;
    LOBYTE(v53) = 0;
    *(_QWORD *)v55 = operator new(0x28uLL);
    *(_QWORD *)&v55[8] = *(_QWORD *)v55;
    *(_QWORD *)&v55[16] = *(_QWORD *)v55 + 40;
    *(_QWORD *)&v55[8] = sub_1006AB40C((uint64_t)&v55[16], (uint64_t)buf, (uint64_t)&buf[40], *(uint64_t *)v55);
    sub_1001F8644((uint64_t)&buf[8]);
    v19 = *(void **)(a1 + 264);
    memset(v61, 0, sizeof(v61));
    sub_1006AB68C(v61, *(uint64_t *)v55, *(uint64_t *)&v55[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v55[8] - *(_QWORD *)v55) >> 3));
    objc_msgSend(v19, "setMeasurements:", sub_1006A7590(v61));
    v20 = v61;
LABEL_34:
    *(_QWORD *)buf = v20;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = v55;
    sub_1006AB5A0((void ***)buf);
    return 0;
  }
  *(_OWORD *)&v55[4] = 0uLL;
  *(_OWORD *)&v55[20] = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v55[36] = _Q0;
  *(_OWORD *)&v55[52] = _Q0;
  *(_OWORD *)&v55[68] = _Q0;
  *(_DWORD *)v55 = 0xFFFF;
  *(_DWORD *)&v55[84] = 0;
  v56 = 0uLL;
  *(_QWORD *)&v55[88] = 0xBFF0000000000000;
  *(_QWORD *)((char *)&v57 + 4) = 0xBFF0000000000000;
  LODWORD(v57) = 0;
  HIDWORD(v57) = 0x7FFFFFFF;
  memset(v58, 0, 25);
  v14 = objc_msgSend(v8, "location", sub_10012A33C(&v59).n128_f64[0]);
  if (v14)
  {
    objc_msgSend(v14, "clientLocation");
  }
  else
  {
    memset(v69, 0, 28);
    v68 = 0u;
    v67 = 0u;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  v56 = v67;
  v57 = v68;
  *(_OWORD *)v58 = v69[0];
  *(_OWORD *)&v58[12] = *(_OWORD *)((char *)v69 + 12);
  *(_OWORD *)&v55[32] = *(_OWORD *)&buf[32];
  *(_OWORD *)&v55[48] = v64;
  *(_OWORD *)&v55[64] = v65;
  *(_OWORD *)&v55[80] = v66;
  *(_OWORD *)v55 = *(_OWORD *)buf;
  *(_OWORD *)&v55[16] = *(_OWORD *)&buf[16];
  v25 = sub_100A807C4((uint64_t)v55);
  if (v25)
  {
    v26 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v26, "setValue:forKey:", sub_1013908B4(objc_msgSend(v8, "mecardAddress"), 0x7D0u), CFSTR("full_address"));
    objc_msgSend(v26, "setValue:forKey:", objc_msgSend(v25, "valueForKey:", CFSTR("hunc")), CFSTR("hunc"));
    v27 = objc_msgSend(v25, "valueForKey:", CFSTR("vunc"));
    if (v27)
      objc_msgSend(v26, "setValue:forKey:", v27, CFSTR("vunc"));
    objc_msgSend(v26, "setValue:forKey:", objc_msgSend(v25, "valueForKey:", CFSTR("confidence")), CFSTR("confidence"));
    v23 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v23, "setValue:forKey:", v25, CFSTR("location"));
    objc_msgSend(v23, "setValue:forKey:", v26, CFSTR("address"));
    if (a2)
      *(_DWORD *)(a2 + 1104) = 1;
    *(_DWORD *)buf = 115;
    *(_DWORD *)&buf[8] = 1;
    *(_DWORD *)&buf[32] = 0;
    v53 = 0;
    v54[0] = 0;
    v52 = 0;
    v47 = &v52;
    v48 = 0;
    v52 = operator new(0x28uLL);
    v53 = v52;
    v54[0] = v52 + 40;
    v53 = (_BYTE *)sub_1006AB40C((uint64_t)v54, (uint64_t)buf, (uint64_t)&buf[40], (uint64_t)v52);
    sub_1001F8644((uint64_t)&buf[8]);
    v28 = *(void **)(a1 + 264);
    memset(v50, 0, sizeof(v50));
    sub_1006AB68C(v50, (uint64_t)v52, (uint64_t)v53, 0xCCCCCCCCCCCCCCCDLL * ((v53 - v52) >> 3));
    objc_msgSend(v28, "setMeasurements:", sub_1006A7590(v50));
    *(_QWORD *)buf = v50;
    sub_1006AB5A0((void ***)buf);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v30 = &v47;
      sub_1015A2E04(&v47, off_1021AD1E8[(_QWORD)objc_msgSend(*(id *)(a1 + 296), "userType")]);
      if (v49 < 0)
        v30 = v47;
      sub_1015A2E04(__p, off_1021AD210[(_QWORD)objc_msgSend(*(id *)(a1 + 296), "placeType")]);
      if (v46 >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      v32 = objc_msgSend(objc_msgSend(v8, "mecardAddress"), "UTF8String");
      v33 = objc_msgSend(objc_msgSend(v8, "name"), "UTF8String");
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v30;
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = v31;
      *(_WORD *)&buf[38] = 2081;
      *(_QWORD *)&buf[40] = v32;
      LOWORD(v64) = 2081;
      *(_QWORD *)((char *)&v64 + 2) = v33;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createCallerLocationDict,created caller location dict\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s, \"name\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (v46 < 0)
        operator delete(__p[0]);
      if (v49 < 0)
        operator delete(v47);
    }
    *(_QWORD *)buf = &v52;
    sub_1006AB5A0((void ***)buf);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v34 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#ADR,createCallerLocationDict,failed to create location dict", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v52) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createCallerLocationDict,failed to create location dict", &v52, 2);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    if (a2)
      *(_DWORD *)(a2 + 1104) = 2;
    *(_DWORD *)buf = 115;
    *(_DWORD *)&buf[8] = 2;
    *(_DWORD *)&buf[32] = 0;
    v53 = 0;
    v54[0] = 0;
    v52 = 0;
    v47 = &v52;
    v48 = 0;
    v52 = operator new(0x28uLL);
    v53 = v52;
    v54[0] = v52 + 40;
    v53 = (_BYTE *)sub_1006AB40C((uint64_t)v54, (uint64_t)buf, (uint64_t)&buf[40], (uint64_t)v52);
    sub_1001F8644((uint64_t)&buf[8]);
    v35 = *(void **)(a1 + 264);
    memset(v51, 0, sizeof(v51));
    sub_1006AB68C(v51, (uint64_t)v52, (uint64_t)v53, 0xCCCCCCCCCCCCCCCDLL * ((v53 - v52) >> 3));
    objc_msgSend(v35, "setMeasurements:", sub_1006A7590(v51));
    *(_QWORD *)buf = v51;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v52;
    sub_1006AB5A0((void ***)buf);
    v23 = 0;
  }
  v36 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v23;
}

void sub_1012CA7DC(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x338]);
  _Unwind_Resume(a1);
}

id sub_1012CA914(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  unsigned int *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::string::size_type size;
  char v13;
  std::string *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string::size_type v18;
  char v19;
  std::string *v20;
  NSString *v21;
  NSString *v22;
  uint64_t v23;
  uint8_t *v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  int v30;
  unsigned int v31;
  std::string *v32;
  const char *v33;
  std::string *v34;
  const char *v35;
  const char *v36;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  std::string v44;
  void *__p[2];
  char v46;
  std::string __dst;
  uint8_t buf[8];
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  std::string *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  std::string *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;

  *(_DWORD *)buf = a2;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    sub_10025FD1C();
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v8, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), CFSTR("sim"));
  objc_msgSend(v8, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v7), CFSTR("rat"));
  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
    sub_10025FD1C();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  sub_1015A2E04(__p, "carrier");
  v11 = sub_100A580B8(v10, a2, (uint64_t *)__p);
  if (*((char *)v11 + 55) < 0)
    sub_100115CE4(&__dst, (void *)v11[4], v11[5]);
  else
    __dst = *(std::string *)(v11 + 4);
  if (v46 < 0)
    operator delete(__p[0]);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v13 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  objc_msgSend(v8, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst), CFSTR("sim_bundle_id"));
  v15 = *(_QWORD *)(a1 + 160);
  if (!v15)
    sub_10025FD1C();
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
  sub_1015A2E04(v42, "operator");
  v17 = sub_100A580B8(v16, a2, (uint64_t *)v42);
  if (*((char *)v17 + 55) < 0)
    sub_100115CE4(&v44, (void *)v17[4], v17[5]);
  else
    v44 = *(std::string *)(v17 + 4);
  if (v43 < 0)
    operator delete(v42[0]);
  v18 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  v19 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = v44.__r_.__value_.__l.__size_;
  if (!v18)
  {
    std::string::assign(&v44, "Unavailable");
    v19 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  if (v19 >= 0)
    v20 = &v44;
  else
    v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
  objc_msgSend(v8, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20), CFSTR("operator_bundle_id"));
  HIDWORD(v40) = a2;
  v21 = sub_100F7F650(v7[8]);
  objc_msgSend(v8, "setValue:forKey:", v21, CFSTR("sim_country"));
  v22 = sub_100F7F650(v7[2]);
  objc_msgSend(v8, "setValue:forKey:", v22, CFSTR("operator_country"));
  sub_100197040();
  v23 = sub_10075A924();
  objc_msgSend(v8, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23), CFSTR("release_type"));
  sub_100197040();
  sub_10075B048((uint64_t)buf);
  if (v52 >= 0)
    v24 = buf;
  else
    v24 = *(uint8_t **)buf;
  v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24);
  if (SHIBYTE(v52) < 0)
    operator delete(*(void **)buf);
  objc_msgSend(v8, "setValue:forKey:", v25, CFSTR("product_type"));
  if ((a3 & 1) != 0)
  {
    LODWORD(v27) = 2;
  }
  else
  {
    objc_msgSend(v8, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100F79058(*(unsigned int *)(a1 + 276), v26)), CFSTR("trigger_type"));
    v28 = *(void **)(a1 + 296);
    if (v28)
    {
      if (objc_msgSend(v28, "placemark"))
        v27 = 1;
      else
        v27 = 2;
    }
    else
    {
      v27 = 2;
    }
    objc_msgSend(v8, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v27), CFSTR("dsa_availability"));
    objc_msgSend(v8, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_DWORD *)(a1 + 288) > 1), CFSTR("did_dsa_change_within_call"));
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v29 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v40) = v27;
    v30 = v23;
    v31 = *v7;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &__dst;
    else
      v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v33 = -[NSString UTF8String](v21, "UTF8String", v40);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v44;
    else
      v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
    v35 = -[NSString UTF8String](v22, "UTF8String");
    v36 = -[NSString UTF8String](v25, "UTF8String");
    v37 = *(_DWORD *)(a1 + 276);
    v38 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)buf = 68291843;
    *(_DWORD *)&buf[4] = 0;
    v49 = 2082;
    v50 = "";
    v51 = 1026;
    v52 = HIDWORD(v41);
    v53 = 1026;
    v54 = v31;
    v55 = 2082;
    v56 = v32;
    v57 = 2082;
    v58 = v33;
    v59 = 2082;
    v60 = v34;
    v61 = 2082;
    v62 = v35;
    v63 = 1026;
    v64 = v30;
    v65 = 2081;
    v66 = v36;
    v67 = 1026;
    v68 = v37;
    v69 = 1025;
    v70 = v41;
    v71 = 1025;
    v72 = v38;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createAdrInternalDict\", \"sim\":%{public}d, \"rat\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"release_type\":%{public}d, \"product_type\":%{private, location:escape_only}s, \"trigger_type\":%{public}d, \"dsa_availability\":%{private}d, \"did_dsa_change_within_call_count\":%{private}d}", buf, 0x68u);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1012CAE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

id sub_1012CAF30(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  id v15;
  id v16;
  uint64_t *v17;
  void **v18;
  double v19;
  __CFString *v20;
  NSObject *v21;
  NSObject *v23;
  int v24;
  uint64_t *v25;
  int v26;
  void **v27;
  id v28;
  void **v29;
  uint64_t *v30;
  const char *v32;
  uint8_t *v33;
  unint64_t v34;
  void *__p[2];
  char v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  void **v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  id v50;

  v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = a2[1];
  if (a7 && a6 && a5 && a4 && v7)
  {
    v34 = sub_100A8262C();
    sub_100A82650(*(_DWORD *)(a1 + 272), __p);
    v15 = objc_msgSend(a5, "base64EncodedStringWithOptions:", 0);
    v16 = objc_alloc_init((Class)NSMutableDictionary);
    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = (uint64_t *)*a2;
    objc_msgSend(v16, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17), CFSTR("call_ID"));
    objc_msgSend(v16, "setValue:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v34), CFSTR("session_start_time"));
    if (v36 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    objc_msgSend(v16, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18), CFSTR("medium"));
    objc_msgSend(v16, "setValue:forKey:", CFSTR("1"), CFSTR("data_version"));
    objc_msgSend(v16, "setValue:forKey:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3), CFSTR("encrypt_time"));
    objc_msgSend(v16, "setValue:forKey:", a4, CFSTR("location"));
    objc_msgSend(v16, "setValue:forKey:", v15, CFSTR("data"));
    objc_msgSend(v16, "setValue:forKey:", a6, CFSTR("keys"));
    objc_msgSend(v16, "setValue:forKey:", a7, CFSTR("internal"));
    v19 = *(double *)(a1 + 304);
    if (v19 <= 0.0 || v19 > 10.0)
    {
      if (v19 <= 10.0 || v19 > 30.0)
      {
        if (v19 <= 30.0 || v19 > 60.0)
        {
          if (v19 > 100.0 || v19 <= 60.0)
            v20 = CFSTR("Unknown");
          else
            v20 = CFSTR("61-100%");
        }
        else
        {
          v20 = CFSTR("31-60%");
        }
      }
      else
      {
        v20 = CFSTR("11-30%");
      }
    }
    else
    {
      v20 = CFSTR("10% or less");
    }
    objc_msgSend(v16, "setValue:forKey:", v20, CFSTR("battery_level"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *((char *)a2 + 23);
      v25 = (uint64_t *)*a2;
      v26 = v36;
      v27 = (void **)__p[0];
      v28 = -[__CFString UTF8String](v20, "UTF8String");
      v29 = __p;
      *(_DWORD *)buf = 68290307;
      if (v26 < 0)
        v29 = v27;
      v38 = 0;
      if (v24 >= 0)
        v30 = a2;
      else
        v30 = v25;
      v39 = 2082;
      v40 = "";
      v41 = 2081;
      v42 = v30;
      v43 = 2050;
      v44 = v34;
      v45 = 2082;
      v46 = v29;
      v47 = 2050;
      v48 = a3;
      v49 = 2082;
      v50 = v28;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createAdrDict\", \"phone number\":%{private, location:escape_only}s, \"session start time\":%{public}lld, \"medium\":%{public, location:escape_only}s, \"encrypt time\":%{public}lld, \"battery level\":%{public, location:escape_only}s}", buf, 0x44u);
    }
    if (v36 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#ADR,createAdrDict,missing required info for forming ADR POST dict", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createAdrDict,missing required info for forming ADR POST dict", __p, 2);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createAdrDict(const std::string &, CFAbsoluteTime, uint64_t, NSDictionary *, NSData *, NSArray *, NSDictionary *) const", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    return 0;
  }
  return v16;
}

void sub_1012CB404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1012CB434(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  int *v12;
  uint64_t *v13;
  NSObject *v14;
  _BOOL8 v15;
  void **v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  void **v20;
  id v21;
  void **v22;
  void *v23;
  NSMutableURLRequest *v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  const char *v31;
  uint8_t *v32;
  __int16 v33;
  NSMutableURLRequest *v34;
  void *__p[2];
  uint64_t v36;
  _QWORD v37[5];
  _BYTE v38[24];
  _BYTE *v39;
  int v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void **v46;
  __int16 v47;
  id v48;

  v9 = sub_100A82980(a3);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 160);
    if (!v11)
      sub_10025FD1C();
    v12 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
    v13 = sub_100A57ECC(v12);
    if (*((char *)v13 + 111) < 0)
    {
      sub_100115CE4(__p, (void *)v13[11], v13[12]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v13 + 11);
      v36 = v13[13];
    }
    if (v36 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    v34 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)));
    -[NSMutableURLRequest setHTTPMethod:](v34, "setHTTPMethod:", CFSTR("POST"));
    sub_10105C7A4(a1 + 200, (uint64_t)v10, (uint64_t)&v34);
    if (a4)
      ++*(_DWORD *)(a4 + 1092);
    v17 = *(_QWORD *)(a1 + 232);
    v15 = v17 != 0;
    if (!v17)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v27 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "#ADR,postADR,missing NSURLSession", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v33 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#ADR,postADR,missing NSURLSession", &v33, 2);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::postAdr(NumberType, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      goto LABEL_38;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v19 = SHIBYTE(v36);
      v20 = (void **)__p[0];
      v21 = objc_msgSend(v10, "length");
      *(_DWORD *)buf = 68289539;
      v22 = __p;
      if (v19 < 0)
        v22 = v20;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v45 = 2081;
      v46 = v22;
      v47 = 2049;
      v48 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,postADR,sending ADR POST\", \"URL\":%{private, location:escape_only}s, \"length\":%{private}lld}", buf, 0x26u);
    }
    v23 = *(void **)(a1 + 232);
    v24 = v34;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3321888768;
    v37[2] = sub_1012CCC08;
    v37[3] = &unk_10219C368;
    v37[4] = a1;
    v40 = a2;
    v25 = v38;
    sub_100270E34((uint64_t)v38, a5);
    objc_msgSend(objc_msgSend(v23, "uploadTaskWithRequest:fromData:completionHandler:", v24, v10, v37), "resume");
    if (v39 == v38)
    {
      v26 = 4;
    }
    else
    {
      if (!v39)
        goto LABEL_38;
      v26 = 5;
      v25 = v39;
    }
    (*(void (**)(_QWORD *))(*v25 + 8 * v26))(v25);
LABEL_38:
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    return v15;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,postAdr,failed to serialize ADR dict into JSON", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,postAdr,failed to serialize ADR dict into JSON", __p, 2);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::postAdr(NumberType, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  return 0;
}

void sub_1012CB958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSInteger sub_1012CB9C8(uint64_t a1)
{
  if (a1)
    return -[NSDateComponents day](-[NSCalendar components:fromDate:toDate:options:](+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian), "components:fromDate:toDate:options:", 16, a1, +[NSDate date](NSDate, "date"), 0), "day");
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1012CBA34(uint64_t a1)
{
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 160);
  if (!v2)
    sub_10025FD1C();
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2) + 5))
    return 1;
  v4 = *(_DWORD *)(a1 + 276);
  v5 = v4 > 0x13;
  v6 = (0x68E80u >> v4) & 1;
  if (v5)
    return 1;
  else
    return v6;
}

void sub_1012CBA98(uint64_t a1)
{
  __asm { BR              X10 }
}

_QWORD *sub_1012CBACC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;

  return sub_1015A2E04(v12, "Dialer");
}

void sub_1012CBB44(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v4;
  uint64_t v5[3];
  char *v6;
  _BYTE *v7;
  _QWORD v8[2];
  char v9;
  void **v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;

  if (objc_opt_class(MCProfileConnection, a2)
    && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
  {
    LODWORD(v10) = 116;
    v11 = 2;
    v12 = 0;
    v13 = 119;
    v14 = 2;
    v15 = 0;
    v16 = 118;
    v17 = 2;
    v18 = 0;
    v19 = 122;
    v20 = 2;
    v21 = 0;
    v22 = 117;
    v23 = 2;
    v24 = 0;
    v25 = 125;
    v26 = 2;
    v27 = 0;
    v28 = 121;
    v29 = 2;
    v30 = 0;
    v31 = 123;
    v32 = 2;
    v33 = 0;
    v34 = 124;
    v35 = 2;
    v36 = 0;
    v37 = 120;
    v38 = 2;
    v39 = 0;
    v6 = 0;
    v7 = 0;
    v8[0] = 0;
    v8[1] = &v6;
    v9 = 0;
    v6 = (char *)operator new(0x190uLL);
    v7 = v6;
    v8[0] = v6 + 400;
    v7 = (_BYTE *)sub_1006AB40C((uint64_t)v8, (uint64_t)&v10, (uint64_t)&v40, (uint64_t)v6);
    for (i = 46; i != -4; i -= 5)
      sub_1001F8644((uint64_t)&(&v10)[i]);
    v4 = *(void **)(a1 + 264);
    memset(v5, 0, sizeof(v5));
    sub_1006AB68C(v5, (uint64_t)v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - v6) >> 3));
    objc_msgSend(v4, "setMeasurements:", sub_1006A7590(v5));
    v10 = (void **)v5;
    sub_1006AB5A0(&v10);
    v10 = (void **)&v6;
    sub_1006AB5A0(&v10);
  }
}

void sub_1012CBD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a13;
  sub_1006AB5A0(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_1012CBD88(uint64_t a1, _DWORD *a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  __n128 result;

  if (a2)
  {
    v4 = *(void **)(a1 + 280);
    if (v4)
    {
      v5 = objc_msgSend(v4, "name");
      v6 = objc_msgSend(*(id *)(a1 + 280), "nameModifiedDate");
      sub_1012CC7BC((uint64_t)v6, 3, (uint64_t)v5, (uint64_t)v6, a2 + 277, a2 + 300);
      v7 = objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate");
      v8 = objc_msgSend(*(id *)(a1 + 280), "gregorianBirthdayModifiedDate");
      sub_1012CC7BC((uint64_t)v8, 3, (uint64_t)v7, (uint64_t)v8, a2 + 278, a2 + 301);
      v9 = objc_msgSend(*(id *)(a1 + 280), "weight");
      v10 = objc_msgSend(*(id *)(a1 + 280), "weightModifiedDate");
      sub_1012CC7BC((uint64_t)v10, 3, (uint64_t)v9, (uint64_t)v10, a2 + 279, a2 + 302);
      v11 = objc_msgSend(*(id *)(a1 + 280), "height");
      v12 = objc_msgSend(*(id *)(a1 + 280), "heightModifiedDate");
      sub_1012CC7BC((uint64_t)v12, 3, (uint64_t)v11, (uint64_t)v12, a2 + 280, a2 + 303);
      if (objc_msgSend(*(id *)(a1 + 280), "bloodType"))
        v13 = 3;
      else
        v13 = 2;
      a2[281] = v13;
      v14 = objc_msgSend(*(id *)(a1 + 280), "medicalConditions");
      v15 = objc_msgSend(*(id *)(a1 + 280), "medicalConditionsModifiedDate");
      sub_1012CC7BC((uint64_t)v15, 3, (uint64_t)v14, (uint64_t)v15, a2 + 286, a2 + 308);
      v16 = objc_msgSend(*(id *)(a1 + 280), "medicalNotes");
      v17 = objc_msgSend(*(id *)(a1 + 280), "medicalNotesModifiedDate");
      sub_1012CC7BC((uint64_t)v17, 3, (uint64_t)v16, (uint64_t)v17, a2 + 282, a2 + 304);
      v18 = objc_msgSend(*(id *)(a1 + 280), "allergyInfo");
      v19 = objc_msgSend(*(id *)(a1 + 280), "allergyInfoModifiedDate");
      sub_1012CC7BC((uint64_t)v19, 3, (uint64_t)v18, (uint64_t)v19, a2 + 283, a2 + 305);
      v20 = objc_msgSend(*(id *)(a1 + 280), "medicationInfo");
      v21 = objc_msgSend(*(id *)(a1 + 280), "medicationInfoModifiedDate");
      sub_1012CC7BC((uint64_t)v21, 3, (uint64_t)v20, (uint64_t)v21, a2 + 284, a2 + 306);
      v22 = objc_msgSend(*(id *)(a1 + 280), "emergencyContacts");
      v23 = objc_msgSend(*(id *)(a1 + 280), "emergencyContactsModifiedDate");
      sub_1012CC7BC((uint64_t)v23, 3, (uint64_t)v22, (uint64_t)v23, a2 + 285, a2 + 307);
    }
    else
    {
      result.n128_u64[0] = 0x200000002;
      result.n128_u64[1] = 0x200000002;
      *(__n128 *)(a2 + 277) = result;
      *(__n128 *)(a2 + 281) = result;
      *(_QWORD *)(a2 + 285) = 0x200000002;
    }
  }
  return result;
}

void sub_1012CBF80(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  uint64_t v5[3];
  char *v6;
  _BYTE *v7;
  _QWORD v8[2];
  char v9;
  void **v10;
  _DWORD v11[8];
  uint64_t v12;

  if (*(_QWORD *)(a1 + 280))
  {
    if (objc_opt_class(MCProfileConnection, a2)
      && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
    {
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "name"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "nameModifiedDate"), 116, 128);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "height"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "heightModifiedDate"), 119, 131);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "weight"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "weightModifiedDate"), 118, 130);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "allergyInfo"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "allergyInfoModifiedDate"), 122, 133);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "gregorianBirthdayModifiedDate"), 117, 129);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalConditions"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalConditionsModifiedDate"), 125, 136);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalNotes"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicalNotesModifiedDate"), 121, 132);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicationInfo"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "medicationInfoModifiedDate"), 123, 134);
      sub_1012CC844(a1, 3, (uint64_t)objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), (uint64_t)objc_msgSend(*(id *)(a1 + 280), "emergencyContactsModifiedDate"), 124, 135);
      if (objc_msgSend(*(id *)(a1 + 280), "bloodType"))
        v3 = 3;
      else
        v3 = 2;
      LODWORD(v10) = 120;
      v11[0] = v3;
      v11[6] = 0;
      v7 = 0;
      v8[0] = 0;
      v6 = 0;
      v8[1] = &v6;
      v9 = 0;
      v6 = (char *)operator new(0x28uLL);
      v7 = v6;
      v8[0] = v6 + 40;
      v7 = (_BYTE *)sub_1006AB40C((uint64_t)v8, (uint64_t)&v10, (uint64_t)&v12, (uint64_t)v6);
      sub_1001F8644((uint64_t)v11);
      v4 = *(void **)(a1 + 264);
      memset(v5, 0, sizeof(v5));
      sub_1006AB68C(v5, (uint64_t)v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - v6) >> 3));
      objc_msgSend(v4, "setMeasurements:", sub_1006A7590(v5));
      v10 = (void **)v5;
      sub_1006AB5A0(&v10);
      v10 = (void **)&v6;
      sub_1006AB5A0(&v10);
    }
  }
  else
  {
    sub_1012CBB44(a1, a2);
  }
}

void sub_1012CC2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_1006AB5A0(&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012CC324@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v3;
  NSObject *v4;
  _QWORD *result;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  switch(a1)
  {
    case 0:
      v3 = "";
      goto LABEL_17;
    case 1:
      v3 = "A+";
      goto LABEL_17;
    case 2:
      v3 = "A-";
      goto LABEL_17;
    case 3:
      v3 = "B+";
      goto LABEL_17;
    case 4:
      v3 = "B-";
      goto LABEL_17;
    case 5:
      v3 = "AB+";
      goto LABEL_17;
    case 6:
      v3 = "AB-";
      goto LABEL_17;
    case 7:
      v3 = "O+";
      goto LABEL_17;
    case 8:
      v3 = "O-";
LABEL_17:
      result = sub_1015A2E04(a2, v3);
      break;
    default:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ADR,getBloodTypeString,unrecognized blood type", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,getBloodTypeString,unrecognized blood type", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "std::string CLEmergencyADR::getBloodTypeString(HKBloodType) const", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      result = sub_1015A2E04(a2, "");
      break;
  }
  return result;
}

id sub_1012CC664(uint64_t a1, void *a2)
{
  id v4;
  NSString *v5;
  uint64_t v6;
  NSString *v7;
  uint64_t v8;

  v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (objc_msgSend(a2, "name"))
    objc_msgSend(v4, "setValue:forKey:", sub_1013908B4(objc_msgSend(a2, "name"), 0x7D0u), CFSTR("name"));
  if (objc_msgSend(a2, "phoneNumber"))
    objc_msgSend(v4, "setValue:forKey:", sub_1013908B4(objc_msgSend(a2, "phoneNumber"), 0x7D0u), CFSTR("tel"));
  if (objc_msgSend(a2, "phoneNumberLabel"))
  {
    v5 = (NSString *)objc_msgSend(a2, "phoneNumberLabel");
    if (objc_opt_class(CNLabeledValue, v6))
      v5 = +[CNLabeledValue localizedStringForLabel:](CNLabeledValue, "localizedStringForLabel:", v5);
    objc_msgSend(v4, "setValue:forKey:", sub_1013908B4(v5, 0x7D0u), CFSTR("tel_label"));
  }
  if (objc_msgSend(a2, "relationship"))
  {
    v7 = (NSString *)objc_msgSend(a2, "relationship");
    if (objc_opt_class(CNLabeledValue, v8))
      v7 = +[CNLabeledValue localizedStringForLabel:](CNLabeledValue, "localizedStringForLabel:", v7);
    objc_msgSend(v4, "setValue:forKey:", sub_1013908B4(v7, 0x7D0u), CFSTR("relationship"));
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
}

void sub_1012CC7BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  if (a3)
  {
    *a5 = a2;
    if (a4)
      *a6 = -[NSDateComponents day](-[NSCalendar components:fromDate:toDate:options:](+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian), "components:fromDate:toDate:options:", 16, a4, +[NSDate date](NSDate, "date"), 0), "day");
  }
  else
  {
    *a5 = 2;
  }
}

void sub_1012CC844(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  void *v9;
  unsigned int v10;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14[3];
  uint64_t v15[3];
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19[3];
  char *v20;
  _BYTE *v21;
  _QWORD v22[2];
  char v23;
  void **v24;
  _DWORD v25[6];
  int v26;
  uint64_t v27;

  if (!a3)
  {
    LODWORD(v24) = a5;
    v25[0] = 2;
    v26 = 0;
    v21 = 0;
    v22[0] = 0;
    v20 = 0;
    v16 = (void **)&v20;
    LOBYTE(v17) = 0;
    v20 = (char *)operator new(0x28uLL);
    v21 = v20;
    v22[0] = v20 + 40;
    v21 = (_BYTE *)sub_1006AB40C((uint64_t)v22, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)v20);
    sub_1001F8644((uint64_t)v25);
    v13 = *(void **)(a1 + 264);
    memset(v14, 0, sizeof(v14));
    sub_1006AB68C(v14, (uint64_t)v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
    objc_msgSend(v13, "setMeasurements:", sub_1006A7590(v14));
    v12 = (void **)v14;
    goto LABEL_5;
  }
  LODWORD(v24) = a5;
  v25[0] = a2;
  v26 = 0;
  v21 = 0;
  v22[0] = 0;
  v20 = 0;
  v16 = (void **)&v20;
  LOBYTE(v17) = 0;
  v20 = (char *)operator new(0x28uLL);
  v21 = v20;
  v22[0] = v20 + 40;
  v21 = (_BYTE *)sub_1006AB40C((uint64_t)v22, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)v20);
  sub_1001F8644((uint64_t)v25);
  v9 = *(void **)(a1 + 264);
  memset(v19, 0, sizeof(v19));
  sub_1006AB68C(v19, (uint64_t)v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
  objc_msgSend(v9, "setMeasurements:", sub_1006A7590(v19));
  v24 = (void **)v19;
  sub_1006AB5A0(&v24);
  if (a4)
  {
    v10 = -[NSDateComponents day](-[NSCalendar components:fromDate:toDate:options:](+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian), "components:fromDate:toDate:options:", 16, a4, +[NSDate date](NSDate, "date"), 0), "day");
    LODWORD(v24) = a6;
    v25[0] = v10;
    v26 = 0;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v22[1] = &v16;
    v23 = 0;
    v16 = (void **)operator new(0x28uLL);
    v17 = (uint64_t)v16;
    v18 = v16 + 5;
    v17 = sub_1006AB40C((uint64_t)&v18, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)v16);
    sub_1001F8644((uint64_t)v25);
    v11 = *(void **)(a1 + 264);
    memset(v15, 0, sizeof(v15));
    sub_1006AB68C(v15, (uint64_t)v16, v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - (uint64_t)v16) >> 3));
    objc_msgSend(v11, "setMeasurements:", sub_1006A7590(v15));
    v24 = (void **)v15;
    sub_1006AB5A0(&v24);
    v12 = (void **)&v16;
LABEL_5:
    v24 = v12;
    sub_1006AB5A0(&v24);
  }
  v24 = (void **)&v20;
  sub_1006AB5A0(&v24);
}

void sub_1012CCB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 112) = &a22;
  sub_1006AB5A0((void ***)(v22 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_1012CCC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[6];
  _BYTE v14[24];
  _BYTE *v15;
  int v16;

  v7 = objc_msgSend(objc_msgSend(**(id **)(a1 + 32), "silo"), "queue");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  v13[2] = sub_1012CCD08;
  v13[3] = &unk_10219C338;
  v16 = *(_DWORD *)(a1 + 72);
  sub_100270E34((uint64_t)v14, a1 + 40);
  v13[4] = a3;
  v13[5] = a4;
  dispatch_async(v7, v13);
  result = v15;
  if (v15 == v14)
  {
    v12 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v12))(result, v8, v9, v10);
}

uint64_t sub_1012CCD08(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100A6C7E8(*(_DWORD *)(a1 + 80), __p);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,postADR,received response for %{public}s number", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v5 = qword_1022A0088;
    sub_100A6C7E8(*(_DWORD *)(a1 + 80), buf);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136446210;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "#ADR,postADR,received response for %{public}s number", &v11, 12);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::postAdr(NumberType, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return sub_10105CB00(a1 + 48, *(_DWORD *)(a1 + 80), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1012CCF28(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  if (!*(_QWORD *)(a1 + 544))
  {
    result = 0;
    v8 = 1;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 160);
  if (!v4)
    sub_10025FD1C();
  v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v6 = *((_DWORD *)sub_100A587F4(v5) + 130);
  if (v6 < (int)(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 536)))
  {
    result = 0;
    v8 = 3;
LABEL_6:
    *a2 = v8;
    return result;
  }
  return *(_QWORD *)(a1 + 544);
}

uint64_t sub_1012CCFB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  if (!*(_QWORD *)(a1 + 600))
  {
    result = 0;
    v8 = 1;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 160);
  if (!v4)
    sub_10025FD1C();
  v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v6 = *((_DWORD *)sub_100A587F4(v5) + 130);
  if (v6 < (int)(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 536)))
  {
    result = 0;
    v8 = 3;
LABEL_6:
    *a2 = v8;
    return result;
  }
  return *(_QWORD *)(a1 + 600);
}

NSInteger sub_1012CD038(uint64_t a1, uint64_t a2, std::string *this, int *a4)
{
  NSInteger result;
  int v7;

  *a4 = -1;
  if (!a1)
    return (NSInteger)std::string::operator=(this, &stru_102313CC0);
  result = (NSInteger)std::string::operator=(this, &stru_102313CA8);
  if (!a2)
    return result;
  result = -[NSDateComponents day](-[NSCalendar components:fromDate:toDate:options:](+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian), "components:fromDate:toDate:options:", 16, a2, +[NSDate date](NSDate, "date"), 0), "day");
  *a4 = result;
  if ((result & 0x80000000) != 0)
  {
    v7 = -2;
  }
  else
  {
    if (result < 0x16E)
      return result;
    v7 = 366;
  }
  *a4 = v7;
  return result;
}

void sub_1012CD100(void *a1@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  NSObject *v16;
  const char *v17;
  std::string *v18;
  std::string v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;
  std::string v24;
  std::string v25;
  std::string v26;

  if (a1)
  {
    sub_1015A2E04(&v24, "ErrorDomain:");
    sub_1015A2E04(v22, (char *)objc_msgSend(objc_msgSend(a1, "domain"), "UTF8String"));
    if ((v23 & 0x80u) == 0)
      v4 = v22;
    else
      v4 = (void **)v22[0];
    if ((v23 & 0x80u) == 0)
      v5 = v23;
    else
      v5 = (std::string::size_type)v22[1];
    v6 = std::string::append(&v24, (const std::string::value_type *)v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_1015A2E04(__p, ",ErrorCode:");
    if ((v21 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v9 = v21;
    else
      v9 = (std::string::size_type)__p[1];
    v10 = std::string::append(&v25, (const std::string::value_type *)v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v19, (uint64_t)objc_msgSend(a1, "code"));
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v19;
    else
      v12 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v26, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if ((char)v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ADR,getSimResultForError,error is nil", (uint8_t *)&v26, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v26, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v25.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, &v26, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,getSimResultForError,error is nil", &v25, 2);
      v18 = (std::string *)v17;
      sub_100512490("Generic", 1, 0, 0, "static std::string CLEmergencyADR::PreCachedADRMetric::getSimResultForError(NSError *)", "%s\n", v17);
      if (v18 != &v26)
        free(v18);
    }
    sub_1015A2E04(a2, "ErrorDomain:Unknown,ErrorCode:Unknown");
  }
}

void sub_1012CD408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a16 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a22 < 0)
    operator delete(a17);
  if (a40 < 0)
    operator delete(a35);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_1012CD4A4(void *a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  NSObject *v8;
  const char *v9;
  std::string *v10;
  std::string v11;
  std::string v12;

  if (a1)
  {
    sub_1015A2E04(&v12, "HTTPCode:");
    std::to_string(&v11, (uint64_t)objc_msgSend(a1, "statusCode"));
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v11;
    else
      v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      size = v11.__r_.__value_.__l.__size_;
    v6 = std::string::append(&v12, (const std::string::value_type *)v4, size);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,getSimResultForHTTPCode,HTTP response is nil", (uint8_t *)&v12, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v12, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v11.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, &v12, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,getSimResultForHTTPCode,HTTP response is nil", &v11, 2);
      v10 = (std::string *)v9;
      sub_100512490("Generic", 1, 0, 0, "static std::string CLEmergencyADR::PreCachedADRMetric::getSimResultForHTTPCode(NSHTTPURLResponse *)", "%s\n", v9);
      if (v10 != &v12)
        free(v10);
    }
    sub_1015A2E04(a2, "HTTPCode:Unknown");
  }
}

void sub_1012CD6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void *sub_1012CD708@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const void **v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  const void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  const void **v34;
  __int128 *v35;
  __int128 *v36;

  v2 = (const void **)result;
  v4 = *((unsigned __int8 *)result + 23);
  v5 = *((_QWORD *)result + 1);
  if ((v4 & 0x80u) == 0)
    v6 = *((unsigned __int8 *)result + 23);
  else
    v6 = *((_QWORD *)result + 1);
  v7 = qword_102313BC0;
  if (byte_102313BCF >= 0)
    v7 = byte_102313BCF;
  if (v6 != v7)
    goto LABEL_17;
  if (byte_102313BCF >= 0)
    v8 = &qword_102313BB8;
  else
    v8 = (uint64_t *)qword_102313BB8;
  if ((v4 & 0x80) == 0)
  {
    if (!*((_BYTE *)result + 23))
    {
LABEL_15:
      *(_OWORD *)a2 = *(_OWORD *)result;
      v11 = *((_QWORD *)result + 2);
LABEL_88:
      *(_QWORD *)(a2 + 16) = v11;
      return result;
    }
    v9 = (unsigned __int8 *)result;
    v10 = *((unsigned __int8 *)result + 23);
    while (*v9 == *(unsigned __int8 *)v8)
    {
      ++v9;
      v8 = (uint64_t *)((char *)v8 + 1);
      if (!--v10)
        goto LABEL_15;
    }
LABEL_17:
    v13 = qword_102313BF0;
    if (byte_102313BFF >= 0)
      v13 = byte_102313BFF;
    if (v6 == v13)
    {
      if (byte_102313BFF >= 0)
        v14 = &qword_102313BE8;
      else
        v14 = (uint64_t *)qword_102313BE8;
      if ((v4 & 0x80) != 0)
      {
        result = (void *)memcmp(*v2, v14, v5);
        if (!(_DWORD)result)
          goto LABEL_85;
      }
      else
      {
        if (!(_DWORD)v4)
          goto LABEL_85;
        v15 = v2;
        v16 = v4;
        while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
        {
          v15 = (const void **)((char *)v15 + 1);
          v14 = (uint64_t *)((char *)v14 + 1);
          if (!--v16)
            goto LABEL_85;
        }
      }
    }
    v17 = qword_102313C08;
    if (byte_102313C17 >= 0)
      v17 = byte_102313C17;
    if (v6 == v17)
    {
      if (byte_102313C17 >= 0)
        v18 = &qword_102313C00;
      else
        v18 = (uint64_t *)qword_102313C00;
      if ((v4 & 0x80) != 0)
      {
        result = (void *)memcmp(*v2, v18, v5);
        if (!(_DWORD)result)
          goto LABEL_85;
      }
      else
      {
        if (!(_DWORD)v4)
          goto LABEL_85;
        v19 = v2;
        v20 = v4;
        while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
        {
          v19 = (const void **)((char *)v19 + 1);
          v18 = (uint64_t *)((char *)v18 + 1);
          if (!--v20)
            goto LABEL_85;
        }
      }
    }
    v21 = qword_102313C20;
    if (byte_102313C2F >= 0)
      v21 = byte_102313C2F;
    if (v6 == v21)
    {
      if (byte_102313C2F >= 0)
        v22 = &qword_102313C18;
      else
        v22 = (uint64_t *)qword_102313C18;
      if ((v4 & 0x80) != 0)
      {
        result = (void *)memcmp(*v2, v22, v5);
        if (!(_DWORD)result)
          goto LABEL_85;
      }
      else
      {
        if (!(_DWORD)v4)
          goto LABEL_85;
        v23 = v2;
        v24 = v4;
        while (*(unsigned __int8 *)v23 == *(unsigned __int8 *)v22)
        {
          v23 = (const void **)((char *)v23 + 1);
          v22 = (uint64_t *)((char *)v22 + 1);
          if (!--v24)
            goto LABEL_85;
        }
      }
    }
    v28 = qword_102313C38;
    if (byte_102313C47 >= 0)
      v28 = byte_102313C47;
    if (v6 == v28)
    {
      if (byte_102313C47 >= 0)
        v29 = &qword_102313C30;
      else
        v29 = (uint64_t *)qword_102313C30;
      if ((v4 & 0x80) != 0)
      {
        result = (void *)memcmp(*v2, v29, v5);
        if (!(_DWORD)result)
          goto LABEL_85;
      }
      else
      {
        if (!(_DWORD)v4)
          goto LABEL_85;
        v30 = v2;
        v31 = v4;
        while (*(unsigned __int8 *)v30 == *(unsigned __int8 *)v29)
        {
          v30 = (const void **)((char *)v30 + 1);
          v29 = (uint64_t *)((char *)v29 + 1);
          if (!--v31)
            goto LABEL_85;
        }
      }
    }
    v32 = qword_102313C50;
    if (byte_102313C5F >= 0)
      v32 = byte_102313C5F;
    if (v6 == v32)
    {
      if (byte_102313C5F >= 0)
        v33 = &qword_102313C48;
      else
        v33 = (uint64_t *)qword_102313C48;
      if ((v4 & 0x80) != 0)
      {
        result = (void *)memcmp(*v2, v33, v5);
        if (!(_DWORD)result)
          goto LABEL_85;
      }
      else
      {
        if (!(_DWORD)v4)
          goto LABEL_85;
        v34 = v2;
        while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v33)
        {
          v34 = (const void **)((char *)v34 + 1);
          v33 = (uint64_t *)((char *)v33 + 1);
          if (!--v4)
            goto LABEL_85;
        }
      }
    }
    result = (void *)sub_10071C384((unsigned __int8 *)v2, byte_102313C60);
    if ((result & 1) == 0)
    {
      result = (void *)sub_10071C384((unsigned __int8 *)v2, (unsigned __int8 *)&xmmword_102313BD0);
      if (!(_DWORD)result)
      {
        if ((SHIBYTE(qword_102313CA0) & 0x80000000) == 0)
        {
          v35 = &xmmword_102313C90;
          goto LABEL_87;
        }
        v36 = &xmmword_102313C90;
        goto LABEL_90;
      }
    }
LABEL_85:
    if ((byte_102313BE7 & 0x80000000) == 0)
    {
      v35 = &xmmword_102313BD0;
LABEL_87:
      *(_OWORD *)a2 = *v35;
      v11 = *((_QWORD *)v35 + 2);
      goto LABEL_88;
    }
    v36 = &xmmword_102313BD0;
LABEL_90:
    v26 = *(void **)v36;
    v27 = *((_QWORD *)v36 + 1);
    v25 = (_BYTE *)a2;
    return sub_100115CE4(v25, v26, v27);
  }
  v12 = *(void **)result;
  result = (void *)memcmp(*(const void **)result, v8, v5);
  if ((_DWORD)result)
    goto LABEL_17;
  v25 = (_BYTE *)a2;
  v26 = v12;
  v27 = v5;
  return sub_100115CE4(v25, v26, v27);
}

std::string *sub_1012CDAE4(std::string *__dst, std::string *__str, uint64_t a3)
{
  __int128 v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  char *v33;
  std::string *p_p;
  std::string::size_type size;
  std::string *v36;
  std::string::size_type v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  char v56;
  std::string::size_type v57;
  unsigned int v58;
  int v59;
  int v60;
  std::string *v61;
  int data;
  int v63;
  BOOL v64;
  std::string *v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  void *v75;
  const std::string *v76;
  unsigned int v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  NSObject *v83;
  unsigned int v85;
  int v86;
  const char *v87;
  std::string *v88;
  const char *v89;
  std::string *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  std::string *v103;
  std::string *v104;
  int *v105;
  int *v106;
  int *v107;
  int *v108;
  int *v109;
  int *v110;
  int *v111;
  int *v112;
  int *v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  std::string *v117;
  std::string *v118;
  std::string *v119;
  std::string *v120;
  std::string *v121;
  std::string *v122;
  std::string *v123;
  _DWORD *v124;
  _DWORD *v125;
  std::string *v126;
  std::string *v127;
  unsigned int *v128;
  std::string *v129;
  std::string __p;
  std::string v131;
  __int128 v132;
  unsigned __int8 v133;
  _QWORD v134[2];

  if (byte_102313CEF < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  }
  else
  {
    v6 = xmmword_102313CD8;
    __dst->__r_.__value_.__r.__words[2] = unk_102313CE8;
    *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v6;
  }
  if ((byte_102313CEF & 0x80000000) == 0)
  {
    *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = xmmword_102313CD8;
    __dst[1].__r_.__value_.__r.__words[2] = unk_102313CE8;
    v7 = __dst + 2;
LABEL_7:
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v7->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v8 = __dst + 3;
LABEL_8:
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v8->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v9 = __dst + 4;
LABEL_9:
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v9->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v10 = __dst + 5;
LABEL_10:
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v10->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v11 = __dst + 6;
LABEL_11:
    v129 = v9;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v11->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v12 = __dst + 7;
LABEL_12:
    v126 = v8;
    v127 = v7;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v12->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v13 = __dst + 8;
LABEL_13:
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v14 = unk_102313CE8;
    __dst[9].__r_.__value_.__r.__words[0] = -1;
    v15 = __dst + 9;
    v13->__r_.__value_.__r.__words[2] = v14;
    v125 = (_DWORD *)__dst[9].__r_.__value_.__r.__words + 1;
    v16 = (std::string *)((char *)__dst + 232);
    LODWORD(__dst[9].__r_.__value_.__r.__words[1]) = 0;
    v128 = (unsigned int *)&__dst[9].__r_.__value_.__r.__words[1];
LABEL_14:
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v16->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v113 = (int *)&__dst[10].__r_.__value_.__r.__words[2];
    LODWORD(__dst[10].__r_.__value_.__r.__words[2]) = -1;
    v17 = __dst + 11;
LABEL_15:
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v17->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v112 = (int *)&__dst[12];
    LODWORD(__dst[12].__r_.__value_.__l.__data_) = -1;
    v18 = (std::string *)((char *)__dst + 296);
LABEL_16:
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v18->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v111 = (int *)&__dst[13].__r_.__value_.__r.__words[1];
    LODWORD(__dst[13].__r_.__value_.__r.__words[1]) = -1;
    v19 = (std::string *)((char *)__dst + 328);
LABEL_17:
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v19->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v110 = (int *)&__dst[14].__r_.__value_.__r.__words[2];
    LODWORD(__dst[14].__r_.__value_.__r.__words[2]) = -1;
    v20 = __dst + 15;
LABEL_18:
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v20->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v21 = __dst + 16;
LABEL_19:
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v21->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v109 = (int *)&__dst[17];
    LODWORD(__dst[17].__r_.__value_.__l.__data_) = -1;
    v22 = (std::string *)((char *)__dst + 416);
LABEL_20:
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v22->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v108 = (int *)&__dst[18].__r_.__value_.__r.__words[1];
    LODWORD(__dst[18].__r_.__value_.__r.__words[1]) = -1;
    v23 = (std::string *)((char *)__dst + 448);
LABEL_21:
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v23->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v107 = (int *)&__dst[19].__r_.__value_.__r.__words[2];
    LODWORD(__dst[19].__r_.__value_.__r.__words[2]) = -1;
    v24 = __dst + 20;
LABEL_22:
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v24->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v106 = (int *)&__dst[21];
    LODWORD(__dst[21].__r_.__value_.__l.__data_) = -1;
    v25 = (std::string *)((char *)__dst + 512);
LABEL_23:
    v114 = v24;
    v115 = v22;
    v118 = v23;
    v119 = v21;
    v116 = v20;
    v117 = v25;
    v120 = v19;
    v122 = v18;
    v123 = v17;
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v25->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v105 = (int *)&__dst[22].__r_.__value_.__r.__words[1];
    v124 = (_DWORD *)&__dst[22].__r_.__value_.__r.__words[1] + 1;
    __dst[22].__r_.__value_.__l.__size_ = -1;
    LODWORD(__dst[22].__r_.__value_.__r.__words[2]) = -1;
    v26 = __dst + 23;
LABEL_24:
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v26->__r_.__value_.__r.__words[2] = unk_102313CE8;
    v103 = v26;
    v104 = __dst + 24;
    LODWORD(__dst[24].__r_.__value_.__l.__data_) = -1;
    v27 = (std::string *)((char *)__dst + 584);
LABEL_25:
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = xmmword_102313CD8;
    v27->__r_.__value_.__r.__words[2] = unk_102313CE8;
    goto LABEL_26;
  }
  sub_100115CE4(&__dst[1], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v7 = __dst + 2;
  if ((byte_102313CEF & 0x80000000) == 0)
    goto LABEL_7;
  sub_100115CE4(&__dst[2], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v8 = __dst + 3;
  if ((byte_102313CEF & 0x80000000) == 0)
    goto LABEL_8;
  sub_100115CE4(&__dst[3], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v9 = __dst + 4;
  if ((byte_102313CEF & 0x80000000) == 0)
    goto LABEL_9;
  sub_100115CE4(&__dst[4], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  if ((byte_102313CEF & 0x80000000) == 0)
  {
    v10 = __dst + 5;
    goto LABEL_10;
  }
  sub_100115CE4(&__dst[5], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  if ((byte_102313CEF & 0x80000000) == 0)
  {
    v11 = __dst + 6;
    goto LABEL_11;
  }
  v129 = __dst + 4;
  sub_100115CE4(&__dst[6], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v12 = __dst + 7;
  if ((byte_102313CEF & 0x80000000) == 0)
    goto LABEL_12;
  v126 = __dst + 3;
  v127 = __dst + 2;
  sub_100115CE4(v12, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v13 = __dst + 8;
  if ((byte_102313CEF & 0x80000000) == 0)
    goto LABEL_13;
  sub_100115CE4(&__dst[8], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  __dst[9].__r_.__value_.__r.__words[0] = -1;
  v15 = __dst + 9;
  v91 = byte_102313CEF;
  v125 = (_DWORD *)__dst[9].__r_.__value_.__r.__words + 1;
  v16 = (std::string *)((char *)__dst + 232);
  LODWORD(__dst[9].__r_.__value_.__r.__words[1]) = 0;
  v128 = (unsigned int *)&__dst[9].__r_.__value_.__r.__words[1];
  if ((v91 & 0x80000000) == 0)
    goto LABEL_14;
  sub_100115CE4(&__dst[9].__r_.__value_.__s.__data_[16], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v92 = byte_102313CEF;
  v113 = (int *)&__dst[10].__r_.__value_.__r.__words[2];
  LODWORD(__dst[10].__r_.__value_.__r.__words[2]) = -1;
  v123 = __dst + 11;
  if ((v92 & 0x80000000) == 0)
  {
    v17 = __dst + 11;
    goto LABEL_15;
  }
  sub_100115CE4(v123, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v93 = byte_102313CEF;
  v112 = (int *)&__dst[12];
  LODWORD(__dst[12].__r_.__value_.__l.__data_) = -1;
  v122 = (std::string *)((char *)__dst + 296);
  if ((v93 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    goto LABEL_16;
  }
  sub_100115CE4(v122, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v94 = byte_102313CEF;
  v111 = (int *)&__dst[13].__r_.__value_.__r.__words[1];
  LODWORD(__dst[13].__r_.__value_.__r.__words[1]) = -1;
  v120 = (std::string *)((char *)__dst + 328);
  if ((v94 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v19 = (std::string *)((char *)__dst + 328);
    goto LABEL_17;
  }
  sub_100115CE4(v120, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v95 = byte_102313CEF;
  v110 = (int *)&__dst[14].__r_.__value_.__r.__words[2];
  LODWORD(__dst[14].__r_.__value_.__r.__words[2]) = -1;
  v116 = __dst + 15;
  if ((v95 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v19 = (std::string *)((char *)__dst + 328);
    v20 = __dst + 15;
    goto LABEL_18;
  }
  sub_100115CE4(v116, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v119 = __dst + 16;
  if ((byte_102313CEF & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v21 = __dst + 16;
    v19 = (std::string *)((char *)__dst + 328);
    v20 = __dst + 15;
    goto LABEL_19;
  }
  sub_100115CE4(v119, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v96 = byte_102313CEF;
  v109 = (int *)&__dst[17];
  LODWORD(__dst[17].__r_.__value_.__l.__data_) = -1;
  v115 = (std::string *)((char *)__dst + 416);
  if ((v96 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v21 = __dst + 16;
    v19 = (std::string *)((char *)__dst + 328);
    v22 = (std::string *)((char *)__dst + 416);
    v20 = __dst + 15;
    goto LABEL_20;
  }
  sub_100115CE4(v115, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v97 = byte_102313CEF;
  v108 = (int *)&__dst[18].__r_.__value_.__r.__words[1];
  LODWORD(__dst[18].__r_.__value_.__r.__words[1]) = -1;
  v118 = (std::string *)((char *)__dst + 448);
  if ((v97 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v21 = __dst + 16;
    v19 = (std::string *)((char *)__dst + 328);
    v22 = (std::string *)((char *)__dst + 416);
    v20 = __dst + 15;
    v23 = (std::string *)((char *)__dst + 448);
    goto LABEL_21;
  }
  sub_100115CE4(v118, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v98 = byte_102313CEF;
  v107 = (int *)&__dst[19].__r_.__value_.__r.__words[2];
  LODWORD(__dst[19].__r_.__value_.__r.__words[2]) = -1;
  v114 = __dst + 20;
  if ((v98 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v21 = __dst + 16;
    v19 = (std::string *)((char *)__dst + 328);
    v22 = (std::string *)((char *)__dst + 416);
    v20 = __dst + 15;
    v23 = (std::string *)((char *)__dst + 448);
    v24 = __dst + 20;
    goto LABEL_22;
  }
  sub_100115CE4(v114, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v99 = byte_102313CEF;
  v106 = (int *)&__dst[21];
  LODWORD(__dst[21].__r_.__value_.__l.__data_) = -1;
  v117 = (std::string *)((char *)__dst + 512);
  if ((v99 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v18 = (std::string *)((char *)__dst + 296);
    v17 = __dst + 11;
    v21 = __dst + 16;
    v19 = (std::string *)((char *)__dst + 328);
    v22 = (std::string *)((char *)__dst + 416);
    v20 = __dst + 15;
    v25 = (std::string *)((char *)__dst + 512);
    v23 = (std::string *)((char *)__dst + 448);
    v24 = __dst + 20;
    goto LABEL_23;
  }
  sub_100115CE4(v117, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v100 = byte_102313CEF;
  v105 = (int *)&__dst[22].__r_.__value_.__r.__words[1];
  v124 = (_DWORD *)&__dst[22].__r_.__value_.__r.__words[1] + 1;
  __dst[22].__r_.__value_.__l.__size_ = -1;
  LODWORD(__dst[22].__r_.__value_.__r.__words[2]) = -1;
  v103 = __dst + 23;
  if ((v100 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    v26 = __dst + 23;
    goto LABEL_24;
  }
  sub_100115CE4(v103, (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v101 = byte_102313CEF;
  v104 = __dst + 24;
  LODWORD(__dst[24].__r_.__value_.__l.__data_) = -1;
  v27 = (std::string *)((char *)__dst + 584);
  if ((v101 & 0x80000000) == 0)
  {
    v16 = (std::string *)((char *)__dst + 232);
    goto LABEL_25;
  }
  sub_100115CE4(&__dst[24].__r_.__value_.__s.__data_[8], (void *)xmmword_102313CD8, *((unint64_t *)&xmmword_102313CD8 + 1));
  v16 = (std::string *)((char *)__dst + 232);
LABEL_26:
  v121 = v16;
  std::string::operator=(v129, __str);
  LODWORD(v131.__r_.__value_.__l.__data_) = 0;
  v28 = *(_QWORD *)(a3 + 192);
  if (!v28)
    sub_10025FD1C();
  v29 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v28 + 48))(v28, &v131);
  v30 = -[NSString UTF8String](sub_100F7F650(*(unsigned int *)(v29 + 32)), "UTF8String");
  std::string::assign(__dst, v30);
  v31 = -[NSString UTF8String](sub_100F7F650(*(unsigned int *)(v29 + 8)), "UTF8String");
  std::string::assign(__dst + 1, v31);
  sub_1015A2E04(&v131, "Sim1:");
  v32 = *(unsigned __int8 *)(v29 + 159);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(v29 + 144);
  if (v32)
    v33 = "Yes";
  else
    v33 = "No";
  sub_1015A2E04(&__p, v33);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v36 = std::string::append(&v131, (const std::string::value_type *)p_p, size);
  v37 = v36->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v132 = v36->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v132 + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13->__r_.__value_.__l.__data_);
  v13->__r_.__value_.__r.__words[0] = v37;
  v39 = *(_QWORD *)((char *)&v132 + 7);
  v13->__r_.__value_.__l.__size_ = v132;
  *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = v39;
  *((_BYTE *)&v13->__r_.__value_.__s + 23) = v38;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (sub_1001DC538())
  {
    LODWORD(v131.__r_.__value_.__l.__data_) = 1;
    v41 = *(_QWORD *)(a3 + 192);
    if (!v41)
      sub_10025FD1C();
    v42 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v41 + 48))(v41, &v131);
    v43 = -[NSString UTF8String](sub_100F7F650(*(unsigned int *)(v42 + 32)), "UTF8String");
    std::string::assign(v127, v43);
    v44 = -[NSString UTF8String](sub_100F7F650(*(unsigned int *)(v42 + 8)), "UTF8String");
    std::string::assign(v126, v44);
    sub_1015A2E04(&__p, ",Sim2:");
    v45 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
    if (v45 >= 0)
      v46 = (const std::string::value_type *)v13;
    else
      v46 = (const std::string::value_type *)v13->__r_.__value_.__r.__words[0];
    if (v45 >= 0)
      v47 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    else
      v47 = v13->__r_.__value_.__l.__size_;
    v48 = std::string::insert(&__p, 0, v46, v47);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v131.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = *(unsigned __int8 *)(v42 + 159);
    if ((v50 & 0x80u) != 0)
      v50 = *(_QWORD *)(v42 + 144);
    if (v50)
      v51 = "Yes";
    else
      v51 = "No";
    sub_1015A2E04(&v132, v51);
    if ((v133 & 0x80u) == 0)
      v52 = (const std::string::value_type *)&v132;
    else
      v52 = (const std::string::value_type *)v132;
    if ((v133 & 0x80u) == 0)
      v53 = v133;
    else
      v53 = *((_QWORD *)&v132 + 1);
    v54 = std::string::append(&v131, v52, v53);
    v55 = v54->__r_.__value_.__r.__words[0];
    v134[0] = v54->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v134 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
    v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13->__r_.__value_.__l.__data_);
    v13->__r_.__value_.__r.__words[0] = v55;
    v57 = *(_QWORD *)((char *)v134 + 7);
    v13->__r_.__value_.__l.__size_ = v134[0];
    *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = v57;
    *((_BYTE *)&v13->__r_.__value_.__s + 23) = v56;
    if ((char)v133 < 0)
      operator delete((void *)v132);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(double *)(a3 + 536) != 0.0)
  {
    v58 = vcvtmd_s64_f64((CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 536)) / 86400.0);
    LODWORD(v15->__r_.__value_.__l.__data_) = v58;
    if ((v58 & 0x80000000) != 0)
    {
      v59 = -2;
    }
    else
    {
      if (v58 < 0x16E)
        goto LABEL_77;
      v59 = 366;
    }
    LODWORD(v15->__r_.__value_.__l.__data_) = v59;
  }
LABEL_77:
  v60 = HIBYTE(v129->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v129->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v129->__r_.__value_.__l.__size_ != 5)
      goto LABEL_99;
    v61 = (std::string *)v129->__r_.__value_.__r.__words[0];
  }
  else
  {
    v61 = v129;
    if (v60 != 5)
      goto LABEL_99;
  }
  data = (int)v61->__r_.__value_.__l.__data_;
  v63 = v61->__r_.__value_.__s.__data_[4];
  v64 = data == 1751343427 && v63 == 101;
  if (v64 && *(double *)(a3 + 520) != 0.0)
  {
    v66 = vcvtmd_s64_f64((CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 520)) / 86400.0);
    *v125 = v66;
    if ((v66 & 0x80000000) != 0)
    {
      v67 = -2;
    }
    else
    {
      if (v66 < 0x16E)
      {
LABEL_112:
        v71 = *(_DWORD *)(a3 + 528);
        goto LABEL_116;
      }
      v67 = 366;
    }
    *v125 = v67;
    goto LABEL_112;
  }
  if ((v60 & 0x80) != 0)
  {
    if (v129->__r_.__value_.__l.__size_ != 5)
      goto LABEL_99;
    v65 = (std::string *)v129->__r_.__value_.__r.__words[0];
  }
  else
  {
    v65 = v129;
    if (v60 != 5)
      goto LABEL_99;
  }
  v68 = (int)v65->__r_.__value_.__l.__data_;
  v69 = v65->__r_.__value_.__s.__data_[4];
  v70 = v68 == 1935766085 && v69 == 101;
  if (!v70 || *(double *)(a3 + 504) == 0.0)
  {
LABEL_99:
    v71 = *v128;
    if ((*v128 & 0x80000000) == 0)
      goto LABEL_100;
LABEL_117:
    v72 = -1;
    goto LABEL_118;
  }
  v73 = vcvtmd_s64_f64((CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 504)) / 86400.0);
  *v125 = v73;
  if ((v73 & 0x80000000) != 0)
  {
    v74 = -2;
    goto LABEL_114;
  }
  if (v73 >= 0x16E)
  {
    v74 = 366;
LABEL_114:
    *v125 = v74;
  }
  v71 = *(_DWORD *)(a3 + 512);
LABEL_116:
  *v128 = v71;
  if ((v71 & 0x80000000) != 0)
    goto LABEL_117;
LABEL_100:
  if (v71 >= 0x65)
  {
    v72 = 101;
LABEL_118:
    *v128 = v72;
  }
  if (!objc_opt_class(MCProfileConnection, v40)
    || !objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed")|| (v75 = *(void **)(a3 + 280)) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v79 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v131.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "#ADR,PreCachedADRMetric,IHA switch not enabled", (uint8_t *)&v131, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v131, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ADR,PreCachedADRMetric,IHA switch not enabled", &__p, 2);
      v90 = (std::string *)v89;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::PreCachedADRMetric::PreCachedADRMetric(const std::string &, const CLEmergencyADR &)", "%s\n", v89);
      if (v90 != &v131)
        free(v90);
    }
    goto LABEL_134;
  }
  sub_1012CD038((uint64_t)objc_msgSend(v75, "name"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "nameModifiedDate"), v121, v113);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "gmtBirthdate"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "gregorianBirthdayModifiedDate"), v123, v112);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "weight"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "weightModifiedDate"), v122, v111);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "height"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "heightModifiedDate"), v120, v110);
  if (objc_msgSend(*(id *)(a3 + 280), "bloodType"))
    v76 = &stru_102313CA8;
  else
    v76 = &stru_102313CC0;
  std::string::operator=(v116, v76);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "medicalConditions"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "medicalConditionsModifiedDate"), v119, v109);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "medicalNotes"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "medicalNotesModifiedDate"), v115, v108);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "allergyInfo"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "allergyInfoModifiedDate"), v118, v107);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "medicationInfo"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "medicationInfoModifiedDate"), v114, v106);
  sub_1012CD038((uint64_t)objc_msgSend(*(id *)(a3 + 280), "emergencyContacts"), (uint64_t)objc_msgSend(*(id *)(a3 + 280), "emergencyContactsModifiedDate"), v117, v105);
  if (objc_msgSend(*(id *)(a3 + 280), "emergencyContacts"))
  {
    v77 = objc_msgSend(objc_msgSend(*(id *)(a3 + 280), "emergencyContacts"), "count");
    *v124 = v77;
    if ((v77 & 0x80000000) != 0)
    {
      v78 = -2;
      goto LABEL_143;
    }
    if (v77 >= 0x65)
    {
      v78 = 101;
LABEL_143:
      *v124 = v78;
    }
  }
  if (objc_msgSend(*(id *)(a3 + 280), "primaryLanguageCode"))
  {
    std::string::assign(v103, (const std::string::value_type *)objc_msgSend(objc_msgSend(*(id *)(a3 + 280), "primaryLanguageCode"), "UTF8String"));
    if (objc_msgSend(*(id *)(a3 + 280), "primaryLanguageCodeModifiedDate"))
    {
      v85 = sub_1012CB9C8((uint64_t)objc_msgSend(*(id *)(a3 + 280), "primaryLanguageCodeModifiedDate"));
      LODWORD(v104->__r_.__value_.__l.__data_) = v85;
      if ((v85 & 0x80000000) != 0)
      {
        v86 = -2;
      }
      else
      {
        if (v85 < 0x16E)
          goto LABEL_134;
        v86 = 366;
      }
      LODWORD(v104->__r_.__value_.__l.__data_) = v86;
    }
  }
LABEL_134:
  v80 = sub_1001AC584();
  v81 = (void *)sub_100814EB4(v80);
  v82 = v81;
  if (v81)
  {
    std::string::assign(v27, (const std::string::value_type *)objc_msgSend(v81, "UTF8String"));

  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v83 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v131.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#ADR,PreCachedADRMetric,created", (uint8_t *)&v131, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v131, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v102) = 2;
    _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,PreCachedADRMetric,created", &__p, v102);
    v88 = (std::string *)v87;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::PreCachedADRMetric::PreCachedADRMetric(const std::string &, const CLEmergencyADR &)", "%s\n", v87);
    if (v88 != &v131)
      free(v88);
  }
  return __dst;
}

void sub_1012CEB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,void **a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,void **a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;
  uint64_t v56;

  if (*(char *)(v55 + 575) < 0)
    operator delete(*a15);
  if (*(char *)(a29 + 23) < 0)
    operator delete(*(void **)a29);
  if (*(char *)(v55 + 503) < 0)
    operator delete(*a26);
  if (*(char *)(a30 + 23) < 0)
    operator delete(*(void **)a30);
  if (*(char *)(v55 + 439) < 0)
    operator delete(*a27);
  if (*(char *)(a31 + 23) < 0)
    operator delete(*(void **)a31);
  if (*(char *)(v55 + 383) < 0)
    operator delete(*a28);
  if (*(char *)(a32 + 23) < 0)
    operator delete(*(void **)a32);
  if (*(char *)(v55 + 319) < 0)
    operator delete(*a34);
  if (*(char *)(a35 + 23) < 0)
    operator delete(*(void **)a35);
  if (*(char *)(v55 + 255) < 0)
    operator delete(*a33);
  if (*(char *)(v56 + 23) < 0)
    operator delete(*(void **)v56);
  if (*(char *)(v55 + 191) < 0)
    operator delete(*a12);
  if (*(char *)(a13 + 23) < 0)
    operator delete(*(void **)a13);
  if (*(char *)(v55 + 143) < 0)
    operator delete(*a14);
  if (*(char *)(a42 + 23) < 0)
    operator delete(*(void **)a42);
  if (*(char *)(v55 + 95) < 0)
    operator delete(*a38);
  if (*(char *)(a39 + 23) < 0)
    operator delete(*(void **)a39);
  if (*(char *)(v55 + 47) < 0)
    operator delete(*a40);
  if (*(char *)(v55 + 23) < 0)
    operator delete(*(void **)v55);
  _Unwind_Resume(exception_object);
}

void sub_1012CEE70(std::string *a1, int a2, const std::string *a3)
{
  int v6;
  std::string *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (!a2)
  {
    v7 = a1 + 6;
    goto LABEL_6;
  }
  v6 = sub_1001DC538();
  if (a2 == 1 && v6)
  {
    v7 = a1 + 7;
LABEL_6:
    std::string::operator=(v7, a3);
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,setResultForSim,tried to set result for unsupported inst,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v11[0] = 67240192;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,setResultForSim,tried to set result for unsupported inst,%{public}d", v11, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::PreCachedADRMetric::setResultForSim(SimInstance, const std::string &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_1012CF08C(uint64_t *a1)
{
  _QWORD *v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void **v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  NSObject *v39;
  void *v40;
  const char *v41;
  std::string *v42;
  void *__p[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  _QWORD v52[2];

  sub_1015A2E04(&v49, "Sim1:");
  v2 = a1 + 18;
  sub_1012CD708(a1 + 18, (uint64_t)v47);
  if ((v48 & 0x80u) == 0)
    v3 = v47;
  else
    v3 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v4 = v48;
  else
    v4 = (std::string::size_type)v47[1];
  v5 = std::string::append(&v49, (const std::string::value_type *)v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v45, ",Sim2:");
  if ((v46 & 0x80u) == 0)
    v7 = v45;
  else
    v7 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v8 = v46;
  else
    v8 = (std::string::size_type)v45[1];
  v9 = std::string::append(&v51, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = a1 + 21;
  sub_1012CD708(a1 + 21, (uint64_t)__p);
  if ((v44 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v13 = v44;
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v50, (const std::string::value_type *)v12, v13);
  v15 = v14->__r_.__value_.__r.__words[0];
  v52[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v52 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v17 = (void **)(a1 + 15);
  if (*((char *)a1 + 143) < 0)
    operator delete(*v17);
  v18 = v52[0];
  a1[15] = v15;
  a1[16] = v18;
  *(uint64_t *)((char *)a1 + 135) = *(_QWORD *)((char *)v52 + 7);
  *((_BYTE *)a1 + 143) = v16;
  if ((char)v44 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v19 = objc_alloc_init((Class)NSMutableDictionary);
  v20 = a1;
  if (*((char *)a1 + 23) < 0)
    v20 = (uint64_t *)*a1;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20), CFSTR("simCountry1"));
  v21 = a1 + 3;
  if (*((char *)a1 + 47) < 0)
    v21 = (_QWORD *)*v21;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21), CFSTR("operatorCountry1"));
  v22 = a1 + 6;
  if (*((char *)a1 + 71) < 0)
    v22 = (_QWORD *)*v22;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22), CFSTR("simCountry2"));
  v23 = a1 + 9;
  if (*((char *)a1 + 95) < 0)
    v23 = (_QWORD *)*v23;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23), CFSTR("operatorCountry2"));
  v24 = a1 + 12;
  if (*((char *)a1 + 119) < 0)
    v24 = (_QWORD *)*v24;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24), CFSTR("mode"));
  v25 = a1 + 15;
  if (*((char *)a1 + 143) < 0)
    v25 = *v17;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25), CFSTR("overallResult"));
  if (*((char *)a1 + 167) < 0)
    v2 = (_QWORD *)*v2;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2), CFSTR("resultSim1"));
  if (*((char *)a1 + 191) < 0)
    v11 = (_QWORD *)*v11;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11), CFSTR("resultSim2"));
  v26 = a1 + 24;
  if (*((char *)a1 + 215) < 0)
    v26 = (_QWORD *)*v26;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26), CFSTR("phoneNumbersAvailable"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 54)), CFSTR("daysSinceLastCacheSuccess"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 55)), CFSTR("daysSinceLastCacheFailure"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 56)), CFSTR("cacheFailureCount"));
  v27 = a1 + 29;
  if (*((char *)a1 + 255) < 0)
    v27 = (_QWORD *)*v27;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27), CFSTR("nameAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 64)), CFSTR("daysSinceLastNameUpdate"));
  v28 = a1 + 33;
  if (*((char *)a1 + 287) < 0)
    v28 = (_QWORD *)*v28;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28), CFSTR("ageAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 72)), CFSTR("daysSinceLastAgeUpdate"));
  v29 = a1 + 37;
  if (*((char *)a1 + 319) < 0)
    v29 = (_QWORD *)*v29;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29), CFSTR("weightAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 80)), CFSTR("daysSinceLastWeightUpdate"));
  v30 = a1 + 41;
  if (*((char *)a1 + 351) < 0)
    v30 = (_QWORD *)*v30;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30), CFSTR("heightAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 88)), CFSTR("daysSinceLastHeightUpdate"));
  v31 = a1 + 45;
  if (*((char *)a1 + 383) < 0)
    v31 = (_QWORD *)*v31;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31), CFSTR("bloodTypeAvailability"));
  v32 = a1 + 48;
  if (*((char *)a1 + 407) < 0)
    v32 = (_QWORD *)*v32;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32), CFSTR("medicalConditionsAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 102)), CFSTR("daysSinceLastMedicalConditionsUpdate"));
  v33 = a1 + 52;
  if (*((char *)a1 + 439) < 0)
    v33 = (_QWORD *)*v33;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33), CFSTR("medicalNotesAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 110)), CFSTR("daysSinceLastMedicalNotesUpdate"));
  v34 = a1 + 56;
  if (*((char *)a1 + 471) < 0)
    v34 = (_QWORD *)*v34;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34), CFSTR("allergyDetailsAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 118)), CFSTR("daysSinceLastAllergyDetailsUpdate"));
  v35 = a1 + 60;
  if (*((char *)a1 + 503) < 0)
    v35 = (_QWORD *)*v35;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35), CFSTR("medicationsAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 126)), CFSTR("daysSinceLastMedicationsUpdate"));
  v36 = a1 + 64;
  if (*((char *)a1 + 535) < 0)
    v36 = (_QWORD *)*v36;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36), CFSTR("emergencyContactsAvailability"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 134)), CFSTR("daysSinceLastEmergencyContactsUpdate"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 135)), CFSTR("numEmergencyContactsAvailable"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 136)), CFSTR("numEmergencyContactsSent"));
  v37 = a1 + 69;
  if (*((char *)a1 + 575) < 0)
    v37 = (_QWORD *)*v37;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v37), CFSTR("devicePrimaryLanguage"));
  objc_msgSend(v19, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 144)), CFSTR("daysSinceLastDevicePrimaryLanguageUpdate"));
  v38 = a1 + 73;
  if (*((char *)a1 + 607) < 0)
    v38 = (_QWORD *)*v38;
  objc_msgSend(v19, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38), CFSTR("deviceSystemLanguage"));
  AnalyticsSendEvent(CFSTR("com.apple.locationd.eed.adr.precache"), v19);

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v39 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v40 = a1 + 15;
    if (*((char *)a1 + 143) < 0)
      v40 = *v17;
    LODWORD(v50.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#ADR,PreCachedADRMetric,submitted,overallResult,%{public}s", (uint8_t *)&v50, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v50, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    if (*((char *)a1 + 143) < 0)
      v17 = (void **)*v17;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    _os_log_send_and_compose_impl(2, 0, &v50, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,PreCachedADRMetric,submitted,overallResult,%{public}s", &v51, 12);
    v42 = (std::string *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::PreCachedADRMetric::report()", "%s\n", v41);
    if (v42 != &v50)
      free(v42);
  }
}

void sub_1012CF984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a16 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_1012CFA20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  const std::string *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  id v14;
  void **v15;
  std::string *v16;
  int v17;
  std::string v18;
  void *__p[2];
  uint64_t v20;
  uint8_t buf[8];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void **v41;
  __int16 v42;
  std::string *v43;

  v4 = a1 + 560;
  LODWORD(v18.__r_.__value_.__l.__data_) = 0;
  *(_QWORD *)buf = &v18;
  v5 = sub_1009707B4(a1 + 560, (int *)&v18, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  if (*((char *)v5 + 47) < 0)
  {
    sub_100115CE4(__p, (void *)v5[3], v5[4]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v5 + 3);
    v20 = v5[5];
  }
  memset(&v18, 0, sizeof(v18));
  if (sub_1001DC538())
  {
    v17 = 1;
    *(_QWORD *)buf = &v17;
    v6 = (const std::string *)sub_1009707B4(v4, &v17, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=(&v18, v6 + 1);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v8 = *(_QWORD *)(a1 + 504);
    v9 = *(_DWORD *)(a1 + 512);
    v10 = *(_QWORD *)(a1 + 520);
    v11 = *(_DWORD *)(a1 + 528);
    v12 = *(_QWORD *)(a1 + 536);
    v13 = *(_QWORD *)(a1 + 544) != 0;
    v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 552), "base64EncodedStringWithOptions:", 0), "UTF8String");
    v15 = __p;
    if (v20 < 0)
      v15 = (void **)__p[0];
    v16 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68291587;
    *(_DWORD *)&buf[4] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2082;
    v25 = a2;
    v26 = 2050;
    v27 = v8;
    v28 = 1026;
    v29 = v9;
    v30 = 2050;
    v31 = v10;
    v32 = 1026;
    v33 = v11;
    v34 = 2050;
    v35 = v12;
    v36 = 1026;
    v37 = v13;
    v38 = 2082;
    v39 = v14;
    v40 = 2081;
    v41 = v15;
    v42 = 2081;
    v43 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,printPreCachedAdrInfo\", \"action\":%{public, location:escape_only}s, \"clear failure time\":\"%{public}.1f\", \"clear failure count\":%{public}d, \"cache failure time\":\"%{public}.1f\", \"cache failure count\":%{public}d, \"success time\":\"%{public}.1f\", \"cloaking key present\":%{public}hhd, \"medical ID hash\":%{public, location:escape_only}s, \"phone number 1\":%{private, location:escape_only}s, \"phone number 2\":%{private, location:escape_only}s}", buf, 0x6Au);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_1012CFCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012CFCDC(_QWORD *a1)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *__p[2];
  char v28;
  int v29;
  _BYTE v30[23];
  int *v31;

  sub_100119F3C(v30);
  if (byte_10230DFBF >= 0)
    v2 = (const char *)&qword_10230DFA8;
  else
    v2 = (const char *)qword_10230DFA8;
  sub_10018A4CC((uint64_t)v30, v2, a1 + 63);
  if (byte_10230DFD7 >= 0)
    v3 = (const char *)&qword_10230DFC0;
  else
    v3 = (const char *)qword_10230DFC0;
  sub_10011B4E4((uint64_t)v30, v3, a1 + 64);
  if (byte_10230DFEF >= 0)
    v4 = (const char *)&qword_10230DFD8;
  else
    v4 = (const char *)qword_10230DFD8;
  sub_10018A4CC((uint64_t)v30, v4, a1 + 65);
  if (byte_10230E007 >= 0)
    v5 = (const char *)&qword_10230DFF0;
  else
    v5 = (const char *)qword_10230DFF0;
  sub_10011B4E4((uint64_t)v30, v5, a1 + 66);
  if (byte_10230E01F >= 0)
    v6 = (const char *)&qword_10230E008;
  else
    v6 = (const char *)qword_10230E008;
  sub_10018A4CC((uint64_t)v30, v6, a1 + 67);
  v7 = (void *)a1[68];
  if (v7)
  {
    if (byte_10230E037 >= 0)
      v8 = (const char *)&qword_10230E020;
    else
      v8 = (const char *)qword_10230E020;
    sub_1005285B4((uint64_t)v30, v8, (char *)objc_msgSend(objc_msgSend(v7, "base64EncodedStringWithOptions:", 0), "UTF8String"));
  }
  v9 = (void *)a1[69];
  if (v9)
  {
    if (byte_10230E04F >= 0)
      v10 = (const char *)&qword_10230E038;
    else
      v10 = (const char *)qword_10230E038;
    sub_1005285B4((uint64_t)v30, v10, (char *)objc_msgSend(objc_msgSend(v9, "base64EncodedStringWithOptions:", 0), "UTF8String"));
  }
  v29 = 0;
  v31 = &v29;
  v11 = sub_1009707B4((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101B9EB60, &v31);
  if (*((char *)v11 + 47) < 0)
  {
    if (!v11[4])
      goto LABEL_34;
  }
  else if (!*((_BYTE *)v11 + 47))
  {
    goto LABEL_34;
  }
  v12 = byte_10230E067;
  v13 = qword_10230E050;
  v29 = 0;
  v31 = &v29;
  v14 = (char *)sub_1009707B4((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101B9EB60, &v31);
  if (v12 >= 0)
    v15 = (const char *)&qword_10230E050;
  else
    v15 = (const char *)v13;
  sub_100528888((uint64_t)v30, v15, v14 + 24);
LABEL_34:
  if (sub_1001DC538())
  {
    v29 = 1;
    v31 = &v29;
    v16 = sub_1009707B4((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101B9EB60, &v31);
    if (*((char *)v16 + 47) < 0)
    {
      if (!v16[4])
        goto LABEL_43;
    }
    else if (!*((_BYTE *)v16 + 47))
    {
      goto LABEL_43;
    }
    v17 = byte_10230E07F;
    v18 = qword_10230E068;
    v29 = 1;
    v31 = &v29;
    v19 = (char *)sub_1009707B4((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101B9EB60, &v31);
    if (v17 >= 0)
      v20 = (const char *)&qword_10230E068;
    else
      v20 = (const char *)v18;
    sub_100528888((uint64_t)v30, v20, v19 + 24);
  }
LABEL_43:
  v21 = (void *)a1[75];
  if (v21 && objc_msgSend(v21, "count"))
  {
    if (byte_10230E097 >= 0)
      v22 = (const char *)&qword_10230E080;
    else
      v22 = (const char *)qword_10230E080;
    sub_10011B54C((uint64_t)v30, v22, a1[75]);
  }
  v23 = sub_1001FD94C();
  if (byte_10230DFA7 >= 0)
    v24 = (const char *)&qword_10230DF90;
  else
    v24 = (const char *)qword_10230DF90;
  sub_1000CADE4(v23, v24, (uint64_t)v30);
  v25 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 944))(v25);
  sub_1015A2E04(__p, "wrote");
  sub_1012CFA20((uint64_t)a1, (uint64_t *)__p);
  if (v28 < 0)
    operator delete(__p[0]);
  return sub_10011A5A8(v30);
}

void sub_1012D0014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_10011A5A8(&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012D0050@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_1021AD228[a1]);
}

_QWORD *sub_1012D0064@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_1021AD280[a1]);
}

void sub_1012D0078(uint64_t a1, int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  int v49;
  int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyADR>::setTimeoutEvent(Event, double) [T = CLEmergencyADR]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1012D0050(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1012D0050(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyADR>::setTimeoutEvent(Event, double) [T = CLEmergencyADR]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1012D0050(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1012D0050(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyADR>::setTimeoutEvent(Event, double) [T = CLEmergencyADR]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1012D8588;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1012D0050(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1012D0050(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_1012D0B48(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1012D0050(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1012D0050(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyADR>::cancelTimeoutEvent(Event) [T = CLEmergencyADR]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1012D0050(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1012D0050(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

BOOL sub_1012D0FD8(uint64_t a1)
{
  _BOOL8 v2;
  int v4;
  int *v5;

  if (*(_BYTE *)(a1 + 329) && *(_BYTE *)(a1 + 330))
  {
    v4 = 0;
    v5 = &v4;
    v2 = *((_BYTE *)sub_10096ED18(a1 + 336, &v4, (uint64_t)&unk_101B9EB60, &v5) + 20) != 0;
  }
  else
  {
    v2 = 0;
  }
  if (sub_1001DC538() && v2)
  {
    v4 = 1;
    v5 = &v4;
    return *((_BYTE *)sub_10096ED18(a1 + 336, &v4, (uint64_t)&unk_101B9EB60, &v5) + 20) != 0;
  }
  return v2;
}

BOOL sub_1012D1090(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  BOOL v32[16];
  uint8_t buf[8];
  std::__shared_weak_count *v34;

  sub_1001E4804(buf);
  v32[0] = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "EEDEnablePreCachedADR", v32);
  if (v32[0])
    v3 = v2;
  else
    v3 = 0;
  v4 = v34;
  if (!v34)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v3)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v3)
    {
LABEL_9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,enabled via default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        *(_WORD *)v32 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,isPreCachedAdrEnabled,enabled via default", v32, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      goto LABEL_22;
    }
  }
  v10 = *(_QWORD *)(a1 + 160);
  if (!v10)
    sub_10025FD1C();
  v11 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  if (!*((_BYTE *)sub_100A587F4(v11) + 424))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v25 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,not enabled via config", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)v32 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,isPreCachedAdrEnabled,not enabled via config", v32, 2);
      v22 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v26);
      goto LABEL_75;
    }
    return result;
  }
  if (!*(_BYTE *)(a1 + 328))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,not supported", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)v32 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,isPreCachedAdrEnabled,not supported", v32, 2);
      v22 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v30);
      goto LABEL_75;
    }
    return result;
  }
LABEL_22:
  *(_DWORD *)buf = 0;
  v12 = *(_QWORD *)(a1 + 192);
  if (!v12)
    sub_10025FD1C();
  v13 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  v14 = *(unsigned __int8 *)(v13 + 159);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(v13 + 144);
  if (v14)
    goto LABEL_26;
  if (sub_1001DC538())
  {
    *(_DWORD *)buf = 1;
    v17 = *(_QWORD *)(a1 + 192);
    if (!v17)
      sub_10025FD1C();
    v18 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 48))(v17, buf);
    v19 = *(unsigned __int8 *)(v18 + 159);
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(v18 + 144);
    if (v19)
    {
LABEL_26:
      v15 = *(void **)(a1 + 280);
      if (v15)
      {
        if ((objc_msgSend(v15, "shareDuringEmergency") & 1) != 0)
          return 1;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v27 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,ADR pre-cache disabled by user", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        *(_WORD *)v32 = 0;
        LODWORD(v31) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,isPreCachedAdrEnabled,ADR pre-cache disabled by user", v32, v31);
        v22 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v28);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v23 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #ADR,isPreCachedAdrEnabled,can't determine ADR pre-cache enablement", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        *(_WORD *)v32 = 0;
        LODWORD(v31) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #ADR,isPreCachedAdrEnabled,can't determine ADR pre-cache enablement", v32, v31);
        v22 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v24);
      }
LABEL_75:
      if (v22 != buf)
        free(v22);
      return 0;
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v20 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,no phone number available", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    *(_WORD *)v32 = 0;
    LODWORD(v31) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,isPreCachedAdrEnabled,no phone number available", v32, v31);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v21);
    goto LABEL_75;
  }
  return result;
}

void sub_1012D1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012D192C(uint64_t a1, int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD handler[5];
  int v11;
  int64_t v12;
  __int16 v13;
  int64_t v14;
  uint8_t buf[4];
  int64_t v16;
  __int16 v17;
  int64_t v18;

  if (*(_BYTE *)(a1 + 376))
    sub_1012D1C9C(a1);
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_string(v6, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_UPLOAD);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
  xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v6, XPC_ACTIVITY_DELAY, a2);
  xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, a3);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    v16 = a2;
    v17 = 2050;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,registerPreCacheAdrActivity,registering pre-cache ADR activity,delay,%{public}lld,gracePeriod,%{public}lld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v11 = 134349312;
    v12 = a2;
    v13 = 2050;
    v14 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,registerPreCacheAdrActivity,registering pre-cache ADR activity,delay,%{public}lld,gracePeriod,%{public}lld", &v11, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerPreCacheAdrActivity(int64_t, int64_t)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_BYTE *)(a1 + 376) = 1;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1012D2E1C;
  handler[3] = &unk_102154A38;
  handler[4] = a1;
  xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.locationd.preCachedADR"), "UTF8String"), v6, handler);
  xpc_release(v6);
}

uint64_t sub_1012D1C44(uint64_t a1)
{
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 536) = 0;

  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  sub_1006B1678(a1 + 560);

  *(_QWORD *)(a1 + 600) = 0;
  return sub_1012CFCDC((_QWORD *)a1);
}

void sub_1012D1C9C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 376))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,unregisterPreCacheAdrActivity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,unregisterPreCacheAdrActivity", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::unregisterPreCacheAdrActivity()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    xpc_activity_unregister((const char *)objc_msgSend(CFSTR("com.apple.locationd.preCachedADR"), "UTF8String"));
    *(_BYTE *)(a1 + 376) = 0;
  }
}

NSMutableData *sub_1012D1E48(uint64_t a1)
{
  uint64_t v1;
  NSData *v2;
  NSObject *v3;
  unsigned int v4;
  id v5;
  id v6;
  uint64_t v7;
  unsigned int v8;
  id v9;
  id v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  NSObject *v14;
  NSMutableData *v15;
  NSData *v16;
  NSObject *v17;
  id v18;
  double v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  id v26;
  int v27;
  _BYTE v28[14];
  __int16 v29;
  id v30;
  uint8_t buf[4];
  _BYTE v32[14];
  __int16 v33;
  id v34;

  v1 = *(_QWORD *)(a1 + 280);
  if (!v1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ADR,getMedicalIdHash,no medical ID available", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    LOWORD(v27) = 0;
    v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,getMedicalIdHash,no medical ID available", &v27, 2);
    v13 = v21;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyADR::getMedicalIdHash()", "%s\n", v20);
    goto LABEL_26;
  }
  v26 = 0;
  v2 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, &v26);
  if (v26)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = objc_msgSend(v26, "code");
      v5 = objc_msgSend(objc_msgSend(v26, "domain"), "UTF8String");
      v6 = objc_msgSend(objc_msgSend(v26, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v32 = v4;
      *(_WORD *)&v32[4] = 2082;
      *(_QWORD *)&v32[6] = v5;
      v33 = 2082;
      v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ADR,getMedicalIdHash,failed to create archive from medical ID,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v7 = qword_1022A0088;
    v8 = objc_msgSend(v26, "code");
    v9 = objc_msgSend(objc_msgSend(v26, "domain"), "UTF8String");
    v10 = objc_msgSend(objc_msgSend(v26, "localizedDescription"), "UTF8String");
    v27 = 67240706;
    *(_DWORD *)v28 = v8;
    *(_WORD *)&v28[4] = 2082;
    *(_QWORD *)&v28[6] = v9;
    v29 = 2082;
    v30 = v10;
    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#ADR,getMedicalIdHash,failed to create archive from medical ID,error code,%{public}d,domain,%{public}s,reason,%{public}s", &v27, 28);
    v13 = v12;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyADR::getMedicalIdHash()", "%s\n", v11);
LABEL_26:
    if (v13 != buf)
      free(v13);
    return 0;
  }
  v16 = v2;
  v15 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 32);
  CC_SHA256(-[NSData bytes](v16, "bytes"), (CC_LONG)-[NSData length](v16, "length"), (unsigned __int8 *)-[NSMutableData mutableBytes](v15, "mutableBytes"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v17 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v18 = objc_msgSend(-[NSMutableData base64EncodedStringWithOptions:](v15, "base64EncodedStringWithOptions:", 0), "UTF8String");
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v32 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ADR,getMedicalIdHash,hash,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v22 = qword_1022A0088;
    v23 = objc_msgSend(-[NSMutableData base64EncodedStringWithOptions:](v15, "base64EncodedStringWithOptions:", 0), "UTF8String");
    v27 = 136446210;
    *(_QWORD *)v28 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#ADR,getMedicalIdHash,hash,%{public}s", &v27, 12);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyADR::getMedicalIdHash()", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  return v15;
}

uint64_t sub_1012D236C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  int *v4;

  v1 = a1 + 448;
  v3 = 0;
  v4 = &v3;
  *((_DWORD *)sub_10006A62C(a1 + 448, &v3, (uint64_t)&unk_101B9EB60, &v4) + 5) = 0;
  result = sub_1001DC538();
  if ((_DWORD)result)
  {
    v3 = 1;
    v4 = &v3;
    result = (uint64_t)sub_10006A62C(v1, &v3, (uint64_t)&unk_101B9EB60, &v4);
    *(_DWORD *)(result + 20) = 0;
  }
  return result;
}

uint64_t sub_1012D23F0(uint64_t a1)
{
  NSObject *v2;
  NSMutableData *v3;
  int v4;
  NSObject *v5;
  std::string *v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  id v13;
  NSMutableData *v14;
  NSMutableData *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  id v40;
  void *v41;
  _BYTE v42[12];
  _OWORD buf[102];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,preparing to send pre-cached ADR", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    *(_WORD *)v42 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendPreCachedAdr,preparing to send pre-cached ADR", v42, 2);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr()", "%s\n", v30);
    if (v31 != (char *)buf)
      free(v31);
  }
  v3 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16);
  v4 = SecRandomCopyBytes(kSecRandomDefault, 0x10uLL, -[NSMutableData mutableBytes](v3, "mutableBytes"));
  if (v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 67240192;
      DWORD1(buf[0]) = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ADR,sendPreCachedAdr,failed to generate key,error,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_DWORD *)v42 = 67240192;
      *(_DWORD *)&v42[4] = v4;
      LODWORD(v38) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,sendPreCachedAdr,failed to generate key,error,%{public}d", v42, v38);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendPreCachedAdr()", "%s\n", v32);
      if (v33 != (char *)buf)
        free(v33);
    }
    v6 = *(std::string **)(a1 + 608);
    if (v6)
    {
      std::string::operator=(v6 + 6, (const std::string *)&qword_102313BE8);
      sub_1012CEE70(*(std::string **)(a1 + 608), 1, (const std::string *)&qword_102313BE8);
    }
    return 0;
  }
  *(_QWORD *)(a1 + 384) = v3;
  sub_1001E4804(buf);
  v42[0] = 0;
  v7 = sub_1001E4874(*(uint64_t *)&buf[0], "EEDLogCloakingKey", v42);
  if (v42[0])
    v8 = v7;
  else
    v8 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_21;
  v10 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    if (!v8)
      goto LABEL_27;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v12 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 384), "base64EncodedStringWithOptions:", 0), "UTF8String");
    LODWORD(buf[0]) = 136380675;
    *(_QWORD *)((char *)buf + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,cloaking key,%{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v34 = qword_1022A0088;
    v35 = objc_msgSend(objc_msgSend(*(id *)(a1 + 384), "base64EncodedStringWithOptions:", 0), "UTF8String");
    *(_DWORD *)v42 = 136380675;
    *(_QWORD *)&v42[4] = v35;
    LODWORD(v38) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "#ADR,sendPreCachedAdr,cloaking key,%{private}s", v42, v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr()", "%s\n", v36);
    if (v37 != (char *)buf)
      free(v37);
  }
LABEL_27:
  v14 = sub_1012D1E48(a1);
  *(_QWORD *)(a1 + 392) = v14;
  v15 = v14;
  *(_QWORD *)v42 = 0;
  v40 = 0;
  v41 = 0;
  sub_1012D315C(a1, v42, &v41, &v40);
  if (objc_opt_class(MCProfileConnection, v16)
    && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed")&& *(_QWORD *)(a1 + 608))
  {
    v17 = objc_msgSend(v41, "count");
    v18 = *(_QWORD *)(a1 + 608);
    *(_DWORD *)(v18 + 544) = v17;
    if ((v17 & 0x80000000) != 0)
    {
      v19 = -2;
    }
    else
    {
      if (v17 < 0x65)
        goto LABEL_37;
      v19 = 101;
    }
    *(_DWORD *)(v18 + 544) = v19;
  }
LABEL_37:
  v20 = *(_QWORD *)v42;
  v21 = v41;
  v22 = sub_1012D3488(a1, 0, *(uint64_t *)v42, v41);
  if (v22)
  {
    LODWORD(buf[0]) = 0;
    v23 = *(_QWORD *)(a1 + 192);
    if (!v23)
      sub_10025FD1C();
    v24 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v23 + 48))(v23, buf);
    v39 = 0;
    *(_QWORD *)&buf[0] = &v39;
    v25 = (std::string *)sub_1009707B4(a1 + 400, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=(v25 + 1, (const std::string *)(v24 + 136));
  }
  if (sub_1001DC538() && sub_1012D3488(a1, 1, v20, v21))
  {
    LODWORD(buf[0]) = 1;
    v26 = *(_QWORD *)(a1 + 192);
    if (!v26)
      sub_10025FD1C();
    v27 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v26 + 48))(v26, buf);
    v39 = 1;
    *(_QWORD *)&buf[0] = &v39;
    v28 = (std::string *)sub_1009707B4(a1 + 400, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=(v28 + 1, (const std::string *)(v27 + 136));
    goto LABEL_45;
  }
  if (v22)
  {
LABEL_45:

    *(_QWORD *)(a1 + 496) = v40;
    return 1;
  }
  return 0;
}

void sub_1012D2AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012D2AD4(uint64_t a1)
{
  return sub_1012C484C(*(_QWORD *)(a1 + 32) + 8, 9);
}

uint64_t sub_1012D2AE4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1012D8598(result);
    operator delete();
  }
  return result;
}

BOOL sub_1012D2B20(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _BOOL8 v3;
  int v5;
  int *v6;

  v1 = a1 + 448;
  v5 = 0;
  v6 = &v5;
  v2 = *((_DWORD *)sub_10006A62C(a1 + 448, &v5, (uint64_t)&unk_101B9EB60, &v6) + 5);
  v3 = v2 > 0;
  if (sub_1001DC538())
  {
    v3 = 1;
    if (v2 <= 0)
    {
      v5 = 1;
      v6 = &v5;
      return *((_DWORD *)sub_10006A62C(v1, &v5, (uint64_t)&unk_101B9EB60, &v6) + 5) > 0;
    }
  }
  return v3;
}

uint64_t sub_1012D2BCC(uint64_t a1)
{
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(CFAbsoluteTime *)(a1 + 536) = CFAbsoluteTimeGetCurrent();

  *(_QWORD *)(a1 + 544) = *(id *)(a1 + 384);
  *(_QWORD *)(a1 + 552) = *(id *)(a1 + 392);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a1 + 432);
  sub_1012D8708((_QWORD *)(a1 + 560), *(uint64_t **)(a1 + 416), 0);

  *(_QWORD *)(a1 + 600) = *(id *)(a1 + 496);
  return sub_1012CFCDC((_QWORD *)a1);
}

uint64_t sub_1012D2C50(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,clearPreCachedAdr,preparing to clear pre-cached ADR", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,clearPreCachedAdr,preparing to clear pre-cached ADR", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::clearPreCachedAdr()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = sub_1012D5E5C(a1, 0);
  if (sub_1001DC538())
    return sub_1012D5E5C(a1, 1u) | v3;
  return v3;
}

uint64_t sub_1012D2E0C(uint64_t a1)
{
  return sub_1012C484C(*(_QWORD *)(a1 + 32) + 8, 9);
}

void sub_1012D2E1C(uint64_t a1, xpc_activity_t activity)
{
  id *v2;
  xpc_activity_state_t state;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD block[5];
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v2 = *(id **)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,preCacheADRActivity,handler triggered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,preCacheADRActivity,handler triggered", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerPreCacheAdrActivity(int64_t, int64_t)_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = objc_msgSend(objc_msgSend(*v2, "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1012D3148;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    v6 = state;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,preCacheADRActivity,handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v13[0] = 67240192;
      v13[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,preCacheADRActivity,handler triggered with unexpected state %{public}d", v13, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::registerPreCacheAdrActivity(int64_t, int64_t)_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

uint64_t sub_1012D3148(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 376) = 0;
  return sub_1012C484C(v1 + 8, 2);
}

void sub_1012D315C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  void *v5;
  id v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  id v13;
  id v14;
  int v15;
  uint64_t v16;
  NSString *v17;
  void *v18;
  uint64_t v19;
  NSString *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void *v23;
  id v24;
  _QWORD v25[7];
  _WORD v26[8];
  uint8_t buf[1632];

  v5 = *(void **)(a1 + 280);
  if (v5)
  {
    if (objc_msgSend(v5, "name"))
      v9 = sub_1013908B4(objc_msgSend(*(id *)(a1 + 280), "name"), 0x7D0u);
    else
      v9 = 0;
    if (!objc_msgSend(*(id *)(a1 + 280), "emergencyContacts")
      || !objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), "count"))
    {
      return;
    }
    v13 = objc_alloc_init((Class)NSMutableArray);
    v14 = objc_alloc_init((Class)NSMutableArray);
    v15 = sub_1001DC538();
    *(_DWORD *)buf = 0;
    v16 = *(_QWORD *)(a1 + 192);
    if (v16)
    {
      v17 = -[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 48))(v16, buf) + 32)), "stringValue");
      v18 = (void *)TUISOCountryCodeForMCC(v17);
      if (!v15)
      {
        v21 = 0;
        goto LABEL_21;
      }
      *(_DWORD *)buf = 1;
      v19 = *(_QWORD *)(a1 + 192);
      if (v19)
      {
        v20 = -[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 48))(v19, buf)+ 32)), "stringValue");
        v21 = TUISOCountryCodeForMCC(v20);
LABEL_21:
        if (sub_1001DC538())
        {
          v22 = objc_msgSend(v18, "isEqualToString:", v21);
          if (v18)
            v23 = 0;
          else
            v23 = (void *)v21;
          if (!v21)
            v23 = v18;
          if ((v22 & 1) == 0)
            v18 = v23;
        }
        v24 = objc_msgSend(*(id *)(a1 + 280), "emergencyContacts");
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_1012D6674;
        v25[3] = &unk_1021AD128;
        v25[4] = v18;
        v25[5] = v13;
        v25[6] = v14;
        objc_msgSend(v24, "enumerateObjectsUsingBlock:", v25);
        if (v13)
        {
          if (objc_msgSend(v13, "count"))
          {
            *a2 = v9;
            *a3 = v13;
            *a4 = v14;
          }
        }
        return;
      }
    }
    sub_10025FD1C();
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ADR,getFormattedEmergencyContacts,no medical ID info available", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v26[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,getFormattedEmergencyContacts,no medical ID info available", v26, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::getFormattedEmergencyContacts(NSString **, NSArray<NSString *> **, NSArray<NSString *> **)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

BOOL sub_1012D3488(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  int *v11;
  uint64_t *v12;
  NSObject *v13;
  _BOOL8 result;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  void **v21;
  int v22;
  int v23;
  NSObject *v24;
  void *v25;
  const char *v26;
  uint8_t *v27;
  _QWORD v28[5];
  int v29;
  int v30;
  NSMutableURLRequest *v31;
  int v32;
  _DWORD v33[2];
  __int16 v34;
  int v35;
  void *__p[2];
  uint64_t v37;
  uint8_t buf[8];
  __int16 v39;
  int v40;

  v32 = a2;
  v6 = sub_1012D3BE0((_QWORD *)a1, a2, a3, a4);
  if (v6)
  {
    v7 = v6;
    v8 = sub_1012D4738(a1, a2, (uint64_t)v6);

    if (v8)
    {
      v9 = sub_1012D4D24(a1, a2, v8);

      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 160);
        if (!v10)
          sub_10025FD1C();
        v11 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        v12 = sub_100A587F4(v11);
        if (*((char *)v12 + 455) < 0)
        {
          sub_100115CE4(__p, (void *)v12[54], v12[55]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v12 + 27);
          v37 = v12[56];
        }
        if (v37 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v31 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21)));
        -[NSMutableURLRequest setHTTPMethod:](v31, "setHTTPMethod:", CFSTR("POST"));
        sub_10105C7A4(a1 + 200, (uint64_t)v9, (uint64_t)&v31);
        v22 = *(_DWORD *)(a1 + 440);
        if (v22 >= 0)
          v23 = v22 + 1;
        else
          v23 = 1;
        *(_DWORD *)(a1 + 440) = v23;
        *(_QWORD *)buf = &v32;
        *((_DWORD *)sub_10006A62C(a1 + 448, &v32, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = v23;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v24 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v32;
          v39 = 1026;
          v40 = v23;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,inst,%{public}d,sending as message %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v33[0] = 67240448;
          v33[1] = v32;
          v34 = 1026;
          v35 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendPreCachedAdr,inst,%{public}d,sending as message %{public}d", v33, 14);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v25 = *(void **)(a1 + 232);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_1012D53AC;
        v28[3] = &unk_1021AD100;
        v28[4] = a1;
        v29 = v32;
        v30 = v23;
        objc_msgSend(objc_msgSend(v25, "uploadTaskWithRequest:fromData:completionHandler:", v31, v9, v28), "resume");
        if (SHIBYTE(v37) < 0)
          operator delete(__p[0]);
        return 1;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#ADR,sendPreCachedAdr,inst,%{public}d,failed to create ADR cache-update message body", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,sendPreCachedAdr,inst,%{public}d,failed to create ADR cache-update message body", __p, 8);
        v16 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v20);
LABEL_31:
        if (v16 != buf)
          free(v16);
        return 0;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,sendPreCachedAdr,inst,%{public}d,failed to encrypt pre-cached ADR", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,sendPreCachedAdr,inst,%{public}d,failed to encrypt pre-cached ADR", __p, 8);
        v16 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v18);
        goto LABEL_31;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,inst,%{public}d,no pre-cached ADR data to send", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,sendPreCachedAdr,inst,%{public}d,no pre-cached ADR data to send", __p, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v15);
      goto LABEL_31;
    }
  }
  return result;
}

void sub_1012D3BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1012D3BE0(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  NSMutableData *v24;
  id v25;
  id v26;
  id v27;
  void **v28;
  id v29;
  NSObject *v30;
  std::string *v31;
  NSObject *v32;
  std::string *v33;
  NSObject *v34;
  std::string *v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  void **v39;
  unsigned int v40;
  void **v41;
  void **v42;
  std::string *v43;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  void *__p[2];
  uint64_t v54;
  _BYTE v55[24];
  uint64_t v56;
  int v57;
  int v58;
  id v59[2];
  uint8_t buf[4];
  int v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  _BYTE v67[18];
  __int16 v68;
  _BOOL4 v69;
  __int16 v70;
  unsigned int v71;

  v5 = a1[20];
  if (!v5)
    sub_10025FD1C();
  v9 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v10 = sub_100A587F4(v9);
  sub_100A54A74(v10, (uint64_t)v55);
  if (v56)
  {
    *(_DWORD *)buf = a2;
    v11 = a1[24];
    if (!v11)
      sub_10025FD1C();
    v12 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 48))(v11, buf);
    if (*(char *)(v12 + 159) < 0)
    {
      sub_100115CE4(__p, *(void **)(v12 + 136), *(_QWORD *)(v12 + 144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v12 + 136);
      v54 = *(_QWORD *)(v12 + 152);
    }
    v15 = (void *)HIBYTE(v54);
    if (v54 < 0)
      v15 = __p[1];
    if (v15)
    {
      v16 = objc_alloc_init((Class)NSMutableDictionary);
      v17 = sub_1012C8830((uint64_t)a1, a2, 1, 0);
      if (v17)
      {
        objc_msgSend(v16, "setValue:forKey:", v17, CFSTR("call_information"));

      }
      v18 = sub_1012C8EE8((uint64_t)a1, 0);
      if (v18)
      {
        objc_msgSend(v16, "setValue:forKey:", v18, CFSTR("caller_information"));

      }
      v19 = sub_100A82980((uint64_t)v16);
      if (v19)
      {
        v59[0] = 0;
        v20 = sub_100F4DC64(v19, 0x20u, v59);
        v21 = v59[0];
        v22 = v20;
        if (v20 && v59[0])
        {
          CFAbsoluteTimeGetCurrent();
          v23 = sub_100A8262C();
          v24 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 32);
          CC_SHA256(objc_msgSend(v20, "bytes"), (CC_LONG)objc_msgSend(v20, "length"), (unsigned __int8 *)-[NSMutableData mutableBytes](v24, "mutableBytes"));
          v25 = sub_100F4E9D8((uint64_t)v55, v23, (uint64_t)v24, (uint64_t)v59[0]);
          v26 = v25;
          v27 = objc_alloc_init((Class)NSMutableDictionary);
          if (v54 >= 0)
            v28 = __p;
          else
            v28 = (void **)__p[0];
          objc_msgSend(v27, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28), CFSTR("call_ID"));
          objc_msgSend(v27, "setValue:forKey:", CFSTR("1"), CFSTR("data_version"));
          objc_msgSend(v27, "setValue:forKey:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v23), CFSTR("encrypt_time"));
          objc_msgSend(v27, "setValue:forKey:", objc_msgSend(v20, "base64EncodedStringWithOptions:", 0), CFSTR("data"));
          objc_msgSend(v27, "setValue:forKey:", v25, CFSTR("keys"));
          v29 = sub_1012CA914((uint64_t)a1, a2, 1);
          if (v29)
          {
            objc_msgSend(v27, "setValue:forKey:", v29, CFSTR("internal"));

          }
          if (a4 && objc_msgSend(a4, "count"))
          {
            if (a3)
              objc_msgSend(v27, "setValue:forKey:", a3, CFSTR("name"));
            objc_msgSend(v27, "setValue:forKey:", a4, CFSTR("emergency_contacts"));
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v36 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67240192;
              v61 = a2;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#ADR,createPreCachedAdrDict,inst,%{public}d,emergency contacts not present", buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021AD148);
              v57 = 67240192;
              v58 = a2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createPreCachedAdrDict,inst,%{public}d,emergency contacts not present", &v57, 8);
              v52 = (uint8_t *)v51;
              sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v51);
              if (v52 != buf)
                free(v52);
            }
          }
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v37 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v38 = SHIBYTE(v54);
            v39 = (void **)__p[0];
            v40 = objc_msgSend(a4, "count");
            *(_DWORD *)buf = 68290307;
            v41 = __p;
            if (v38 < 0)
              v41 = v39;
            v61 = 0;
            v62 = 2082;
            v63 = "";
            v64 = 1026;
            v65 = a2;
            v66 = 2081;
            *(_QWORD *)v67 = v41;
            *(_WORD *)&v67[8] = 2050;
            *(_QWORD *)&v67[10] = v23;
            v68 = 1026;
            v69 = a3 != 0;
            v70 = 1026;
            v71 = v40;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createPreCachedAdrDict,finished\", \"inst\":%{public}d, \"phone number\":%{private, location:escape_only}s, \"encrypt time\":%{public}lld, \"name available\":%{public}hhd, \"num contacts\":%{public}d}", buf, 0x38u);
          }
          goto LABEL_54;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v34 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          v61 = a2;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#ADR,createPreCachedAdrDict,inst,%{public}d,encrypted ADR data and/or key are nil", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v57 = 67240192;
          v58 = a2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createPreCachedAdrDict,inst,%{public}d,encrypted ADR data and/or key are nil", &v57, 8);
          v50 = (uint8_t *)v49;
          sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
        v35 = (std::string *)a1[76];
        if (v35)
          sub_1012CEE70(v35, a2, (const std::string *)&qword_102313C48);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v32 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          v61 = a2;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#ADR,createPreCachedAdrDict,inst,%{public}d,failed to serialize ADR data dict into JSON", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LODWORD(v59[0]) = 67240192;
          HIDWORD(v59[0]) = a2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createPreCachedAdrDict,inst,%{public}d,failed to serialize ADR data dict into JSON", v59, 8);
          v48 = (uint8_t *)v47;
          sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
        v33 = (std::string *)a1[76];
        if (v33)
          sub_1012CEE70(v33, a2, (const std::string *)&qword_102313C30);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v30 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v61 = a2;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#ADR,createPreCachedAdrDict,inst,%{public}d,native number not available", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LODWORD(v59[0]) = 67240192;
        HIDWORD(v59[0]) = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createPreCachedAdrDict,inst,%{public}d,native number not available", v59, 8);
        v46 = (uint8_t *)v45;
        sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
      v31 = (std::string *)a1[76];
      if (v31)
        sub_1012CEE70(v31, a2, (const std::string *)&qword_102313C18);
    }
    v27 = 0;
LABEL_54:
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
    goto LABEL_75;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v14 = v56;
    if (*((char *)v10 + 223) < 0)
    {
      sub_100115CE4(__p, (void *)v10[25], v10[26]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v10 + 25);
      v54 = v10[27];
    }
    v42 = __p;
    if (v54 < 0)
      v42 = (void **)__p[0];
    *(_DWORD *)buf = 68289794;
    v61 = 0;
    v62 = 2082;
    v63 = "";
    v64 = 1026;
    v65 = a2;
    v66 = 1026;
    *(_DWORD *)v67 = v14;
    *(_WORD *)&v67[4] = 2082;
    *(_QWORD *)&v67[6] = v42;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createPreCachedAdrDict,not configured for ADR encryption\", \"inst\":%{public}d, \"num partner certs\":%{public}d, \"intermediate cert\":%{public, location:escape_only}s}", buf, 0x28u);
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
  }
  v43 = (std::string *)a1[76];
  if (v43)
    sub_1012CEE70(v43, a2, (const std::string *)&qword_102313C00);
  v27 = 0;
LABEL_75:
  sub_100A9224C((uint64_t)v55);
  return v27;
}

void sub_1012D46C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100A9224C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

id sub_1012D4738(uint64_t a1, int a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  std::string *v12;
  const std::string *v13;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  int v24;
  uint8_t buf[4];
  int v26;

  if (!a3 || !*(_QWORD *)(a1 + 384))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,ADR dict or key is nil", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v23 = 67240192;
      v24 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,ADR dict or key is nil", &v23, 8);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v12 = *(std::string **)(a1 + 608);
    if (!v12)
      return 0;
    v13 = (const std::string *)byte_102313C60;
    goto LABEL_21;
  }
  v5 = sub_100A82980(a3);
  if (!v5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,failed to serialize pre-cached ADR dict into JSON", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v23 = 67240192;
      v24 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,failed to serialize pre-cached ADR dict into JSON", &v23, 8);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v12 = *(std::string **)(a1 + 608);
    if (!v12)
      return 0;
    v13 = (const std::string *)&qword_102313C30;
    goto LABEL_21;
  }
  v6 = sub_100F4E2BC(v5, *(void **)(a1 + 384));
  if (!v6)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,failed to encrypt pre-cached ADR", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v23 = 67240192;
      v24 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,failed to encrypt pre-cached ADR", &v23, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v12 = *(std::string **)(a1 + 608);
    if (!v12)
      return 0;
    v13 = (const std::string *)&qword_102313C48;
LABEL_21:
    sub_1012CEE70(v12, a2, v13);
    return 0;
  }
  v7 = v6;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,successfully encrypted pre-cached ADR", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v23 = 67240192;
    v24 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,successfully encrypted pre-cached ADR", &v23, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v7;
}

id sub_1012D4D24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  std::string *v9;
  id v10;
  void *v11;
  id v12;
  void **v13;
  id v14;
  NSObject *v15;
  std::string *v16;
  NSObject *v17;
  std::string *v18;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  int v27;
  void *__p[2];
  uint64_t v29;
  uint8_t buf[4];
  int v31;

  if (a3)
  {
    *(_DWORD *)buf = a2;
    v5 = *(_QWORD *)(a1 + 192);
    if (!v5)
      sub_10025FD1C();
    v7 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 48))(v5, buf);
    if (*(char *)(v7 + 159) < 0)
    {
      sub_100115CE4(__p, *(void **)(v7 + 136), *(_QWORD *)(v7 + 144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v7 + 136);
      v29 = *(_QWORD *)(v7 + 152);
    }
    v11 = (void *)HIBYTE(v29);
    if (v29 < 0)
      v11 = __p[1];
    if (v11)
    {
      v12 = objc_alloc_init((Class)NSMutableDictionary);
      if (v29 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      objc_msgSend(v12, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), CFSTR("call_ID"));
      objc_msgSend(v12, "setValue:forKey:", CFSTR("Cache"), CFSTR("mode"));
      objc_msgSend(v12, "setValue:forKey:", objc_msgSend(objc_msgSend(a3, "subdataWithRange:", 0, 16), "base64EncodedStringWithOptions:", 0), CFSTR("IV"));
      objc_msgSend(v12, "setValue:forKey:", objc_msgSend(objc_msgSend(a3, "subdataWithRange:", 16, (char *)objc_msgSend(a3, "length") - 32), "base64EncodedStringWithOptions:", 0), CFSTR("encrypted_data"));
      objc_msgSend(v12, "setValue:forKey:", objc_msgSend(objc_msgSend(a3, "subdataWithRange:", (char *)objc_msgSend(a3, "length") - 16, 16), "base64EncodedStringWithOptions:", 0), CFSTR("auth_tag"));
      v14 = sub_1012D5948(a1, a2);
      if (v14)
      {
        objc_msgSend(v12, "setValue:forKey:", v14, CFSTR("internal"));

      }
      v10 = sub_100A82980((uint64_t)v12);
      if (v10)
        goto LABEL_38;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v31 = a2;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,failed to serialize LIS dict into JSON", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v26 = 67240192;
        v27 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,failed to serialize LIS dict into JSON", &v26, 8);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyADR::getPreCachedAdrMessageBody(SimInstance, NSData *)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      v16 = *(std::string **)(a1 + 608);
      if (v16)
        sub_1012CEE70(v16, a2, (const std::string *)&qword_102313C30);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v31 = a2;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,native number not available", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v26 = 67240192;
        v27 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,native number not available", &v26, 8);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyADR::getPreCachedAdrMessageBody(SimInstance, NSData *)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      v18 = *(std::string **)(a1 + 608);
      if (v18)
        sub_1012CEE70(v18, a2, (const std::string *)&qword_102313C18);
    }
    v10 = 0;
LABEL_38:
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    return v10;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v31 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,encrypted pre-cached ADR is nil", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,encrypted pre-cached ADR is nil", __p, 8);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyADR::getPreCachedAdrMessageBody(SimInstance, NSData *)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v9 = *(std::string **)(a1 + 608);
  if (v9)
    sub_1012CEE70(v9, a2, (const std::string *)byte_102313C60);
  return 0;
}

void sub_1012D5368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012D53AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v7;
  NSObject *v8;
  _QWORD v9[8];

  v7 = *(id **)(a1 + 32);
  v8 = objc_msgSend(objc_msgSend(*v7, "silo"), "queue");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1012D5434;
  v9[3] = &unk_1021A36E8;
  v9[5] = a4;
  v9[6] = v7;
  v9[7] = *(_QWORD *)(a1 + 40);
  v9[4] = a3;
  dispatch_async(v8, v9);
}

void sub_1012D5434(uint64_t a1)
{
  sub_1012D5448(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1012D5448(uint64_t a1, int a2, int a3, void *a4, void *a5)
{
  uint64_t v9;
  int v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  std::string *v17;
  NSObject *v18;
  int v19;
  unsigned int v20;
  id v21;
  id v22;
  std::string *v23;
  int v24;
  NSObject *v25;
  int v26;
  unsigned int v27;
  std::string *v28;
  int v29;
  int v30;
  int v31;
  std::string buf;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[28];
  __int16 v37;
  id v38;

  v31 = a2;
  v9 = a1 + 448;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v10 = *((_DWORD *)sub_10006A62C(a1 + 448, &v31, (uint64_t)&unk_101B9EB60, &buf) + 5);
  if (v10 == a3)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    *((_DWORD *)sub_10006A62C(v9, &v31, (uint64_t)&unk_101B9EB60, &buf) + 5) = 0;
  }
  if (!a4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v19 = v31;
      v20 = objc_msgSend(a5, "code");
      v21 = objc_msgSend(objc_msgSend(a5, "domain"), "UTF8String");
      v22 = objc_msgSend(objc_msgSend(a5, "localizedDescription"), "UTF8String");
      buf.__r_.__value_.__r.__words[0] = 68290306;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v19;
      v33 = 1026;
      v34 = a3;
      v35 = 1026;
      *(_DWORD *)v36 = v20;
      *(_WORD *)&v36[4] = 2082;
      *(_QWORD *)&v36[6] = v21;
      *(_WORD *)&v36[14] = 2082;
      *(_QWORD *)&v36[16] = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,failed to send\", \"sim\":%{public}d, \"message\":%{public}d, \"error code\":%{public}d, \"error domain\":%{public, location:escape_only}s, \"error description\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x38u);
    }
    if (v10 != a3)
      return;
    *(_BYTE *)(a1 + 488) = 1;
    v23 = *(std::string **)(a1 + 608);
    if (v23)
    {
      v24 = v31;
      sub_1012CD100(a5, &buf);
      sub_1012CEE70(v23, v24, &buf);
      goto LABEL_30;
    }
LABEL_32:
    sub_1012C484C(a1 + 8, 8);
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v30 = v31;
    v12 = objc_msgSend(objc_msgSend(a4, "valueForHTTPHeaderField:", CFSTR("X-Responding-Instance")), "UTF8String");
    v13 = objc_msgSend(objc_msgSend(a4, "valueForHTTPHeaderField:", CFSTR("X-Apple-Request-UUID")), "UTF8String");
    v14 = objc_msgSend(objc_msgSend(a4, "valueForHTTPHeaderField:", CFSTR("X-Apple-Jingle-Correlation-Key")), "UTF8String");
    v15 = objc_msgSend(objc_msgSend(a4, "valueForHTTPHeaderField:", CFSTR("Via")), "UTF8String");
    buf.__r_.__value_.__r.__words[0] = 68290563;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v30;
    v33 = 1026;
    v34 = a3;
    v35 = 2081;
    *(_QWORD *)v36 = v12;
    *(_WORD *)&v36[8] = 2081;
    *(_QWORD *)&v36[10] = v13;
    *(_WORD *)&v36[18] = 2081;
    *(_QWORD *)&v36[20] = v14;
    v37 = 2081;
    v38 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,response headers\", \"sim\":%{public}d, \"message\":%{public}d, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x46u);
  }
  if (objc_msgSend(a4, "statusCode") != (id)200)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v25 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v26 = v31;
      v27 = objc_msgSend(a4, "statusCode");
      buf.__r_.__value_.__r.__words[0] = 68289794;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v26;
      v33 = 1026;
      v34 = a3;
      v35 = 1026;
      *(_DWORD *)v36 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,failure response\", \"sim\":%{public}d, \"message\":%{public}d, \"response code\":%{public}d}", (uint8_t *)&buf, 0x24u);
    }
    if (v10 != a3)
      return;
    *(_BYTE *)(a1 + 488) = 1;
    v28 = *(std::string **)(a1 + 608);
    if (v28)
    {
      v29 = v31;
      sub_1012CD4A4(a4, &buf);
      sub_1012CEE70(v28, v29, &buf);
LABEL_30:
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v16 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289538;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v31;
    v33 = 1026;
    v34 = a3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,successfully sent\", \"sim\":%{public}d, \"message\":%{public}d}", (uint8_t *)&buf, 0x1Eu);
  }
  if (v10 == a3)
  {
    v17 = *(std::string **)(a1 + 608);
    if (v17)
      sub_1012CEE70(v17, v31, (const std::string *)&qword_102313BB8);
    goto LABEL_32;
  }
}

void sub_1012D5920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1012D5948(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::string::size_type size;
  char v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::string::size_type v16;
  char v17;
  std::string *v18;
  NSString *v19;
  NSString *v20;
  uint64_t v21;
  uint8_t *v22;
  NSString *v23;
  NSObject *v24;
  std::string *v25;
  const char *v26;
  std::string *v27;
  const char *v28;
  const char *v29;
  void *v31[2];
  char v32;
  std::string v33;
  void *__p[2];
  char v35;
  std::string __dst;
  uint8_t buf[8];
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  std::string *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  std::string *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  const char *v53;

  *(_DWORD *)buf = a2;
  v3 = *(_QWORD *)(a1 + 192);
  if (!v3)
    sub_10025FD1C();
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, buf);
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), CFSTR("sim"));
  v7 = *(_QWORD *)(a1 + 160);
  if (!v7)
    sub_10025FD1C();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  sub_1015A2E04(__p, "carrier");
  v9 = sub_100A580B8(v8, a2, (uint64_t *)__p);
  if (*((char *)v9 + 55) < 0)
    sub_100115CE4(&__dst, (void *)v9[4], v9[5]);
  else
    __dst = *(std::string *)(v9 + 4);
  if (v35 < 0)
    operator delete(__p[0]);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v11 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst), CFSTR("sim_bundle_id"));
  v13 = *(_QWORD *)(a1 + 160);
  if (!v13)
    sub_10025FD1C();
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  sub_1015A2E04(v31, "operator");
  v15 = sub_100A580B8(v14, a2, (uint64_t *)v31);
  if (*((char *)v15 + 55) < 0)
    sub_100115CE4(&v33, (void *)v15[4], v15[5]);
  else
    v33 = *(std::string *)(v15 + 4);
  if (v32 < 0)
    operator delete(v31[0]);
  v16 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  v17 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = v33.__r_.__value_.__l.__size_;
  if (!v16)
  {
    std::string::assign(&v33, "Unavailable");
    v17 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  if (v17 >= 0)
    v18 = &v33;
  else
    v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18), CFSTR("operator_bundle_id"));
  v19 = sub_100F7F650(*(unsigned int *)(v5 + 32));
  objc_msgSend(v6, "setValue:forKey:", v19, CFSTR("sim_country"));
  v20 = sub_100F7F650(*(unsigned int *)(v5 + 8));
  objc_msgSend(v6, "setValue:forKey:", v20, CFSTR("operator_country"));
  sub_100197040();
  v21 = sub_10075A924();
  objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21), CFSTR("release_type"));
  sub_100197040();
  sub_10075B048((uint64_t)buf);
  if (v41 >= 0)
    v22 = buf;
  else
    v22 = *(uint8_t **)buf;
  v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  objc_msgSend(v6, "setValue:forKey:", v23, CFSTR("product_type"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v24 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__dst;
    else
      v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v26 = -[NSString UTF8String](v19, "UTF8String");
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v33;
    else
      v27 = (std::string *)v33.__r_.__value_.__r.__words[0];
    v28 = -[NSString UTF8String](v20, "UTF8String");
    v29 = -[NSString UTF8String](v23, "UTF8String");
    *(_DWORD *)buf = 68290819;
    *(_DWORD *)&buf[4] = 0;
    v38 = 2082;
    v39 = "";
    v40 = 1026;
    v41 = a2;
    v42 = 2082;
    v43 = v25;
    v44 = 2082;
    v45 = v26;
    v46 = 2082;
    v47 = v27;
    v48 = 2082;
    v49 = v28;
    v50 = 1026;
    v51 = v21;
    v52 = 2081;
    v53 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createPreCachedAdrInternalDict\", \"sim\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"release_type\":%{public}d, \"product_type\":%{private, location:escape_only}s}", buf, 0x50u);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1012D5DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012D5E5C(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  void *v4;
  id v5;
  void **v6;
  id v7;
  id v8;
  uint64_t v9;
  int *v10;
  uint64_t *v11;
  NSObject *v12;
  std::string *v13;
  NSObject *v14;
  std::string *v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  NSObject *v20;
  void *v21;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  _QWORD v29[5];
  unsigned int v30;
  int v31;
  NSMutableURLRequest *v32;
  void *__dst[2];
  uint64_t v34;
  unsigned int v35;
  _DWORD v36[2];
  __int16 v37;
  int v38;
  void *__p[2];
  uint64_t v40;
  uint8_t buf[8];
  __int16 v42;
  int v43;

  v35 = a2;
  *(_QWORD *)buf = &v35;
  v3 = sub_1009707B4(a1 + 560, (int *)&v35, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  if (*((char *)v3 + 47) < 0)
  {
    sub_100115CE4(__dst, (void *)v3[3], v3[4]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v3 + 3);
    v34 = v3[5];
  }
  v4 = (void *)HIBYTE(v34);
  if (v34 < 0)
    v4 = __dst[1];
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ADR,clearPreCachedAdr,inst,%{public}d,no pre-cached ADR data for this inst", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,clearPreCachedAdr,inst,%{public}d,no pre-cached ADR data for this inst", __p, 8);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::clearPreCachedAdr(SimInstance)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v13 = *(std::string **)(a1 + 608);
    if (v13)
      sub_1012CEE70(v13, v35, (const std::string *)&qword_102313C18);
    goto LABEL_30;
  }
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  if (v34 >= 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  objc_msgSend(v5, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), CFSTR("call_ID"));
  objc_msgSend(v5, "setValue:forKey:", CFSTR("Erase"), CFSTR("mode"));
  v7 = sub_1012D5948(a1, v35);
  if (v7)
  {
    objc_msgSend(v5, "setValue:forKey:", v7, CFSTR("internal"));

  }
  v8 = sub_100A82980((uint64_t)v5);
  if (!v8)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,clearPreCachedAdr,inst,%{public}d,failed to serialize LIS dict into JSON", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,clearPreCachedAdr,inst,%{public}d,failed to serialize LIS dict into JSON", __p, 8);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyADR::clearPreCachedAdr(SimInstance)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    v15 = *(std::string **)(a1 + 608);
    if (v15)
      sub_1012CEE70(v15, v35, (const std::string *)&qword_102313C30);
LABEL_30:
    v16 = 0;
    goto LABEL_46;
  }
  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
    sub_10025FD1C();
  v10 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  v11 = sub_100A587F4(v10);
  if (*((char *)v11 + 455) < 0)
  {
    sub_100115CE4(__p, (void *)v11[54], v11[55]);
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v11 + 27);
    v40 = v11[56];
  }
  if (v40 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v32 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17)));
  -[NSMutableURLRequest setHTTPMethod:](v32, "setHTTPMethod:", CFSTR("POST"));
  sub_10105C7A4(a1 + 200, (uint64_t)v8, (uint64_t)&v32);
  v18 = *(_DWORD *)(a1 + 440);
  if (v18 >= 0)
    v19 = v18 + 1;
  else
    v19 = 1;
  *(_DWORD *)(a1 + 440) = v19;
  *(_QWORD *)buf = &v35;
  *((_DWORD *)sub_10006A62C(a1 + 448, (int *)&v35, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = v19;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v20 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v35;
    v42 = 1026;
    v43 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,clearPreCachedAdr,inst,%{public}d,sending as message %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v36[0] = 67240448;
    v36[1] = v35;
    v37 = 1026;
    v38 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,clearPreCachedAdr,inst,%{public}d,sending as message %{public}d", v36, 14);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyADR::clearPreCachedAdr(SimInstance)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v21 = *(void **)(a1 + 232);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1012D65D8;
  v29[3] = &unk_1021AD100;
  v29[4] = a1;
  v30 = v35;
  v31 = v19;
  objc_msgSend(objc_msgSend(v21, "uploadTaskWithRequest:fromData:completionHandler:", v32, v8, v29), "resume");
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v16 = 1;
LABEL_46:
  if (SHIBYTE(v34) < 0)
    operator delete(__dst[0]);
  return v16;
}

void sub_1012D6574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012D65D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v7;
  NSObject *v8;
  _QWORD v9[8];

  v7 = *(id **)(a1 + 32);
  v8 = objc_msgSend(objc_msgSend(*v7, "silo"), "queue");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1012D6660;
  v9[3] = &unk_1021A36E8;
  v9[5] = a4;
  v9[6] = v7;
  v9[7] = *(_QWORD *)(a1 + 40);
  v9[4] = a3;
  dispatch_async(v8, v9);
}

void sub_1012D6660(uint64_t a1)
{
  sub_1012D5448(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1012D6674(id *a1, void *a2, int a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[8];
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  id v24;

  if (objc_msgSend(a2, "phoneNumber") && objc_msgSend(a2, "name"))
  {
    v6 = PNCopyBestGuessCountryCodeForNumber(objc_msgSend(a2, "phoneNumber"));
    if (v6)
    {
      v7 = (id)v6;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        v19 = 2082;
        v20 = "";
        v21 = 1026;
        v22 = a3;
        v23 = 2081;
        v24 = objc_msgSend(v7, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,getFormattedEmergencyContacts,got country code from contact number\", \"ind\":%{public}d, \"country code\":%{private, location:escape_only}s}", buf, 0x22u);
      }
      v9 = v7;
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v11 = objc_msgSend(a1[4], "UTF8String");
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v19 = 2082;
        v20 = "";
        v21 = 1026;
        v22 = a3;
        v23 = 2082;
        v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,getFormattedEmergencyContacts,used assumed country code\", \"ind\":%{public}d, \"country code\":%{public, location:escape_only}s}", buf, 0x22u);
      }
      v7 = a1[4];
    }
    sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(a2, "phoneNumber"), "UTF8String"));
    v12 = sub_101394358((uint64_t *)buf, (uint64_t)v7);
    v13 = v12;
    if (SHIBYTE(v22) < 0)
    {
      operator delete(*(void **)buf);
      if (v13)
        goto LABEL_16;
    }
    else if (v12)
    {
LABEL_16:
      objc_msgSend(a1[5], "addObject:", sub_1013908B4(v13, 0x7D0u));
      objc_msgSend(a1[6], "addObject:", objc_msgSend(a2, "name"));
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ADR,getFormattedEmergencyContacts,failed to format emergency contact number,ind,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v17[0] = 67240192;
      v17[1] = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,getFormattedEmergencyContacts,failed to format emergency contact number,ind,%{public}d", v17, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::getFormattedEmergencyContacts(NSString **, NSArray<NSString *> **, NSArray<NSString *> **)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_1012D6A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012D6A3C(char *__dst, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  NSObject *v15;
  int v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  void **v31;
  const char *v32;
  void **v33;
  int v34;
  const char *v35;
  void **v36;
  const char *v37;
  void **v38;
  const char *v39;
  void **v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  void *__p[2];
  char v52;
  __int128 *v53[2];

  if (byte_102313D07 < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_102313CF0, *((unint64_t *)&xmmword_102313CF0 + 1));
  }
  else
  {
    v4 = xmmword_102313CF0;
    *((_QWORD *)__dst + 2) = unk_102313D00;
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  v41 = __dst + 24;
  if (byte_102313D07 < 0)
  {
    sub_100115CE4(v5, (void *)xmmword_102313CF0, *((unint64_t *)&xmmword_102313CF0 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_102313CF0;
    *((_QWORD *)__dst + 5) = unk_102313D00;
  }
  v6 = __dst;
  *((_OWORD *)__dst + 9) = 0u;
  v7 = __dst + 144;
  *((_QWORD *)v7 - 2) = 0;
  *((_OWORD *)v7 - 3) = 0u;
  *((_OWORD *)v7 - 2) = 0u;
  *((_OWORD *)v7 - 5) = 0u;
  *((_OWORD *)v7 - 4) = 0u;
  *((_OWORD *)v7 - 6) = 0u;
  *((_DWORD *)v7 - 2) = 1065353216;
  *((_OWORD *)v7 + 1) = 0u;
  *((_DWORD *)v7 + 8) = 1065353216;
  v42 = (uint64_t)v6;
  if (a2)
  {
    *((_QWORD *)v6 + 8) = a2;
    v8 = *(void **)(a2 + 280);
    if (v8 && objc_msgSend(v8, "emergencyContacts"))
    {
      *(_DWORD *)(v42 + 48) = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(v42 + 64) + 280), "emergencyContacts"), "count");
      v48 = 0;
      v49 = 0;
      v47 = 0;
      sub_1012D315C(*(_QWORD *)(v42 + 64), &v49, &v48, &v47);
      v9 = v48;
      if (v48)
      {
        v10 = objc_alloc_init((Class)NSMutableArray);
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
        if (v11)
        {
          v12 = *(_QWORD *)v44;
          do
          {
            for (i = 0; i != v11; i = (char *)i + 1)
            {
              if (*(_QWORD *)v44 != v12)
                objc_enumerationMutation(v9);
              v14 = (void *)IDSCopyIDForPhoneNumber(*(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i));
              if (v14)
              {
                objc_msgSend(v10, "addObject:", v14);
                sub_1015A2E04(__p, (char *)objc_msgSend(v14, "UTF8String"));
                v53[0] = (__int128 *)__p;
                *((_DWORD *)sub_1012D8958((uint64_t)(v7 - 40), (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, v53) + 10) = 0;
                if (v52 < 0)
                  operator delete(__p[0]);
                sub_1015A2E04(__p, (char *)objc_msgSend(v14, "UTF8String"));
                v53[0] = (__int128 *)__p;
                *((_DWORD *)sub_1012D8958((uint64_t)v7, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, v53) + 10) = 0;
                if (v52 < 0)
                  operator delete(__p[0]);

              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
          }
          while (v11);
        }
        *(_DWORD *)(v42 + 60) = objc_msgSend(v10, "count");
        if (objc_msgSend(v10, "count"))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v15 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v16 = *(_DWORD *)(v42 + 60);
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,Initiating IDS Query for %{public}u contacts", (uint8_t *)__p, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            v34 = *(_DWORD *)(v42 + 60);
            LODWORD(v53[0]) = 67240192;
            HIDWORD(v53[0]) = v34;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,EmergencyContactsMetric,Initiating IDS Query for %{public}u contacts", v53, 8, v41);
            v36 = (void **)v35;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v35);
            if (v36 != __p)
              free(v36);
          }
          *(_QWORD *)(v42 + 80) = -[CLEmergencyADRIDSBatchQueryDelegate initWithADRPointer:]([CLEmergencyADRIDSBatchQueryDelegate alloc], "initWithADRPointer:", *(_QWORD *)(v42 + 64));
          v17 = objc_alloc((Class)IDSBatchIDQueryController);
          v18 = *(_QWORD *)(v42 + 80);
          v19 = objc_msgSend(objc_msgSend(**(id **)(v42 + 64), "silo"), "queue");
          v20 = objc_msgSend(v17, "initWithService:delegate:queue:", IDSServiceNameiMessage, v18, v19);
          *(_QWORD *)(v42 + 88) = v20;
          objc_msgSend(v20, "setDestinations:", v10);
          v21 = objc_alloc((Class)IDSBatchIDQueryController);
          v22 = *(_QWORD *)(v42 + 80);
          v23 = objc_msgSend(objc_msgSend(**(id **)(v42 + 64), "silo"), "queue");
          v24 = objc_msgSend(v21, "initWithService:delegate:queue:", IDSServiceNameFaceTime, v22, v23);
          *(_QWORD *)(v42 + 96) = v24;
          objc_msgSend(v24, "setDestinations:", v10);
          sub_1012D78E0(v42);
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          v29 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,vaild IDS Formatted emergency contacts unavailable", (uint8_t *)__p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021AD148);
            LOWORD(v53[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,EmergencyContactsMetric,vaild IDS Formatted emergency contacts unavailable", v53, 2, v41);
            v40 = (void **)v39;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v39);
            if (v40 != __p)
              free(v40);
          }
          sub_1012D7498(v42);
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        v28 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,vaild emergency contacts unavailable", (uint8_t *)__p, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AD148);
          LOWORD(v53[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,EmergencyContactsMetric,vaild emergency contacts unavailable", v53, 2, v41);
          v38 = (void **)v37;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v37);
          if (v38 != __p)
            free(v38);
        }
        sub_1012D7498(v42);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,medicalID unavailable or emergency contacts within medicalID unavailable", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AD148);
        LOWORD(v53[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,EmergencyContactsMetric,medicalID unavailable or emergency contacts within medicalID unavailable", v53, 2, v41);
        v31 = (void **)v30;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v30);
        if (v31 != __p)
          free(v31);
      }
      *(_DWORD *)(v42 + 48) = 0;
      sub_1012D7498(v42);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v26 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#ADR,EmergencyContactsMetric,ADR pointer is null", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v53[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,EmergencyContactsMetric,ADR pointer is null", v53, 2, v41);
      v33 = (void **)v32;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v32);
      if (v33 != __p)
        free(v33);
    }
  }
  return v42;
}

void sub_1012D73FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  sub_1002A1C94(v46);
  sub_1002A1C94(v47);
  if (*(char *)(a12 + 47) < 0)
    operator delete(*a11);
  if (*(char *)(a12 + 23) < 0)
    operator delete(*(void **)a12);
  _Unwind_Resume(a1);
}

void sub_1012D7498(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void **v17;
  _QWORD block[5];
  __int128 *v19[2];
  void *__p[2];
  uint64_t v21;

  sub_1012D7D14(a1);
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(uint64_t **)(a1 + 120);
  if (v2)
  {
    while (1)
    {
      if (*((char *)v2 + 39) < 0)
      {
        sub_100115CE4(__p, (void *)v2[2], v2[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v2 + 1);
        v21 = v2[4];
      }
      if (*((_DWORD *)v2 + 10) == 1)
        break;
      v19[0] = (__int128 *)__p;
      if (*((_DWORD *)sub_100EF7E20(a1 + 144, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, v19) + 10) == 1)
        goto LABEL_8;
LABEL_9:
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_12;
    }
    ++*(_DWORD *)(a1 + 52);
LABEL_8:
    ++*(_DWORD *)(a1 + 56);
    goto LABEL_9;
  }
LABEL_12:
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    LODWORD(__p[0]) = 0;
    v4 = *(_QWORD *)(v3 + 192);
    if (!v4)
      sub_10025FD1C();
    v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 48))(v4, __p);
    v6 = -[NSString UTF8String](sub_100F7F650(*(unsigned int *)(v5 + 32)), "UTF8String");
    std::string::assign((std::string *)a1, v6);
    if (sub_1001DC538())
    {
      v7 = *(_QWORD *)(a1 + 64);
      LODWORD(__p[0]) = 1;
      v8 = *(_QWORD *)(v7 + 192);
      if (!v8)
        sub_10025FD1C();
      v9 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, __p);
      v10 = -[NSString UTF8String](sub_100F7F650(*(unsigned int *)(v9 + 32)), "UTF8String");
      std::string::assign((std::string *)(a1 + 24), v10);
    }
    v11 = objc_alloc_init((Class)NSMutableDictionary);
    v12 = a1;
    if (*(char *)(a1 + 23) < 0)
      v12 = *(_QWORD *)a1;
    objc_msgSend(v11, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12), CFSTR("simCountry1"));
    v13 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v13 = (_QWORD *)*v13;
    objc_msgSend(v11, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), CFSTR("simCountry2"));
    objc_msgSend(v11, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48)), CFSTR("numContacts"));
    objc_msgSend(v11, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60)), CFSTR("numValidContacts"));
    objc_msgSend(v11, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52)), CFSTR("numiMessageContacts"));
    objc_msgSend(v11, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56)), CFSTR("numAppleContacts"));
    AnalyticsSendEvent(CFSTR("com.apple.locationd.emergency_contacts"), v11);

    v14 = objc_msgSend(objc_msgSend(**(id **)(a1 + 64), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1012D8210;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async(v14, block);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ADR,submitIDSQueryCAStats,adr pointer is nil", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,submitIDSQueryCAStats,adr pointer is nil", v19, 2);
      v17 = (void **)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::submitIDSQueryCAStats()", "%s\n", v16);
      if (v17 != __p)
        free(v17);
    }
  }
}

void sub_1012D78BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012D78E0(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  char *v3;
  id v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  _QWORD v12[5];
  _BYTE v13[12];
  _OWORD buf[102];

  if (*(_QWORD *)(a1 + 72))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v1 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#ADR,createIDSQueryTimeout,timer already exists", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_WORD *)v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createIDSQueryTimeout,timer already exists", v13, 2);
      v3 = (char *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::createIDSQueryTimeout()", "%s\n", v2);
LABEL_27:
      if (v3 != (char *)buf)
        free(v3);
    }
  }
  else
  {
    v5 = objc_msgSend(objc_msgSend(**(id **)(a1 + 64), "silo"), "newTimer");
    *(_QWORD *)(a1 + 72) = v5;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1012D7F88;
    v12[3] = &unk_10212ECA0;
    v12[4] = a1;
    objc_msgSend(v5, "setHandler:", v12);
    sub_1001E4804(buf);
    *(_QWORD *)v13 = 0;
    if (sub_1001FD98C(*(uint64_t *)&buf[0], "IDSQueryTimeout", v13))
      v6 = *(double *)v13;
    else
      v6 = 300.0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    objc_msgSend(*(id *)(a1 + 72), "setNextFireDelay:", v6);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ADR,createIDSQueryTimeout,started timer for %{public}f", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      *(_DWORD *)v13 = 134349056;
      *(double *)&v13[4] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,createIDSQueryTimeout,started timer for %{public}f", v13, 12);
      v3 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::createIDSQueryTimeout()", "%s\n", v11);
      goto LABEL_27;
    }
  }
}

void sub_1012D7C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012D7C94(uint64_t a1)
{

  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;

  *(_QWORD *)(a1 + 80) = 0;
  sub_1012D7D14(a1);
  sub_1002A1C94(a1 + 144);
  sub_1002A1C94(a1 + 104);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1012D7D14(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  _QWORD v7[2];
  uint8_t buf[1640];

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 72) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ADR,clearIDSQueryTimeout,timer cleared", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,clearIDSQueryTimeout,timer cleared", v7, 2, v7[0]);
LABEL_19:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::clearIDSQueryTimeout()", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ADR,clearIDSQueryTimeout,no timer exists", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AD148);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,clearIDSQueryTimeout,no timer exists", v7, 2, v7[0]);
      goto LABEL_19;
    }
  }
}

void sub_1012D7F88(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AD148);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ADR,createIDSQueryTimeout,IDS query timer timed out", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AD148);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ADR,createIDSQueryTimeout,IDS query timer timed out", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::createIDSQueryTimeout()_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1012D7D14(v1);
  sub_1012D7498(v1);
}

uint64_t sub_1012D8128(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *__p[2];
  uint64_t v5;
  void **v6;

  v1 = *(uint64_t **)(a1 + 120);
  if (!v1)
    return 1;
  v2 = a1 + 144;
  while (1)
  {
    if (*((char *)v1 + 39) < 0)
    {
      sub_100115CE4(__p, (void *)v1[2], v1[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v1 + 1);
      v5 = v1[4];
    }
    if (!*((_DWORD *)v1 + 10))
      break;
    v6 = __p;
    if (!*((_DWORD *)sub_100EF7E20(v2, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v6) + 10))
      break;
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
    v1 = (uint64_t *)*v1;
    if (!v1)
      return 1;
  }
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1012D81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012D8210(uint64_t a1)
{
  return sub_1012C4654(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

void sub_1012D821C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1012D824C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1012D8274(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1012D82B4(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_10194C2B8();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_1012D8438(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_1012D8478(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1012D84A4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_1012D850C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_1012D850C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1012D0B48(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1012D8588(uint64_t a1)
{
  return sub_1012C484C(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1012D8598(uint64_t a1)
{
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1012D8708(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        *((_DWORD *)v8 + 4) = *((_DWORD *)v4 + 4);
        std::string::operator=((std::string *)v8 + 1, (const std::string *)v4 + 1);
        v10 = (void **)*v8;
        v11 = *((int *)v8 + 4);
        v8[1] = (void *)v11;
        v12 = (_QWORD *)sub_100394D84((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        sub_10012923C(a1, v8, v12);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_10012758C((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1012D8824(a1, (int *)v4 + 4);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1012D87F4(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_10012758C(v1, v2);
  __cxa_rethrow();
}

void sub_1012D8810(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1012D8824(_QWORD *a1, int *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD v8[3];

  sub_1012D88A0((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (_DWORD *)(v8[0] + 16);
  v4 = *(int *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  v6 = (_QWORD *)sub_100394D84((uint64_t)a1, v4, v5);
  sub_10012923C(a1, v3, v6);
  return v3;
}

void sub_1012D887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_10055A1C0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1012D88A0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  int v7;
  _BYTE *result;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = *a2;
  *((_DWORD *)v6 + 4) = *a2;
  result = v6 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    result = sub_100115CE4(result, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
    v7 = *((_DWORD *)v6 + 4);
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 2);
    *((_QWORD *)v6 + 5) = *((_QWORD *)a2 + 3);
  }
  *(_BYTE *)(a3 + 16) = 1;
  *((_QWORD *)v6 + 1) = v7;
  return result;
}

void sub_1012D893C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10055A1C0(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1012D8958(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_DWORD *)i + 10) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1012D8BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_1002A20A8(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1012D8BE0()
{
  sub_1015A2E04(&qword_102313BB8, "Success");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102313BB8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102313BD0, "NotSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102313BD0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102313BE8, "FailedToCreateCloakingKey");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102313BE8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102313C00, "NoPartnerCerts");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102313C00, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102313C18, "NoPhoneNumber");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102313C18, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102313C30, "FailedToSerialize");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102313C30, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102313C48, "FailedToEncrypt");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102313C48, (void *)&_mh_execute_header);
  sub_1015A2E04(byte_102313C60, "FailedInputValidation");
  __cxa_atexit((void (*)(void *))&std::string::~string, byte_102313C60, (void *)&_mh_execute_header);
  sub_1015A2E04(&stru_102313C78, "Timeout");
  __cxa_atexit((void (*)(void *))&std::string::~string, &stru_102313C78, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102313C90, "Failed");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102313C90, (void *)&_mh_execute_header);
  sub_1015A2E04(&stru_102313CA8, "Available");
  __cxa_atexit((void (*)(void *))&std::string::~string, &stru_102313CA8, (void *)&_mh_execute_header);
  sub_1015A2E04(&stru_102313CC0, "Unavailable");
  __cxa_atexit((void (*)(void *))&std::string::~string, &stru_102313CC0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102313CD8, "NotSet");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102313CD8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230DF90, "PreCachedAdrInfo");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230DF90, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230DFA8, "TimeOfLastClearFailure");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230DFA8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230DFC0, "PreCachedAdrClearFailureCount");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230DFC0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230DFD8, "TimeOfLastCacheFailure");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230DFD8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230DFF0, "PreCachedAdrSendFailureCount");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230DFF0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E008, "TimeOfLastCacheSuccess");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E008, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E020, "CloakingKey");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E020, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E038, "MedicalIdHash");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E038, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E050, "Sim1PhoneNumber");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E050, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E068, "Sim2PhoneNumber");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E068, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E080, "EmergencyContactNames");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E080, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102313CF0, "NotSet");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102313CF0, (void *)&_mh_execute_header);
}

uint64_t sub_1012D8FF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v39[3];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v10 = (std::__shared_weak_count *)a4[1];
  v44 = *a4;
  v45 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v42 = *a5;
  v43 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v40 = *a6;
  v41 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v39[0] = xmmword_10230E0A0;
  v39[1] = *(_OWORD *)algn_10230E0B0;
  v39[2] = xmmword_10230E0C0;
  sub_100D04860(a1, a2, 5, &v44, &v42, &v40, a8, a7, v39);
  v19 = v41;
  if (v41)
  {
    v20 = (unint64_t *)&v41->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v43;
  if (v43)
  {
    v23 = (unint64_t *)&v43->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v45;
  if (v45)
  {
    v26 = (unint64_t *)&v45->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_1021AD2B8;
  v28 = objc_alloc_init((Class)NSMutableDictionary);
  v29 = *a3;
  v30 = a3[1];
  *(_QWORD *)(a1 + 352) = v28;
  *(_QWORD *)(a1 + 360) = v29;
  *(_QWORD *)(a1 + 368) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v29 = *(_QWORD *)(a1 + 360);
  }
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 150;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0xFFFF;
  *(_QWORD *)(a1 + 420) = 0;
  *(_QWORD *)(a1 + 412) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 428) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 444) = _Q1;
  *(_OWORD *)(a1 + 460) = _Q1;
  *(_OWORD *)(a1 + 476) = _Q1;
  *(_DWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 524) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 532) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, a1 + 392) & 1) == 0)
    *(_DWORD *)(a1 + 392) = 150;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 24))(*(_QWORD *)(a1 + 360), a1);
  *(_QWORD *)(a1 + 376) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvester:", 5);
  return a1;
}

void sub_1012D9274(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100429668(v1);
  _Unwind_Resume(a1);
}

void sub_1012D92BC(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 400);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 400) = 0;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360));

}

uint64_t sub_1012D9304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v11);
  v4 = a1 + 280;
  v5 = *(_OWORD *)algn_10230E0B0;
  *(_OWORD *)v4 = xmmword_10230E0A0;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 25) = *(_OWORD *)&algn_10230E0B0[9];
  if (sub_100006BB4(a2, "App", v11))
    sub_1011E7A6C(v4, (uint64_t)v11);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_1011E7898((double *)v4, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = 5;
    v18 = 2081;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v11);
}

void sub_1012D9488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012D94A8(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 200))(*(_QWORD *)(a1 + 56)) ^ 1;
}

uint64_t sub_1012D94CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 40))(*(_QWORD *)(a1 + 360), 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 40))(*(_QWORD *)(a1 + 360), 9);
  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 1);
  return 1;
}

id sub_1012D9538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 428;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 48))(*(_QWORD *)(a1 + 360), 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 48))(*(_QWORD *)(a1 + 360), 9);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v4, 1);
  *(_DWORD *)(a1 + 408) = 0xFFFF;
  *(_QWORD *)(a1 + 420) = 0;
  *(_QWORD *)(a1 + 412) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v2 = xmmword_101BAFC90;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + 32) = _Q1;
  *(_OWORD *)(v2 + 48) = _Q1;
  *(_DWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 532) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  return objc_msgSend(*(id *)(a1 + 352), "removeAllObjects");
}

BOOL sub_1012D9608(uint64_t a1, uint64_t a2)
{
  double v3;
  NSObject *v5;
  _BOOL8 result;
  double v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;

  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  if (*(double *)(a2 + 20) >= 0.0 && v3 - *(double *)(a2 + 76) <= 900.0 && *(_DWORD *)(a2 + 132) == 1)
    return 1;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v5 = qword_1022A0208;
  result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
  if (result)
  {
    v7 = v3 - *(double *)(a2 + 76);
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2050;
    v12 = 5;
    v13 = 2049;
    v14 = v7;
    v15 = 1040;
    v16 = 4;
    v17 = 2097;
    v18 = a2 + 132;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid/stale location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"age_s\":\"%{private}.09f\", \"referenceFrame\":%{private, location:CLClientLocationReferenceFrame}.*P}", (uint8_t *)v8, 0x36u);
    return 0;
  }
  return result;
}

void sub_1012D9778(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[7];
  _QWORD v10[6];
  _QWORD v11[4];
  _QWORD v12[6];
  uint8_t buf[8];
  _BYTE v14[24];

  if (objc_msgSend(*(id *)(a1 + 352), "count"))
  {
    if (*(_QWORD *)(a1 + 400))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
      v2 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = 68289282;
        *(_WORD *)v14 = 2082;
        *(_QWORD *)&v14[2] = "";
        *(_WORD *)&v14[10] = 2050;
        *(_QWORD *)&v14[12] = 5;
        v3 = "{\"msg%{public}.0s\":\"Already have an appHarvestGroup, not harvesting\", \"subHarvester\":%{public, locati"
             "on:CLSubHarvesterIdentifier}lld}";
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, v3, buf, 0x1Cu);
      }
    }
    else if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)) & 1) != 0)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1) & 1) != 0)
      {
        if (sub_1012D9608(a1, a1 + 408))
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 64))(*(_QWORD *)(a1 + 360)) & 1) != 0)
          {
            v4 = dispatch_group_create();
            *(_QWORD *)(a1 + 400) = v4;
            *(_QWORD *)buf = 0;
            *(_QWORD *)v14 = buf;
            *(_QWORD *)&v14[8] = 0x2020000000;
            *(_QWORD *)&v14[16] = 0;
            dispatch_group_enter(v4);
            v5 = *(_QWORD *)(a1 + 360);
            v12[0] = _NSConcreteStackBlock;
            v12[1] = 3221225472;
            v12[2] = sub_1012D9CD4;
            v12[3] = &unk_102154A88;
            v12[4] = buf;
            v12[5] = a1;
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 72))(v5, a1 + 408, v12);
            v11[0] = 0;
            v11[1] = v11;
            v11[2] = 0x2020000000;
            v11[3] = -1;
            dispatch_group_enter(*(dispatch_group_t *)(a1 + 400));
            v6 = *(_QWORD *)(a1 + 360);
            v10[0] = _NSConcreteStackBlock;
            v10[1] = 3221225472;
            v10[2] = sub_1012D9E0C;
            v10[3] = &unk_102154A88;
            v10[4] = v11;
            v10[5] = a1;
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 80))(v6, a1 + 408, v10);
            v7 = *(NSObject **)(a1 + 400);
            v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1012D9F50;
            block[3] = &unk_1021AD3B8;
            block[4] = v11;
            block[5] = buf;
            block[6] = a1;
            dispatch_group_notify(v7, v8, block);
            _Block_object_dispose(v11, 8);
            _Block_object_dispose(buf, 8);
            return;
          }
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
          v2 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)buf = 68289282;
            *(_WORD *)v14 = 2082;
            *(_QWORD *)&v14[2] = "";
            *(_WORD *)&v14[10] = 2050;
            *(_QWORD *)&v14[12] = 5;
            v3 = "{\"msg%{public}.0s\":\"CLRoutineMonitor is not supported\", \"subHarvester\":%{public, location:CLSubHa"
                 "rvesterIdentifier}lld}";
            goto LABEL_32;
          }
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
          v2 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)buf = 68289282;
            *(_WORD *)v14 = 2082;
            *(_QWORD *)&v14[2] = "";
            *(_WORD *)&v14[10] = 2050;
            *(_QWORD *)&v14[12] = 5;
            v3 = "{\"msg%{public}.0s\":\"leeched postion is invalid or too old, not harvesting\", \"subHarvester\":%{publ"
                 "ic, location:CLSubHarvesterIdentifier}lld}";
            goto LABEL_32;
          }
        }
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
        v2 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)buf = 68289282;
          *(_WORD *)v14 = 2082;
          *(_QWORD *)&v14[2] = "";
          *(_WORD *)&v14[10] = 2050;
          *(_QWORD *)&v14[12] = 5;
          v3 = "{\"msg%{public}.0s\":\"App Genius not authorized, not harvesting\", \"subHarvester\":%{public, location:C"
               "LSubHarvesterIdentifier}lld}";
          goto LABEL_32;
        }
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
      v2 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = 68289282;
        *(_WORD *)v14 = 2082;
        *(_QWORD *)&v14[2] = "";
        *(_WORD *)&v14[10] = 2050;
        *(_QWORD *)&v14[12] = 5;
        v3 = "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLS"
             "ubHarvesterIdentifier}lld}";
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = 68289282;
      *(_WORD *)v14 = 2082;
      *(_QWORD *)&v14[2] = "";
      *(_WORD *)&v14[10] = 2050;
      *(_QWORD *)&v14[12] = 5;
      v3 = "{\"msg%{public}.0s\":\"Cache is empty, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      goto LABEL_32;
    }
  }
}

void sub_1012D9CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1012D9CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68290051;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2050;
    v10 = 5;
    v11 = 1040;
    v12 = 156;
    v13 = 2097;
    v14 = v4 + 408;
    v15 = 2049;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetchRoutineMode\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P, \"routineMode\":%{private, location:RTRoutineMode}lld}", (uint8_t *)v6, 0x36u);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(v4 + 400));
}

void sub_1012D9E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v7[0] = 68290051;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = 5;
    v12 = 1040;
    v13 = 156;
    v14 = 2097;
    v15 = v4 + 408;
    v16 = 2049;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetchRoutineLoiType\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P, \"loiType\":%{private, location:RTLocationOfInterestType}lld}", (uint8_t *)v7, 0x36u);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(v4 + 400));
}

void sub_1012D9F50(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 352);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1012D9FD4;
  v4[3] = &unk_1021AD390;
  v6 = v1;
  v5 = *(_OWORD *)(a1 + 32);
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
  objc_msgSend(*(id *)(v1 + 352), "removeAllObjects");
  v3 = *(NSObject **)(v1 + 400);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(v1 + 400) = 0;
  }
}

void sub_1012D9FD4(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  _OWORD v23[8];
  _OWORD v24[2];
  uint64_t buf;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;

  v5 = a1[6];
  objc_msgSend(a2, "doubleValue");
  v7 = v6;
  v8 = *(double *)(v5 + 484);
  if (vabdd_f64(v7, v8) <= 900.0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      if ((*(_DWORD *)(v5 + 392) & 0x80000000) == 0)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 160))(v5) >= (unint64_t)*(int *)(v5 + 392))
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
          v9 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
          {
            buf = 68289282;
            v26 = 2082;
            v27 = "";
            v28 = 2050;
            v29 = 5;
            v10 = "{\"msg%{public}.0s\":\"max apps exceeded, skipping\", \"subHarvester\":%{public, location:CLSubHarvest"
                  "erIdentifier}lld}";
            goto LABEL_27;
          }
          return;
        }
        v8 = *(double *)(v5 + 484);
      }
      objc_msgSend(a3, "setAge:", v7 - v8);
      objc_msgSend(a3, "setRoutineMode:", *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
      v11 = *(_QWORD *)(a1[4] + 8);
      if (*(_QWORD *)(v11 + 24) == 1)
      {
        v12 = 1;
      }
      else
      {
        *(_QWORD *)(v11 + 24) = -1;
        v12 = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
      }
      objc_msgSend(a3, "setLoiType:", v12);
      v13 = objc_alloc((Class)CLPLocation);
      v14 = *(_OWORD *)(v5 + 520);
      v23[6] = *(_OWORD *)(v5 + 504);
      v23[7] = v14;
      v24[0] = *(_OWORD *)(v5 + 536);
      *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(v5 + 548);
      v15 = *(_OWORD *)(v5 + 456);
      v23[2] = *(_OWORD *)(v5 + 440);
      v23[3] = v15;
      v16 = *(_OWORD *)(v5 + 488);
      v23[4] = *(_OWORD *)(v5 + 472);
      v23[5] = v16;
      v17 = *(_OWORD *)(v5 + 424);
      v23[0] = *(_OWORD *)(v5 + 408);
      v23[1] = v17;
      v18 = objc_msgSend(v13, "initWithDaemonLocation:", v23);
      objc_msgSend(a3, "setLocation:", v18);

      objc_msgSend(*(id *)(v5 + 376), "writeSecondaryObject:collectedAt:toField:", a3, objc_msgSend(a3, "location"), 2);
      ++*(_DWORD *)(v5 + 208);
      sub_100D05194(v5);
      if (objc_msgSend(a3, "appState") == 1)
        *(double *)(v5 + 568) = (*(double (**)(_QWORD))(**(_QWORD **)(v5 + 56) + 64))(*(_QWORD *)(v5 + 56));
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
      v19 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289539;
        v26 = 2082;
        v27 = "";
        v28 = 2050;
        v29 = 5;
        v30 = 2113;
        v31 = a3;
        v10 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld"
              ", \"harvestPoint\":%{private, location:escape_only}@}";
        v20 = v19;
        v21 = OS_LOG_TYPE_DEBUG;
        v22 = 38;
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v20, v21, v10, (uint8_t *)&buf, v22);
        return;
      }
      return;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289282;
      v26 = 2082;
      v27 = "";
      v28 = 2050;
      v29 = 5;
      v10 = "{\"msg%{public}.0s\":\"app-launch event too sensitive, skipping\", \"subHarvester\":%{public, location:CLSub"
            "HarvesterIdentifier}lld}";
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289282;
      v26 = 2082;
      v27 = "";
      v28 = 2050;
      v29 = 5;
      v10 = "{\"msg%{public}.0s\":\"pass event over too old, skipping\", \"subHarvester\":%{public, location:CLSubHarvest"
            "erIdentifier}lld}";
LABEL_27:
      v20 = v9;
      v21 = OS_LOG_TYPE_DEFAULT;
      v22 = 28;
      goto LABEL_28;
    }
  }
}

void sub_1012DA408(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  NSObject *v7;
  int v8;
  int *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int *v40;

  ++*(_DWORD *)(a1 + 204);
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)))
    return;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a4;
    if (*((char *)a4 + 31) >= 0)
      v9 = a4 + 2;
    else
      v9 = (int *)*((_QWORD *)a4 + 1);
    v29 = 68290051;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 5;
    v35 = 2049;
    *(_QWORD *)&v36 = a3;
    v37 = 1025;
    v38 = v8;
    v39 = 2081;
    v40 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onAppNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{private, location:CLAppMonitor_Type::Notification}lld, \"pid\":%{private}d, \"bundleId\":%{private, location:escape_only}s}", (uint8_t *)&v29, 0x36u);
  }
  v10 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  if (a3 == 7)
  {
    if (!*((_BYTE *)a4 + 104))
    {
      v21 = 0;
LABEL_32:
      v22 = objc_alloc_init((Class)CLPAppLocation);
      objc_msgSend(v22, "setAppState:", v21);
      v25 = *((_QWORD *)a4 + 1);
      v24 = a4 + 2;
      v23 = v25;
      if (*((char *)v24 + 23) >= 0)
        v26 = (uint64_t)v24;
      else
        v26 = v23;
      objc_msgSend(v22, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26));
      if ((unint64_t)objc_msgSend(*(id *)(a1 + 352), "count") >= 0x32)
        objc_msgSend(*(id *)(a1 + 352), "removeObjectForKey:", objc_msgSend(objc_msgSend(*(id *)(a1 + 352), "allKeys"), "firstObject"));
      objc_msgSend(*(id *)(a1 + 352), "setObject:forKey:", v22, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10));

      sub_1012D9778(a1);
      return;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return;
    v29 = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 5;
    v15 = "{\"msg%{public}.0s\":\"Ignoring placeholder notification for app download\", \"subHarvester\":%{public, locati"
          "on:CLSubHarvesterIdentifier}lld}";
LABEL_51:
    v16 = v18;
    v17 = 28;
    goto LABEL_52;
  }
  if (a3 != 9)
    return;
  v11 = *(double *)(a1 + 568);
  sub_100204BE4(a1 + 280);
  if (v10 - v11 >= v12)
  {
    v19 = a4 + 2;
    if (*((char *)a4 + 31) >= 0)
      v20 = (uint64_t)(a4 + 2);
    else
      v20 = *((_QWORD *)a4 + 1);
    if (sub_101147278((uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20)))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
      v18 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        return;
      v29 = 68289282;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2050;
      v34 = 5;
      v15 = "{\"msg%{public}.0s\":\"Ignoring plugin\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      goto LABEL_51;
    }
    if ((*(unsigned int (**)(_QWORD, int *))(**(_QWORD **)(a1 + 360) + 56))(*(_QWORD *)(a1 + 360), a4 + 2) == 2)
      goto LABEL_31;
    v27 = *((char *)a4 + 31);
    if (v27 < 0)
    {
      if (*((_QWORD *)a4 + 2) != 14)
      {
LABEL_47:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
        v18 = qword_1022A0208;
        if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          return;
        v29 = 68289282;
        v30 = 0;
        v31 = 2082;
        v32 = "";
        v33 = 2050;
        v34 = 5;
        v15 = "{\"msg%{public}.0s\":\"Ignoring apple app\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
        goto LABEL_51;
      }
      v19 = (_QWORD *)*v19;
    }
    else if (v27 != 14)
    {
      goto LABEL_47;
    }
    if (*v19 == 0x6C7070612E6D6F63 && *(_QWORD *)((char *)v19 + 6) == 0x7370614D2E656C70)
    {
LABEL_31:
      v21 = 1;
      goto LABEL_32;
    }
    goto LABEL_47;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v13 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v14 = v10 - *(double *)(a1 + 568);
    v29 = 68289539;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 5;
    v35 = 2049;
    v36 = v14;
    v15 = "{\"msg%{public}.0s\":\"Hasn't been long enough, ignoring\", \"subHarvester\":%{public, location:CLSubHarvester"
          "Identifier}lld, \"timeSinceLastHarvest_s\":\"%{private}.09f\"}";
    v16 = v13;
    v17 = 38;
LABEL_52:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v15, (uint8_t *)&v29, v17);
  }
}

void sub_1012DA934(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t buf;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  __int128 *v34;

  v6 = a4[7];
  v21 = a4[6];
  v22 = v6;
  v23[0] = a4[8];
  *(_OWORD *)((char *)v23 + 12) = *(__int128 *)((char *)a4 + 140);
  v7 = a4[3];
  v17 = a4[2];
  v18 = v7;
  v8 = a4[5];
  v19 = a4[4];
  v20 = v8;
  v9 = a4[1];
  v15 = *a4;
  v16 = v9;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
  v10 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    buf = 68290051;
    v25 = 2082;
    v26 = "";
    v27 = 2050;
    v28 = 5;
    v29 = 2049;
    v30 = a3;
    v31 = 1040;
    v32 = 156;
    v33 = 2097;
    v34 = &v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onLocationNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{private, location:CLLocationProvider_Type::Notification}lld, \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x36u);
  }
  if ((a3 == 5 || !a3) && (sub_1012DAAE8(a1, (uint64_t)&v15) & 1) == 0)
  {
    v11 = v22;
    *(_OWORD *)(a1 + 504) = v21;
    *(_OWORD *)(a1 + 520) = v11;
    *(_OWORD *)(a1 + 536) = v23[0];
    *(_OWORD *)(a1 + 548) = *(_OWORD *)((char *)v23 + 12);
    v12 = v18;
    *(_OWORD *)(a1 + 440) = v17;
    *(_OWORD *)(a1 + 456) = v12;
    v13 = v20;
    *(_OWORD *)(a1 + 472) = v19;
    *(_OWORD *)(a1 + 488) = v13;
    v14 = v16;
    *(_OWORD *)(a1 + 408) = v15;
    *(_OWORD *)(a1 + 424) = v14;
    sub_1012D9778(a1);
  }
}

uint64_t sub_1012DAAE8(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v12;
  double v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  _BYTE v26[20];
  _BYTE v27[10];
  __int16 v28;
  double v29;

  v3 = *(double *)(a2 + 20);
  if (v3 > 10000.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
    v4 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return 1;
    v5 = *(_QWORD *)(a2 + 4);
    v6 = *(_QWORD *)(a2 + 12);
    v7 = *(_QWORD *)(a2 + 20);
    v19 = 68290051;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2050;
    v24 = 5;
    v25 = 2049;
    *(_QWORD *)v26 = v5;
    *(_WORD *)&v26[8] = 2049;
    *(_QWORD *)&v26[10] = v6;
    *(_WORD *)&v26[18] = 2049;
    *(_QWORD *)v27 = v7;
    v8 = "{\"msg%{public}.0s\":\"ignoring since accuracy is too large\", \"subHarvester\":%{public, location:CLSubHarvest"
         "erIdentifier}lld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"horizontalAccuracy\":\"%{private}f\"}";
    v9 = v4;
    v10 = 58;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v19, v10);
    return 1;
  }
  v12 = a1 + 428;
  v13 = *(double *)(a1 + 428);
  v14 = v3 * 0.5;
  v15 = v13 < 0.0 || v13 > v14;
  if (!v15
    && (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) - *(double *)(a1 + 484) < 630.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AD3F0);
    v16 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return 1;
    v17 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(v12 + 56);
    v19 = 68290563;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2050;
    v24 = 5;
    v25 = 1040;
    *(_DWORD *)v26 = 156;
    *(_WORD *)&v26[4] = 2097;
    *(_QWORD *)&v26[6] = a2;
    *(_WORD *)&v26[14] = 1040;
    *(_DWORD *)&v26[16] = 156;
    *(_WORD *)v27 = 2097;
    *(_QWORD *)&v27[2] = a1 + 408;
    v28 = 2049;
    v29 = v17;
    v8 = "{\"msg%{public}.0s\":\"ignoring location, previous was more accurate and fresh enough\", \"subHarvester\":%{pub"
         "lic, location:CLSubHarvesterIdentifier}lld, \"newLocation\":%{private, location:CLClientLocation}.*P, \"oldLoca"
         "tion\":%{private, location:CLClientLocation}.*P, \"timeSinceLastLocation_s\":\"%{private}.09f\"}";
    v9 = v16;
    v10 = 70;
    goto LABEL_15;
  }
  return 0;
}

id sub_1012DAD5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 376), "count");
}

id sub_1012DAD64(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 376), "pruneSecondaryDataOlderThan:", v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1));
}

id sub_1012DADB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 5);
}

id sub_1012DADC0(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id result;
  void *v16;
  id v17;
  id v18;
  void *v19;
  _QWORD v20[7];
  _QWORD v21[7];
  _QWORD v22[7];

  v2 = objc_msgSend(*(id *)(a1 + 376), "homeArchive");
  if (objc_msgSend(v2, "count"))
  {
    v3 = objc_msgSend(v2, "mappedSecondaryData");
    if (v3)
    {
      v4 = v3;
      v5 = objc_alloc_init((Class)CLPAppCollectionRequest);
      objc_msgSend(v5, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
      v6 = sub_100887630(v4);
      v7 = *(void **)(a1 + 384);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1012DAFB4;
      v22[3] = &unk_10217B1F8;
      v22[5] = v2;
      v22[6] = a1;
      v22[4] = v5;
      objc_msgSend(v7, "signData:withCompletion:", v6, v22);
    }
  }
  v8 = objc_msgSend(*(id *)(a1 + 376), "workArchive");
  if (objc_msgSend(v8, "count"))
  {
    v9 = objc_msgSend(v8, "mappedSecondaryData");
    if (v9)
    {
      v10 = v9;
      v11 = objc_alloc_init((Class)CLPAppCollectionRequest);
      objc_msgSend(v11, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
      v12 = sub_100887630(v10);
      v13 = *(void **)(a1 + 384);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1012DB038;
      v21[3] = &unk_10217B1F8;
      v21[5] = v8;
      v21[6] = a1;
      v21[4] = v11;
      objc_msgSend(v13, "signData:withCompletion:", v12, v21);
    }
  }
  v14 = objc_msgSend(*(id *)(a1 + 376), "mainArchive");
  result = objc_msgSend(v14, "count");
  if (result)
  {
    result = objc_msgSend(v14, "mappedSecondaryData");
    if (result)
    {
      v16 = result;
      v17 = objc_alloc_init((Class)CLPAppCollectionRequest);
      objc_msgSend(v17, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
      v18 = sub_100887630(v16);
      v19 = *(void **)(a1 + 384);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1012DB0BC;
      v20[3] = &unk_10217B1F8;
      v20[5] = v14;
      v20[6] = a1;
      v20[4] = v17;
      return objc_msgSend(v19, "signData:withCompletion:", v18, v20);
    }
  }
  return result;
}

void sub_1012DAFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLHUploadRequest *v4;

  v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "setSignature:", a2);
  objc_msgSend(*(id *)(a1 + 40), "overwritePrimaryObject:", *(_QWORD *)(a1 + 32));

  v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 40));
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "appEndpoint"));
  objc_msgSend(*(id *)(v3 + 80), "submitRequest:", v4);

}

void sub_1012DB038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLHUploadRequest *v4;

  v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "setSignature:", a2);
  objc_msgSend(*(id *)(a1 + 40), "overwritePrimaryObject:", *(_QWORD *)(a1 + 32));

  v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 40));
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "appEndpoint"));
  objc_msgSend(*(id *)(v3 + 80), "submitRequest:", v4);

}

void sub_1012DB0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLHUploadRequest *v4;

  v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "setSignature:", a2);
  objc_msgSend(*(id *)(a1 + 40), "overwritePrimaryObject:", *(_QWORD *)(a1 + 32));

  v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 40));
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "appEndpoint"));
  objc_msgSend(*(id *)(v3 + 80), "submitRequest:", v4);

}

uint64_t sub_1012DB140(uint64_t a1)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0)
    return 1;
  else
    return ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) >> 3) & 1;
}

uint64_t sub_1012DB18C(_QWORD *a1)
{
  *a1 = off_1021AD2B8;
  sub_100261F44((uint64_t)(a1 + 45));
  return sub_100429668((uint64_t)a1);
}

void sub_1012DB1C0(_QWORD *a1)
{
  *a1 = off_1021AD2B8;
  sub_100261F44((uint64_t)(a1 + 45));
  sub_100429668((uint64_t)a1);
  operator delete();
}

void sub_1012DB208(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1012DB234()
{
  return sub_1011E780C((uint64_t)&xmmword_10230E0A0, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_1012DB270(_QWORD *a1)
{
  *a1 = off_1021AD420;
  operator new();
}

void sub_1012DB388()
{
  operator delete();
}

_QWORD *sub_1012DB400(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021AD420;
  v2 = (uint64_t)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 7));
  sub_100261F44((uint64_t)(a1 + 5));
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v2);
  return a1;
}

void sub_1012DB450(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021AD420;
  v2 = (uint64_t)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 7));
  sub_100261F44((uint64_t)(a1 + 5));
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v2);
  operator delete();
}

void sub_1012DB4B0(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1012DB508(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012DB528(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1012DB540(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1012DB580(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1012DB5D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012DB5F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1012DB610(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1012DB650(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1021AD568;
  a1[1] = a2;
  a1[2] = 0;
  sub_100E4F1B4(a1 + 3, "Traffic", a2);
  return a1;
}

void sub_1012DB694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012DB6BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

id sub_1012DB6DC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2, 0);
}

id sub_1012DB6F0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

void sub_1012DB700()
{
  sub_100E4F1B8();
}

void sub_1012DB780(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLPolicyProactiveExternal::onProactiveHarvestingProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AD600);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPolicyProactiveExternal::onProactiveHarvestingProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AD600);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPolicyProactiveExternal::onProactiveHarvestingProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_1010811B8(*(_QWORD *)(a4 + 216), a1, *a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1012DB948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012DB968(uint64_t a1)
{
  return sub_100BCF098(a1 + 24);
}

uint64_t sub_1012DB970(uint64_t a1, BOOL *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E48E4(v8, (uint64_t)CFSTR("ProactiveHarvesting"), a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1012DB9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DBA08(uint64_t a1, BOOL *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E48E4(v8, (uint64_t)CFSTR("ProactiveHarvestingIntervalBypass"), a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1012DBA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DBAA0(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_1001FD94C();
  return sub_1001FD9FC(v3, (uint64_t)CFSTR("LastProactiveTime"), a2);
}

BOOL sub_1012DBAD0(double a1)
{
  uint64_t v1;
  double v3;

  v3 = a1;
  v1 = sub_1001FD94C();
  return sub_10018A534(v1, CFSTR("LastProactiveTime"), &v3);
}

BOOL sub_1012DBB00(uint64_t a1, _QWORD *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = objc_msgSend(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"), "defaultForKey:defaultValue:", CFSTR("CLProactiveBatteryLevel"), 0);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "doubleValue");
    *a2 = v5;
  }
  return v4 != 0;
}

double sub_1012DBB54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double result;
  __int128 v10;
  id v11;

  v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  objc_msgSend(v11, "setHandler:", a2);
  objc_msgSend(v11, "setNextFireTime:interval:", a4, a5);
  sub_1012DBCA8(&v11, &v10);
  result = *(double *)&v10;
  *a3 = v10;
  return result;
}

_QWORD *sub_1012DBBDC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021AD568;
  sub_100BCD638((uint64_t)(a1 + 3));
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1012DBC24(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021AD568;
  sub_100BCD638((uint64_t)(a1 + 3));
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete();
}

void sub_1012DBC7C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

_QWORD *sub_1012DBCA8@<X0>(void **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1012DBD00(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012DBCEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012DBD00(_QWORD *a1, void **a2)
{
  void *v3;

  *a1 = off_1021AD630;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  a1[3] = off_1021AD680;
  a1[4] = v3;
  return a1;
}

void sub_1012DBD50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012DBD64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AD630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012DBD78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AD630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1012DBDAC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1012DBDBC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "invalidate");

  *(_QWORD *)(a1 + 8) = 0;
}

char *sub_1012DBDEC(char *__dst, uint64_t a2, __int16 a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a4 + 2);
    *(_OWORD *)__dst = v7;
  }
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(__dst + 84) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(__dst + 72) = v10;
  *(_OWORD *)(__dst + 56) = v9;
  *(_OWORD *)(__dst + 40) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 24);
  v11 = *(float *)(a2 + 28);
  v12 = *(float *)(a2 + 32);
  *((_QWORD *)__dst + 14) = 0;
  v13 = *((float *)__dst + 7);
  v14 = *((float *)__dst + 8) * -10.0;
  v15 = log10f(*(float *)&v8 / v13);
  v16 = *((float *)__dst + 6);
  *((float *)__dst + 25) = v16 + (float)(v14 * v15);
  *((float *)__dst + 26) = v16 + (float)(v14 * log10f(v11 / v13));
  *((float *)__dst + 27) = v16 + (float)(v14 * log10f(v12 / v13));
  *((_QWORD *)__dst + 15) = 0;
  *((_QWORD *)__dst + 16) = 0;
  *((_QWORD *)__dst + 17) = 0xBFF0000000000000;
  *((CFAbsoluteTime *)__dst + 18) = CFAbsoluteTimeGetCurrent();
  *((_DWORD *)__dst + 38) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(__dst + 156) = _D0;
  *((_WORD *)__dst + 82) = 0;
  *((_QWORD *)__dst + 21) = 0;
  sub_100E60BC8((uint64_t)(__dst + 176));
  *((_WORD *)__dst + 132) = a3;
  sub_10055D44C(__dst + 272, "CLBTLERSSIRangeCalculator-Mutex", 0, 1);
  return __dst;
}

void sub_1012DBF20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  sub_100E60C0C(v2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DBF60(uint64_t a1, int a2, __int16 a3, double a4)
{
  uint64_t v8;
  __int16 v9;
  int v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;

  v8 = a1 + 272;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 272) + 16))(a1 + 272);
  v9 = a2 - 126;
  if (a2 <= 126)
  {
    if (a2 <= 0)
      v9 = a2;
    v10 = (__int16)(*(_WORD *)(a1 + 264) + v9);
    if (v10 > *(__int16 *)(a1 + 36))
    {
      v11 = *(_QWORD *)(a1 + 128);
      v12 = *(double **)(a1 + 120);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *(double **)(a1 + 112);
        v15 = ((char *)v12 - (char *)v14) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          sub_100259694();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_10028E224(a1 + 128, v18);
          v14 = *(double **)(a1 + 112);
          v12 = *(double **)(a1 + 120);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[16 * v15];
        *(double *)v20 = a4;
        v21 = &v19[16 * v18];
        *((_WORD *)v20 + 4) = v10;
        *((_WORD *)v20 + 5) = a3;
        v13 = (double *)(v20 + 16);
        if (v12 != v14)
        {
          do
          {
            v22 = *((_QWORD *)v12 - 2);
            v12 -= 2;
            v23 = *((_DWORD *)v12 + 2);
            *((_QWORD *)v20 - 2) = v22;
            v20 -= 16;
            *((_DWORD *)v20 + 2) = v23;
          }
          while (v12 != v14);
          v14 = *(double **)(a1 + 112);
        }
        *(_QWORD *)(a1 + 112) = v20;
        *(_QWORD *)(a1 + 120) = v13;
        *(_QWORD *)(a1 + 128) = v21;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = a4;
        *((_WORD *)v12 + 4) = v10;
        v13 = v12 + 2;
        *((_WORD *)v12 + 5) = a3;
      }
      *(_QWORD *)(a1 + 120) = v13;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

void sub_1012DC0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DC0F4(uint64_t a1, unsigned int *a2, int *a3, uint64_t *a4, unsigned __int16 *a5, unsigned __int16 *a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 *v14;
  __int16 *v15;
  int64_t v16;
  char v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  char v29;
  float v30;
  char *v31;
  uint64_t v32;
  signed int v33;
  signed int v34;
  int v35;
  __int16 *v36;
  float v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  int v43;
  int v44;
  int v45;
  int v46;
  __int16 v47;
  float v48;
  int v49;
  int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  void *v59;
  id v60;
  uint64_t *v61;
  uint64_t i;
  NSObject *v63;
  id v64;
  uint64_t v66;
  unsigned int v67;
  double v68;
  double v69;
  double v70;
  float v71;
  double v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  _BYTE *v88;
  __int16 v89;
  unint64_t v90;
  _BYTE *v91;
  unint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  unint64_t v95;
  size_t v96;
  char *v97;
  char *v98;
  _BYTE *v99;
  _BYTE *v100;
  char v101;
  uint64_t v102;
  id v103;
  const char *v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  _BOOL8 v114;
  char *__p;
  char *v116;
  char *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  pthread_mutex_t *v123;
  __int16 v124;
  int v125;
  id v126;
  uint8_t buf[4];
  id v128;

  v122 = a1 + 272;
  (*(void (**)(void))(*(_QWORD *)(a1 + 272) + 16))();
  v124 = 256;
  v120 = 0;
  v121 = -1.0;
  v11 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  v118 = 0;
  v119 = 0;
  __p = 0;
  v116 = 0;
  v117 = 0;
  v13 = *(__int16 *)(a1 + 38) - (uint64_t)*(__int16 *)(a1 + 36) + 1;
  *(_WORD *)buf = 0;
  sub_1012DCE44((uint64_t)&v118, v13, buf);
  if (v11 == v12 || (v15 = *(__int16 **)(a1 + 112), v14 = *(__int16 **)(a1 + 120), v15 == v14))
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v30 = 0.0;
LABEL_63:
    v51 = 0.0;
    v54 = 0.0;
    v52 = 0.0;
    goto LABEL_64;
  }
  do
  {
    if (a7 - *(double *)v15 <= *(float *)(a1 + 60))
    {
      v18 = v15[4];
      if (v18 <= *(__int16 *)(a1 + 38) && v18 >= *(__int16 *)(a1 + 36))
      {
        ++*((_WORD *)v118 + v15[4] - (uint64_t)*(__int16 *)(a1 + 36));
        v19 = v116;
        if (v116 >= v117)
        {
          v21 = __p;
          v22 = v116 - __p;
          if (v116 - __p <= -3)
            sub_100259694();
          v23 = v22 >> 1;
          if (v117 - __p <= (unint64_t)((v22 >> 1) + 1))
            v24 = v23 + 1;
          else
            v24 = v117 - __p;
          if ((unint64_t)(v117 - __p) >= 0x7FFFFFFFFFFFFFFELL)
            v25 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v26 = (char *)sub_100BFCCD8((uint64_t)&v117, v25);
            v21 = __p;
            v19 = v116;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[2 * v23];
          *(_WORD *)v27 = v15[4];
          v20 = v27 + 2;
          while (v19 != v21)
          {
            v28 = *((_WORD *)v19 - 1);
            v19 -= 2;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          __p = v27;
          v117 = &v26[2 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_WORD *)v116 = v15[4];
          v20 = v116 + 2;
        }
        v116 = v20;
        v14 = *(__int16 **)(a1 + 120);
        v17 = 1;
      }
      else
      {
        v17 = 0;
      }
      v15 += 8;
    }
    else
    {
      v16 = (char *)v14 - (char *)(v15 + 8);
      if (v14 != v15 + 8)
        memmove(v15, v15 + 8, v16 - 4);
      v14 = (__int16 *)((char *)v15 + v16);
      *(_QWORD *)(a1 + 120) = (char *)v15 + v16;
      v17 = 1;
    }
  }
  while (v15 != v14 && (v17 & 1) != 0);
  v29 = v17 ^ 1;
  v30 = 0.0;
  if (__p == v116)
    v29 = 1;
  if ((v29 & 1) != 0)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    goto LABEL_63;
  }
  std::__sort<std::__less<short,short> &,short *>();
  v31 = __p;
  v32 = (v116 - __p) >> 1;
  v33 = vcvtpd_s64_f64((double)(unint64_t)v32 * 0.1);
  v34 = vcvtpd_s64_f64((double)(unint64_t)v32 * 0.4);
  v35 = v32 - (v34 + v33);
  if (v35 < 1)
  {
    v37 = 0.0;
    while (v31 != v116)
    {
      v43 = *(__int16 *)v31;
      v31 += 2;
      v37 = v37 + (float)v43;
    }
    v42 = (float)(unint64_t)v32;
  }
  else
  {
    v36 = (__int16 *)&__p[2 * v34];
    v37 = 0.0;
    while (v36 != (__int16 *)&v116[-2 * v33])
    {
      v38 = *v36++;
      v37 = v37 + (float)v38;
    }
    v42 = (float)v35;
  }
  v44 = (int)(float)(v37 / v42);
  v121 = __exp10((float)((float)v44 - *(float *)(a1 + 24)) / -18.0);
  v121 = sub_100E60C10(a1 + 176, &v121, a2, a7);
  v45 = *(__int16 *)(a1 + 36);
  v46 = *(__int16 *)(a1 + 38) - v45;
  if (v46 < 0)
  {
    v41 = 0;
    v40 = 0;
    v39 = 0;
  }
  else
  {
    v47 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    do
    {
      v48 = (float)v47 + (float)(__int16)v45;
      if (v48 >= *(float *)(a1 + 108))
      {
        if (v48 >= *(float *)(a1 + 104))
        {
          v49 = *((__int16 *)v118 + v47);
          if (v48 >= *(float *)(a1 + 100))
            v39 = (v39 + v49);
          else
            v40 = (v40 + v49);
        }
        else
        {
          v41 = (v41 + *((__int16 *)v118 + v47));
        }
      }
      ++v47;
    }
    while (v46 >= v47);
  }
  v50 = v40 + v41 + v39;
  if (!v50)
    goto LABEL_63;
  v30 = (float)(int)v39 / (float)v50;
  v51 = (float)(int)v40 / (float)v50;
  v52 = (float)(int)v41 / (float)v50;
  v53 = *(float *)(a1 + 40);
  v54 = 0.0 / (float)v50;
  if (v52 > v53 || v30 > v53 || v51 > v53 || v54 > v53)
  {
    if (v51 <= v53)
      v66 = v30 > v53;
    else
      v66 = 2;
    v114 = v66;
    if (v52 > v53)
    {
      v56 = 3;
      goto LABEL_93;
    }
    goto LABEL_94;
  }
  v55 = *(float *)(a1 + 44);
  v114 = (float)(v30 + v51) > v55;
  if ((float)(v51 + v52) <= v55)
  {
LABEL_94:
    if (v114)
      goto LABEL_95;
LABEL_64:
    v114 = 0;
    v57 = 0;
    *a3 = 0;
    *((_QWORD *)a3 + 1) = 0xBFF0000000000000;
    *((_WORD *)a3 + 8) = 0;
    v58 = 0.0;
    goto LABEL_65;
  }
  v56 = 2;
LABEL_93:
  v114 = v56;
LABEL_95:
  v67 = *a2;
  if (*a2 - 1 < 2 || v67 == 7 || v67 == 3 && !a2[1])
  {
    v68 = a7 - *(double *)(a1 + 144);
    v69 = *(float *)(a1 + 76);
    v58 = 1.0;
    if (v68 > v69)
    {
      v58 = exp(-(v68 - v69) / *(float *)(a1 + 80));
      if (*(float *)(a1 + 84) > v58)
        v58 = *(float *)(a1 + 84);
    }
  }
  else
  {
    *(double *)(a1 + 144) = a7;
    v58 = 1.0;
  }
  v70 = *(double *)(a1 + 136);
  *(double *)(a1 + 136) = a7;
  v71 = (float)v114;
  if (v114 || (v72 = a7 - v70, a7 - v70 > *(float *)(a1 + 88)))
  {
    *(double *)(a1 + 144) = a7;
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a1 + 64);
    *(float *)(a1 + 160) = v71;
    v75 = (float)v114;
  }
  else
  {
    v73 = *(float *)(a1 + 156);
    v74 = v73 / (float)(v73 + *(float *)(a1 + 72));
    v75 = *(float *)(a1 + 160) + (float)(v74 * (float)(v71 - *(float *)(a1 + 160)));
    v76 = (float)(v73 * (float)(1.0 - v74)) + v72 * v72 * *(float *)(a1 + 68) * 0.5 * (v58 * v58);
    *(float *)(a1 + 156) = v76;
    *(float *)(a1 + 160) = v75;
  }
  if (v75 >= 1.0 && v75 <= 3.0)
  {
    v77 = llroundf(v75);
    v78 = v77 - v114;
    if (v77 - v114 < 0)
      v78 = v114 - v77;
    if (v78 <= *(_DWORD *)(a1 + 96))
    {
      *(_DWORD *)(a1 + 152) = 0;
    }
    else
    {
      v79 = *(_DWORD *)(a1 + 152);
      *(_DWORD *)(a1 + 152) = v79 + 1;
      if (v79 >= *(_DWORD *)(a1 + 92))
      {
        *(double *)(a1 + 144) = a7;
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(a1 + 64);
        *(float *)(a1 + 160) = v71;
      }
    }
    if (*(_BYTE *)(a1 + 164))
    {
      if (v77 == 1)
      {
        *(_DWORD *)(a1 + 168) = 0;
        v80 = 1;
        goto LABEL_127;
      }
      if (v77 < 2 || (v81 = *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 168) = v81 + 1, v81 < 1))
      {
        v80 = 1;
        v77 = 1;
        goto LABEL_127;
      }
      v80 = 0;
      *(_BYTE *)(a1 + 164) = 0;
    }
    else
    {
      if (v77 != 1)
      {
        v80 = 0;
        goto LABEL_127;
      }
      v80 = 1;
      *(_WORD *)(a1 + 164) = 1;
      *(_DWORD *)(a1 + 172) = 0;
    }
    *(_DWORD *)(a1 + 168) = 0;
    goto LABEL_127;
  }
  *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
  *(double *)(a1 + 144) = a7;
  v80 = *(unsigned __int8 *)(a1 + 164);
  v77 = v80;
LABEL_127:
  v109 = v39;
  v110 = a2;
  if (!*(_BYTE *)(a1 + 165) || v80)
  {
    if (v77 != 2)
      goto LABEL_140;
    *(_BYTE *)(a1 + 165) = 1;
    v82 = (_DWORD *)(a1 + 172);
    v77 = 2;
  }
  else
  {
    v82 = (_DWORD *)(a1 + 172);
    if (v77 != 2)
    {
      v83 = (*v82)++;
      v84 = v83 > 0 && v58 == 1.0;
      if (!v84 && v83 < 2)
      {
        v77 = 2;
        goto LABEL_140;
      }
      *(_BYTE *)(a1 + 165) = 0;
    }
  }
  *v82 = 0;
LABEL_140:
  *a3 = v77;
  *((double *)a3 + 1) = v121;
  *((_WORD *)a3 + 8) = v44;
  v86 = *(_QWORD *)(a1 + 112);
  v85 = *(_QWORD *)(a1 + 120);
  if (v86 == v85)
  {
    v57 = 1;
    v39 = v109;
    a2 = v110;
  }
  else
  {
    v107 = v40;
    v108 = v41;
    v87 = (unint64_t *)(a3 + 6);
    v88 = (_BYTE *)*((_QWORD *)a3 + 4);
    do
    {
      v89 = *(_WORD *)(v86 + 8);
      v90 = *((_QWORD *)a3 + 5);
      if ((unint64_t)v88 >= v90)
      {
        v92 = *v87;
        v93 = &v88[-*v87];
        v94 = (unint64_t)(v93 + 1);
        if ((uint64_t)(v93 + 1) < 0)
          sub_100259694();
        v95 = v90 - v92;
        if (2 * v95 > v94)
          v94 = 2 * v95;
        if (v95 >= 0x3FFFFFFFFFFFFFFFLL)
          v96 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v96 = v94;
        if (v96)
          v97 = (char *)operator new(v96);
        else
          v97 = 0;
        v98 = &v93[(_QWORD)v97];
        v99 = &v93[(_QWORD)v97];
        *v99 = v89;
        v91 = v99 + 1;
        if (v88 != (_BYTE *)v92)
        {
          v100 = &v88[~v92];
          do
          {
            v101 = *--v88;
            (v100--)[(_QWORD)v97] = v101;
          }
          while (v88 != (_BYTE *)v92);
          v88 = (_BYTE *)*v87;
          v98 = v97;
        }
        *((_QWORD *)a3 + 3) = v98;
        *((_QWORD *)a3 + 4) = v91;
        *((_QWORD *)a3 + 5) = &v97[v96];
        if (v88)
          operator delete(v88);
      }
      else
      {
        *v88 = v89;
        v91 = v88 + 1;
      }
      *((_QWORD *)a3 + 4) = v91;
      v86 += 16;
      v88 = v91;
    }
    while (v86 != v85);
    v57 = 1;
    v39 = v109;
    a2 = v110;
    v40 = v107;
    v41 = v108;
  }
LABEL_65:
  if (qword_10230E0D0 != -1)
    dispatch_once(&qword_10230E0D0, &stru_1021AD6C8);
  if (byte_1022FE6D8)
  {
    v59 = objc_autoreleasePoolPush();
    v60 = +[NSMutableString string](NSMutableString, "string");
    objc_msgSend(v60, "appendFormat:", CFSTR("time,%f,"), *(_QWORD *)&a7);
    if (*((char *)a4 + 23) >= 0)
      v61 = a4;
    else
      v61 = (uint64_t *)*a4;
    objc_msgSend(v60, "appendFormat:", CFSTR("uuid,%s,"), v61);
    objc_msgSend(v60, "appendFormat:", CFSTR("major,%hd,"), *a5);
    objc_msgSend(v60, "appendFormat:", CFSTR("major,%hd,"), *a6);
    objc_msgSend(v60, "appendFormat:", CFSTR("observable,%d,"), v114);
    objc_msgSend(v60, "appendFormat:", CFSTR("range,%d,"), *a3);
    objc_msgSend(v60, "appendFormat:", CFSTR("unc,%f,"), *((_QWORD *)a3 + 1));
    objc_msgSend(v60, "appendFormat:", CFSTR("filteredRSSI,%d,"), *((__int16 *)a3 + 8));
    objc_msgSend(v60, "appendFormat:", CFSTR("activity,%d,"), *a2);
    objc_msgSend(v60, "appendFormat:", CFSTR("confidence,%d,"), a2[1]);
    objc_msgSend(v60, "appendFormat:", CFSTR("activityFactor,%f,"), v58);
    objc_msgSend(v60, "appendFormat:", CFSTR("fFilterPk_pre,%f,"), *(float *)(a1 + 156));
    objc_msgSend(v60, "appendFormat:", CFSTR("tx,%f,"), *(float *)(a1 + 24));
    objc_msgSend(v60, "appendFormat:", CFSTR("cntImmediate,%d,"), v39);
    objc_msgSend(v60, "appendFormat:", CFSTR("cntNear,%d,"), v40);
    objc_msgSend(v60, "appendFormat:", CFSTR("cntMid,%d,"), 0);
    objc_msgSend(v60, "appendFormat:", CFSTR("cntFar,%d,"), v41);
    objc_msgSend(v60, "appendFormat:", CFSTR("pImmediate,%f,"), v30);
    objc_msgSend(v60, "appendFormat:", CFSTR("pNear,%f,"), v51);
    objc_msgSend(v60, "appendFormat:", CFSTR("pMid,%f,"), v54);
    objc_msgSend(v60, "appendFormat:", CFSTR("pFar,%f,"), v52);
    objc_msgSend(v60, "appendFormat:", CFSTR("number rssi,%lu,"), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 4);
    objc_msgSend(v60, "appendString:", CFSTR("rssi,"));
    for (i = *(_QWORD *)(a1 + 112); i != *(_QWORD *)(a1 + 120); i += 16)
      objc_msgSend(v60, "appendFormat:", CFSTR("%f,%d,%d,"), *(_QWORD *)i, *(__int16 *)(i + 8), *(__int16 *)(i + 10));
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD6E8);
    v63 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v64 = objc_msgSend(v60, "UTF8String");
      *(_DWORD *)buf = 136380675;
      v128 = v64;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "iB: %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021AD6E8);
      v102 = qword_1022A0038;
      v103 = objc_msgSend(v60, "UTF8String");
      v125 = 136380675;
      v126 = v103;
      LODWORD(v106) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v102, 2, "iB: %{private}s", &v125, v106);
      v105 = (uint8_t *)v104;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)", "%s\n", v104);
      if (v105 != buf)
        free(v105);
    }
    objc_autoreleasePoolPop(v59);
  }
  if (__p)
    operator delete(__p);
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (HIBYTE(v124))
  {
    if ((_BYTE)v124)
      pthread_mutex_unlock(v123);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122);
  }
  return v57;
}

void sub_1012DCDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  sub_10187E514((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1012DCE44(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1012DD1F8((void **)a1, a2 - v3, a3);
  }
}

void sub_1012DCE74(id a1)
{
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  sub_1001E4804(buf);
  v1 = sub_1001E4874(*(uint64_t *)buf, "VerboseRangeLoggingEnabled", (BOOL *)&byte_1022FE6D8);
  v2 = v1;
  v3 = v11;
  if (!v11)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2)
      return;
  }
  else
  {
LABEL_5:
    if (!v1)
      return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD6E8);
  v6 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = byte_1022FE6D8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Overriding VerboseRangeLoggingEnabled,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD6E8);
    v9[0] = 67174657;
    v9[1] = byte_1022FE6D8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "#Warning Overriding VerboseRangeLoggingEnabled,%{private}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_1012DD08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DD0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = a1 + 272;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 272) + 16))(a1 + 272);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1012DD130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DD148(std::string *a1, const std::string *a2)
{
  std::string::value_type *v4;

  v4 = &a1[11].__r_.__value_.__s.__data_[8];
  (*(void (**)(std::string::size_type *))(a1[11].__r_.__value_.__l.__size_ + 16))(&a1[11].__r_.__value_.__l.__size_);
  std::string::operator=(a1, a2);
  return (*(uint64_t (**)(std::string::value_type *))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1012DD1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012DD1CC(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1012DD1F8(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  __int16 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 1)
  {
    if (a2)
    {
      v16 = 2 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 1);
    if (v11 < 0)
      sub_100259694();
    v12 = v10 >> 1;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 > v11)
      v11 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_100BFCCD8(v6, v14);
    else
      v15 = 0;
    v18 = &v15[2 * v12];
    v19 = &v18[2 * a2];
    v20 = 2 * a2;
    v21 = v18;
    do
    {
      *(_WORD *)v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    v22 = &v15[2 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 2)
    {
      v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1012DD578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1012DD590(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_currentFilename");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

id sub_1012DD728(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_stopLoggingOnQueue");
}

id sub_1012DD788(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_stopLoggingOnQueue");
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
    return (id)-[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), 0);
  return result;
}

id sub_1012DD834(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_shouldRotate");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_stopLoggingOnQueue");
  return result;
}

id sub_1012DD8C8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[6];

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 16))
    v3 = 0;
  else
    v3 = objc_msgSend(*(id *)(v2 + 40), "propertyForKey:", NSStreamDataWrittenToMemoryStreamKey);
  v4 = *(NSObject **)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1012DD968;
      v7[3] = &unk_1021629E0;
      v7[4] = v3;
      v7[5] = v5;
      dispatch_async(v4, v7);
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "_stopLoggingOnQueue");
}

uint64_t sub_1012DD968(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_1012DDED8(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_outputStream"), "write:maxLength:", objc_msgSend(*(id *)(a1 + 40), "bytes"), objc_msgSend(*(id *)(a1 + 40), "length"));
}

void sub_1012DDF28(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_1012DDF54(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  void *__p[2];
  uint64_t v7;
  uint8_t buf[8];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  sub_1015A2E04(__p, "");
  *(_QWORD *)buf = 0x200000000;
  v9 = 0;
  if (SHIBYTE(v7) < 0)
  {
    sub_100115CE4(&v10, __p[0], (unint64_t)__p[1]);
    v12 = 0;
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = *(_OWORD *)__p;
    v11 = v7;
    v12 = 0;
  }
  sub_100631F84(a1, buf);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  if (sub_1000CC4F4(a1))
  {
    sub_1012DE1F4(a1);
    sub_100634364(a1, "BeaconFences", (const char **)&off_1021AD748, 0, 0);
    sub_1012DE96C(a1);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "iB: No access to DB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: No access to DB", __p, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "CLBeaconFenceDatabase::CLBeaconFenceDatabase()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return a1;
}

void sub_1012DE1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_1006322C0(v25);
  _Unwind_Resume(a1);
}

id *sub_1012DE1F4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  void *__p;
  const char *v8;
  int v9;
  __int16 v10;
  char v11;
  char v12;
  id v13[2];
  uint8_t buf[8];
  __int16 v15;
  const char *v16;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: addOnBehalfBundleIdColumnIfNotExists", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: addOnBehalfBundleIdColumnIfNotExists", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceDatabase::addOnBehalfBundleIdColumnIfNotExists()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100131938(v13, (uint64_t)"CLBeaconFenceDatabase::addOnBehalfBundleIdColumnIfNotExists", 0);
  v8 = "OnBehalfBundleIdentifier";
  v9 = 5;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (sub_100635B3C(a1, "BeaconFences"))
    sub_10063A8D4(a1, "BeaconFences", (uint64_t)"OnBehalfBundleIdentifier", (uint64_t)&v8);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v3 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist\"}", buf, 0x12u);
  }
  return sub_100131740(v13);
}

void sub_1012DE8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  sub_1018B38B4((uint64_t)&a64);
  sub_100131740(&a62);
  _Unwind_Resume(a1);
}

void sub_1012DE96C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[3];

  v3[0] = v3;
  v3[1] = v3;
  v3[2] = 0;
  sub_100131938(&v2, (uint64_t)"CLBeaconFenceDatabase::cleanDatabase", 0);
  sub_1012DEC64(a1);
}

void sub_1012DEC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,uint64_t a29,uint64_t a30)
{
  sub_100114750((uint64_t)&a13);
  sub_100131740(&a28);
  sub_1000CAD6C(&a30);
  _Unwind_Resume(a1);
}

void sub_1012DEC64(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[8];
  uint8_t buf[23];
  char v29;

  sub_100263E50((uint64_t)&v25);
  sub_100131938(&v24, (uint64_t)"CLBeaconFenceDatabase::getAllFences", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Retrieving all fences", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    LOWORD(v23) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Retrieving all fences", &v23, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getAllFences(CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v3 = sub_100263F7C(&v26, (uint64_t)"SELECT ", 7);
  v4 = sub_100263F7C(v3, (uint64_t)"BundleIdentifier", 16);
  v5 = sub_100263F7C(v4, (uint64_t)", ", 2);
  v6 = sub_100263F7C(v5, (uint64_t)"Identifier", 10);
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_100263F7C(v7, (uint64_t)"ProximityUUID", 13);
  v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
  v10 = sub_100263F7C(v9, (uint64_t)"Major", 5);
  v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"Minor", 5);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"DefinitionMask", 14);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"Options", 7);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"OnBehalfBundleIdentifier", 24);
  v19 = sub_100263F7C(v18, (uint64_t)" FROM ", 6);
  sub_100263F7C(v19, (uint64_t)"BeaconFences", 12);
  std::stringbuf::str(buf, v27);
  if (v29 >= 0)
    v20 = (char *)buf;
  else
    v20 = *(char **)buf;
  sub_1000CDA68(a1, v20);
}

void sub_1012DF418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1012DF498(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  _BYTE buf[12];
  char v24;
  int v25;
  _BYTE *v26;
  void *__p[2];
  char v28;

  sub_100263E50((uint64_t)&v20);
  sub_100131938(&v19, (uint64_t)"CLBeaconFenceDatabase::removeFence", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v5 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing fence,%{private}s", buf, 0xCu);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    v15 = qword_1022A0038;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
    if (v24 >= 0)
      v16 = buf;
    else
      v16 = *(_BYTE **)buf;
    v25 = 136380675;
    v26 = v16;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 2, "iB: Removing fence,%{private}s", &v25, 12);
    v18 = v17;
    if (v24 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::removeFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v18);
    if (v18 != (char *)__p)
      free(v18);
  }
  v6 = sub_100263F7C(&v21, (uint64_t)"DELETE FROM ", 12);
  v7 = sub_100263F7C(v6, (uint64_t)"BeaconFences", 12);
  v8 = sub_100263F7C(v7, (uint64_t)" WHERE ", 7);
  v9 = sub_100263F7C(v8, (uint64_t)"BundleIdentifier", 16);
  v10 = sub_100263F7C(v9, (uint64_t)"=? AND ", 7);
  v11 = sub_100263F7C(v10, (uint64_t)"Identifier", 10);
  v12 = sub_100263F7C(v11, (uint64_t)"=? AND ", 7);
  v13 = sub_100263F7C(v12, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100263F7C(v13, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v22);
  if (v28 >= 0)
    v14 = (char *)__p;
  else
    v14 = (char *)__p[0];
  sub_1000CDA68(a1, v14);
}

void sub_1012DFABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DFB38(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  id v38[2];
  _QWORD v39[2];
  uint64_t v40;
  _QWORD v41[10];
  char v42;
  uint64_t v43;
  _BYTE buf[12];
  char v45;
  int v46;
  _BYTE *v47;
  void *__p[2];
  char v49;

  sub_100263E50((uint64_t)v39);
  sub_100131938(v38, (uint64_t)"CLBeaconFenceDatabase::addFence", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v5 = v49 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Adding fence,%{private}s", buf, 0xCu);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    v29 = qword_1022A0038;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
    if (v45 >= 0)
      v30 = buf;
    else
      v30 = *(_BYTE **)buf;
    v46 = 136380675;
    v47 = v30;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v29, 2, "iB: Adding fence,%{private}s", &v46, 12);
    v32 = v31;
    if (v45 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v32);
    if (v32 != (char *)__p)
      free(v32);
  }
  if ((sub_101271D04(a2) & 1) != 0)
  {
    v6 = sub_100263F7C(&v40, (uint64_t)"INSERT INTO ", 12);
    v7 = sub_100263F7C(v6, (uint64_t)"BeaconFences", 12);
    v8 = sub_100263F7C(v7, (uint64_t)" (", 2);
    v9 = sub_100263F7C(v8, (uint64_t)"BundleIdentifier", 16);
    v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
    v11 = sub_100263F7C(v10, (uint64_t)"Identifier", 10);
    v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
    v13 = sub_100263F7C(v12, (uint64_t)"ProximityUUID", 13);
    v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
    v15 = sub_100263F7C(v14, (uint64_t)"Major", 5);
    v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
    v17 = sub_100263F7C(v16, (uint64_t)"Minor", 5);
    v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
    v19 = sub_100263F7C(v18, (uint64_t)"DefinitionMask", 14);
    v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
    v21 = sub_100263F7C(v20, (uint64_t)"Options", 7);
    v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
    v23 = sub_100263F7C(v22, (uint64_t)"OnBehalfBundleIdentifier", 24);
    sub_100263F7C(v23, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 33);
    std::stringbuf::str(__p, v41);
    if (v49 >= 0)
      v24 = (char *)__p;
    else
      v24 = (char *)__p[0];
    sub_1000CDA68(a1, v24);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v25 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v26 = v49 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Error, invalid proximity zone for fence,%{private}s", buf, 0xCu);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    v33 = qword_1022A0038;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
    if (v45 >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    v46 = 136380675;
    v47 = v34;
    LODWORD(v37) = 12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v33, 17, "Error, invalid proximity zone for fence,%{private}s", &v46, v37);
    v36 = v35;
    if (v45 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBeaconFenceDatabase::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v36);
    if (v36 != (char *)__p)
      free(v36);
  }
  sub_100131740(v38);
  *(_QWORD *)((char *)v39
  v40 = v27;
  if (v42 < 0)
    operator delete((void *)v41[8]);
  std::streambuf::~streambuf(v41);
  std::ios::~ios(&v43);
  return 0;
}

void sub_1012E0428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1012E04B0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  _DWORD v20[4];
  uint8_t buf[23];
  char v22;

  sub_100263E50((uint64_t)&v17);
  sub_100131938(&v16, (uint64_t)"CLBeaconFenceDatabase::removeAllFencesForBundleIncludingOnBehalf", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing all fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v20[0] = 136380675;
    *(_QWORD *)&v20[1] = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Removing all fences for bundle,%{private}s", v20, 12);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &)", "%s\n", v14);
    if (v15 != (char *)buf)
      free(v15);
  }
  v6 = sub_100263F7C(&v18, (uint64_t)"DELETE FROM ", 12);
  v7 = sub_100263F7C(v6, (uint64_t)"BeaconFences", 12);
  v8 = sub_100263F7C(v7, (uint64_t)" WHERE ", 7);
  v9 = sub_100263F7C(v8, (uint64_t)"BundleIdentifier", 16);
  v10 = sub_100263F7C(v9, (uint64_t)"=? OR ", 6);
  v11 = sub_100263F7C(v10, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100263F7C(v11, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v19);
  if (v22 >= 0)
    v12 = (char *)buf;
  else
    v12 = *(char **)buf;
  sub_1000CDA68(a1, v12);
}

void sub_1012E09D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1012E0A40(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[8];
  _DWORD v35[4];
  uint8_t buf[23];
  char v37;

  sub_100263E50((uint64_t)&v32);
  sub_100131938(&v31, (uint64_t)"CLBeaconFenceDatabase::getFencesForBundleAndOnBehalf", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v7 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Retrieving fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    if (*((char *)a2 + 23) >= 0)
      v28 = a2;
    else
      v28 = (uint64_t *)*a2;
    v35[0] = 136380675;
    *(_QWORD *)&v35[1] = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Retrieving fences for bundle,%{private}s", v35, 12);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFencesForBundleAndOnBehalf(const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v29);
    if (v30 != (char *)buf)
      free(v30);
  }
  v9 = sub_100263F7C(&v33, (uint64_t)"SELECT ", 7);
  v10 = sub_100263F7C(v9, (uint64_t)"Identifier", 10);
  v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"ProximityUUID", 13);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"Major", 5);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"Minor", 5);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"DefinitionMask", 14);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"Options", 7);
  v21 = sub_100263F7C(v20, (uint64_t)" FROM ", 6);
  v22 = sub_100263F7C(v21, (uint64_t)"BeaconFences", 12);
  v23 = sub_100263F7C(v22, (uint64_t)" WHERE ", 7);
  v24 = sub_100263F7C(v23, (uint64_t)"BundleIdentifier", 16);
  v25 = sub_100263F7C(v24, (uint64_t)"=? AND ", 7);
  v26 = sub_100263F7C(v25, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100263F7C(v26, (uint64_t)"=?", 2);
  sub_1000CAD6C(a4);
  std::stringbuf::str(buf, v34);
  if (v37 >= 0)
    v27 = (char *)buf;
  else
    v27 = *(char **)buf;
  sub_1000CDA68(a1, v27);
}

void sub_1012E1464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1012E14EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[8];
  _DWORD v37[3];
  __int16 v38;
  uint64_t *v39;
  _BYTE buf[12];
  __int16 v41;
  uint64_t *v42;
  char v43;

  sub_100263E50((uint64_t)&v34);
  sub_100131938(&v33, (uint64_t)"CLBeaconFenceDatabase::getFenceForBundleAndOnBehalf", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v7 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v8;
    v41 = 2081;
    v42 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Retrieving fence,%{private}s/%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    if (*((char *)a2 + 23) >= 0)
      v29 = a2;
    else
      v29 = (uint64_t *)*a2;
    if (*((char *)a4 + 23) >= 0)
      v30 = a4;
    else
      v30 = (uint64_t *)*a4;
    v37[0] = 136380931;
    *(_QWORD *)&v37[1] = v29;
    v38 = 2081;
    v39 = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Retrieving fence,%{private}s/%{private}s", v37, 22);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFenceForBundleAndOnBehalf(const std::string &, const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v10 = sub_100263F7C(&v35, (uint64_t)"SELECT ", 7);
  v11 = sub_100263F7C(v10, (uint64_t)"ProximityUUID", 13);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"Major", 5);
  v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
  v15 = sub_100263F7C(v14, (uint64_t)"Minor", 5);
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"DefinitionMask", 14);
  v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
  v19 = sub_100263F7C(v18, (uint64_t)"Options", 7);
  v20 = sub_100263F7C(v19, (uint64_t)" FROM ", 6);
  v21 = sub_100263F7C(v20, (uint64_t)"BeaconFences", 12);
  v22 = sub_100263F7C(v21, (uint64_t)" WHERE ", 7);
  v23 = sub_100263F7C(v22, (uint64_t)"BundleIdentifier", 16);
  v24 = sub_100263F7C(v23, (uint64_t)"=? AND ", 7);
  v25 = sub_100263F7C(v24, (uint64_t)"Identifier", 10);
  v26 = sub_100263F7C(v25, (uint64_t)"=? AND ", 7);
  v27 = sub_100263F7C(v26, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100263F7C(v27, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v36);
  if (v43 >= 0)
    v28 = buf;
  else
    v28 = *(char **)buf;
  sub_1000CDA68(a1, v28);
}

void sub_1012E1E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1012E1E80(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  void *__p[2];
  char v11;

  sub_100263E50((uint64_t)&v7);
  v2 = sub_100263F7C(&v8, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  v3 = sub_100263F7C(v2, (uint64_t)"BeaconFences", 12);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleIdentifier", 16);
  sub_100263F7C(v5, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v9);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_1012E21D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1012E2230(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  uint8_t buf[8];
  char v14;

  sub_100263E50((uint64_t)&v10);
  v2 = sub_100263F7C(&v11, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  v3 = sub_100263F7C(v2, (uint64_t)"BeaconFences", 12);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleIdentifier", 16);
  v6 = sub_100263F7C(v5, (uint64_t)"=?", 2);
  v7 = sub_100263F7C(v6, (uint64_t)" OR ", 4);
  v8 = sub_100263F7C(v7, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100263F7C(v8, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v12);
  if (v14 >= 0)
    v9 = (char *)buf;
  else
    v9 = *(char **)buf;
  sub_1000CDA68(a1, v9);
}

void sub_1012E250C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 73) < 0)
    operator delete(*(void **)(v2 - 96));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012E2560(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1012E2614(id a1)
{
  qword_10230E0D8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBeaconFenceAuthorizationManagerSilo"));
}

uint64_t sub_1012E26C8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012E4200;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230E108 != -1)
    dispatch_once(&qword_10230E108, block);
  return qword_10230E100;
}

void sub_1012E2818(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  std::string __s1;
  _QWORD v9[2];
  uint64_t v10;
  int v11;
  char v12;

  v9[0] = v9;
  v9[1] = v9;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = sub_100B0AEF8((uint64_t)v9, 0, 0, a2);
  v5 = v9[0];
  *v4 = v9[0];
  v4[1] = v9;
  *(_QWORD *)(v5 + 8) = v4;
  v9[0] = v4;
  ++v10;
  memset(&__s1, 0, sizeof(__s1));
  v6 = *(unsigned __int8 *)(a2 + 87);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 72);
  if (v6)
    v7 = (const std::string *)(a2 + 64);
  else
    v7 = (const std::string *)(a2 + 40);
  std::string::operator=(&__s1, v7);
  sub_1012E42CC(a1);
}

void sub_1012E31E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a17 < 0)
    operator delete(__p);
  sub_1000CAD6C(&a18);
  _Unwind_Resume(a1);
}

void sub_1012E3268(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)();
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  char v12;

  v10[0] = v10;
  v10[1] = v10;
  v10[2] = 0;
  v11 = 0;
  v12 = 0;
  v4 = 0u;
  v3 = 0u;
  v2 = off_10213F008;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  sub_1012E14EC(a1 + 128, (uint64_t *)(a2 + 40), a2 + 64, (uint64_t *)(a2 + 88));
}

void sub_1012E3740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_100114750((uint64_t)&a12);
  sub_1000CAD6C(&a27);
  _Unwind_Resume(a1);
}

void sub_1012E37A8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  __int128 v4;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    v3 = 68289026;
    LOWORD(v4) = 2082;
    *(_QWORD *)((char *)&v4 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: getCountOfAllFences\"}", (uint8_t *)&v3, 0x12u);
  }
  v3 = (uint64_t)&v3;
  *(_QWORD *)&v4 = &v3;
  *((_QWORD *)&v4 + 1) = 0;
  sub_1012DEC64(a1 + 128);
}

void sub_1012E38B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000CAD6C(&a9);
  _Unwind_Resume(a1);
}

void sub_1012E3960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1012E3A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012E3A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  void *__p[2];
  uint64_t v8;
  void *__dst[2];
  uint64_t v10;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 16);
  }
  v5 = sub_1012E4E34(a1, (uint64_t)__dst, (uint64_t)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_11;
    return 1;
  }
  operator delete(__dst[0]);
  if ((v5 & 1) == 0)
    return 1;
LABEL_11:
  if ((*(_DWORD *)(a1 + 264) & 1) != 0)
    return 2;
  else
    return *(_DWORD *)(a1 + 264) & 2;
}

void sub_1012E3B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012E3B68(uint64_t a1, void *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_1012E3E84(a1, "CLBeaconFenceAuthorizationManager-Notifier", a2);
  *v3 = off_1021AD928;
  v3[14] = 0;
  v3[15] = 0;
  sub_1012DEC60((uint64_t)(v3 + 16));
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  sub_1012AF26C();
}

void sub_1012E3DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  sub_10064BB88(v16);
  v19 = *(_QWORD *)(v15 + 120);
  *(_QWORD *)(v15 + 120) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v17;
  *v17 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_1012E40F8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1012E3E84(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021ADAD0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1012E3F04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1012E3F20(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBeaconFenceAuthorizationManager::onBeaconNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ADA80);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBeaconFenceAuthorizationManager::onBeaconNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBeaconFenceAuthorizationManager::onBeaconNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012E4F54(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1012E40D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012E40F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021ADAD0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1007F8C14(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1012E416C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1021AD928;
  sub_1012E426C((uint64_t)a1);
  sub_10064BB88(a1 + 16);
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[14];
  a1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1012E40F8((uint64_t)a1);
}

void sub_1012E41DC(_QWORD *a1)
{
  sub_1012E416C(a1);
  operator delete();
}

void sub_1012E4200()
{
  operator new();
}

void sub_1012E4248()
{
  operator delete();
}

uint64_t sub_1012E426C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  *(_QWORD *)(a1 + 272) = 0;
  v2 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1012E42CC(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: getCountOfAllFencesForBundle\"}", (uint8_t *)v3, 0x12u);
  }
  sub_1012E2230(a1 + 128);
}

void sub_1012E43BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t (**v4)();
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = 0u;
  v6 = 0u;
  v4 = off_10213F008;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  sub_1012E14EC(a1 + 128, a2, a3, a4);
}

void sub_1012E4CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100114750((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1012E4D50(uint64_t a1, std::string *a2)
{
  if (*(_DWORD *)(a1 + 264))
    sub_1012E6800(a1, a2, 0);
  sub_1012E1E80(a1 + 128);
}

void sub_1012E4E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012E4E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  uint64_t v13;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
  }
  v5 = sub_1012E6B24(a1, (uint64_t *)__p);
  v6 = v5;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_6;
    return 0;
  }
  operator delete(__p[0]);
  if (!v6)
    return 0;
LABEL_6:
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a3 + 23))
    {
      *(_OWORD *)v10 = *(_OWORD *)a3;
      v11 = *(_QWORD *)(a3 + 16);
      goto LABEL_13;
    }
    return 1;
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
    return 1;
  sub_100115CE4(v10, *(void **)a3, v8);
LABEL_13:
  v7 = sub_1012E6C60(a1, (uint64_t *)v10);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  return v7;
}

void sub_1012E4F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1012E4F54(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (*a3 == 2)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int8 *)(a4 + 112);
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Received Bluetooth LE power\", \"BT power\":%{public}hhd}", (uint8_t *)v8, 0x18u);
    }
    if (*(_BYTE *)(a4 + 112))
      sub_1012E5078(a1, 2);
    else
      sub_1012E5268(a1, 2);
  }
}

void sub_1012E5078(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  BOOL v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if ((*(_DWORD *)(a1 + 264) & a2) != 0)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)buf = 67240448;
      v14 = a2;
      v15 = 1026;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing exception,%{public}#x, from stored exceptions %{public}#x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
      v7 = *(_DWORD *)(a1 + 264);
      v10[0] = 67240448;
      v10[1] = a2;
      v11 = 1026;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Removing exception,%{public}#x, from stored exceptions %{public}#x", v10, 14);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::unlockedResumeForException(MonitoringExceptions)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v6 = (*(_DWORD *)(a1 + 264) & ~a2) == 0;
    *(_DWORD *)(a1 + 264) &= ~a2;
    if (v6)
      sub_1012E5E78(a1);
  }
}

void sub_1012E5268(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if ((*(_DWORD *)(a1 + 264) & a2) == 0)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)buf = 67240448;
      v14 = a2;
      v15 = 1026;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Adding exception,%{public}#x, to stored exceptions %{public}#x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
      v7 = *(_DWORD *)(a1 + 264);
      v10[0] = 67240448;
      v10[1] = a2;
      v11 = 1026;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Adding exception,%{public}#x, to stored exceptions %{public}#x", v10, 14);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::unlockedSuspendForException(MonitoringExceptions)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v6 = *(_DWORD *)(a1 + 264);
    *(_DWORD *)(a1 + 264) = v6 | a2;
    if (!v6)
      sub_1012E5910(a1);
  }
}

void sub_1012E5470(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];

  v2[0] = (uint64_t)v2;
  v2[1] = (uint64_t)v2;
  v2[2] = 0;
  sub_1000C931C(a1 + 128, a2, v2);
}

void sub_1012E58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000CAD6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1012E5910(uint64_t a1)
{
  _QWORD v1[3];

  v1[0] = v1;
  v1[1] = v1;
  v1[2] = 0;
  sub_1012DEC64(a1 + 128);
}

void sub_1012E5DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  sub_1000CAD6C(&a39);
  _Unwind_Resume(a1);
}

void sub_1012E5E78(uint64_t a1)
{
  _QWORD v1[3];

  v1[0] = v1;
  v1[1] = v1;
  v1[2] = 0;
  sub_1012DEC64(a1 + 128);
}

void sub_1012E63D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1000CAD6C(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1012E644C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD v7[3];

  v5 = sub_1012E6758(a1, a2, (uint64_t)a3);
  if ((_DWORD)v5 && *a3 <= 1u)
  {
    v7[0] = v7;
    v7[1] = v7;
    v7[2] = 0;
    sub_1012DEC64(a1 + 128);
  }
  return v5;
}

void sub_1012E66F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  uint64_t v28;

  sub_1000CAD6C(&a23);
  sub_100090AE4((uint64_t)&a27, a28);
  sub_1000CAD6C((uint64_t *)(v28 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_1012E6758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = atomic_load((unsigned __int8 *)&qword_1022FE7B8);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v5 = __cxa_guard_acquire(&qword_1022FE7B8);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_1022FE7A0 = 0;
      *(_QWORD *)algn_1022FE7A8 = 0;
      qword_1022FE7B0 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1022FE7A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022FE7B8);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &qword_1022FE7A0);
}

void sub_1012E6800(uint64_t a1, std::string *a2, int a3)
{
  NSObject *v5;
  std::string *v6;
  std::string *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  std::string *v12;
  uint8_t buf[8];
  __int16 v14;
  std::string *v15;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = a2;
    else
      v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67240450;
    *(_DWORD *)&buf[4] = a3;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: Setting icon state,%{public}d, for bundle,%{public}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = a2;
    else
      v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v10[0] = 67240450;
    v10[1] = a3;
    v11 = 2082;
    v12 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Setting icon state,%{public}d, for bundle,%{public}s", v10, 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::unlockedSetFenceIconStateForBundle(const std::string &, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100204320(a2, (uint64_t)buf);
  sub_1007E683C();
}

void sub_1012E6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012E6A9C()
{
  return 1;
}

uint64_t sub_1012E6AA4()
{
  return 1;
}

_QWORD *sub_1012E6AAC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

id sub_1012E6B24(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  id v4;
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t *v11;
  __int16 v12;
  int v13;

  v2 = a2;
  v3 = a2;
  if (*((char *)a2 + 23) < 0)
    v3 = (uint64_t *)*a2;
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 272), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)), "isAuthorizedForServiceType:", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v2 + 23) < 0)
      v2 = (uint64_t *)*v2;
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v2;
    v12 = 1026;
    v13 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: isBundleAuthorized\", \"key\":%{public, location:escape_only}s, \"authorized\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  return v4;
}

uint64_t sub_1012E6C60(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 23))
      goto LABEL_7;
    return (uint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 272), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)), "isAuthorizedForServiceType:", 14);
  }
  if (a2[1])
  {
    a2 = (uint64_t *)*a2;
    return (uint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 272), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)), "isAuthorizedForServiceType:", 14);
  }
LABEL_7:
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
  v3 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Empty bundle identifier should not be passed in here", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "Empty bundle identifier should not be passed in here", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBeaconFenceAuthorizationManager::unlockedIsOnBehalfBundleAuthorized(std::string)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 1;
}

void sub_1012E6E54()
{
  operator new();
}

void sub_1012E6F00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1012E6F3C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021ADC20;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1012E7010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADA80);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021ADA80);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1012E7284(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[24];
  int v45;
  char v46;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v40;
        v34 = sub_1000BC378((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        *(_QWORD *)buf = buf;
        *(_OWORD *)&buf[8] = (unint64_t)buf;
        v45 = 0;
        v46 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1012E995C();
        }
        sub_1000CAD6C((uint64_t *)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FE7C0;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        v32 = sub_1000BC378(v31 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ADA80);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_1012E7708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1000CAD6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1012E7728(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADA80);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::clientRegistered(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1012E79A8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009B8B8((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ADA80);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021ADA80);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1012E7D30(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  if (v12 != a3)
    sub_1012E96C0((uint64_t *)a3, *(_QWORD *)(v12 + 8), *(_QWORD *)(v8 + 64));
  v13 = *(_DWORD *)(v12 + 24);
  *(_BYTE *)(a3 + 28) = *(_BYTE *)(v12 + 28);
  *(_DWORD *)(a3 + 24) = v13;
  return 1;
}

uint64_t sub_1012E7DC8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1012E9148(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1012E7E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012E7E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4[3];
  int v5;
  char v6;

  v4[0] = (uint64_t)v4;
  v4[1] = (uint64_t)v4;
  v4[2] = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  sub_1000CAD6C(v4);
}

void sub_1012E7EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000CAD6C(&a9);
  _Unwind_Resume(a1);
}

void sub_1012E7EF4(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  char **v34;
  char *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1007A2608((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1007A24CC((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1007A28B0((uint64_t)v29, *(char **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_1007A28B0((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1012E9148(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1012E8BD0();
    os_activity_scope_leave(&state);
  }
}

void sub_1012E8510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1012E855C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADA80);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADA80);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021ADA80);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ADA80);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1012E8B08(uint64_t a1)
{
  sub_1012E98FC(a1);
  operator delete();
}

id sub_1012E8B2C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1012E929C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1012E8B78(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012E8BA4(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1012E8BD0()
{
  operator new();
}

void sub_1012E8C74()
{
  operator delete();
}

void sub_1012E8C98(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1012E929C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1012E906C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ADA80);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021ADA80);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1012E906C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1012E929C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1000BC378(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_1012E9148@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x38uLL);
  result = sub_1012E91A0((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1012E918C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012E91A0(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1021ADBB0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_100B0BC38((uint64_t *)(a1 + 24), a2);
  v4 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = v4;
  return a1;
}

void sub_1012E91EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012E9200(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021ADBB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012E9214(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021ADBB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1012E9248(uint64_t a1)
{
  sub_1000CAD6C((uint64_t *)(a1 + 24));
}

uint64_t sub_1012E9254(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
  {
    sub_1000CAD6C(*(uint64_t **)(result + 32));
    operator delete();
  }
  return result;
}

id sub_1012E929C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1012E92E8(a1);
  else
    return 0;
}

id sub_1012E92E8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADBF0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49DA3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADBF0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADBF0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49DA3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADBF0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1012E9694(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_1012E96C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      std::string::operator=((std::string *)v6 + 1, (const std::string *)(v4 + 24));
      v6[6] = *(_QWORD *)(v4 + 48);
      std::string::operator=((std::string *)(v6 + 7), (const std::string *)(v4 + 56));
      std::string::operator=((std::string *)(v6 + 10), (const std::string *)(v4 + 80));
      std::string::operator=((std::string *)(v6 + 13), (const std::string *)(v4 + 104));
      *((_DWORD *)v6 + 32) = *(_DWORD *)(v4 + 128);
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return sub_1012E9784((uint64_t)a1, a1, v4, a3);
  else
    return sub_1012E9878((uint64_t)a1, v6, a1);
}

uint64_t *sub_1012E9784(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_100B0AEF8(a1, 0, 0, a3 + 16);
    v9 = v8;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_100B0AEF8(a1, v12, 0, v10 + 16);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1012E9850(void *a1)
{
  void (***v1)(uint64_t);

  __cxa_begin_catch(a1);
  sub_10194C60C(v1);
  __cxa_rethrow();
}

void sub_1012E9864(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1012E9878(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      (*(void (**)(_QWORD *))v4[2])(v4 + 2);
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

uint64_t sub_1012E98FC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021ADC20;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1012E995C()
{
  operator new();
}

void sub_1012E9A00()
{
  operator delete();
}

uint64_t sub_1012E9A24(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
  {
    sub_1000CAD6C(*(uint64_t **)(result + 32));
    operator delete();
  }
  return result;
}

uint64_t sub_1012E9A6C()
{
  sub_1015A2E04(&qword_10230E0E8, "BeaconFenceAuthorizationManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E0E8, (void *)&_mh_execute_header);
}

uint64_t sub_1012E9AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char **v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *(_QWORD *)a1 = off_1021ADC78;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (char **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  if ((uint64_t (***)())a1 != &off_1021ADC38)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v5 >= v7)
      {
        v8 = (v5 - *v4) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          sub_100259694();
        v9 = v7 - (_QWORD)*v4;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)sub_10025E6A0(a1 + 32, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v6;
        v5 = v13 + 8;
        v15 = *(char **)(a1 + 16);
        v14 = *(char **)(a1 + 24);
        if (v14 != v15)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = *v4;
        }
        *(_QWORD *)(a1 + 16) = v13;
        *(_QWORD *)(a1 + 24) = v5;
        *(_QWORD *)(a1 + 32) = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v5 += 8;
      }
      *(_QWORD *)(a1 + 24) = v5;
      v6 = *(_QWORD *)(v6 + 8);
    }
    while ((uint64_t (***)())v6 != &off_1021ADC38);
  }
  return a1;
}

void sub_1012E9BE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012E9C00()
{
  return 0;
}

uint64_t sub_1012E9C0C()
{
  return 0;
}

BOOL sub_1012E9C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v3 == v2)
    return 0;
  v4 = v3 + 8;
  do
  {
    v5 = *(_QWORD *)(v4 - 8);
    result = v5 == a2;
    v7 = v5 == a2 || v4 == v2;
    v4 += 8;
  }
  while (!v7);
  return result;
}

uint64_t sub_1012E9C54(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v9;

  v4 = a2;
  do
  {
    *a1 = v4;
    v5 = a1[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v4[5];
      *(_DWORD *)buf = 136315138;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "initial, enter(%s)", buf, 0xCu);
      v4 = (_QWORD *)*a1;
    }
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v4 + 24))(v4, 0, 0);
    result = (*(uint64_t (**)(_QWORD *))(*a2 + 8))(a2);
    v4 = (_QWORD *)result;
  }
  while (result);
  return result;
}

void sub_1012E9D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (***v3)();
  uint64_t v7;
  uint64_t v8;
  uint64_t (***v9)();
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  char *i;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *__p;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  v3 = *(uint64_t (****)())a1;
  if (*(uint64_t (****)())a1 != &off_1021ADC38)
  {
    while (1)
    {
      v7 = ((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t))**v3)(v3, a2, a3);
      if (v7)
        break;
      v3 = (uint64_t (***)())v3[1];
      if (v3 == &off_1021ADC38)
        return;
    }
    v8 = v7;
    if ((uint64_t (***)())v7 == v3)
    {
      ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v3)[2])(v3, a2, a3);
    }
    else
    {
      v9 = *(uint64_t (****)())a1;
      v26 = 0;
      v27 = 0;
      v25 = 0;
      sub_10025EA00(&v25, v9[2], (uint64_t)v9[3], v9[3] - v9[2]);
      __p = 0;
      v24 = 0;
      v22 = 0;
      sub_10025EA00(&v22, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 3);
      v10 = v25;
      if (v25 != v26)
      {
        v11 = (char *)__p - 8;
        v12 = v26 - 8;
        while (v11 + 1 != (_QWORD *)v22 && *(_QWORD *)v12 == *v11)
        {
          v26 = v12;
          __p = v11--;
          v13 = v12 == v25;
          v12 -= 8;
          if (v13)
            goto LABEL_18;
        }
        v14 = v12 + 8;
        if (v12 + 8 != v25)
        {
          do
          {
            v15 = *v10;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v10 + 32))(*v10, a2, a3);
            v16 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              v17 = *(_QWORD *)(v15 + 40);
              *(_DWORD *)buf = 134218242;
              v29 = a2;
              v30 = 2080;
              v31 = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "event %llu, exit(%s)", buf, 0x16u);
            }
            ++v10;
          }
          while (v14 != v10);
        }
      }
LABEL_18:
      ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v3)[2])(v3, a2, a3);
      for (i = (char *)__p; i != v22; i -= 8)
      {
        v19 = *(NSObject **)(a1 + 8);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v20 = *(_QWORD *)(*((_QWORD *)i - 1) + 40);
          *(_DWORD *)buf = 134218242;
          v29 = a2;
          v30 = 2080;
          v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "event %llu, enter(%s)", buf, 0x16u);
        }
        v21 = *((_QWORD *)i - 1);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, a2, a3);
      }
      *(_QWORD *)a1 = v8;
      if (i)
      {
        __p = i;
        operator delete(i);
      }
      if (v25)
      {
        v26 = (char *)v25;
        operator delete(v25);
      }
    }
  }
}

void sub_1012EA05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1012EA0A0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021ADC78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1012EA0DC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021ADC78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1012EA128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_101C49DF0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 196608;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 102) = 0;
  sub_100270E34(a1 + 152, a2);
  sub_100270E34(a1 + 184, a3);
  return a1;
}

void sub_1012EA1B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v5 = *(_QWORD **)(v1 + 176);
  if (v5 == v2)
  {
    v6 = v2;
    v7 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v7 = 5;
    v6 = *(_QWORD **)(v1 + 176);
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 136) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1012EA20C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  a1[22] = 0;
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1 + 23;
  v6 = (_QWORD *)a1[26];
  a1[26] = 0;
  if (v6 == a1 + 23)
  {
    v7 = 4;
    v6 = a1 + 23;
  }
  else
  {
    if (!v6)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  v8 = (_QWORD *)a1[26];
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
    v5 = (_QWORD *)a1[26];
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
LABEL_15:
  v10 = (_QWORD *)a1[22];
  if (v10 == v2)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_20;
    v11 = 5;
    v2 = (_QWORD *)a1[22];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v11))(v2);
LABEL_20:
  v12 = (void *)a1[16];
  if (v12)
  {
    a1[17] = v12;
    operator delete(v12);
  }
  return a1;
}

void sub_1012EA310(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  int v13;
  __int16 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  BOOL v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  double v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  int v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint8_t *v41;
  int v42;
  int v43;
  int v44;
  double v45;
  double v46;
  double v47;
  int v48;
  int v49;
  double v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  __int16 v56;
  _BYTE v57[10];
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  int v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  int v69;
  __int16 v70;
  _BOOL4 v71;
  __int16 v72;
  int v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  _BOOL4 v79;
  uint8_t buf[4];
  int v81;
  __int16 v82;
  _BYTE v83[10];
  __int16 v84;
  _BOOL4 v85;
  __int16 v86;
  int v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  int v95;
  __int16 v96;
  _BOOL4 v97;
  __int16 v98;
  int v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  _BOOL4 v105;

  v2 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v3 = sub_100B30608(v2, buf);
  v4 = v3 - *(double *)(a1 + 32);
  if (v4 <= *(double *)a1)
    return;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67240448;
    v81 = v6;
    v82 = 2050;
    *(double *)v83 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,updateOverrideVisit,visit,%{public}d,timeFromLastCheck,%{public}0.2f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
    v39 = *(unsigned __int8 *)(a1 + 16);
    v54 = 67240448;
    v55 = v39;
    v56 = 2050;
    *(double *)v57 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,updateOverrideVisit,visit,%{public}d,timeFromLastCheck,%{public}0.2f", &v54, 18);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::updateOverrideVisit()", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  *(double *)(a1 + 32) = v3;
  v7 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
    v8 = 1;
  else
    v8 = *(_BYTE *)(a1 + 25) != 0;
  v9 = *(_DWORD *)(a1 + 48);
  if (fabsf(*(float *)(a1 + 52)) <= 50.0)
  {
    v10 = fabsf(*(float *)(a1 + 56)) > 50.0;
    if (!v9)
      goto LABEL_18;
  }
  else
  {
    v10 = 1;
    if (!v9)
    {
LABEL_18:
      v11 = *(_BYTE *)(a1 + 72) != 0;
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_19;
LABEL_16:
      if (v3 - *(double *)(a1 + 40) <= *(double *)(a1 + 8))
      {
        v12 = 1;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(a1 + 24) = 0;
        ++*(_DWORD *)(a1 + 116);
      }
      goto LABEL_21;
    }
  }
  if (!v10)
    goto LABEL_18;
  v11 = 1;
  if (*(_BYTE *)(a1 + 24))
    goto LABEL_16;
LABEL_19:
  v12 = 0;
LABEL_21:
  if (v11)
    v13 = 1;
  else
    v13 = v12;
  if ((v12 & 1) == 0 && v11)
  {
    v14 = *(_WORD *)(a1 + 26);
    if (v14)
    {
      v13 = 1;
      *(_BYTE *)(a1 + 24) = 1;
      *(double *)(a1 + 40) = v3;
      *(_WORD *)(a1 + 26) = v14 - 1;
    }
    else
    {
      v13 = 0;
    }
  }
  v15 = *(double *)(a1 + 88);
  v16 = 0.0;
  if ((*(_BYTE *)(a1 + 104) || v15 > 0.0) && (v17 = *(double *)(a1 + 96), v17 < v3))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      v15 = v15 + v3 - *(double *)(a1 + 80);
      *(double *)(a1 + 80) = v3;
    }
    v18 = v3 - v17;
    v19 = v15 / v18;
    *(_QWORD *)(a1 + 88) = 0;
    v16 = v19;
    v20 = v19 > 0.8 && v18 > 30.0;
  }
  else
  {
    v20 = 0;
  }
  if (*(_BYTE *)(a1 + 108))
    v21 = 0;
  else
    v21 = (*(unsigned __int8 *)(a1 + 109) | v9) == 0;
  if (*(_BYTE *)(a1 + 28))
  {
    if (v13)
      v22 = 0;
    else
      v22 = v10;
    v23 = v22 && v21;
  }
  else
  {
    v23 = 0;
  }
  *(_BYTE *)(a1 + 25) = v23;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
  v24 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(unsigned __int8 *)(a1 + 24);
    v26 = *(unsigned __int8 *)(a1 + 25);
    v27 = *(unsigned __int8 *)(a1 + 72);
    v28 = *(float *)(a1 + 52);
    v29 = *(float *)(a1 + 56);
    v30 = *(float *)(a1 + 60);
    v31 = *(unsigned __int16 *)(a1 + 26);
    v32 = *(unsigned __int8 *)(a1 + 104);
    v33 = v3 - *(double *)(a1 + 96);
    *(_DWORD *)buf = 67243520;
    v81 = v25;
    v82 = 1026;
    *(_DWORD *)v83 = v26;
    *(_WORD *)&v83[4] = 1026;
    *(_DWORD *)&v83[6] = v9 != 0;
    v84 = 1026;
    v85 = v10;
    v86 = 1026;
    v87 = v27;
    v88 = 2050;
    v89 = v28;
    v90 = 2050;
    v91 = v29;
    v92 = 2050;
    v93 = v30;
    v94 = 1026;
    v95 = v31;
    v96 = 1026;
    v97 = v20;
    v98 = 1026;
    v99 = v32;
    v100 = 2050;
    v101 = v33;
    v102 = 2050;
    v103 = v16;
    v104 = 1026;
    v105 = v21;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitExitLikely,%{public}d,inVisitLocUseful,%{public}d,wifi,%{public}d,io,%{public}d,motion,%{public}d,cdX,%{public}0.1f,cdY,%{public}0.1f,cdZ,%{public}0.1f,attemptsLeft,%{public}d,walkRun,%{public}d,currWalkRun,%{public}d,sigDur,%{public}0.2f,walkRunFrac,%{public}0.2f,wifiContDisassociated,%{public}d", buf, 0x6Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
    v42 = *(unsigned __int8 *)(a1 + 24);
    v43 = *(unsigned __int8 *)(a1 + 25);
    v44 = *(unsigned __int8 *)(a1 + 72);
    v45 = *(float *)(a1 + 52);
    v46 = *(float *)(a1 + 56);
    v47 = *(float *)(a1 + 60);
    v48 = *(unsigned __int16 *)(a1 + 26);
    v49 = *(unsigned __int8 *)(a1 + 104);
    v50 = v3 - *(double *)(a1 + 96);
    v54 = 67243520;
    v55 = v42;
    v56 = 1026;
    *(_DWORD *)v57 = v43;
    *(_WORD *)&v57[4] = 1026;
    *(_DWORD *)&v57[6] = v9 != 0;
    v58 = 1026;
    v59 = v10;
    v60 = 1026;
    v61 = v44;
    v62 = 2050;
    v63 = v45;
    v64 = 2050;
    v65 = v46;
    v66 = 2050;
    v67 = v47;
    v68 = 1026;
    v69 = v48;
    v70 = 1026;
    v71 = v20;
    v72 = 1026;
    v73 = v49;
    v74 = 2050;
    v75 = v50;
    v76 = 2050;
    v77 = v16;
    v78 = 1026;
    v79 = v21;
    LODWORD(v53) = 106;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,visitExitLikely,%{public}d,inVisitLocUseful,%{public}d,wifi,%{public}d,io,%{public}d,motion,%{public}d,cdX,%{public}0.1f,cdY,%{public}0.1f,cdZ,%{public}0.1f,attemptsLeft,%{public}d,walkRun,%{public}d,currWalkRun,%{public}d,sigDur,%{public}0.2f,walkRunFrac,%{public}0.2f,wifiContDisassociated,%{public}d", &v54, v53);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::updateOverrideVisit()", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v34 = 1;
    goto LABEL_58;
  }
  v34 = *(_BYTE *)(a1 + 25) != 0;
  if (*(_BYTE *)(a1 + 25))
    v35 = 1;
  else
    v35 = v10;
  if ((v35 & 1) != 0)
  {
LABEL_58:
    v36 = 0.0;
    if (*(_BYTE *)(a1 + 104))
      v36 = v3;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(double *)(a1 + 80) = v36;
    *(_QWORD *)(a1 + 88) = 0;
    *(double *)(a1 + 96) = v3;
    if (v8 == v34)
      goto LABEL_65;
    goto LABEL_61;
  }
  if ((v8 & 1) != 0)
  {
    LOBYTE(v34) = 0;
LABEL_61:
    v37 = *(_QWORD *)(a1 + 176);
    if (v37)
    {
      buf[0] = v34;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v37 + 48))(v37, buf);
    }
  }
LABEL_65:
  if (!v7 && *(_BYTE *)(a1 + 24))
  {
    v38 = *(_QWORD *)(a1 + 208);
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
  }
}

void sub_1012EAA00(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  unint64_t v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  float *v27;
  char *v28;
  float v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  const char *v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[10];
  __int16 v45;
  int v46;
  uint8_t buf[4];
  _BYTE v48[10];
  __int16 v49;
  int v50;

  v6 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v7 = sub_100B30608(v6, buf);
  if (*(_BYTE *)(a1 + 16))
    v8 = 1;
  else
    v8 = a2 == 0;
  if (v8)
  {
    if (*(_BYTE *)(a1 + 16) && (a2 & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 24))
      {
        v9 = sub_100B303DC();
        *(_DWORD *)buf = 1;
        v10 = sub_100B30608(v9, buf) - *(double *)(a1 + 40);
        if (v10 <= *(double *)(a1 + 8))
          ++*(_DWORD *)(a1 + 112);
        else
          ++*(_DWORD *)(a1 + 116);
        v17 = *(_QWORD *)(a1 + 144);
        v18 = *(float **)(a1 + 136);
        if ((unint64_t)v18 >= v17)
        {
          v21 = *(float **)(a1 + 128);
          v22 = v18 - v21;
          if ((unint64_t)(v22 + 1) >> 62)
            sub_100259694();
          v23 = v17 - (_QWORD)v21;
          v24 = (uint64_t)(v17 - (_QWORD)v21) >> 1;
          if (v24 <= v22 + 1)
            v24 = v22 + 1;
          if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v26 = (char *)sub_100260634(a1 + 144, v25);
            v21 = *(float **)(a1 + 128);
            v18 = *(float **)(a1 + 136);
          }
          else
          {
            v26 = 0;
          }
          v27 = (float *)&v26[4 * v22];
          v28 = &v26[4 * v25];
          v29 = v10;
          *v27 = v29;
          v20 = v27 + 1;
          while (v18 != v21)
          {
            v30 = *((_DWORD *)v18-- - 1);
            *((_DWORD *)v27-- - 1) = v30;
          }
          *(_QWORD *)(a1 + 128) = v27;
          *(_QWORD *)(a1 + 136) = v20;
          *(_QWORD *)(a1 + 144) = v28;
          if (v21)
            operator delete(v21);
        }
        else
        {
          v19 = v10;
          *v18 = v19;
          v20 = v18 + 1;
        }
        *(_QWORD *)(a1 + 136) = v20;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
        v31 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)v48 = v10;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitExit,predSuccess,pullInSec:%{public}0.2f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
          v43 = 134349056;
          *(double *)v44 = v10;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,visitExit,predSuccess,pullInSec:%{public}0.2f", &v43, 12);
          v41 = (uint8_t *)v40;
          sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedVisit(const BOOL, const BOOL)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 120);
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
      v32 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(_DWORD *)(a1 + 112);
        v34 = *(_DWORD *)(a1 + 116);
        v35 = *(_DWORD *)(a1 + 120);
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)v48 = v33;
        *(_WORD *)&v48[4] = 1026;
        *(_DWORD *)&v48[6] = v34;
        v49 = 1026;
        v50 = v35;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitExit,predSuccess,%{public}d,predFailure,%{public}d,predMiss,%{public}d", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
        v36 = *(_DWORD *)(a1 + 112);
        v37 = *(_DWORD *)(a1 + 116);
        v38 = *(_DWORD *)(a1 + 120);
        v43 = 67240704;
        *(_DWORD *)v44 = v36;
        *(_WORD *)&v44[4] = 1026;
        *(_DWORD *)&v44[6] = v37;
        v45 = 1026;
        v46 = v38;
        LODWORD(v42) = 20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,visitExit,predSuccess,%{public}d,predFailure,%{public}d,predMiss,%{public}d", &v43, v42);
        v16 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedVisit(const BOOL, const BOOL)", "%s\n", v39);
        goto LABEL_53;
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 196608;
    *(_BYTE *)(a1 + 28) = a3;
    *(double *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v11 = 0.0;
    if (*(_BYTE *)(a1 + 104))
      v11 = v7;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(double *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = 0;
    *(double *)(a1 + 96) = v7;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 28);
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)v48 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitEnter,placeUnknown,%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
      v14 = *(unsigned __int8 *)(a1 + 28);
      v43 = 67174657;
      *(_DWORD *)v44 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,visitEnter,placeUnknown,%{private}d", &v43, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedVisit(const BOOL, const BOOL)", "%s\n", v15);
LABEL_53:
      if (v16 != buf)
        free(v16);
    }
  }
  *(_BYTE *)(a1 + 16) = a2;
}

void sub_1012EB004(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  char v11;
  int v12;
  int v13;
  int v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  _DWORD v34[2];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;

  v3 = *(unsigned __int8 *)(a1 + 104);
  v4 = *(unsigned __int8 *)(a1 + 105);
  v5 = *(unsigned __int8 *)(a1 + 106);
  v6 = *(unsigned __int8 *)(a1 + 107);
  v7 = *a3 == 4 || *a3 == 8;
  v8 = v7;
  *(_BYTE *)(a1 + 104) = v8;
  v9 = (*a3 < 0x39uLL) & (0x110000000000C20uLL >> *a3);
  *(_BYTE *)(a1 + 105) = v9;
  *(_BYTE *)(a1 + 106) = (*a3 < 0x2AuLL) & (0x20000000208uLL >> *a3);
  *(_BYTE *)(a1 + 107) = (*a3 < 8u) & (0x86u >> *a3);
  if (*(_BYTE *)(a1 + 16))
  {
    v11 = 1;
    if (!*(_BYTE *)(a1 + 72))
    {
      v12 = v6 | v3;
      v7 = v4 == 0;
      v13 = v9 ^ 1;
      if (!v7)
        v13 = 1;
      if (v5)
        v14 = 1;
      else
        v14 = v13;
      v15 = v13 ^ 1;
      v16 = v12 != 0;
      if (v14)
        v11 = v15;
      else
        v11 = v16;
    }
    *(_BYTE *)(a1 + 72) = v11;
    v17 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v18 = sub_100B30608(v17, buf);
    if (v3 || !*(_BYTE *)(a1 + 104))
    {
      if (v3 && !*(_BYTE *)(a1 + 104))
      {
        *(double *)(a1 + 88) = *(double *)(a1 + 88) + v18 - *(double *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    else
    {
      *(double *)(a1 + 80) = v18;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(unsigned __int8 *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 105);
      v22 = *(unsigned __int8 *)(a1 + 106);
      v23 = *(unsigned __int8 *)(a1 + 107);
      v24 = *(unsigned __int8 *)(a1 + 72);
      v25 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 67241472;
      v46 = v20;
      v47 = 1026;
      v48 = v21;
      v49 = 1026;
      v50 = v22;
      v51 = 1026;
      v52 = v23;
      v53 = 1026;
      v54 = v24;
      v55 = 2050;
      v56 = v25;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,Motion,ped,%{public}d,veh,%{public}d,mov,%{public}d,stationary,%{public}d,likelyBoardedVeh,%{public}d,walkRunDur,%{public}0.2f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
      v26 = *(unsigned __int8 *)(a1 + 104);
      v27 = *(unsigned __int8 *)(a1 + 105);
      v28 = *(unsigned __int8 *)(a1 + 106);
      v29 = *(unsigned __int8 *)(a1 + 107);
      v30 = *(unsigned __int8 *)(a1 + 72);
      v31 = *(_QWORD *)(a1 + 88);
      v34[0] = 67241472;
      v34[1] = v26;
      v35 = 1026;
      v36 = v27;
      v37 = 1026;
      v38 = v28;
      v39 = 1026;
      v40 = v29;
      v41 = 1026;
      v42 = v30;
      v43 = 2050;
      v44 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,Motion,ped,%{public}d,veh,%{public}d,mov,%{public}d,stationary,%{public}d,likelyBoardedVeh,%{public}d,walkRunDur,%{public}0.2f", v34, 42);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    sub_1012EA310(a1);
  }
}

void sub_1012EB34C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _BOOL4 v4;
  char v5;
  BOOL v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  int v31;

  if ((*a2 & 0xFFFFFFFE) == 6)
  {
    if (*(_BYTE *)(a1 + 109))
      v4 = 1;
    else
      v4 = *(_BYTE *)(a1 + 108) != 0;
    v5 = *(_BYTE *)(a3 + 96);
    if (v5)
    {
      v6 = *(_DWORD *)(a3 + 48) > 0;
      v7 = *(_BYTE *)(a3 + 73) == 0;
      if (*(_BYTE *)(a3 + 73))
        v5 = 0;
      else
        v5 = *(_DWORD *)(a3 + 48) > 0;
      *(_BYTE *)(a1 + 109) = v5;
      if (v7)
        v6 = 0;
    }
    else
    {
      v6 = 0;
      *(_BYTE *)(a1 + 109) = 0;
    }
    *(_BYTE *)(a1 + 108) = v6;
    if (v4 && (v5 & 1) == 0 && !v6)
      ++*(_DWORD *)(a1 + 48);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a1 + 109);
      v10 = *(unsigned __int8 *)(a1 + 108);
      v11 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67240960;
      v25 = v9;
      v26 = 1026;
      v27 = v10;
      v28 = 1026;
      v29 = v4;
      v30 = 1026;
      v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,WiFi,associatedStatic,%{public}d,associatedMobile,%{public}d,prevAssociatedStatus,%{public}d,numDisassociations,%{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
      v12 = *(unsigned __int8 *)(a1 + 109);
      v13 = *(unsigned __int8 *)(a1 + 108);
      v14 = *(_DWORD *)(a1 + 48);
      v17[0] = 67240960;
      v17[1] = v12;
      v18 = 1026;
      v19 = v13;
      v20 = 1026;
      v21 = v4;
      v22 = 1026;
      v23 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,rvo,WiFi,associatedStatic,%{public}d,associatedMobile,%{public}d,prevAssociatedStatus,%{public}d,numDisassociations,%{public}d", v17, 26);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedWiFiServiceNotification(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (*(_BYTE *)(a1 + 16))
      sub_1012EA310(a1);
  }
}

uint64_t sub_1012EB5D0(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL4 v10;
  int v11;
  NSObject *v12;
  uint64_t result;
  NSObject *v14;
  double v15;
  double v16;
  _BOOL4 v17;
  double v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v3 = *(double *)(a1 + 64);
  v4 = *(double *)(a2 + 8);
  if (v3 <= 0.0)
  {
    *(double *)(a1 + 64) = v4;
    return 1;
  }
  else
  {
    v6 = v4 - v3;
    *(double *)(a1 + 64) = v4;
    if (v4 - v3 <= 0.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
      v14 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v15 = *(double *)(a2 + 8);
        v16 = *(double *)(a1 + 64);
        *(_DWORD *)buf = 134349312;
        v33 = v15;
        v34 = 2050;
        v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,rvo,IOError,SampleSetRejected,SampleTimeError,currTime,%{public}0.2f,prevTime,%{public}0.2f", buf, 0x16u);
      }
      v17 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v17)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
        v18 = *(double *)(a2 + 8);
        v19 = *(double *)(a1 + 64);
        v24 = 134349312;
        v25 = v18;
        v26 = 2050;
        v27 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLProactiveLoc,rvo,IOError,SampleSetRejected,SampleTimeError,currTime,%{public}0.2f,prevTime,%{public}0.2f", &v24, 22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLProactiveLocationRoutineVisitOverride::shouldAcceptBIODeltaPositionSampleSet(const CLPIOSample &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
        return 0;
      }
    }
    else
    {
      v7 = *(float *)(a2 + 20) / v6;
      v8 = *(float *)(a2 + 24) / v6;
      v9 = *(float *)(a2 + 28) / v6;
      v10 = v7 > 4.0;
      if (v8 > 4.0)
        v10 = 1;
      v11 = v9 > 4.0 || v10;
      if (v11 == 1)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349824;
          v33 = v7;
          v34 = 2050;
          v35 = v8;
          v36 = 2050;
          v37 = v9;
          v38 = 2050;
          v39 = v6;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,rvo,IOError,velX,%{public}0.2f,velY,%{public}0.2f,velZ,%{public}0.2f,timeDeltaSec,%{public}0.2f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
          v24 = 134349824;
          v25 = v7;
          v26 = 2050;
          v27 = v8;
          v28 = 2050;
          v29 = v9;
          v30 = 2050;
          v31 = v6;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLProactiveLoc,rvo,IOError,velX,%{public}0.2f,velY,%{public}0.2f,velZ,%{public}0.2f,timeDeltaSec,%{public}0.2f", &v24, 42);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLProactiveLocationRoutineVisitOverride::shouldAcceptBIODeltaPositionSampleSet(const CLPIOSample &)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
      }
      return v11 ^ 1u;
    }
  }
  return result;
}

void sub_1012EB9B8(uint64_t a1, uint64_t *a2, double a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  __n128 v17;
  unint64_t v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;

  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    a4.n128_u64[0] = 0;
    v7 = 0.0;
    while (v5 != v6)
    {
      if (*(_BYTE *)(v5 + 63))
      {
        v17 = a4;
        if (!sub_1012EB5D0(a1, v5))
          return;
        a4.n128_u64[1] = v17.n128_u64[1];
        a4.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v17.n128_u64[0], *(float32x2_t *)(v5 + 20));
        v7 = v7 + *(float *)(v5 + 28);
      }
      v5 += 72;
    }
    v18 = a4.n128_u64[0];
    *(float32x2_t *)(a1 + 52) = vadd_f32((float32x2_t)a4.n128_u64[0], *(float32x2_t *)(a1 + 52));
    *(float *)(a1 + 60) = v7 + *(float *)(a1 + 60);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(float *)(a1 + 52);
      v10 = *(float *)(a1 + 56);
      v11 = *(float *)(a1 + 60);
      *(_DWORD *)buf = 134350336;
      v32 = *(float *)&v18;
      v33 = 2050;
      v34 = *((float *)&v18 + 1);
      v35 = 2050;
      v36 = v7;
      v37 = 2050;
      v38 = v9;
      v39 = 2050;
      v40 = v10;
      v41 = 2050;
      v42 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,rvo,IO,d_X,%{public}0.1f,d_Y,%{public}0.1f,d_Z,%{public}0.1f,cumulativeX,%{public}0.1f,cumulativeY,%{public}0.1f,cumulativeZ,%{public}0.1f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021ADCC0);
      v12 = *(float *)(a1 + 52);
      v13 = *(float *)(a1 + 56);
      v14 = *(float *)(a1 + 60);
      v19 = 134350336;
      v20 = *(float *)&v18;
      v21 = 2050;
      v22 = *((float *)&v18 + 1);
      v23 = 2050;
      v24 = v7;
      v25 = 2050;
      v26 = v12;
      v27 = 2050;
      v28 = v13;
      v29 = 2050;
      v30 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,rvo,IO,d_X,%{public}0.1f,d_Y,%{public}0.1f,d_Z,%{public}0.1f,cumulativeX,%{public}0.1f,cumulativeY,%{public}0.1f,cumulativeZ,%{public}0.1f", &v19, 62);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_1012EBC80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    sub_1012EA310(a1);
}

uint64_t sub_1012EBC90(uint64_t result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;

  *(_QWORD *)(a2 + 140) = *(_QWORD *)(result + 112);
  *(_DWORD *)(a2 + 148) = *(_DWORD *)(result + 120);
  v2 = *(float **)(result + 128);
  v3 = *(float **)(result + 136);
  if (v2 != v3)
  {
    v4 = v2 + 1;
    v5 = *(float **)(result + 128);
    if (v2 + 1 != v3)
    {
      v6 = *v2;
      v5 = *(float **)(result + 128);
      v7 = v2 + 1;
      do
      {
        v8 = *v7++;
        v9 = v8;
        if (v6 < v8)
        {
          v6 = v9;
          v5 = v4;
        }
        v4 = v7;
      }
      while (v7 != v3);
    }
    *(_DWORD *)(a2 + 152) = *v5;
    v10 = 0.0;
    v11 = v2;
    do
    {
      v12 = *v11++;
      v10 = v10 + v12;
    }
    while (v11 != v3);
    if (v10 > 0.0)
      *(_DWORD *)(a2 + 156) = (float)(v10 / (float)(unint64_t)(v3 - v2));
  }
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 136) = v2;
  return result;
}

void sub_1012EBD38(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1012EBD64(uint64_t a1, void *a2)
{
  CLMotionActivity *v3;

  v3 = (CLMotionActivity *)sub_10130664C(a1, a2);
  *(_QWORD *)&v3->type = off_1021ADCF0;
  *(_QWORD *)&v3[1].isStanding = 0;
  v3[1].estExitTime = 0.0;
  *(_QWORD *)&v3[1].isVehicleConnected = (char *)v3 + 136;
  *(_QWORD *)&v3[1].vehicleType = 0;
  v3[1].timestamp = 0.0;
  *(_DWORD *)&v3[1].fsmTransitionData.fConsecStatic = 0;
  CLMotionActivity::getInit(v3);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_BYTE *)(a1 + 320) = 0;
  sub_1012AF26C();
}

void sub_1012EBE9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD **v4;
  uint64_t v6;
  uint64_t v7;

  sub_100364238(v1 + 296, *v4);
  sub_100090AE4(v2, *(char **)(v1 + 136));
  v6 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v3;
  *v3 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101306714(v1);
  _Unwind_Resume(a1);
}

void sub_1012EBF08(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLERangeManagerConcrete::onBeaconNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLERangeManagerConcrete::onBeaconNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLERangeManagerConcrete::onBeaconNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012EE15C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1012EC0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1012EC0E0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLERangeManagerConcrete::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLERangeManagerConcrete::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLERangeManagerConcrete::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012EF250(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1012EC298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012EC2BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021ADCF0;
  sub_1012EC360(a1);
  sub_100364238(a1 + 296, *(_QWORD **)(a1 + 304));
  sub_100090AE4(a1 + 128, *(char **)(a1 + 136));
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_101306714(a1);
}

void sub_1012EC33C(uint64_t a1)
{
  sub_1012EC2BC(a1);
  operator delete();
}

void sub_1012EC360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  sub_1012EC450((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD **)(a1 + 128);
  v5 = (_QWORD *)(a1 + 136);
  if (v4 != (_QWORD *)(a1 + 136))
  {
    do
    {
      v6 = v4[7];
      if (v6)
      {
        sub_1012F0C4C(v6);
        operator delete();
      }
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v5);
  }
  sub_100090AE4(a1 + 128, *(char **)(a1 + 136));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v5;
  sub_100364238(a1 + 296, *(_QWORD **)(a1 + 304));
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
}

_BYTE *sub_1012EC450(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (result[320])
  {
    v1 = result;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v3 = *((_QWORD *)v1 + 39);
      v4[0] = 68289282;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2050;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Stopping range manager\", \"totalRegions\":%{public}lu}", (uint8_t *)v4, 0x1Cu);
    }
    v1[320] = 0;
    objc_msgSend(objc_msgSend(objc_msgSend(*((id *)v1 + 4), "vendor"), "proxyForService:", CFSTR("CLBTLEBeaconProvider")), "stopScan");
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 15) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 15) + 8), 1);
    return objc_msgSend(*(id *)(*((_QWORD *)v1 + 14) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 14) + 8), 0);
  }
  return result;
}

BOOL sub_1012EC57C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  _BOOL8 v7;
  _BOOL8 v8;
  uint64_t i;
  int v10;
  _QWORD *v11;
  void (***v12)(_QWORD);
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const std::string *j;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t k;
  _BOOL4 v22;
  void **v23[2];
  uint8_t buf[8];
  _BYTE __p[40];
  __int128 v26;
  uint64_t v27;

  v7 = sub_1012ECA70(a1, a2, a3, a4);
  v8 = v7;
  if (v7)
  {
    v22 = v7;
    for (i = *(_QWORD *)(a4 + 8); i != a4; i = *(_QWORD *)(i + 8))
    {
      memset(__p, 0, 36);
      *(_QWORD *)buf = off_1021ADE18;
      std::string::operator=((std::string *)__p, (const std::string *)(i + 24));
      v10 = *(_DWORD *)(i + 52);
      *(_DWORD *)&__p[24] = *(_DWORD *)(i + 48);
      *(_DWORD *)&__p[28] = v10;
      v11 = sub_1012F1AEC(a1 + 296, (uint64_t)buf);
      v12 = (void (***)(_QWORD))v11;
      if ((_QWORD *)(a1 + 304) == v11)
      {
        *(_DWORD *)&__p[32] = 1;
      }
      else
      {
        *(_DWORD *)&__p[32] = *((_DWORD *)v11 + 18) + 1;
        sub_10008A9F0((uint64_t **)(a1 + 296), v11);
        (*v12[4])(v12 + 4);
        operator delete(v12);
      }
      sub_1012F1C60((uint64_t **)(a1 + 296), (uint64_t)buf, (uint64_t)buf);
      *(_QWORD *)buf = off_10213F058;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v13 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a4 + 16);
      v15 = *(_QWORD *)(a1 + 312);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)__p = 2082;
      *(_QWORD *)&__p[2] = "";
      *(_WORD *)&__p[10] = 2050;
      *(_QWORD *)&__p[12] = v14;
      *(_WORD *)&__p[20] = 2050;
      *(_QWORD *)&__p[22] = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Registered regions for ranging\", \"numRegions\":%{public}lu, \"totalRegions\":%{public}lu}", buf, 0x26u);
    }
    if (*(_DWORD *)(a1 + 152))
    {
      *(_QWORD *)__p = off_10213F058;
      memset(&__p[8], 0, 32);
      v26 = 0u;
      v27 = 0;
      *(_DWORD *)buf = 1;
      for (j = *(const std::string **)(a4 + 8);
            j != (const std::string *)a4;
            j = (const std::string *)j->__r_.__value_.__l.__size_)
      {
        std::string::operator=((std::string *)&__p[8], j + 1);
        *(_QWORD *)&__p[32] = j[2].__r_.__value_.__l.__data_;
        LODWORD(v23[0]) = 0;
        (*(void (**)(uint64_t, void ***, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v23, buf, 0, a2, 0);
      }
      v23[0] = (void **)&v26;
      sub_1012F0D5C(v23);
      *(_QWORD *)__p = off_10213F058;
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      v8 = v22;
    }
    else
    {
      sub_1012ECFB0(a1);
      v8 = v22;
    }
    if (sub_1001DFAE8())
    {
      sub_100119F3C(v23);
      for (k = *(_QWORD *)(a4 + 8); k != a4; k = *(_QWORD *)(k + 8))
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)(k + 16) + 16))(buf, k + 16);
        sub_10052A3B8((uint64_t)v23, "ranging_register", (char *)buf);
        if ((__p[15] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      sub_1001DFAF4((uint64_t)v23, (uint64_t)"locationd");
      sub_10011A5A8(v23);
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v17 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unable to register with base-class", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "Unable to register with base-class", v23, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLERangeManagerConcrete::registerForNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  return v8;
}

void sub_1012EC9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, void *a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_10011A5A8(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1012ECA70(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  _BYTE buf[32];
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v38 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v39;
        v34 = (uint64_t *)(sub_1012F12BC((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
        if (v34 != (uint64_t *)a4)
          sub_1012E96C0(v34, *(_QWORD *)(a4 + 8), a4);
        *(_DWORD *)buf = 0;
        *(_QWORD *)&buf[8] = off_10213F058;
        *(_OWORD *)&buf[16] = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1012F0FB8();
        }
        *(_QWORD *)v40 = &v45;
        sub_1012F0D5C((void ***)v40);
        *(_QWORD *)&buf[8] = off_10213F058;
        if (SBYTE7(v44) < 0)
          operator delete(*(void **)&buf[16]);
        if (v33)
          goto LABEL_45;
      }
      else
      {
LABEL_42:
        v29 = byte_1022FE7C8;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v39;
        v32 = (uint64_t *)(sub_1012F12BC(v31 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
        if (v32 != (uint64_t *)a4)
          sub_1012E96C0(v32, *(_QWORD *)(a4 + 8), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_45:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v35;
    v41 = 1026;
    v42 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v40,
      18);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_1012ECF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1012ECF58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012ECF58(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_1012F0D5C(&v3);
  *(_QWORD *)(a1 + 8) = off_10213F058;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1012ECFB0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint8_t buf[1640];

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADE48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Starting the manager if there's an interest in ranging", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    LOWORD(v10[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Starting the manager if there's an interest in ranging", v10, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStartIfInterested()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(_BYTE *)(a1 + 320))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: The manager is already started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      LOWORD(v10[0]) = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: The manager is already started", v10, v9, v10[0]);
LABEL_24:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStartIfInterested()", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 152) && *(_QWORD *)(a1 + 312))
    {
      sub_1012EF698((_BYTE *)a1);
      return;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v5 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: There's no interest in ranging, the manager wont be started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      LOWORD(v10[0]) = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: There's no interest in ranging, the manager wont be started", v10, v9, v10[0]);
      goto LABEL_24;
    }
  }
}

BOOL sub_1012ED354(uint64_t a1, int a2, int *a3)
{
  int *v3;
  uint64_t *i;
  int v7;
  _QWORD *v8;
  void (***v9)(_QWORD);
  NSObject *v10;
  uint64_t v11;
  uint64_t *j;
  NSObject *v13;
  _BOOL8 v14;
  const char *v16;
  uint8_t *v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint8_t buf[8];
  _BYTE __p[32];
  int v24;
  _DWORD v25[4];

  v3 = a3;
  v19 = (uint64_t)&v19;
  v20 = &v19;
  v21 = 0;
  if (sub_1012ED7D4(a1, a2, a3, &v19))
  {
    v18 = v3;
    for (i = v20; i != &v19; i = (uint64_t *)i[1])
    {
      memset(__p, 0, sizeof(__p));
      *(_QWORD *)buf = off_1021ADE18;
      v24 = 0;
      std::string::operator=((std::string *)__p, (const std::string *)i + 1);
      v7 = *((_DWORD *)i + 13);
      *(_DWORD *)&__p[24] = *((_DWORD *)i + 12);
      *(_DWORD *)&__p[28] = v7;
      v8 = sub_1012F1AEC(a1 + 296, (uint64_t)buf);
      v9 = (void (***)(_QWORD))v8;
      if ((_QWORD *)(a1 + 304) != v8)
      {
        v24 = *((_DWORD *)v8 + 18) - 1;
        sub_10008A9F0((uint64_t **)(a1 + 296), v8);
        (*v9[4])(v9 + 4);
        operator delete(v9);
        if (v24)
          sub_1012F1C60((uint64_t **)(a1 + 296), (uint64_t)buf, (uint64_t)buf);
      }
      *(_QWORD *)buf = off_10213F058;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v3 = v18;
    v10 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 312);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)__p = 2082;
      *(_QWORD *)&__p[2] = "";
      *(_WORD *)&__p[10] = 2050;
      *(_QWORD *)&__p[12] = v21;
      *(_WORD *)&__p[20] = 2050;
      *(_QWORD *)&__p[22] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Unregistered regions from ranging\", \"numRegions\":%{public}lu, \"totalRegions\":%{public}lu}", buf, 0x26u);
    }
    sub_1012ED88C(a1);
    if (sub_1001DFAE8())
    {
      sub_100119F3C(v25);
      for (j = v20; j != &v19; j = (uint64_t *)j[1])
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t *))(j[2] + 16))(buf, j + 2);
        sub_10052A3B8((uint64_t)v25, "ranging_unregister", (char *)buf);
        if ((__p[15] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      sub_1001DFAF4((uint64_t)v25, (uint64_t)"locationd");
      sub_10011A5A8(v25);
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v13 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Warning Unable to retrieve registration info for client,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      v25[0] = 67240192;
      v25[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "#Warning Unable to retrieve registration info for client,%{public}d", v25, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLERangeManagerConcrete::unregisterForNotification(int, const CLBTLERangeManager_Type::Notification &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v14 = sub_1012EDC34((char *)a1, a2, v3);
  sub_1000CAD6C(&v19);
  return v14;
}

void sub_1012ED760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  sub_1000CAD6C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1012ED7D4(uint64_t a1, int a2, int *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;

  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v6 = v7;
  if (!v7)
    return 0;
  v8 = *a3;
  v9 = v5;
  do
  {
    v10 = *(_DWORD *)(v6 + 32);
    v11 = v10 < v8;
    if (v10 >= v8)
      v12 = (uint64_t *)v6;
    else
      v12 = (uint64_t *)(v6 + 8);
    if (!v11)
      v9 = v6;
    v6 = *v12;
  }
  while (*v12);
  if (v9 == v5)
    return 0;
  if (v8 < *(_DWORD *)(v9 + 32))
    return 0;
  v15 = *(_QWORD *)(v9 + 48);
  v13 = v9 + 48;
  v14 = v15;
  if (!v15)
    return 0;
  v16 = v13;
  do
  {
    v17 = *(_DWORD *)(v14 + 32);
    v18 = v17 < a2;
    if (v17 >= a2)
      v19 = (uint64_t *)v14;
    else
      v19 = (uint64_t *)(v14 + 8);
    if (!v18)
      v16 = v14;
    v14 = *v19;
  }
  while (*v19);
  if (v16 == v13 || *(_DWORD *)(v16 + 32) > a2)
    return 0;
  if ((uint64_t *)(v16 + 40) != a4)
    sub_1012E96C0(a4, *(_QWORD *)(v16 + 48), v16 + 40);
  return 1;
}

void sub_1012ED88C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint8_t buf[1640];

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADE48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Stopping the manager if there's no interest in ranging", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    LOWORD(v10[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Stopping the manager if there's no interest in ranging", v10, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStopIfNotInterested()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (!*(_BYTE *)(a1 + 320))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB:The manager is already stopped", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    LOWORD(v10[0]) = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB:The manager is already stopped", v10, v9, v10[0]);
LABEL_31:
    v8 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStopIfNotInterested()", "%s\n", v4);
    if (v8 != buf)
      free(v8);
    return;
  }
  if (*(_DWORD *)(a1 + 152) || !*(_QWORD *)(a1 + 312))
  {
    sub_1012EC450((_BYTE *)a1);
    return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADE48);
  v5 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: There's an interest in ranging, the manager wont be stopped", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    LOWORD(v10[0]) = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: There's an interest in ranging, the manager wont be stopped", v10, v9, v10[0]);
    goto LABEL_31;
  }
}

BOOL sub_1012EDC34(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1012F2994((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t *sub_1012EDFBC(uint64_t *a1)
{
  sub_1000CAD6C(a1);
  return a1;
}

uint64_t sub_1012EDFE0()
{
  return 1;
}

uint64_t sub_1012EDFE8(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADE48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Range manager has lost its last connection\"}", (uint8_t *)v4, 0x12u);
  }
  sub_1012EC450((_BYTE *)a1);
  sub_100364238(a1 + 296, *(_QWORD **)(a1 + 304));
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  return 1;
}

uint64_t sub_1012EE0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;

  v6 = *(_QWORD *)(a6 + 8);
  if (v6 == a6)
    return 0;
  v9 = a4 + 8;
  while (v9 != v6 + 16 && (*(_DWORD *)(a4 + 44) != *(_DWORD *)(v6 + 52) || (sub_100C33DF0(v9, v6 + 16) & 1) == 0))
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 == a6)
      return 0;
  }
  return 1;
}

void sub_1012EE15C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double Current;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  double v21;
  _QWORD *v22;
  double v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  NSObject *v31;
  __int128 *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 *v35;
  const char *v36;
  char *v37;
  int v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v43;
  int v44;
  _BYTE v45[14];
  __int16 v46;
  int v47;
  void *v48;
  char *v49;
  uint64_t v50;
  void *__p;
  uint64_t (**v52)();
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  _BYTE buf[40];
  int v58;
  unint64_t v59;
  __int16 v60;
  void *v61;
  void *v62;
  uint64_t v63;

  if (*a3)
  {
    if (*a3 == 2)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      v5 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(unsigned __int8 *)(a4 + 112);
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: Received Bluetooth LE power,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ADE48);
        v38 = *(unsigned __int8 *)(a4 + 112);
        LODWORD(__p) = 67240192;
        HIDWORD(__p) = v38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Received Bluetooth LE power,%{public}d", &__p, 8);
        v40 = (char *)v39;
        sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
      if (*(_BYTE *)(a4 + 112))
        sub_1012EED20(a1, 1);
      else
        sub_1012EEF0C((_BYTE *)a1, 1);
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a4 + 16);
      v9 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v8;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Received proximity scan, updating beacon cache with devices\", \"samples\":%{public}lu, \"totalCached\":%{public}lu}", buf, 0x26u);
    }
    for (i = *(_QWORD *)(a4 + 8); i != a4; i = *(_QWORD *)(i + 8))
    {
      v11 = sub_10019C4C0(a1 + 128, (const void **)(i + 16));
      if (a1 + 136 == v11)
        operator new();
      v13 = v11 + 56;
      v12 = *(_QWORD *)(v11 + 56);
      std::string::operator=((std::string *)(v12 + 8), (const std::string *)(i + 56));
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(i + 80);
      sub_1012DBF60(*(_QWORD *)(*(_QWORD *)v13 + 40), *(__int16 *)(i + 40), *(_WORD *)(i + 96), *(double *)(i + 88));
      if (*(double *)(*(_QWORD *)v13 + 48) < *(double *)(i + 88))
        *(_QWORD *)(*(_QWORD *)v13 + 48) = *(_QWORD *)(i + 88);
    }
    Current = CFAbsoluteTimeGetCurrent();
    v15 = *(_QWORD **)(a1 + 128);
    v43 = (_QWORD *)(a1 + 128);
    v16 = (_QWORD *)(a1 + 136);
    if (v15 != (_QWORD *)(a1 + 136))
    {
      do
      {
        v17 = v15[7];
        if (*(double *)(v17 + 48) < Current + -10.0)
        {
          sub_1012F0C4C(v17);
          operator delete();
        }
        v18 = (_QWORD *)v15[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v20 = v15;
            v15 = (_QWORD *)v15[2];
          }
          while ((_QWORD *)*v15 != v20);
          v19 = v15;
        }
        v15 = v19;
      }
      while (v19 != v16);
    }
    v21 = CFAbsoluteTimeGetCurrent();
    v22 = *(_QWORD **)(a1 + 296);
    if (v22 != (_QWORD *)(a1 + 304))
    {
      v23 = v21;
      do
      {
        LODWORD(__p) = 0;
        v52 = off_10213F058;
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        v56 = 0;
        std::string::operator=((std::string *)&v53, (const std::string *)(v22 + 5));
        *((_QWORD *)&v54 + 1) = v22[8];
        v24 = (_QWORD *)*v43;
        if ((_QWORD *)*v43 != v16)
        {
          do
          {
            if (sub_100C33DF0((uint64_t)&v52, v24[7]))
            {
              memset(&buf[8], 0, 32);
              v58 = 0;
              *(_QWORD *)buf = off_10213F058;
              v59 = 0xBFF0000000000000;
              v60 = 0;
              v62 = 0;
              v63 = 0;
              v61 = 0;
              v25 = v24[7];
              std::string::operator=((std::string *)&buf[8], (const std::string *)(v25 + 8));
              *(_QWORD *)&buf[32] = *(_QWORD *)(v25 + 32);
              v44 = 0;
              *(_QWORD *)&v45[4] = 0xBFF0000000000000;
              *(_WORD *)&v45[12] = 0;
              v49 = 0;
              v50 = 0;
              v48 = 0;
              if (sub_1012DC0F4(*(_QWORD *)(v24[7] + 40), (unsigned int *)(a1 + 160), &v44, (uint64_t *)&buf[8], (unsigned __int16 *)&buf[32], (unsigned __int16 *)&buf[34], v23))
              {
                v58 = v44;
                v59 = *(_QWORD *)&v45[4];
                v60 = *(_WORD *)&v45[12];
                sub_100A38C94(&v61, (char *)v48, v49, v49 - (_BYTE *)v48);
              }
              else
              {
                v58 = 0;
                v59 = 0xBFF0000000000000;
                v60 = 0;
                v62 = v61;
              }
              v26 = *((_QWORD *)&v55 + 1);
              if (*((_QWORD *)&v55 + 1) >= v56)
              {
                v27 = sub_1012F2A14((uint64_t *)&v55, (uint64_t)buf);
              }
              else
              {
                sub_1012F1588((uint64_t)&v56, *((uint64_t *)&v55 + 1), (uint64_t)buf);
                v27 = v26 + 88;
              }
              *((_QWORD *)&v55 + 1) = v27;
              if (v48)
              {
                v49 = (char *)v48;
                operator delete(v48);
              }
              if (v61)
              {
                v62 = v61;
                operator delete(v61);
              }
              *(_QWORD *)buf = off_10213F058;
              if ((buf[31] & 0x80000000) != 0)
                operator delete(*(void **)&buf[8]);
            }
            v28 = (_QWORD *)v24[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v24[2];
                v30 = *v29 == (_QWORD)v24;
                v24 = v29;
              }
              while (!v30);
            }
            v24 = v29;
          }
          while (v29 != v16);
        }
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ADE48);
        v31 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
        {
          v32 = &v53;
          if (SBYTE7(v54) < 0)
            v32 = (__int128 *)v53;
          *(_DWORD *)buf = 136381699;
          *(_QWORD *)&buf[4] = v32;
          *(_WORD *)&buf[12] = 1025;
          *(_DWORD *)&buf[14] = WORD4(v54);
          *(_WORD *)&buf[18] = 1025;
          *(_DWORD *)&buf[20] = WORD5(v54);
          *(_WORD *)&buf[24] = 1026;
          *(_DWORD *)&buf[26] = HIDWORD(v54);
          *(_WORD *)&buf[30] = 2050;
          *(_QWORD *)&buf[32] = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v55 + 1) - v55) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "iB: Notifying region proximityUUID,'%{private}s', major,%{private}d, minor,%{private}d, mask,%{public}d with beacons,%{public}zu", buf, 0x28u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ADE48);
          v35 = &v53;
          if (SBYTE7(v54) < 0)
            v35 = (__int128 *)v53;
          v44 = 136381699;
          *(_QWORD *)v45 = v35;
          *(_WORD *)&v45[8] = 1025;
          *(_DWORD *)&v45[10] = WORD4(v54);
          v46 = 1025;
          v47 = WORD5(v54);
          LOWORD(v48) = 1026;
          *(_DWORD *)((char *)&v48 + 2) = HIDWORD(v54);
          HIWORD(v48) = 2050;
          v49 = (char *)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v55 + 1) - v55) >> 3));
          LODWORD(v41) = 40;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Notifying region proximityUUID,'%{private}s', major,%{private}d, minor,%{private}d, mask,%{public}d with beacons,%{public}zu", &v44, v41);
          v37 = (char *)v36;
          sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, _BYTE *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &__p, 0, 0xFFFFFFFFLL, 0);
        *(_QWORD *)buf = &v55;
        sub_1012F0D5C((void ***)buf);
        v52 = off_10213F058;
        if (SBYTE7(v54) < 0)
          operator delete((void *)v53);
        v33 = (_QWORD *)v22[1];
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v22[2];
            v30 = *v34 == (_QWORD)v22;
            v22 = v34;
          }
          while (!v30);
        }
        v22 = v34;
      }
      while (v34 != (_QWORD *)(a1 + 304));
    }
  }
}

void sub_1012EECA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_1012ECF58((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_1012EED20(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if ((*(_DWORD *)(a1 + 152) & a2) != 0)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 152);
      *(_DWORD *)buf = 67240448;
      v13 = a2;
      v14 = 1026;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing exception,%{public}#x, from stored exceptions %{public}#x.\n", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      v6 = *(_DWORD *)(a1 + 152);
      v9[0] = 67240448;
      v9[1] = a2;
      v10 = 1026;
      v11 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Removing exception,%{public}#x, from stored exceptions %{public}#x.\n", v9, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedResumeForException(RangingExceptions)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_DWORD *)(a1 + 152) &= ~a2;
    sub_1012ECFB0(a1);
  }
}

_BYTE *sub_1012EEF0C(_BYTE *result, int a2)
{
  int v2;
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  void **v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  uint64_t (**v20)();
  void *__p[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v2 = *((_DWORD *)result + 38);
  if ((v2 & a2) == 0)
  {
    v4 = result;
    if (a2 && !v2)
    {
      v20 = off_10213F058;
      *(_OWORD *)__p = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      *(_DWORD *)buf = 1;
      v5 = (_QWORD *)*((_QWORD *)result + 37);
      v6 = result + 304;
      if (v5 != (_QWORD *)(result + 304))
      {
        do
        {
          std::string::operator=((std::string *)__p, (const std::string *)(v5 + 5));
          *((_QWORD *)&v22 + 1) = v5[8];
          LODWORD(v15) = 0;
          (*(void (**)(_DWORD *, void ***, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 152))(v4, &v15, buf, 0, 0xFFFFFFFFLL, 0);
          v7 = (_QWORD *)v5[1];
          if (v7)
          {
            do
            {
              v8 = v7;
              v7 = (_QWORD *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v5[2];
              v9 = *v8 == (_QWORD)v5;
              v5 = v8;
            }
            while (!v9);
          }
          v5 = v8;
        }
        while (v8 != v6);
      }
      v15 = (void **)&v23;
      sub_1012F0D5C(&v15);
      v20 = off_10213F058;
      if (SBYTE7(v22) < 0)
        operator delete(__p[0]);
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v10 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v11 = v4[38];
      *(_DWORD *)buf = 67240448;
      v19 = a2;
      LOWORD(v20) = 1026;
      *(_DWORD *)((char *)&v20 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iB: Adding exception,%{public}#x, to stored exceptions %{public}#x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      v12 = v4[38];
      LODWORD(v15) = 67240448;
      HIDWORD(v15) = a2;
      v16 = 1026;
      v17 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Adding exception,%{public}#x, to stored exceptions %{public}#x", &v15, 14);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedSuspendForException(RangingExceptions)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v4[38] |= a2;
    return sub_1012EC450(v4);
  }
  return result;
}

void sub_1012EF1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012EF200(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1012EF250(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5;
  BOOL v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  NSObject *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  uint8_t *v27;
  _QWORD v28[2];
  uint8_t buf[4];
  int v30;

  v5 = *a3;
  if (*a3)
    v6 = v5 == 2;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a3;
      *(_DWORD *)buf = 67240192;
      v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning Unexpected notification %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v9 = *a3;
    LODWORD(v28[0]) = 67240192;
    HIDWORD(v28[0]) = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "#Warning Unexpected notification %{public}d", v28, 8, v28[0]);
LABEL_34:
    v27 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v10);
    if (v27 != buf)
      free(v27);
    return;
  }
  if (v5 == 1)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v13 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v14 = *a4;
      *(_DWORD *)buf = 67174657;
      v30 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "iB: Received activity update of activity,%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADE48);
      v23 = *a4;
      LODWORD(v28[0]) = 67174657;
      HIDWORD(v28[0]) = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Received activity update of activity,%{private}d", v28, 8);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    *(_OWORD *)(a1 + 160) = *(_OWORD *)a4;
    v15 = *((_OWORD *)a4 + 1);
    v16 = *((_OWORD *)a4 + 2);
    v17 = *((_OWORD *)a4 + 4);
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a4 + 3);
    *(_OWORD *)(a1 + 224) = v17;
    *(_OWORD *)(a1 + 176) = v15;
    *(_OWORD *)(a1 + 192) = v16;
    v18 = *((_OWORD *)a4 + 5);
    v19 = *((_OWORD *)a4 + 6);
    v20 = *((_OWORD *)a4 + 7);
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a4 + 16);
    *(_OWORD *)(a1 + 256) = v19;
    *(_OWORD *)(a1 + 272) = v20;
    *(_OWORD *)(a1 + 240) = v18;
    return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ADE48);
  v21 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    v22 = *a3;
    *(_DWORD *)buf = 67240192;
    v30 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Warning Unhandled notification %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v26 = *a3;
    LODWORD(v28[0]) = 67240192;
    HIDWORD(v28[0]) = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "#Warning Unhandled notification %{public}d", v28, 8, v28[0]);
    goto LABEL_34;
  }
}

_BYTE *sub_1012EF698(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (!result[320])
  {
    v1 = result;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ADE48);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v3 = *((_QWORD *)v1 + 39);
      v4[0] = 68289282;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2050;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Starting range manager\", \"totalRegions\":%{public}lu}", (uint8_t *)v4, 0x1Cu);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 14) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 14) + 8), 0, 0);
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 15) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 15) + 8), 1, 0);
    result = objc_msgSend(objc_msgSend(objc_msgSend(*((id *)v1 + 4), "vendor"), "proxyForService:", CFSTR("CLBTLEBeaconProvider")), "startScan");
    v1[320] = 1;
  }
  return result;
}

void sub_1012EF7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::removeClient(int) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1012EFA4C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1012F2D6C(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1012EFACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = atomic_load((unsigned __int8 *)&qword_1022FE7E8);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v5 = __cxa_guard_acquire(&qword_1022FE7E8);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_1022FE7D0 = (uint64_t)&qword_1022FE7D0;
      *(_QWORD *)algn_1022FE7D8 = &qword_1022FE7D0;
      qword_1022FE7E0 = 0;
      __cxa_atexit((void (*)(void *))sub_1012EDFBC, &qword_1022FE7D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022FE7E8);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &qword_1022FE7D0);
}

BOOL sub_1012EFB74(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1012EFDF4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_DWORD *)a3 = *(_DWORD *)v12;
  std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v12 + 16));
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(v12 + 40);
  if (v12 != a3)
    sub_1012F3164(a3 + 48, *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v12 + 56) - *(_QWORD *)(v12 + 48)) >> 3));
  return 1;
}

uint64_t sub_1012EFEB0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1012F26DC(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1012EFF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012EFF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t (**v5)();
  void *__p[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v4 = 0;
  v5 = off_10213F058;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  v10 = (void **)&v8;
  sub_1012F0D5C(&v10);
  v5 = off_10213F058;
  if (SBYTE7(v7) < 0)
    operator delete(__p[0]);
}

void sub_1012EFFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1012ECF58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1012F000C(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1012F24A4((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1012F23BC((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1012F1274((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_1012F1274((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1012F26DC(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1012F1E8C();
    os_activity_scope_leave(&state);
  }
}

void sub_1012F0628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1012F0674(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1012F0C20(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1012F0C4C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    sub_10055D4D0(v2 + 272);
    sub_100E60C0C(v2 + 176);
    v3 = *(void **)(v2 + 112);
    if (v3)
    {
      *(_QWORD *)(v2 + 120) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1012F0CE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_1012F0D30(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1012F0D5C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_1012F0DE0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1012F0DE0(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 64);
  if (v3)
  {
    *(_QWORD *)(a2 + 72) = v3;
    operator delete(v3);
  }
  *(_QWORD *)a2 = off_10213F058;
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_1012F0E34(uint64_t a1, uint64_t a2, int a3)
{
  float v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_10213F058;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = (float)a3;
  v4 = 0x3FE666663F800000;
  v5 = 65436;
  v6 = xmmword_101C49E10;
  v7 = xmmword_101C49E20;
  v8 = xmmword_101C49E30;
  v9 = 1092616192;
  v10 = 3;
  operator new();
}

void sub_1012F0F58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1012F0FB8()
{
  operator new();
}

void sub_1012F10CC()
{
  operator delete();
}

_BYTE *sub_1012F1110(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1012F16C8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1012F12BC(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1012F11EC(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100261F44((uint64_t)(a2 + 8));
    sub_1012F1274((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_1012F1240(uint64_t a1)
{
  sub_100261F44(a1 + 24);
  sub_1012F1274(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1012F1274(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1012F1274(a1, *a2);
    sub_1012F1274(a1, a2[1]);
    sub_1000CAD6C(a2 + 5);
    operator delete(a2);
  }
}

uint64_t **sub_1012F12BC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x40uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = v12 + 10;
    *((_QWORD *)v12 + 6) = v12 + 10;
    *((_QWORD *)v12 + 7) = 0;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1012F13A8((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1012F13A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1000CAD6C(v2 + 5);
    operator delete(v2);
  }
}

uint64_t sub_1012F13EC(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = (void **)(v1 + 48);
    sub_1012F0D5C(&v2);
    *(_QWORD *)(v1 + 8) = off_10213F058;
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

_QWORD *sub_1012F145C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A2F6C(result, a4);
    result = (_QWORD *)sub_1012F14E0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1012F14C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1012F0D5C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1012F14E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1012F1588(a1, v4, v6);
      v6 += 88;
      v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1012F1644((uint64_t)v9);
  return v4;
}

void sub_1012F1574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1012F1644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012F1588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;

  *(_QWORD *)a2 = off_10213F058;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 40);
  v8 = *(_WORD *)(a3 + 56);
  *(_QWORD *)(a2 + 64) = 0;
  *(_WORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return sub_1007855D8((_QWORD *)(a2 + 64), *(const void **)(a3 + 64), *(_QWORD *)(a3 + 72), *(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64));
}

void sub_1012F1620(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)v2 = v3 + 16;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012F1644(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1012F1678((uint64_t *)a1);
  return a1;
}

void sub_1012F1678(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      sub_1012F0DE0(v5, v3);
    }
    while (v3 != v4);
  }
}

id sub_1012F16C8(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1012F1714(a1);
  else
    return 0;
}

id sub_1012F1714(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49E8ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49E8ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBTLERangeManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1012F1AC0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_1012F1AEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1012F1B64((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1012F1B64(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

BOOL sub_1012F1B64(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  unsigned __int8 v5;
  size_t v6;
  void **v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  int v11;
  _QWORD v13[2];
  unsigned __int8 v14;
  void *__p[2];
  unsigned __int8 v16;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v13, a2);
  v3 = (char)v14;
  v4 = (void *)v13[0];
  v5 = v16;
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = (size_t)__p[1];
  if ((v16 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = v13[1];
  if ((v14 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (_QWORD *)v13[0];
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((v16 & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v11)
    return v11 < 0;
  else
    return v6 < v8;
}

void sub_1012F1C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1012F1C60(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_1012F1CDC((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1012F1D6C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000145B0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_1012F1CDC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_1012F1B64(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1012F1B64(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_BYTE *sub_1012F1D6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1012F1DD8(v5, (uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1012F1DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1003653C8(v1, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_1012F1DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;

  *(_QWORD *)a2 = off_10213F058;
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)result = v6;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)a2 = off_1021ADE18;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  return result;
}

uint64_t sub_1012F1E54(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  sub_100261F44(a1 + 32);
  sub_1012F1274(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1012F1E8C()
{
  operator new();
}

void sub_1012F1FA0()
{
  operator delete();
}

void sub_1012F1FE4(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1012F16C8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1012F1110(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021ADDE8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

__n128 *sub_1012F23BC(uint64_t **a1, __n128 *a2)
{
  uint64_t **v4;
  __n128 *v5;
  uint64_t *v6;
  signed __int32 v7;
  uint64_t **v8;
  signed __int32 v9;
  uint64_t **v11;
  char v12;

  v4 = a1 + 1;
  v5 = (__n128 *)operator new(0x58uLL);
  v11 = v4;
  sub_1004A6D08(v5 + 2, a2);
  v12 = 1;
  v6 = a1[1];
  if (v6)
  {
    v7 = v5[2].n128_i32[0];
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v7 >= v9)
          break;
        v6 = *v8;
        v4 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v4 = v8 + 1;
        goto LABEL_10;
      }
    }
    sub_1012F11EC((uint64_t)&v11, v5);
    return (__n128 *)v8;
  }
  else
  {
    v8 = v4;
LABEL_10:
    sub_1000145B0(a1, (uint64_t)v8, v4, (uint64_t *)v5);
  }
  return v5;
}

uint64_t sub_1012F24A4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1012F2500((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_1012F2500(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1012F2554(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1012F253C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1012F1274(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1012F2554(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1012F25D8(v5, v6, v4 + 8, v4 + 8);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1012F25D8(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t *v12;

  v6 = sub_10034258C(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_1012F266C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1012F13A8((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_1012F266C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = sub_100B0BC38((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1012F26C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1012F13A8(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012F26DC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1012F2734(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012F2720(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012F2734(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021ADE98;
  a1[1] = 0;
  sub_1012F2804((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1012F2780(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012F2794(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021ADE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012F27A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021ADE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1012F27DC(uint64_t a1)
{
  char v1;

  sub_1012F28D0((uint64_t)&v1, a1 + 24);
}

_QWORD *sub_1012F2804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = off_10213F058;
  v5 = (_BYTE *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return sub_1012F145C((_QWORD *)(a2 + 48), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 3));
}

void sub_1012F28AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v3 + 16;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1012F28D0(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  sub_1012F0D5C(&v3);
  *(_QWORD *)(a2 + 8) = off_10213F058;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

uint64_t sub_1012F2924(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = (void **)(v1 + 48);
    sub_1012F0D5C(&v2);
    *(_QWORD *)(v1 + 8) = off_10213F058;
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_1012F2994(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_10008A9F0((uint64_t **)a1, (uint64_t *)v4);
  sub_1000CAD6C((uint64_t *)(v4 + 40));
  operator delete((void *)v4);
  return 1;
}

uint64_t sub_1012F2A14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_100259694();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100279B30((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[88 * v3];
  v13 = &v7[88 * v6];
  sub_1012F1588((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 88;
  sub_1012F2B38(a1, &v10);
  v8 = a1[1];
  sub_1012F2CF8(&v10);
  return v8;
}

void sub_1012F2B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1012F2CF8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012F2B38(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1012F2BAC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1012F2BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 88;
      sub_1012F1588(a1, v7 - 88, v9);
      v7 = *((_QWORD *)&v16 + 1) - 88;
      *((_QWORD *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1012F2C74((uint64_t)v13);
  return v11;
}

void sub_1012F2C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1012F2C74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1012F2C74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1012F2CA8((uint64_t *)a1);
  return a1;
}

void sub_1012F2CA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1012F0DE0(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_1012F2CF8(void **a1)
{
  sub_1012F2D28(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1012F2D28(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    sub_1012F0DE0(v4, i - 88);
  }
}

id sub_1012F2D6C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1012F2DB8(a1);
  else
    return 0;
}

id sub_1012F2DB8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49F1DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C49F1DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021ADE68);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1012F3164(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1012F3304((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL)
      sub_100259694();
    v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v10;
    sub_1002A2F6C((_QWORD *)a1, v11);
    v12 = sub_1012F14E0(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_1012F3370((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = sub_1012F14E0(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_1012F3370((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      sub_1012F0DE0(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1012F32F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1012F32FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1012F3304(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_1012F0DE0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1012F3370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    std::string::operator=((std::string *)(a4 + v7 + 8), (const std::string *)(a2 + v7 + 8));
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
    v9 = *(_OWORD *)(a2 + v7 + 40);
    *(_WORD *)(v8 + 56) = *(_WORD *)(a2 + v7 + 56);
    *(_OWORD *)(v8 + 40) = v9;
    if (a2 != a4)
      sub_100A38C94((_QWORD *)(v8 + 64), *(char **)(a2 + v7 + 64), *(char **)(a2 + v7 + 72), *(_QWORD *)(a2 + v7 + 72) - *(_QWORD *)(a2 + v7 + 64));
    v7 += 88;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t sub_1012F37FC()
{
  _OWORD *v0;

  qword_10230E110 = 0;
  qword_10230E118 = 0;
  qword_10230E120 = 0;
  v0 = operator new(0x48uLL);
  qword_10230E118 = (uint64_t)v0 + 72;
  qword_10230E120 = (uint64_t)v0 + 72;
  v0[2] = xmmword_101C49FA0;
  v0[3] = unk_101C49FB0;
  *((_QWORD *)v0 + 8) = 0x4003333333333333;
  *v0 = xmmword_101C49F80;
  v0[1] = unk_101C49F90;
  qword_10230E110 = (uint64_t)v0;
  return __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230E110, (void *)&_mh_execute_header);
}

void sub_1012F41AC(uint64_t a1, uint64_t a2)
{
  id v4;
  CLClientManagerAuthorizationContext *v5;
  id v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v4 = sub_100195B0C(a2, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", CFSTR("com.apple.compass")));
  v5 = sub_1000B9630(a2, (uint64_t)v4, &xmmword_101C17478);
  if (-[CLClientManagerAuthorizationContext isAuthorizedForServiceType:](v5, "isAuthorizedForServiceType:", 14))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "onConditionUpdateCallbackHandler");
    (*((void (**)(id, id, _QWORD, _QWORD, _QWORD))v6 + 2))(v6, objc_msgSend(*(id *)(a1 + 32), "monitoredIdentifier"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021ADED8);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      -[CLClientManagerAuthorizationContext registrationResult](v5, "registrationResult");
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = -[CLClientManagerAuthorizationContext registrationResult](v5, "registrationResult");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor #minimumAltitudeCondition skipping update because NanoCompass is not currently authorized for location updates\", \"NanoCompassRegistrationResult\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v8, 0x1Cu);
    }
  }
}

void sub_1012F4360(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1012F4430(id a1)
{
  qword_10230E128 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCardioChangeServiceSilo"));
}

void sub_1012F44E4(id a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2[3];

  sub_100197040();
  if (sub_10019DF90())
  {
    v1 = 0;
    sub_1018BF25C(v2, "CardioChangeServiceEnabled", &v1, 0);
    if (v2[1])
      byte_10230E138 = 1;
  }
}

void sub_1012F4ACC()
{
  operator delete();
}

void sub_1012F4B2C()
{
  operator new();
}

void sub_1012F4D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44((uint64_t)&a15);
  operator delete();
}

id sub_1012F4D64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onNatalimetryNotification:data:", a2, a3);
}

void sub_1012F505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012F5070(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1012F5324(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_1012F55D8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_1021AE008);
  v2 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating CardioChange db records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021AE008);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "Aggregating CardioChange db records", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLCardioChangeService setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_1012F5790(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  return sub_1012F5D04(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
}

uint64_t sub_1012F5790(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1012FB2DC(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1012FB2DC(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1012FB2DC(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1012F5D04(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1012FB4D8(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1012FB4D8(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE0E0);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1012FB4D8(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

void sub_1012F6CE0(uint64_t a1, xpc_activity_t activity)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  xpc_object_t v8;
  int64_t int64;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  int64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  const char *state;
  __int16 v29;
  int64_t v30;
  __int16 v31;
  uint64_t v32;

  if (xpc_activity_get_state(activity))
  {
    objc_msgSend(*(id *)(a1 + 32), "onChangeEstimationActivity:", activity);
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
    {
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021AE008);
      v4 = qword_10229FF58;
      if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134349056;
        state = (const char *)xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark CardioChangeEstimation activity as Continue. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v5 = qword_10229FF58;
        v21 = 134349056;
        v22 = (const char *)xpc_activity_get_state(activity);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 17, "Failed to mark CardioChangeEstimation activity as Continue. Current state is %{public}ld", &v21, 12);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "-[CLCardioChangeService scheduleChangeEstimation]_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  else
  {
    v8 = xpc_activity_copy_criteria(activity);
    if (!v8)
      v8 = xpc_dictionary_create(0, 0, 0);
    int64 = xpc_dictionary_get_int64(v8, XPC_ACTIVITY_DELAY);
    if (int64 == *(_QWORD *)(a1 + 40))
    {
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021AE008);
      v10 = qword_10229FF58;
      if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(const char **)(a1 + 40);
        *(_DWORD *)buf = 134349056;
        state = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: CardioChangeEstimation already scheduled with a delay of %{public}lld seconds", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v12 = *(const char **)(a1 + 40);
        v21 = 134349056;
        v22 = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "XPC_CHECK_IN: CardioChangeEstimation already scheduled with a delay of %{public}lld seconds", &v21, 12);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "-[CLCardioChangeService scheduleChangeEstimation]_block_invoke", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    else
    {
      v15 = int64;
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021AE008);
      v16 = qword_10229FF58;
      if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        state = "com.apple.locationd.CardioChange.Processing";
        v29 = 2050;
        v30 = v15;
        v31 = 2050;
        v32 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v18 = *(_QWORD *)(a1 + 40);
        v21 = 136446722;
        v22 = "com.apple.locationd.CardioChange.Processing";
        v23 = 2050;
        v24 = v15;
        v25 = 2050;
        v26 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", &v21, 32);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "-[CLCardioChangeService scheduleChangeEstimation]_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, *(_QWORD *)(a1 + 40));
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v8);
    }
    xpc_release(v8);
  }
}

uint64_t sub_1012F7550()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_100207328;
  v7 = sub_100207E34;
  v0 = qword_10230E1E8;
  v8 = qword_10230E1E8;
  if (!qword_10230E1E8)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1012FAF44;
    v2[3] = &unk_102149BF8;
    v2[4] = &v3;
    sub_1012FAF44((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1012F75FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1012F7614(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v4;
  id result;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  _BYTE v9[16];
  int v10;
  uint8_t buf[8];
  uint64_t v12;

  if ((a2 & 1) != 0)
  {
    sub_1013F905C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 120), a3, (uint64_t)v9);
    objc_msgSend(*(id *)(a1 + 40), "logAnalytics:", v9);
    if (v10 == 1)
    {
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021AE008);
      v4 = qword_10229FF58;
      if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLCardioChangeService: Change detected. Firing alarm and notifying watch.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "CLCardioChangeService: Change detected. Firing alarm and notifying watch.", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "-[CLCardioChangeService executeCardioChangeEstimation:]_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "universe"), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier")), "doAsync:", &stru_1021ADF38);
    }
    sub_1018CA5B4(buf, "CardioChangeActivityInterval", &XPC_ACTIVITY_INTERVAL_7_DAYS, 0);
    return objc_msgSend(*(id *)(a1 + 40), "resetCardioChangeEstimationActivity:withDelay:", *(_QWORD *)(a1 + 32), v12);
  }
  else
  {
    result = (id)xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
    if (result != (id)3)
      return objc_msgSend(*(id *)(a1 + 40), "resetCardioChangeEstimationActivity:withDelay:", *(_QWORD *)(a1 + 32), XPC_ACTIVITY_INTERVAL_1_HOUR);
  }
  return result;
}

void sub_1012F787C(id a1, void *a2)
{
  sub_10061F764(120.0, (uint64_t)a2, 33, 0, 300, 0, 0, 0, 0, 0);
}

uint64_t sub_1012F78C4(uint64_t a1)
{
  uint64_t result;
  xpc_activity_state_t state;
  xpc_activity_state_t v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  int v12;
  xpc_activity_state_t v13;
  uint8_t buf[4];
  xpc_activity_state_t v15;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    result = xpc_activity_should_defer((xpc_activity_t)result);
    if ((_DWORD)result)
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      if (state == 3 || (v4 = state, xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3)))
      {
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v5 = qword_10229FF58;
        if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#warning: Activity deferred", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        LOWORD(v12) = 0;
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 1, "#warning: Activity deferred", &v12, 2);
        v8 = v7;
        sub_100512490("Generic", 1, 0, 2, "-[CLCardioChangeService executeCardioChangeEstimation:]_block_invoke", "%s\n", v6);
      }
      else
      {
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v9 = qword_10229FF58;
        if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349056;
          v15 = v4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to mark activity as Deferred. Current state is %{public}ld", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 0))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_1021AE008);
        v12 = 134349056;
        v13 = v4;
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 17, "Failed to mark activity as Deferred. Current state is %{public}ld", &v12, 12);
        v8 = v11;
        sub_100512490("Generic", 1, 0, 0, "-[CLCardioChangeService executeCardioChangeEstimation:]_block_invoke", "%s\n", v10);
      }
      if (v8 != buf)
        free(v8);
      return 1;
    }
  }
  return result;
}

void sub_1012F8104(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_1021AE008);
  v4 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "AggregateFeatureComputeActivity timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021AE008);
    v7 = qword_10229FF58;
    v15 = 134349056;
    v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "AggregateFeatureComputeActivity timer fired (%{public}ld)", &v15, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLCardioChangeService scheduleDailyAggregateFeatureCompute]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 32), "onDailyAggregateFeatureComputeActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021AE008);
    v5 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_FAULT))
    {
      v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021AE008);
      v10 = qword_10229FF58;
      v11 = xpc_activity_get_state(a2);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLCardioChangeService scheduleDailyAggregateFeatureCompute]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_1012F8EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  sub_100008848((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1012F960C(id a1, void *a2)
{
  sub_10061F764(120.0, (uint64_t)a2, 33, 0, 300, 0, 0, 0, 0, 0);
}

void sub_1012FA30C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E180);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1012FA33C(uint64_t a1)
{
  float v2;
  unint64_t v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSDictionary *v13;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD v21[12];
  _QWORD v22[12];

  v21[0] = CFSTR("age_bin");
  v2 = *(float *)(*(_QWORD *)(a1 + 32) + 68);
  v19 = 0;
  v20 = 0;
  v18 = 0;
  sub_10027205C(&v18, (const void *)qword_10230E148, *(uint64_t *)algn_10230E150, (*(_QWORD *)algn_10230E150 - qword_10230E148) >> 2);
  if (v19 == v18)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (v19 - (_BYTE *)v18) >> 2;
    if (v4 <= 1)
      v4 = 1;
    while (*((float *)v18 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        v3 = v4;
        break;
      }
    }
  }
  v22[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v21[1] = CFSTR("gender");
  v22[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));
  v21[2] = CFSTR("useBetaBlocker");
  v22[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 76));
  v21[3] = CFSTR("userBMI_bin");
  v5 = *(float *)(*(_QWORD *)(a1 + 32) + 72);
  v16 = 0;
  v17 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_10230E168, *(uint64_t *)algn_10230E170, (*(_QWORD *)algn_10230E170 - qword_10230E168) >> 2);
  if (v16 == __p)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (v16 - (_BYTE *)__p) >> 2;
    if (v7 <= 1)
      v7 = 1;
    while (*((float *)__p + v6) < v5)
    {
      if (v7 == ++v6)
      {
        v6 = v7;
        break;
      }
    }
  }
  v22[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v21[4] = CFSTR("EstimateStatus");
  v22[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v21[5] = CFSTR("avgFromClusterVo2Max");
  LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 84);
  v22[5] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  v21[6] = CFSTR("vo2max");
  v22[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v21[7] = CFSTR("likelihoodRatio");
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 92);
  v22[7] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
  v21[8] = CFSTR("maxAcceptedChange");
  LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 96);
  v22[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10);
  v21[9] = CFSTR("minConfidenceRatio");
  LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 100);
  v22[9] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11);
  v21[10] = CFSTR("slope");
  LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104);
  v22[10] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12);
  v21[11] = CFSTR("numClustersContributed");
  v22[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 12);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return v13;
}

void sub_1012FA66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1012FAA48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E1E0);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1012FAA88(uint64_t a1)
{
  float v2;
  unint64_t v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  NSDictionary *v11;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD v22[6];
  _QWORD v23[6];

  v21 = 0;
  v22[0] = CFSTR("age");
  v2 = *(float *)(a1 + 124);
  v19 = 0;
  v20 = 0;
  sub_10027205C(&v19, (const void *)qword_10230E188, *(uint64_t *)algn_10230E190, (*(_QWORD *)algn_10230E190 - qword_10230E188) >> 2);
  if (v20 == v19)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (v20 - (_BYTE *)v19) >> 2;
    if (v4 <= 1)
      v4 = 1;
    while (*((float *)v19 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        v3 = v4;
        break;
      }
    }
  }
  v23[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v22[1] = CFSTR("height_m");
  v5 = *(float *)(a1 + 112);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  sub_10027205C(&v16, (const void *)qword_10230E1A8, *(uint64_t *)algn_10230E1B0, (*(_QWORD *)algn_10230E1B0 - qword_10230E1A8) >> 2);
  if (v17 == v16)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (v17 - (_BYTE *)v16) >> 2;
    if (v7 <= 1)
      v7 = 1;
    while (*((float *)v16 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        v6 = v7;
        break;
      }
    }
  }
  v23[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v22[2] = CFSTR("sex_female");
  v23[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 108));
  v22[3] = CFSTR("weight_kg");
  v8 = *(float *)(a1 + 116);
  v14 = 0;
  v15 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_10230E1C8, *(uint64_t *)algn_10230E1D0, (*(_QWORD *)algn_10230E1D0 - qword_10230E1C8) >> 2);
  if (v14 == __p)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (v14 - (_BYTE *)__p) >> 2;
    if (v10 <= 1)
      v10 = 1;
    while (*((float *)__p + v9) < v8)
    {
      if (v10 == ++v9)
      {
        v9 = v10;
        break;
      }
    }
  }
  v23[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9);
  v22[4] = CFSTR("sessionvo2max_dailymean_window0to90_mean");
  v23[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v22[5] = CFSTR("sessionhrrecovery_dailyMean_window0To90_mean");
  v23[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 6);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  return v11;
}

void sub_1012FAD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void sub_1012FAEEC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1012FAF18(id a1)
{
  qword_10229FF58 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

Class sub_1012FAF44(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_10230E1F0)
  {
    v4 = off_1021AE028;
    v5 = 0;
    qword_10230E1F0 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_10230E1F0)
    sub_10194C64C(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10194C6B0();
  qword_10230E1E8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

_QWORD *sub_1012FB020@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x168uLL);
  result = sub_1012FB078(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012FB064(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012FB078(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021AE050;
  sub_100CD612C(a1 + 3, *a2);
  return a1;
}

void sub_1012FB0B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012FB0C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012FB0DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1012FB110(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1012FB120@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x168uLL);
  result = sub_1012FB178(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012FB164(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012FB178(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021AE0A0;
  sub_1004BD1B0(a1 + 3, *a2);
  return a1;
}

void sub_1012FB1B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012FB1C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE0A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012FB1DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE0A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1012FB210(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1012FB220(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100261F44(a2 + 48);
    sub_100261F44(a2 + 32);
    sub_100261F44(a2 + 16);
    sub_100261F44(a2);
    operator delete();
  }
}

uint64_t sub_1012FB274(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100405254(result);
    operator delete();
  }
  return result;
}

void sub_1012FB2B0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1012FB2DC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ADFE8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ADFE8);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_1012FB4D8(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ADFE8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ADFE8);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t *sub_1012FB6D4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100342484(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1012FB710(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1012FBA18(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  int *v30;
  ALSLocation *v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v42[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  v4 = &OBJC_IVAR___CLPencilStateAdapter__pencilState;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v8 == -1 || v8 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8 + 1;
      v7 |= (unint64_t)(v9 & 0x7F) << v5;
      if ((v9 & 0x80) == 0)
        goto LABEL_12;
      v5 += 7;
      v10 = v6++ >= 9;
      if (v10)
      {
        v7 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v7 = 0;
LABEL_14:
    if (v11 || (v7 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v7 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_67;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_67:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_69:
        v41 = 32;
        goto LABEL_90;
      case 2u:
        v18 = 0;
        v19 = 0;
        v15 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v15 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_73:
        v41 = 36;
        goto LABEL_90;
      case 3u:
        v22 = 0;
        v23 = 0;
        v15 = 0;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v15 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v10 = v23++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_77:
        v41 = 12;
        goto LABEL_90;
      case 4u:
        v26 = 0;
        v27 = 0;
        v15 = 0;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v15 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v10 = v27++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_81:
        v41 = 16;
        goto LABEL_90;
      case 5u:
        v30 = v4;
        v31 = objc_alloc_init(ALSLocation);

        *(_QWORD *)(a1 + 24) = v31;
        v42[0] = 0;
        v42[1] = 0;
        if (PBReaderPlaceMark(a2, v42) && (sub_100F02DFC((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v42);
          v4 = v30;
LABEL_91:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 0xBu:
        v33 = 0;
        v34 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + v4[227]) |= 1u;
        while (2)
        {
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v15 |= (unint64_t)(v36 & 0x7F) << v33;
            if (v36 < 0)
            {
              v33 += 7;
              v10 = v34++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_85:
        v41 = 8;
        goto LABEL_90;
      case 0xCu:
        v37 = 0;
        v38 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + v4[227]) |= 2u;
        while (2)
        {
          v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v15 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              v10 = v38++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_89:
        v41 = 40;
LABEL_90:
        *(_DWORD *)(a1 + v41) = v15;
        goto LABEL_91;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_91;
    }
  }
}

void sub_1012FC714(id a1)
{
  qword_10230E1F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLFenceHandoffConnectionManagerSilo"));
}

void sub_1012FCFB0(id a1)
{
  uint64_t v1;

  if (objc_opt_class(IDSService, v1))
  {
    sub_100197040();
    if (sub_10019DF90() || (sub_100197040(), sub_100195F08()))
    {
      if (_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff"))
        byte_10230E208 = 1;
    }
  }
}

void sub_1012FD228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021AE160);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#FenceHandoff IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021AE160);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff IDS service failed to initialize", "{\"msg%{public}.0s\":\"#FenceHandoff IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setService:", a2);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021AE160);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "resume");
  }
}

void sub_1012FD5E8(uint64_t a1)
{

}

id sub_1012FEBF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "getHandoffTags");
}

void sub_1012FF578(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t buf;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "locationManager"), "monitoredRegions");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021AE160);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
    buf = 68289282;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff checking monitoredRegions\", \"regionIdentifier\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), "identifier"), "isEqualToString:", *(_QWORD *)(a1 + 40)) & 1) != 0)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021AE160);
          v10 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v11 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
            buf = 68289282;
            v20 = 2082;
            v21 = "";
            v22 = 2082;
            v23 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#FenceHandoff unfortunately region monitoring failed to stop!\", \"regionIdentifier\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021AE160);
          }
          v12 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v13 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
            buf = 68289282;
            v20 = 2082;
            v21 = "";
            v22 = 2082;
            v23 = v13;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff unfortunately region monitoring failed to stop!", "{\"msg%{public}.0s\":\"#FenceHandoff unfortunately region monitoring failed to stop!\", \"regionIdentifier\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
          }
          return;
        }
      }
      v6 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "receivingEndUnacknowledgedMessages"), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)))
  {
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "receivingEndUnacknowledgedMessages"), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "responseWithAck:forMessage:", objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kCLFenceHandoffResponseDictionaryIDSIdentifierKey")), objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kCLFenceHandoffResponseDictionaryMessageKey")));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "receivingEndUnacknowledgedMessages"), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  }
}

void sub_1012FFCBC(id a1, NSError *a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  NSError *v8;

  if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021AE160);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289282;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2114;
      v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff failed to call change fence state for handoffTags\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
    }
  }
}

void sub_1012FFF1C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;
  __int16 v11;
  uint64_t v12;

  if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021AE160);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
      v6[0] = 68289538;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2082;
      v10 = v5;
      v11 = 2114;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff failed to call to disable handoffTags from deviceID\", \"deviceId\":%{public, location:escape_only}s, \"Error\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x26u);
    }
  }
}

void sub_101301040(id *a1)
{
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  int v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;

  if ((objc_msgSend(a1[4], "isActiveDeviceNearby") & 1) == 0)
    objc_msgSend(a1[4], "updateActiveDeviceId:", objc_msgSend(objc_msgSend(a1[4], "service"), "devices"));
  v2 = (void *)(int)objc_msgSend(objc_msgSend(a1[5], "objectForKeyedSubscript:", CFSTR("kCLFenceHandoffDictionaryMessageType")), "intValue");
  v3 = objc_msgSend(a1[6], "incomingResponseIdentifier");
  if (v3)
  {
    v4 = v3;
    if (objc_msgSend(objc_msgSend(a1[4], "unacknowledgedMessages"), "objectForKeyedSubscript:", v3))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021AE160);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = objc_msgSend(a1[7], "UTF8String");
        v38 = 68289794;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2082;
        v43 = v6;
        v44 = 2050;
        v45 = v2;
        v46 = 2114;
        v47 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Received ack message from the other side\", \"fromID\":%{public, location:escape_only}s, \"messageType\":%{public, location:CLGeoFenceHandoffMessageType}lld, \"incomingResponseIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v38, 0x30u);
      }
      if ((_DWORD)v2 != 2 && (_DWORD)v2 != 4)
        objc_msgSend(objc_msgSend(a1[4], "unacknowledgedMessages"), "removeObjectForKey:", v4);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021AE160);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = objc_msgSend(a1[7], "UTF8String");
        v38 = 68289538;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2082;
        v43 = v14;
        v44 = 2114;
        v45 = v4;
        v15 = "{\"msg%{public}.0s\":\"#Warn #FenceHandoff Received ack from the other side but we don't track this messag"
              "e anymore\", \"fromID\":%{public, location:escape_only}s, \"incomingResponseIdentifier\":%{public, locatio"
              "n:escape_only}@}";
        v16 = v13;
        v17 = 38;
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v38, v17);
      }
    }
  }
  else
  {
    switch((unint64_t)v2)
    {
      case 0uLL:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        v18 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v38 = 68289026;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Handoff (re-)init message received from watch\"}", (uint8_t *)&v38, 0x12u);
        }
        objc_msgSend(a1[4], "getHandoffTags");
        return;
      case 1uLL:
        _objc_msgSend(a1[4], "handleAddingFenceOnCompanion:withContext:", a1[5], a1[6]);
        return;
      case 3uLL:
        _objc_msgSend(a1[4], "handleRemovingFenceOnCompanion:withContext:", a1[5], a1[6]);
        return;
      case 5uLL:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        v21 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          v22 = objc_msgSend(objc_msgSend(a1[6], "fromID"), "UTF8String");
          v23 = objc_msgSend(objc_msgSend(objc_msgSend(a1[4], "activeDeviceId"), "UUIDString"), "UTF8String");
          v38 = 68289538;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          v42 = 2082;
          v43 = v22;
          v44 = 2082;
          v45 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff Received handoff tags\", \"from\":%{public, location:escape_only}s, \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v38, 0x26u);
        }
        objc_msgSend(a1[4], "handleHandoffTagsOnCompanion:forDeviceID:", a1[5], objc_msgSend(a1[4], "activeDeviceId"));
        goto LABEL_57;
      case 7uLL:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        v24 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v38 = 68289026;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff CLFenceHandoffMessageTypeRequestTags is not supported on iOS\"}", (uint8_t *)&v38, 0x12u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        }
        v25 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v38 = 68289026;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff CLFenceHandoffMessageTypeRequestTags is not supported on iOS", "{\"msg%{public}.0s\":\"#FenceHandoff CLFenceHandoffMessageTypeRequestTags is not supported on iOS\"}", (uint8_t *)&v38, 0x12u);
        }
        goto LABEL_57;
      case 9uLL:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        v26 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          v27 = objc_msgSend(objc_msgSend(a1[6], "fromID"), "UTF8String");
          v38 = 68289282;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          v42 = 2082;
          v43 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff Received get Region state\", \"from\":%{public, location:escape_only}s}", (uint8_t *)&v38, 0x1Cu);
        }
        objc_msgSend(a1[4], "handleGetRegionStateOnCompanion:", a1[5]);
LABEL_57:
        v28 = objc_msgSend(a1[6], "outgoingResponseIdentifier");
        if (v28)
        {
          v29 = v28;
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021AE160);
          v30 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v31 = a1[5];
            v32 = objc_msgSend(a1[7], "UTF8String");
            v33 = a1[6];
            v38 = 68289794;
            v39 = 0;
            v40 = 2082;
            v41 = "";
            v42 = 2114;
            v43 = v31;
            v44 = 2082;
            v45 = v32;
            v46 = 2114;
            v47 = v33;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff processed incomming message and now we are going to send the ack back to the sender\", \"message\":%{public, location:escape_only}@, \"fromID\":%{public, location:escape_only}s, \"context\":%{public, location:escape_only}@}", (uint8_t *)&v38, 0x30u);
          }
          objc_msgSend(a1[4], "responseWithAck:forMessage:", v29, a1[5]);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021AE160);
          v34 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v35 = a1[5];
            v36 = objc_msgSend(a1[7], "UTF8String");
            v37 = a1[6];
            v38 = 68289794;
            v39 = 0;
            v40 = 2082;
            v41 = "";
            v42 = 2114;
            v43 = v35;
            v44 = 2082;
            v45 = v36;
            v46 = 2114;
            v47 = v37;
            v15 = "{\"msg%{public}.0s\":\"#FenceHandoff Received message with no outgoingResponseIdentifier\", \"message\""
                  ":%{public, location:escape_only}@, \"fromID\":%{public, location:escape_only}s, \"context\":%{public, "
                  "location:escape_only}@}";
            v16 = v34;
            v17 = 48;
            goto LABEL_25;
          }
        }
        break;
      case 0xBuLL:
      case 0xDuLL:
      case 0xFuLL:
      case 0x11uLL:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        v7 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v38 = 68289282;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          v42 = 2050;
          v43 = v2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Receiving Fence event/state is not supported in iOS\", \"messageType\":%{public, location:CLGeoFenceHandoffMessageType}lld}", (uint8_t *)&v38, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        }
        v8 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          return;
        v38 = 68289282;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2050;
        v43 = v2;
        v9 = "#FenceHandoff Receiving Fence event/state is not supported in iOS";
        v10 = "{\"msg%{public}.0s\":\"#FenceHandoff Receiving Fence event/state is not supported in iOS\", \"messageType\""
              ":%{public, location:CLGeoFenceHandoffMessageType}lld}";
        v11 = v8;
        v12 = 28;
        goto LABEL_20;
      default:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        v19 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v38 = 68289026;
          v39 = 0;
          v40 = 2082;
          v41 = "";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Please update incomingMessage switch statements\"}", (uint8_t *)&v38, 0x12u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021AE160);
        }
        v20 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          return;
        v38 = 68289026;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        v9 = "#FenceHandoff Please update incomingMessage switch statements";
        v10 = "{\"msg%{public}.0s\":\"#FenceHandoff Please update incomingMessage switch statements\"}";
        v11 = v20;
        v12 = 18;
LABEL_20:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, (uint8_t *)&v38, v12);
        return;
    }
  }
}

id sub_101301D48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:", *(_QWORD *)(a1 + 40));
}

void sub_101301ED0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101302464(id a1)
{
  qword_10230E218 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPedestrianFenceServiceSilo"));
}

void sub_1013026F4()
{
  operator delete();
}

id sub_10130271C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onPedestrianFenceExitData:", a1 + 8);
}

id sub_101302728(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onInertialOdometryAnalyticsData:", a1 + 8);
}

void sub_1013049EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_101304A18(uint64_t a1, void *a2)
{
  id v3;
  id result;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = objc_msgSend(objc_msgSend(a2, "fenceIDToIndex", 0), "allValues");
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

id sub_101305CE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onIntervalTimerCreateEventAndIncrementPacket:", 1);
}

void sub_101306300(id a1)
{
  qword_10229FF78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

void sub_1013063D0(id a1)
{
  qword_10230E228 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBTLERangeManagerSilo"));
}

uint64_t sub_101306484(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101306794;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230E250 != -1)
    dispatch_once(&qword_10230E250, block);
  return qword_10230E248;
}

void sub_101306624(id a1)
{
  sub_100197040();
  if ((sub_1001B796C() & 0x400000) != 0)
    byte_10230E238 = 1;
}

_QWORD *sub_10130664C(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_101306678(a1, "CLBTLERangeManager-Notifier", a2);
  *result = off_1021AE238;
  return result;
}

uint64_t sub_101306678(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AE3C8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1013066F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101306718(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AE3C8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_101306AD4(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101306794()
{
  operator new();
}

void sub_1013067DC()
{
  operator delete();
}

_QWORD *sub_101306800@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_101306878()
{
  operator new();
}

void sub_101306924(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_101306960(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021AE4A8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_101306A38(uint64_t a1)
{
  sub_101306B2C(a1);
  operator delete();
}

id sub_101306A5C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1012F16C8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_101306AA8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101306AD4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_101306AD4(a1, *a2);
    sub_101306AD4(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 8));
    sub_1012F1274((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_101306B2C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021AE4A8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_101306B8C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  unsigned __int8 v21;

  v21 = a2;
  *(_QWORD *)a1 = off_1021A67A8;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = a1 + 56;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  sub_1004AD1D8((unsigned __int8 *)&v20, "NumberOfWorkoutsFTPRequiredForHK", &dword_101C4A338, 0);
  *(_DWORD *)(a1 + 236) = DWORD1(v20);
  sub_101309FEC(&v21, &v20);
  sub_1002B7674((uint64_t)v3, &v20);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_10130A148(v3, &v20);
  sub_1002B7674(v4, &v20);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_10130A2F0(&v21, &v20);
  sub_1002B7674((uint64_t)v5, &v20);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_10130A348(v5, &v20);
  sub_1002B7674(v6, &v20);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  sub_101306E3C(a1);
  return a1;
}

void sub_101306DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100261F44(v14 + 160);
  sub_100261F44(v14 + 144);
  sub_100261F44(v14 + 128);
  sub_100261F44(v14 + 112);
  sub_100261F44(v14 + 96);
  a10 = (void **)(v14 + 72);
  sub_1002A3684(&a10);
  sub_100261F44(v13);
  sub_100261F44(v12);
  sub_100261F44(v11);
  sub_100261F44(v10);
  _Unwind_Resume(a1);
}

void sub_101306E3C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;

  v2 = (uint64_t *)(a1 + 24);
  sub_10130A580(&v18);
  sub_1002B7674(a1 + 96, &v18);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_10130A67C(&v18);
  sub_1002B7674(a1 + 112, &v18);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_10130A780(v2, &v18);
  sub_1002B7674(a1 + 128, &v18);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_10130A87C(&v18);
  sub_1002B7674(a1 + 144, &v18);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_10130A978(v2, &v18);
  sub_1002B7674(a1 + 160, &v18);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

char *sub_101307018(uint64_t a1)
{
  char **v2;

  v2 = (char **)(a1 + 72);
  sub_100616F48((char **)(a1 + 72), (__int128 *)(a1 + 112));
  sub_100616F48(v2, (__int128 *)(a1 + 128));
  sub_100616F48(v2, (__int128 *)(a1 + 144));
  return sub_100616F48(v2, (__int128 *)(a1 + 160));
}

uint64_t sub_101307064(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 44) = a2;
  return result;
}

uint64_t sub_101307070(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  sub_100616F48((char **)(a1 + 72), (__int128 *)(a1 + 96));
  sub_101307018(a1);
  v2 = *(uint64_t **)(a1 + 72);
  v3 = *(uint64_t **)(a1 + 80);
  v4 = 1;
  while (v2 != v3)
  {
    v5 = *v2;
    v2 += 2;
    v4 = v4 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  return v4;
}

double sub_1013070D4(double a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = a1 * 0.5;
  v4 = sub_101311088(a1 * 0.850000024, a2);
  v5 = v4 - sub_101311088(v3, a2);
  if (v5 > 200.0)
    v5 = 200.0;
  if (v5 >= 50.0)
    v6 = (v5 + -50.0) / -199.1 + 1.0;
  else
    v6 = 1.0;
  return v6 * 0.4 + 0.5;
}

BOOL sub_101307174(uint64_t a1, double *a2, int *a3, int *a4)
{
  double v8;
  double v9;
  __int128 v10;
  float v11;
  double v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  _BOOL4 v17;
  int v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  _OWORD v23[2];
  _OWORD v24[2];
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;

  v8 = sub_1012694C4(*(_QWORD *)(a1 + 112));
  v9 = sub_100C3C640(*(_QWORD *)(a1 + 128));
  v10 = *(_OWORD *)(a1 + 192);
  v23[0] = *(_OWORD *)(a1 + 176);
  v23[1] = v10;
  v24[0] = *(_OWORD *)(a1 + 208);
  *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(a1 + 220);
  sub_100653518((uint64_t)v23);
  v12 = v11;
  if (v8 > 0.0)
  {
    *a2 = v8;
    v14 = sub_1012694CC(*(_QWORD *)(a1 + 112));
    v13 = 2;
  }
  else if (v9 > 0.0)
  {
    *a2 = v9;
    v14 = sub_1000A42B0();
    v13 = 1;
  }
  else
  {
    *a2 = v12;
    v13 = 3;
    v14 = 1;
  }
  *a3 = v14;
  *a4 = v13;
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
  v15 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *a4;
    *(_DWORD *)buf = 134218752;
    v34 = v9;
    v35 = 2048;
    v36 = v8;
    v37 = 2048;
    v38 = v12;
    v39 = 1024;
    v40 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "vo2maxPedestrian, %f, vo2maxCycling, %f, vo2maxDerived, %f, cyclingVO2MaxSource, %d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v19 = *a4;
    v25 = 134218752;
    v26 = v9;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v12;
    v31 = 1024;
    v32 = v19;
    LODWORD(v22) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "vo2maxPedestrian, %f, vo2maxCycling, %f, vo2maxDerived, %f, cyclingVO2MaxSource, %d", COERCE_DOUBLE(&v25), v22, *(double *)v23, DWORD2(v23[0]));
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::getBestVO2Max(double &, int &, VO2MaxSource &) const", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v17 = *a2 > 0.0;
  if (*a2 > 100.0)
    return 0;
  return v17;
}

uint64_t sub_10130742C(_QWORD **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = a1[9];
  v3 = a1[10];
  v4 = 1;
  while (v2 != v3)
  {
    v5 = *v2;
    v2 += 2;
    v4 &= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  }
  v6 = v4 & (*(unsigned int (**)(_QWORD *))(*a1[3] + 24))(a1[3]);
  v8 = a1[9];
  v7 = a1[10];
  while (v8 != v7)
  {
    v9 = *v8;
    v8 += 2;
    v6 = v6 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  }
  return v6;
}

double sub_1013074B4@<D0>(double *a1@<X1>, double *a2@<X2>, double *a3@<X3>, _DWORD *a4@<X4>, _DWORD *a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  int v16;
  double result;

  v6 = 0;
  v7 = *a1;
  v8 = *a2;
  v9 = *a3;
  v10 = &byte_101C4A358;
  while (*v10 != a1[2] > 0.0 || (*a4 - 1) < 2 == v6 > 3 || a2[2] > 0.0 == (((0x55uLL >> v6) & 1) == 0))
  {
    ++v6;
    v10 += 56;
    if (v6 == 8)
    {
      v10 = (char *)&unk_101C4A4E0;
      break;
    }
  }
  if (a2[2] <= 0.0)
    v8 = 0.0;
  if (a1[2] <= 0.0)
    v7 = 0.0;
  v11 = *((double *)v10 + 1);
  v12 = *((double *)v10 + 2);
  v13 = *((double *)v10 + 3);
  v14 = *((double *)v10 + 4);
  v15 = *((_QWORD *)v10 + 5);
  v16 = *((_DWORD *)v10 + 12);
  *(_QWORD *)(a6 + 8) = 0x7FF8000000000000;
  *(double *)a6 = v14 + v8 * v12 + v11 * v7 + v13 * v9;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a6 + 16) = v15;
  *(_QWORD *)(a6 + 24) = 0x200000000;
  *a5 = v16;
  return result;
}

void sub_1013075B0(uint64_t a1@<X0>, _OWORD *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  __int128 v16;
  double v17;
  double v18;
  double v19;
  __int128 v22;
  double v23;
  double v24;
  _BOOL4 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  _BOOL4 v30;
  NSObject *v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  double v50;
  int v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  double v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  double v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;
  uint8_t buf[4];
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  double v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  uint64_t v94;

  v16 = a2[1];
  *(_OWORD *)a6 = *a2;
  *((_OWORD *)a6 + 1) = v16;
  v17 = sub_1012694A0(*(_QWORD *)(a1 + 112));
  v18 = *a3;
  v19 = *(double *)a5;
  if (*(double *)a5 > *a6 && v19 >= a7 && v19 <= a8)
  {
    v22 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a6 = *(_OWORD *)a5;
    *((_OWORD *)a6 + 1) = v22;
  }
  if (a3[2] <= 0.0 || v17 <= 0.0)
  {
    v24 = v18 * 0.9 + -24.7;
  }
  else
  {
    v23 = sub_101311068(v18, *(float *)(a1 + 188));
    v24 = sub_101311088(v23 * 0.46 + -1.7 + a3[2] * 0.36 + v17 * 0.46, *(float *)(a1 + 188));
  }
  v25 = v24 >= a7;
  if (v24 > a8)
    v25 = 0;
  if (v25 && v24 > *a6)
  {
    *a6 = v24;
    a6[2] = a3[2];
  }
  v26 = *a4;
  v27 = a4[2];
  if (v27 >= 0.7 || v27 <= 0.0 || v17 <= 0.0)
  {
    v29 = v26 * 0.95;
  }
  else
  {
    v28 = sub_101311068(v26, *(float *)(a1 + 188));
    v29 = sub_101311088(v28 * 0.44 + -1.9 + a4[2] * 0.61 + v17 * 0.51, *(float *)(a1 + 188));
  }
  v30 = v29 >= a7;
  if (v29 > a8)
    v30 = 0;
  if (v30 && v29 > *a6)
  {
    *a6 = v29;
    a6[2] = a4[2];
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
  v31 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(double *)a5;
    v33 = *(_QWORD *)(a5 + 16);
    v34 = *a3;
    v35 = *((_QWORD *)a3 + 2);
    v36 = *a4;
    v37 = *((_QWORD *)a4 + 2);
    v38 = *(_QWORD *)a2;
    v39 = *(_QWORD *)a6;
    *(_DWORD *)buf = 134220544;
    v74 = v17;
    v75 = 2048;
    v76 = v32;
    v77 = 2048;
    v78 = v33;
    v79 = 2048;
    v80 = v34;
    v81 = 2048;
    v82 = v35;
    v83 = 2048;
    v84 = v36;
    v85 = 2048;
    v86 = v37;
    v87 = 2048;
    v88 = v38;
    v89 = 2048;
    v90 = v24;
    v91 = 2048;
    v92 = v29;
    v93 = 2048;
    v94 = v39;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "eff,%f,power60,%f,conf60,%f,power8,%f,conf8,%f,power20,%f,conf20,%f,vo2limit,%f,adjusted8,%f,adjusted20,%f,floor,%f", buf, 0x70u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v40 = *(double *)a5;
    v41 = *(_QWORD *)(a5 + 16);
    v42 = *a3;
    v43 = *((_QWORD *)a3 + 2);
    v44 = *a4;
    v45 = *((_QWORD *)a4 + 2);
    v46 = *(_QWORD *)a2;
    v47 = *(_QWORD *)a6;
    v51 = 134220544;
    v52 = v17;
    v53 = 2048;
    v54 = v40;
    v55 = 2048;
    v56 = v41;
    v57 = 2048;
    v58 = v42;
    v59 = 2048;
    v60 = v43;
    v61 = 2048;
    v62 = v44;
    v63 = 2048;
    v64 = v45;
    v65 = 2048;
    v66 = v46;
    v67 = 2048;
    v68 = v24;
    v69 = 2048;
    v70 = v29;
    v71 = 2048;
    v72 = v47;
    LODWORD(v50) = 112;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "eff,%f,power60,%f,conf60,%f,power8,%f,conf8,%f,power20,%f,conf20,%f,vo2limit,%f,adjusted8,%f,adjusted20,%f,floor,%f", COERCE_DOUBLE(&v51), v50);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPAggregator::calculateFTPFloor(const CLCyclingFTPValue &, const CLCyclingFTPValue &, const CLCyclingFTPValue &, const CLCyclingFTPValue &, double, double) const", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
}

void sub_101307A48(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  int v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  double *v31;
  __int128 v32;
  double v33;
  double v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  double v39;
  const char *v40;
  uint8_t *v41;
  NSObject *v42;
  NSObject *v43;
  double v44;
  uint8_t *v45;
  uint8_t *v46;
  double v47;
  double v48;
  double v49;
  unsigned int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint8_t *v56;
  uint8_t *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68[2];
  double v69;
  double v70;
  double v71[2];
  double v72;
  double v73;
  double v74;
  __int128 v75;
  __int128 v76;
  double v77[2];
  uint64_t v78;
  double v79;
  double v80[2];
  uint64_t v81;
  double v82[2];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  double v86[2];
  uint64_t v87;
  int64x2_t v88;
  unint64_t v89;
  uint64_t v90;
  int64x2_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  int v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  __int16 v100;
  double v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  unint64_t v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  double v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  double v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  double v133;
  __int16 v134;
  double v135;
  __int16 v136;
  double v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  int v149;
  __int16 v150;
  double v151;
  uint8_t buf[4];
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  double v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  double v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  double v189;
  __int16 v190;
  double v191;
  __int16 v192;
  double v193;
  __int16 v194;
  double v195;
  __int16 v196;
  double v197;
  __int16 v198;
  double v199;
  __int16 v200;
  unsigned int v201;
  __int16 v202;
  double v203;
  __int16 v204;
  int v205;
  __int16 v206;
  double v207;

  if (!sub_10130742C((_QWORD **)a1))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v13 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to compute all ftp models", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_70;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    LOWORD(v96) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Failed to compute all ftp models", &v96, 2);
    goto LABEL_103;
  }
  v94 = 0;
  v95 = NAN;
  v91 = vdupq_n_s64(0x7FF8000000000000uLL);
  v92 = 0xBFF0000000000000;
  v93 = 0;
  v88 = v91;
  v89 = 0xBFF0000000000000;
  v90 = 0;
  if (!*(_BYTE *)(a1 + 234) || !*(_BYTE *)(a1 + 233) || !*(_BYTE *)(a1 + 232))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v15 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Not computing VO2Max based FTP as user weight and age not set", buf, 2u);
    }
    v16 = -1.0;
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    LOWORD(v96) = 0;
    v55 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 1, "Not computing VO2Max based FTP as user weight and age not set", &v96, 2);
    v46 = v56;
    sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n", v55);
    goto LABEL_98;
  }
  if (!sub_101307174(a1, &v95, (int *)&v94 + 1, (int *)&v94))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v43 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Failed to compute best VO2Max value", buf, 2u);
    }
    v16 = -1.0;
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    LOWORD(v96) = 0;
    v44 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "Failed to compute best VO2Max value", &v96, 2);
    v46 = v45;
    sub_100512490("Generic", 1, 0, 0, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n", v44);
LABEL_98:
    if (v46 != buf)
      free(v46);
LABEL_28:
    v17 = NAN;
    v18 = -1.0;
    *(double *)&v19 = NAN;
    v20 = NAN;
    v21 = -1.0;
    goto LABEL_29;
  }
  v6 = v95;
  v7 = HIDWORD(v94);
  v8 = *(float *)(a1 + 188);
  v9 = sub_101311088(v95 * 0.699999988, v8);
  v10 = sub_1013070D4(v6, v8);
  v91.i64[1] = 0x7FF8000000000000;
  if (v9 <= 0.0)
    v11 = NAN;
  else
    v11 = v9;
  if (v9 > 0.0)
  {
    v12 = v7;
  }
  else
  {
    v10 = 0.0;
    v12 = 0;
  }
  *(double *)&v63 = v11;
  *(double *)v91.i64 = v11;
  v92 = *(_QWORD *)&v10;
  v93 = v12 | 0x700000000;
  if ((_DWORD)v94 == 3)
  {
    v10 = 0.4;
    goto LABEL_81;
  }
  if (!(_DWORD)v94)
  {
    v10 = 0.0;
LABEL_81:
    v92 = *(_QWORD *)&v10;
  }
  v66 = v10;
  v47 = *(float *)(a1 + 188);
  v48 = sub_101311088(v6 * 0.5, v47);
  v49 = sub_1013070D4(v6, v47);
  v88.i64[1] = 0x7FF8000000000000;
  v20 = NAN;
  if (v48 <= 0.0)
    v17 = NAN;
  else
    v17 = v48;
  if (v48 <= 0.0)
    v16 = 0.0;
  else
    v16 = v49;
  if (v48 <= 0.0)
    v50 = 0;
  else
    v50 = v7;
  *(double *)v88.i64 = v17;
  v89 = *(_QWORD *)&v16;
  v90 = v50 | 0x500000000;
  v51 = *(float *)(a1 + 188);
  v52 = sub_101311088(v6 * 1.20000005, v51);
  v53 = v51;
  v18 = v66;
  v54 = sub_1013070D4(v6, v53);
  if (v52 <= 0.0)
  {
    v21 = 0.0;
  }
  else
  {
    v20 = v52;
    v21 = v54;
  }
  v19 = v63;
LABEL_29:
  v22 = sub_100D9EA18(*(_QWORD *)(a1 + 96));
  if (v22 <= 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
    v42 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLCyclingFTPAggregator, no valid cycling sessions found", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_70;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
    LOWORD(v96) = 0;
    LODWORD(v58) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "CLCyclingFTPAggregator, no valid cycling sessions found", &v96, *(_QWORD *)&v58);
LABEL_103:
    v57 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n", v14);
    if (v57 != buf)
      free(v57);
LABEL_70:
    *(int64x2_t *)a2 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_QWORD *)(a2 + 16) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 24) = 0;
    return;
  }
  v23 = v22;
  v65 = v18;
  v62 = v21;
  sub_10104F538(*(_QWORD *)(a1 + 160), (uint64_t)v86);
  sub_101350644(*(_QWORD *)(a1 + 144), (uint64_t)v77);
  v75 = v84;
  v76 = v85;
  if (v17 >= 15.0)
    v24 = v17;
  else
    v24 = 15.0;
  v61 = *(float *)(a1 + 188) * 8.0;
  if (v61 >= v20)
    v25 = *(float *)(a1 + 188) * 8.0;
  else
    v25 = v20;
  if (v25 <= 999.0)
    v26 = v25;
  else
    v26 = 999.0;
  if (*(double *)&v75 < v24 || *(double *)&v75 > v26)
    *(_QWORD *)&v76 = 0;
  v64 = *(double *)&v19;
  v60 = v16;
  v67 = a3;
  if (v86[0] > v26 || v86[0] < v24)
    v87 = 0;
  HIDWORD(v74) = 0;
  sub_1013074B4((double *)&v75, v86, (double *)v91.i64, &v94, (_DWORD *)&v74 + 1, (uint64_t)v71);
  sub_1013075B0(a1, &v88, v82, v80, (uint64_t)v77, v68, v24, v26);
  v28 = v68[0];
  v29 = v71[0];
  v30 = v72;
  if (v71[0] <= v68[0])
    v31 = v68;
  else
    v31 = v71;
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v31;
  *(_OWORD *)(a2 + 16) = v32;
  if (*(double *)a2 <= v26)
    v33 = *(double *)a2;
  else
    v33 = v26;
  *(double *)(a2 + 8) = v33;
  *(double *)(a2 + 16) = v30;
  *(_DWORD *)(a2 + 24) = v23;
  *(double *)a2 = v33;
  v34 = v33;
  if (v23 >= 6)
  {
    v34 = sub_1009F4B84(*(_QWORD *)(a1 + 8), v33, v67);
    *(double *)a2 = v34;
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
  v35 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134224896;
    v153 = v64;
    v154 = 2048;
    v155 = v65;
    v156 = 2048;
    v157 = v86[0];
    v158 = 2048;
    v159 = v87;
    v160 = 2048;
    v161 = v17;
    v162 = 2048;
    v163 = v60;
    v164 = 2048;
    v165 = v20;
    v166 = 2048;
    v167 = v62;
    v168 = 2048;
    v169 = v61;
    v170 = 2048;
    v171 = v26;
    v172 = 2048;
    v173 = v82[0];
    v174 = 2048;
    v175 = v83;
    v176 = 2048;
    v177 = v80[0];
    v178 = 2048;
    v179 = v81;
    v180 = 2048;
    v181 = v77[0];
    v182 = 2048;
    v183 = v78;
    v184 = 2048;
    v185 = v84;
    v186 = 2048;
    v187 = v85;
    v188 = 2048;
    v189 = v29;
    v190 = 2048;
    v191 = v30;
    v192 = 2048;
    v193 = v28;
    v194 = 2048;
    v195 = v69;
    v196 = 2048;
    v197 = v34;
    v198 = 2048;
    v199 = v30;
    v200 = 1024;
    v201 = v23;
    v202 = 2048;
    v203 = v33;
    v204 = 1024;
    v205 = HIDWORD(v74);
    v206 = 2048;
    v207 = v67;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "ftpVO2Max, %f, ftpVO2MaxConfidence, %f, ftpPowerAtPercentHRMax, %f, ftpPowerAtPercentHRMaxConfidence, %f, ftpLowerLimit, %f, ftpLowerLimitConfidence, %f, ftpVO2MaxUpperLimit, %f, ftpVO2MaxUpperLimitConfidence, %f, maxWeightBasedFTP, %f, ftpUpperLimit, %f, ftp8MinBoutEstimate, %f, ftp8MinBoutEstimateConfidence, %f, ftp20MinBoutEstimate, %f, ftp20MinBoutEstimateConfidence, %f, ftp60MinBoutEstimate, %f, ftp60MinBoutEstimateConfidence, %f, ftpCriticalPowerEstimate, %f, ftpCriticalPowerEstimateConfidence, %f, ftpCombo, %f, ftpComboConfidence, %f, ftpFloor, %f, ftpFloorConfidence, %f, ftpBest, %f, ftpBestConfidence, %f, ftpBestNumberOfSessions, %d, ftpBestWithoutDecay, %f, ftpComboSource, %d, eventTime, %f", buf, 0x112u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(_QWORD *)(a2 + 16);
    v38 = *(_DWORD *)(a2 + 24);
    v39 = *(double *)a2;
    v96 = 134224896;
    v97 = v91.i64[0];
    v98 = 2048;
    v99 = v92;
    v100 = 2048;
    v101 = v86[0];
    v102 = 2048;
    v103 = v87;
    v104 = 2048;
    v105 = v88.i64[0];
    v106 = 2048;
    v107 = v89;
    v108 = 2048;
    v109 = v20;
    v110 = 2048;
    v111 = v62;
    v112 = 2048;
    v113 = v61;
    v114 = 2048;
    v115 = v26;
    v116 = 2048;
    v117 = v82[0];
    v118 = 2048;
    v119 = v83;
    v120 = 2048;
    v121 = v80[0];
    v122 = 2048;
    v123 = v81;
    v124 = 2048;
    v125 = v77[0];
    v126 = 2048;
    v127 = v78;
    v128 = 2048;
    v129 = v84;
    v130 = 2048;
    v131 = v85;
    v132 = 2048;
    v133 = v71[0];
    v134 = 2048;
    v135 = v72;
    v136 = 2048;
    v137 = v68[0];
    v138 = 2048;
    v139 = v69;
    v140 = 2048;
    v141 = v39;
    v142 = 2048;
    v143 = v37;
    v144 = 1024;
    v145 = v38;
    v146 = 2048;
    v147 = v36;
    v148 = 1024;
    v149 = HIDWORD(v74);
    v150 = 2048;
    v151 = v67;
    LODWORD(v58) = 274;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "ftpVO2Max, %f, ftpVO2MaxConfidence, %f, ftpPowerAtPercentHRMax, %f, ftpPowerAtPercentHRMaxConfidence, %f, ftpLowerLimit, %f, ftpLowerLimitConfidence, %f, ftpVO2MaxUpperLimit, %f, ftpVO2MaxUpperLimitConfidence, %f, maxWeightBasedFTP, %f, ftpUpperLimit, %f, ftp8MinBoutEstimate, %f, ftp8MinBoutEstimateConfidence, %f, ftp20MinBoutEstimate, %f, ftp20MinBoutEstimateConfidence, %f, ftp60MinBoutEstimate, %f, ftp60MinBoutEstimateConfidence, %f, ftpCriticalPowerEstimate, %f, ftpCriticalPowerEstimateConfidence, %f, ftpCombo, %f, ftpComboConfidence, %f, ftpFloor, %f, ftpFloorConfidence, %f, ftpBest, %f, ftpBestConfidence, %f, ftpBestNumberOfSessions, %d, ftpBestWithoutDecay, %f, ftpComboSource, %d, eventTime, %f", COERCE_DOUBLE(&v96), v58, v59, v60, v61,
      v62,
      v64,
      v65,
      v67,
      v68[0],
      v68[1],
      v69,
      v70,
      v71[0],
      v71[1],
      v72,
      v73,
      v74,
      *(double *)&v75,
      *((double *)&v75 + 1),
      *(double *)&v76,
      *((double *)&v76 + 1),
      v77[0],
      v77[1],
      v78,
      v79,
      LODWORD(v80[0]),
      v80[1]);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
}

uint64_t sub_10130864C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v2 = *(uint64_t **)(a1 + 72);
  v3 = *(uint64_t **)(a1 + 80);
  v4 = 1;
  if (v2 != v3)
  {
    do
    {
      v5 = *v2;
      v2 += 2;
      v4 = v4 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    while (v2 != v3);
    v2 = *(uint64_t **)(a1 + 72);
    for (i = *(_QWORD *)(a1 + 80); (uint64_t *)i != v2; i = sub_100261F44(i - 16))
      ;
  }
  *(_QWORD *)(a1 + 80) = v2;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
  v7 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLCyclingFTPAggregator reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "CLCyclingFTPAggregator reset", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::reset()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v4;
}

id *sub_10130882C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  NSObject *v6;
  double v7;
  _QWORD *v8;
  _QWORD *i;
  NSObject *v10;
  NSObject *v11;
  double v12;
  double v13;
  int v14;
  const char *v16;
  uint8_t *v17;
  double v18;
  double v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  id v26[2];
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;

  sub_100131938(v26, (uint64_t)"CLCyclingFTPAggregator.computeFTP", 0);
  sub_101307070(a1);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v34 = a3;
    v35 = 2048;
    v36 = a3 + -5184000.0;
    v37 = 2048;
    v38 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator computeFTP eval_time, %f, from, %f, to, %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
    v7 = a3 + -5184000.0;
    v27 = 134218496;
    v28 = a3;
    v29 = 2048;
    v30 = a3 + -5184000.0;
    v31 = 2048;
    v32 = a3;
    LODWORD(v25) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CLCyclingFTPAggregator computeFTP eval_time, %f, from, %f, to, %f", COERCE_DOUBLE(&v27), v25, *(double *)v26);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::computeFTP(const double)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  else
  {
    v7 = a3 + -5184000.0;
  }
  v8 = *(_QWORD **)(a1 + 72);
  for (i = *(_QWORD **)(a1 + 80); v8 != i; v8 += 2)
    (*(void (**)(_QWORD, uint64_t, double, double))(*(_QWORD *)*v8 + 24))(*v8, a1 + 176, v7, a3);
  sub_101307A48(a1, a2, a3);
  if ((sub_10130864C(a1) & 1) == 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
    v10 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLCyclingFTPAggregator, failed to reset all models", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
      LOWORD(v27) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "CLCyclingFTPAggregator, failed to reset all models", &v27, *(_QWORD *)&v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "const CLCyclingFTPValue CLCyclingFTPAggregator::computeFTP(const double)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
  v11 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(double *)a2;
    v13 = *(double *)(a2 + 16);
    v14 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)buf = 134218496;
    v34 = v12;
    v35 = 2048;
    v36 = v13;
    v37 = 1024;
    LODWORD(v38) = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator final ftp, %f, confidence, %f, numberOfSessions, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021AE4E0);
    v18 = *(double *)a2;
    v19 = *(double *)(a2 + 16);
    v20 = *(_DWORD *)(a2 + 24);
    v27 = 134218496;
    v28 = v18;
    v29 = 2048;
    v30 = v19;
    v31 = 1024;
    LODWORD(v32) = v20;
    LODWORD(v25) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "CLCyclingFTPAggregator final ftp, %f, confidence, %f, numberOfSessions, %d", COERCE_DOUBLE(&v27), v25, LODWORD(v26[0]));
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::computeFTP(const double)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  return sub_100131740(v26);
}

void sub_101308D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

__n128 sub_101308D84(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 192) = v3;
  *(_OWORD *)(a1 + 208) = v4;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_101308DA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  _BOOL4 v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  double v24;
  void *v25;
  void *v26;
  uint64_t v27;
  __int16 v28;
  void *__p;
  void *v30;
  uint64_t v31;
  __int16 v32;
  void *v33;
  double *v34;
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  int v44;
  uint8_t buf[4];
  _BYTE v46[10];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  sub_1009F3684(*(_QWORD *)(a1 + 8), a2, (uint64_t)&v32);
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
  v5 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v46 = v32;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = HIBYTE(v32);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator feedworkoutevent: didFinish: %d, hadCycling: %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    LODWORD(v41) = 67109376;
    HIDWORD(v41) = v32;
    LOWORD(v42) = 1024;
    *(_DWORD *)((char *)&v42 + 2) = HIBYTE(v32);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "CLCyclingFTPAggregator feedworkoutevent: didFinish: %d, hadCycling: %d", &v41, 14);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPResults CLCyclingFTPAggregator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v28 = v32;
  v30 = 0;
  v31 = 0;
  __p = 0;
  sub_1008BC19C(&__p, v33, (uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (_BYTE *)v33) >> 3));
  v6 = sub_1013093DC(a1, (uint64_t)&v28, (_BYTE *)(a1 + 176));
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v7 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator end of workout and will calculate FTP", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
      LOWORD(v41) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "CLCyclingFTPAggregator end of workout and will calculate FTP", &v41, v23);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPResults CLCyclingFTPAggregator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    sub_10130882C(a1, (uint64_t)&v41, *(v34 - 2));
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v8 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_QWORD *)v34 - 2);
      v10 = *((_QWORD *)v34 - 1);
      *(_DWORD *)buf = 134218496;
      *(double *)v46 = v41;
      *(_WORD *)&v46[8] = 2048;
      v47 = v10;
      v48 = 2048;
      v49 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator FTP calculated ftp, %f, workout_type, %ld, timeStamp, %f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
      v19 = *((_QWORD *)v34 - 2);
      v20 = *((_QWORD *)v34 - 1);
      v35 = 134218496;
      v36 = v41;
      v37 = 2048;
      v38 = v20;
      v39 = 2048;
      v40 = v19;
      LODWORD(v23) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "CLCyclingFTPAggregator FTP calculated ftp, %f, workout_type, %ld, timeStamp, %f", COERCE_DOUBLE(&v35), v23, v24);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "const CLCyclingFTPResults CLCyclingFTPAggregator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v11 = *(_QWORD *)(a1 + 8);
    LOWORD(v24) = v32;
    v26 = 0;
    v27 = 0;
    v25 = 0;
    sub_1008BC19C(&v25, v33, (uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (_BYTE *)v33) >> 3));
    v12 = v41;
    sub_1009F5074(v11, (uint64_t)&v24, v41, v42);
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    v13 = v43;
    *(double *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    *(_BYTE *)(a3 + 16) = 1;
    *(_BYTE *)(a3 + 17) = v44 >= *(_DWORD *)(a1 + 236);
    v14 = v34;
    *(double *)(a3 + 24) = *(v34 - 1);
    *(double *)(a3 + 32) = *(v14 - 2);
    *(_BYTE *)(a3 + 40) = v32;
  }
  else
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = xmmword_101BDB7D0;
    *(_BYTE *)(a3 + 17) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  if (v33)
  {
    v34 = (double *)v33;
    operator delete(v33);
  }
}

void sub_10130937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1013093DC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v3;
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  NSObject *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  unsigned __int8 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject *v23;
  int v24;
  int v25;
  NSObject *v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint8_t *v31;
  NSObject *v32;
  unint64_t v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  int v39;
  _BYTE v40[14];
  char out[48];
  unsigned __int8 uu[16];
  __int128 v43;
  uint64_t v44;
  uint8_t buf[4];
  _BYTE v46[14];

  if (a3[58])
    v3 = a3[57] == 0;
  else
    v3 = 1;
  if (v3 || a3[56] == 0)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v5 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "The weight, height and age must be set. Do not calculate FTP.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    *(_WORD *)uu = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "The weight, height and age must be set. Do not calculate FTP.", uu, 2);
LABEL_84:
    v31 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v7);
    if (v31 != buf)
      free(v31);
    return 0;
  }
  if (!*(_BYTE *)a2)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v22 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Workout is not finished. Do not calculate FTP.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    *(_WORD *)uu = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Workout is not finished. Do not calculate FTP.", uu, 2);
    goto LABEL_84;
  }
  if (!*(_BYTE *)(a2 + 1))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v23 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v46 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Workout is not cycling. Do not calculate FTP workouttype:%d .", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v25 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)uu = 67109120;
    *(_DWORD *)&uu[4] = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Workout is not cycling. Do not calculate FTP workouttype:%d .", uu);
    goto LABEL_84;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v26 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v46 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "There was no session in this workout:%zu .", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    *(_DWORD *)uu = 134217984;
    *(_QWORD *)&uu[4] = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "There was no session in this workout:%zu .", uu);
    goto LABEL_84;
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
  v10 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v46 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "There were %zu sessions in this workout.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    *(_DWORD *)uu = 134217984;
    *(_QWORD *)&uu[4] = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "There were %zu sessions in this workout.", (size_t)uu);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v30 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "ValidSessions model missing when validating the workout. Not eligible to calculte the FTP.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    *(_WORD *)uu = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "ValidSessions model missing when validating the workout. Not eligible to calculte the FTP.", uu, 2);
    goto LABEL_84;
  }
  v12 = *(__int128 **)(a2 + 8);
  v13 = *(__int128 **)(a2 + 16);
  if (v12 == v13)
  {
LABEL_68:
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v29 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "The workout was not eligible to trigger FTP calculation.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    *(_WORD *)uu = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "The workout was not eligible to trigger FTP calculation.", uu, v38);
    goto LABEL_84;
  }
  v14 = 0;
  v15 = 1;
  while (1)
  {
    v16 = *v12;
    v17 = v12[1];
    v44 = *((_QWORD *)v12 + 4);
    *(_OWORD *)uu = v16;
    v43 = v17;
    memset(out, 0, 37);
    uuid_unparse(uu, out);
    sub_100616F48((char **)(a1 + 72), (__int128 *)(a1 + 96));
    (*(void (**)(_QWORD, uint64_t, double, double))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), a1 + 176, *(double *)&v43, *((double *)&v43 + 1));
    sub_10130742C((_QWORD **)a1);
    if (sub_1009F4990(*(_QWORD *)(a1 + 8), uu))
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
      v18 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v46 = v15;
        *(_WORD *)&v46[4] = 2080;
        *(_QWORD *)&v46[6] = out;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Session %d with uuid %s is not eligible to trigger FTP calculation since the ftp was calculated before.", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
        v39 = 67109378;
        *(_DWORD *)v40 = v15;
        *(_WORD *)&v40[4] = 2080;
        *(_QWORD *)&v40[6] = out;
        LODWORD(v38) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Session %d with uuid %s is not eligible to trigger FTP calculation since the ftp was calculated before.", &v39, v38);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v14 = 0;
      v19 = 1;
    }
    else
    {
      v19 = sub_100D9EB5C(*(int **)(a1 + 96), v15, (uint64_t)out, *(double *)&v43, *((double *)&v43 + 1));
      if (v19)
        v14 = 1;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96));
    sub_10130864C(a1);
    if (v19)
      break;
    v12 = (__int128 *)((char *)v12 + 40);
    ++v15;
    if (v12 == v13)
      goto LABEL_68;
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
  v32 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v46 = out;
    *(_WORD *)&v46[8] = 1024;
    *(_DWORD *)&v46[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "The session %s is processed and its eligibility is %d.", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AE4C0);
    v39 = 136315394;
    *(_QWORD *)v40 = out;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)&v40[10] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "The session %s is processed and its eligibility is %d.", (const char *)&v39, 18);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  return v14 != 0;
}

uint64_t sub_101309F8C(uint64_t a1)
{
  return sub_1009F487C(*(_QWORD *)(a1 + 8));
}

void sub_101309F94(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_101309FC0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_101309FEC@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xF8uLL);
  result = sub_10130A044(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130A030(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A044(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021AE510;
  sub_1009F16DC((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_10130A080(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A094(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A0A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A0DC(uint64_t a1)
{
  char v2;

  return sub_10130A104((uint64_t)&v2, a1 + 24);
}

uint64_t sub_10130A104(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_100008848(a2 + 192, *(_QWORD **)(a2 + 200));
  v3 = *(void **)(a2 + 120);
  if (v3)
  {
    *(_QWORD *)(a2 + 128) = v3;
    operator delete(v3);
  }
  sub_100261F44(a2 + 24);
  return sub_100261F44(a2 + 8);
}

_QWORD *sub_10130A148@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD8uLL);
  result = sub_10130A1A0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130A18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A1A0(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021AE560;
  a1[1] = 0;
  sub_10130A258((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10130A1EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A200(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A214(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A248(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10130A258(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = a3[1];
  v10 = *a3;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6.n128_f64[0] = sub_100615D5C(a2, &v10);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_10130A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A2F0@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = sub_1011D7910(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130A334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A348@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_10130A3A0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130A38C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A3A0(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021AE5B0;
  a1[1] = 0;
  sub_10130A458((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_10130A3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A400(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A414(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A448(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_10130A458(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a2 = off_1021AE600;
    a2[1] = v3;
    a2[2] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a2 = off_1021AE600;
    a2[1] = v3;
    a2[2] = 0;
  }
}

uint64_t sub_10130A4F8(uint64_t a1, uint64_t a2)
{
  return sub_100423B04(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10130A500(uint64_t a1, _QWORD *a2)
{
  return sub_1013DA1A8(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_10130A508(_QWORD *a1)
{
  *a1 = off_1021AE600;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_10130A53C(_QWORD *a1)
{
  *a1 = off_1021AE600;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10130A580@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x98uLL);
  result = sub_10130A5D8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10130A5C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A5D8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021AE640;
  a1[1] = 0;
  sub_100D9E914(a1 + 3);
  return a1;
}

void sub_10130A610(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A624(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A638(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A66C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10130A67C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xF0uLL);
  result = sub_10130A6DC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10130A6C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A6DC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021AE690;
  a1[1] = 0;
  sub_101268190(a1 + 3);
  return a1;
}

void sub_10130A714(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A73C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A770(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10130A780@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x90uLL);
  result = sub_10130A7D8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130A7C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A7D8(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = off_1021AE6E0;
  a1[1] = 0;
  sub_1013B46CC(a1 + 3, a2);
  return a1;
}

void sub_10130A810(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A824(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A838(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A86C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10130A87C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x118uLL);
  result = sub_10130A8D4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10130A8C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A8D4(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021AE730;
  a1[1] = 0;
  sub_10134E3A0(a1 + 3);
  return a1;
}

void sub_10130A90C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130A920(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130A934(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130A968(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10130A978@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD0uLL);
  result = sub_10130A9D0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130A9BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10130A9D0(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = off_1021AE780;
  a1[1] = 0;
  sub_10104F394(a1 + 3, a2);
  return a1;
}

void sub_10130AA08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10130AA1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10130AA30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AE780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10130AA64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_10130AA74(double *a1)
{
  double result;
  double v2;
  double v3;

  result = a1[10];
  v2 = a1[25];
  if (v2 > 0.0)
  {
    v3 = a1[26];
    if (v3 > 0.0)
      return sqrt(v3 / 2.45 * (v3 / 2.45) + v2 / 2.45 * (v2 / 2.45));
  }
  return result;
}

uint64_t sub_10130AAB0(uint64_t result, BOOL *a2, _BYTE *a3)
{
  double v3;
  double v4;
  BOOL v5;

  *a3 = 0;
  *a2 = 0;
  v3 = *(double *)(result + 192);
  v4 = *(double *)(result + 104);
  if (v3 <= 0.0 || v4 < 0.0)
  {
    if (v4 < 0.0)
      return result;
    v5 = 1;
  }
  else
  {
    *a3 = 1;
    v5 = v3 < 180.0;
  }
  *a2 = v5;
  return result;
}

double sub_10130AB00(uint64_t a1)
{
  double result;
  uint64_t v2;
  uint64_t v3;

  result = *(double *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  *(double *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 160) = v2;
  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 168) = v3;
  *(double *)(a1 + 288) = result;
  *(_QWORD *)(a1 + 296) = v2;
  *(_QWORD *)(a1 + 304) = v3;
  *(double *)(a1 + 312) = result;
  *(_QWORD *)(a1 + 320) = v2;
  *(double *)(a1 + 328) = result;
  *(_QWORD *)(a1 + 336) = v2;
  *(_DWORD *)(a1 + 280) = 0;
  return result;
}

void sub_10130AB28(uint64_t *a1, uint64_t *a2, double a3)
{
  NSObject *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  const char *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  __int16 v144;
  double v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  double v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  __int16 v192;
  uint64_t v193;
  __int16 v194;
  uint64_t v195;
  __int16 v196;
  uint64_t v197;
  __int16 v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  uint64_t v205;
  __int16 v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  double v213;
  __int16 v214;
  double v215;
  __int16 v216;
  uint64_t v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  __int16 v224;
  int v225;
  __int16 v226;
  int v227;
  __int16 v228;
  uint64_t v229;
  __int16 v230;
  int v231;
  __int16 v232;
  uint64_t v233;
  __int16 v234;
  int v235;
  __int16 v236;
  int v237;
  __int16 v238;
  _QWORD *v239;
  __int16 v240;
  int v241;
  __int16 v242;
  int v243;
  __int16 v244;
  int v245;
  __int16 v246;
  uint64_t v247;
  __int16 v248;
  int v249;
  __int16 v250;
  int v251;
  __int16 v252;
  int v253;
  __int16 v254;
  int v255;
  __int16 v256;
  int v257;
  __int16 v258;
  int v259;
  __int16 v260;
  int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  int v265;
  __int16 v266;
  int v267;
  __int16 v268;
  uint64_t v269;
  __int16 v270;
  uint64_t v271;
  __int16 v272;
  int v273;
  __int16 v274;
  int v275;
  __int16 v276;
  double v277;
  __int16 v278;
  uint64_t v279;
  uint8_t buf[4];
  uint64_t *v281;
  __int16 v282;
  double v283;
  __int16 v284;
  uint64_t v285;
  __int16 v286;
  uint64_t v287;
  __int16 v288;
  uint64_t v289;
  __int16 v290;
  int v291;
  __int16 v292;
  int v293;
  __int16 v294;
  uint64_t v295;
  __int16 v296;
  uint64_t v297;
  __int16 v298;
  uint64_t v299;
  __int16 v300;
  uint64_t v301;
  __int16 v302;
  uint64_t v303;
  __int16 v304;
  uint64_t v305;
  __int16 v306;
  uint64_t v307;
  __int16 v308;
  double v309;
  __int16 v310;
  uint64_t v311;
  __int16 v312;
  uint64_t v313;
  __int16 v314;
  uint64_t v315;
  __int16 v316;
  uint64_t v317;
  __int16 v318;
  uint64_t v319;
  __int16 v320;
  uint64_t v321;
  __int16 v322;
  uint64_t v323;
  __int16 v324;
  uint64_t v325;
  __int16 v326;
  uint64_t v327;
  __int16 v328;
  uint64_t v329;
  __int16 v330;
  uint64_t v331;
  __int16 v332;
  uint64_t v333;
  __int16 v334;
  uint64_t v335;
  __int16 v336;
  uint64_t v337;
  __int16 v338;
  uint64_t v339;
  __int16 v340;
  uint64_t v341;
  __int16 v342;
  uint64_t v343;
  __int16 v344;
  uint64_t v345;
  __int16 v346;
  uint64_t v347;
  __int16 v348;
  uint64_t v349;
  __int16 v350;
  double v351;
  __int16 v352;
  double v353;
  __int16 v354;
  uint64_t v355;
  __int16 v356;
  uint64_t v357;
  __int16 v358;
  uint64_t v359;
  __int16 v360;
  uint64_t v361;
  __int16 v362;
  int v363;
  __int16 v364;
  int v365;
  __int16 v366;
  uint64_t v367;
  __int16 v368;
  int v369;
  __int16 v370;
  uint64_t v371;
  __int16 v372;
  int v373;
  __int16 v374;
  int v375;
  __int16 v376;
  _QWORD *v377;
  __int16 v378;
  int v379;
  __int16 v380;
  int v381;
  __int16 v382;
  int v383;
  __int16 v384;
  uint64_t v385;
  __int16 v386;
  int v387;
  __int16 v388;
  int v389;
  __int16 v390;
  int v391;
  __int16 v392;
  int v393;
  __int16 v394;
  int v395;
  __int16 v396;
  int v397;
  __int16 v398;
  int v399;
  __int16 v400;
  int v401;
  __int16 v402;
  int v403;
  __int16 v404;
  int v405;
  __int16 v406;
  uint64_t v407;
  __int16 v408;
  uint64_t v409;
  __int16 v410;
  int v411;
  __int16 v412;
  int v413;
  __int16 v414;
  double v415;
  __int16 v416;
  uint64_t v417;

  v141 = 0;
  sub_100073658((int *)&v141, (_DWORD *)&v141 + 1, *((double *)a1 + 1));
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
  v6 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = a2;
    if (*((char *)a2 + 23) < 0)
      v7 = (uint64_t *)*a2;
    v140 = a2;
    v8 = *(double *)a1;
    v9 = a1[1];
    v10 = a1[2];
    v11 = a1[3];
    v12 = a1[7];
    v13 = a1[8];
    v15 = a1[9];
    v14 = a1[10];
    v16 = a1[11];
    v17 = *((double *)a1 + 12) * 3.6;
    v19 = a1[23];
    v18 = a1[24];
    v20 = a1[25];
    v21 = a1[26];
    v116 = a1[27];
    v23 = a1[19];
    v22 = a1[20];
    v24 = a1[21];
    v25 = a1[37];
    v112 = a1[36];
    v26 = a1[41];
    v98 = a1[42];
    v27 = a1[38];
    v100 = a1[39];
    v104 = a1[40];
    v106 = a1[46];
    v108 = a1[47];
    v110 = a1[48];
    v114 = a1[49];
    v28 = *((float *)a1 + 44);
    v29 = *((float *)a1 + 45);
    v97 = a1[4];
    v102 = a1[5];
    v118 = a1[29];
    v120 = a1[30];
    v122 = a1[31];
    v124 = a1[32];
    v138 = *((unsigned __int8 *)a1 + 264);
    v136 = *((unsigned __int8 *)a1 + 265);
    v134 = a1[34];
    v132 = *((_DWORD *)a1 + 70);
    v30 = a1[13];
    v130 = a1[14];
    v128 = *((_DWORD *)a1 + 30);
    v126 = *((_DWORD *)a1 + 31);
    v31 = a1 + 16;
    if (*((char *)a1 + 151) < 0)
      v31 = (_QWORD *)*v31;
    v281 = v7;
    v283 = v8;
    v285 = v9;
    v287 = v10;
    v289 = v11;
    v293 = HIDWORD(v141);
    v291 = v141;
    v295 = v12;
    v297 = v13;
    v299 = v14;
    v301 = v15;
    v303 = v16;
    v305 = v30;
    v307 = v18;
    v311 = v19;
    v313 = v20;
    v315 = v21;
    v319 = v23;
    v32 = *((_DWORD *)a1 + 56);
    v321 = v22;
    v33 = *((_DWORD *)a1 + 86);
    v323 = v24;
    v34 = *((unsigned __int8 *)a1 + 228);
    v327 = v25;
    v35 = a1[44];
    v329 = v27;
    v36 = *((unsigned __int8 *)a1 + 229);
    v331 = v26;
    v37 = *((unsigned __int8 *)a1 + 350);
    v38 = *((unsigned __int8 *)a1 + 351);
    v317 = v116;
    v39 = *((unsigned __int8 *)a1 + 360);
    v325 = v112;
    v40 = *((unsigned __int8 *)a1 + 349);
    v333 = v98;
    v41 = *((unsigned __int8 *)a1 + 361);
    v335 = v100;
    v42 = *((unsigned __int8 *)a1 + 362);
    v337 = v104;
    v43 = *((unsigned __int8 *)a1 + 348);
    v339 = v106;
    v44 = *((_DWORD *)a1 + 100);
    v341 = v108;
    v45 = *((_DWORD *)a1 + 101);
    v343 = v110;
    v46 = a1[51];
    v345 = v114;
    v47 = a1[6];
    v347 = v97;
    v48 = *((_DWORD *)a1 + 104);
    v349 = v102;
    v49 = *((_DWORD *)a1 + 105);
    v355 = v118;
    v50 = a1[53];
    *(_DWORD *)buf = 136463619;
    v357 = v120;
    v282 = 2050;
    v284 = 2050;
    v286 = 2050;
    v288 = 2050;
    v359 = v122;
    v290 = 1026;
    v292 = 1026;
    v361 = v124;
    v294 = 2049;
    v296 = 2049;
    v298 = 2050;
    v300 = 2050;
    v302 = 2050;
    v304 = 2050;
    v306 = 2050;
    v308 = 2050;
    v309 = v17;
    v310 = 2050;
    v312 = 2050;
    v314 = 2050;
    v316 = 2050;
    v318 = 2049;
    v320 = 2049;
    v322 = 2050;
    v324 = 2049;
    v326 = 2049;
    v328 = 2050;
    v330 = 2049;
    v332 = 2049;
    v334 = 2049;
    v336 = 2049;
    v338 = 2049;
    v340 = 2049;
    v342 = 2049;
    v344 = 2049;
    v346 = 2049;
    v348 = 2049;
    v350 = 2050;
    v351 = v28;
    v352 = 2050;
    v353 = v29;
    v354 = 2050;
    v356 = 2050;
    v358 = 2050;
    v360 = 2050;
    v362 = 1026;
    v363 = v138;
    v364 = 1026;
    v365 = v136;
    v366 = 2050;
    v367 = v134;
    v368 = 1026;
    v369 = v132;
    v370 = 2049;
    v371 = v130;
    v372 = 1026;
    v373 = v128;
    v374 = 1026;
    v375 = v126;
    v376 = 2081;
    v377 = v31;
    v378 = 1026;
    v379 = v32;
    v380 = 1026;
    v381 = v33;
    v382 = 1026;
    v383 = v34;
    v384 = 2050;
    v385 = v35;
    v386 = 1026;
    v387 = v36;
    v388 = 1026;
    v389 = v37;
    v390 = 1026;
    v391 = v38;
    v392 = 1026;
    v393 = v39;
    v394 = 1026;
    v395 = v40;
    v396 = 1026;
    v397 = v41;
    v398 = 1026;
    v399 = v42;
    v400 = 1026;
    v401 = v43;
    v402 = 1026;
    v403 = v44;
    v404 = 1026;
    v405 = v45;
    v406 = 2050;
    v407 = v46;
    v408 = 2050;
    v409 = v47;
    v410 = 1026;
    v411 = v48;
    v412 = 1026;
    v413 = v49;
    v414 = 2050;
    v415 = a3;
    v416 = 2050;
    v417 = v50;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,%{public}s,trip,%{public}lld,T,%{public}.1lf,machT,%{public}.2lf,contT,%{public}.2lf,gpsTMs,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crse,%{public}.1lf,crseUnc,%{public}.1lf,spdKph,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,pSnapLL,%{private}.7lf,%{private}.7lf,rwSnapLL,%{private}.7lf,%{private}.7lf,rwSnapOfstLL,%{private}.7lf,%{private}.7lf,rwFSnapOfstLL,%{private}.7lf,%{private}.7lf,rwLL,%{private}.7lf,%{private}.7lf,score,%{public}.1lf,ratio,%{public}.1lf,varFac,%{public}.7g,deltaAz,%{public}.3lf,alngTrk,%{public}.3lf,acrsTrk,%{public}.3lf,usable,%{public}d,ambiguous,%{public}d,proj,%{public}.3lf,type,%{public}d,rseg,%{private}lld,frc,%{public}d,fow,%{public}d,road,\"%{private}s\",activity,%{public}d,actConf,%{public}d,static,%{public}d,staticSetAt,%{public}.1lf,mount,%{public}d,fitness,%{public}d,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,favGPS,%{public}d,gnssCont,%{public}d,locationType,%{public}d,lifespan,%{public}.1lf,rawCourse,%{public}.1lf,sigEnv,%{public}d,sigEnvFid,%{public}d,latency,%{public}.1lf,rw,%{public}.2lf", buf, 0x25Cu);
    a2 = v140;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v51 = *(double *)a1;
    v52 = a1[1];
    v53 = a1[2];
    v54 = a1[3];
    v55 = a1[7];
    v56 = a1[8];
    v58 = a1[9];
    v57 = a1[10];
    v59 = a1[11];
    v60 = *((double *)a1 + 12) * 3.6;
    v62 = a1[23];
    v61 = a1[24];
    v63 = a1[25];
    v64 = a1[26];
    v65 = a1[27];
    v67 = a1[19];
    v66 = a1[20];
    v68 = a1[21];
    v69 = a1[37];
    v113 = a1[36];
    v70 = a1[41];
    v99 = a1[42];
    v71 = a1[38];
    v103 = a1[39];
    v105 = a1[40];
    v107 = a1[46];
    v111 = a1[47];
    v115 = a1[48];
    v117 = a1[49];
    v72 = *((float *)a1 + 44);
    v73 = *((float *)a1 + 45);
    v101 = a1[4];
    v109 = a1[5];
    v119 = a1[29];
    v121 = a1[30];
    v123 = a1[31];
    v125 = a1[32];
    v139 = *((unsigned __int8 *)a1 + 264);
    v137 = *((unsigned __int8 *)a1 + 265);
    v135 = a1[34];
    v133 = *((_DWORD *)a1 + 70);
    v74 = a1[13];
    v131 = a1[14];
    v129 = *((_DWORD *)a1 + 30);
    v127 = *((_DWORD *)a1 + 31);
    v75 = a1 + 16;
    if (*((char *)a1 + 151) < 0)
      v75 = (_QWORD *)*v75;
    v143 = a2;
    v145 = v51;
    v147 = v52;
    v149 = v53;
    v151 = v54;
    v155 = HIDWORD(v141);
    v153 = v141;
    v157 = v55;
    v159 = v56;
    v161 = v57;
    v163 = v58;
    v165 = v59;
    v167 = v74;
    v169 = v61;
    v173 = v62;
    v175 = v63;
    v177 = v64;
    v179 = v65;
    v181 = v67;
    v76 = *((_DWORD *)a1 + 56);
    v183 = v66;
    v77 = *((_DWORD *)a1 + 86);
    v185 = v68;
    v78 = *((unsigned __int8 *)a1 + 228);
    v189 = v69;
    v79 = a1[44];
    v191 = v71;
    v80 = *((unsigned __int8 *)a1 + 229);
    v193 = v70;
    v81 = *((unsigned __int8 *)a1 + 350);
    v82 = *((unsigned __int8 *)a1 + 351);
    v187 = v113;
    v83 = *((unsigned __int8 *)a1 + 360);
    v195 = v99;
    v84 = *((unsigned __int8 *)a1 + 349);
    v197 = v103;
    v85 = *((unsigned __int8 *)a1 + 361);
    v199 = v105;
    v86 = *((unsigned __int8 *)a1 + 362);
    v201 = v107;
    v87 = *((unsigned __int8 *)a1 + 348);
    v203 = v111;
    v88 = *((_DWORD *)a1 + 100);
    v205 = v115;
    v89 = *((_DWORD *)a1 + 101);
    v207 = v117;
    v90 = a1[51];
    v209 = v101;
    v91 = a1[6];
    v211 = v109;
    v92 = *((_DWORD *)a1 + 104);
    v217 = v119;
    v93 = *((_DWORD *)a1 + 105);
    v94 = a1[53];
    v142 = 136463619;
    v219 = v121;
    v144 = 2050;
    v146 = 2050;
    v148 = 2050;
    v150 = 2050;
    v221 = v123;
    v152 = 1026;
    v154 = 1026;
    v223 = v125;
    v156 = 2049;
    v158 = 2049;
    v160 = 2050;
    v162 = 2050;
    v164 = 2050;
    v166 = 2050;
    v168 = 2050;
    v170 = 2050;
    v171 = v60;
    v172 = 2050;
    v174 = 2050;
    v176 = 2050;
    v178 = 2050;
    v180 = 2049;
    v182 = 2049;
    v184 = 2050;
    v186 = 2049;
    v188 = 2049;
    v190 = 2050;
    v192 = 2049;
    v194 = 2049;
    v196 = 2049;
    v198 = 2049;
    v200 = 2049;
    v202 = 2049;
    v204 = 2049;
    v206 = 2049;
    v208 = 2049;
    v210 = 2049;
    v212 = 2050;
    v213 = v72;
    v214 = 2050;
    v215 = v73;
    v216 = 2050;
    v218 = 2050;
    v220 = 2050;
    v222 = 2050;
    v224 = 1026;
    v225 = v139;
    v226 = 1026;
    v227 = v137;
    v228 = 2050;
    v229 = v135;
    v230 = 1026;
    v231 = v133;
    v232 = 2049;
    v233 = v131;
    v234 = 1026;
    v235 = v129;
    v236 = 1026;
    v237 = v127;
    v238 = 2081;
    v239 = v75;
    v240 = 1026;
    v241 = v76;
    v242 = 1026;
    v243 = v77;
    v244 = 1026;
    v245 = v78;
    v246 = 2050;
    v247 = v79;
    v248 = 1026;
    v249 = v80;
    v250 = 1026;
    v251 = v81;
    v252 = 1026;
    v253 = v82;
    v254 = 1026;
    v255 = v83;
    v256 = 1026;
    v257 = v84;
    v258 = 1026;
    v259 = v85;
    v260 = 1026;
    v261 = v86;
    v262 = 1026;
    v263 = v87;
    v264 = 1026;
    v265 = v88;
    v266 = 1026;
    v267 = v89;
    v268 = 2050;
    v269 = v90;
    v270 = 2050;
    v271 = v91;
    v272 = 1026;
    v273 = v92;
    v274 = 1026;
    v275 = v93;
    v276 = 2050;
    v277 = a3;
    v278 = 2050;
    v279 = v94;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}s,trip,%{public}lld,T,%{public}.1lf,machT,%{public}.2lf,contT,%{public}.2lf,gpsTMs,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crse,%{public}.1lf,crseUnc,%{public}.1lf,spdKph,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,pSnapLL,%{private}.7lf,%{private}.7lf,rwSnapLL,%{private}.7lf,%{private}.7lf,rwSnapOfstLL,%{private}.7lf,%{private}.7lf,rwFSnapOfstLL,%{private}.7lf,%{private}.7lf,rwLL,%{private}.7lf,%{private}.7lf,score,%{public}.1lf,ratio,%{public}.1lf,varFac,%{public}.7g,deltaAz,%{public}.3lf,alngTrk,%{public}.3lf,acrsTrk,%{public}.3lf,usable,%{public}d,ambiguous,%{public}d,proj,%{public}.3lf,type,%{public}d,rseg,%{private}lld,frc,%{public}d,fow,%{public}d,road,\"%{private}s\",activity,%{public}d,actConf,%{public}d,static,%{public}d,staticSetAt,%{public}.1lf,mount,%{public}d,fitness,%{public}d,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,favGPS,%{public}d,gnssCont,%{public}d,locationType,%{public}d,lifespan,%{public}.1lf,rawCourse,%{public}.1lf,sigEnv,%{public}d,sigEnvFid,%{public}d,latency,%{public}.1lf,rw,%{public}.2lf",
      &v142,
      604);
    v96 = (uint8_t *)v95;
    sub_100512490("Generic", 1, 0, 2, "void CLMapCrumb::debugOutput(const std::string, double)", "%s\n", v95);
    if (v96 != buf)
      free(v96);
  }
}

void sub_10130B504(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  int v41;
  uint64_t *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  uint64_t v102;
  uint8_t buf[4];
  uint64_t *v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  uint64_t v164;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
  v4 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2;
    if (*((char *)a2 + 23) < 0)
      v5 = (uint64_t *)*a2;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(a1 + 265);
    v104 = v5;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 64);
    v106 = v6;
    v110 = v7;
    v10 = *(_QWORD *)(a1 + 152);
    v11 = *(_QWORD *)(a1 + 160);
    v112 = v8;
    v12 = *(_QWORD *)(a1 + 168);
    v114 = v9;
    v118 = v10;
    v14 = *(_QWORD *)(a1 + 296);
    v13 = *(_QWORD *)(a1 + 304);
    v120 = v11;
    v122 = v12;
    v16 = *(_QWORD *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 80);
    v126 = v14;
    v128 = v13;
    v17 = *(_QWORD *)(a1 + 88);
    v18 = *(_QWORD *)(a1 + 96);
    v130 = v15;
    v134 = v17;
    v19 = *(_QWORD *)(a1 + 184);
    v136 = *(_QWORD *)(a1 + 192);
    v138 = v18;
    v20 = *(_QWORD *)(a1 + 208);
    v142 = *(_QWORD *)(a1 + 200);
    v144 = v20;
    v146 = *(_QWORD *)(a1 + 216);
    v150 = *(unsigned __int8 *)(a1 + 360);
    v154 = *(unsigned __int8 *)(a1 + 361);
    v158 = *(_DWORD *)(a1 + 404);
    v162 = *(_DWORD *)(a1 + 420);
    v108 = *(unsigned __int8 *)(a1 + 264);
    v116 = *(_QWORD *)(a1 + 104);
    v124 = *(_QWORD *)(a1 + 288);
    v111 = 2049;
    v113 = 2049;
    v117 = 2049;
    v119 = 2049;
    v123 = 2049;
    v125 = 2049;
    v132 = v16;
    v140 = v19;
    v148 = *(unsigned __int8 *)(a1 + 351);
    v152 = *(unsigned __int8 *)(a1 + 349);
    v156 = *(unsigned __int8 *)(a1 + 362);
    v160 = *(_DWORD *)(a1 + 416);
    v107 = 1026;
    v109 = 1026;
    v147 = 1026;
    v149 = 1026;
    v151 = 1026;
    v153 = 1026;
    v155 = 1026;
    v157 = 1026;
    v159 = 1026;
    v161 = 1026;
    v105 = 2050;
    v115 = 2050;
    v121 = 2050;
    v127 = 2050;
    v129 = 2050;
    v131 = 2050;
    v133 = 2050;
    v135 = 2050;
    v137 = 2050;
    v139 = 2050;
    v141 = 2050;
    v143 = 2050;
    v145 = 2050;
    v163 = 2050;
    v164 = *(_QWORD *)(a1 + 424);
    *(_DWORD *)buf = 136453891;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,%{public}s,T,%{public}.1lf,usable,%{public}d,ambiguous,%{public}d,LL,%{private}.7lf,%{private}.7lf,crse,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crseUnc,%{public}.1lf,spdMps,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,locationType,%{public}d,sigEnv,%{public}d,sigEnvFid,%{public}d,rw,%{public}.2lf", buf, 0x110u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(unsigned __int8 *)(a1 + 264);
    v42 = a2;
    v23 = *(unsigned __int8 *)(a1 + 265);
    v44 = v21;
    v46 = v22;
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_QWORD *)(a1 + 64);
    v48 = v23;
    v26 = *(_QWORD *)(a1 + 104);
    v50 = v24;
    v52 = v25;
    v27 = *(_QWORD *)(a1 + 152);
    v28 = *(_QWORD *)(a1 + 160);
    v54 = v26;
    v29 = *(_QWORD *)(a1 + 168);
    v56 = v27;
    v58 = v28;
    v30 = *(_QWORD *)(a1 + 288);
    v31 = *(_QWORD *)(a1 + 296);
    v60 = v29;
    v32 = *(_QWORD *)(a1 + 304);
    v62 = v30;
    v49 = 2049;
    v51 = 2049;
    v55 = 2049;
    v57 = 2049;
    v61 = 2049;
    v63 = 2049;
    v64 = v31;
    v33 = *(_QWORD *)(a1 + 88);
    v34 = *(_QWORD *)(a1 + 96);
    v66 = v32;
    v72 = v33;
    v35 = *(_QWORD *)(a1 + 184);
    v74 = *(_QWORD *)(a1 + 192);
    v76 = v34;
    v36 = *(_QWORD *)(a1 + 208);
    v80 = *(_QWORD *)(a1 + 200);
    v37 = *(_QWORD *)(a1 + 216);
    v82 = v36;
    LODWORD(v36) = *(unsigned __int8 *)(a1 + 360);
    v84 = v37;
    LODWORD(v37) = *(unsigned __int8 *)(a1 + 361);
    v88 = v36;
    LODWORD(v36) = *(_DWORD *)(a1 + 404);
    v92 = v37;
    LODWORD(v37) = *(_DWORD *)(a1 + 420);
    v96 = v36;
    v100 = v37;
    v38 = *(_QWORD *)(a1 + 72);
    v68 = *(_QWORD *)(a1 + 80);
    v70 = v38;
    v78 = v35;
    v86 = *(unsigned __int8 *)(a1 + 351);
    v90 = *(unsigned __int8 *)(a1 + 349);
    v94 = *(unsigned __int8 *)(a1 + 362);
    v98 = *(_DWORD *)(a1 + 416);
    v45 = 1026;
    v47 = 1026;
    v85 = 1026;
    v87 = 1026;
    v89 = 1026;
    v91 = 1026;
    v93 = 1026;
    v95 = 1026;
    v97 = 1026;
    v99 = 1026;
    v43 = 2050;
    v53 = 2050;
    v59 = 2050;
    v65 = 2050;
    v67 = 2050;
    v69 = 2050;
    v71 = 2050;
    v73 = 2050;
    v75 = 2050;
    v77 = 2050;
    v79 = 2050;
    v81 = 2050;
    v83 = 2050;
    v101 = 2050;
    v102 = *(_QWORD *)(a1 + 424);
    v41 = 136453891;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}s,T,%{public}.1lf,usable,%{public}d,ambiguous,%{public}d,LL,%{private}.7lf,%{private}.7lf,crse,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crseUnc,%{public}.1lf,spdMps,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,locationType,%{public}d,sigEnv,%{public}d,sigEnvFid,%{public}d,rw,%{public}.2lf", &v41, 272);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLMapCrumb::condensedDebugOutput(const std::string) const", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
}

std::string *sub_10130B990@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string v9;
  void *__p[2];
  int64_t v11;
  uint64_t v12;
  char __str[256];

  v12 = 0;
  sub_100073658((int *)&v12 + 1, &v12, *(double *)(a1 + 8));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  snprintf(__str, 0x100uLL, "trip,%lld", *(_QWORD *)a1);
  std::string::assign(a2, __str);
  snprintf(__str, 0x100uLL, ",T,%.1lf", *(double *)(a1 + 8));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",machT,%.2lf", *(double *)(a1 + 16));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",contT,%.2lf", *(double *)(a1 + 24));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gpsTMs,%d,%d", HIDWORD(v12), v12);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",LL,%.7lf,%.7lf", *(double *)(a1 + 56), *(double *)(a1 + 64));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",hunc,%.1lf", *(double *)(a1 + 80));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alt,%.1lf", *(double *)(a1 + 72));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",vunc,%.1lf", *(double *)(a1 + 88));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crse,%.1lf", *(double *)(a1 + 104));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crseUnc,%.1lf", *(double *)(a1 + 192));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdKph,%.3lf", *(double *)(a1 + 96) * 3.6);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdUncMps,%.1lf", *(double *)(a1 + 184));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",a95,%.1lf", *(double *)(a1 + 200));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",b95,%.1lf", *(double *)(a1 + 208));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",theta,%.1lf", *(double *)(a1 + 216));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapLL,%.7lf,%.7lf", *(double *)(a1 + 152), *(double *)(a1 + 160));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapCrse,%.1lf", *(double *)(a1 + 168));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapLL,%.7lf,%.7lf", *(double *)(a1 + 288), *(double *)(a1 + 296));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapCrse,%.1lf", *(double *)(a1 + 304));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",pSnapLL,%.7lf,%.7lf", *(double *)(a1 + 328), *(double *)(a1 + 336));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapLL,%.7lf,%.7lf", *(double *)(a1 + 312), *(double *)(a1 + 320));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 368), *(double *)(a1 + 376));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwFSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 384), *(double *)(a1 + 392));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwLL,%.7lf,%.7lf", *(double *)(a1 + 32), *(double *)(a1 + 40));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",score,%.1lf", *(float *)(a1 + 176));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ratio,%.1lf", *(float *)(a1 + 180));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",varFac,%.7g", *(double *)(a1 + 232));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",deltaAz,%.3lf", *(double *)(a1 + 240));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alngTrk,%.3lf", *(double *)(a1 + 248));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",acrsTrk,%.3lf", *(double *)(a1 + 256));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",usable,%d", *(unsigned __int8 *)(a1 + 264));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ambiguous,%d", *(unsigned __int8 *)(a1 + 265));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",proj,%.3lf", *(double *)(a1 + 272));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",type,%d", *(_DWORD *)(a1 + 280));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rseg,%lld", *(_QWORD *)(a1 + 112));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",frc,%d", *(_DWORD *)(a1 + 120));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fow,%d", *(_DWORD *)(a1 + 124));
  std::string::append(a2, __str);
  std::operator+<char>(&v9, ",road,\"", a1 + 128);
  v4 = std::string::append(&v9, "\"");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v11 >= 0)
    v7 = HIBYTE(v11);
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  snprintf(__str, 0x100uLL, ",activity,%d", *(_DWORD *)(a1 + 224));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",actConf,%d", *(_DWORD *)(a1 + 344));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",static,%d", *(unsigned __int8 *)(a1 + 228));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",staticSetAt,%.1lf", *(double *)(a1 + 352));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",mount,%d", *(unsigned __int8 *)(a1 + 229));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fitness,%d", *(unsigned __int8 *)(a1 + 350));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",shifted,%d", *(unsigned __int8 *)(a1 + 351));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",propagated,%d", *(unsigned __int8 *)(a1 + 360));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rail,%d", *(unsigned __int8 *)(a1 + 349));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",bridge,%d", *(unsigned __int8 *)(a1 + 361));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",tunnel,%d", *(unsigned __int8 *)(a1 + 362));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",favGPS,%d", *(unsigned __int8 *)(a1 + 348));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gnssCont,%d", *(_DWORD *)(a1 + 400));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",locationType,%d", *(_DWORD *)(a1 + 404));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",lifespan,%.1lf", *(double *)(a1 + 408));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rawCourse,%.1lf", *(double *)(a1 + 48));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rw,%.2lf", *(double *)(a1 + 424));
  return std::string::append(a2, __str);
}

void sub_10130C334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(exception_object);
}

double sub_10130C38C(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 368) = v4;
  *(_QWORD *)(a1 + 376) = v5;
  *(_QWORD *)(a1 + 384) = v4;
  *(_QWORD *)(a1 + 392) = v5;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0.0;
  sub_1015A2E04(v17, "SnapOutput");
  if (sub_10130C630(a1, a2, (uint64_t *)v17, (double *)&v22, (double *)&v21, *(double *)(a1 + 152), *(double *)(a1 + 160)))
  {
    sub_1015A2E04(__p, "FullSnapOutput");
    v6 = !sub_10130C630(a1, a2, (uint64_t *)__p, &v20, (double *)&v19, *(double *)(a1 + 288), *(double *)(a1 + 296));
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = 1;
  }
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (v6)
      goto LABEL_7;
LABEL_17:
    v13 = v21;
    *(_QWORD *)(a1 + 368) = v22;
    *(_QWORD *)(a1 + 376) = v13;
    v14 = v19;
    result = v20;
    *(double *)(a1 + 384) = v20;
    *(_QWORD *)(a1 + 392) = v14;
    return result;
  }
  if (!v6)
    goto LABEL_17;
LABEL_7:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
  v7 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf, not matching, unable to compute snap from raw positions", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
    v10 = *(_QWORD *)(a1 + 8);
    v23 = 134349056;
    v24 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM, %{public}.1lf, not matching, unable to compute snap from raw positions", &v23, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMapCrumb::fillSnapSolutionFromRawGPS(CLDistanceCalc &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return result;
}

void sub_10130C5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

BOOL sub_10130C630(uint64_t a1, double *a2, uint64_t *a3, double *a4, double *a5, double a6, double a7)
{
  NSObject *v14;
  uint64_t v15;
  _BOOL8 v16;
  NSObject *v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  uint64_t *v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;

  if (sub_10011CE64(*(double *)(a1 + 56), *(double *)(a1 + 64))
    || sub_10011CE64(*(double *)(a1 + 32), *(double *)(a1 + 40)))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v48 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMM, %{public}.1lf, null island", buf, 0xCu);
    }
    v16 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v16;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
    v28 = *(_QWORD *)(a1 + 8);
    v35 = 134349056;
    v36 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, %{public}.1lf, null island", &v35, 12);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "%s\n", v29);
    if (v30 != buf)
      free(v30);
    return 0;
  }
  v33 = 0.0;
  v34 = 0.0;
  v32 = 0.0;
  if (!sub_10011E780(a2, &v33, &v34, &v32, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), a6, a7, *(double *)(a1 + 72)))return 0;
  v31 = 0;
  v16 = sub_10008111C(a2, a4, a5, (double *)&v31, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 72), v33, v34, v32);
  if (v16)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = a3;
      if (*((char *)a3 + 23) < 0)
        v20 = (uint64_t *)*a3;
      v21 = *a4;
      v22 = *a5;
      *(_DWORD *)buf = 134350339;
      v48 = v19;
      v49 = 2080;
      v50 = v20;
      v51 = 2049;
      v52 = a6;
      v53 = 2049;
      v54 = a7;
      v55 = 2049;
      v56 = v21;
      v57 = 2049;
      v58 = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf, New Snap Coordinates,%s,inSnapLat,%{private}.8lf,inSnapLon,%{private}.8lf,outSnapLat,%{private}.8lf,outSnapLon,%{private}.8lf", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AE7C0);
      v23 = *(_QWORD *)(a1 + 8);
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t *)*a3;
      v24 = *a4;
      v25 = *a5;
      v35 = 134350339;
      v36 = v23;
      v37 = 2080;
      v38 = a3;
      v39 = 2049;
      v40 = a6;
      v41 = 2049;
      v42 = a7;
      v43 = 2049;
      v44 = v24;
      v45 = 2049;
      v46 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM, %{public}.1lf, New Snap Coordinates,%s,inSnapLat,%{private}.8lf,inSnapLon,%{private}.8lf,outSnapLat,%{private}.8lf,outSnapLon,%{private}.8lf", &v35, 62);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  return v16;
}

void sub_10130CA78(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10130CB1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E290);
  _Unwind_Resume(a1);
}

void sub_10130CB34(id a1)
{
  qword_10230E298 = -[CMPedometerTableStepCadenceToStrideLength initWithTestMode:]([CMPedometerTableStepCadenceToStrideLength alloc], "initWithTestMode:", 0);
}

void sub_10130CC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

id sub_10130CD38(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  CFAbsoluteTime Current;
  id result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint8_t *v26;
  uint8_t buf[4];
  id v28;
  CFAbsoluteTime v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021AE820);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3), "UTF8String");
    *(_DWORD *)buf = 136315138;
    v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021AE820);
    v23 = qword_10229FCD8;
    v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3), "UTF8String");
    LODWORD(v32) = 136315138;
    *(_QWORD *)((char *)&v32 + 4) = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "%s", (const char *)&v32);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "-[CMPedometerTableStepCadenceToStrideLength logBins]_block_invoke", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  Current = CFAbsoluteTimeGetCurrent();
  result = objc_msgSend(*(id *)(a1 + 40), "isBinaryLogging");
  if ((_DWORD)result)
  {
    *(_QWORD *)&v32 = off_102172110;
    v33 = a3;
    objc_msgSend(a2, "begin");
    v34 = v10;
    objc_msgSend(a2, "end");
    v35 = v11;
    v36 = objc_msgSend(a2, "state");
    objc_msgSend(a2, "valueOut");
    v37 = v12;
    *((CFAbsoluteTime *)&v32 + 1) = Current;
    v13 = sub_1011B78D4();
    sub_1011B8DB0(v13, (uint64_t)&v32);
    sub_1015EB864(buf);
    sub_101605794((uint64_t)buf);
    v31 |= 1u;
    v29 = Current;
    v14 = v30;
    *(_BYTE *)(v30 + 40) |= 8u;
    *(_DWORD *)(v14 + 32) = a3;
    v15 = v30;
    objc_msgSend(a2, "begin");
    *(_BYTE *)(v15 + 40) |= 1u;
    *(_QWORD *)(v15 + 8) = v16;
    v17 = v30;
    objc_msgSend(a2, "end");
    *(_BYTE *)(v17 + 40) |= 2u;
    *(_QWORD *)(v17 + 16) = v18;
    v19 = v30;
    v20 = objc_msgSend(a2, "state");
    *(_BYTE *)(v19 + 40) |= 0x10u;
    *(_DWORD *)(v19 + 36) = v20;
    v21 = v30;
    objc_msgSend(a2, "valueOut");
    *(_BYTE *)(v21 + 40) |= 4u;
    *(_QWORD *)(v21 + 24) = v22;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021AE840);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    return (id)sub_1015EE304((PB::Base *)buf);
  }
  return result;
}

void sub_10130D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10130D100(id a1, void *a2)
{
  (*(void (**)(void *))(*(_QWORD *)a2 + 216))(a2);
}

void sub_10130DC9C(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10130DCCC()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10230E258 = 0;
  qword_10230E260 = 0;
  qword_10230E268 = 0;
  v0 = operator new(0xA0uLL);
  qword_10230E268 = (uint64_t)(v0 + 10);
  v0[6] = xmmword_101C4A888;
  v0[7] = unk_101C4A898;
  v0[8] = xmmword_101C4A8A8;
  v0[9] = unk_101C4A8B8;
  v0[2] = xmmword_101C4A848;
  v0[3] = unk_101C4A858;
  v0[4] = xmmword_101C4A868;
  v0[5] = unk_101C4A878;
  *v0 = xmmword_101C4A828;
  v0[1] = unk_101C4A838;
  qword_10230E258 = (uint64_t)v0;
  qword_10230E260 = (uint64_t)(v0 + 10);
  __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230E258, (void *)&_mh_execute_header);
  qword_10230E278 = 0;
  qword_10230E280 = 0;
  qword_10230E270 = 0;
  v1 = operator new(0xC0uLL);
  qword_10230E280 = (uint64_t)(v1 + 12);
  v1[8] = xmmword_101C4A948;
  v1[9] = unk_101C4A958;
  v1[10] = xmmword_101C4A968;
  v1[11] = unk_101C4A978;
  v1[4] = xmmword_101C4A908;
  v1[5] = unk_101C4A918;
  v1[6] = xmmword_101C4A928;
  v1[7] = unk_101C4A938;
  *v1 = xmmword_101C4A8C8;
  v1[1] = unk_101C4A8D8;
  v1[2] = xmmword_101C4A8E8;
  v1[3] = unk_101C4A8F8;
  qword_10230E270 = (uint64_t)v1;
  qword_10230E278 = (uint64_t)(v1 + 12);
  return __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230E270, (void *)&_mh_execute_header);
}

uint64_t sub_10130DDC8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  sub_100033ACC(a1);
  sub_1002433B8(a1 + 96);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = *a3;
  if (*a2 != a2[1])
    *(_QWORD *)(a1 + 72) = *(_QWORD *)*a2;
  *(double *)(a1 + 160) = sub_100051AD0(a1, a2);
  sub_100092124(a1, a2);
  return a1;
}

void sub_10130DE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(char *)(v1 + 207) < 0)
    operator delete(*v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 144) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10130DE98(uint64_t a1, uint64_t a2)
{
  double v3;
  double v5;

  v3 = *(double *)(a2 + 36);
  if (v3 == *((double *)sub_1000521B8() + 6))
    return 0;
  v5 = *(double *)(a2 + 44);
  return v5 <= *((double *)sub_1000521B8() + 4);
}

CLWifiAssociatedApCentroidDO *sub_10130DEEC(uint64_t a1)
{
  CLWifiAssociatedApCentroidDO *v2;
  std::string *p_p;
  NSString *v4;
  _QWORD *v5;
  CLWifiAssociatedApCentroidDO *v6;
  std::string __p;

  v2 = [CLWifiAssociatedApCentroidDO alloc];
  sub_1000C2254((_QWORD *)(a1 + 72), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  v5 = (_QWORD *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    v5 = (_QWORD *)*v5;
  v6 = -[CLWifiAssociatedApCentroidDO initWithMac:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:reach:stationaryTimeInSeconds:loiType:lastUpdated:](v2, "initWithMac:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:reach:stationaryTimeInSeconds:loiType:lastUpdated:", v4, *(unsigned int *)(a1 + 52), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), *(double *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 160), CFAbsoluteTimeGetCurrent());
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_10130DFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_10130E014(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __n128 result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __n128 v58;
  __int128 v59;
  __n128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  result.n128_u64[0] = *(_QWORD *)((char *)a2 + 84);
  v4 = *(double *)((char *)a3 + 84);
  if (result.n128_f64[0] <= *(double *)((char *)a1 + 84))
  {
    if (v4 > result.n128_f64[0])
    {
      v83 = a2[8];
      v87 = a2[9];
      v91 = a2[10];
      v95 = a2[11];
      v67 = a2[4];
      v71 = a2[5];
      v75 = a2[6];
      v79 = a2[7];
      v51 = *a2;
      v55 = a2[1];
      v59 = a2[2];
      v63 = a2[3];
      v14 = *a3;
      v15 = a3[1];
      v16 = a3[3];
      a2[2] = a3[2];
      a2[3] = v16;
      *a2 = v14;
      a2[1] = v15;
      v17 = a3[4];
      v18 = a3[5];
      v19 = a3[7];
      a2[6] = a3[6];
      a2[7] = v19;
      a2[4] = v17;
      a2[5] = v18;
      v20 = a3[8];
      v21 = a3[9];
      v22 = a3[11];
      a2[10] = a3[10];
      a2[11] = v22;
      a2[8] = v20;
      a2[9] = v21;
      a3[8] = v83;
      a3[9] = v87;
      a3[10] = v91;
      a3[11] = v95;
      a3[4] = v67;
      a3[5] = v71;
      a3[6] = v75;
      a3[7] = v79;
      *a3 = v51;
      a3[1] = v55;
      result.n128_u64[1] = *((_QWORD *)&v59 + 1);
      a3[2] = v59;
      a3[3] = v63;
      result.n128_u64[0] = *(_QWORD *)((char *)a2 + 84);
      if (result.n128_f64[0] > *(double *)((char *)a1 + 84))
      {
        v84 = a1[8];
        v88 = a1[9];
        v92 = a1[10];
        v96 = a1[11];
        v68 = a1[4];
        v72 = a1[5];
        v76 = a1[6];
        v80 = a1[7];
        v52 = *a1;
        v56 = a1[1];
        v60 = (__n128)a1[2];
        v64 = a1[3];
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        a1[2] = a2[2];
        a1[3] = v25;
        *a1 = v23;
        a1[1] = v24;
        v26 = a2[4];
        v27 = a2[5];
        v28 = a2[7];
        a1[6] = a2[6];
        a1[7] = v28;
        a1[4] = v26;
        a1[5] = v27;
        v29 = a2[8];
        v30 = a2[9];
        v31 = a2[11];
        a1[10] = a2[10];
        a1[11] = v31;
        a1[8] = v29;
        a1[9] = v30;
        a2[8] = v84;
        a2[9] = v88;
        a2[10] = v92;
        a2[11] = v96;
        a2[4] = v68;
        a2[5] = v72;
        a2[6] = v76;
        a2[7] = v80;
        *a2 = v52;
        a2[1] = v56;
        result = v60;
        a2[2] = (__int128)v60;
        a2[3] = v64;
      }
    }
  }
  else
  {
    if (v4 <= result.n128_f64[0])
    {
      v85 = a1[8];
      v89 = a1[9];
      v93 = a1[10];
      v97 = a1[11];
      v69 = a1[4];
      v73 = a1[5];
      v77 = a1[6];
      v81 = a1[7];
      v53 = *a1;
      v57 = a1[1];
      v61 = a1[2];
      v65 = a1[3];
      v32 = *a2;
      v33 = a2[1];
      v34 = a2[3];
      a1[2] = a2[2];
      a1[3] = v34;
      *a1 = v32;
      a1[1] = v33;
      v35 = a2[4];
      v36 = a2[5];
      v37 = a2[7];
      a1[6] = a2[6];
      a1[7] = v37;
      a1[4] = v35;
      a1[5] = v36;
      v38 = a2[8];
      v39 = a2[9];
      v40 = a2[11];
      a1[10] = a2[10];
      a1[11] = v40;
      a1[8] = v38;
      a1[9] = v39;
      a2[8] = v85;
      a2[9] = v89;
      a2[10] = v93;
      a2[11] = v97;
      a2[4] = v69;
      a2[5] = v73;
      a2[6] = v77;
      a2[7] = v81;
      *a2 = v53;
      a2[1] = v57;
      result.n128_u64[1] = *((_QWORD *)&v61 + 1);
      a2[2] = v61;
      a2[3] = v65;
      result.n128_u64[0] = *(_QWORD *)((char *)a3 + 84);
      if (result.n128_f64[0] <= *(double *)((char *)a2 + 84))
        return result;
      v82 = a2[8];
      v86 = a2[9];
      v90 = a2[10];
      v94 = a2[11];
      v66 = a2[4];
      v70 = a2[5];
      v74 = a2[6];
      v78 = a2[7];
      v50 = *a2;
      v54 = a2[1];
      v58 = (__n128)a2[2];
      v62 = a2[3];
      v41 = *a3;
      v42 = a3[1];
      v43 = a3[3];
      a2[2] = a3[2];
      a2[3] = v43;
      *a2 = v41;
      a2[1] = v42;
      v44 = a3[4];
      v45 = a3[5];
      v46 = a3[7];
      a2[6] = a3[6];
      a2[7] = v46;
      a2[4] = v44;
      a2[5] = v45;
      v47 = a3[8];
      v48 = a3[9];
      v49 = a3[11];
      a2[10] = a3[10];
      a2[11] = v49;
      a2[8] = v47;
      a2[9] = v48;
    }
    else
    {
      v82 = a1[8];
      v86 = a1[9];
      v90 = a1[10];
      v94 = a1[11];
      v66 = a1[4];
      v70 = a1[5];
      v74 = a1[6];
      v78 = a1[7];
      v50 = *a1;
      v54 = a1[1];
      v58 = (__n128)a1[2];
      v62 = a1[3];
      v5 = *a3;
      v6 = a3[1];
      v7 = a3[3];
      a1[2] = a3[2];
      a1[3] = v7;
      *a1 = v5;
      a1[1] = v6;
      v8 = a3[4];
      v9 = a3[5];
      v10 = a3[7];
      a1[6] = a3[6];
      a1[7] = v10;
      a1[4] = v8;
      a1[5] = v9;
      v11 = a3[8];
      v12 = a3[9];
      v13 = a3[11];
      a1[10] = a3[10];
      a1[11] = v13;
      a1[8] = v11;
      a1[9] = v12;
    }
    a3[8] = v82;
    a3[9] = v86;
    a3[10] = v90;
    a3[11] = v94;
    a3[4] = v66;
    a3[5] = v70;
    a3[6] = v74;
    a3[7] = v78;
    *a3 = v50;
    a3[1] = v54;
    result = v58;
    a3[2] = (__int128)v58;
    a3[3] = v62;
  }
  return result;
}

BOOL sub_10130E30C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  BOOL v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 6);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 108) > *(double *)(a1 + 84))
      {
        v114 = *(_OWORD *)(a1 + 128);
        v119 = *(_OWORD *)(a1 + 144);
        v124 = *(_OWORD *)(a1 + 160);
        v129 = *(_OWORD *)(a1 + 176);
        v91 = *(_OWORD *)(a1 + 64);
        v97 = *(_OWORD *)(a1 + 80);
        v103 = *(_OWORD *)(a1 + 96);
        v109 = *(_OWORD *)(a1 + 112);
        v67 = *(_OWORD *)a1;
        v73 = *(_OWORD *)(a1 + 16);
        v79 = *(_OWORD *)(a1 + 32);
        v85 = *(_OWORD *)(a1 + 48);
        v6 = *(_OWORD *)(a2 - 192);
        v7 = *(_OWORD *)(a2 - 176);
        v8 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)a1 = v6;
        *(_OWORD *)(a1 + 16) = v7;
        v9 = *(_OWORD *)(a2 - 128);
        v10 = *(_OWORD *)(a2 - 112);
        v11 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 64) = v9;
        *(_OWORD *)(a1 + 80) = v10;
        v12 = *(_OWORD *)(a2 - 64);
        v13 = *(_OWORD *)(a2 - 48);
        v14 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 128) = v12;
        *(_OWORD *)(a1 + 144) = v13;
        *(_OWORD *)(a2 - 64) = v114;
        *(_OWORD *)(a2 - 48) = v119;
        *(_OWORD *)(a2 - 32) = v124;
        *(_OWORD *)(a2 - 16) = v129;
        *(_OWORD *)(a2 - 128) = v91;
        *(_OWORD *)(a2 - 112) = v97;
        *(_OWORD *)(a2 - 96) = v103;
        *(_OWORD *)(a2 - 80) = v109;
        *(_OWORD *)(a2 - 192) = v67;
        *(_OWORD *)(a2 - 176) = v73;
        *(_OWORD *)(a2 - 160) = v79;
        *(_OWORD *)(a2 - 144) = v85;
      }
      return result;
    case 3uLL:
      sub_10130E014((__int128 *)a1, (__int128 *)(a1 + 192), (__int128 *)(a2 - 192));
      return 1;
    case 4uLL:
      sub_10130E8A0(a1, a1 + 192, a1 + 384, (__int128 *)(a2 - 192));
      return 1;
    case 5uLL:
      v29 = (double *)(a1 + 276);
      v30 = (__int128 *)(a1 + 192);
      v31 = (__int128 *)(a1 + 384);
      v32 = (__int128 *)(a1 + 576);
      sub_10130E8A0(a1, a1 + 192, a1 + 384, (__int128 *)(a1 + 576));
      if (*(double *)(a2 - 108) <= *(double *)(a1 + 660))
        return 1;
      v115 = *(_OWORD *)(a1 + 704);
      v120 = *(_OWORD *)(a1 + 720);
      v125 = *(_OWORD *)(a1 + 736);
      v130 = *(_OWORD *)(a1 + 752);
      v93 = *(_OWORD *)(a1 + 640);
      v99 = *(_OWORD *)(a1 + 656);
      v105 = *(_OWORD *)(a1 + 672);
      v110 = *(_OWORD *)(a1 + 688);
      v69 = *v32;
      v75 = *(_OWORD *)(a1 + 592);
      v81 = *(_OWORD *)(a1 + 608);
      v87 = *(_OWORD *)(a1 + 624);
      v33 = *(_OWORD *)(a2 - 192);
      v34 = *(_OWORD *)(a2 - 176);
      v35 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 624) = v35;
      *v32 = v33;
      *(_OWORD *)(a1 + 592) = v34;
      v36 = *(_OWORD *)(a2 - 128);
      v37 = *(_OWORD *)(a2 - 112);
      v38 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 688) = v38;
      *(_OWORD *)(a1 + 640) = v36;
      *(_OWORD *)(a1 + 656) = v37;
      v39 = *(_OWORD *)(a2 - 64);
      v40 = *(_OWORD *)(a2 - 48);
      v41 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 752) = v41;
      *(_OWORD *)(a1 + 704) = v39;
      *(_OWORD *)(a1 + 720) = v40;
      *(_OWORD *)(a2 - 64) = v115;
      *(_OWORD *)(a2 - 48) = v120;
      *(_OWORD *)(a2 - 32) = v125;
      *(_OWORD *)(a2 - 16) = v130;
      *(_OWORD *)(a2 - 128) = v93;
      *(_OWORD *)(a2 - 112) = v99;
      *(_OWORD *)(a2 - 96) = v105;
      *(_OWORD *)(a2 - 80) = v110;
      *(_OWORD *)(a2 - 192) = v69;
      *(_OWORD *)(a2 - 176) = v75;
      *(_OWORD *)(a2 - 160) = v81;
      *(_OWORD *)(a2 - 144) = v87;
      if (*(double *)(a1 + 660) <= *(double *)(a1 + 468))
        return 1;
      v116 = *(_OWORD *)(a1 + 512);
      v121 = *(_OWORD *)(a1 + 528);
      v126 = *(_OWORD *)(a1 + 544);
      v131 = *(_OWORD *)(a1 + 560);
      v94 = *(_OWORD *)(a1 + 448);
      v100 = *(_OWORD *)(a1 + 464);
      v106 = *(_OWORD *)(a1 + 480);
      v111 = *(_OWORD *)(a1 + 496);
      v70 = *v31;
      v76 = *(_OWORD *)(a1 + 400);
      v82 = *(_OWORD *)(a1 + 416);
      v88 = *(_OWORD *)(a1 + 432);
      v42 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 528) = v42;
      v43 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 560) = v43;
      v44 = *(_OWORD *)(a1 + 656);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 464) = v44;
      v45 = *(_OWORD *)(a1 + 688);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 672);
      *(_OWORD *)(a1 + 496) = v45;
      v46 = *(_OWORD *)(a1 + 592);
      *v31 = *v32;
      *(_OWORD *)(a1 + 400) = v46;
      v47 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 432) = v47;
      *(_OWORD *)(a1 + 704) = v116;
      *(_OWORD *)(a1 + 720) = v121;
      *(_OWORD *)(a1 + 736) = v126;
      *(_OWORD *)(a1 + 752) = v131;
      *(_OWORD *)(a1 + 640) = v94;
      *(_OWORD *)(a1 + 656) = v100;
      *(_OWORD *)(a1 + 672) = v106;
      *(_OWORD *)(a1 + 688) = v111;
      *v32 = v70;
      *(_OWORD *)(a1 + 592) = v76;
      v48 = *(double *)(a1 + 468) <= *v29;
      *(_OWORD *)(a1 + 608) = v82;
      *(_OWORD *)(a1 + 624) = v88;
      if (v48)
        return 1;
      v117 = *(_OWORD *)(a1 + 320);
      v122 = *(_OWORD *)(a1 + 336);
      v127 = *(_OWORD *)(a1 + 352);
      v132 = *(_OWORD *)(a1 + 368);
      v95 = *(_OWORD *)(a1 + 256);
      v101 = *(_OWORD *)(a1 + 272);
      v107 = *(_OWORD *)(a1 + 288);
      v112 = *(_OWORD *)(a1 + 304);
      v71 = *v30;
      v77 = *(_OWORD *)(a1 + 208);
      v83 = *(_OWORD *)(a1 + 224);
      v89 = *(_OWORD *)(a1 + 240);
      v49 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 336) = v49;
      v50 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 368) = v50;
      v51 = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 448);
      *(_OWORD *)(a1 + 272) = v51;
      v52 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 304) = v52;
      v53 = *(_OWORD *)(a1 + 400);
      *v30 = *v31;
      *(_OWORD *)(a1 + 208) = v53;
      v54 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 240) = v54;
      *(_OWORD *)(a1 + 512) = v117;
      *(_OWORD *)(a1 + 528) = v122;
      *(_OWORD *)(a1 + 544) = v127;
      *(_OWORD *)(a1 + 560) = v132;
      *(_OWORD *)(a1 + 448) = v95;
      *(_OWORD *)(a1 + 464) = v101;
      *(_OWORD *)(a1 + 480) = v107;
      *(_OWORD *)(a1 + 496) = v112;
      *v31 = v71;
      *(_OWORD *)(a1 + 400) = v77;
      v48 = *v29 <= *(double *)(a1 + 84);
      *(_OWORD *)(a1 + 416) = v83;
      *(_OWORD *)(a1 + 432) = v89;
      if (v48)
        return 1;
      v118 = *(_OWORD *)(a1 + 128);
      v123 = *(_OWORD *)(a1 + 144);
      v128 = *(_OWORD *)(a1 + 160);
      v133 = *(_OWORD *)(a1 + 176);
      v96 = *(_OWORD *)(a1 + 64);
      v102 = *(_OWORD *)(a1 + 80);
      v108 = *(_OWORD *)(a1 + 96);
      v113 = *(_OWORD *)(a1 + 112);
      v72 = *(_OWORD *)a1;
      v78 = *(_OWORD *)(a1 + 16);
      v84 = *(_OWORD *)(a1 + 32);
      v90 = *(_OWORD *)(a1 + 48);
      v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 144) = v55;
      v56 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 176) = v56;
      v57 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 80) = v57;
      v58 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 112) = v58;
      v59 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)a1 = *v30;
      *(_OWORD *)(a1 + 16) = v59;
      v60 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 48) = v60;
      *(_OWORD *)(a1 + 320) = v118;
      *(_OWORD *)(a1 + 336) = v123;
      *(_OWORD *)(a1 + 352) = v128;
      *(_OWORD *)(a1 + 368) = v133;
      *(_OWORD *)(a1 + 256) = v96;
      *(_OWORD *)(a1 + 272) = v102;
      *(_OWORD *)(a1 + 288) = v108;
      *(_OWORD *)(a1 + 304) = v113;
      *v30 = v72;
      *(_OWORD *)(a1 + 208) = v78;
      result = 1;
      *(_OWORD *)(a1 + 224) = v84;
      *(_OWORD *)(a1 + 240) = v90;
      return result;
    default:
      v15 = a1 + 384;
      sub_10130E014((__int128 *)a1, (__int128 *)(a1 + 192), (__int128 *)(a1 + 384));
      v16 = a1 + 576;
      if (a1 + 576 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *(double *)(v16 + 84);
    if (v19 > *(double *)(v15 + 84))
    {
      v63 = *(_OWORD *)(v16 + 32);
      v64 = *(_OWORD *)(v16 + 48);
      v65 = *(_OWORD *)(v16 + 64);
      v66 = *(_DWORD *)(v16 + 80);
      v61 = *(_OWORD *)v16;
      v62 = *(_OWORD *)(v16 + 16);
      v92 = *(_OWORD *)(v16 + 156);
      v98 = *(_OWORD *)(v16 + 172);
      v104 = *(_DWORD *)(v16 + 188);
      v68 = *(_OWORD *)(v16 + 92);
      v74 = *(_OWORD *)(v16 + 108);
      v20 = v17;
      v80 = *(_OWORD *)(v16 + 124);
      v86 = *(_OWORD *)(v16 + 140);
      while (1)
      {
        v21 = a1 + v20;
        v22 = *(_OWORD *)(a1 + v20 + 528);
        *(_OWORD *)(v21 + 704) = *(_OWORD *)(a1 + v20 + 512);
        *(_OWORD *)(v21 + 720) = v22;
        v23 = *(_OWORD *)(a1 + v20 + 560);
        *(_OWORD *)(v21 + 736) = *(_OWORD *)(a1 + v20 + 544);
        *(_OWORD *)(v21 + 752) = v23;
        v24 = *(_OWORD *)(a1 + v20 + 464);
        *(_OWORD *)(v21 + 640) = *(_OWORD *)(a1 + v20 + 448);
        *(_OWORD *)(v21 + 656) = v24;
        v25 = *(_OWORD *)(a1 + v20 + 496);
        *(_OWORD *)(v21 + 672) = *(_OWORD *)(a1 + v20 + 480);
        *(_OWORD *)(v21 + 688) = v25;
        v26 = *(_OWORD *)(a1 + v20 + 400);
        *(_OWORD *)(v21 + 576) = *(_OWORD *)(a1 + v20 + 384);
        *(_OWORD *)(v21 + 592) = v26;
        v27 = *(_OWORD *)(a1 + v20 + 432);
        *(_OWORD *)(v21 + 608) = *(_OWORD *)(a1 + v20 + 416);
        *(_OWORD *)(v21 + 624) = v27;
        if (v20 == -384)
          break;
        v20 -= 192;
        if (v19 <= *(double *)(v21 + 276))
        {
          v28 = a1 + v20 + 576;
          goto LABEL_12;
        }
      }
      v28 = a1;
LABEL_12:
      *(_OWORD *)(v28 + 32) = v63;
      *(_OWORD *)(v28 + 48) = v64;
      *(_OWORD *)(v28 + 64) = v65;
      *(_DWORD *)(v28 + 80) = v66;
      *(_OWORD *)v28 = v61;
      *(_OWORD *)(v28 + 16) = v62;
      *(double *)(v28 + 84) = v19;
      *(_OWORD *)(v28 + 92) = v68;
      *(_OWORD *)(v28 + 108) = v74;
      *(_OWORD *)(v28 + 124) = v80;
      *(_DWORD *)(v28 + 188) = v104;
      *(_OWORD *)(v28 + 172) = v98;
      *(_OWORD *)(v28 + 156) = v92;
      ++v18;
      *(_OWORD *)(v28 + 140) = v86;
      if (v18 == 8)
        return v16 + 192 == a2;
    }
    v15 = v16;
    v17 += 192;
    v16 += 192;
    if (v16 == a2)
      return 1;
  }
}

__n128 sub_10130E8A0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  sub_10130E014((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u64[0] = *(_QWORD *)((char *)a4 + 84);
  if (result.n128_f64[0] > *(double *)(a3 + 84))
  {
    v60 = *(_OWORD *)(a3 + 128);
    v63 = *(_OWORD *)(a3 + 144);
    v66 = *(_OWORD *)(a3 + 160);
    v69 = *(_OWORD *)(a3 + 176);
    v48 = *(_OWORD *)(a3 + 64);
    v51 = *(_OWORD *)(a3 + 80);
    v54 = *(_OWORD *)(a3 + 96);
    v57 = *(_OWORD *)(a3 + 112);
    v36 = *(_OWORD *)a3;
    v39 = *(_OWORD *)(a3 + 16);
    v42 = *(_OWORD *)(a3 + 32);
    v45 = *(_OWORD *)(a3 + 48);
    v9 = *a4;
    v10 = a4[1];
    v11 = a4[3];
    *(_OWORD *)(a3 + 32) = a4[2];
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v10;
    v12 = a4[4];
    v13 = a4[5];
    v14 = a4[7];
    *(_OWORD *)(a3 + 96) = a4[6];
    *(_OWORD *)(a3 + 112) = v14;
    *(_OWORD *)(a3 + 64) = v12;
    *(_OWORD *)(a3 + 80) = v13;
    v15 = a4[8];
    v16 = a4[9];
    v17 = a4[11];
    *(_OWORD *)(a3 + 160) = a4[10];
    *(_OWORD *)(a3 + 176) = v17;
    *(_OWORD *)(a3 + 128) = v15;
    *(_OWORD *)(a3 + 144) = v16;
    a4[8] = v60;
    a4[9] = v63;
    a4[10] = v66;
    a4[11] = v69;
    a4[4] = v48;
    a4[5] = v51;
    a4[6] = v54;
    a4[7] = v57;
    *a4 = v36;
    a4[1] = v39;
    result.n128_u64[1] = *((_QWORD *)&v42 + 1);
    a4[2] = v42;
    a4[3] = v45;
    result.n128_u64[0] = *(_QWORD *)(a3 + 84);
    if (result.n128_f64[0] > *(double *)(a2 + 84))
    {
      v61 = *(_OWORD *)(a2 + 128);
      v64 = *(_OWORD *)(a2 + 144);
      v67 = *(_OWORD *)(a2 + 160);
      v70 = *(_OWORD *)(a2 + 176);
      v49 = *(_OWORD *)(a2 + 64);
      v52 = *(_OWORD *)(a2 + 80);
      v55 = *(_OWORD *)(a2 + 96);
      v58 = *(_OWORD *)(a2 + 112);
      v37 = *(_OWORD *)a2;
      v40 = *(_OWORD *)(a2 + 16);
      v43 = *(_OWORD *)(a2 + 32);
      v46 = *(_OWORD *)(a2 + 48);
      v18 = *(_OWORD *)a3;
      v19 = *(_OWORD *)(a3 + 16);
      v20 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
      v21 = *(_OWORD *)(a3 + 64);
      v22 = *(_OWORD *)(a3 + 80);
      v23 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = v23;
      *(_OWORD *)(a2 + 64) = v21;
      *(_OWORD *)(a2 + 80) = v22;
      v24 = *(_OWORD *)(a3 + 128);
      v25 = *(_OWORD *)(a3 + 144);
      v26 = *(_OWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
      *(_OWORD *)(a2 + 176) = v26;
      *(_OWORD *)(a2 + 128) = v24;
      *(_OWORD *)(a2 + 144) = v25;
      *(_OWORD *)(a3 + 128) = v61;
      *(_OWORD *)(a3 + 144) = v64;
      *(_OWORD *)(a3 + 160) = v67;
      *(_OWORD *)(a3 + 176) = v70;
      *(_OWORD *)(a3 + 64) = v49;
      *(_OWORD *)(a3 + 80) = v52;
      *(_OWORD *)(a3 + 96) = v55;
      *(_OWORD *)(a3 + 112) = v58;
      *(_OWORD *)a3 = v37;
      *(_OWORD *)(a3 + 16) = v40;
      result.n128_u64[1] = *((_QWORD *)&v43 + 1);
      *(_OWORD *)(a3 + 32) = v43;
      *(_OWORD *)(a3 + 48) = v46;
      result.n128_u64[0] = *(_QWORD *)(a2 + 84);
      if (result.n128_f64[0] > *(double *)(a1 + 84))
      {
        v62 = *(_OWORD *)(a1 + 128);
        v65 = *(_OWORD *)(a1 + 144);
        v68 = *(_OWORD *)(a1 + 160);
        v71 = *(_OWORD *)(a1 + 176);
        v50 = *(_OWORD *)(a1 + 64);
        v53 = *(_OWORD *)(a1 + 80);
        v56 = *(_OWORD *)(a1 + 96);
        v59 = *(_OWORD *)(a1 + 112);
        v38 = *(_OWORD *)a1;
        v41 = *(_OWORD *)(a1 + 16);
        v44 = *(__n128 *)(a1 + 32);
        v47 = *(_OWORD *)(a1 + 48);
        v27 = *(_OWORD *)a2;
        v28 = *(_OWORD *)(a2 + 16);
        v29 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v29;
        *(_OWORD *)a1 = v27;
        *(_OWORD *)(a1 + 16) = v28;
        v30 = *(_OWORD *)(a2 + 64);
        v31 = *(_OWORD *)(a2 + 80);
        v32 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v32;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 80) = v31;
        v33 = *(_OWORD *)(a2 + 128);
        v34 = *(_OWORD *)(a2 + 144);
        v35 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v35;
        *(_OWORD *)(a1 + 128) = v33;
        *(_OWORD *)(a1 + 144) = v34;
        *(_OWORD *)(a2 + 128) = v62;
        *(_OWORD *)(a2 + 144) = v65;
        *(_OWORD *)(a2 + 160) = v68;
        *(_OWORD *)(a2 + 176) = v71;
        *(_OWORD *)(a2 + 64) = v50;
        *(_OWORD *)(a2 + 80) = v53;
        *(_OWORD *)(a2 + 96) = v56;
        *(_OWORD *)(a2 + 112) = v59;
        *(_OWORD *)a2 = v38;
        *(_OWORD *)(a2 + 16) = v41;
        result = v44;
        *(__n128 *)(a2 + 32) = v44;
        *(_OWORD *)(a2 + 48) = v47;
      }
    }
  }
  return result;
}

void sub_10130EABC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10130EAE8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10130EB84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10130EB9C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10130EC28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10130ED5C(id a1)
{
  qword_10230E2A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTransitMacMonitorSilo"));
}

void sub_10130F0C4(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6;
  __int16 v7;
  _BYTE v8[8];
  void *__p;
  char v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  void **v14;

  v6 = *a2;
  v7 = *a3;
  sub_10031F08C(v8, (uint64_t)(a3 + 4));
  v12 = *((_QWORD *)a3 + 13);
  memset(v13, 0, 24);
  sub_10055A7B8(v13, *((_QWORD *)a3 + 14), *((_QWORD *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3));
  v13[3] = *((_QWORD *)a3 + 17);
  objc_msgSend(a4, "onWifiServiceNotification:data:", v6, &v7);
  v14 = (void **)v13;
  sub_100279AA4(&v14);
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_10130F188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_1005B5FEC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL sub_101310240(uint64_t a1, void *a2)
{
  double v3;

  objc_msgSend(a2, "timestamp");
  return v3 >= *(double *)(a1 + 32) + -600.0;
}

void sub_101310A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28)
{
  a27 = &a22;
  sub_100279AA4((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_101310ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (a3)
  {
    if (qword_1022A0120 != -1)
      dispatch_once(&qword_1022A0120, &stru_1021AE8F8);
    v4 = qword_1022A0128;
    if (os_log_type_enabled((os_log_t)qword_1022A0128, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#TransitMacMonitor: error fetching from CLTransitMacTileDataProvider, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0120 != -1)
        dispatch_once(&qword_1022A0120, &stru_1021AE8F8);
      v7 = 138412290;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0128, 1, "#TransitMacMonitor: error fetching from CLTransitMacTileDataProvider, %@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLTransitMacMonitor onWifiServiceNotification:data:]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    _objc_msgSend(*(id *)(a1 + 32), "processNewAccessPoints:transitTileResults:", a1 + 40, a2);
  }
}

_QWORD *sub_101310CB8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_10055A7B8(v2, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
}

void sub_101310CE8(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_100279AA4(&v1);
}

void sub_101311010(id a1)
{
  qword_1022A0128 = (uint64_t)os_log_create("com.apple.locationd.Position", "Transit");
}

void sub_10131103C(id a1)
{
  qword_1022A01F8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

double sub_101311068(double a1, double a2)
{
  return (a1 / a2 * 10.8 + 7.0) / 3.5;
}

double sub_101311088(double a1, double a2)
{
  return fmax((a1 * 3.5 + -7.0) / 10.8 * a2, 0.0);
}

float sub_1013110B0(uint64_t a1, double a2)
{
  double v2;
  float v3;
  float v4;
  float result;

  v2 = *(double *)(a1 + 40);
  if (v2 == -1.0)
    return -1.0;
  v3 = v2;
  v4 = a2;
  sub_100FC55D0(v3, *(float *)(a1 + 24), v4);
  return result;
}

float sub_1013110DC(uint64_t a1, double a2)
{
  float result;
  double v4;
  double v5;

  result = -1.0;
  if (*(double *)(a1 + 40) != -1.0)
  {
    v4 = *(float *)(a1 + 24);
    if (v4 >= -0.277 && v4 <= 0.523)
    {
      v5 = *(double *)(a1 + 56);
      if (v5 != -1.0)
        return fmax((v5 * 3.5 + -7.0) / 10.8 * a2, 0.0);
    }
  }
  return result;
}

BOOL sub_101311158(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL sub_101311168(uint64_t a1, uint64_t a2)
{
  return fmax(((float)(*(float *)(a2 + 16) * 0.5) * 3.5 + -7.0) / 10.8 * *(float *)(a2 + 12), 0.0) <= *(float *)(a1 + 32);
}

void sub_101311550(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_101311580(double *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  double v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  int v25;

  sub_1013118D0((uint64_t)a1, a3);
  v6 = *(double *)(a3 + 104);
  *(_QWORD *)(a3 + 112) = 0x3FD0000000000000;
  if (v6 >= 0.0 && v6 < 8.0 && (a2 & 1) == 0)
  {
    v7 = a1[5];
    v8 = 0.2905;
LABEL_16:
    v14 = v7 * v8 * a1[8];
LABEL_17:
    *(double *)a3 = v14;
    goto LABEL_18;
  }
  if (v6 >= 8.0 && v6 < 10.0 || (v6 >= -4.0 ? (v9 = v6 < 0.0) : (v9 = 0), v9 || a2))
  {
    v7 = a1[4] * 0.2905;
    v8 = a1[6];
    goto LABEL_16;
  }
  if (v6 >= 10.0)
  {
    v13 = (a1[4] + a1[3] * 10.5) * 0.2905;
    goto LABEL_20;
  }
  if (v6 < -4.0)
  {
    v10 = v6 / 100.0 / sqrt(v6 / 100.0 * (v6 / 100.0) + 1.0);
    v11 = exp(v10 * -18.6);
    v12 = fabs((v6 + 4.0 + v6 + 4.0) / (v6 + -4.0)) * 0.15;
    v13 = a1[4] * 0.2905 * fmin((1.0 - v12) * a1[6] + v12 * (v11 * 0.19976 + 0.80024 + v10 * 0.98795), 1.0);
LABEL_20:
    v14 = a1[8] * v13;
    goto LABEL_17;
  }
  if (qword_10229FED0 != -1)
    dispatch_once(&qword_10229FED0, &stru_1021AE968);
  v15 = qword_10229FED8;
  if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349312;
    v23 = v6;
    v24 = 1026;
    v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unexpected grade range grade=%{public}.2f, isGradeOnset=%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FED0 != -1)
      dispatch_once(&qword_10229FED0, &stru_1021AE968);
    v18 = 134349312;
    v19 = v6;
    v20 = 1026;
    v21 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, 16, "Unexpected grade range grade=%{public}.2f, isGradeOnset=%{public}d", &v18, 18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "static CLPower::ModelOutput CLPowerOutdoorRunModel::computePowerFixedEta(const CLPower::ModelInput &, BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
LABEL_18:
  *(double *)a3 = round(*(double *)a3);
}

void sub_1013118D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;

  v4 = *(double *)(a1 + 16);
  v5 = *(double *)(a1 + 24);
  v6 = sub_100D7B970(v4, v5);
  *(_DWORD *)(a2 + 124) = 0;
  *(_WORD *)(a2 + 128) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 132) = 1000;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)a1;
  *(double *)(a2 + 88) = v4;
  *(double *)(a2 + 96) = v5;
  *(double *)(a2 + 104) = v6;
}

void sub_10131195C(id a1)
{
  qword_10229FED8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Power");
}

void sub_101311988(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 256) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 232);
      v2 = (void **)(*(_QWORD *)(a1 + 224) + 8);
      *(_QWORD *)(a1 + 224) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 13;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 26;
  }
  *(_QWORD *)(a1 + 248) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 160) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 136);
      v7 = (void **)(*(_QWORD *)(a1 + 128) + 8);
      *(_QWORD *)(a1 + 128) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 13;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 26;
  }
  *(_QWORD *)(a1 + 152) = v11;
LABEL_15:
  v12 = *(void ***)(a1 + 176);
  v13 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 208) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 184);
      v12 = (void **)(*(_QWORD *)(a1 + 176) + 8);
      *(_QWORD *)(a1 + 176) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 13;
    goto LABEL_21;
  }
  if (v14 >> 3 == 2)
  {
    v16 = 26;
LABEL_21:
    *(_QWORD *)(a1 + 200) = v16;
  }
  *(_WORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 266) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 311) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
}

uint64_t sub_101311AD0(uint64_t a1)
{
  uint64_t v2;

  sub_1002433B8(a1);
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_DWORD *)(v2 + 287) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 311) = 0;
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 328) = 0;
  *(_DWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_DWORD *)(v2 + 263) = 0;
  *(_QWORD *)(v2 + 344) = 850045863;
  *(_QWORD *)(v2 + 400) = 0;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  sub_101311988(v2);
  return a1;
}

uint64_t sub_101311B70(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 344));
  sub_10047F6F4((_QWORD *)(a1 + 216));
  sub_10047F6F4((_QWORD *)(a1 + 168));
  sub_10047F6F4((_QWORD *)(a1 + 120));
  sub_1004A4854((_QWORD *)(a1 + 72));
  return a1;
}

void sub_101311BBC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  sub_101311988(a1);
  std::mutex::unlock(v2);
}

void sub_101311C14(uint64_t a1, _QWORD *a2, _DWORD *a3, int *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  sub_101311C84(a1, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_101311C70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_101311C84(uint64_t a1, _QWORD *a2, _DWORD *a3, int *a4)
{
  int v4;
  int v6;

  *(_QWORD *)(a1 + 40) = *a2;
  v4 = *a4;
  *(_DWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 52) = v4;
  if (*a3 > 0xBu || ((1 << *a3) & 0xC06) == 0)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 40);
  }
  else if (*(_DWORD *)(a1 + 64) != 2)
  {
    *(_QWORD *)(a1 + 56) = *a2;
    v6 = *a4;
    *(_DWORD *)(a1 + 64) = 2;
    *(_DWORD *)(a1 + 68) = v6;
  }
  sub_101311CEC(a1);
}

void sub_101311CEC(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = (_QWORD *)(a1 + 72);
  sub_101311D40(a1 + 72, (_OWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >= 0x12C)
  {
    *(_QWORD *)(a1 + 112) = v3 - 1;
    sub_1004A5844(v2, 1);
  }
}

int64x2_t sub_101311D40(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_1013121E4((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 8));
  v7 = *v6 + 16 * v4;
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_OWORD *)(v7 - 16) = *a2;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

double sub_101311DBC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  double v5;

  v4 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v5 = sub_101311E28((double *)a1, a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_101311E14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_101311E28(double *a1, uint64_t a2)
{
  double result;

  if (!sub_10018D2C0(a1))
    return NAN;
  sub_10011E258(a1, *(_QWORD *)(*((_QWORD *)a1 + 28) + 8 * (*((_QWORD *)a1 + 31) / 0x1AuLL)) + 156 * (*((_QWORD *)a1 + 31) % 0x1AuLL), a2);
  return result;
}

void sub_101311EA0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101311ECC(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 26 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x1A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFD8uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 13;
      else
        v40 = (uint64_t)a1[4] + 26;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFD8uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFD8uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 13;
      else
        v35 = (uint64_t)a1[4] + 26;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 26;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_101312198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1013121E4(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x100)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 128;
      else
        v40 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 128;
      else
        v35 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_1013124A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_1013124F4(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 24) = *(_OWORD *)algn_101C4AA3C;
  *(_OWORD *)(a1 + 40) = xmmword_101C4AA4C;
  *(_OWORD *)(a1 + 56) = unk_101C4AA5C;
  *(_QWORD *)&result = 1084800281;
  *(_OWORD *)(a1 + 72) = xmmword_101C4AA6C;
  *(_QWORD *)a1 = off_1021AE9B8;
  *(_OWORD *)(a1 + 8) = xmmword_101C4AA2C;
  return result;
}

uint64_t sub_10131252C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  float v4;
  float v5;
  uint64_t v6;
  int v7;
  float v8[6];

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  sub_1000F08C0((uint64_t)&v6, v8, (int *)(a1 + 8), 6, 3);
  v2 = 0;
  LODWORD(result) = 0;
  v4 = 0.0;
  do
  {
    v5 = v8[v2];
    if (v5 <= v4)
      result = result;
    else
      result = v2;
    if (v5 > v4)
      v4 = v8[v2];
    ++v2;
  }
  while (v2 != 6);
  return result;
}

double sub_1013125CC(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = off_10214EBA0;
  *(_DWORD *)(a1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = off_10214EBA0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = off_10214EBA0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = off_1021693F8;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = off_1021693F8;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = off_1021693F8;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  return result;
}

void sub_10131267C(uint64_t a1, int a2)
{
  double v3;
  unsigned int v4;

  v3 = (double)a2 * 0.3;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = (int)v3;
  *(_DWORD *)(a1 + 12) = 0;
  v4 = vcvtd_n_s64_f64((double)a2, 2uLL);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 112) = v4;
  *(_DWORD *)(a1 + 200) = v4;
  *(_QWORD *)(a1 + 288) = (int)v3;
  sub_10023235C((_QWORD *)(a1 + 280));
  *(_QWORD *)(a1 + 368) = (int)((double)*(int *)(a1 + 4) * 0.3);
  sub_10023235C((_QWORD *)(a1 + 360));
  *(_QWORD *)(a1 + 448) = (int)((double)*(int *)(a1 + 4) * 0.3);
  sub_10023235C((_QWORD *)(a1 + 440));
}

void sub_10131271C(uint64_t a1, double a2, float a3, float a4, float a5)
{
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  float v10;
  float v11;
  double v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;

  if ((*(_DWORD *)(a1 + 4) & 0x80000000) == 0)
  {
    ++*(_DWORD *)(a1 + 12);
    *(float *)&v6 = (float)(*(float *)&dword_10230E2B8 * 0.7) + a3 * 0.300000012;
    *(float *)&v7 = (float)(*(float *)&dword_10230E2BC * 0.7) + a4 * 0.300000012;
    v16 = *(float *)&v7;
    v17 = *(float *)&v6;
    *(float *)&v8 = (float)(*(float *)&dword_10230E2C0 * 0.7) + a5 * 0.300000012;
    v15 = *(float *)&v8;
    dword_10230E2B8 = v6;
    dword_10230E2BC = v7;
    dword_10230E2C0 = v8;
    v9 = (_QWORD *)(a1 + 16);
    sub_1006D82B8(a1 + 16, &v17);
    sub_1006D82B8(a1 + 104, &v16);
    sub_1006D82B8(a1 + 192, &v15);
    v14 = 0.0;
    v13 = 0;
    sub_100A4533C(v9, 2, &v14);
    sub_100A4533C((_QWORD *)(a1 + 104), 2, (_DWORD *)&v13 + 1);
    sub_100A4533C((_QWORD *)(a1 + 192), 2, &v13);
    v10 = (float)(v16 - *((float *)&v13 + 1)) * (float)(v16 - *((float *)&v13 + 1));
    v11 = (float)(v15 - *(float *)&v13) * (float)(v15 - *(float *)&v13);
    v12 = (float)((float)(v17 - v14) * (float)(v17 - v14));
    sub_100ADB200(a1 + 280, &v12);
    v12 = v10;
    sub_100ADB200(a1 + 360, &v12);
    v12 = v11;
    sub_100ADB200(a1 + 440, &v12);
    if (!(*(_DWORD *)(a1 + 12) % *(_DWORD *)(a1 + 8)))
      sub_1013128C4(a1);
  }
}

uint64_t sub_1013128C4(uint64_t result)
{
  unint64_t v1;
  float v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  char v7;

  v1 = *(_QWORD *)(result + 352);
  v2 = 0.0;
  v3 = 0.0;
  if (v1)
    v3 = *(double *)(result + 296) / (double)v1;
  v4 = *(_QWORD *)(result + 432);
  if (v4)
    v2 = *(double *)(result + 376) / (double)v4;
  v5 = *(_QWORD *)(result + 512);
  if (v5)
    v6 = *(double *)(result + 456) / (double)v5;
  else
    v6 = 0.0;
  if (sqrtf((float)(fabsf(v3) + fabsf(v2)) + fabsf(v6)) <= 3.4)
    v7 = 1;
  else
    v7 = 2;
  *(_BYTE *)result = v7;
  return result;
}

void sub_1013129F8(id a1)
{
  qword_10230E2C8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTurnStateSilo"));
}

uint64_t sub_101312AAC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101312C0C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230E2D8 != -1)
    dispatch_once(&qword_10230E2D8, block);
  return qword_102313D08;
}

void sub_101312C0C()
{
  operator new();
}

void sub_101312C54()
{
  operator delete();
}

uint64_t sub_101312C78(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_101312D0C(a1, "CLTurnState", a2);
  *v3 = off_1021AEA18;
  v3[14] = 0;
  v4 = (uint64_t)(v3 + 15);
  sub_101312678((uint64_t)(v3 + 15));
  *(_WORD *)(a1 + 640) = 0;
  if (sub_1000A5944())
    sub_10131267C(v4, 100);
  return a1;
}

void sub_101312CE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_101312DA8(v2);
  sub_101312E4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101312D0C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AEB88;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_101312D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101312DA8(uint64_t a1)
{
  *(_QWORD *)(a1 + 440) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 472));
  *(_QWORD *)(a1 + 360) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 392));
  *(_QWORD *)(a1 + 280) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 312));
  *(_QWORD *)(a1 + 192) = off_10214EBA0;
  sub_100008848(a1 + 256, *(_QWORD **)(a1 + 264));
  sub_10047F25C((_QWORD *)(a1 + 208));
  *(_QWORD *)(a1 + 104) = off_10214EBA0;
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_10047F25C((_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 16) = off_10214EBA0;
  sub_100008848(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_10047F25C((_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_101312E4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AEB88;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_101312EC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AEA18;
  sub_101312FA0(a1);
  *(_QWORD *)(a1 + 560) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 592));
  *(_QWORD *)(a1 + 480) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 512));
  *(_QWORD *)(a1 + 400) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 432));
  *(_QWORD *)(a1 + 312) = off_10214EBA0;
  sub_100008848(a1 + 376, *(_QWORD **)(a1 + 384));
  sub_10047F25C((_QWORD *)(a1 + 328));
  *(_QWORD *)(a1 + 224) = off_10214EBA0;
  sub_100008848(a1 + 288, *(_QWORD **)(a1 + 296));
  sub_10047F25C((_QWORD *)(a1 + 240));
  *(_QWORD *)(a1 + 136) = off_10214EBA0;
  sub_100008848(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_10047F25C((_QWORD *)(a1 + 152));
  return sub_101312E4C(a1);
}

void sub_101312F7C(uint64_t a1)
{
  sub_101312EC0(a1);
  operator delete();
}

uint64_t sub_101312FA0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(result + 108) = 1;
  if (*(_QWORD *)(result + 112))
  {
    v1 = result;
    v2 = sub_1000A5944();
    sub_1000A4A6C(v2, 0, *(_QWORD *)(v1 + 112));
    result = *(_QWORD *)(v1 + 112);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)(v1 + 112) = 0;
  }
  return result;
}

void sub_101312FF4(unsigned __int8 *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  double v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  __int16 v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  if (a3 >= 1)
  {
    v4 = a3;
    v5 = a1 + 120;
    v6 = a2 + 16;
    HIDWORD(v7) = 0;
    do
    {
      v8 = *v5;
      LODWORD(v7) = *(_DWORD *)(v6 + 16);
      sub_10131271C((uint64_t)v5, v7, *(float *)(v6 - 8), *(float *)(v6 - 4), *(float *)v6);
      v9 = *v5;
      if (v8 != v9)
      {
        *((_WORD *)a1 + 320) = v9;
        v15 = *((_WORD *)a1 + 320);
        *(_DWORD *)buf = 0;
        (*(void (**)(unsigned __int8 *, uint8_t *, __int16 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v15, 1, 0xFFFFFFFFLL, 0);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AEB58);
        v10 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v11 = a1[640];
          *(_DWORD *)buf = 67109376;
          v20 = v8;
          v21 = 1024;
          v22 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "MotionState,Turn,From,%d,To,%d,", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AEB58);
          v12 = a1[640];
          v16[0] = 67109376;
          v16[1] = v8;
          v17 = 1024;
          v18 = v12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "MotionState,Turn,From,%d,To,%d,", v16, 14);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLTurnState::onCompass(const CLCompass_Type::Sample *, int)", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
      }
      v6 += 112;
      --v4;
    }
    while (v4);
  }
}

_QWORD *sub_101313254@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1013132CC(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AEB58);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client registered for notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AEB58);
    v7 = *a2;
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Client registered for notification %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTurnState::registerForNotificationInternal(const CLTurnState_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*a2 && !*(_QWORD *)(a1 + 112) && sub_1000A5944())
    sub_1013134C0(a1);
  return 1;
}

void sub_1013134C0(uint64_t a1)
{
  void **aBlock;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, int);
  void *v4;
  uint64_t v5;

  aBlock = _NSConcreteStackBlock;
  v2 = 3221225472;
  v3 = sub_101313770;
  v4 = &unk_1021AEAE8;
  v5 = a1;
  operator new();
}

void sub_101313544()
{
  operator delete();
}

uint64_t sub_101313568(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AEB58);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client unregistered for notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AEB58);
    v9 = *a2;
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Client unregistered for notification %d", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTurnState::unregisterForNotificationInternal(const CLTurnState_Type::Notification &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (!*a2)
  {
    *(_DWORD *)buf = 0;
    if (!sub_1001B7864(a1, (int *)buf, 1))
    {
      if (*(_QWORD *)(a1 + 112))
      {
        v6 = sub_1000A5944();
        sub_1000A4A6C(v6, 0, *(_QWORD *)(a1 + 112));
        v7 = *(_QWORD *)(a1 + 112);
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        *(_QWORD *)(a1 + 112) = 0;
      }
    }
  }
  return 1;
}

void sub_101313770(uint64_t a1, uint64_t a2, int a3)
{
  sub_101312FF4(*(unsigned __int8 **)(a1 + 32), a2, a3);
}

void sub_101313778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AEB38);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021AEB38);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::removeClient(int) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1013139EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FF568);
}

uint64_t sub_101313A00(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_WORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10131620C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FF569;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AEB38);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_101313E5C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AEB38);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1013140DC(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AEB38);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AEB38);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101314464(uint64_t a1, int *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _WORD *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_WORD **)(v7 + 64);
  if (!v11)
    return 0;
  *a3 = *v11;
  return 1;
}

uint64_t sub_1013144C4(uint64_t a1, int *a2, __int16 *a3)
{
  _QWORD *v6;
  __int16 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_1021AEC68;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_WORD *)v6 + 12) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_101314598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013145AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v5;

  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1013145E4(uint64_t a1, signed __int32 *a2, _WORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_1021AEC68;
      v24[1] = 0;
      *((_WORD *)v24 + 12) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_101315268();
    os_activity_scope_leave(&state);
  }
}

void sub_101314C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101314C68(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AEB38);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AEB38);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021AEB38);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AEB38);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101315210(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10131523C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101315268()
{
  operator new();
}

void sub_1013152F8(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_101315818(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1013156CC(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AEB38);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AEB38);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1013156CC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_101315818(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1013157A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AEC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013157BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AEC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1013157F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_101315818(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_101315890(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_101315C18(a1);
  else
    return 0;
}

id sub_101315890(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_101315FC4((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C4AB6ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C4AB6ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTurnState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_101315C18(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C4AB6ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C4AB6ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTurnState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_101315FC4(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221D358))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)2)
      sub_10194CA68();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_101316038(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101316064(_QWORD *a1, uint64_t a2, void *aBlock)
{
  *a1 = off_1021D5F20;
  *a1 = off_1021AECD8;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = _Block_copy(aBlock);
  operator new[]();
}

void sub_1013160F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

void sub_101316110(uint64_t a1)
{
  sub_1013161A8(a1);
  operator delete();
}

__n128 sub_101316134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 32) + 112 * *(unsigned int *)(a1 + 40);
  v4 = *(_OWORD *)(a3 + 96);
  v6 = *(_OWORD *)(a3 + 48);
  v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 64) = v5;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v3 + 32) = v8;
  *(__n128 *)v3 = result;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  if (v10 >= v9)
    sub_1009BAB4C();
  return result;
}

uint64_t sub_1013161A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AECD8;
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  _Block_release(*(const void **)(a1 + 24));
  if (*(_QWORD *)(a1 + 32))
    operator delete[]();
  *(_DWORD *)(a1 + 44) = 0;
  return sub_100015E88(a1);
}

void sub_10131620C()
{
  operator new();
}

uint64_t sub_10131629C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

float *sub_1013162BC(float **a1, int a2, float a3)
{
  float *v3;
  float *v4;
  float *i;
  float v6;
  float v7;
  unint64_t v8;
  float *v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float *v17;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    goto LABEL_14;
  for (i = v4 + 6; i != v3; i += 6)
  {
    v6 = *i;
    v7 = *(i - 6);
    if (v6 < v7)
      sub_10194CBD8();
  }
  if (v4 == v3)
  {
LABEL_14:
    v14 = INFINITY;
    v9 = *a1;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v4) >> 3);
    v9 = *a1;
    do
    {
      v10 = v8 >> 1;
      v11 = &v9[6 * (v8 >> 1)];
      v13 = *v11;
      v12 = v11 + 6;
      v8 += ~(v8 >> 1);
      if (v13 < a3)
        v9 = v12;
      else
        v8 = v10;
    }
    while (v8);
    if (v9 == v4)
      v14 = INFINITY;
    else
      v14 = vabds_f32(*(v9 - 6), a3);
  }
  if (v9 == v3)
    v15 = INFINITY;
  else
    v15 = vabds_f32(*v9, a3);
  if (a2 < 1)
  {
    v17 = a1[1];
LABEL_32:
    if (v17 == v3)
      return 0;
    else
      return v17;
  }
  else
  {
    v16 = v9;
    while (v16 != v3 || v9 != v4)
    {
      if (v14 >= v15)
      {
        if (v16 + 6 == v3)
        {
          v15 = INFINITY;
          v17 = v16;
          v16 = a1[1];
        }
        else
        {
          v15 = vabds_f32(v16[6], a3);
          v17 = v16;
          v16 += 6;
        }
      }
      else
      {
        v17 = v9 - 6;
        if (v9 - 6 == v4)
        {
          v14 = INFINITY;
          v17 = *a1;
          v9 = *a1;
        }
        else
        {
          v14 = vabds_f32(*(v9 - 12), a3);
          v9 -= 6;
        }
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v9) >> 3)) >= a2)
        goto LABEL_32;
    }
    return 0;
  }
}

float *sub_10131644C(float **a1, unint64_t a2)
{
  return sub_1013162BC(a1, 3, (float)((float)a2 * 4.0) + 2.0);
}

float *sub_1013164EC(float **a1, uint64_t a2)
{
  unint64_t i;
  float *result;
  float v6;
  _BYTE *v7;

  for (i = 0; i != 18; ++i)
  {
    result = sub_10131644C(a1, i);
    v7 = (_BYTE *)(a2 + i);
    v7[264] = (int)v6;
    v7[246] = (int)v6;
    v7[228] = (int)v6;
  }
  return result;
}

float *sub_101316544(float **a1, uint64_t a2, double a3, double a4, double a5)
{
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float *v12;
  float *v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  unint64_t v21;
  float *v22;
  unint64_t v23;
  float *v24;
  float *v25;
  float v26;
  float *v27;
  unint64_t v28;
  float *result;
  float v30;
  uint64_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  float32x2_t v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  uint64_t v53;
  float v54;
  float32x2_t v55;
  unint64_t v56;
  _BYTE *v57;
  float v58;
  uint64_t v59;
  float32x2_t v60;
  float v61;

  v7 = 0;
  v8 = (_BYTE *)(a2 + 228);
  v9 = a2 + 196;
  v10 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
  v11 = (float32x2_t)vdup_n_s32(0x42652EE1u);
  v59 = a2 + 228;
  do
  {
    v12 = *a1;
    v13 = a1[1];
    if (v13 == *a1)
    {
      v22 = a1[1];
    }
    else
    {
      v14 = (float)((float)(int)v7 * 4.0) + 2.0;
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)*a1) >> 3);
      do
      {
        v16 = v15 >> 1;
        v17 = &v12[6 * (v15 >> 1)];
        v19 = *v17;
        v18 = v17 + 6;
        v15 += ~(v15 >> 1);
        if (v19 < (float)(v14 + -2.0))
          v12 = v18;
        else
          v15 = v16;
      }
      while (v15);
      if (v13 == v12)
      {
        v22 = a1[1];
        v27 = v12;
        v12 = v22;
        v13 = v27;
      }
      else
      {
        v20 = v14 + 2.0;
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v12) >> 3);
        v22 = v12;
        do
        {
          v23 = v21 >> 1;
          v24 = &v22[6 * (v21 >> 1)];
          v26 = *v24;
          v25 = v24 + 6;
          v21 += ~(v21 >> 1);
          if (v26 > v20)
            v21 = v23;
          else
            v22 = v25;
        }
        while (v21);
        v13 = v12;
      }
    }
    v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v13) >> 3);
    if (v28 <= 4)
    {
      result = sub_10131644C(a1, v7);
      v31 = a2 + v7;
      *(_BYTE *)(v31 + 264) = (int)v30;
      *(_BYTE *)(v31 + 246) = (int)v30;
      *(_BYTE *)(v59 + v7) = (int)v30;
      goto LABEL_38;
    }
    v32 = 0;
    v60 = 0;
    v61 = 0.0;
    if (v12 != v22)
    {
      v34 = *(float *)(a2 + 220);
      v33 = *(float *)(a2 + 224);
      v35 = 0.0;
      while (1)
      {
        v36 = 0;
        v37 = *v12;
        while (1)
        {
          v38 = *(float *)(v9 + 4 * v36);
          if ((float)(v33 + v38) > v37)
            break;
          if (++v36 == 6)
          {
            v38 = v34;
            break;
          }
        }
        v39 = (float)((float)(v37 - v38) / (float)(v33 + v33)) + 0.5;
        if (v39 <= 0.0)
          break;
        if (v39 >= 1.0)
        {
          v53 = a2 + 24 * v36;
          v49 = *(float *)(v53 + 48);
          v50 = v37 * *(float *)(v53 + 36);
          v51 = *(float32x2_t *)(v53 + 28);
          v52 = *(float32x2_t *)(v53 + 40);
          goto LABEL_30;
        }
        v40 = v39 * (float)(v39 * (float)((float)(v39 * -2.0) + 3.0));
        v41 = a2 + 24 * v36;
        v42 = (float)((float)(v37 * *(float *)(v41 + 12)) + *(float *)(v41 + 24)) * 0.017453;
        v43 = vmul_n_f32(*(float32x2_t *)(v41 + 28), v37);
        v44 = (float)((float)((float)(v37 * *(float *)(v41 + 36)) + *(float *)(v41 + 48)) * 0.017453) - v42;
        v45 = vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v41 + 4), v37), *(float32x2_t *)(v41 + 16)), v10);
        v46 = vadd_f32(v45, vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(v43, *(float32x2_t *)(v41 + 40)), v10), v45), v40));
        v47 = v42 + (float)(v40 * v44);
LABEL_31:
        v54 = (float)(v47 * 57.296) - v12[3];
        v55 = vsub_f32(vmul_f32(v46, v11), *(float32x2_t *)(v12 + 1));
        v32 = vmla_f32(v32, v55, v55);
        v60 = v32;
        v35 = v35 + (float)(v54 * v54);
        v61 = v35;
        v12 += 6;
        if (v12 == v22)
          goto LABEL_34;
      }
      v48 = a2 + 24 * v36;
      v49 = *(float *)(v48 + 24);
      v50 = v37 * *(float *)(v48 + 12);
      v51 = *(float32x2_t *)(v48 + 4);
      v52 = *(float32x2_t *)(v48 + 16);
LABEL_30:
      v46 = vmul_f32(vadd_f32(vmul_n_f32(v51, v37), v52), v10);
      v47 = (float)(v50 + v49) * 0.017453;
      goto LABEL_31;
    }
    v35 = 0.0;
LABEL_34:
    v56 = 0;
    *(float *)&a5 = (float)v28;
    v60 = vdiv_f32(v32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
    v61 = v35 / (float)v28;
    v57 = v8;
    do
    {
      result = (float *)sub_100534E68((uint64_t)&v60, v56);
      v58 = sqrtf(*result) * 100.0;
      if (v58 < 1.0)
        v58 = 1.0;
      *v57 = (int)v58;
      v57 += 18;
      ++v56;
    }
    while (v56 != 3);
LABEL_38:
    ++v7;
    ++v8;
  }
  while (v7 != 18);
  return result;
}

float *sub_1013168C4@<X0>(float **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float *result;
  __n128 *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  uint64_t i;
  float v17;
  float v18;
  uint64_t j;
  int v20;
  char v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  float *v29;
  float *v30;
  unint64_t v31;
  unint64_t v32;
  float *v33;
  float *v34;
  float v35;
  unint64_t v36;
  float *v37;
  unint64_t v38;
  float *v39;
  float *v40;
  float v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;

  *(_OWORD *)(a3 + 241) = 0u;
  *(_OWORD *)(a3 + 225) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  *(_OWORD *)(a3 + 193) = 0u;
  *(_OWORD *)(a3 + 177) = 0u;
  *(_OWORD *)(a3 + 161) = 0u;
  *(_OWORD *)(a3 + 145) = 0u;
  *(_OWORD *)(a3 + 129) = 0u;
  *(_OWORD *)(a3 + 113) = 0u;
  *(_OWORD *)(a3 + 97) = 0u;
  *(_OWORD *)(a3 + 81) = 0u;
  *(_OWORD *)(a3 + 65) = 0u;
  *(_OWORD *)(a3 + 49) = 0u;
  *(_OWORD *)(a3 + 33) = 0u;
  *(_OWORD *)(a3 + 17) = 0u;
  *(_OWORD *)(a3 + 266) = 0u;
  *(_OWORD *)(a3 + 1) = 0u;
  *(_OWORD *)(a3 + 257) = 0u;
  *(_BYTE *)a3 = 22;
  result = *a1;
  v7 = (__n128 *)a1[1];
  if (result == (float *)v7)
  {
    *(_QWORD *)(a3 + 228) = -1;
    *(_QWORD *)(a3 + 264) = -1;
    *(_QWORD *)(a3 + 246) = -1;
    return result;
  }
  sub_101316F5C((uint64_t)result, v7, (uint64_t)&v44, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)result) >> 3)), 1, (__n128)0);
  v8 = **a1;
  v9 = *(a1[1] - 6);
  v10 = v9 - v8;
  v43 = a2;
  if ((float)(v9 - v8) < 6.6667)
  {
    *(_DWORD *)(a3 + 224) = 1084227584;
    v11 = 2.5;
    v12 = 1.0;
    v13 = 10.0;
LABEL_11:
    v18 = (float)((float)(v8 + v9) + (float)(v12 * -10.0)) * 0.5;
    *(float *)(a3 + 196) = v18;
    v15 = 1;
    goto LABEL_12;
  }
  v14 = 3.4028e38;
  v15 = 1;
  for (i = 2; i != 7; ++i)
  {
    v17 = fabsf((float)(v10 / (float)(i - 1)) + -10.0);
    if (v17 < v14)
    {
      v14 = v17;
      v15 = i;
    }
  }
  v13 = v10 / (float)(v15 - 1);
  v12 = v13 / 10.0;
  *(float *)(a3 + 224) = (float)(v13 / 10.0) * 5.0;
  if (v15 >= 7)
    sub_10194CD44();
  v11 = (float)(v12 * 0.5) * 5.0;
  if (v15 == 1)
    goto LABEL_11;
  v18 = v8 + (float)((float)(v12 * 0.5) * -10.0);
  *(float *)(a3 + 196) = v18;
  if (!v15)
  {
    v20 = 1;
    v21 = 1;
    goto LABEL_16;
  }
LABEL_12:
  for (j = 0; j != v15; ++j)
  {
    v18 = v13 + v18;
    *(float *)(a3 + 200 + 4 * j) = v18;
  }
  v20 = v15 + 1;
  if ((v15 + 1) > 6)
  {
LABEL_17:
    v25 = 0;
    do
    {
      v26 = *(float *)(a3 + 196 + 4 * v25) - v11;
      v27 = v25 + 1;
      v28 = v11 + *(float *)(a3 + 196 + 4 * (v25 + 1));
      v30 = *a1;
      v29 = a1[1];
      if (v29 == *a1)
      {
        v37 = a1[1];
      }
      else
      {
        v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)*a1) >> 3);
        do
        {
          v32 = v31 >> 1;
          v33 = &v30[6 * (v31 >> 1)];
          v35 = *v33;
          v34 = v33 + 6;
          v31 += ~(v31 >> 1);
          if (v35 < v26)
            v30 = v34;
          else
            v31 = v32;
        }
        while (v31);
        if (v29 == v30)
        {
          v37 = a1[1];
        }
        else
        {
          v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
          v37 = v30;
          do
          {
            v38 = v36 >> 1;
            v39 = &v37[6 * (v36 >> 1)];
            v41 = *v39;
            v40 = v39 + 6;
            v36 += ~(v36 >> 1);
            if (v41 > v28)
              v36 = v38;
            else
              v37 = v40;
          }
          while (v36);
        }
        v29 = v30;
      }
      sub_100A9BE9C(v29, v37, 0, 0, (float *)&v44);
      v42 = a3 + 24 * v27;
      v22 = *(double *)&v44;
      *(_OWORD *)(v42 + 4) = v44;
      *(_QWORD *)(v42 + 20) = v45;
      if (!v25)
        sub_100A9C2CC(a3 + 16, a3 + 28, v26);
      if (v15 - 1 == v25)
        sub_100A9C2CC(a3 + 16 + 24 * v15 + 24, v42 + 4, v28);
      ++v25;
    }
    while (v27 != v15);
    goto LABEL_39;
  }
  v21 = 0;
LABEL_16:
  memset_pattern16((void *)(a3 + (4 * v20 + 196)), &unk_101C4AC10, 4 * (6 - v20) + 4);
  if ((v21 & 1) == 0)
    goto LABEL_17;
LABEL_39:
  if (v43)
    return sub_101316544(a1, a3, v22, v23, v24);
  else
    return sub_1013164EC(a1, a3);
}

void sub_101316C64(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  uint64_t v7;
  uint64_t i;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  float *v26;
  float v27;
  float *v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  float v32;
  int v33;
  float v34;
  BOOL v35;
  float v36;
  float *__p;
  float *v39;
  char *v40;

  v7 = 0;
  __p = 0;
  v40 = 0;
  do
  {
    for (i = 0; i != 18; ++i)
    {
      v9 = __p;
      v39 = __p;
      v10 = *a2;
      v11 = a2[1];
      v12 = 7.0;
      if (*a2 != v11)
      {
        v13 = (float)((float)(int)i * 4.0) + 2.0;
        v14 = v13 + -2.0;
        v15 = v13 + 2.0;
        do
        {
          v16 = *(float *)v10;
          if (v14 <= *(float *)v10 && v16 < v15)
          {
            v16 = a4 - *(double *)(v10 + 16);
            v18 = fabsf(v16);
            if (v9 >= (float *)v40)
            {
              v20 = __p;
              v21 = v9 - __p;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                sub_100259694();
              v23 = v40 - (char *)__p;
              if ((v40 - (char *)__p) >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)sub_100260634((uint64_t)&v40, v24);
                v20 = __p;
                v9 = v39;
              }
              else
              {
                v25 = 0;
              }
              v26 = (float *)&v25[4 * v21];
              *v26 = v18;
              v19 = v26 + 1;
              while (v9 != v20)
              {
                v27 = *--v9;
                v16 = v27;
                *--v26 = v27;
              }
              __p = v26;
              v40 = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *v9 = v18;
              v19 = v9 + 1;
            }
            v39 = v19;
            v9 = v19;
          }
          v10 += 24;
        }
        while (v10 != v11);
        if (v9 != __p)
        {
          if ((unint64_t)((char *)v9 - (char *)__p) > 0xB)
          {
            v28 = __p + 2;
            if (__p + 2 != v9)
              sub_10053EEC0(__p, __p + 2, v9, v16);
          }
          else
          {
            v28 = v9 - 1;
          }
          v12 = *v28 / 86400.0;
        }
      }
      v29 = a1 + 18 * v7 + i;
      v31 = *(unsigned __int8 *)(v29 + 228);
      v30 = (_BYTE *)(v29 + 228);
      v32 = (float)v31 * 0.01;
      if (a3)
      {
        if (v12 > 2.0 && v32 < 0.1)
          v32 = 0.1;
      }
      else
      {
        v33 = (int)v12;
        if ((int)v12 >= 6)
          v33 = 6;
        v32 = v32 + flt_101C4ABE8[v33 & ~(v33 >> 31)];
      }
      v34 = v32 * 100.0;
      v35 = v32 <= 2.5;
      v36 = 250.0;
      if (v35)
        v36 = v34;
      *v30 = (int)v36;
    }
    ++v7;
  }
  while (v7 != 3);
  if (__p)
    operator delete(__p);
}

void sub_101316F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101316F30(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_101316F5C(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  __int8 *v25;
  float v26;
  __int128 v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

uint64_t sub_1013173F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(float *)(v4 + 24);
        if (v6 < *(float *)v4)
        {
          v10 = *(_OWORD *)(v4 + 28);
          v11 = *(_DWORD *)(v4 + 44);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(float *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(float *)v9 = v6;
          *(_OWORD *)(v9 + 4) = v10;
          *(_DWORD *)(v9 + 20) = v11;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_1013174E0(__int128 *a1, __int128 *a2, __int128 *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v3 = *(float *)a2;
  v4 = *(float *)a3;
  if (*(float *)a2 < *(float *)a1)
  {
    if (v4 < v3)
    {
      v5 = *((_QWORD *)a1 + 2);
      v6 = *a1;
      v7 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v7;
      *a3 = v6;
      *((_QWORD *)a3 + 2) = v5;
      return 1;
    }
    v14 = *((_QWORD *)a1 + 2);
    v15 = *a1;
    v16 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v16;
    *a2 = v15;
    *((_QWORD *)a2 + 2) = v14;
    if (*(float *)a3 >= *(float *)a2)
      return 1;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *a2;
    v19 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v19;
    *a3 = v18;
    *((_QWORD *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *((_QWORD *)a2 + 2);
    v9 = *a2;
    v10 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v10;
    *a3 = v9;
    *((_QWORD *)a3 + 2) = v8;
    if (*(float *)a2 >= *(float *)a1)
      return 1;
    v11 = *((_QWORD *)a1 + 2);
    v12 = *a1;
    v13 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v13;
    *a2 = v12;
    *((_QWORD *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

float *sub_1013175EC(float *a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  __int128 *v5;
  float v6;
  __int128 v7;
  float v8;
  float v9;
  __int128 v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;

  v2 = *a1;
  v14 = *(_OWORD *)(a1 + 1);
  v15 = *((_DWORD *)a1 + 5);
  if (*a1 >= *(a2 - 6))
  {
    v5 = (__int128 *)(a1 + 6);
    do
    {
      v3 = (float *)v5;
      if (v5 >= (__int128 *)a2)
        break;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[6];
      v3 += 6;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 6);
      a2 -= 6;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    v13 = *((_QWORD *)v3 + 2);
    v12 = *(_OWORD *)v3;
    v7 = *(_OWORD *)a2;
    *((_QWORD *)v3 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v7;
    *((_QWORD *)a2 + 2) = v13;
    *(_OWORD *)a2 = v12;
    do
    {
      v8 = v3[6];
      v3 += 6;
    }
    while (v2 >= v8);
    do
    {
      v9 = *(a2 - 6);
      a2 -= 6;
    }
    while (v2 < v9);
  }
  if (v3 - 6 != a1)
  {
    v10 = *(_OWORD *)(v3 - 6);
    *((_QWORD *)a1 + 2) = *((_QWORD *)v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 6) = v2;
  *((_DWORD *)v3 - 1) = v15;
  *(_OWORD *)(v3 - 5) = v14;
  return v3;
}

uint64_t sub_101317720(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  __int128 *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  __int128 v15;
  __int128 v17;
  int v18;

  v2 = 0;
  v3 = *(float *)a1;
  v17 = *(_OWORD *)(a1 + 4);
  v18 = *(_DWORD *)(a1 + 20);
  do
  {
    v4 = *(float *)(a1 + v2 + 24);
    v2 += 24;
  }
  while (v4 < v3);
  v5 = a1 + v2;
  if (v2 == 24)
  {
    do
    {
      if (v5 >= a2)
        break;
      v7 = *(float *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *(float *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  v8 = (__int128 *)(a1 + v2);
  if (v5 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *v8;
      v11 = *((_QWORD *)v8 + 2);
      v12 = *(_QWORD *)(v9 + 16);
      *v8 = *(_OWORD *)v9;
      *((_QWORD *)v8 + 2) = v12;
      *(_QWORD *)(v9 + 16) = v11;
      *(_OWORD *)v9 = v10;
      do
      {
        v13 = *((float *)v8 + 6);
        v8 = (__int128 *)((char *)v8 + 24);
      }
      while (v13 < v3);
      do
      {
        v14 = *(float *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if ((__int128 *)((char *)v8 - 24) != (__int128 *)a1)
  {
    v15 = *(__int128 *)((char *)v8 - 24);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *((float *)v8 - 6) = v3;
  *((_DWORD *)v8 - 1) = v18;
  *(__int128 *)((char *)v8 - 20) = v17;
  return (uint64_t)v8 - 24;
}

BOOL sub_101317854(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(float *)(a2 - 24) < *(float *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1013174E0((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_101317A48(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_101317B18((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (float *)(a1 + 48);
      sub_1013174E0((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)v11;
    if (*(float *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 4);
      v19 = *(_DWORD *)(v11 + 20);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(float *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(float *)v17 = v14;
      *(_OWORD *)(v17 + 4) = v18;
      *(_DWORD *)(v17 + 20) = v19;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (float *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_101317A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1013174E0((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 < *(float *)a3)
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    result.n128_u32[0] = *(_DWORD *)a3;
    if (*(float *)a3 < *(float *)a2)
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      result.n128_u32[0] = *(_DWORD *)a2;
      if (*(float *)a2 < *(float *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 sub_101317B18(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result = sub_101317A48((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u32[0] = a5->n128_u32[0];
  if (a5->n128_f32[0] < a4->n128_f32[0])
  {
    v11 = a4[1].n128_u64[0];
    result = *a4;
    v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    result.n128_u32[0] = a4->n128_u32[0];
    if (a4->n128_f32[0] < a3->n128_f32[0])
    {
      v13 = a3[1].n128_u64[0];
      result = *a3;
      v14 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      result.n128_u32[0] = a3->n128_u32[0];
      if (a3->n128_f32[0] < a2->n128_f32[0])
      {
        v15 = a2[1].n128_u64[0];
        result = *a2;
        v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u32[0] = a2->n128_u32[0];
        if (a2->n128_f32[0] < a1->n128_f32[0])
        {
          v17 = a1[1].n128_u64[0];
          result = *a1;
          v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

__n128 *sub_101317C24(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 v29;
  unint64_t v30;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)(a1 + 24 * v11);
      do
      {
        a5 = sub_101317E3C(a1, a5, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (v15->n128_f32[0] < *(float *)a1)
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = *(_QWORD *)(a1 + 16);
          *v15 = *(__n128 *)a1;
          v15[1].n128_u64[0] = v18;
          *(__n128 *)a1 = v17;
          *(_QWORD *)(a1 + 16) = v16;
          sub_101317E3C(a1, v17, a4, v10, (__int128 *)a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 25)
    {
      v19 = v9 / 0x18uLL;
      do
      {
        v20 = 0;
        v29 = *(__n128 *)a1;
        v30 = *(_QWORD *)(a1 + 16);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 24 * v20 + 24;
          v23 = 2 * v20;
          v20 = (2 * v20) | 1;
          v24 = v23 + 2;
          if (v24 < v19 && *(float *)v21 < *(float *)(v21 + 24))
          {
            v21 += 24;
            v20 = v24;
          }
          v25 = *(_OWORD *)v21;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
          *(_OWORD *)v22 = v25;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v7 - 24);
        if ((__n128 *)v21 == v7)
        {
          *(_QWORD *)(v21 + 16) = v30;
          *(__n128 *)v21 = v29;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v21 + 16) = v7[1].n128_u64[0];
          *(__n128 *)v21 = v26;
          *v7 = v29;
          v7[1].n128_u64[0] = v30;
          sub_101317F84(a1, v21 + 24, v29, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 sub_101317E3C(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, __int128 *a5)
{
  int64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  int v13;

  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - a1) >> 3)))
    {
      v6 = (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3)) | 1;
      v7 = (__int128 *)(a1 + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2 < a4 && *(float *)v7 < *((float *)v7 + 6))
      {
        v7 = (__int128 *)((char *)v7 + 24);
        v6 = 0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u32[0] = *(_DWORD *)a5;
      if (*(float *)v7 >= *(float *)a5)
      {
        v12 = *(__n128 *)((char *)a5 + 4);
        v13 = *((_DWORD *)a5 + 5);
        do
        {
          v8 = a5;
          a5 = v7;
          v9 = *v7;
          *((_QWORD *)v8 + 2) = *((_QWORD *)v7 + 2);
          *v8 = v9;
          if (v5 < v6)
            break;
          v10 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int128 *)(a1 + 24 * v6);
          v11 = v10 + 2;
          if (v11 < a4 && *(float *)v7 < *((float *)v7 + 6))
          {
            v7 = (__int128 *)((char *)v7 + 24);
            v6 = v11;
          }
        }
        while (*(float *)v7 >= result.n128_f32[0]);
        *(_DWORD *)a5 = result.n128_u32[0];
        result = v12;
        *((_DWORD *)a5 + 5) = v13;
        *(__int128 *)((char *)a5 + 4) = (__int128)v12;
      }
    }
  }
  return result;
}

__n128 sub_101317F84(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  __n128 v11;
  int v12;

  v5 = a5 - 2;
  if (a5 >= 2)
  {
    v6 = v5 >> 1;
    v7 = (__int128 *)(a1 + 24 * (v5 >> 1));
    v8 = (__int128 *)(a2 - 24);
    result.n128_u32[0] = *(_DWORD *)(a2 - 24);
    if (*(float *)v7 < result.n128_f32[0])
    {
      v11 = *(__n128 *)(a2 - 20);
      v12 = *(_DWORD *)(a2 - 4);
      do
      {
        v9 = v8;
        v8 = v7;
        v10 = *v7;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
        *v9 = v10;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (__int128 *)(a1 + 24 * v6);
      }
      while (*(float *)v7 < result.n128_f32[0]);
      *(_DWORD *)v8 = result.n128_u32[0];
      result = v11;
      *(__int128 *)((char *)v8 + 4) = (__int128)v11;
      *((_DWORD *)v8 + 5) = v12;
    }
  }
  return result;
}

BOOL sub_10131804C(uint64_t a1)
{
  _BOOL8 result;
  unsigned int v3;
  uint8x8_t v4;
  int v5;
  float v7;
  NSObject *v8;
  double v9;
  double v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  int *v23;
  unint64_t v24[65];
  char v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  double v37;

  if (!*(_QWORD *)(a1 + 136))
    return 0;
  if (feof(*(FILE **)(a1 + 136)))
    return 0;
  v3 = 0;
  while (1)
  {
    v25 = 0;
    if (fread(&v25, 1uLL, 1uLL, *(FILE **)(a1 + 136)) != 1)
      return 0;
    if (v25 != 67)
      goto LABEL_13;
    *(_BYTE *)a1 = 67;
    if (fread((void *)(a1 + 1), 1uLL, 4uLL, *(FILE **)(a1 + 136)) != 4)
      return 0;
    v4.i32[0] = *(_DWORD *)a1;
    if (vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0] == 1163086915 && *(_BYTE *)(a1 + 4) == 70)
      break;
    if (fseek(*(FILE **)(a1 + 136), -4, 1))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AED78);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,fseek returned non-zero", (uint8_t *)&v32, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v32, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AED78);
        LOWORD(v26) = 0;
        _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,fseek returned non-zero", &v26, 2);
LABEL_125:
        v23 = (int *)v11;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLCoarseSignalEnvironmentDataManager::readSignalEnvHelper(SignalEnvironment &)", "%s\n", v11);
        if (v23 != &v32)
          free(v23);
        return 0;
      }
      return 0;
    }
LABEL_13:
    v5 = feof(*(FILE **)(a1 + 136));
    result = 0;
    if (!v5 && v3++ < 0x1FF)
      continue;
    return result;
  }
  if (fread((void *)(a1 + 5), 1uLL, 0x63uLL, *(FILE **)(a1 + 136)) == 99)
  {
    if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
    {
      *(_BYTE *)(a1 + 104) = v24[0];
      if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
      {
        *(_BYTE *)(a1 + 105) = v24[0];
        if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
        {
          *(_BYTE *)(a1 + 106) = v24[0];
          if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
          {
            *(_BYTE *)(a1 + 107) = v24[0];
            if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
            {
              v7 = COERCE_FLOAT(bswap32(v24[0]));
              *(float *)(a1 + 108) = v7;
              if (fabs(v7 + -0.05) <= 0.0001)
              {
                if (fread(v24, 1uLL, 8uLL, *(FILE **)(a1 + 136)) == 8)
                {
                  *(_QWORD *)(a1 + 112) = bswap64(v24[0]);
                  if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                  {
                    *(_DWORD *)(a1 + 120) = bswap32(v24[0]);
                    if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                    {
                      *(_DWORD *)(a1 + 124) = bswap32(v24[0]);
                      if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                      {
                        *(_DWORD *)(a1 + 128) = bswap32(v24[0]);
                        return 1;
                      }
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021AED78);
                      v22 = qword_1022A0078;
                      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                      {
                        LOWORD(v32) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - crc", (uint8_t *)&v32, 2u);
                      }
                      result = sub_1001BFF7C(115, 2);
                      if (result)
                      {
                        bzero(&v32, 0x65CuLL);
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021AED78);
                        LOWORD(v26) = 0;
                        _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - crc", &v26, 2);
                        goto LABEL_125;
                      }
                    }
                    else
                    {
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021AED78);
                      v21 = qword_1022A0078;
                      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                      {
                        LOWORD(v32) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - data size", (uint8_t *)&v32, 2u);
                      }
                      result = sub_1001BFF7C(115, 2);
                      if (result)
                      {
                        bzero(&v32, 0x65CuLL);
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021AED78);
                        LOWORD(v26) = 0;
                        _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - data size", &v26, 2);
                        goto LABEL_125;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021AED78);
                    v20 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                    {
                      LOWORD(v32) = 0;
                      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - expiration age", (uint8_t *)&v32, 2u);
                    }
                    result = sub_1001BFF7C(115, 2);
                    if (result)
                    {
                      bzero(&v32, 0x65CuLL);
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021AED78);
                      LOWORD(v26) = 0;
                      _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - expiration age", &v26, 2);
                      goto LABEL_125;
                    }
                  }
                }
                else
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021AED78);
                  v19 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v32) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - timestamp", (uint8_t *)&v32, 2u);
                  }
                  result = sub_1001BFF7C(115, 2);
                  if (result)
                  {
                    bzero(&v32, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021AED78);
                    LOWORD(v26) = 0;
                    _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - timestamp", &v26, 2);
                    goto LABEL_125;
                  }
                }
              }
              else
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021AED78);
                v8 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                {
                  v9 = *(float *)(a1 + 108);
                  v32 = 134349568;
                  v33 = 0x3FA999999999999ALL;
                  v34 = 2050;
                  v35 = 0x3FA999999999999ALL;
                  v36 = 2050;
                  v37 = v9;
                  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,coarse signal environment file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed", (uint8_t *)&v32, 0x20u);
                }
                result = sub_1001BFF7C(115, 2);
                if (result)
                {
                  bzero(&v32, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021AED78);
                  v10 = *(float *)(a1 + 108);
                  v26 = 134349568;
                  v27 = 0x3FA999999999999ALL;
                  v28 = 2050;
                  v29 = 0x3FA999999999999ALL;
                  v30 = 2050;
                  v31 = v10;
                  _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,coarse signal environment file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed", &v26, 32);
                  goto LABEL_125;
                }
              }
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021AED78);
              v18 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
              {
                LOWORD(v32) = 0;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - binsize", (uint8_t *)&v32, 2u);
              }
              result = sub_1001BFF7C(115, 2);
              if (result)
              {
                bzero(&v32, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021AED78);
                LOWORD(v26) = 0;
                _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - binsize", &v26, 2);
                goto LABEL_125;
              }
            }
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AED78);
            v17 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
            {
              LOWORD(v32) = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - maxLat", (uint8_t *)&v32, 2u);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(&v32, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021AED78);
              LOWORD(v26) = 0;
              _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - maxLat", &v26, 2);
              goto LABEL_125;
            }
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AED78);
          v16 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            LOWORD(v32) = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - minLat", (uint8_t *)&v32, 2u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(&v32, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AED78);
            LOWORD(v26) = 0;
            _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - minLat", &v26, 2);
            goto LABEL_125;
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AED78);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          LOWORD(v32) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - headerLength", (uint8_t *)&v32, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(&v32, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AED78);
          LOWORD(v26) = 0;
          _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - headerLength", &v26, 2);
          goto LABEL_125;
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AED78);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - version", (uint8_t *)&v32, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(&v32, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AED78);
        LOWORD(v26) = 0;
        _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - version", &v26, 2);
        goto LABEL_125;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v32) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - header string", (uint8_t *)&v32, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(&v32, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AED78);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, &v32, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - header string", &v26, 2);
      goto LABEL_125;
    }
  }
  return result;
}

void sub_101318E50(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101318E7C(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  for (i = 0; i != 448; i += 64)
  {
    v3 = result + i;
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 16) = 0uLL;
    *(_OWORD *)(v3 + 32) = 0uLL;
    *(_OWORD *)(v3 + 41) = 0uLL;
  }
  v4 = 0;
  *(_QWORD *)(result + 448) = a2;
  v5 = &qword_101C4AC60;
  do
  {
    v6 = result + v4;
    *(_DWORD *)(v6 + 8) = 0;
    *(_OWORD *)(v6 + 16) = 0uLL;
    *(_OWORD *)(v6 + 32) = 0uLL;
    *(_OWORD *)(v6 + 41) = 0uLL;
    v7 = *v5++;
    *(_QWORD *)v6 = v7;
    *(_OWORD *)(v6 + 40) = xmmword_101C4AC50;
    v4 += 64;
  }
  while (v4 != 448);
  return result;
}

double sub_101318EF0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v3;
  double result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;

  if (!a3)
    return 0.0;
  v3 = (int *)(*a2 + 8);
  result = 0.0;
  v5 = 0.0;
  do
  {
    v6 = *v3;
    v3 += 6;
    v7 = a1 + (v6 << 6);
    if (*(_BYTE *)(v7 + 56))
      v8 = (double *)(v7 + 32);
    else
      v8 = (double *)v7;
    result = result + *v8;
    v5 = v5 + *(double *)(v7 + 48);
    --a3;
  }
  while (a3);
  return result;
}

double sub_101318F44(uint64_t a1, double a2)
{
  double v3;
  void *__p;
  _BYTE *v6;
  double v7;

  v7 = a2;
  (*(void (**)(void **__return_ptr, _QWORD, double *))(**(_QWORD **)(a1 + 448) + 64))(&__p, *(_QWORD *)(a1 + 448), &v7);
  v3 = sub_101318EF0(a1, &__p, 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)__p) >> 3));
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

double sub_101318FD0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + ((uint64_t)a2 << 6);
  if (*(_BYTE *)(v2 + 56))
    v3 = v2 + 32;
  else
    v3 = a1 + ((uint64_t)a2 << 6);
  return *(double *)v3;
}

void sub_101318FF4(uint64_t a1, uint64_t a2)
{
  int v3;
  double *v4;
  double *v5;
  int v6;
  double v7;
  double *v8;
  uint64_t v9;
  double v10;
  double *v11;
  double *v12;

  if ((_DWORD)a2 == 6)
  {
    *(_QWORD *)(a1 + 384) = 0;
    *(_DWORD *)(a1 + 392) = 0;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 425) = 0u;
  }
  else
  {
    v3 = a2;
    (*(void (**)(double **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 448) + 16))(&v11, *(_QWORD *)(a1 + 448), a2, 8);
    v4 = v11;
    v5 = v12;
    if (v11 == v12)
    {
      v6 = 0;
      v7 = 0.0;
    }
    else
    {
      v6 = 0;
      v7 = 0.0;
      v8 = v11;
      do
      {
        v7 = v7 + *v8;
        v6 += *((_DWORD *)v8 + 2);
        v8 += 2;
      }
      while (v8 != v12);
    }
    v9 = a1 + ((uint64_t)v3 << 6);
    *(_DWORD *)(v9 + 24) = v6;
    *(double *)(v9 + 16) = v7;
    if (v6 <= 0)
      v10 = *(double *)&qword_101C4AC60[v3];
    else
      v10 = v7 / (double)v6;
    *(double *)v9 = v10;
    *(_DWORD *)(a1 + ((uint64_t)v3 << 6) + 8) = (unint64_t)((char *)v5 - (char *)v4) >> 4;
    if (v4)
    {
      v12 = v4;
      operator delete(v4);
    }
  }
}

uint64_t sub_1013190E8(uint64_t result, int a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;

  v2 = 0;
  v3 = 0.0;
  v4 = 0.0;
  do
  {
    v5 = (double *)((char *)&unk_101C4AC98 + v2);
    if (*(_DWORD *)((char *)&unk_101C4AC98 + v2 + 4) == a2)
    {
      v6 = result + ((uint64_t)*(int *)v5 << 6);
      v7 = *(double *)v6;
      LODWORD(v6) = *(_DWORD *)(v6 + 8);
      v8 = (double)(int)v6;
      v9 = v5[2] + v5[1] * v7;
      if ((int)v6 <= 1)
        v8 = 0.0;
      v3 = v3 + v9 * v8;
      v4 = v4 + v8;
    }
    v2 += 24;
  }
  while (v2 != 288);
  if (v4 >= 2.0)
  {
    v10 = result + ((uint64_t)a2 << 6);
    *(double *)(v10 + 32) = v3 / v4;
    *(_DWORD *)(v10 + 28) = (int)v4;
  }
  return result;
}

void sub_101319170(_OWORD *a1)
{
  uint64_t v2;
  double *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  int v8;
  int *v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;

  v2 = 0;
  v3 = qword_101C4AC60;
  do
  {
    v4 = &a1[v2];
    *((_DWORD *)v4 + 2) = 0;
    v4[1] = 0uLL;
    v4[2] = 0uLL;
    *(_OWORD *)((char *)v4 + 41) = 0uLL;
    v5 = *(_QWORD *)v3++;
    *(_QWORD *)v4 = v5;
    *(_OWORD *)((char *)v4 + 40) = xmmword_101C4AC50;
    v2 += 4;
  }
  while (v2 != 28);
  for (i = 0; i != 7; ++i)
    sub_101318FF4((uint64_t)a1, i);
  for (j = 0; j != 4; ++j)
  {
    v8 = dword_101C4ADB8[j];
    sub_1013190E8((uint64_t)a1, v8);
    v9 = (int *)&a1[4 * (uint64_t)v8];
    v10 = v9[7] >= 2 && v9[2] < 2;
    *((_BYTE *)v9 + 56) = v10;
  }
  v11 = 0;
  v12 = a1[21];
  *a1 = a1[20];
  a1[1] = v12;
  a1[2] = a1[22];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a1 + 361);
  do
    sub_10131927C((uint64_t)a1, v11++);
  while (v11 != 7);
}

double sub_10131927C(uint64_t a1, int a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  double *v9;
  int *v10;

  result = 0.0;
  v3 = a1 + ((uint64_t)a2 << 6);
  *(_OWORD *)(v3 + 40) = xmmword_101C4AC50;
  v4 = v3 + 40;
  if (*(_BYTE *)(v4 + 16))
  {
    v5 = 0;
    while (dword_101C4B278[v5] != a2)
    {
      v5 += 6;
      if (v5 == 24)
        return result;
    }
    v8 = &dword_101C4B278[v5];
    *(_QWORD *)v4 = *((_QWORD *)v8 + 1);
    v9 = (double *)(v8 + 4);
  }
  else
  {
    v6 = 0;
    while (1)
    {
      if (dword_101C4ADC8[v6] == a2)
      {
        v7 = *(int *)(a1 + ((uint64_t)a2 << 6) + 8);
        if (*(_QWORD *)&dword_101C4ADC8[v6 + 2] <= v7 && *(_QWORD *)&dword_101C4ADC8[v6 + 4] > v7)
          break;
      }
      v6 += 10;
      if (v6 == 300)
        return result;
    }
    v10 = &dword_101C4ADC8[v6];
    *(_QWORD *)v4 = *((_QWORD *)v10 + 3);
    v9 = (double *)(v10 + 8);
  }
  result = *v9;
  *(double *)(v4 + 8) = *v9;
  return result;
}

void sub_101319604(id a1)
{
  uint64_t v1;
  char *v2;
  CFStringRef v3;
  char *v4;
  CFStringRef v5;
  void *__p[2];
  char v7;

  qword_10230E2E0 = (uint64_t)objc_alloc_init((Class)CLPMeta);
  v1 = sub_100197040();
  sub_10075A5A0(v1, (uint64_t)__p);
  if (v7 >= 0)
    v2 = (char *)__p;
  else
    v2 = (char *)__p[0];
  v3 = sub_1001A48D8(v2);
  if (v7 < 0)
    operator delete(__p[0]);
  objc_msgSend((id)qword_10230E2E0, "setProductId:", v3);
  CFRelease(v3);
  sub_100197040();
  sub_10075A1D4((uint64_t)__p);
  if (v7 >= 0)
    v4 = (char *)__p;
  else
    v4 = (char *)__p[0];
  v5 = sub_1001A48D8(v4);
  if (v7 < 0)
    operator delete(__p[0]);
  objc_msgSend((id)qword_10230E2E0, "setSoftwareVersion:", v5);
  CFRelease(v5);
}

void sub_1013196D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_101319E7C(unsigned int a1)
{
  unsigned int v1;

  if (a1 >= 0xF)
    v1 = 15;
  else
    v1 = a1;
  return dbl_101C4B2D8[v1];
}

double sub_101319E98(unsigned int a1)
{
  unsigned int v1;

  if (a1 >= 0xF)
    v1 = 15;
  else
    v1 = a1;
  return dbl_101C4B358[v1];
}

void sub_101319EB4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10028E224(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_101319F54(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1021AEDC8;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 30) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 64), "clhrseavl.avl");
  *(_BYTE *)(a1 + 88) = 0;
  sub_10055D44C(a1 + 96, "clhrse", 1, 1);
  sub_100602438(a1 + 112, a2, (uint64_t)sub_10131A230, a1);
}

void sub_10131A168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v10;

  if (*(char *)(v2 + 799) < 0)
    operator delete(*v8);
  sub_10131AF84(v7);
  if (*(char *)(v2 + 439) < 0)
    operator delete(*v6);
  if (*(char *)(v2 + 415) < 0)
    operator delete(*v5);
  v10 = *(_QWORD *)(v2 + 368);
  *(_QWORD *)(v2 + 368) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_100602508(v4);
  sub_10055D4D0(v3);
  sub_100FB12B4(v1);
  _Unwind_Resume(a1);
}

void sub_10131A230(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 360), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AEDE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEDE8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1013201C8(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10131A3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10131A408(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHighResolutionSignalEnvironmentDataManager::onManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 360), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AEDE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHighResolutionSignalEnvironmentDataManager::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AEDE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHighResolutionSignalEnvironmentDataManager::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101322814(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10131A5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10131A5E0(uint64_t a1, _QWORD *a2)
{
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  std::string *v9;
  std::string *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  std::string *v14;
  void **v15;
  std::string::size_type v16;
  char *v17;
  void **v18;
  std::string::size_type v19;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  double *v23;
  std::string *v24;
  std::string *v25;
  NSObject *v26;
  NSObject *v27;
  std::string *v28;
  std::string *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  std::string *v34;
  const char *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  double v39[2];
  std::string v40;
  std::string v41;
  void *__p[2];
  uint64_t v43;
  _BYTE v44[12];
  __int16 v45;
  std::string *v46;
  __int16 v47;
  uint64_t v48;
  _BYTE buf[22];
  __int16 v50;
  uint64_t v51;

  if (*(char *)(a1 + 439) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 416), *(_QWORD *)(a1 + 424));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 416);
    v43 = *(_QWORD *)(a1 + 432);
  }
  sub_100FBF2C0(&v41);
  sub_1001E4804(buf);
  v4 = sub_1000BCB64(*(uint64_t *)buf, "HrseTilesServerUrl", &v41);
  v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v9 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "HRSE, server, %{public}s, overridden, 1", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v10 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)&v44[4] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE, server, %{public}s, overridden, 1", v44, 12);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v11);
LABEL_93:
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v14 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRSE, server, %{public}s, overridden, 0", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v34 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)&v44[4] = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE, server, %{public}s, overridden, 0", v44, 12);
      v12 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v35);
      goto LABEL_93;
    }
  }
  std::string::append(&v41, "/");
  if (v43 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v43 >= 0)
    v16 = HIBYTE(v43);
  else
    v16 = (std::string::size_type)__p[1];
  std::string::append(&v41, (const std::string::value_type *)v15, v16);
  v17 = (char *)sub_1001FD94C();
  sub_1000B7884(v17, (uint64_t)&v40);
  if (v43 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v43 >= 0)
    v19 = HIBYTE(v43);
  else
    v19 = (std::string::size_type)__p[1];
  std::string::append(&v40, (const std::string::value_type *)v18, v19);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v20 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v21 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v41.__r_.__value_.__r.__words[0];
    v22 = &v40;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v22;
    v50 = 2050;
    v51 = 0x40AC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "HRSE,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v28 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
    v29 = &v40;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    *(_DWORD *)v44 = 136446722;
    *(_QWORD *)&v44[4] = v28;
    v45 = 2082;
    v46 = v29;
    v47 = 2050;
    v48 = 0x40AC200000000000;
    LODWORD(v38) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", v44, v38);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  *(_QWORD *)(a1 + 808) = *a2;
  *(_QWORD *)v44 = 0x404E000000000000;
  v23 = (double *)(a1 + 112);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v41;
  else
    v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v40;
  else
    v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if (sub_100604D40((uint64_t)v23, (const std::string::value_type *)v24, (const std::string::value_type *)v25, (double *)v44))
  {
    *(_QWORD *)buf = sub_10132232C();
    v39[0] = sub_101321E44();
    if ((sub_10060538C((uint64_t)v23, (double *)buf, v39) & 1) != 0)
    {
      *(double *)buf = *(double *)a2 + 3600.0 + -0.5;
      sub_100605798(v23, (double *)buf);
      goto LABEL_69;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#Warning,HRSE,downloadAvailabilityFile,could not setUpdateSource AVL file updater", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      LOWORD(v39[0]) = 0;
      LODWORD(v38) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,HRSE,downloadAvailabilityFile,could not setUpdateSource AVL file updater", v39, v38);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v27 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#Warning,HRSE,downloadAvailabilityFile,could not setUpdateRate AVl file updater", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(v39[0]) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,HRSE,downloadAvailabilityFile,could not setUpdateRate AVl file updater", v39, v38);
    v33 = (char *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
LABEL_69:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
}

void sub_10131AEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10131AF84(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10131AFC8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021AEDC8;

  *(_QWORD *)(a1 + 384) = 0;
  sub_10131B0AC(a1);
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  if (*(char *)(a1 + 767) < 0)
    operator delete(*(void **)(a1 + 744));
  v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(_QWORD *)(a1 + 704) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  v3 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100602508(a1 + 112);
  sub_10055D4D0(a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  sub_1000F34E0((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10131B0AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 96;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 96) + 16))(a1 + 96);
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 584) = 0u;
  *(_QWORD *)(v2 + 608) = *(_QWORD *)(v2 + 600);
  *(_QWORD *)(v2 + 624) = 0;
  *(_QWORD *)(v2 + 640) = 0;
  *(_QWORD *)(v2 + 632) = 0;
  if (*(char *)(v2 + 671) < 0)
  {
    **(_BYTE **)(a1 + 744) = 0;
    *(_QWORD *)(a1 + 752) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 744) = 0;
    *(_BYTE *)(a1 + 767) = 0;
  }
  *(_BYTE *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  if (*(char *)(a1 + 799) < 0)
  {
    **(_BYTE **)(a1 + 776) = 0;
    *(_QWORD *)(a1 + 784) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 776) = 0;
    *(_BYTE *)(a1 + 799) = 0;
  }
  sub_100605848(a1 + 112);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_10131B18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10131B1A4(uint64_t a1)
{
  sub_10131AFC8(a1);
  operator delete();
}

uint64_t sub_10131B1C8(double *a1, long double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t result;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  NSObject *v11;
  double v12;
  _BOOL4 v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  uint8_t buf[4];
  _QWORD v19[204];

  v4 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v8 = (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v9 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(_DWORD *)buf = 67109376;
      LODWORD(v19[0]) = v8;
      WORD2(v19[0]) = 1024;
      *(_DWORD *)((char *)v19 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Error,HRSE,is latitude finite,%d,is longitude finite,%d", buf, 0xEu);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,is latitude finite,%d,is longitude finite,%d", &v17);
      goto LABEL_23;
    }
  }
  else
  {
    if (v4 >= -90.0 && v4 <= 90.0)
    {
      sub_100080DCC(*a2);
      *(_QWORD *)a2 = v5;
      return 1;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v12 = *a1;
      *(_DWORD *)buf = 134283521;
      *(double *)v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Error,HRSE,latitude is beyond the valid range,lat,%{private}.7lf", buf, 0xCu);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v14 = *a1;
      LODWORD(v17) = 134283521;
      *(double *)((char *)&v17 + 4) = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,latitude is beyond the valid range,lat,%{private}.7lf", &v17, 12, v17);
LABEL_23:
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::isLatLonValid(const double &, double &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10131B53C(uint64_t a1, double a2, double a3)
{
  float v5;
  NSObject *v6;
  uint8_t *v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  double v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  double v19;
  double v20;
  NSObject *v21;
  double v22;
  double v23;
  unsigned int v24;
  double v25;
  NSObject *v26;
  double v27;
  double v28;
  int v29;
  double v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  NSObject *v42;
  NSObject *v43;
  uint8_t *v44;
  double v45;
  NSObject *v46;
  NSObject *v47;
  const char *v48;
  uint8_t *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  double v54;
  double v55;
  int v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;
  uint8_t buf[4];
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  unsigned int v87;

  v54 = a3;
  v55 = a2;
  if (!*(_BYTE *)(a1 + 264))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,invalid tile", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(v56) = 0;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,invalid tile", &v56, 2);
    goto LABEL_103;
  }
  if ((sub_10131B1C8(&v55, &v54) & 1) != 0)
  {
    v5 = *(float *)(a1 + 56);
    if (v5 == 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,cellsize is zero", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      LOWORD(v56) = 0;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,cellsize is zero", &v56, 2);
      goto LABEL_103;
    }
    v13 = *(double *)(a1 + 48);
    if (v13 > a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v15 = *(double *)(a1 + 48);
        *(_DWORD *)buf = 134283777;
        v73 = a2;
        v74 = 2049;
        v75 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v16 = *(double *)(a1 + 48);
      v56 = 134283777;
      v57 = a2;
      v58 = 2049;
      v59 = v16;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", &v56, 22);
      goto LABEL_103;
    }
    v17 = v13 + (float)(v5 * (float)*(unsigned int *)(a1 + 32));
    if (v17 < a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v73 = a2;
        v74 = 2049;
        v75 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v56 = 134283777;
      v57 = a2;
      v58 = 2049;
      v59 = v17;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", &v56, 22);
      goto LABEL_103;
    }
    v19 = v54;
    v20 = *(double *)(a1 + 40);
    if (v54 < v20)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v21 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v22 = *(double *)(a1 + 40);
        *(_DWORD *)buf = 134283777;
        v73 = v19;
        v74 = 2049;
        v75 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v23 = *(double *)(a1 + 40);
      v56 = 134283777;
      v57 = v19;
      v58 = 2049;
      v59 = v23;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", &v56, 22);
      goto LABEL_103;
    }
    v24 = *(_DWORD *)(a1 + 36);
    v25 = v20 + (float)(v5 * (float)v24);
    if (v54 > v25)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v73 = v19;
        v74 = 2049;
        v75 = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v56 = 134283777;
      v57 = v19;
      v58 = 2049;
      v59 = v25;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", &v56, 22);
      goto LABEL_103;
    }
    v27 = v5;
    v28 = (v54 - v20) / v27;
    v29 = (int)(floor(v28) + 0.5);
    v30 = (a2 - v13) / v27;
    v31 = (int)(floor(v30) + 0.5);
    v32 = v29 + v24 * v31;
    if (v32 >= 0)
      v33 = v29 + v24 * v31;
    else
      v33 = v32 + 1;
    v34 = *(_QWORD *)(a1 + 192);
    v35 = *(_QWORD *)(a1 + 200);
    v36 = v35 - v34;
    if (v35 != v34)
    {
      v37 = (uint64_t)v33 >> 1;
      if (v36 > v37)
      {
        v38 = *(unsigned __int8 *)(v34 + v37);
        v39 = v38 & 0xF;
        v40 = v38 >> 4;
        if (v32 - (v33 & 0xFFFFFFFE) == 1)
          v41 = v39;
        else
          v41 = v40;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v42 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134285313;
          v73 = v28;
          v74 = 2049;
          v75 = v30;
          v76 = 1025;
          v77 = v29;
          v78 = 1025;
          v79 = v31;
          v80 = 1025;
          v81 = v32;
          v82 = 1025;
          v83 = v33 >> 1;
          v84 = 1025;
          v85 = v32 - (v33 & 0xFFFFFFFE);
          v86 = 1025;
          v87 = v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironmentForTile,X,%{private}.7lf,Y,%{private}.7lf,x1,%{private}d,y1,%{private}d,iNibble,%{private}d,iByte,%{private}d,iNibbleInByte,%{private}d,typeNibble,%{private}d", buf, 0x3Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v56 = 134285313;
          v57 = v28;
          v58 = 2049;
          v59 = v30;
          v60 = 1025;
          v61 = v29;
          v62 = 1025;
          v63 = v31;
          v64 = 1025;
          v65 = v32;
          v66 = 1025;
          v67 = v33 >> 1;
          v68 = 1025;
          v69 = v32 - (v33 & 0xFFFFFFFE);
          v70 = 1025;
          v71 = v41;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironmentForTile,X,%{private}.7lf,Y,%{private}.7lf,x1,%{private}d,y1,%{private}d,iNibble,%{private}d,iByte,%{private}d,iNibbleInByte,%{private}d,typeNibble,%{private}d", &v56, 58);
          v52 = (uint8_t *)v51;
          sub_100512490("Generic", 1, 0, 2, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n", v51);
          if (v52 != buf)
            free(v52);
        }
        if (v41 < 7 && ((0x5Fu >> v41) & 1) != 0)
        {
          v10 = dword_101C4B410[v41];
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v47 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67174657;
            LODWORD(v73) = v10;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironmentForTile,hrseType,%{private}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
            v56 = 67174657;
            LODWORD(v57) = v10;
            LODWORD(v53) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironmentForTile,hrseType,%{private}d", &v56, v53);
            v49 = (uint8_t *)v48;
            sub_100512490("Generic", 1, 0, 2, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n", v48);
            if (v49 != buf)
              free(v49);
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v43 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67174657;
            LODWORD(v73) = v41;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Error,HRSE,getSignalEnvironmentForTile,unexpected signal environment type detected: %{private}d", buf, 8u);
          }
          v10 = 0;
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
            v56 = 67174657;
            LODWORD(v57) = v41;
            LODWORD(v53) = 8;
            v45 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,getSignalEnvironmentForTile,unexpected signal environment type detected: %{private}d", &v56, v53);
LABEL_107:
            v50 = v44;
            sub_100512490("Generic", 1, 0, 0, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n", v45);
LABEL_108:
            if (v50 != buf)
              free(v50);
            return 0;
          }
        }
        return v10;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v46 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,invalid tile - unable to get data byte", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(v56) = 0;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,getSignalEnvironmentForTile,invalid tile - unable to get data byte", &v56, 2);
LABEL_103:
    v50 = v7;
    sub_100512490("Generic", 1, 0, 2, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n", v8);
    goto LABEL_108;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    v73 = a2;
    v74 = 2049;
    v75 = v54;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Error,HRSE,getSignalEnvironmentForTile,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
  }
  v10 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v56 = 134283777;
    v57 = a2;
    v58 = 2049;
    v59 = v54;
    v45 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,getSignalEnvironmentForTile,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", &v56, 22);
    goto LABEL_107;
  }
  return v10;
}

uint64_t sub_10131C31C(uint64_t a1, double a2, double a3)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  long double v13;
  unsigned int v14;
  float v15;
  double v16;
  unsigned int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v32;
  int v33;
  NSObject *v34;
  int v35;
  unsigned __int8 v36;
  double v37;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  const char *v46;
  int v47;
  const char *v48;
  char *v49;
  const char *v50;
  const char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  char *v56;
  const char *v57;
  char *v58;
  int v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  pthread_mutex_t *v65;
  __int16 v66;
  double v67;
  double v68;
  int v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  _BYTE v74[10];
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  _BYTE buf[22];
  __int16 v81;
  _BYTE v82[10];
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;

  v67 = a3;
  v68 = a2;
  v4 = *(_QWORD *)(a1 + 96);
  v64 = a1 + 96;
  (*(void (**)(void))(v4 + 16))();
  v66 = 256;
  sub_1001E4804(buf);
  v5 = (_BYTE *)(a1 + 825);
  v6 = sub_1001E4874(*(uint64_t *)buf, "ForceDownloadHrseTiles", (BOOL *)(a1 + 825));
  v7 = v6;
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_5;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    if (!v6)
      goto LABEL_11;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = *v5;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,fForceDownloadHrseTiles, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v47 = *v5;
    v69 = 67109120;
    LODWORD(v70) = v47;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironment,fForceDownloadHrseTiles, %d", &v69);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
LABEL_11:
  if ((sub_10131B1C8(&v68, &v67) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v28 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      *(double *)&buf[4] = v68;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v67;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#Error,HRSE,getSignalEnvironment,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_37;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v69 = 134283777;
    v70 = v68;
    v71 = 2049;
    v72 = v67;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,getSignalEnvironment,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", &v69, 22);
    v44 = (char *)v50;
    sub_100512490("Generic", 1, 0, 0, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v50);
    goto LABEL_95;
  }
  if (*(_BYTE *)(a1 + 768))
  {
    v13 = *(double *)(a1 + 544);
    v14 = *(_DWORD *)(a1 + 540);
    v15 = *(float *)(a1 + 560);
    v16 = *(double *)(a1 + 552);
    v17 = *(_DWORD *)(a1 + 536);
    sub_100080DCC(v13);
    v19 = v18;
    sub_100080DCC(v13 + (float)(v15 * (float)v14));
    v21 = v20;
    v22 = v16 + (float)(v15 * (float)v17);
    if (v68 >= v16 && v68 < v22 && v67 >= v19 && v67 < v20)
    {
      *(_DWORD *)(a1 + 816) = 0;
LABEL_18:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v23 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "HRSE,good to go!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        LOWORD(v69) = 0;
        LODWORD(v62) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,good to go!", &v69, v62);
        v56 = (char *)v55;
        sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      *(_BYTE *)(a1 + 440) = 0;
      v24 = sub_10131B53C(a1 + 504, v68, v67);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v25 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        *(double *)&buf[4] = v68;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v67;
        v81 = 1025;
        *(_DWORD *)v82 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "HRSE,lat,%{private}.7lf,lon,%{private}.7lf,hrse,%{private}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v69 = 134284033;
        v70 = v68;
        v71 = 2049;
        v72 = v67;
        v73 = 1025;
        *(_DWORD *)v74 = v24;
        LODWORD(v62) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,lat,%{private}.7lf,lon,%{private}.7lf,hrse,%{private}d", &v69, v62);
        v27 = (char *)v26;
        sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      goto LABEL_53;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v29 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284801;
      *(double *)&buf[4] = v68;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v67;
      v81 = 2049;
      *(double *)v82 = v16;
      *(_WORD *)&v82[8] = 2049;
      v83 = v22;
      v84 = 2049;
      v85 = v19;
      v86 = 2049;
      v87 = v21;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v69 = 134284801;
      v70 = v68;
      v71 = 2049;
      v72 = v67;
      v73 = 2049;
      *(double *)v74 = v16;
      *(_WORD *)&v74[8] = 2049;
      v75 = v22;
      v76 = 2049;
      v77 = v19;
      v78 = 2049;
      v79 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironment,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", &v69, 62);
      v54 = (char *)v53;
      sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
  }
  if (!sub_1001C09B0(a1 + 8, &v68, &v67) || *v5)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v30 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,tile not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      LOWORD(v69) = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironment,tile not available", &v69, v62);
      v52 = (char *)v51;
      sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    v24 = 0;
    *(_WORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    goto LABEL_53;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,need to load tile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(v69) = 0;
    LODWORD(v62) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironment,need to load tile", &v69, v62);
    v58 = (char *)v57;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v57);
    if (v58 != buf)
      free(v58);
  }
  v33 = *(_DWORD *)(a1 + 816);
  if ((v33 & 7) == 0)
  {
    *(_DWORD *)(a1 + 816) = v33 + 1;
    v63 = 0;
    v36 = sub_10131D354(a1, (_BYTE *)&v63 + 1, &v63, v68, v67);
    if (HIBYTE(v63))
    {
      *(_BYTE *)(a1 + 440) = 1;
      *(_BYTE *)(a1 + 441) = v63;
      v37 = v67;
      *(double *)(a1 + 448) = v68;
      *(double *)(a1 + 456) = v37;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v38 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v39 = *(unsigned __int8 *)(a1 + 440);
        v40 = *(unsigned __int8 *)(a1 + 441);
        *(_DWORD *)buf = 134284289;
        *(double *)&buf[4] = v68;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v67;
        v81 = 1026;
        *(_DWORD *)v82 = v39;
        *(_WORD *)&v82[4] = 1026;
        *(_DWORD *)&v82[6] = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,tile download needed,lat,%{private}.7lf,lon,%{private}.7lf,is file needed,%{public}d,is bad tile,%{public}d", buf, 0x22u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_37;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v41 = *(unsigned __int8 *)(a1 + 440);
      v42 = *(unsigned __int8 *)(a1 + 441);
      v69 = 134284289;
      v70 = v68;
      v71 = 2049;
      v72 = v67;
      v73 = 1026;
      *(_DWORD *)v74 = v41;
      *(_WORD *)&v74[4] = 1026;
      *(_DWORD *)&v74[6] = v42;
      LODWORD(v62) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironment,tile download needed,lat,%{private}.7lf,lon,%{private}.7lf,is file needed,%{public}d,is bad tile,%{public}d", &v69, v62);
      v44 = (char *)v43;
      sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v43);
    }
    else
    {
      if ((v36 & 1) != 0)
        goto LABEL_18;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v45 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "HRSE,Tile not loaded yet", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_37:
        v24 = 0;
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      LOWORD(v69) = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,Tile not loaded yet", &v69, v62);
      v44 = (char *)v46;
      sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v46);
    }
LABEL_95:
    if (v44 != buf)
      free(v44);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v34 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(_DWORD *)(a1 + 816);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,skipping loadTile query,skipCount,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v59 = *(_DWORD *)(a1 + 816);
    v69 = 67240192;
    LODWORD(v70) = v59;
    LODWORD(v62) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,getSignalEnvironment,skipping loadTile query,skipCount,%{public}d", &v69, v62);
    v61 = (char *)v60;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v60);
    if (v61 != buf)
      free(v61);
  }
  v24 = 0;
  ++*(_DWORD *)(a1 + 816);
LABEL_53:
  if (HIBYTE(v66))
  {
    if ((_BYTE)v66)
      pthread_mutex_unlock(v65);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  }
  return v24;
}

void sub_10131D2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10131D354(uint64_t a1, _BYTE *a2, _BYTE *a3, double a4, double a5)
{
  NSObject *v10;
  double v11;
  id v12;
  NSObject *v13;
  double v14;
  std::string *p_p;
  _BOOL8 v16;
  char v17;
  id v18;
  std::string *v19;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  const char *v23;
  std::string *v24;
  NSObject *v25;
  std::string *v26;
  const char *v28;
  std::string *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  std::string *v33;
  std::string *data;
  const char *v35;
  std::string *v36;
  uint64_t v37;
  std::string __p;
  int v39;
  double v40;
  __int16 v41;
  double v42;
  std::string buf[68];

  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  *a3 = 0;
  HIWORD(v37) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283777;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = a4;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "HRSE,loadTile,lat,%{private}.7lf,lon,%{private}.7lf", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v39 = 134283777;
    v40 = a4;
    v41 = 2049;
    v42 = a5;
    LODWORD(v37) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,loadTile,lat,%{private}.7lf,lon,%{private}.7lf", &v39, v37, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    v29 = (std::string *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  v11 = sub_1001FCBB4();
  v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 360), "vendor"), "proxyForService:", CFSTR("CLTilesManager")), "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:", 2, (char *)&v37 + 7, (char *)&v37 + 6, a4, a5);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = sub_1001FCBB4();
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v14 - v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRSE,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v30 = qword_1022A0078;
    v31 = sub_1001FCBB4();
    v39 = 134349056;
    v40 = v31 - v11;
    LODWORD(v37) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "HRSE,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf", &v39, v37);
    v33 = (std::string *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  if (!v12)
    goto LABEL_47;
  sub_1015A2E04(buf, (char *)objc_msgSend(v12, "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = buf[0];
  if (!HIBYTE(v37))
  {
LABEL_46:
    v12 = 0;
LABEL_47:
    *a2 = 1;
    goto LABEL_48;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!sub_1000B78B0((const char *)p_p))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v26 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning,HRSE,loadTile,unexpected case,this tile should be on disk,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      *(double *)&data = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        data = (std::string *)__p.__r_.__value_.__l.__data_;
      v39 = 136446210;
      v40 = *(double *)&data;
      LODWORD(v37) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,loadTile,unexpected case,this tile should be on disk,%{public}s", &v39, v37);
      v36 = (std::string *)v35;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    goto LABEL_46;
  }
  BYTE5(v37) = 0;
  v16 = sub_10131DAF0(a1 + 504, &__p, (char *)&v37 + 5);
  v12 = (id)v16;
  if (BYTE5(v37))
    v17 = v16;
  else
    v17 = 1;
  if ((v17 & 1) == 0)
  {
    v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 360), "vendor"), "proxyForService:", CFSTR("CLTilesManager"));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__p;
    else
      v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(v18, "syncgetDeleteTileFile:atPath:", 2, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
    *a2 = 1;
    *a3 = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v21 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error,HRSE,loadTile,remove the corrupted tile from disk,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      *(double *)&v22 = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)__p.__r_.__value_.__l.__data_;
      v39 = 136446210;
      v40 = *(double *)&v22;
      LODWORD(v37) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,loadTile,remove the corrupted tile from disk,%{public}s", &v39, v37);
      v24 = (std::string *)v23;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
LABEL_48:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_10131DAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10131DAF0(uint64_t a1, const std::string *a2, char *a3)
{
  const std::string *v4;
  unint64_t *v6;
  _QWORD *v7;
  const char *v8;
  FILE *v9;
  FILE *v10;
  uint64_t v11;
  NSObject *v12;
  const std::string *v13;
  int v14;
  _BOOL8 result;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  const std::string *v22;
  const std::string *v23;
  const char *v24;
  NSObject *v25;
  const std::string *v26;
  uint64_t v27;
  const std::string *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  NSObject *v34;
  const std::string *v35;
  NSObject *v36;
  const std::string *v37;
  const std::string *v38;
  const char *v39;
  NSObject *v40;
  const std::string *v41;
  const std::string *v42;
  const char *v43;
  NSObject *v44;
  const std::string *v45;
  const std::string *v46;
  const char *v47;
  const char *v48;
  NSObject *v49;
  const std::string *v50;
  NSObject *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  NSObject *v56;
  const std::string *v57;
  const std::string *v58;
  const char *v59;
  NSObject *v60;
  const char *v61;
  NSObject *v62;
  int v63;
  const std::string *v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  uint8_t *v68;
  int v69;
  const char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  _BYTE v75[10];
  int v76;
  uint8_t buf[4];
  _BYTE v78[10];
  int v79;

  v4 = a2;
  v72 = 0;
  v73 = 0;
  HIDWORD(v71) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v6 = (unint64_t *)(a1 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 216) = 0;
  v7 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  if (*(char *)(a1 + 263) < 0)
  {
    **(_BYTE **)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 263) = 0;
  }
  *(_BYTE *)(a1 + 264) = 0;
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (const char *)a2;
  else
    v8 = (const char *)a2->__r_.__value_.__r.__words[0];
  v9 = fopen(v8, "rb");
  if (!v9)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = v4;
      else
        v13 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      v14 = *__error();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v78 = v13;
      *(_WORD *)&v78[8] = 1026;
      v79 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,unable to load file,file path, %{public}s,errno, %{public}d", buf, 0x12u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v16 = qword_1022A0078;
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      v17 = *__error();
      v74 = 136446466;
      *(_QWORD *)v75 = v4;
      *(_WORD *)&v75[8] = 1026;
      v76 = v17;
      LODWORD(v71) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 16, "#Error,HRSE,readCLHRSETile,unable to load file,file path, %{public}s,errno, %{public}d", &v74, v71);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v18);
      if (v19 == buf)
        return 0;
      goto LABEL_189;
    }
    return result;
  }
  v10 = v9;
  v11 = ftell(v9);
  if (!sub_10131F338((_BOOL8)v10, a1, &v72, &v73))
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = v4;
      else
        v22 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,unable to read file header,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = v4;
    else
      v23 = (const std::string *)v4->__r_.__value_.__r.__words[0];
    v74 = 136446210;
    *(_QWORD *)v75 = v23;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,unable to read file header,file path, %{public}s", &v74, v71);
    v19 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v24);
LABEL_188:
    if (v19 == buf)
      return 0;
LABEL_189:
    free(v19);
    return 0;
  }
  if (fseek(v10, 0, 2))
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = v4;
      else
        v26 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,fseek returned non-zero,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v27 = qword_1022A0078;
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = v4;
      else
        v28 = (const std::string *)v4->__r_.__value_.__r.__words[0];
LABEL_60:
      v74 = 136446210;
      *(_QWORD *)v75 = v28;
      LODWORD(v71) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 16, "#Error,HRSE,readCLHRSETile,fseek returned non-zero,file path, %{public}s", &v74, v71);
      v19 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v29);
      goto LABEL_188;
    }
    return result;
  }
  v20 = ftell(v10) - v11;
  if (!v20)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v36 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = v4;
      else
        v37 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,zero file size,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = v4;
    else
      v38 = (const std::string *)v4->__r_.__value_.__r.__words[0];
    v74 = 136446210;
    *(_QWORD *)v75 = v38;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,zero file size,file path, %{public}s", &v74, v71);
    v19 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v39);
    goto LABEL_188;
  }
  v30 = (*(_DWORD *)(a1 + 72) + *(_DWORD *)(a1 + 12));
  v31 = v73;
  if (v20 != v73 + v30)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v40 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = v4;
      else
        v41 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,invalid file size,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = v4;
    else
      v42 = (const std::string *)v4->__r_.__value_.__r.__words[0];
    v74 = 136446210;
    *(_QWORD *)v75 = v42;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,invalid file size,file path, %{public}s", &v74, v71);
    v19 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v43);
    goto LABEL_188;
  }
  if (*(_WORD *)(a1 + 16))
    v32 = 0;
  else
    v32 = *(unsigned __int16 *)(a1 + 8) == 1;
  v33 = v32;
  *a3 = v33;
  if (!v32)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v44 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = v4;
      else
        v45 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,file format not supported,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = v4;
    else
      v46 = (const std::string *)v4->__r_.__value_.__r.__words[0];
    v74 = 136446210;
    *(_QWORD *)v75 = v46;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,file format not supported,file path, %{public}s", &v74, v71);
    v19 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v47);
    goto LABEL_188;
  }
  if (v30 >= 0x1401)
  {
    fclose(v10);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v34 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = v4;
      else
        v35 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,tile is larger than the allowed maximum,file path, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = v4;
      else
        v64 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      v74 = 136446210;
      *(_QWORD *)v75 = v64;
      LODWORD(v71) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,tile is larger than the allowed maximum,file path, %{public}s", &v74, v71);
      v66 = (uint8_t *)v65;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v65);
      if (v66 != buf)
        free(v66);
    }
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    result = 0;
    *(_BYTE *)(a1 + 264) = 0;
    return result;
  }
  if (fseek(v10, 0, 0))
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v49 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = v4;
      else
        v50 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,fseek returned non-zero,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v27 = qword_1022A0078;
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = v4;
      else
        v28 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      goto LABEL_60;
    }
    return result;
  }
  if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = (const char *)v4;
  else
    v48 = (const char *)v4->__r_.__value_.__r.__words[0];
  if (sub_1005169DC(v48, 3))
    operator new[]();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v51 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,CLCommonSetFileProtectionClass failed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(v74) = 0;
    LODWORD(v71) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,CLCommonSetFileProtectionClass failed", &v74, v71);
    v68 = (uint8_t *)v67;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v67);
    if (v68 != buf)
      free(v68);
  }
  if (!*(_QWORD *)(a1 + 224) || !*v7 || *v7 != v20)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v56 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = v4;
      else
        v57 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v78 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,failed to read tile,file path, %{public}s", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = v4;
    else
      v58 = (const std::string *)v4->__r_.__value_.__r.__words[0];
    v74 = 136446210;
    *(_QWORD *)v75 = v58;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,failed to read tile,file path, %{public}s", &v74, v71);
    v19 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v59);
    goto LABEL_188;
  }
  fclose(v10);
  if ((sub_10131F144(*(_QWORD *)(a1 + 224) + v31, (*(_DWORD *)(a1 + 72) + *(_DWORD *)(a1 + 12)), v72, (_DWORD *)&v71 + 1) & 1) == 0)
  {
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(_BYTE **)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 263) = 0;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v60 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "#Warning,HRSE,readCLHRSETile,calculateCLHRSE_CRC returned false unexpectedly", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(v74) = 0;
    LODWORD(v71) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,readCLHRSETile,calculateCLHRSE_CRC returned false unexpectedly", &v74, v71);
    v19 = (uint8_t *)v61;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v61);
    goto LABEL_188;
  }
  v52 = HIDWORD(v71);
  if (HIDWORD(v71) == *(_DWORD *)(a1 + 68))
  {
    v53 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v53)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224) + v31 + *(unsigned int *)(a1 + 12);
      sub_1013201A0(v6, v53);
      v54 = *(_QWORD *)(a1 + 192);
      if (*(_QWORD *)(a1 + 200) != v54)
      {
        v55 = 0;
        do
        {
          *(_BYTE *)(v54 + v55) = *(_BYTE *)(*(_QWORD *)(a1 + 232) + v55);
          ++v55;
          v54 = *(_QWORD *)(a1 + 192);
        }
        while (v55 < *(_QWORD *)(a1 + 200) - v54);
      }
    }
    *(_BYTE *)(a1 + 264) = 1;
    std::string::operator=((std::string *)(a1 + 240), v4);
    if (*(_QWORD *)(a1 + 224))
      operator delete[]();
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    return 1;
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  if (*(char *)(a1 + 263) < 0)
  {
    **(_BYTE **)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 263) = 0;
  }
  *(_BYTE *)(a1 + 264) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v62 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v63 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v78 = v52;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v63;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,invalid CLHRSE,crc fail,calculated,%X,received,%X", buf, 0xEu);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v69 = *(_DWORD *)(a1 + 68);
    v74 = 67109376;
    *(_DWORD *)v75 = v52;
    *(_WORD *)&v75[4] = 1024;
    *(_DWORD *)&v75[6] = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETile,invalid CLHRSE,crc fail,calculated,%X,received,%X", &v74, 14);
    v19 = (uint8_t *)v70;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v70);
    goto LABEL_188;
  }
  return result;
}

uint64_t sub_10131F144(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  unint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (result)
  {
    v5 = a2 - 4;
    if (a2 - 4 <= a3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        v15 = a3;
        v16 = 2050;
        v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Error,HRSE,calculateCLHRSE_CRC,indexCrcInBuffer,%{public}zu,exceeds (bufferSize-4) bytes,%{public}zu", buf, 0x16u);
      }
      v7 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v10 = 134349312;
        v11 = a3;
        v12 = 2050;
        v13 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,calculateCLHRSE_CRC,indexCrcInBuffer,%{public}zu,exceeds (bufferSize-4) bytes,%{public}zu", &v10, 22);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::calculateCLHRSE_CRC(unsigned char *, const size_t, const size_t, unsigned int &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
        return 0;
      }
    }
    else
    {
      *a4 = sub_100CF9178(result, a2, a3);
      return 1;
    }
  }
  return result;
}

BOOL sub_10131F338(_BOOL8 result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  FILE *v7;
  NSObject *v8;
  _BOOL4 v9;
  uint8_t *v10;
  double v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  int v18;
  unsigned int v19;
  size_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  NSObject *v40;
  NSObject *v41;
  _BOOL4 v42;
  NSObject *v43;
  _BOOL4 v44;
  NSObject *v45;
  int v46;
  _BOOL4 v47;
  int v48;
  NSObject *v49;
  int v50;
  _BOOL4 v51;
  int v52;
  NSObject *v53;
  _BOOL4 v54;
  NSObject *v55;
  double v56;
  uint8_t *v57;
  NSObject *v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  const char *v74;
  uint8_t *v75;
  char __ptr;
  int v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  uint8_t buf[4];
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  uint64_t v133;
  unsigned __int16 v134;
  unsigned int v135;
  unsigned __int16 v136;
  unsigned int v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;

  if (result)
  {
    v7 = (FILE *)result;
    if (!feof((FILE *)result))
    {
      v13 = 0;
      while (1)
      {
        __ptr = 0;
        if (fread(&__ptr, 1uLL, 1uLL, v7) != 1)
          return 0;
        v14 = ftell(v7);
        if (__ptr == 67)
        {
          v15 = v14;
          LOBYTE(v133) = 67;
          if (fread((char *)&v133 + 1, 1uLL, 5uLL, v7) != 5)
            return 0;
          *(_DWORD *)a2 = v133;
          *(_WORD *)(a2 + 4) = WORD2(v133);
          v16.i32[0] = *(_DWORD *)a2;
          if (vmovn_s16((int16x8_t)vmovl_u8(v16)).u32[0] == 1380469827
            && *(_BYTE *)(a2 + 4) == 83
            && *(_BYTE *)(a2 + 5) == 69)
          {
            *a4 = v13;
            if (fread((char *)&v133 + 6, 1uLL, 2uLL, v7) == 2)
            {
              *(_QWORD *)a2 = v133;
              if (fread(&v134, 1uLL, 6uLL, v7) == 6)
              {
                v18 = v134;
                *(_WORD *)(a2 + 8) = __rev16(v134);
                if (v18 == 256)
                {
                  v19 = v135;
                  *(_DWORD *)(a2 + 12) = bswap32(v135);
                  if (v19 == -1207959552)
                  {
                    v20 = fread(&v136, 1uLL, 0xAAuLL, v7);
                    v21 = *(unsigned int *)(a2 + 12);
                    if (v20 == v21 - 14)
                    {
                      *(_WORD *)(a2 + 16) = bswap32(v136) >> 16;
                      *(_DWORD *)(a2 + 20) = bswap32(v137);
                      *(_QWORD *)(a2 + 24) = bswap64(v138);
                      v22 = bswap32(v139);
                      *(_DWORD *)(a2 + 32) = v22;
                      v23 = bswap32(v140);
                      *(_DWORD *)(a2 + 36) = v23;
                      *(_QWORD *)(a2 + 40) = bswap64(v141);
                      *(_QWORD *)(a2 + 48) = bswap64(v142);
                      *(_DWORD *)(a2 + 56) = bswap32(v143);
                      *(_DWORD *)(a2 + 60) = bswap32(v144);
                      *(_DWORD *)(a2 + 64) = bswap32(v145);
                      *a3 = 64;
                      *(_DWORD *)(a2 + 68) = bswap32(v146);
                      v24 = bswap32(v147);
                      *(_DWORD *)(a2 + 72) = v24;
                      *(_OWORD *)(a2 + 108) = v150;
                      *(_OWORD *)(a2 + 92) = v149;
                      *(_OWORD *)(a2 + 76) = v148;
                      *(_OWORD *)(a2 + 172) = v154;
                      *(_OWORD *)(a2 + 156) = v153;
                      *(_OWORD *)(a2 + 140) = v152;
                      *(_OWORD *)(a2 + 124) = v151;
                      if (v24 == (v23 * v22) >> 1)
                      {
                        if ((_DWORD)v21 == 184)
                        {
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                          v25 = qword_1022A0078;
                          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                          {
                            v26 = *(unsigned __int16 *)(a2 + 8);
                            v27 = *(_DWORD *)(a2 + 12);
                            v28 = *(unsigned __int16 *)(a2 + 16);
                            v29 = *(_DWORD *)(a2 + 20);
                            v30 = *(_QWORD *)(a2 + 24);
                            v31 = *(_DWORD *)(a2 + 32);
                            v32 = *(_DWORD *)(a2 + 36);
                            v34 = *(_DWORD *)(a2 + 68);
                            v33 = *(_DWORD *)(a2 + 72);
                            v36 = *(_QWORD *)(a2 + 40);
                            v35 = *(_QWORD *)(a2 + 48);
                            v37 = *(float *)(a2 + 56);
                            v38 = *(float *)(a2 + 60);
                            v39 = *(float *)(a2 + 64);
                            *(_DWORD *)buf = 67177985;
                            v106 = v26;
                            v107 = 1025;
                            v108 = v27;
                            v109 = 1025;
                            v110 = v28;
                            v111 = 1025;
                            v112 = v29;
                            v113 = 2049;
                            v114 = v30;
                            v115 = 1025;
                            v116 = v31;
                            v117 = 1025;
                            v118 = v32;
                            v119 = 1025;
                            v120 = v33;
                            v121 = 1025;
                            v122 = v34;
                            v123 = 2049;
                            v124 = v36;
                            v125 = 2049;
                            v126 = v35;
                            v127 = 2049;
                            v128 = v37;
                            v129 = 2049;
                            v130 = v38;
                            v131 = 2049;
                            v132 = v39;
                            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "HRSE,readCLHRSETileHeader,vers,%{private}d,headerLen,%{private}d,compressionType,%{private}d,expirationAge,%{private}d,timestamp,%{private}.1f,nrows,%{private}d,ncols,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d,xllcorner,%{private}.7lf,yllcorner,%{private}.7lf,cellsize,%{private}.7f,buildingMedianHeight,%{private}.7f,buildingMaximumHeight,%{private}.7f", buf, 0x6Eu);
                          }
                          if (sub_1001BFF7C(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A0070 != -1)
                              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                            v60 = *(unsigned __int16 *)(a2 + 8);
                            v61 = *(_DWORD *)(a2 + 12);
                            v62 = *(unsigned __int16 *)(a2 + 16);
                            v63 = *(_DWORD *)(a2 + 20);
                            v64 = *(_QWORD *)(a2 + 24);
                            v65 = *(_DWORD *)(a2 + 32);
                            v66 = *(_DWORD *)(a2 + 36);
                            v68 = *(_DWORD *)(a2 + 68);
                            v67 = *(_DWORD *)(a2 + 72);
                            v70 = *(_QWORD *)(a2 + 40);
                            v69 = *(_QWORD *)(a2 + 48);
                            v71 = *(float *)(a2 + 56);
                            v72 = *(float *)(a2 + 60);
                            v73 = *(float *)(a2 + 64);
                            v77 = 67177985;
                            v78 = v60;
                            v79 = 1025;
                            v80 = v61;
                            v81 = 1025;
                            v82 = v62;
                            v83 = 1025;
                            v84 = v63;
                            v85 = 2049;
                            v86 = v64;
                            v87 = 1025;
                            v88 = v65;
                            v89 = 1025;
                            v90 = v66;
                            v91 = 1025;
                            v92 = v67;
                            v93 = 1025;
                            v94 = v68;
                            v95 = 2049;
                            v96 = v70;
                            v97 = 2049;
                            v98 = v69;
                            v99 = 2049;
                            v100 = v71;
                            v101 = 2049;
                            v102 = v72;
                            v103 = 2049;
                            v104 = v73;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,readCLHRSETileHeader,vers,%{private}d,headerLen,%{private}d,compressionType,%{private}d,expirationAge,%{private}d,timestamp,%{private}.1f,nrows,%{private}d,ncols,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d,xllcorner,%{private}.7lf,yllcorner,%{private}.7lf,cellsize,%{private}.7f,buildingMedianHeight,%{private}.7f,buildingMaximumHeight,%{private}.7f", &v77, 110);
                            v75 = (uint8_t *)v74;
                            sub_100512490("Generic", 1, 0, 2, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETileHeader(FILE *, CLHRSETileHeader &, size_t &, size_t &)", "%s\n", v74);
                            if (v75 != buf)
                              free(v75);
                          }
                          return 1;
                        }
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                        v58 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - incorrect headerLength", buf, 2u);
                        }
                        v59 = sub_1001BFF7C(115, 0);
                        result = 0;
                        if (v59)
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                          LOWORD(v77) = 0;
                          v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - incorrect headerLength", &v77, 2);
                          goto LABEL_11;
                        }
                      }
                      else
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                        v55 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "#Warning,HRSE,readCLHRSETileHeader,header.dataSizeBytes != header.nrows * header.ncols", buf, 2u);
                        }
                        result = sub_1001BFF7C(115, 2);
                        if (result)
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                          LOWORD(v77) = 0;
                          v56 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,readCLHRSETileHeader,header.dataSizeBytes != header.nrows * header.ncols", &v77, 2);
                          v12 = v57;
                          sub_100512490("Generic", 1, 0, 2, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETileHeader(FILE *, CLHRSETileHeader &, size_t &, size_t &)", "%s\n", v56);
                          goto LABEL_12;
                        }
                      }
                    }
                    else
                    {
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                      v53 = qword_1022A0078;
                      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - rest of header", buf, 2u);
                      }
                      v54 = sub_1001BFF7C(115, 0);
                      result = 0;
                      if (v54)
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                        LOWORD(v77) = 0;
                        v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - rest of header", &v77, 2);
                        goto LABEL_11;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                    v49 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                    {
                      v50 = *(_DWORD *)(a2 + 12);
                      *(_DWORD *)buf = 67109376;
                      v106 = 184;
                      v107 = 1024;
                      v108 = v50;
                      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid header length - expected,%d,got,%d", buf, 0xEu);
                    }
                    v51 = sub_1001BFF7C(115, 0);
                    result = 0;
                    if (v51)
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                      v52 = *(_DWORD *)(a2 + 12);
                      v77 = 67109376;
                      v78 = 184;
                      v79 = 1024;
                      v80 = v52;
                      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,invalid header length - expected,%d,got,%d", &v77);
                      goto LABEL_11;
                    }
                  }
                }
                else
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                  v45 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                  {
                    v46 = *(unsigned __int16 *)(a2 + 8);
                    *(_DWORD *)buf = 67109376;
                    v106 = 1;
                    v107 = 1024;
                    v108 = v46;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid tile version - expected,%d,got,%d", buf, 0xEu);
                  }
                  v47 = sub_1001BFF7C(115, 0);
                  result = 0;
                  if (v47)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                    v48 = *(unsigned __int16 *)(a2 + 8);
                    v77 = 67109376;
                    v78 = 1;
                    v79 = 1024;
                    v80 = v48;
                    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,invalid tile version - expected,%d,got,%d", &v77);
                    goto LABEL_11;
                  }
                }
              }
              else
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                v43 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - version and headerLength", buf, 2u);
                }
                v44 = sub_1001BFF7C(115, 0);
                result = 0;
                if (v44)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                  LOWORD(v77) = 0;
                  v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - version and headerLength", &v77, 2);
                  goto LABEL_11;
                }
              }
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021AEE08);
              v41 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - header string", buf, 2u);
              }
              v42 = sub_1001BFF7C(115, 0);
              result = 0;
              if (v42)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                LOWORD(v77) = 0;
                v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - header string", &v77, 2);
                goto LABEL_11;
              }
            }
            return result;
          }
          if (fseek(v7, v15, 0))
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
            v40 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,fseek returned non-zero", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021AEE08);
              LOWORD(v77) = 0;
              v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,fseek returned non-zero", &v77, 2);
              goto LABEL_11;
            }
            return 0;
          }
        }
        if (!feof(v7) && v13++ < 0xFF)
          continue;
        break;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,did not synchronize to tile header_string", buf, 2u);
    }
    v9 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      LOWORD(v77) = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readCLHRSETileHeader,did not synchronize to tile header_string", &v77, 2);
LABEL_11:
      v12 = v10;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETileHeader(FILE *, CLHRSETileHeader &, size_t &, size_t &)", "%s\n", v11);
LABEL_12:
      if (v12 != buf)
        free(v12);
      return 0;
    }
  }
  return result;
}

void sub_1013201A0(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1005176A0(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_1013201C8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  void **v15;
  NSObject *v16;
  void **v17;
  char *v18;
  NSObject *v19;
  int v20;
  int v21;
  NSObject *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  NSObject *v30;
  const char *v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  char *v34;
  std::string *v35;
  NSObject *v36;
  void **v37;
  std::string *v38;
  std::string *v39;
  NSObject *v40;
  std::string *v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  const char *v46;
  char *v47;
  const char *v48;
  char *v49;
  const char *v50;
  char *v51;
  void **v52;
  const char *v53;
  char *v54;
  void **v55;
  std::string *v56;
  const char *v57;
  char *v58;
  const char *v59;
  char *v60;
  void **v61;
  const char *v62;
  char *v63;
  std::string *v64;
  const char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  std::string *v69;
  __int16 v70;
  std::string *v71;
  std::string v72;
  void *__p[2];
  char v74;
  _BYTE buf[1632];

  v6 = a1 + 96;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 96) + 16))(a1 + 96);
  if (a2)
  {
    switch(a3)
    {
      case 0:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HRSE,onAvlFileUpdated,avl download status,NONE", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "HRSE,onAvlFileUpdated,avl download status,NONE", __p, 2);
          v9 = (char *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
          break;
        }
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      case 1:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v29 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "HRSE,onAvlFileUpdated,avl download status,STARTED", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "HRSE,onAvlFileUpdated,avl download status,STARTED", __p, 2);
          v51 = (char *)v50;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      case 2:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "HRSE,onAvlFileUpdated,avl download status,COMPLETED", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "HRSE,onAvlFileUpdated,avl download status,COMPLETED", __p, 2);
          v47 = (char *)v46;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v46);
          if (v47 != buf)
            free(v47);
        }
        sub_100605D40(a2, (uint64_t)__p);
        *(_DWORD *)(a1 + 820) = 1;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v14 = __p;
          if (v74 < 0)
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRSE,onAvlFileUpdated,avl downloaded,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v52 = __p;
          if (v74 < 0)
            v52 = (void **)__p[0];
          LODWORD(v72.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          LODWORD(v67) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,onAvlFileUpdated,avl downloaded,%{public}s", &v72, v67);
          v54 = (char *)v53;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v53);
          if (v54 != buf)
            free(v54);
        }
        if (v74 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (!sub_1005169DC((const char *)v15, 4))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v16 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v17 = __p;
            if (v74 < 0)
              v17 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,HRSE,onAvlFileUpdated,Cannot set protection class for HRSE avl file,%{public}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
            v61 = __p;
            if (v74 < 0)
              v61 = (void **)__p[0];
            LODWORD(v72.__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
            LODWORD(v67) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,onAvlFileUpdated,Cannot set protection class for HRSE avl file,%{public}s", &v72, v67);
            v63 = (char *)v62;
            sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v62);
            if (v63 != buf)
              free(v63);
          }
        }
        v18 = (char *)sub_1001FD94C();
        sub_1000B7884(v18, (uint64_t)&v72);
        if (*(char *)(a1 + 415) < 0)
        {
          sub_100115CE4(buf, *(void **)(a1 + 392), *(_QWORD *)(a1 + 400));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 392);
          *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 408);
        }
        if (buf[23] >= 0)
          v32 = buf;
        else
          v32 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v33 = buf[23];
        else
          v33 = *(_QWORD *)&buf[8];
        std::string::append(&v72, v32, v33);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        if (v74 >= 0)
          v34 = (char *)__p;
        else
          v34 = (char *)__p[0];
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v72;
        else
          v35 = (std::string *)v72.__r_.__value_.__r.__words[0];
        sub_100513F8C(v34, (const char *)v35);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v36 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v37 = __p;
          if (v74 < 0)
            v37 = (void **)__p[0];
          v38 = &v72;
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v38 = (std::string *)v72.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v37;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "HRSE,onAvlFileUpdated,avl file decompressed,%{public}s,to,%{public}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v55 = __p;
          if (v74 < 0)
            v55 = (void **)__p[0];
          v56 = &v72;
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v56 = (std::string *)v72.__r_.__value_.__r.__words[0];
          v68 = 136446466;
          v69 = (std::string *)v55;
          v70 = 2082;
          v71 = v56;
          LODWORD(v67) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,onAvlFileUpdated,avl file decompressed,%{public}s,to,%{public}s", &v68, v67);
          v58 = (char *)v57;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v57);
          if (v58 != buf)
            free(v58);
        }
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v72;
        else
          v39 = (std::string *)v72.__r_.__value_.__r.__words[0];
        if (!sub_1005169DC((const char *)v39, 4))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v40 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v41 = &v72;
            if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v41 = (std::string *)v72.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#Warning,HRSE,onAvlFileUpdated,Cannot set protection class for HRSE decompressed avl file,%{public}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
            v64 = &v72;
            if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v64 = (std::string *)v72.__r_.__value_.__r.__words[0];
            v68 = 136446210;
            v69 = v64;
            LODWORD(v67) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,onAvlFileUpdated,Cannot set protection class for HRSE decompressed avl file,%{public}s", &v68, v67);
            v66 = (char *)v65;
            sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v65);
            if (v66 != buf)
              free(v66);
          }
        }
        v42 = a1 + 8;
        v43 = sub_1004C83B8(v42);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v44 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v43;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "HRSE,onAvlFileUpdated,is availability file valid,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v68 = 67240192;
          LODWORD(v69) = v43;
          LODWORD(v67) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,onAvlFileUpdated,is availability file valid,%{public}d", &v68, v67);
          v60 = (char *)v59;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v59);
          if (v60 != buf)
            free(v60);
        }
        sub_1004C71C4(v42);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        goto LABEL_123;
      case 3:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning,HRSE,onAvlFileUpdated,avl download status,FAILED", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,HRSE,onAvlFileUpdated,avl download status,FAILED", __p, 2);
          v49 = (char *)v48;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v48);
          if (v49 != buf)
            free(v49);
        }
        v20 = *(_DWORD *)(a1 + 820);
        if (v20 < 5)
          v21 = v20 + 1;
        else
          v21 = v20 + 10;
        *(_DWORD *)(a1 + 820) = v21;
        sub_100605D40(a2, (uint64_t)__p);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v22 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v23 = __p;
          if (v74 < 0)
            v23 = (void **)__p[0];
          v24 = *(_DWORD *)(a1 + 820);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v24;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning,HRSE,onAvlFileUpdated,avl download request failed,%{public}s,retryMultiplier,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v25 = __p;
          if (v74 < 0)
            v25 = (void **)__p[0];
          v26 = *(_DWORD *)(a1 + 820);
          LODWORD(v72.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
          WORD2(v72.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = v26;
          LODWORD(v67) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,HRSE,onAvlFileUpdated,avl download request failed,%{public}s,retryMultiplier,%{public}d", &v72, v67);
          v28 = (char *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
LABEL_123:
        if (v74 < 0)
          operator delete(__p[0]);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      default:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v30 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = a3;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning,HRSE,onAvlFileUpdated,avl download status,%{public}d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,HRSE,onAvlFileUpdated,avl download status,%{public}d", __p, 8);
        v9 = (char *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v31);
        break;
    }
LABEL_79:
    if (v9 != buf)
      free(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,HRSE,onAvlFileUpdated,null pointer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,onAvlFileUpdated,null pointer", __p, 2);
    v9 = (char *)v11;
    sub_100512490("Generic", 1, 0, 0, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v11);
    goto LABEL_79;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1013213B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_10187E514((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_101321478(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  NSObject *v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  CFAbsoluteTime Current;
  char v24;
  id v25;
  double v26;
  double v27;
  NSObject *v28;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  uint64_t v43;
  _BYTE v44[8];
  unint64_t v45;
  int v46;
  CFAbsoluteTime v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  _BYTE v52[10];
  uint64_t v53;
  uint8_t buf[4];
  _BYTE v55[10];
  uint64_t v56;

  v7 = a1 + 96;
  v6 = *(_QWORD *)(a1 + 96);
  v49 = a1 + 96;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 96);
  v50 = 256;
  v8 = sub_1004CA4F0(v7 - 88);
  v9 = *(unsigned __int8 *)(a1 + 440);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v55 = v8;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,needAvailability,%{public}d,needTile,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v51 = 67240448;
    *(_DWORD *)v52 = v8;
    *(_WORD *)&v52[4] = 1026;
    *(_DWORD *)&v52[6] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,downloadFileIfNeeded,needAvailability,%{public}d,needTile,%{public}d", &v51, 14);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (((v9 == 0) & ~v8) == 0)
  {
    if (v8 && (v11 = (_QWORD *)(a2 + 76), vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 808)) > 3600.0))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,download availability file", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        LOWORD(v51) = 0;
        LODWORD(v43) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,downloadFileIfNeeded,download availability file", &v51, v43);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      sub_10131A5E0(a1, v11);
    }
    else
    {
      if (*(_BYTE *)(a1 + 441))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v55 = 0x4122750000000000;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,corrupted tile, increase download retry interval to %{public}.5lf seconds", buf, 0xCu);
        }
        v14 = 604800.0;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v51 = 134349056;
          *(_QWORD *)v52 = 0x4122750000000000;
          LODWORD(v43) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,downloadFileIfNeeded,corrupted tile, increase download retry interval to %{public}.5lf seconds", &v51, v43);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      else
      {
        v14 = 31.0;
      }
      if (v9)
      {
        v17 = *(double *)(a2 + 76);
        if (vabdd_f64(v17, *(double *)(a1 + 800)) > v14)
        {
          *(double *)(a1 + 800) = v17;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AEE08);
          v18 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v19 = *(_QWORD *)(a1 + 448);
            v20 = *(_QWORD *)(a1 + 456);
            *(_DWORD *)buf = 134283777;
            *(_QWORD *)v55 = v19;
            *(_WORD *)&v55[8] = 2049;
            v56 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "HRSE,requestDownload,requesting HRSE tile download,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021AEE08);
            v36 = *(_QWORD *)(a1 + 448);
            v37 = *(_QWORD *)(a1 + 456);
            v51 = 134283777;
            *(_QWORD *)v52 = v36;
            *(_WORD *)&v52[8] = 2049;
            v53 = v37;
            LODWORD(v43) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "HRSE,requestDownload,requesting HRSE tile download,lat,%{private}.7lf,lon,%{private}.7lf", &v51, v43);
            v39 = (uint8_t *)v38;
            sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v38);
            if (v39 != buf)
              free(v39);
          }
          if (a3)
          {
            if (*(double *)(a2 + 20) <= 10.0)
            {
              LOBYTE(a3) = 0;
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021AEE08);
              v21 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
              {
                v22 = *(_QWORD *)(a2 + 20);
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)v55 = v22;
                *(_WORD *)&v55[8] = 2050;
                v56 = 0x4024000000000000;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "HRSE,allowing download request over cell due to large horizontal uncertainty, uncertainty,%{public}.5lf, uncertainty threshold,%{public}.5lf", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021AEE08);
                v40 = *(_QWORD *)(a2 + 20);
                v51 = 134349312;
                *(_QWORD *)v52 = v40;
                *(_WORD *)&v52[8] = 2050;
                v53 = 0x4024000000000000;
                LODWORD(v43) = 22;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "HRSE,allowing download request over cell due to large horizontal uncertainty, uncertainty,%{public}.5lf, uncertainty threshold,%{public}.5lf", &v51, v43);
                v42 = (uint8_t *)v41;
                sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v41);
                if (v42 != buf)
                  free(v42);
              }
              LOBYTE(a3) = 1;
            }
          }
          Current = CFAbsoluteTimeGetCurrent();
          v24 = *(_BYTE *)(a1 + 825);
          if (v24)
            LOBYTE(a3) = 1;
          v25 = objc_msgSend(objc_msgSend(*(id *)(a1 + 360), "vendor"), "proxyForService:", CFSTR("CLTilesManager"));
          v26 = *(double *)(a1 + 448);
          v27 = *(double *)(a1 + 456);
          v44[0] = a3;
          v44[1] = v24;
          v44[2] = 0;
          v45 = 0xBFF0000000000000;
          v46 = 0;
          v47 = Current;
          v48 = 1;
          objc_msgSend(v25, "requestTileDownloadByType:lat:lon:seckey:details:", 2, -1, v44, v26, v27);
        }
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v28 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,tile download finished!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        LOWORD(v51) = 0;
        LODWORD(v43) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,downloadFileIfNeeded,tile download finished!", &v51, v43);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_101321DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101321E44()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  _OWORD buf[102];

  v16 = 0.0;
  sub_1001E4804(buf);
  v0 = sub_1001FD98C(*(uint64_t *)&buf[0], "HrseAvlFileUpdatePeriodOverWifi", &v16);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    if (v16 > 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v17 = 134349056;
        v18 = *(_QWORD *)&v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,HrseAvlFileUpdatePeriodOverWifi,%{public}.1lf", &v17, 12);
        v12 = (char *)v11;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v11);
        if (v12 != (char *)buf)
          free(v12);
      }
      return v16;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,HRSE,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v17 = 134349056;
      v18 = *(_QWORD *)&v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead", &v17, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v13);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = 0x40F5180000000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  v5 = 86400.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v17 = 134349056;
    v18 = 0x40F5180000000000;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,HrseAvlFileUpdatePeriodOverWifi,%{public}.1lf", &v17, v15);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  return v5;
}

void sub_101322310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10132232C()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  _OWORD buf[102];

  v16 = 0.0;
  sub_1001E4804(buf);
  v0 = sub_1001FD98C(*(uint64_t *)&buf[0], "HrseAvlFileUpdatePeriodOverCell", &v16);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    if (v16 > 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AEE08);
        v17 = 134349056;
        v18 = *(_QWORD *)&v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,HrseAvlFileUpdatePeriodOverCell,%{public}.1lf", &v17, 12);
        v12 = (char *)v11;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverCell() const", "%s\n", v11);
        if (v12 != (char *)buf)
          free(v12);
      }
      return v16;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,HRSE,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AEE08);
      v17 = 134349056;
      v18 = *(_QWORD *)&v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead", &v17, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverCell() const", "%s\n", v13);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = 0x4122750000000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  v5 = 604800.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v17 = 134349056;
    v18 = 0x4122750000000000;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,HrseAvlFileUpdatePeriodOverCell,%{public}.1lf", &v17, v15);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverCell() const", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  return v5;
}

void sub_1013227F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101322814(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *p_dst;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  int v20;
  const char *v21;
  std::string *v22;
  void *v23[2];
  uint64_t v24;
  std::string __p;
  uint64_t v26;
  __int16 v27;
  std::string __dst;
  std::string buf[68];

  v8 = a1 + 96;
  v7 = *(_QWORD *)(a1 + 96);
  v26 = a1 + 96;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 96);
  v27 = 256;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AEE08);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v10 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Notification,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AEE08);
    v20 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Notification,%{public}d", &__dst, 8);
    v22 = (std::string *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (*a3 == 4)
  {
    v11 = *(_DWORD *)(a4 + 188);
    if (v11 == 1)
    {
      if (!*(_BYTE *)(a1 + 376))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_10131A5E0(a1, buf);
        *(_BYTE *)(a1 + 376) = 1;
      }
    }
    else if (!v11)
    {
      v12 = (char *)sub_1001FD94C();
      sub_1000B7884(v12, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&__dst, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      else
        __dst = buf[0];
      if (*(char *)(a1 + 415) < 0)
        sub_100115CE4(&__p, *(void **)(a1 + 392), *(_QWORD *)(a1 + 400));
      else
        __p = *(std::string *)(a1 + 392);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      sub_1005164F0((const char *)p_dst);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&__p, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      else
        __p = buf[0];
      if (*(char *)(a1 + 439) < 0)
      {
        sub_100115CE4(v23, *(void **)(a1 + 416), *(_QWORD *)(a1 + 424));
      }
      else
      {
        *(_OWORD *)v23 = *(_OWORD *)(a1 + 416);
        v24 = *(_QWORD *)(a1 + 432);
      }
      if (v24 >= 0)
        v16 = v23;
      else
        v16 = (void **)v23[0];
      if (v24 >= 0)
        v17 = HIBYTE(v24);
      else
        v17 = (std::string::size_type)v23[1];
      std::string::append(&__p, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_1005164F0((const char *)v18);
      *(_BYTE *)(a1 + 376) = 0;
      sub_100605848(a1 + 112);
      sub_1004CA4F8(a1 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

void sub_101322BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_10187E514((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_101322C78(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101322CA4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101322D9C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 24))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 448))(*(_QWORD *)(v1 + 8));
  return result;
}

void sub_101322DD4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  *(_QWORD *)(a1 + 16) = off_1021AF038;
  *(_QWORD *)a1 = off_1021AEE38;
  *(_QWORD *)(a1 + 8) = off_1021AF010;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v3 = a1 + 216;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  objc_msgSend(a2, "silo");
  sub_100792EB8((_QWORD *)(v3 + 16));
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  objc_msgSend(*(id *)(a1 + 24), "silo");
  *(_QWORD *)(a1 + 32) = -[CLHarvestExternalAdapter initWithHarvesterExternal:andSilo:]([CLHarvestExternalAdapter alloc], "initWithHarvesterExternal:andSilo:", a1, objc_msgSend(*(id *)(a1 + 24), "silo"));
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *(_QWORD *)(a1 + 304) = v4;
  objc_msgSend(v4, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 24), "silo"));
  objc_msgSend(*(id *)(a1 + 304), "setDelegateEntityName:", "CLHarvestControllerExternal");
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  *(_QWORD *)(a1 + 296) = v5;
  objc_msgSend(v5, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 24), "silo"));
  objc_msgSend(*(id *)(a1 + 296), "setDelegateEntityName:", "CLHarvestControllerExternal");
  operator new();
}

void sub_101323208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10042B248(a14, 0);
  sub_101323578(a12);
  v22 = *(_QWORD *)(v14 + 224);
  *(_QWORD *)(v14 + 224) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *v20;
  *v20 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_100008848(v19, *(_QWORD **)(v14 + 200));
  v24 = *(_QWORD *)(v14 + 184);
  *(_QWORD *)(v14 + 184) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_100008848(v18, *(_QWORD **)(v14 + 168));
  v25 = *(_QWORD *)(v14 + 152);
  *(_QWORD *)(v14 + 152) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *v15;
  *v15 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_100008848(v17, *(_QWORD **)(v14 + 128));
  v27 = *(_QWORD *)(v14 + 112);
  *(_QWORD *)(v14 + 112) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_100008848(v16, *(_QWORD **)(v14 + 96));
  v28 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v14 + 80) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_100008848(a13, *(_QWORD **)(v14 + 64));
  v29 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v14 + 48) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Unwind_Resume(a1);
}

void sub_101323358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLHarvestControllerExternal::onRegulatoryDomainUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 24), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onRegulatoryDomainUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onRegulatoryDomainUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 24), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_101325AA4;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_101323558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101323578(uint64_t a1)
{
  sub_100008848(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1013235B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1021AEE38;
  *(_QWORD *)(a1 + 8) = off_1021AF010;
  *(_QWORD *)(a1 + 16) = off_1021AF038;

  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 304) = 0;

  *(_QWORD *)(a1 + 296) = 0;
  if (objc_opt_class(MCProfileConnection, v2))
    objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "removeObserver:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

  *(_QWORD *)(a1 + 32) = 0;
  sub_10042B248((uint64_t *)(a1 + 280), 0);
  sub_100008848(a1 + 256, *(_QWORD **)(a1 + 264));
  sub_100008848(a1 + 232, *(_QWORD **)(a1 + 240));
  v3 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100008848(a1 + 192, *(_QWORD **)(a1 + 200));
  v5 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100008848(a1 + 160, *(_QWORD **)(a1 + 168));
  v6 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_100008848(a1 + 120, *(_QWORD **)(a1 + 128));
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100008848(a1 + 88, *(_QWORD **)(a1 + 96));
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100008848(a1 + 56, *(_QWORD **)(a1 + 64));
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sub_101323770(uint64_t a1)
{
  return sub_1013235B4(a1 - 8);
}

uint64_t sub_101323778(uint64_t a1)
{
  return sub_1013235B4(a1 - 16);
}

void sub_101323780(uint64_t a1)
{
  sub_1013235B4(a1);
  operator delete();
}

void sub_1013237A4(uint64_t a1)
{
  sub_1013235B4(a1 - 8);
  operator delete();
}

void sub_1013237CC(uint64_t a1)
{
  sub_1013235B4(a1 - 16);
  operator delete();
}

id sub_1013237F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id sub_1013237FC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  return objc_msgSend(*(id *)(a1 + 296), "getAuthorizationContextOfNonZonalClient:withReply:", _NSConcreteStackBlock, 3221225472, sub_10132387C, &unk_1021AF058, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2), a1);
}

void sub_10132387C(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  uint64_t **v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = objc_msgSend(a2, "isAuthorizedForServiceType:", 4);
  v5 = *(uint64_t ***)(v3 + 40);
  sub_1015A2E04(__p, (char *)objc_msgSend(*(id *)(a1 + 32), "UTF8String"));
  sub_100590564(v5, (uint64_t)__p, v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1013238F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101323910(uint64_t a1, uint64_t a2)
{
  int v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    *(_QWORD *)(a1 + 40) = a2;
    sub_1005A7F94();
  }
  v2 = sub_10194CEB0();
  sub_1013239E0(v2, v3, v4, v5);
}

void sub_1013239E0(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onTelephonyNotificationLegacy");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onTelephonyNotificationLegacy", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onTelephonyNotificationLegacy\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101323D10(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101323BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101323BC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[28];
  a1[28] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = a1[27];
  a1[27] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  a1[5] = 0;
  return result;
}

id sub_101323C18(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
    return objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), sub_1001CFE7C(a2), 0);
  v4 = sub_10194D010();
  return (id)sub_101323C58(v4);
}

id sub_101323C58(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
    return objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), sub_1001CFE7C(a2), 0);
  v4 = sub_10194D170();
  return (id)sub_101323C98(v4);
}

id sub_101323C98(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
    return objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), sub_1001CFE7C(a2));
  v4 = sub_10194D2D0();
  return (id)sub_101323CD4(v4);
}

void sub_101323CD4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), sub_1001CFE7C(a2));
  }
  else
  {
    v3 = sub_10194D430();
    sub_101323D10(v3, v4, v5, v6);
  }
}

void sub_101323D10(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    sub_10020097C(v4, a2, a3, a4, 1);
  }
  else
  {
    v5 = sub_10194D6F0();
    sub_101323D30(v5);
  }
}

id sub_101323D30(uint64_t a1, _BYTE *a2)
{
  id result;
  char v4;

  v4 = 0;
  result = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetActiveCall:", &v4);
  *a2 = v4;
  return result;
}

void sub_101323D7C(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    objc_msgSend(v2, "fetchMostRecentConnectionWithReply:", a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "fVehicleConnectionNotifier is not initialized, skip fetching mostRecentConnection", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "fVehicleConnectionNotifier is not initialized, skip fetching mostRecentConnection", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLHarvestControllerExternal::fetchMostRecentConnectionWithReply(void (^)(CLVehicleConnection)) const", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

id sub_101323F38(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetReachability");
}

void *sub_101323F5C@<X0>(uint64_t a1@<X8>)
{
  void *result;

  if (byte_10230E307 < 0)
    return sub_100115CE4((_BYTE *)a1, (void *)xmmword_10230E2F0, *((unint64_t *)&xmmword_10230E2F0 + 1));
  *(_OWORD *)a1 = xmmword_10230E2F0;
  *(_QWORD *)(a1 + 16) = unk_10230E300;
  return result;
}

uint64_t sub_101323F98(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "HarvestingThermalLevelHighThreshold", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10132401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101324030(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "HarvestingThermalLevelLowThreshold", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1013240B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1013240C8(uint64_t a1, BOOL *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4874(v8, "IsHarvestAllLocations", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10132414C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101324160(uint64_t a1, void *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001FD98C(v8, "MaxHarvestAge", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1013241E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1013241F8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestPointsPer", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10132427C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101324290(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestPointsPerUpload", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_101324314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101324328(uint64_t a1, void *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001FD98C(v8, "DefaultHarvestUploadInterval", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1013243AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_1013243C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (!*(_QWORD *)(a1 + 208))
    sub_100647FA8();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 184) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8), a2, 0, v4);
  return sub_1000C6190((uint64_t **)(a1 + 192), &v5, &v5);
}

void sub_101324474(int a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100592900(*(unsigned __int8 **)(a4 + 40), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10132463C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10132465C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  v4 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 184) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8), a2);
  result = sub_10009E904(a1 + 192, &v4);
  if (!*(_QWORD *)(a1 + 208))
  {
    result = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

id sub_1013246C0(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRegistrationStatus");
}

uint64_t **sub_1013246E4(uint64_t a1, uint64_t a2)
{
  std::string __p;
  int v5;

  v5 = a2;
  if (!*(_QWORD *)(a1 + 136))
    sub_1001B6A0C();
  if (!(_DWORD)a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(&__p, (const std::string *)&xmmword_10230E2F0);
    sub_1018CE0BC();
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), a2, 0);
  return sub_1000C6190((uint64_t **)(a1 + 120), &v5, &v5);
}

void sub_1013247DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1013247F8(uint64_t a1, unsigned int a2)
{
  id result;
  unsigned int v4;

  v4 = a2;
  sub_10009E904(a1 + 120, (int *)&v4);
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), v4);
  if (!*(_QWORD *)(a1 + 136))
  {
    result = *(id *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (result)
      return (id)(*(uint64_t (**)(id))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

id sub_10132485C(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetIsMapsANonSystemLocationClient");
}

BOOL sub_101324880(uint64_t a1, _QWORD *a2)
{
  id v3;
  const __CFDictionary *v4;
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const __CFDictionary *v11;

  v3 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
  v4 = (const __CFDictionary *)objc_msgSend(v3, "defaultForKey:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1022FF580), 0);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289283;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"networkSettings\", \"networkHarvestRules\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
  }
  if (v4)
    sub_10052AA44(a2, v4);
  return v4 != 0;
}

uint64_t **sub_1013249BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (!*(_QWORD *)(a1 + 72))
    sub_100E35814();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), a2, 0, v4);
  return sub_1000C6190((uint64_t **)(a1 + 56), &v5, &v5);
}

void sub_101324A70(int a1, int *a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100592290(*(_QWORD *)(a4 + 40), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101324C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101324C58(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  v4 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), a2);
  result = sub_10009E904(a1 + 56, &v4);
  if (!*(_QWORD *)(a1 + 72))
  {
    result = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t **sub_101324CBC(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 104))
    sub_1006AA544();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 80) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), a2, 0);
  return sub_1000C6190((uint64_t **)(a1 + 88), &v4, &v4);
}

void sub_101324DE4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onGnssNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onGnssNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onGnssNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10132503C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101324F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101324FBC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  v5 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 80) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), a2);
  result = sub_10009E904(a1 + 88, &v5);
  if (!*(_QWORD *)(a1 + 104))
  {
    v4 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_WORD *)(a1 + 288) = 0;
  }
  return result;
}

void sub_10132503C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if (*a3 == 13)
  {
    *(_BYTE *)(a1 + 289) = *(_BYTE *)(a4 + 824);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109376;
      v14 = v6;
      v15 = 1024;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Sent unhandled notification 0x%04X (%d)", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
      v7 = *a3;
      v10[0] = 67109376;
      v10[1] = v7;
      v11 = 1024;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "Sent unhandled notification 0x%04X (%d)", v10, 14);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLHarvestControllerExternal::onGnssNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

uint64_t **sub_10132521C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (!*(_QWORD *)(a1 + 176))
    sub_100239888();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 152) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), a2, 0, v4);
  return sub_1000C6190((uint64_t **)(a1 + 160), &v5, &v5);
}

void sub_1013252D0(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1005925BC(*(_BYTE **)(a4 + 40), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101325498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013254B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  v4 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 152) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), a2);
  result = sub_10009E904(a1 + 160, &v4);
  if (!*(_QWORD *)(a1 + 176))
  {
    result = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_10132551C(uint64_t a1)
{
  return sub_1001240F8(*(_QWORD *)(a1 + 280));
}

id sub_101325524(uint64_t a1, unsigned int *a2)
{
  return sub_101480138(*(_QWORD *)(a1 + 280), a2);
}

id sub_10132552C(uint64_t a1, int *a2)
{
  return sub_10148017C(*(_QWORD *)(a1 + 280), a2);
}

void sub_101325534(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1000AD910(*(_QWORD *)(a1 + 40), a2, a3, a4);
}

void sub_10132553C()
{
  operator new();
}

void sub_1013255E4()
{
  operator delete();
}

BOOL sub_101325608(uint64_t a1, _QWORD *a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_100006BB4(v8, off_1022FF578, a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10132568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1013256A0(uint64_t a1, const __CFDictionary *a2, double *a3)
{
  uint64_t result;
  double v4;

  v4 = 0.0;
  result = sub_100515108(a2, a3, &v4);
  if ((_DWORD)result)
    return TMSetSourceTime(type metadata for , v4, 15.0);
  return result;
}

uint64_t *sub_1013256EC(uint64_t a1, int a2)
{
  return sub_100792ED8((uint64_t *)(a1 + 232), a2, a1 + 8);
}

void sub_1013256FC(uint64_t a1, int a2)
{
  sub_100792FC8(a1 + 232, a2, a1 + 8);
}

void sub_10132570C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100592CC8(v3, a2, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_101325790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1013257A4(uint64_t a1, int a2, uint64_t *a3)
{
  sub_10132570C(a1 - 8, a2, a3);
}

id sub_1013257AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 304), "startLeechingVisitsForClient:", *(_QWORD *)(a1 + 32));
}

id sub_1013257BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 304), "stopLeechingVisitsForClient:", *(_QWORD *)(a1 + 32));
}

_QWORD *sub_1013257CC(_QWORD *result, void *a2)
{
  _QWORD *v3;
  id v4;
  double v5;
  double v6;
  id v7;
  void *v8;
  _QWORD v9[6];

  if (result[38])
  {
    v3 = result;
    v4 = objc_alloc((Class)CLLocation);
    objc_msgSend(a2, "coordinate");
    v6 = v5;
    objc_msgSend(a2, "coordinate");
    v7 = objc_msgSend(v4, "initWithLatitude:longitude:", v6);
    v8 = (void *)v3[38];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_101325880;
    v9[3] = &unk_102190438;
    v9[4] = a2;
    v9[5] = v3;
    return objc_msgSend(v8, "fetchLocationOfInterestAtLocation:withReply:", v7, v9);
  }
  return result;
}

void sub_101325880(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (a3)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received error when fetching LOI at location: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AF0E0);
      v7 = 138412290;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "Received error when fetching LOI at location: %@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLHarvestControllerExternal::onVisit(CLVisit *)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_100592B14(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), *(_QWORD *)(a1 + 32), a2);
  }
}

void sub_101325A68(uint64_t a1, uint64_t a2)
{
  sub_10058D018(*(_QWORD *)(a1 + 40), a2);
}

void sub_101325A70(uint64_t a1, void *a2, void *a3, void *a4)
{
  sub_100793364((_QWORD *)(a1 + 232), a2, a3, a4);
}

void sub_101325A78(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

id sub_101325AA4()
{
  return +[CLPMeta updateRegulatoryDomainEstimates](CLPMeta, "updateRegulatoryDomainEstimates");
}

void sub_101325AB0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

_QWORD *sub_101325ADC(_QWORD *a1)
{
  *a1 = off_1021AF130;
  sub_1009865B8(a1 + 1);
  return a1;
}

void sub_101325B10(_QWORD *a1)
{
  *a1 = off_1021AF130;
  sub_1009865B8(a1 + 1);
  operator delete();
}

id sub_101325B54(uint64_t a1)
{
  return sub_10016E3C4(a1 + 8);
}

id sub_101325B5C(uint64_t a1, double a2)
{
  return sub_1001F40D0(a1 + 8, a2);
}

void sub_101325B64(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101325BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101325BDC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_101325BF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101325C48()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C4B44C;
      v1[3] = unk_101C4B45C;
      v1[4] = xmmword_101C4B46C;
      v1[0] = xmmword_101C4B42C;
      v1[1] = unk_101C4B43C;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101325D1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_101325D34()
{
  sub_1015A2E04(&xmmword_10230E2F0, "HarvestController");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230E2F0, (void *)&_mh_execute_header);
}

uint64_t sub_101325D78(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  v3 = a2[1];
  *(_QWORD *)(a1 + 96) = *a2;
  *(_QWORD *)(a1 + 104) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(CFAbsoluteTime *)(a1 + 120) = CFAbsoluteTimeGetCurrent();
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 128) = _Q0;
  *(_OWORD *)(a1 + 144) = _Q0;
  *(_OWORD *)(a1 + 160) = _Q0;
  *(_OWORD *)(a1 + 176) = _Q0;
  sub_101325E3C(a1);
  return a1;
}

void sub_101325E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;

  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  sub_100008848(v1, *v4);
  _Unwind_Resume(a1);
}

__n128 sub_101325E3C(uint64_t a1)
{
  __n128 *v1;
  _QWORD *v2;
  _QWORD *v3;
  __n128 result;

  v1 = (__n128 *)a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (_QWORD *)(a1 + 56);
  sub_100008848(a1 + 48, *(_QWORD **)(a1 + 56));
  v1[3].n128_u64[0] = (unint64_t)v2;
  *v2 = 0;
  v3 = (_QWORD *)v1[5].n128_u64[0];
  v1 += 5;
  v1[-1].n128_u64[0] = 0;
  sub_100008848((uint64_t)&v1[-1].n128_i64[1], v3);
  v1[-1].n128_u64[1] = (unint64_t)v1;
  v1->n128_u64[0] = 0;
  v1->n128_u64[1] = 0;
  v1[2].n128_f64[0] = CFAbsoluteTimeGetCurrent();
  __asm { FMOV            V0.2D, #-1.0 }
  v1[3] = result;
  v1[4] = result;
  v1[5] = result;
  v1[6] = result;
  v1[-3].n128_u64[0] = 0;
  v1[-3].n128_u32[2] = 0;
  return result;
}

uint64_t sub_101325EB0(uint64_t a1)
{
  if (vabdd_f64(*(double *)(a1 + 120), *(double *)(a1 + 112)) < 0.0001)
    sub_1002255F0(a1, 0xE10uLL);
  sub_100261F44(a1 + 96);
  sub_100008848(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_100008848(a1 + 48, *(_QWORD **)(a1 + 56));
  return a1;
}

void sub_101325F1C(uint64_t a1, uint64_t *a2)
{
  double *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11[2];
  uint64_t v12;

  ++*(_DWORD *)a1;
  v12 = *a2;
  sub_1001909A4((uint64_t **)(a1 + 48), &v12, &v12);
  v4 = (double *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(std::__shared_weak_count **)(a1 + 104);
  v11[0] = v5;
  v11[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_10018D1B0(v4, v11, (uint64_t)a2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_101325FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_101325FDC(uint64_t a1, uint64_t *a2)
{
  ++*(_DWORD *)(a1 + 8);
  return sub_1001909A4((uint64_t **)(a1 + 72), a2, a2);
}

uint64_t sub_101325FF4(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFAbsoluteTime v4;
  CFAbsoluteTime v5;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[20];
  _QWORD v12[20];

  v2 = *((unsigned int *)a1 + 16);
  v3 = *((unsigned int *)a1 + 22);
  v4 = (CFAbsoluteTimeGetCurrent() - a1[14]) / 3600.0;
  v5 = (CFAbsoluteTimeGetCurrent() - a1[15]) / 3600.0;
  v11[0] = CFSTR("numBadAps");
  v12[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)a1);
  v11[1] = CFSTR("numDistinctBadAps");
  v12[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2);
  v11[2] = CFSTR("numGoodAps");
  v12[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 1));
  v11[3] = CFSTR("numApsRemovedFromDatabase");
  v12[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 2));
  v11[4] = CFSTR("numDistinctApsRemovedFromDatabase");
  v12[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v11[5] = CFSTR("numCrossCheckCentroidsRequests");
  v12[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 3));
  v11[6] = CFSTR("numCrossCheckCentroidsRequestsWithGps");
  v12[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 4));
  v11[7] = CFSTR("numCrossCheckCentroidsRequestsWithCell");
  v12[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 5));
  v11[8] = CFSTR("numCrossCheckCentroidsRequestsWithGpsOrCell");
  v12[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 6));
  v11[9] = CFSTR("numCrossCheckCentroidsRequestsWithoutGpsOrCell");
  v12[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 7));
  v11[10] = CFSTR("maxGpsDistanceToBadCentroids");
  v12[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[17]);
  v11[11] = CFSTR("minGpsDistanceToBadCentroids");
  v12[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[16]);
  v11[12] = CFSTR("maxCellDistanceToBadCentroids");
  v12[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[19]);
  v11[13] = CFSTR("minCellDistanceToBadCentroids");
  v12[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[18]);
  v11[14] = CFSTR("maxGpsDistanceToGoodCentroids");
  v12[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[21]);
  v11[15] = CFSTR("minGpsDistanceToGoodCentroids");
  v12[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[20]);
  v11[16] = CFSTR("maxCellDistanceToGoodCentroids");
  v12[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[23]);
  v11[17] = CFSTR("minCellDistanceToGoodCentroids");
  v12[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a1[22]);
  v11[18] = CFSTR("eventDurationInHours");
  v12[18] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4);
  v11[19] = CFSTR("sessionDurationInHours");
  v12[19] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1013263C8;
  v8[3] = &unk_102132010;
  v8[4] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 20);
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.movingApDetector"), v8);
  v9[0] = CFSTR("bothCrossCheckersMatch");
  v10[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 8));
  v9[1] = CFSTR("rejectedByGpsCrossCheck");
  v10[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 9));
  v9[2] = CFSTR("rejectedByCellCrossCheck");
  v10[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 10));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1013263D0;
  v7[3] = &unk_102132010;
  v7[4] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 3);
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.crosscheckmismatchcode"), v7);
}

uint64_t sub_1013263C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1013263D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

double sub_1013263D8(int a1, int a2)
{
  double v2;
  double v3;
  double v4;
  double result;

  if (a1 == 2)
  {
    v2 = -0.122;
    v3 = 6.08;
  }
  else if (a1 == 1)
  {
    v2 = -0.17;
    v3 = 4.65;
  }
  else
  {
    v2 = -0.12;
    v3 = 4.63;
  }
  v4 = (double)a2;
  if ((double)a2 < 20.0)
    v4 = 20.0;
  result = v3 + v2 * v4;
  if (result < 0.0)
    return 0.0;
  return result;
}

void sub_101326444(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_DWORD *)a2 + 4);
    v7 = *((_DWORD *)a2 + 5);
    *(_DWORD *)buf = 134218496;
    v24 = v5;
    v25 = 1024;
    v26 = v6;
    v27 = 1024;
    v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[live data] updating elevation anchor, startTime, %f, elevationAscended, %u, elevationDescended, %u", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v12 = *((_QWORD *)a2 + 1);
    v13 = *((_DWORD *)a2 + 4);
    v14 = *((_DWORD *)a2 + 5);
    v17 = 134218496;
    v18 = v12;
    v19 = 1024;
    v20 = v13;
    v21 = 1024;
    v22 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] updating elevation anchor, startTime, %f, elevationAscended, %u, elevationDescended, %u", COERCE_DOUBLE(&v17), 24);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::SourceData<CLElevationChangeEntry>::setAnchor(const CLElevationChangeEntry &) [T = CLElevationChangeEntry]", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v8 = *(unsigned __int8 *)(a1 + 64);
  v9 = a2[3];
  v11 = *a2;
  v10 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v10;
  if (!v8)
    *(_BYTE *)(a1 + 64) = 1;
}

void sub_101326648(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = a2[6];
    *(_DWORD *)buf = 134218240;
    v27 = v5;
    v28 = 2048;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[live data] updating odometer anchor, startTime, %f, odometer, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v17 = *a2;
    v18 = a2[6];
    v22 = 134218240;
    v23 = v17;
    v24 = 2048;
    v25 = v18;
    LODWORD(v21) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] updating odometer anchor, startTime, %f, odometer, %f", COERCE_DOUBLE(&v22), v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::SourceData<CLOdometerEntry>::setAnchor(const CLOdometerEntry &) [T = CLOdometerEntry]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v7 = *(unsigned __int8 *)(a1 + 192);
  v8 = *((_OWORD *)a2 + 3);
  v10 = *(_OWORD *)a2;
  v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v9;
  v11 = *((_OWORD *)a2 + 7);
  v13 = *((_OWORD *)a2 + 4);
  v12 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v12;
  v14 = *((_OWORD *)a2 + 11);
  v16 = *((_OWORD *)a2 + 8);
  v15 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v15;
  if (!v7)
    *(_BYTE *)(a1 + 192) = 1;
}

uint64_t sub_10132685C(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 873) = 0u;
  *(CFAbsoluteTime *)(a1 + 888) = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(a1 + 896) = 1;
  return a1;
}

void sub_1013268E0(uint64_t a1, uint64_t *a2, unsigned __int8 *src)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  double *v9;
  double *v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  NSObject *v43;
  const char *v44;
  uint8_t *v45;
  double v46;
  double v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  NSObject *v60;
  unint64_t *v61;
  unint64_t v62;
  const char *v63;
  double v64;
  double v65;
  double v66;
  __int128 v67;
  void *__p;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  int v73;
  _BYTE v74[48];
  __int16 v75;
  uint64_t v76;
  uint8_t buf[4];
  _BYTE v78[48];
  __int16 v79;
  uint64_t v80;
  uuid_t dst;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v71 = *a2;
  v72 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  __p = 0;
  v69 = 0;
  v70 = 0;
  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, src);
  if (sub_100FD35AC(v4, dst, &__p) == 100)
  {
    v10 = (double *)__p;
    v9 = v69;
    if (__p == v69)
    {
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v60 = qword_10229FE28;
      if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "[live data] no published runs exist yet, including missing anchor", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
        LOWORD(v73) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 16, "[live data] no published runs exist yet, including missing anchor", &v73, 2);
        v45 = (uint8_t *)v63;
        sub_100512490("Generic", 1, 0, 0, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v63);
        goto LABEL_64;
      }
    }
    else
    {
      v66 = *(double *)&v5;
      v11 = 0.0;
      *(_QWORD *)&v8 = 134219264;
      v67 = v8;
      do
      {
        if (vabdd_f64(v10[6], v10[5]) >= 2.22044605e-16)
        {
          if (qword_10229FE20 != -1)
            dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
          v27 = qword_10229FE28;
          if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
          {
            v28 = *(_QWORD *)v10;
            v29 = *((_QWORD *)v10 + 5);
            v30 = *((_QWORD *)v10 + 6);
            v31 = *((_QWORD *)v10 + 7);
            v32 = *((_QWORD *)v10 + 11);
            v33 = *((_QWORD *)v10 + 9);
            *(_DWORD *)buf = v67;
            *(_QWORD *)v78 = v28;
            *(_WORD *)&v78[8] = 2048;
            *(_QWORD *)&v78[10] = v29;
            *(_WORD *)&v78[18] = 2048;
            *(_QWORD *)&v78[20] = v30;
            *(_WORD *)&v78[28] = 2048;
            *(_QWORD *)&v78[30] = v31;
            *(_WORD *)&v78[38] = 2048;
            *(_QWORD *)&v78[40] = v32;
            v79 = 2048;
            v80 = v33;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[live data] query returned existing runs for workout,recordId,%llu,startTime,%f,endTime,%f,distance,%f,vertical,%f,maxSpeed,%f", buf, 0x3Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE20 != -1)
              dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
            v35 = *(_QWORD *)v10;
            v36 = *((_QWORD *)v10 + 5);
            v37 = *((_QWORD *)v10 + 6);
            v38 = *((_QWORD *)v10 + 7);
            v39 = *((_QWORD *)v10 + 11);
            v40 = *((_QWORD *)v10 + 9);
            v73 = v67;
            *(_QWORD *)v74 = v35;
            *(_WORD *)&v74[8] = 2048;
            *(_QWORD *)&v74[10] = v36;
            *(_WORD *)&v74[18] = 2048;
            *(_QWORD *)&v74[20] = v37;
            *(_WORD *)&v74[28] = 2048;
            *(_QWORD *)&v74[30] = v38;
            *(_WORD *)&v74[38] = 2048;
            *(_QWORD *)&v74[40] = v39;
            v75 = 2048;
            v76 = v40;
            LODWORD(v64) = 62;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] query returned existing runs for workout,recordId,%llu,startTime,%f,endTime,%f,distance,%f,vertical,%f,maxSpeed,%f", &v73, v64, v65, v66, *(double *)&v67, *((double *)&v67 + 1));
            v42 = (uint8_t *)v41;
            sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v41);
            if (v42 != buf)
              free(v42);
          }
          v11 = v11 + vabdd_f64(v10[6], v10[5]);
          if (*(double *)(a1 + 912) >= v10[9])
            v34 = *(_QWORD *)(a1 + 912);
          else
            v34 = *((_QWORD *)v10 + 9);
          *(_QWORD *)(a1 + 912) = v34;
          ++*(_DWORD *)(a1 + 904);
        }
        else
        {
          if (qword_10229FE20 != -1)
            dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
          v12 = qword_10229FE28;
          if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
          {
            v13 = *(_QWORD *)v10;
            v14 = *((_QWORD *)v10 + 5);
            v15 = *((_QWORD *)v10 + 6);
            v16 = *((_QWORD *)v10 + 7);
            v17 = *((_QWORD *)v10 + 11);
            v18 = *((_QWORD *)v10 + 9);
            *(_DWORD *)buf = v67;
            *(_QWORD *)v78 = v13;
            *(_WORD *)&v78[8] = 2048;
            *(_QWORD *)&v78[10] = v14;
            *(_WORD *)&v78[18] = 2048;
            *(_QWORD *)&v78[20] = v15;
            *(_WORD *)&v78[28] = 2048;
            *(_QWORD *)&v78[30] = v16;
            *(_WORD *)&v78[38] = 2048;
            *(_QWORD *)&v78[40] = v17;
            v79 = 2048;
            v80 = v18;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[live data] got anchor run,recordId,%llu,startTime,%f,endTime,%f,distance,%f,vertical,%f,maxSpeed,%f", buf, 0x3Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE20 != -1)
              dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
            v19 = *(_QWORD *)v10;
            v20 = *((_QWORD *)v10 + 5);
            v21 = *((_QWORD *)v10 + 6);
            v22 = *((_QWORD *)v10 + 7);
            v23 = *((_QWORD *)v10 + 11);
            v24 = *((_QWORD *)v10 + 9);
            v73 = v67;
            *(_QWORD *)v74 = v19;
            *(_WORD *)&v74[8] = 2048;
            *(_QWORD *)&v74[10] = v20;
            *(_WORD *)&v74[18] = 2048;
            *(_QWORD *)&v74[20] = v21;
            *(_WORD *)&v74[28] = 2048;
            *(_QWORD *)&v74[30] = v22;
            *(_WORD *)&v74[38] = 2048;
            *(_QWORD *)&v74[40] = v23;
            v75 = 2048;
            v76 = v24;
            LODWORD(v64) = 62;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] got anchor run,recordId,%llu,startTime,%f,endTime,%f,distance,%f,vertical,%f,maxSpeed,%f", &v73, v64, v65, v66, *(double *)&v67, *((double *)&v67 + 1));
            v26 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }
        }
        v10 += 12;
      }
      while (v10 != v9);
      v46 = *(v69 - 5) - *((double *)__p + 7);
      v47 = *(v69 - 1) - *((double *)__p + 11);
      *(double *)(a1 + 864) = v11;
      *(double *)(a1 + 872) = v46;
      *(double *)(a1 + 880) = v47;
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v48 = qword_10229FE28;
      if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(_DWORD *)(a1 + 904);
        v50 = *(_QWORD *)(a1 + 864);
        v51 = *(_QWORD *)(a1 + 872);
        v52 = *(_QWORD *)(a1 + 880);
        v53 = *(_QWORD *)(a1 + 912);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v78 = v49;
        *(_WORD *)&v78[4] = 2048;
        *(_QWORD *)&v78[6] = v50;
        *(_WORD *)&v78[14] = 2048;
        *(_QWORD *)&v78[16] = v51;
        *(_WORD *)&v78[24] = 2048;
        *(_QWORD *)&v78[26] = v52;
        *(_WORD *)&v78[34] = 2048;
        *(_QWORD *)&v78[36] = v53;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[live data] starting off with published run metrics,runCount,%d,publishedDuration,%f,publishedDistance,%f,publishedElevation,%f,maxSpeed,%f", buf, 0x30u);
      }
      v5 = *(std::__shared_weak_count **)&v66;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
        v54 = *(_DWORD *)(a1 + 904);
        v55 = *(_QWORD *)(a1 + 864);
        v56 = *(_QWORD *)(a1 + 872);
        v57 = *(_QWORD *)(a1 + 880);
        v58 = *(_QWORD *)(a1 + 912);
        v73 = 67110144;
        *(_DWORD *)v74 = v54;
        *(_WORD *)&v74[4] = 2048;
        *(_QWORD *)&v74[6] = v55;
        *(_WORD *)&v74[14] = 2048;
        *(_QWORD *)&v74[16] = v56;
        *(_WORD *)&v74[24] = 2048;
        *(_QWORD *)&v74[26] = v57;
        *(_WORD *)&v74[34] = 2048;
        *(_QWORD *)&v74[36] = v58;
        LODWORD(v64) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] starting off with published run metrics,runCount,%d,publishedDuration,%f,publishedDistance,%f,publishedElevation,%f,maxSpeed,%f", &v73, v64, v65, v66, *(double *)&v67);
        v45 = (uint8_t *)v59;
        sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v59);
LABEL_64:
        if (v45 != buf)
          free(v45);
      }
    }
  }
  else
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v43 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "[live data] couldn't query db for published runs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      LOWORD(v73) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 16, "[live data] couldn't query db for published runs", &v73, 2);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 0, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v44);
      goto LABEL_64;
    }
  }
  if (__p)
  {
    v69 = (double *)__p;
    operator delete(__p);
  }
  if (v5)
  {
    v61 = (unint64_t *)&v5->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1013271E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100261F44((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_101327224(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  double v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  double v20;
  _BYTE v21[24];
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;

  v3 = *(_BYTE *)(a1 + 896);
  if (!v3)
    goto LABEL_10;
  if (!sub_1013274F4(a1))
  {
    v3 = 0;
LABEL_10:
    *(_BYTE *)a2 = 0;
    goto LABEL_11;
  }
  v5 = *(double *)(a1 + 832) + *(double *)(a1 + 856);
  v6 = *(double *)(a1 + 816) + *(double *)(a1 + 840) + *(double *)(a1 + 864);
  v7 = *(double *)(a1 + 824) + *(double *)(a1 + 848) + *(double *)(a1 + 872);
  v8 = *(double *)(a1 + 880);
  v9 = *(_QWORD *)(a1 + 616);
  v10 = *(_DWORD *)(a1 + 904) + 1;
  v11 = *(_QWORD *)(a1 + 912);
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v12 = v5 + v8;
  v13 = qword_10229FE28;
  v14 = v7 / v6;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(a1 + 904) + 1;
    *(_DWORD *)buf = 67110656;
    v28 = v15;
    v29 = 2048;
    v30 = v9;
    v31 = 2048;
    v32 = v7;
    v33 = 2048;
    v34 = v12;
    v35 = 2048;
    v36 = v14;
    v37 = 2048;
    v38 = v11;
    v39 = 1024;
    v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[live data] sending update,pendingRunCount,%d,updateTime,%f,distance,%f,vertical,%f,speed,%f,maxSpeed,%f,runCount,%d", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v16 = *(_DWORD *)(a1 + 904) + 1;
    LODWORD(v20) = 67110656;
    HIDWORD(v20) = v16;
    *(_WORD *)v21 = 2048;
    *(_QWORD *)&v21[2] = v9;
    *(_WORD *)&v21[10] = 2048;
    *(double *)&v21[12] = v7;
    *(_WORD *)&v21[20] = 2048;
    *(_WORD *)&v21[22] = LOWORD(v12);
    v22 = v14;
    v23 = 2048;
    v24 = v11;
    v25 = 1024;
    v26 = v10;
    LODWORD(v19) = 64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] sending update,pendingRunCount,%d,updateTime,%f,distance,%f,vertical,%f,speed,%f,maxSpeed,%f,runCount,%d", &v20, v19, v20, *(double *)v21, *(double *)&v21[8], *(double *)&v21[16], *(_QWORD *)&v12 >> 16);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "std::optional<CLLiveSkiData> CLSkiLiveDataController::tick()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)a2 = v9;
  *(double *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 32) = v10;
  v3 = 1;
  *(_QWORD *)(a2 + 40) = v11;
LABEL_11:
  *(_BYTE *)(a2 + 48) = v3;
}

BOOL sub_1013274F4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  double v43;
  double v44;
  NSObject *v45;
  NSObject *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  const char *v53;
  uint8_t *v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  uint8_t *v68;
  double v69;
  double v70;
  double v71;
  _BYTE v72[48];
  _BYTE v73[30];
  __int16 v74;
  double v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  double v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  double v83;
  uint8_t buf[4];
  _BYTE v85[44];
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  double v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  double v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  double v101;

  if (!*(_BYTE *)(a1 + 64)
    || !*(_BYTE *)(a1 + 136)
    || !*(_BYTE *)(a1 + 208)
    || !*(_BYTE *)(a1 + 408)
    || !*(_BYTE *)(a1 + 608)
    || !*(_BYTE *)(a1 + 808)
    || !*(_BYTE *)(a1 + 896))
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v11 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
    {
      v12 = *(unsigned __int8 *)(a1 + 408);
      v13 = *(unsigned __int8 *)(a1 + 808);
      v14 = *(unsigned __int8 *)(a1 + 64);
      v15 = *(unsigned __int8 *)(a1 + 208);
      v16 = *(unsigned __int8 *)(a1 + 896);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)v85 = v12;
      *(_WORD *)&v85[4] = 1024;
      *(_DWORD *)&v85[6] = v13;
      *(_WORD *)&v85[10] = 1024;
      *(_DWORD *)&v85[12] = v14;
      *(_WORD *)&v85[16] = 1024;
      *(_DWORD *)&v85[18] = v15;
      *(_WORD *)&v85[22] = 1024;
      *(_DWORD *)&v85[24] = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[live data] invalid update, odometer validity, %d, %d, elevation validity, %d, %d, tracking state %d", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v9 = qword_10229FE28;
      v48 = *(unsigned __int8 *)(a1 + 408);
      v49 = *(unsigned __int8 *)(a1 + 808);
      v50 = *(unsigned __int8 *)(a1 + 64);
      v51 = *(unsigned __int8 *)(a1 + 208);
      v52 = *(unsigned __int8 *)(a1 + 896);
      *(_DWORD *)v72 = 67110144;
      *(_DWORD *)&v72[4] = v48;
      *(_WORD *)&v72[8] = 1024;
      *(_DWORD *)&v72[10] = v49;
      *(_WORD *)&v72[14] = 1024;
      *(_DWORD *)&v72[16] = v50;
      *(_WORD *)&v72[20] = 1024;
      *(_DWORD *)&v72[22] = v51;
      *(_WORD *)&v72[26] = 1024;
      *(_DWORD *)&v72[28] = v52;
      LODWORD(v69) = 32;
      v10 = "[live data] invalid update, odometer validity, %d, %d, elevation validity, %d, %d, tracking state %d";
      v41 = 1;
      goto LABEL_72;
    }
    return result;
  }
  v2 = *(_DWORD *)(a1 + 160);
  v3 = *(_DWORD *)(a1 + 164);
  v4 = *(double *)(a1 + 152);
  v5 = (double)(v3 - *(_DWORD *)(a1 + 92));
  v6 = ((double)(v2 - *(_DWORD *)(a1 + 88)) - v5) / (v4 - *(double *)(a1 + 80));
  if (v6 > -39.9287987)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v7 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)v85 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[live data] sample failed descent rate threshold, %f", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v9 = qword_10229FE28;
      *(_DWORD *)v72 = 134217984;
      *(double *)&v72[4] = v6;
      LODWORD(v69) = 12;
      v10 = "[live data] sample failed descent rate threshold, %f";
LABEL_40:
      v41 = 0;
LABEL_72:
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, v41, v10, v72, *(_QWORD *)&v69);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v53);
      if (v54 != buf)
        free(v54);
      return 0;
    }
    return result;
  }
  *(double *)&v17 = (double)v2;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  LODWORD(v17) = *(_DWORD *)(a1 + 20);
  v18 = ((double)v3 - (double)v2 + (double)*(unint64_t *)&v5 - (double)v17) / 100.0;
  v19 = *(double *)(a1 + 664) - *(double *)(a1 + 264);
  v20 = v19 * v19 + v18 * v18;
  v21 = vabdd_f64(*(double *)(a1 + 616), *(double *)(a1 + 216));
  v22 = vabdd_f64(v4, *(double *)(a1 + 8));
  if (qword_10229FE20 != -1)
  {
    v71 = v22;
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v22 = v71;
  }
  v23 = fabs(v18);
  v24 = fmax(v21, v22);
  v25 = qword_10229FE28;
  v26 = sqrt(v20);
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    v27 = *(_DWORD *)(a1 + 904) + 1;
    v28 = *(double *)(a1 + 8);
    *(_QWORD *)&v85[16] = *(_QWORD *)(a1 + 152);
    *(double *)&v85[6] = v28;
    v29 = *(double *)&v85[16] - v28;
    v30 = *(double *)(a1 + 216);
    v87 = *(double *)(a1 + 616);
    *(double *)&v85[36] = v30;
    v31 = v87 - v30;
    v32 = *(_QWORD *)(a1 + 824);
    v33 = *(_QWORD *)(a1 + 832);
    v34 = *(_QWORD *)(a1 + 816);
    *(_DWORD *)buf = 67112192;
    *(_DWORD *)v85 = v27;
    *(_WORD *)&v85[4] = 2048;
    *(_WORD *)&v85[14] = 2048;
    *(_WORD *)&v85[24] = 2048;
    *(double *)&v85[26] = v29;
    *(_WORD *)&v85[34] = 2048;
    v86 = 2048;
    v88 = 2048;
    v89 = v31;
    v90 = 2048;
    v91 = v32;
    v92 = 2048;
    v93 = v26;
    v94 = 2048;
    v95 = v33;
    v96 = 2048;
    v97 = v23;
    v98 = 2048;
    v99 = v34;
    v100 = 2048;
    v101 = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "[live data] intermediates,pendingRunCount,%d, elevationAnchorTime,%f,elevationCurrentTime,%f,elevationDelta,%f,odometerAnchorTime,%f,odometerCurrentTime,%f,odometerDelta,%f,currentDistance,%f,proposedDistance,%f,currentVertical,%f,proposedVertical,%f,currentDuration,%f,proposedDuration,%f", buf, 0x80u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v55 = *(_DWORD *)(a1 + 904) + 1;
    v56 = *(double *)(a1 + 8);
    *(_QWORD *)&v72[20] = *(_QWORD *)(a1 + 152);
    *(double *)&v72[10] = v56;
    v57 = *(double *)&v72[20] - v56;
    v58 = *(double *)(a1 + 216);
    *(_QWORD *)&v73[2] = *(_QWORD *)(a1 + 616);
    *(double *)&v72[40] = v58;
    v59 = *(double *)&v73[2] - v58;
    v60 = *(_QWORD *)(a1 + 824);
    v61 = *(_QWORD *)(a1 + 832);
    v62 = *(_QWORD *)(a1 + 816);
    *(_DWORD *)v72 = 67112192;
    *(_DWORD *)&v72[4] = v55;
    *(_WORD *)&v72[8] = 2048;
    *(_WORD *)&v72[18] = 2048;
    *(_WORD *)&v72[28] = 2048;
    *(double *)&v72[30] = v57;
    *(_WORD *)&v72[38] = 2048;
    *(_WORD *)v73 = 2048;
    *(_WORD *)&v73[10] = 2048;
    *(double *)&v73[12] = v59;
    *(_WORD *)&v73[20] = 2048;
    *(_QWORD *)&v73[22] = v60;
    v74 = 2048;
    v75 = v26;
    v76 = 2048;
    v77 = v61;
    v78 = 2048;
    v79 = v23;
    v80 = 2048;
    v81 = v62;
    v82 = 2048;
    v83 = v24;
    LODWORD(v69) = 128;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "[live data] intermediates,pendingRunCount,%d, elevationAnchorTime,%f,elevationCurrentTime,%f,elevationDelta,%f,odometerAnchorTime,%f,odometerCurrentTime,%f,odometerDelta,%f,currentDistance,%f,proposedDistance,%f,currentVertical,%f,proposedVertical,%f,currentDuration,%f,proposedDuration,%f", v72, v69, v70, v71, *(double *)v72, *(double *)&v72[8], *(double *)&v72[16], *(double *)&v72[24], *(double *)&v72[32],
      *(double *)&v72[40],
      *(double *)v73,
      *(double *)&v73[8],
      *(double *)&v73[16]);
    v64 = (uint8_t *)v63;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v63);
    if (v64 != buf)
      free(v64);
  }
  v35 = *(double *)(a1 + 848);
  if (v35 <= 0.0 && *(double *)(a1 + 856) <= 0.0)
  {
LABEL_47:
    if (v24 >= *(double *)(a1 + 816)
      && (v43 = *(double *)(a1 + 824), v26 >= v43)
      && (v44 = *(double *)(a1 + 832), v23 >= v44))
    {
      if (v26 == v43 && v23 == v44)
      {
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
        v47 = qword_10229FE28;
        if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[live data] skipping update because it's unchanged", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE20 != -1)
            dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
          v9 = qword_10229FE28;
          *(_WORD *)v72 = 0;
          LODWORD(v69) = 2;
          v10 = "[live data] skipping update because it's unchanged";
          goto LABEL_40;
        }
        return result;
      }
    }
    else
    {
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v45 = qword_10229FE28;
      if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "[live data] metrics should be monotonically increasing!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
        *(_WORD *)v72 = 0;
        LODWORD(v69) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 16, "[live data] metrics should be monotonically increasing!", v72, *(_QWORD *)&v69);
        v66 = (uint8_t *)v65;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v65);
        if (v66 != buf)
          free(v66);
      }
    }
    *(double *)(a1 + 816) = v24;
    *(double *)(a1 + 824) = v26;
    result = 1;
    *(double *)(a1 + 832) = v23;
    return result;
  }
  if (v35 <= v26 && *(double *)(a1 + 856) <= v23)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v42 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[live data] resetting overhead as we've reconciled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      *(_WORD *)v72 = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] resetting overhead as we've reconciled", v72, *(_QWORD *)&v69);
      v68 = (uint8_t *)v67;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v67);
      if (v68 != buf)
        free(v68);
    }
    *(_QWORD *)(a1 + 840) = 0;
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 856) = 0;
    goto LABEL_47;
  }
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v36 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    v37 = *(_QWORD *)(a1 + 848);
    v38 = *(_QWORD *)(a1 + 856);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v85 = v37;
    *(_WORD *)&v85[8] = 2048;
    *(_QWORD *)&v85[10] = v38;
    *(_WORD *)&v85[18] = 2048;
    *(double *)&v85[20] = v26;
    *(_WORD *)&v85[28] = 2048;
    *(double *)&v85[30] = v23;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[live data] still have overhead to make up, overhead distance,%f,overhead vertical,%f,proposed distance,%f,proposed vertical,%f", buf, 0x2Au);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v9 = qword_10229FE28;
    v39 = *(_QWORD *)(a1 + 848);
    v40 = *(_QWORD *)(a1 + 856);
    *(_DWORD *)v72 = 134218752;
    *(_QWORD *)&v72[4] = v39;
    *(_WORD *)&v72[12] = 2048;
    *(_QWORD *)&v72[14] = v40;
    *(_WORD *)&v72[22] = 2048;
    *(double *)&v72[24] = v26;
    *(_WORD *)&v72[32] = 2048;
    *(double *)&v72[34] = v23;
    LODWORD(v69) = 42;
    v10 = "[live data] still have overhead to make up, overhead distance,%f,overhead vertical,%f,proposed distance,%f,pro"
          "posed vertical,%f";
    goto LABEL_40;
  }
  return result;
}

void sub_101328054(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)buf = 134218496;
    v20 = v5;
    v21 = 1024;
    v22 = v6;
    v23 = 1024;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] feeding elevation,startTime,%f,elevationUp,%u,elevationDown,%u", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a2 + 20);
    v13 = 134218496;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "[live data] feeding elevation,startTime,%f,elevationUp,%u,elevationDown,%u", COERCE_DOUBLE(&v13), 24);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedElevation(const CLElevationChangeEntry &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_101328248(a1, a1, (double *)a2);
}

void sub_101328248(uint64_t a1, uint64_t a2, double *a3)
{
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(_BYTE *)(a1 + 896))
  {
    v5 = (__int128 *)(a2 + 144);
    if (*(_BYTE *)(a2 + 208))
    {
      if (*(double *)(a2 + 152) != a3[1])
      {
        v6 = *v5;
        *(_OWORD *)(a2 + 88) = *(_OWORD *)(a2 + 160);
        v7 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a2 + 120) = v7;
        *(_BYTE *)(a2 + 136) = *(_BYTE *)(a2 + 208);
        *(_OWORD *)(a2 + 72) = v6;
        v9 = *((_OWORD *)a3 + 2);
        v8 = *((_OWORD *)a3 + 3);
        v10 = *((_OWORD *)a3 + 1);
        *v5 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 160) = v10;
        *(_OWORD *)(a2 + 176) = v9;
        *(_OWORD *)(a2 + 192) = v8;
      }
    }
    else
    {
      v11 = *(_OWORD *)a3;
      v12 = *((_OWORD *)a3 + 1);
      v13 = *((_OWORD *)a3 + 3);
      *(_OWORD *)(a2 + 176) = *((_OWORD *)a3 + 2);
      *(_OWORD *)(a2 + 192) = v13;
      *v5 = v11;
      *(_OWORD *)(a2 + 160) = v12;
      *(_BYTE *)(a2 + 208) = 1;
    }
    if (!*(_BYTE *)(a2 + 64) && sub_101329180(a1 + 72, a1 + 144))
      sub_101326444(a2, (__int128 *)a3);
  }
  else
  {
    if (*(_BYTE *)(a2 + 64))
      *(_BYTE *)(a2 + 64) = 0;
    if (*(_BYTE *)(a2 + 136))
      *(_BYTE *)(a2 + 136) = 0;
    if (*(_BYTE *)(a2 + 208))
      *(_BYTE *)(a2 + 208) = 0;
  }
}

void sub_101328330(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    v6 = a2[6];
    v7 = a2[4];
    *(_DWORD *)buf = 134218496;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    v24 = 2048;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] feeding odometer,startTime,%f,distance,%f,speed,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v8 = *a2;
    v9 = a2[6];
    v10 = a2[4];
    v14 = 134218496;
    v15 = v8;
    v16 = 2048;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    LODWORD(v13) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "[live data] feeding odometer,startTime,%f,distance,%f,speed,%f", COERCE_DOUBLE(&v14), v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedOdometer(const CLOdometerEntry &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_10132852C(a1, a1 + 216, a2);
}

void sub_10132852C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*(_BYTE *)(a1 + 896))
  {
    v5 = (double *)(a2 + 400);
    if (*(_BYTE *)(a2 + 592))
    {
      if (*v5 != *(double *)a3)
      {
        v6 = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a2 + 248) = *(_OWORD *)(a2 + 448);
        *(_OWORD *)(a2 + 232) = v6;
        v7 = *(_OWORD *)v5;
        *(_OWORD *)(a2 + 216) = *(_OWORD *)(a2 + 416);
        v8 = *(_OWORD *)(a2 + 512);
        *(_OWORD *)(a2 + 296) = *(_OWORD *)(a2 + 496);
        *(_OWORD *)(a2 + 312) = v8;
        v9 = *(_OWORD *)(a2 + 480);
        *(_OWORD *)(a2 + 264) = *(_OWORD *)(a2 + 464);
        *(_OWORD *)(a2 + 280) = v9;
        *(_BYTE *)(a2 + 392) = *(_BYTE *)(a2 + 592);
        v10 = *(_OWORD *)(a2 + 576);
        *(_OWORD *)(a2 + 360) = *(_OWORD *)(a2 + 560);
        *(_OWORD *)(a2 + 376) = v10;
        v11 = *(_OWORD *)(a2 + 544);
        *(_OWORD *)(a2 + 328) = *(_OWORD *)(a2 + 528);
        *(_OWORD *)(a2 + 344) = v11;
        *(_OWORD *)(a2 + 200) = v7;
        v12 = *(_OWORD *)a3;
        v13 = *((_OWORD *)a3 + 1);
        v14 = *((_OWORD *)a3 + 3);
        *(_OWORD *)(a2 + 432) = *((_OWORD *)a3 + 2);
        *(_OWORD *)(a2 + 448) = v14;
        *(_OWORD *)v5 = v12;
        *(_OWORD *)(a2 + 416) = v13;
        v15 = *((_OWORD *)a3 + 4);
        v16 = *((_OWORD *)a3 + 5);
        v17 = *((_OWORD *)a3 + 7);
        *(_OWORD *)(a2 + 496) = *((_OWORD *)a3 + 6);
        *(_OWORD *)(a2 + 512) = v17;
        *(_OWORD *)(a2 + 464) = v15;
        *(_OWORD *)(a2 + 480) = v16;
        v18 = *((_OWORD *)a3 + 8);
        v19 = *((_OWORD *)a3 + 9);
        v20 = *((_OWORD *)a3 + 11);
        *(_OWORD *)(a2 + 560) = *((_OWORD *)a3 + 10);
        *(_OWORD *)(a2 + 576) = v20;
        *(_OWORD *)(a2 + 528) = v18;
        *(_OWORD *)(a2 + 544) = v19;
      }
    }
    else
    {
      v21 = *(_OWORD *)a3;
      v22 = *((_OWORD *)a3 + 1);
      v23 = *((_OWORD *)a3 + 3);
      *(_OWORD *)(a2 + 432) = *((_OWORD *)a3 + 2);
      *(_OWORD *)(a2 + 448) = v23;
      *(_OWORD *)v5 = v21;
      *(_OWORD *)(a2 + 416) = v22;
      v24 = *((_OWORD *)a3 + 4);
      v25 = *((_OWORD *)a3 + 5);
      v26 = *((_OWORD *)a3 + 7);
      *(_OWORD *)(a2 + 496) = *((_OWORD *)a3 + 6);
      *(_OWORD *)(a2 + 512) = v26;
      *(_OWORD *)(a2 + 464) = v24;
      *(_OWORD *)(a2 + 480) = v25;
      v27 = *((_OWORD *)a3 + 8);
      v28 = *((_OWORD *)a3 + 9);
      v29 = *((_OWORD *)a3 + 11);
      *(_OWORD *)(a2 + 560) = *((_OWORD *)a3 + 10);
      *(_OWORD *)(a2 + 576) = v29;
      *(_OWORD *)(a2 + 528) = v27;
      *(_OWORD *)(a2 + 544) = v28;
      *(_BYTE *)(a2 + 592) = 1;
    }
    if (!*(_BYTE *)(a2 + 192) && sub_101329180(a1 + 72, a1 + 144))
      sub_101326648(a2, a3);
  }
  else
  {
    if (*(_BYTE *)(a2 + 192))
      *(_BYTE *)(a2 + 192) = 0;
    if (*(_BYTE *)(a2 + 392))
      *(_BYTE *)(a2 + 392) = 0;
    if (*(_BYTE *)(a2 + 592))
      *(_BYTE *)(a2 + 592) = 0;
  }
}

void sub_101328678(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  CFAbsoluteTime v12;
  uint8_t buf[4];
  CFAbsoluteTime Current;

  if (a2)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v3 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[live data] resumed tracking,now,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v5 = qword_10229FE28;
      v11 = 134217984;
      v12 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 1, "[live data] resumed tracking,now,%f", COERCE_DOUBLE(&v11));
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedTrackingUpdate(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(CFAbsoluteTime *)(a1 + 888) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(a1 + 896) = 1;
  }
  else
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v4 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] paused tracking,now,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v8 = qword_10229FE28;
      v11 = 134217984;
      v12 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "[live data] paused tracking,now,%f", COERCE_DOUBLE(&v11));
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedTrackingUpdate(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (*(_BYTE *)(a1 + 896))
      *(_BYTE *)(a1 + 896) = 0;
  }
  if (*(_BYTE *)(a1 + 64))
    *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a1 + 136))
    *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a1 + 208))
    *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a1 + 408))
    *(_BYTE *)(a1 + 408) = 0;
  if (*(_BYTE *)(a1 + 608))
    *(_BYTE *)(a1 + 608) = 0;
  if (*(_BYTE *)(a1 + 808))
    *(_BYTE *)(a1 + 808) = 0;
}

void sub_1013289E0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  int v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  NSObject *v22;
  int v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  _BYTE v41[22];
  _BYTE v42[32];
  _BYTE v43[32];
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint8_t buf[4];
  _BYTE v53[10];
  _BYTE v54[10];
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;

  if (a3)
  {
    ++*(_DWORD *)(a1 + 904);
    *(double *)(a1 + 864) = *(double *)(a1 + 864) + *(double *)(a2 + 48) - *(double *)(a2 + 40);
    *(double *)(a1 + 872) = *(double *)(a2 + 56) + *(double *)(a1 + 872);
    *(double *)(a1 + 880) = *(double *)(a2 + 88) + *(double *)(a1 + 880);
  }
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
  v6 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 904);
    v8 = *(double *)a2;
    v9 = *(double *)(a2 + 40);
    v10 = *(double *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_QWORD *)(a2 + 56);
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a1 + 816);
    v15 = *(_QWORD *)(a1 + 824);
    v16 = *(_QWORD *)(a1 + 832);
    v17 = *(_QWORD *)(a1 + 864);
    v18 = *(_QWORD *)(a1 + 872);
    v19 = *(_QWORD *)(a1 + 880);
    *(_DWORD *)buf = 67112704;
    *(_DWORD *)v53 = a3;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v7;
    *(_WORD *)v54 = 2048;
    *(double *)&v54[2] = v8;
    v55 = 2048;
    v56 = v9;
    v57 = 2048;
    v58 = v10;
    v59 = 2048;
    v60 = v10 - v9;
    v61 = 2048;
    v62 = v12;
    v63 = 2048;
    v64 = v11;
    v65 = 2048;
    v66 = v13;
    v67 = 2048;
    v68 = v14;
    v69 = 2048;
    v70 = v15;
    v71 = 2048;
    v72 = v16;
    v73 = 2048;
    v74 = v17;
    v75 = 2048;
    v76 = v18;
    v77 = 2048;
    v78 = v19;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[live data] feeding published run,isValid,%d,runCount,%d,recordId,%llu,startTime,%f,endTime,%f,duration,%f,runDistance,%f,runVertical,%f,runSpeed,%f,currentDuration,%f,currentDistance,%f,currentVertical,%f,totalDuration,%f,totalDistance,%f,totalVertical,%f", buf, 0x90u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v23 = *(_DWORD *)(a1 + 904);
    v24 = *(double *)a2;
    v25 = *(double *)(a2 + 40);
    v26 = *(double *)(a2 + 48);
    v27 = *(_QWORD *)(a2 + 88);
    v28 = *(double *)(a2 + 56);
    v29 = *(_QWORD *)(a2 + 64);
    v30 = *(_QWORD *)(a1 + 816);
    v31 = *(double *)(a1 + 824);
    v32 = *(_QWORD *)(a1 + 832);
    v33 = *(_QWORD *)(a1 + 864);
    v34 = *(_QWORD *)(a1 + 872);
    v35 = *(_QWORD *)(a1 + 880);
    *(_DWORD *)v41 = 67112704;
    *(_DWORD *)&v41[4] = a3;
    *(_WORD *)&v41[8] = 1024;
    *(_DWORD *)&v41[10] = v23;
    *(_WORD *)&v41[14] = 2048;
    *(_WORD *)v42 = 2048;
    *(double *)&v42[2] = v25;
    *(_WORD *)&v42[10] = 2048;
    *(double *)&v42[12] = v26;
    *(_WORD *)&v42[20] = 2048;
    *(double *)&v42[22] = v26 - v25;
    *(_WORD *)&v42[30] = 2048;
    *(_WORD *)v43 = 2048;
    *(_QWORD *)&v43[2] = v27;
    *(_WORD *)&v43[10] = 2048;
    *(_QWORD *)&v43[12] = v29;
    *(_WORD *)&v43[20] = 2048;
    *(_QWORD *)&v43[22] = v30;
    *(_WORD *)&v43[30] = 2048;
    v44 = 2048;
    v45 = v32;
    v46 = 2048;
    v47 = v33;
    v48 = 2048;
    v49 = v34;
    v50 = 2048;
    v51 = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] feeding published run,isValid,%d,runCount,%d,recordId,%llu,startTime,%f,endTime,%f,duration,%f,runDistance,%f,runVertical,%f,runSpeed,%f,currentDuration,%f,currentDistance,%f,currentVertical,%f,totalDuration,%f,totalDistance,%f,totalVertical,%f", v41, 144, *(_QWORD *)v41, *(double *)&v41[8], v24, *(double *)v42, *(double *)&v42[8], *(double *)&v42[16], *(double *)&v42[24],
      v28,
      *(double *)v43,
      *(double *)&v43[8],
      *(double *)&v43[16],
      *(double *)&v43[24],
      v31);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedPublishedRun(const CLSkiEntry &, BOOL)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v20 = *(double *)(a2 + 56) - *(double *)(a1 + 824);
  v21 = *(double *)(a2 + 88) - *(double *)(a1 + 832);
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  if (v20 < 0.0 || v21 < 0.0)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v22 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)v53 = v20;
      *(_WORD *)&v53[8] = 2048;
      *(double *)v54 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[live data] we overestimated live updates, discounting from the next run,distanceDelta,%f,verticalDelta,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      *(_DWORD *)v41 = 134218240;
      *(double *)&v41[4] = v20;
      *(_WORD *)&v41[12] = 2048;
      *(double *)&v41[14] = v21;
      LODWORD(v40) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] we overestimated live updates, discounting from the next run,distanceDelta,%f,verticalDelta,%f", COERCE_DOUBLE(v41), v40);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedPublishedRun(const CLSkiEntry &, BOOL)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    *(double *)(a1 + 848) = fabs(v20);
    *(double *)(a1 + 856) = fabs(v21);
  }
  else
  {
    *(_QWORD *)(a1 + 856) = 0;
    *(_OWORD *)(a1 + 840) = 0u;
  }
  if (*(_BYTE *)(a1 + 64))
    *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a1 + 136))
    *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a1 + 208))
    *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a1 + 408))
    *(_BYTE *)(a1 + 408) = 0;
  if (*(_BYTE *)(a1 + 608))
    *(_BYTE *)(a1 + 608) = 0;
  if (*(_BYTE *)(a1 + 808))
    *(_BYTE *)(a1 + 808) = 0;
}

void sub_101328F30(uint64_t a1)
{
  _OWORD v1[6];

  memset(v1, 0, sizeof(v1));
  sub_1013289E0(a1, (uint64_t)v1, 0);
}

void sub_101328F90(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  double v18;

  if (*(double *)(a1 + 912) < a2)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
    v4 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 912);
      *(_DWORD *)buf = 134218240;
      v16 = v5;
      v17 = 2048;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[live data] updated max speed from %f to %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_1021AF1E0);
      v7 = *(_QWORD *)(a1 + 912);
      v11 = 134218240;
      v12 = v7;
      v13 = 2048;
      v14 = a2;
      LODWORD(v10) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "[live data] updated max speed from %f to %f", COERCE_DOUBLE(&v11), v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiLiveDataController::updateMaxSpeed(double)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  v6 = *(double *)(a1 + 912);
  if (v6 <= a2)
    v6 = a2;
  *(double *)(a1 + 912) = v6;
}

BOOL sub_101329180(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 64))
    v2 = *(_BYTE *)(a2 + 64) == 0;
  else
    v2 = 1;
  return !v2
      && ((double)(*(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 16))
        - (double)(*(_DWORD *)(a2 + 20) - *(_DWORD *)(a1 + 20)))
       / (*(double *)(a2 + 8) - *(double *)(a1 + 8)) <= -39.9287987;
}

void sub_1013291E4(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_1013292B4(id a1)
{
  qword_10230E308 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAudioAccessoryServiceSilo"));
}

void sub_101329368(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_10230E318 = 1;
}

id sub_101329558(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "onAudioAccessoryInterfaceDailyUsageCallback:data:", a1, a2);
}

void sub_10132A244(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_10132A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_10132A884(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0xC08F380000000000;
  return __dst;
}

void sub_10132A8F0(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_10132A91C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002952D4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[80 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[80 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v12 = *(_OWORD *)(a2 + 56);
  *((_DWORD *)v11 + 18) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(v11 + 56) = v12;
  v15[2] = v11 + 80;
  sub_1000F1B44(a1, v15);
  v13 = a1[1];
  sub_1000F1BB8(v15);
  return v13;
}

void sub_10132AA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F1BB8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10132AA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      v8 = *(_OWORD *)(a3 - 80);
      a3 -= 80;
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 56) = *(_DWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v9 = *(_DWORD *)(a3 + 72);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 56);
      *(_DWORD *)(v7 - 8) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 80;
      *((_QWORD *)&v15 + 1) -= 80;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_10132AB40((uint64_t)v12);
  return v10;
}

uint64_t sub_10132AB40(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10132AB74((uint64_t *)a1);
  return a1;
}

void sub_10132AB74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1005939D0(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void sub_10132ABC4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_1005939D0(v4, i - 80);
  }
}

uint64_t sub_10132AC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_100006898(a4, (__n128 *)v5);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(v5 + 24);
    sub_100006898(a4 + 32, (__n128 *)(v5 + 32));
    v7 = *(_OWORD *)(v5 + 56);
    *(_DWORD *)(a4 + 72) = *(_DWORD *)(v5 + 72);
    *(_OWORD *)(a4 + 56) = v7;
    a4 += 80;
    v5 += 80;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10132AC8C(uint64_t result, int *a2, int *a3)
{
  int *v3;
  int *v5;
  unint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int v34;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (int *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return sub_1002EB25C(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v33 = *(v3 - 1);
        v34 = *v5;
        if (v33 < *v5)
        {
          *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 31)
        return (uint64_t)sub_10132AF14(v5, v3);
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = sub_1002EB25C(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 >= *v7)
      {
        v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *v5 = *v10;
            *v10 = v9;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8)
          return result;
        while (1)
        {
          v27 = *v5;
          do
          {
            v29 = *v22++;
            v28 = v29;
          }
          while (v27 >= v29);
          v30 = v22 - 1;
          do
          {
            v32 = *--v8;
            v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8)
            break;
          *v30 = v31;
          *v8 = v28;
        }
        v5 = v22 - 1;
        if (v30 > a2)
          return result;
      }
      else
      {
        v10 = v3 - 1;
LABEL_13:
        v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          v16 = v5 + 1;
        }
        else
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = *v7;
            do
            {
              v15 = *v12++;
              v14 = v15;
            }
            while (v15 < v13);
            v16 = v12 - 1;
            do
            {
              v18 = *--v10;
              v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10)
              break;
            *v16 = v17;
            *v10 = v14;
            result = (result + 1);
            if (v16 == v7)
              v7 = v10;
          }
        }
        if (v16 != v7)
        {
          v19 = *v16;
          if (*v7 < *v16)
          {
            *v16 = *v7;
            *v7 = v19;
            result = (result + 1);
          }
        }
        if (v16 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            v24 = v16 + 1;
            while (v24 != v3)
            {
              v26 = *(v24 - 1);
              v25 = *v24++;
              if (v25 < v26)
                goto LABEL_29;
            }
          }
          else
          {
            while (v11 != v16)
            {
              v21 = *(v11 - 1);
              v20 = *v11++;
              if (v20 < v21)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          v5 = v16 + 1;
        else
          v3 = v16;
      }
    }
    while (v3 != a2);
  }
  return result;
}

int *sub_10132AF14(int *result, int *a2)
{
  int *v2;
  int v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;

  while (result != a2 - 1)
  {
    v2 = result++;
    if (v2 != a2 && result != a2)
    {
      v3 = *v2;
      v4 = result;
      v5 = v2;
      v6 = result;
      do
      {
        v8 = *v6++;
        v7 = v8;
        if (v8 < v3)
        {
          v3 = v7;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        v9 = *v2;
        *v2 = *v5;
        *v5 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_10132AF88(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_100259694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1002952D4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  sub_10132B094((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  sub_1000F1B44(a1, &v10);
  v8 = a1[1];
  sub_1000F1BB8(&v10);
  return v8;
}

void sub_10132B080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F1BB8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_10132B094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  __n128 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_10025EA00((_QWORD *)a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v5 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  sub_10027205C((_QWORD *)(a2 + 32), *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 2);
  result = *(__n128 *)(a3 + 56);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void sub_10132B104(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10132B120(__int128 *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  BOOL v36;
  unint64_t v37;
  double v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  BOOL v43;
  void **v44;
  __int128 v45;
  void *v46;
  void *v47;
  BOOL v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  BOOL v64;
  __int128 *k;
  uint64_t v66;
  double v67;
  BOOL v68;
  uint64_t v69;
  double v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  BOOL v75;
  uint64_t v76;
  double v77;
  BOOL v78;
  uint64_t v79;
  double v80;
  BOOL v81;
  void **v82;
  __int128 v83;
  void *v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  BOOL v90;
  __int128 *v91;
  BOOL v93;
  uint64_t v94;
  __int128 *v95;
  __int128 *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  BOOL v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  char *v111;
  void *v112;
  void *v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  __n128 *v117;
  unint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  BOOL v122;
  __int128 *v123;
  unint64_t v124;
  unint64_t v125;
  double v126;
  double v127;
  BOOL v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  __n128 *v132;
  __int8 *v133;
  __int128 v134;
  int64_t j;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  BOOL v142;
  unint64_t v143;
  double v144;
  BOOL v145;
  __int128 v146;
  void *v147;
  void *v148;
  int64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int64_t v159;
  unint64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  BOOL v164;
  _QWORD *v165;
  __int128 v166;
  uint64_t v167;
  __n128 *v168;
  __int128 v169;
  void *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  double v180;
  double v181;
  BOOL v182;
  void *v183;
  void *v184;
  int v185;
  uint64_t v186;
  __int128 *v187;
  __int128 *v188;
  char *v189;
  __int128 v190;
  __int128 *v191;
  unint64_t v192;
  unint64_t v193;
  double v194;
  BOOL v195;
  __int128 *v196;
  __int128 v197;
  void *v198;
  void *v199;
  char *i;
  __int128 *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  double v206;
  double v207;
  BOOL v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  char *v212;
  int v213;
  uint64_t v214;
  double v215;
  BOOL v216;
  void *v217;
  void *v218;
  unint64_t v219;
  int v220;
  uint64_t v221;
  unsigned __int32 v222;
  uint64_t v223;
  unint64_t v224;
  int v225;
  int v226;
  __n128 v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  __int128 v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  signed __int32 v247;
  uint64_t v248;
  int v249;
  __int128 v250;
  uint64_t v251;
  __int128 *v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  int v256;
  uint64_t v257;
  unint64_t v258;
  __int128 v259;
  __int128 *v260;
  __int128 *v261;
  __int128 v262;
  int v263;
  uint64_t v264[2];

  v6 = a1;
  v261 = a1;
  v260 = (__int128 *)a2;
  while (2)
  {
    v7 = a2 - (_QWORD)v6;
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v6) >> 4);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v260 = (__int128 *)(a2 - 80);
        v86 = (uint64_t)(*(_QWORD *)(a2 - 72) - *(_QWORD *)(a2 - 80)) >> 3;
        v87 = *((_QWORD *)v6 + 1) - *(_QWORD *)v6;
        if (v86 == v87 >> 3)
        {
          v88 = *(double *)(a2 - 24);
          v89 = *((double *)v6 + 7);
          v90 = v88 <= v89;
          if (v88 == v89)
            v90 = *(_DWORD *)(a2 - 8) <= *((_DWORD *)v6 + 18);
          if (v90)
            return;
        }
        else if (v86 <= v87 >> 3)
        {
          return;
        }
        sub_10132C43C(&v261, (uint64_t *)&v260);
        return;
      case 3uLL:
        v260 = (__int128 *)(a2 - 80);
        sub_10132C6F0((uint64_t)v6, (uint64_t)(v6 + 5), a2 - 80);
        return;
      case 4uLL:
        v260 = (__int128 *)(a2 - 80);
        sub_10132CC14((uint64_t)v6, (uint64_t)(v6 + 5), (uint64_t)(v6 + 10), a2 - 80);
        return;
      case 5uLL:
        v260 = (__int128 *)(a2 - 80);
        sub_10132C530((uint64_t)v6, (uint64_t)(v6 + 5), (uint64_t)(v6 + 10), (uint64_t)(v6 + 15), a2 - 80);
        return;
      default:
        if (v7 <= 1919)
        {
          v91 = v6 + 5;
          v252 = (__int128 *)a2;
          v93 = v6 == (__int128 *)a2 || v91 == (__int128 *)a2;
          if ((a4 & 1) == 0)
          {
            if (v93)
              return;
            for (i = (char *)v6 + 136; ; i += 80)
            {
              v201 = v6;
              v6 = v91;
              v203 = *((_QWORD *)v201 + 10);
              v202 = *((_QWORD *)v201 + 11);
              v204 = (v202 - v203) >> 3;
              v205 = *((_QWORD *)v201 + 1) - *(_QWORD *)v201;
              if (v204 == v205 >> 3)
                break;
              if (v204 > v205 >> 3)
                goto LABEL_291;
LABEL_305:
              v91 = v6 + 5;
              if (v6 + 5 == v252)
                return;
            }
            v206 = *((double *)v201 + 17);
            v207 = *((double *)v201 + 7);
            v208 = v206 <= v207;
            if (v206 == v207)
              v208 = *((_DWORD *)v201 + 38) <= *((_DWORD *)v201 + 18);
            if (v208)
              goto LABEL_305;
LABEL_291:
            v209 = *((_QWORD *)v201 + 12);
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v6 + 1) = 0;
            *((_QWORD *)v6 + 2) = 0;
            v210 = *((_DWORD *)v201 + 26);
            v250 = v201[7];
            v211 = *((_QWORD *)v201 + 16);
            *((_QWORD *)v201 + 15) = 0;
            *((_QWORD *)v201 + 16) = 0;
            *((_QWORD *)v201 + 14) = 0;
            v259 = *(__int128 *)((char *)v201 + 136);
            v212 = i;
            v213 = *((_DWORD *)v201 + 38);
            while (1)
            {
              sub_100006898((uint64_t)(v212 - 56), (__n128 *)(v212 - 136));
              *((_DWORD *)v212 - 8) = *((_DWORD *)v212 - 28);
              sub_100006898((uint64_t)(v212 - 24), (__n128 *)(v212 - 104));
              *(_OWORD *)v212 = *((_OWORD *)v212 - 5);
              *((_DWORD *)v212 + 4) = *((_DWORD *)v212 - 16);
              v214 = *((_QWORD *)v212 - 26) - *((_QWORD *)v212 - 27);
              if (v204 == v214 >> 3)
              {
                v215 = *((double *)v212 - 20);
                v216 = *(double *)&v259 <= v215;
                if (*(double *)&v259 == v215)
                  v216 = v213 <= *((_DWORD *)v212 - 36);
                if (v216)
                {
LABEL_300:
                  v217 = (void *)*((_QWORD *)v212 - 17);
                  if (v217)
                  {
                    *((_QWORD *)v212 - 16) = v217;
                    operator delete(v217);
                  }
                  *((_QWORD *)v212 - 17) = v203;
                  *((_QWORD *)v212 - 16) = v202;
                  *((_QWORD *)v212 - 15) = v209;
                  *((_DWORD *)v212 - 28) = v210;
                  v218 = (void *)*((_QWORD *)v212 - 13);
                  if (v218)
                  {
                    *((_QWORD *)v212 - 12) = v218;
                    operator delete(v218);
                  }
                  *(_OWORD *)(v212 - 104) = v250;
                  *((_QWORD *)v212 - 11) = v211;
                  *((_OWORD *)v212 - 5) = v259;
                  *((_DWORD *)v212 - 16) = v213;
                  goto LABEL_305;
                }
              }
              else if (v204 <= v214 >> 3)
              {
                goto LABEL_300;
              }
              v212 -= 80;
            }
          }
          if (v93)
            return;
          v94 = 0;
          v95 = v6;
LABEL_159:
          v96 = v95;
          v95 = v91;
          v97 = *((_QWORD *)v96 + 11);
          v98 = (v97 - *((_QWORD *)v96 + 10)) >> 3;
          v99 = *((_QWORD *)v96 + 1) - *(_QWORD *)v96;
          if (v98 == v99 >> 3)
          {
            v100 = *((double *)v96 + 17);
            v101 = *((double *)v96 + 7);
            v102 = v100 <= v101;
            if (v100 == v101)
              v102 = *((_DWORD *)v96 + 38) <= *((_DWORD *)v96 + 18);
            if (v102)
              goto LABEL_184;
          }
          else if (v98 <= v99 >> 3)
          {
            goto LABEL_184;
          }
          v246 = *((_QWORD *)v96 + 10);
          v231 = *((_QWORD *)v96 + 12);
          *(_QWORD *)v91 = 0;
          *((_QWORD *)v91 + 1) = 0;
          *((_QWORD *)v91 + 2) = 0;
          v226 = *((_DWORD *)v96 + 26);
          v236 = *((_QWORD *)v96 + 14);
          v241 = *(__int128 *)((char *)v96 + 120);
          *((_QWORD *)v96 + 15) = 0;
          *((_QWORD *)v96 + 16) = 0;
          *((_QWORD *)v96 + 14) = 0;
          v103 = *((double *)v96 + 17);
          v104 = *((_QWORD *)v96 + 18);
          v256 = *((_DWORD *)v96 + 38);
          sub_100006898((uint64_t)v91, (__n128 *)v96);
          *((_DWORD *)v95 + 6) = *((_DWORD *)v96 + 6);
          v105 = (uint64_t)(v96 + 2);
          sub_100006898((uint64_t)(v95 + 2), (__n128 *)v96 + 2);
          v106 = (uint64_t)v96 + 56;
          *(__int128 *)((char *)v95 + 56) = *(__int128 *)((char *)v96 + 56);
          *((_DWORD *)v95 + 18) = *((_DWORD *)v96 + 18);
          if (v96 == v6)
          {
            v96 = v6;
            goto LABEL_179;
          }
          v223 = v97;
          v107 = v94;
          while (1)
          {
            v108 = (uint64_t)v6 + v107;
            v109 = *(_QWORD *)((char *)v6 + v107 - 72) - *(_QWORD *)((char *)v6 + v107 - 80);
            if (v98 == v109 >> 3)
            {
              v110 = *(double *)(v108 - 24);
              if (v103 == v110)
              {
                if (v256 <= *(_DWORD *)((char *)v6 + v107 - 8))
                  goto LABEL_177;
              }
              else if (v103 <= v110)
              {
                v96 = (__int128 *)((char *)v6 + v107);
                v106 = (uint64_t)v6 + v107 + 56;
                v105 = (uint64_t)v6 + v107 + 32;
LABEL_177:
                v97 = v223;
LABEL_179:
                v112 = *(void **)v96;
                if (*(_QWORD *)v96)
                {
                  *((_QWORD *)v96 + 1) = v112;
                  operator delete(v112);
                }
                *(_QWORD *)v96 = v246;
                *((_QWORD *)v96 + 1) = v97;
                *((_QWORD *)v96 + 2) = v231;
                *((_DWORD *)v96 + 6) = v226;
                v113 = *(void **)v105;
                if (*(_QWORD *)v105)
                {
                  *((_QWORD *)v96 + 5) = v113;
                  operator delete(v113);
                  *(_QWORD *)(v105 + 8) = 0;
                  *(_QWORD *)(v105 + 16) = 0;
                }
                *(_QWORD *)v105 = v236;
                *(__int128 *)((char *)v96 + 40) = v241;
                *(double *)v106 = v103;
                *(_QWORD *)(v106 + 8) = v104;
                *(_DWORD *)(v106 + 16) = v256;
LABEL_184:
                v91 = v95 + 5;
                v94 += 80;
                if (v95 + 5 == v252)
                  return;
                goto LABEL_159;
              }
            }
            else if (v98 <= v109 >> 3)
            {
              goto LABEL_177;
            }
            sub_100006898(v108, (__n128 *)((char *)v6 + v107 - 80));
            v111 = (char *)v6 + v107;
            *(_DWORD *)((char *)v6 + v107 + 24) = *(_DWORD *)((char *)v6 + v107 - 56);
            v105 = (uint64_t)(v96 - 3);
            sub_100006898((uint64_t)v6 + v107 + 32, (__n128 *)((char *)v6 + v107 - 48));
            v106 = (uint64_t)v96 - 24;
            *(_OWORD *)(v111 + 56) = *(_OWORD *)(v111 - 24);
            *((_DWORD *)v111 + 18) = *((_DWORD *)v111 - 2);
            v96 -= 5;
            v107 -= 80;
            if (!v107)
            {
              v106 = (uint64_t)v6 + 56;
              v96 = v6;
              goto LABEL_177;
            }
          }
        }
        if (!a3)
        {
          v253 = a2;
          if (v6 == (__int128 *)a2)
            return;
          v114 = (v8 - 2) >> 1;
          while (1)
          {
            v115 = v114;
            if ((uint64_t)((v8 - 2) >> 1) < v114)
              goto LABEL_230;
            v116 = (2 * v114) | 1;
            v117 = (__n128 *)&v6[5 * v116];
            if (2 * v114 + 2 >= (uint64_t)v8)
              goto LABEL_199;
            v118 = (uint64_t)(v117->n128_u64[1] - v117->n128_u64[0]) >> 3;
            v119 = v117[5].n128_u64[1] - v117[5].n128_u64[0];
            if (v118 == v119 >> 3)
              break;
            if (v118 > v119 >> 3)
              goto LABEL_198;
LABEL_199:
            v123 = &v6[5 * v114];
            v124 = (uint64_t)(v117->n128_u64[1] - v117->n128_u64[0]) >> 3;
            v125 = (uint64_t)(*((_QWORD *)v123 + 1) - *(_QWORD *)v123) >> 3;
            if (v124 == v125)
            {
              v126 = v117[3].n128_f64[1];
              v127 = *((double *)&v6[5 * v115 + 3] + 1);
              v128 = v126 <= v127;
              if (v126 == v127)
                v128 = (signed __int32)v117[4].n128_u32[2] <= SDWORD2(v6[5 * v115 + 4]);
              if (!v128)
                goto LABEL_230;
            }
            else
            {
              if (v124 > v125)
                goto LABEL_230;
              v127 = *((double *)&v6[5 * v115 + 3] + 1);
            }
            v237 = *(_QWORD *)v123;
            v242 = *((_QWORD *)v123 + 1);
            v224 = *((_QWORD *)v123 + 2);
            *(_QWORD *)v123 = 0;
            *((_QWORD *)v123 + 1) = 0;
            *((_QWORD *)v123 + 2) = 0;
            v129 = (uint64_t)&v6[5 * v115];
            v130 = *(_QWORD *)(v129 + 32);
            v129 += 32;
            v232 = v130;
            v222 = *(_DWORD *)(v129 - 8);
            v227 = *(__n128 *)(v129 + 8);
            *(_QWORD *)v129 = 0;
            *(_QWORD *)(v129 + 8) = 0;
            *(_QWORD *)(v129 + 16) = 0;
            v131 = *(_QWORD *)(v129 + 32);
            v247 = *(_DWORD *)(v129 + 40);
            sub_100006898((uint64_t)v123, v117);
            *(_DWORD *)(v129 - 8) = v117[1].n128_u32[2];
            v132 = v117 + 2;
            sub_100006898(v129, v117 + 2);
            v133 = &v117[3].n128_i8[8];
            v134 = *(__int128 *)((char *)&v117[3] + 8);
            *(_DWORD *)(v129 + 40) = v117[4].n128_u32[2];
            *(_OWORD *)(v129 + 24) = v134;
            for (j = (v8 - 2) >> 1; ; j = (v8 - 2) >> 1)
            {
              if (j < v116)
                goto LABEL_225;
              v136 = (uint64_t)v117;
              v137 = 2 * v116;
              v116 = (2 * v116) | 1;
              v117 = (__n128 *)&v6[5 * v116];
              if (v137 + 2 < (uint64_t)v8)
              {
                v138 = (uint64_t)(v117->n128_u64[1] - v117->n128_u64[0]) >> 3;
                v139 = v117[5].n128_u64[1] - v117[5].n128_u64[0];
                if (v138 != v139 >> 3)
                {
                  if (v138 <= v139 >> 3)
                    goto LABEL_217;
LABEL_216:
                  v117 += 5;
                  v116 = v137 + 2;
                  goto LABEL_217;
                }
                v140 = *((double *)&v6[5 * v116 + 3] + 1);
                v141 = v117[8].n128_f64[1];
                v142 = v140 <= v141;
                if (v140 == v141)
                  v142 = SDWORD2(v6[5 * v116 + 4]) <= (signed __int32)v117[9].n128_u32[2];
                if (!v142)
                  goto LABEL_216;
              }
LABEL_217:
              v143 = (uint64_t)(v117->n128_u64[1] - v117->n128_u64[0]) >> 3;
              if (v143 == v125)
                break;
              if (v143 > v125)
                goto LABEL_224;
LABEL_223:
              sub_100006898(v136, v117);
              *(_DWORD *)(v136 + 24) = v117[1].n128_u32[2];
              v132 = v117 + 2;
              sub_100006898(v136 + 32, v117 + 2);
              v133 = &v117[3].n128_i8[8];
              v146 = *(__int128 *)((char *)&v117[3] + 8);
              *(_DWORD *)(v136 + 72) = v117[4].n128_u32[2];
              *(_OWORD *)(v136 + 56) = v146;
            }
            v144 = v117[3].n128_f64[1];
            v145 = v144 <= v127;
            if (v144 == v127)
              v145 = (signed __int32)v117[4].n128_u32[2] <= v247;
            if (v145)
              goto LABEL_223;
LABEL_224:
            v117 = (__n128 *)v136;
LABEL_225:
            v147 = (void *)v117->n128_u64[0];
            if (v117->n128_u64[0])
            {
              v117->n128_u64[1] = (unint64_t)v147;
              operator delete(v147);
            }
            v117->n128_u64[0] = v237;
            v117->n128_u64[1] = v242;
            v117[1].n128_u64[0] = v224;
            v117[1].n128_u32[2] = v222;
            v148 = (void *)v132->n128_u64[0];
            if (v132->n128_u64[0])
            {
              v117[2].n128_u64[1] = (unint64_t)v148;
              operator delete(v148);
              v132->n128_u64[1] = 0;
              v132[1].n128_u64[0] = 0;
            }
            v132->n128_u64[0] = v232;
            *(__n128 *)((char *)v117 + 40) = v227;
            *(double *)v133 = v127;
            *((_QWORD *)v133 + 1) = v131;
            *((_DWORD *)v133 + 4) = v247;
LABEL_230:
            v114 = v115 - 1;
            if (!v115)
            {
              v149 = v7 / 0x50uLL;
              while (1)
              {
                v150 = 0;
                v151 = v253;
                v152 = *(_QWORD *)v6;
                v233 = *((_QWORD *)v6 + 1);
                v228 = *((_QWORD *)v6 + 2);
                *((_QWORD *)v6 + 1) = 0;
                *((_QWORD *)v6 + 2) = 0;
                *(_QWORD *)v6 = 0;
                v153 = *((_DWORD *)v6 + 6);
                v257 = *((_QWORD *)v6 + 4);
                v248 = *((_QWORD *)v6 + 5);
                v238 = v152;
                v243 = *((_QWORD *)v6 + 6);
                *((_QWORD *)v6 + 5) = 0;
                *((_QWORD *)v6 + 6) = 0;
                *((_QWORD *)v6 + 4) = 0;
                v154 = *(__int128 *)((char *)v6 + 56);
                v263 = *((_DWORD *)v6 + 18);
                v155 = (uint64_t)v6;
                v262 = v154;
                do
                {
                  v156 = v155;
                  v157 = v150 + 1;
                  v155 += 80 * (v150 + 1);
                  v158 = 2 * v150;
                  v150 = (2 * v150) | 1;
                  v159 = v158 + 2;
                  if (v159 >= v149)
                    goto LABEL_242;
                  v160 = (uint64_t)(*(_QWORD *)(v155 + 8) - *(_QWORD *)v155) >> 3;
                  v161 = *(_QWORD *)(v155 + 88) - *(_QWORD *)(v155 + 80);
                  if (v160 != v161 >> 3)
                  {
                    if (v160 <= v161 >> 3)
                      goto LABEL_242;
LABEL_241:
                    v155 += 80;
                    v150 = v159;
                    goto LABEL_242;
                  }
                  v162 = *(double *)(v156 + 80 * v157 + 56);
                  v163 = *(double *)(v155 + 136);
                  v164 = v162 <= v163;
                  if (v162 == v163)
                    v164 = *(_DWORD *)(v156 + 80 * v157 + 72) <= *(_DWORD *)(v155 + 152);
                  if (!v164)
                    goto LABEL_241;
LABEL_242:
                  sub_100006898(v156, (__n128 *)v155);
                  *(_DWORD *)(v156 + 24) = *(_DWORD *)(v155 + 24);
                  v165 = (_QWORD *)(v155 + 32);
                  sub_100006898(v156 + 32, (__n128 *)(v155 + 32));
                  v166 = *(_OWORD *)(v155 + 56);
                  *(_DWORD *)(v156 + 72) = *(_DWORD *)(v155 + 72);
                  *(_OWORD *)(v156 + 56) = v166;
                }
                while (v150 <= (uint64_t)((unint64_t)(v149 - 2) >> 1));
                v167 = v155 + 56;
                v168 = (__n128 *)(v253 - 80);
                v253 -= 80;
                if (v155 == v151 - 80)
                {
                  v183 = *(void **)v155;
                  if (*(_QWORD *)v155)
                  {
                    *(_QWORD *)(v155 + 8) = v183;
                    operator delete(v183);
                  }
                  *(_QWORD *)v155 = v238;
                  *(_QWORD *)(v155 + 8) = v233;
                  *(_QWORD *)(v155 + 16) = v228;
                  *(_DWORD *)(v155 + 24) = v153;
                  v184 = *(void **)(v155 + 32);
                  if (v184)
                  {
                    *(_QWORD *)(v155 + 40) = v184;
                    operator delete(v184);
                  }
                  *(_QWORD *)(v155 + 32) = v257;
                  *(_QWORD *)(v155 + 40) = v248;
                  *(_QWORD *)(v155 + 48) = v243;
                  v185 = v263;
                  *(_OWORD *)v167 = v262;
                  *(_DWORD *)(v155 + 72) = v185;
                }
                else
                {
                  sub_100006898(v155, v168);
                  *(_DWORD *)(v155 + 24) = *(_DWORD *)(v151 - 56);
                  sub_100006898(v155 + 32, (__n128 *)(v151 - 48));
                  v169 = *(_OWORD *)(v151 - 24);
                  *(_DWORD *)(v155 + 72) = *(_DWORD *)(v151 - 8);
                  *(_OWORD *)v167 = v169;
                  v170 = *(void **)(v151 - 80);
                  if (v170)
                  {
                    *(_QWORD *)(v151 - 72) = v170;
                    operator delete(v170);
                  }
                  *(_QWORD *)(v151 - 80) = v238;
                  *(_QWORD *)(v151 - 72) = v233;
                  *(_QWORD *)(v151 - 64) = v228;
                  *(_DWORD *)(v151 - 56) = v153;
                  v171 = *(void **)(v151 - 48);
                  if (v171)
                  {
                    *(_QWORD *)(v151 - 40) = v171;
                    operator delete(v171);
                  }
                  v172 = v151 - 24;
                  *(_QWORD *)(v151 - 48) = v257;
                  *(_QWORD *)(v151 - 40) = v248;
                  *(_QWORD *)(v151 - 32) = v243;
                  *(_OWORD *)v172 = v262;
                  *(_DWORD *)(v172 + 16) = v263;
                  v173 = v155 + 80 - (_QWORD)v6;
                  if (v173 >= 81)
                  {
                    v174 = v173 / 0x50uLL - 2;
                    v175 = v174 >> 1;
                    v176 = (uint64_t)&v6[5 * (v174 >> 1)];
                    v177 = (uint64_t)(*(_QWORD *)(v176 + 8) - *(_QWORD *)v176) >> 3;
                    v178 = *(_QWORD *)(v155 + 8);
                    v179 = (v178 - *(_QWORD *)v155) >> 3;
                    if (v177 == v179)
                    {
                      v180 = *((double *)&v6[5 * v175 + 3] + 1);
                      v181 = *(double *)v167;
                      v182 = v180 <= *(double *)v167;
                      if (v180 == *(double *)v167)
                        v182 = SDWORD2(v6[5 * v175 + 4]) <= *(_DWORD *)(v155 + 72);
                      if (!v182)
                      {
LABEL_262:
                        v258 = (v178 - *(_QWORD *)v155) >> 3;
                        v239 = *(void **)v155;
                        v244 = *(_QWORD *)(v155 + 8);
                        v221 = *(_QWORD *)(v155 + 16);
                        *(_QWORD *)v155 = 0;
                        *(_QWORD *)(v155 + 8) = 0;
                        *(_QWORD *)(v155 + 16) = 0;
                        v220 = *(_DWORD *)(v155 + 24);
                        v229 = *(_QWORD *)(v155 + 32);
                        v234 = *(_OWORD *)(v155 + 40);
                        *(_QWORD *)(v155 + 40) = 0;
                        *(_QWORD *)(v155 + 48) = 0;
                        *v165 = 0;
                        v186 = *(_QWORD *)(v155 + 64);
                        v249 = *(_DWORD *)(v155 + 72);
                        v219 = v174;
                        sub_100006898(v155, (__n128 *)&v6[5 * (v174 >> 1)]);
                        v187 = &v6[5 * v175];
                        *(_DWORD *)(v155 + 24) = *((_DWORD *)v187 + 6);
                        v188 = v187 + 2;
                        sub_100006898((uint64_t)v165, (__n128 *)v187 + 2);
                        v189 = (char *)v187 + 56;
                        v190 = *(__int128 *)((char *)v187 + 56);
                        *(_DWORD *)(v167 + 16) = *((_DWORD *)v187 + 18);
                        *(_OWORD *)v167 = v190;
                        if (v219 >= 2)
                        {
                          while (1)
                          {
                            v192 = v175 - 1;
                            v175 = (v175 - 1) >> 1;
                            v191 = &v6[5 * v175];
                            v193 = (uint64_t)(*((_QWORD *)v191 + 1) - *(_QWORD *)v191) >> 3;
                            if (v193 == v258)
                            {
                              v194 = *((double *)&v6[5 * v175 + 3] + 1);
                              v195 = v194 <= v181;
                              if (v194 == v181)
                                v195 = SDWORD2(v6[5 * v175 + 4]) <= v249;
                              if (v195)
                                break;
                            }
                            else if (v193 <= v258)
                            {
                              break;
                            }
                            sub_100006898(v176, (__n128 *)&v6[5 * v175]);
                            v196 = &v6[5 * v175];
                            *(_DWORD *)(v176 + 24) = *((_DWORD *)v196 + 6);
                            v188 = v196 + 2;
                            sub_100006898(v176 + 32, (__n128 *)v196 + 2);
                            v189 = (char *)v196 + 56;
                            v197 = *(__int128 *)((char *)v196 + 56);
                            *(_DWORD *)(v176 + 72) = *((_DWORD *)v196 + 18);
                            *(_OWORD *)(v176 + 56) = v197;
                            v176 = (uint64_t)v196;
                            if (v192 <= 1)
                              goto LABEL_272;
                          }
                        }
                        v191 = (__int128 *)v176;
LABEL_272:
                        v198 = *(void **)v191;
                        if (*(_QWORD *)v191)
                        {
                          *((_QWORD *)v191 + 1) = v198;
                          operator delete(v198);
                        }
                        *(_QWORD *)v191 = v239;
                        *((_QWORD *)v191 + 1) = v244;
                        *((_QWORD *)v191 + 2) = v221;
                        *((_DWORD *)v191 + 6) = v220;
                        v199 = *(void **)v188;
                        if (*(_QWORD *)v188)
                        {
                          *((_QWORD *)v191 + 5) = v199;
                          operator delete(v199);
                          *((_QWORD *)v188 + 1) = 0;
                          *((_QWORD *)v188 + 2) = 0;
                        }
                        *(_QWORD *)v188 = v229;
                        *(__int128 *)((char *)v191 + 40) = v234;
                        *(double *)v189 = v181;
                        *((_QWORD *)v189 + 1) = v186;
                        *((_DWORD *)v189 + 4) = v249;
                      }
                    }
                    else if (v177 > v179)
                    {
                      v181 = *(double *)v167;
                      goto LABEL_262;
                    }
                  }
                }
                v20 = v149-- <= 2;
                if (v20)
                  return;
              }
            }
          }
          v120 = *((double *)&v6[5 * v116 + 3] + 1);
          v121 = v117[8].n128_f64[1];
          v122 = v120 <= v121;
          if (v120 == v121)
            v122 = SDWORD2(v6[5 * v116 + 4]) <= (signed __int32)v117[9].n128_u32[2];
          if (v122)
            goto LABEL_199;
LABEL_198:
          v117 += 5;
          v116 = 2 * v114 + 2;
          goto LABEL_199;
        }
        v9 = v8 >> 1;
        v10 = a2 - 80;
        if ((unint64_t)v7 < 0x2801)
        {
          sub_10132C6F0((uint64_t)&v6[5 * (v8 >> 1)], (uint64_t)v6, v10);
        }
        else
        {
          sub_10132C6F0((uint64_t)v6, (uint64_t)&v6[5 * (v8 >> 1)], v10);
          v11 = 5 * v9;
          v12 = 5 * v9;
          v13 = v12 * 16 - 80;
          sub_10132C6F0((uint64_t)(v261 + 5), (uint64_t)&v261[v12 - 5], (uint64_t)(v260 - 10));
          v12 += 5;
          sub_10132C6F0((uint64_t)(v261 + 10), (uint64_t)&v261[v12], (uint64_t)(v260 - 15));
          sub_10132C6F0((uint64_t)v261 + v13, (uint64_t)&v261[v11], (uint64_t)&v261[v12]);
          *(_QWORD *)&v262 = &v261[v11];
          sub_10132C43C(&v261, (uint64_t *)&v262);
        }
        v14 = v261;
        v251 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v16 = (uint64_t)(*((_QWORD *)v261 - 9) - *((_QWORD *)v261 - 10)) >> 3;
          v15 = *((_QWORD *)v261 + 1);
          v17 = v15 - *(_QWORD *)v261;
          if (v16 == v17 >> 3)
          {
            v18 = *((double *)v261 - 3);
            v19 = *((double *)v261 + 7);
            v20 = v18 <= v19;
            if (v18 == v19)
              v20 = *((_DWORD *)v261 - 2) <= *((_DWORD *)v261 + 18);
            if (!v20)
              goto LABEL_17;
          }
          else
          {
            if (v16 > v17 >> 3)
            {
LABEL_17:
              v225 = a4;
              goto LABEL_18;
            }
            v19 = *((double *)v261 + 7);
          }
          v54 = (unint64_t)v260;
          v264[0] = (uint64_t)v260;
          v55 = *(_QWORD *)v261;
          v56 = *((_QWORD *)v261 + 2);
          *((_QWORD *)v261 + 1) = 0;
          *((_QWORD *)v14 + 2) = 0;
          *(_QWORD *)v14 = 0;
          v255 = v14[2];
          v57 = *((_DWORD *)v14 + 6);
          v58 = *((_QWORD *)v14 + 6);
          *((_QWORD *)v14 + 4) = 0;
          *((_QWORD *)v14 + 5) = 0;
          *((_QWORD *)v14 + 6) = 0;
          v59 = *((_DWORD *)v14 + 18);
          v60 = (v15 - v55) >> 3;
          v61 = *(_QWORD *)(v54 - 80);
          v62 = *(_QWORD *)(v54 - 72);
          if (v60 == (v62 - v61) >> 3)
          {
            v63 = *(double *)(v54 - 24);
            v64 = v19 <= v63;
            if (v19 == v63)
              v64 = v59 <= *(_DWORD *)(v54 - 8);
            if (!v64)
              goto LABEL_95;
          }
          else if (v60 > (v62 - v61) >> 3)
          {
LABEL_95:
            for (k = v14 + 5; ; k += 5)
            {
              v69 = *((_QWORD *)k + 1) - *(_QWORD *)k;
              if (v60 == v69 >> 3)
              {
                v70 = *((double *)k + 7);
                v71 = v19 <= v70;
                if (v19 == v70)
                  v71 = v59 <= *((_DWORD *)k + 18);
                if (!v71)
                  goto LABEL_103;
              }
              else if (v60 > v69 >> 3)
              {
                goto LABEL_103;
              }
            }
          }
          for (k = v14 + 5; (unint64_t)k < v54; k += 5)
          {
            v66 = *((_QWORD *)k + 1) - *(_QWORD *)k;
            if (v60 == v66 >> 3)
            {
              v67 = *((double *)k + 7);
              v68 = v19 <= v67;
              if (v19 == v67)
                v68 = v59 <= *((_DWORD *)k + 18);
              if (!v68)
                break;
            }
            else if (v60 > v66 >> 3)
            {
              break;
            }
          }
LABEL_103:
          v72 = *((_QWORD *)v14 + 8);
          *(_QWORD *)&v262 = k;
          if ((unint64_t)k >= v54)
            goto LABEL_114;
          for (v54 -= 80; ; v54 -= 80)
          {
            v73 = v62 - v61;
            if (v60 == v73 >> 3)
              break;
            if (v60 <= v73 >> 3)
              goto LABEL_113;
LABEL_112:
            v61 = *(_QWORD *)(v54 - 80);
            v62 = *(_QWORD *)(v54 - 72);
          }
          v74 = *(double *)(v54 + 56);
          v75 = v19 <= v74;
          if (v19 == v74)
            v75 = v59 <= *(_DWORD *)(v54 + 72);
          if (!v75)
            goto LABEL_112;
LABEL_113:
          v264[0] = v54;
LABEL_114:
          if ((unint64_t)k >= v54)
          {
            v82 = (void **)(k - 5);
            if (k - 5 != v14)
            {
              sub_100006898((uint64_t)v14, (__n128 *)k - 5);
              *((_DWORD *)v14 + 6) = *((_DWORD *)k - 14);
              sub_100006898((uint64_t)(v14 + 2), (__n128 *)k - 3);
              v83 = *(__int128 *)((char *)k - 24);
              *((_DWORD *)v14 + 18) = *((_DWORD *)k - 2);
              *(__int128 *)((char *)v14 + 56) = v83;
            }
            v84 = *v82;
            if (*v82)
            {
              *((_QWORD *)k - 9) = v84;
              operator delete(v84);
            }
            *((_QWORD *)k - 10) = v55;
            *((_QWORD *)k - 9) = v15;
            *((_QWORD *)k - 8) = v56;
            *((_DWORD *)k - 14) = v57;
            v85 = (void *)*((_QWORD *)k - 6);
            if (v85)
            {
              *((_QWORD *)k - 5) = v85;
              operator delete(v85);
            }
            a4 = 0;
            *(k - 3) = v255;
            *((_QWORD *)k - 4) = v58;
            *((double *)k - 3) = v19;
            *((_QWORD *)k - 2) = v72;
            *((_DWORD *)k - 2) = v59;
            v6 = (__int128 *)v262;
            v261 = (__int128 *)v262;
            a3 = v251;
            goto LABEL_139;
          }
          sub_10132C43C((__int128 **)&v262, v264);
          for (k = (__int128 *)(v262 + 80); ; k += 5)
          {
            v76 = *((_QWORD *)k + 1) - *(_QWORD *)k;
            if (v60 == v76 >> 3)
            {
              v77 = *((double *)k + 7);
              v78 = v19 <= v77;
              if (v19 == v77)
                v78 = v59 <= *((_DWORD *)k + 18);
              if (!v78)
              {
LABEL_123:
                *(_QWORD *)&v262 = k;
                v54 = v264[0];
                do
                {
                  while (1)
                  {
                    v54 -= 80;
                    v264[0] = v54;
                    v79 = *(_QWORD *)(v54 + 8) - *(_QWORD *)v54;
                    if (v60 == v79 >> 3)
                      break;
                    if (v60 <= v79 >> 3)
                      goto LABEL_114;
                  }
                  v80 = *(double *)(v54 + 56);
                  v81 = v19 <= v80;
                  if (v19 == v80)
                    v81 = v59 <= *(_DWORD *)(v54 + 72);
                }
                while (!v81);
                goto LABEL_114;
              }
            }
            else if (v60 > v76 >> 3)
            {
              goto LABEL_123;
            }
          }
        }
        v225 = a4;
        v15 = *((_QWORD *)v261 + 1);
LABEL_18:
        v21 = 0;
        v22 = (unint64_t)v260;
        v264[0] = (uint64_t)v260;
        v23 = *(_QWORD *)v261;
        v24 = *((_QWORD *)v261 + 2);
        *((_QWORD *)v261 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *(_QWORD *)v14 = 0;
        v230 = *((_DWORD *)v14 + 6);
        v245 = v14[2];
        v235 = v24;
        v240 = *((_QWORD *)v14 + 6);
        *((_QWORD *)v14 + 4) = 0;
        *((_QWORD *)v14 + 5) = 0;
        *((_QWORD *)v14 + 6) = 0;
        v25 = *(__int128 *)((char *)v14 + 56);
        v26 = *((_DWORD *)v14 + 18);
        v27 = (v15 - v23) >> 3;
        while (1)
        {
          v28 = (uint64_t)(*((_QWORD *)&v14[v21 + 5] + 1) - *(_QWORD *)&v14[v21 + 5]) >> 3;
          if (v28 == v27)
            break;
          if (v28 <= v27)
            goto LABEL_27;
LABEL_26:
          v21 += 5;
        }
        v29 = *((double *)&v14[v21 + 8] + 1);
        v30 = v29 <= *(double *)&v25;
        if (v29 == *(double *)&v25)
          v30 = SDWORD2(v14[v21 + 9]) <= v26;
        if (!v30)
          goto LABEL_26;
LABEL_27:
        v31 = (unint64_t)&v14[v21 + 5];
        *(_QWORD *)&v262 = v31;
        if (v21 * 16)
        {
          do
          {
            while (1)
            {
              v33 = *(_QWORD *)(v22 - 80);
              v32 = *(_QWORD *)(v22 - 72);
              v22 -= 80;
              v34 = (v32 - v33) >> 3;
              if (v34 == v27)
                break;
              if (v34 > v27)
                goto LABEL_34;
            }
            v35 = *(double *)(v22 + 56);
            v36 = v35 <= *(double *)&v25;
            if (v35 == *(double *)&v25)
              v36 = *(_DWORD *)(v22 + 72) <= v26;
          }
          while (v36);
          goto LABEL_34;
        }
        if (v31 < v22)
        {
          do
          {
            while (1)
            {
              v51 = *(_QWORD *)(v22 - 80);
              v50 = *(_QWORD *)(v22 - 72);
              v22 -= 80;
              v52 = (v50 - v51) >> 3;
              if (v52 != v27)
                break;
              v53 = *(double *)(v22 + 56);
              if (v53 == *(double *)&v25)
              {
                if (v31 >= v22 || *(_DWORD *)(v22 + 72) > v26)
                  goto LABEL_34;
              }
              else if (v31 >= v22 || v53 > *(double *)&v25)
              {
                goto LABEL_34;
              }
            }
          }
          while (v31 < v22 && v52 <= v27);
LABEL_34:
          v264[0] = v22;
        }
        v6 = (__int128 *)v31;
        v254 = v25;
        if (v31 >= v22)
          goto LABEL_53;
        while (2)
        {
          sub_10132C43C((__int128 **)&v262, v264);
          v6 = (__int128 *)(v262 + 80);
          while (2)
          {
            v37 = (uint64_t)(*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 3;
            if (v37 != v27)
            {
              if (v37 <= v27)
                break;
              goto LABEL_44;
            }
            v38 = *((double *)v6 + 7);
            v39 = v38 <= *(double *)&v254;
            if (v38 == *(double *)&v254)
              v39 = *((_DWORD *)v6 + 18) <= v26;
            if (!v39)
            {
LABEL_44:
              v6 += 5;
              continue;
            }
            break;
          }
          *(_QWORD *)&v262 = v6;
          v40 = v264[0];
          do
          {
            while (1)
            {
              v40 -= 80;
              v264[0] = v40;
              v41 = (uint64_t)(*(_QWORD *)(v40 + 8) - *(_QWORD *)v40) >> 3;
              if (v41 == v27)
                break;
              if (v41 > v27)
                goto LABEL_52;
            }
            v42 = *(double *)(v40 + 56);
            v43 = v42 <= *(double *)&v254;
            if (v42 == *(double *)&v254)
              v43 = *(_DWORD *)(v40 + 72) <= v26;
          }
          while (v43);
LABEL_52:
          if ((unint64_t)v6 < v40)
            continue;
          break;
        }
LABEL_53:
        v44 = (void **)(v6 - 5);
        if (v6 - 5 != v14)
        {
          sub_100006898((uint64_t)v14, (__n128 *)v6 - 5);
          *((_DWORD *)v14 + 6) = *((_DWORD *)v6 - 14);
          sub_100006898((uint64_t)(v14 + 2), (__n128 *)v6 - 3);
          v45 = *(__int128 *)((char *)v6 - 24);
          *((_DWORD *)v14 + 18) = *((_DWORD *)v6 - 2);
          *(__int128 *)((char *)v14 + 56) = v45;
        }
        v46 = *v44;
        if (*v44)
        {
          *((_QWORD *)v6 - 9) = v46;
          operator delete(v46);
        }
        *((_QWORD *)v6 - 10) = v23;
        *((_QWORD *)v6 - 9) = v15;
        *((_QWORD *)v6 - 8) = v235;
        *((_DWORD *)v6 - 14) = v230;
        v47 = (void *)*((_QWORD *)v6 - 6);
        if (v47)
        {
          *((_QWORD *)v6 - 5) = v47;
          operator delete(v47);
        }
        *(v6 - 3) = v245;
        *((_QWORD *)v6 - 4) = v240;
        *(__int128 *)((char *)v6 - 24) = v254;
        *((_DWORD *)v6 - 2) = v26;
        v48 = v31 >= v22;
        --a3;
        a4 = v225;
        if (!v48)
        {
LABEL_77:
          sub_10132B120(v261, v6 - 5, v251, v225 & 1);
          a4 = 0;
          goto LABEL_78;
        }
        v49 = sub_10132C8A8((uint64_t)v261, (uint64_t)(v6 - 5));
        if (!sub_10132C8A8((uint64_t)v6, (uint64_t)v260))
        {
          if (!v49)
            goto LABEL_77;
LABEL_78:
          v261 = v6;
LABEL_139:
          a2 = (uint64_t)v260;
          continue;
        }
        if (!v49)
        {
          v260 = v6 - 5;
          v6 = v261;
          goto LABEL_139;
        }
        return;
    }
  }
}

__n128 sub_10132C43C(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  void *v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  int v15;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = *((_QWORD *)*a1 + 2);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  v6 = *((_DWORD *)v2 + 6);
  v12 = v4;
  v13 = v2[2];
  v7 = *((_QWORD *)v2 + 6);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  v14 = *(__n128 *)((char *)v2 + 56);
  v15 = *((_DWORD *)v2 + 18);
  sub_100006898((uint64_t)v2, (__n128 *)v3);
  *((_DWORD *)v2 + 6) = *(_DWORD *)(v3 + 24);
  sub_100006898((uint64_t)(v2 + 2), (__n128 *)(v3 + 32));
  v8 = *(_OWORD *)(v3 + 56);
  *((_DWORD *)v2 + 18) = *(_DWORD *)(v3 + 72);
  *(__int128 *)((char *)v2 + 56) = v8;
  v9 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v9;
    operator delete(v9);
  }
  *(_OWORD *)v3 = v12;
  *(_QWORD *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 24) = v6;
  v10 = *(void **)(v3 + 32);
  if (v10)
  {
    *(_QWORD *)(v3 + 40) = v10;
    operator delete(v10);
  }
  *(_OWORD *)(v3 + 32) = v13;
  *(_QWORD *)(v3 + 48) = v7;
  result = v14;
  *(__n128 *)(v3 + 56) = v14;
  *(_DWORD *)(v3 + 72) = v15;
  return result;
}

double sub_10132C530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  unint64_t v11;
  uint64_t v12;
  double v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  BOOL v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;

  v30 = (__int128 *)a2;
  v31 = (__int128 *)a1;
  v28 = (__int128 *)a4;
  v29 = (__int128 *)a3;
  v27 = a5;
  result = sub_10132CC14(a1, a2, a3, a4);
  v11 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  v12 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v11 == v12 >> 3)
  {
    result = *(double *)(a5 + 56);
    v13 = *(double *)(a4 + 56);
    v14 = result <= v13;
    if (result == v13)
      v14 = *(_DWORD *)(a5 + 72) <= *(_DWORD *)(a4 + 72);
    if (v14)
      return result;
  }
  else if (v11 <= v12 >> 3)
  {
    return result;
  }
  *(_QWORD *)&result = sub_10132C43C(&v28, &v27).n128_u64[0];
  v15 = (uint64_t)(*((_QWORD *)v28 + 1) - *(_QWORD *)v28) >> 3;
  v16 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v15 == v16 >> 3)
  {
    result = *((double *)v28 + 7);
    v17 = *(double *)(a3 + 56);
    v18 = result <= v17;
    if (result == v17)
      v18 = *((_DWORD *)v28 + 18) <= *(_DWORD *)(a3 + 72);
    if (v18)
      return result;
  }
  else if (v15 <= v16 >> 3)
  {
    return result;
  }
  *(_QWORD *)&result = sub_10132C43C(&v29, (uint64_t *)&v28).n128_u64[0];
  v19 = (uint64_t)(*((_QWORD *)v29 + 1) - *(_QWORD *)v29) >> 3;
  v20 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v19 == v20 >> 3)
  {
    result = *((double *)v29 + 7);
    v21 = *(double *)(a2 + 56);
    v22 = result <= v21;
    if (result == v21)
      v22 = *((_DWORD *)v29 + 18) <= *(_DWORD *)(a2 + 72);
    if (v22)
      return result;
  }
  else if (v19 <= v20 >> 3)
  {
    return result;
  }
  *(_QWORD *)&result = sub_10132C43C(&v30, (uint64_t *)&v29).n128_u64[0];
  v23 = (uint64_t)(*((_QWORD *)v30 + 1) - *(_QWORD *)v30) >> 3;
  v24 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v23 != v24 >> 3)
  {
    if (v23 <= v24 >> 3)
      return result;
    goto LABEL_29;
  }
  result = *((double *)v30 + 7);
  v25 = *(double *)(a1 + 56);
  v26 = result <= v25;
  if (result == v25)
    v26 = *((_DWORD *)v30 + 18) <= *(_DWORD *)(a1 + 72);
  if (!v26)
LABEL_29:
    *(_QWORD *)&result = sub_10132C43C(&v31, (uint64_t *)&v30).n128_u64[0];
  return result;
}

double sub_10132C6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  double result;
  double v6;
  BOOL v7;
  unint64_t v8;
  double v9;
  BOOL v10;
  unint64_t v11;
  double v12;
  double v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  BOOL v22;
  __int128 **v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;

  v27 = (__int128 *)a1;
  v25 = a3;
  v26 = (__int128 *)a2;
  v3 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v3 == v4 >> 3)
  {
    result = *(double *)(a2 + 56);
    v6 = *(double *)(a1 + 56);
    v7 = result <= v6;
    if (result == v6)
      v7 = *(_DWORD *)(a2 + 72) <= *(_DWORD *)(a1 + 72);
    if (!v7)
      goto LABEL_13;
LABEL_6:
    v8 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
    if (v8 == v3)
    {
      result = *(double *)(a3 + 56);
      v9 = *(double *)(a2 + 56);
      v10 = result <= v9;
      if (result == v9)
        v10 = *(_DWORD *)(a3 + 72) <= *(_DWORD *)(a2 + 72);
      if (v10)
        return result;
    }
    else if (v8 <= v3)
    {
      return result;
    }
    *(_QWORD *)&result = sub_10132C43C(&v26, &v25).n128_u64[0];
    v19 = (uint64_t)(*((_QWORD *)v26 + 1) - *(_QWORD *)v26) >> 3;
    v20 = *((_QWORD *)v27 + 1) - *(_QWORD *)v27;
    if (v19 == v20 >> 3)
    {
      result = *((double *)v26 + 7);
      v21 = *((double *)v27 + 7);
      v22 = result <= v21;
      if (result == v21)
        v22 = *((_DWORD *)v26 + 18) <= *((_DWORD *)v27 + 18);
      if (v22)
        return result;
    }
    else if (v19 <= v20 >> 3)
    {
      return result;
    }
    v23 = &v27;
    v24 = (uint64_t *)&v26;
    goto LABEL_38;
  }
  if (v3 <= v4 >> 3)
    goto LABEL_6;
LABEL_13:
  v11 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  if (v11 == v3)
  {
    v12 = *(double *)(a3 + 56);
    v13 = *(double *)(a2 + 56);
    v14 = v12 <= v13;
    if (v12 == v13)
      v14 = *(_DWORD *)(a3 + 72) <= *(_DWORD *)(a2 + 72);
    if (!v14)
      goto LABEL_32;
  }
  else if (v11 > v3)
  {
LABEL_32:
    v23 = &v27;
LABEL_35:
    v24 = &v25;
LABEL_38:
    *(_QWORD *)&result = sub_10132C43C(v23, v24).n128_u64[0];
    return result;
  }
  *(_QWORD *)&result = sub_10132C43C(&v27, (uint64_t *)&v26).n128_u64[0];
  v15 = (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 3;
  v16 = *((_QWORD *)v26 + 1) - *(_QWORD *)v26;
  if (v15 != v16 >> 3)
  {
    if (v15 <= v16 >> 3)
      return result;
    goto LABEL_34;
  }
  result = *(double *)(v25 + 56);
  v17 = *((double *)v26 + 7);
  v18 = result <= v17;
  if (result == v17)
    v18 = *(_DWORD *)(v25 + 72) <= *((_DWORD *)v26 + 18);
  if (!v18)
  {
LABEL_34:
    v23 = &v26;
    goto LABEL_35;
  }
  return result;
}

BOOL sub_10132C8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  __n128 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  __n128 *v23;
  __int128 *v24;
  char *v25;
  double *v26;
  __n128 *v27;
  uint64_t v28;
  double v29;
  BOOL v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int32 v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 *v40;

  v2 = a2;
  v39 = a2;
  v40 = (__int128 *)a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 80);
      v39 = a2 - 80;
      v7 = (*(_QWORD *)(a2 - 72) - v6) >> 3;
      v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (v7 != v8 >> 3)
      {
        if (v7 <= v8 >> 3)
          return result;
LABEL_42:
        sub_10132C43C(&v40, &v39);
        return 1;
      }
      v9 = *(double *)(a2 - 24);
      v10 = *(double *)(a1 + 56);
      v11 = v9 <= v10;
      if (v9 == v10)
        v11 = *(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 72);
      if (!v11)
        goto LABEL_42;
      return result;
    case 3uLL:
      sub_10132C6F0(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      sub_10132CC14(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      sub_10132C530(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      v12 = (__n128 *)(a1 + 160);
      sub_10132C6F0(a1, a1 + 80, a1 + 160);
      v13 = a1 + 240;
      if (a1 + 240 == v2)
        return 1;
      v14 = 0;
      v15 = a1 + 216;
      break;
  }
LABEL_10:
  v16 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3;
  v17 = v12->n128_u64[1] - v12->n128_u64[0];
  if (v16 == v17 >> 3)
  {
    v18 = *(double *)(v13 + 56);
    v19 = v12[3].n128_f64[1];
    v20 = v18 <= v19;
    if (v18 == v19)
      v20 = *(_DWORD *)(v13 + 72) <= (signed __int32)v12[4].n128_u32[2];
    if (v20)
      goto LABEL_36;
  }
  else
  {
    if (v16 <= v17 >> 3)
      goto LABEL_36;
    v18 = *(double *)(v13 + 56);
  }
  v34 = *(_QWORD *)v13;
  v35 = *(_QWORD *)(v13 + 8);
  v37 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  v36 = *(_DWORD *)(v13 + 24);
  v33 = *(_QWORD *)(v13 + 32);
  v38 = *(__n128 *)(v13 + 40);
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  v21 = *(_QWORD *)(v13 + 64);
  v22 = *(_DWORD *)(v13 + 72);
  sub_100006898(v13, v12);
  *(_DWORD *)(v13 + 24) = v12[1].n128_u32[2];
  v23 = v12 + 2;
  sub_100006898(v13 + 32, v12 + 2);
  *(__n128 *)(v13 + 56) = *(__n128 *)((char *)v12 + 56);
  *(_DWORD *)(v13 + 72) = v12[4].n128_u32[2];
  v24 = v40;
  if (v12 == (__n128 *)v40)
  {
    v26 = &v12[3].n128_f64[1];
    goto LABEL_31;
  }
  v25 = (char *)v15;
  while (1)
  {
    v26 = (double *)v25;
    v27 = (__n128 *)(v25 - 136);
    v28 = *((_QWORD *)v25 - 16) - *((_QWORD *)v25 - 17);
    if (v16 == v28 >> 3)
    {
      v29 = *(v26 - 10);
      v30 = v18 <= v29;
      if (v18 == v29)
        v30 = v22 <= *((_DWORD *)v26 - 16);
      if (v30)
        goto LABEL_31;
    }
    else if (v16 <= v28 >> 3)
    {
      v23 = (__n128 *)(v26 - 3);
      v12 = (__n128 *)(v26 - 7);
LABEL_31:
      v31 = (void *)v12->n128_u64[0];
      if (v12->n128_u64[0])
      {
        v12->n128_u64[1] = (unint64_t)v31;
        operator delete(v31);
      }
      v12->n128_u64[0] = v34;
      v12->n128_u64[1] = v35;
      v12[1].n128_u64[0] = v37;
      v12[1].n128_u32[2] = v36;
      v32 = (void *)v23->n128_u64[0];
      if (v23->n128_u64[0])
      {
        v12[2].n128_u64[1] = (unint64_t)v32;
        operator delete(v32);
        v23->n128_u64[1] = 0;
        v23[1].n128_u64[0] = 0;
      }
      v23->n128_u64[0] = v33;
      *(__n128 *)((char *)v12 + 40) = v38;
      *v26 = v18;
      *((_QWORD *)v26 + 1) = v21;
      *((_DWORD *)v26 + 4) = v22;
      ++v14;
      v2 = v39;
      if (v14 == 8)
        return v13 + 80 == v39;
LABEL_36:
      v12 = (__n128 *)v13;
      v15 += 80;
      v13 += 80;
      if (v13 == v2)
        return 1;
      goto LABEL_10;
    }
    sub_100006898((uint64_t)&v27[5], v27);
    *((_DWORD *)v26 - 8) = *((_DWORD *)v26 - 28);
    v23 = v12 - 3;
    sub_100006898((uint64_t)(v26 - 3), (__n128 *)(v26 - 13));
    v25 = (char *)(v26 - 10);
    *(_OWORD *)v26 = *((_OWORD *)v26 - 5);
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 - 16);
    v12 -= 5;
    if (v26 - 17 == (double *)v24)
    {
      v12 = (__n128 *)v24;
      v26 -= 10;
      goto LABEL_31;
    }
  }
}

double sub_10132CC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  unint64_t v9;
  uint64_t v10;
  double v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;

  v23 = (__int128 *)a2;
  v24 = (__int128 *)a1;
  v21 = a4;
  v22 = (__int128 *)a3;
  result = sub_10132C6F0(a1, a2, a3);
  v9 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v9 == v10 >> 3)
  {
    result = *(double *)(a4 + 56);
    v11 = *(double *)(a3 + 56);
    v12 = result <= v11;
    if (result == v11)
      v12 = *(_DWORD *)(a4 + 72) <= *(_DWORD *)(a3 + 72);
    if (v12)
      return result;
  }
  else if (v9 <= v10 >> 3)
  {
    return result;
  }
  *(_QWORD *)&result = sub_10132C43C(&v22, &v21).n128_u64[0];
  v13 = (uint64_t)(*((_QWORD *)v22 + 1) - *(_QWORD *)v22) >> 3;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13 == v14 >> 3)
  {
    result = *((double *)v22 + 7);
    v15 = *(double *)(a2 + 56);
    v16 = result <= v15;
    if (result == v15)
      v16 = *((_DWORD *)v22 + 18) <= *(_DWORD *)(a2 + 72);
    if (v16)
      return result;
  }
  else if (v13 <= v14 >> 3)
  {
    return result;
  }
  *(_QWORD *)&result = sub_10132C43C(&v23, (uint64_t *)&v22).n128_u64[0];
  v17 = (uint64_t)(*((_QWORD *)v23 + 1) - *(_QWORD *)v23) >> 3;
  v18 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v17 != v18 >> 3)
  {
    if (v17 <= v18 >> 3)
      return result;
    goto LABEL_22;
  }
  result = *((double *)v23 + 7);
  v19 = *(double *)(a1 + 56);
  v20 = result <= v19;
  if (result == v19)
    v20 = *((_DWORD *)v23 + 18) <= *(_DWORD *)(a1 + 72);
  if (!v20)
LABEL_22:
    *(_QWORD *)&result = sub_10132C43C(&v24, (uint64_t *)&v23).n128_u64[0];
  return result;
}

double sub_10132CD68(uint64_t a1)
{
  return *(double *)a1;
}

void sub_10132CD78(uint64_t *a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;

  v4 = operator new(0x28uLL);
  v4[1] = *(_OWORD *)a2;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 16);
  v5 = *a1;
  *(_QWORD *)v4 = *a1;
  *((_QWORD *)v4 + 1) = a1;
  *(_QWORD *)(v5 + 8) = v4;
  *a1 = (uint64_t)v4;
  v6 = a1[2];
  v7 = __CFADD__(v6, 1);
  v8 = v6 + 1;
  a1[2] = v8;
  if (!v7)
  {
    do
    {
      v9 = (double *)a1[1];
      if (vabdd_f64(v9[2], *(double *)a2) <= 10.0)
        break;
      v10 = *v9;
      *(double *)(*(_QWORD *)&v10 + 8) = v9[1];
      **((double **)v9 + 1) = v10;
      a1[2] = v8 - 1;
      operator delete(v9);
      v8 = a1[2];
    }
    while (v8);
  }
  v11 = a1[1];
  if ((uint64_t *)v11 != a1)
  {
    v12 = 0;
    v13 = 0.0;
    do
    {
      v14 = *(double *)(v11 + 24);
      v12 += v14 >= 0.0 && *(double *)(v11 + 32) <= 50.0;
      if (v14 < 0.0 || *(double *)(v11 + 32) > 50.0)
        v14 = -0.0;
      v13 = v13 + v14;
      v11 = *(_QWORD *)(v11 + 8);
    }
    while ((uint64_t *)v11 != a1);
  }
}

int64_t sub_10132D308(id a1, id a2, id a3)
{
  return (int64_t)objc_msgSend(a2, "compare:", a3);
}

void sub_10132D380(id a1)
{
  qword_10230E328 = &off_102220B40;
}

void sub_10132D414(id a1)
{
  qword_10230E338 = &off_102220B58;
}

void sub_10132D4A8(id a1)
{
  qword_10230E348 = &off_102220B70;
}

void sub_10132D53C(id a1)
{
  qword_10230E358 = &off_102220B88;
}

void sub_10132D5C8(id a1)
{
  qword_10230E368 = &off_102220BA0;
}

void sub_10132D5EC(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_10132D618(_QWORD *a1@<X8>)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  v10 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001E4B84(*(uint64_t *)buf, "GpsAssistanceTime", &v10);
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v10 == 1)
    v6 = 1;
  else
    v6 = v2 ^ 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AF638);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GpsAssistanceTime,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v11[0] = 67109120;
    v11[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GpsAssistanceTime,%d", v11);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssAssistanceTime> CLGnssAssistanceTime::create(id<CLIntersiloUniverse>, CLGnssAssistanceTime::GnssTimeAssistanceCallback)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v6)
    operator new();
  *a1 = 0;
}

void sub_10132D8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == v16)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  operator delete();
}

void sub_10132D928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  sub_100270E34(a1 + 24, a3);
  *(_OWORD *)(a1 + 56) = xmmword_101C4B760;
  if (*(_QWORD *)(a1 + 48))
  {
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10194D850(qword_1022A0070 == -1);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGnssAssistanceTime.mm", 47, "CLGnssAssistanceTime");
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021AF638);
LABEL_3:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "initializing CLGnssAssistanceTime Feature", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v8[0] = 0;
    LODWORD(v7) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "initializing CLGnssAssistanceTime Feature", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceTime::CLGnssAssistanceTime(id<CLIntersiloUniverse>, GnssTimeAssistanceCallback)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100694DD8();
}

void sub_10132DB6C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)v1[6];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *v1;
  *v1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(exception_object);
}

void sub_10132DBD4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLGnssAssistanceTime::onTimeNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF658);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceTime::onTimeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF658);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceTime::onTimeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_10132DF3C(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10132DD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10132DDA4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AF638);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssAssistanceTime,singleShot", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssAssistanceTime,singleShot", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::singleShot()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100071E60(a1);
}

void sub_10132DF3C(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (*a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a3;
      *(_DWORD *)buf = 67109120;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unexpected message received, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v6 = *a3;
      v13[0] = 67109120;
      v13[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Unexpected message received, %d", v13);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::onTimeNotification(int, const CLTimeManager_Type::Notification &, const CLTimeManager_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "kNotificationReferenceTime message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "kNotificationReferenceTime message", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::onTimeNotification(int, const CLTimeManager_Type::Notification &, const CLTimeManager_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_100071E60(a1);
  }
}

void sub_10132E228(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10132E254(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10132E280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10230E388 != -1)
    dispatch_once(&qword_10230E388, &stru_1021AF678);
  off_1022FF648 = (uint64_t (*)())dlsym((void *)qword_10230E390, "TMGetReferenceTime");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1022FF648)(a1, a2, a3);
}

void sub_10132E300(id a1)
{
  qword_10230E390 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreTime.framework/CoreTime", 2);
}

void sub_10132E328(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  int v5;
  __int16 *v6;
  float v7;
  uint64_t j;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  __int16 v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19[150];

  v3 = 0;
  v17 = 0u;
  v18 = 0u;
  do
  {
    v19[v3] = *(float *)(a1 + 4 * dword_101C4B770[v3]);
    ++v3;
  }
  while (v3 != 150);
  for (i = 0; i != 1600; ++i)
  {
    v5 = word_101C4B9C8[i];
    if (v5 < 0)
    {
      ++v5;
    }
    else
    {
      do
      {
        if (v19[aM_0[v5]] <= flt_101C6EAB4[v5])
          v6 = (__int16 *)((char *)&unk_101C57D16 + 2 * v5);
        else
          v6 = &asc_101C4C648[v5];
        v5 = *v6;
      }
      while (v5 > 0);
    }
    *((float *)&v17 + (i & 7)) = flt_101C85850[-v5] + *((float *)&v17 + (i & 7));
  }
  v7 = *(float *)&v17;
  for (j = 4; j != 32; j += 4)
  {
    if (*(float *)((char *)&v17 + j) > v7)
      v7 = *(float *)((char *)&v17 + j);
  }
  v9 = 0;
  v10 = 0.0;
  do
  {
    v11 = expf(*(float *)((char *)&v17 + v9) - v7);
    *(float *)((char *)&v17 + v9) = v11;
    v10 = v10 + v11;
    v9 += 4;
  }
  while (v9 != 32);
  v12 = 0;
  v13 = 0;
  v14 = -3.4028e38;
  do
  {
    v15 = *((float *)&v17 + v12) / v10;
    *((float *)&v17 + v12) = v15;
    if (v15 > v14)
    {
      v13 = v12;
      v14 = v15;
    }
    ++v12;
  }
  while (v12 != 8);
  *(_QWORD *)a2 = qword_101C9DEF0[v13];
  *(float *)(a2 + 8) = v14;
  v16 = v18;
  *(_OWORD *)(a2 + 12) = v17;
  *(_OWORD *)(a2 + 28) = v16;
}

uint64_t sub_10132E4FC(uint64_t a1)
{
  sub_10055D4D0(a1 + 40);
  return sub_1008813BC(a1);
}

char *sub_10132E524()
{
  return &byte_1022FF658;
}

char *sub_10132E530()
{
  return &byte_1022FF660;
}

BOOL sub_10132E53C(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  unsigned __int8 *v10;
  const char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  _OWORD buf[102];

  if (!*(_BYTE *)(a1 + 110))
  {
    HIBYTE(v14) = 0;
    sub_1001E4804(buf);
    v3 = sub_1001E4874(*(uint64_t *)&buf[0], "isWifiPositionWithAssociatedApHomeLoiEnabled", (BOOL *)&v14 + 7);
    v4 = v3;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (!*((_QWORD *)&buf[0] + 1))
      goto LABEL_7;
    v6 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v4)
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      if (v3)
      {
LABEL_8:
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
        v8 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          if (HIBYTE(v14))
            v9 = "true";
          else
            v9 = "false";
          LODWORD(buf[0]) = 136380675;
          *(_QWORD *)((char *)buf + 4) = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiPositionWithAssociatedApHomeLoiEnabled to %{private}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
          if (HIBYTE(v14))
            v12 = "true";
          else
            v12 = "false";
          v15 = 136380675;
          v16 = v12;
          LODWORD(v14) = 12;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning defaults write isWifiPositionWithAssociatedApHomeLoiEnabled to %{private}s", &v15, v14);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLWifi1Settings::WifiPositionWithAssociatedAp::isHomeLoiEnabledBySettings()", "%s\n", v13);
          if (v13 != (char *)buf)
            free(v13);
        }
        v10 = (unsigned __int8 *)&v14 + 7;
        goto LABEL_19;
      }
    }
    v10 = (unsigned __int8 *)(a1 + 106);
LABEL_19:
    v2 = *v10;
    *(_WORD *)(a1 + 109) = v2 | 0x100;
    return v2 != 0;
  }
  v2 = *(unsigned __int8 *)(a1 + 109);
  return v2 != 0;
}

void sub_10132E7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10132E7D0(id a1)
{
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  char *v10;
  int v11;
  const char *v12;
  _OWORD buf[102];

  sub_1001E4804(buf);
  v1 = sub_1001E4874(*(uint64_t *)&buf[0], "isWifiPositionWithAssociatedApEnabled", (BOOL *)&byte_10230E39A);
  v2 = v1;
  v3 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v4 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2)
      return;
  }
  else
  {
LABEL_5:
    if (!v1)
      return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_10230E39A)
      v7 = "true";
    else
      v7 = "false";
    LODWORD(buf[0]) = 136380675;
    *(_QWORD *)((char *)buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiPositionWithAssociatedApEnabled to %{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
    if (byte_10230E39A)
      v8 = "true";
    else
      v8 = "false";
    v11 = 136380675;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning defaults write isWifiPositionWithAssociatedApEnabled to %{private}s", &v11, 12);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> CLWifi1Settings::WifiPositionWithAssociatedAp::isEnabledByDefaultsWrite()_block_invoke", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  unk_10230E398 = byte_10230E39A | 0x100;
}

void sub_10132EA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10132EA48(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;

  v2 = atomic_load((unsigned __int8 *)&qword_10230E3B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230E3B0))
  {
    unk_10230E3A8 = sub_10132EAD4();
    __cxa_guard_release(&qword_10230E3B0);
  }
  v3 = (unsigned __int8 *)&unk_10230E3A8;
  if (!byte_10230E3A9)
    v3 = (unsigned __int8 *)(a1 + 107);
  return *v3;
}

void sub_10132EABC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E3B0);
  _Unwind_Resume(a1);
}

uint64_t sub_10132EAD4()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  const char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  _OWORD buf[102];

  HIBYTE(v12) = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)&buf[0], "isWifiHarvestEnabled", (BOOL *)&v12 + 7);
  v1 = v0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1)
        goto LABEL_6;
LABEL_16:
      v7 = 0;
      v8 = 0;
      return v8 | (v7 << 8);
    }
  }
  if (!v0)
    goto LABEL_16;
LABEL_6:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12))
      v6 = "true";
    else
      v6 = "false";
    LODWORD(buf[0]) = 136380675;
    *(_QWORD *)((char *)buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiHarvestEnabled to %{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
    if (HIBYTE(v12))
      v10 = "true";
    else
      v10 = "false";
    v13 = 136380675;
    v14 = v10;
    LODWORD(v12) = 12;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning defaults write isWifiHarvestEnabled to %{private}s", &v13, v12);
    sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> isWifiHarvestEnabledByDefaultsWrite()", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  v7 = 1;
  v8 = HIBYTE(v12);
  return v8 | (v7 << 8);
}

void sub_10132ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10132ED44(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;

  v2 = atomic_load((unsigned __int8 *)&qword_10230E3C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230E3C0))
  {
    unk_10230E3B8 = sub_10132EDD0();
    __cxa_guard_release(&qword_10230E3C0);
  }
  v3 = (unsigned __int8 *)&unk_10230E3B8;
  if (!byte_10230E3B9)
    v3 = (unsigned __int8 *)(a1 + 108);
  return *v3;
}

void sub_10132EDB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E3C0);
  _Unwind_Resume(a1);
}

uint64_t sub_10132EDD0()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  const char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  _OWORD buf[102];

  HIBYTE(v12) = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)&buf[0], "isWifiHarvestUsed", (BOOL *)&v12 + 7);
  v1 = v0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1)
        goto LABEL_6;
LABEL_16:
      v7 = 0;
      v8 = 0;
      return v8 | (v7 << 8);
    }
  }
  if (!v0)
    goto LABEL_16;
LABEL_6:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12))
      v6 = "true";
    else
      v6 = "false";
    LODWORD(buf[0]) = 136380675;
    *(_QWORD *)((char *)buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiHarvestUsed to %{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
    if (HIBYTE(v12))
      v10 = "true";
    else
      v10 = "false";
    v13 = 136380675;
    v14 = v10;
    LODWORD(v12) = 12;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning defaults write isWifiHarvestUsed to %{private}s", &v13, v12);
    sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> isWifiHarvestUsedByDefaultsWrite()", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  v7 = 1;
  v8 = HIBYTE(v12);
  return v8 | (v7 << 8);
}

void sub_10132F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10132F040()
{
  return &unk_102313F50;
}

uint64_t *sub_10132F04C()
{
  return &qword_1022FF768;
}

int *sub_10132F058()
{
  return &dword_1022FF788;
}

char *sub_10132F064()
{
  return &byte_1022FF79C;
}

uint64_t sub_10132F070@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  void *v8;
  uint64_t v9;
  int64_t v10;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  __int16 v16;
  char v17;

  v17 = a2;
  v6 = a1 + 5;
  v5 = a1[5];
  v15 = a1 + 5;
  (*(void (**)(_QWORD *))(v5 + 16))(a1 + 5);
  v16 = 256;
  v7 = sub_10068C1A8(a1, &v17);
  if (!v7)
  {
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  }
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_10027205C(&__p, v7[3], (uint64_t)v7[4], ((char *)v7[4] - (char *)v7[3]) >> 2);
  v8 = __p;
  v9 = (uint64_t)v13;
  v10 = v13 - (_BYTE *)__p;
  if (v13 == __p)
  {
    if (v13)
      operator delete(v13);
    goto LABEL_7;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_10027205C((_QWORD *)a3, v8, v9, v10 >> 2);
  *(_BYTE *)(a3 + 24) = 1;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
}

void sub_10132F150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_10187E514((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10132F184(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char v8;
  char *v9;

  v8 = a2;
  v5 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v9 = &v8;
  v6 = (char *)(sub_10133A0DC(a1, &v8, (uint64_t)&unk_101B9EB60, &v9) + 3);
  if (v6 != (char *)a3)
    sub_1002A3054(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_10132F22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10132F240(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_10055D44C(a1 + 40, "CLWifi1SettingsWifiService", 1, 1);
  return a1;
}

void sub_10132F288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1008813BC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10132F29C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  const char *v61;
  char *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  const char *v76;
  char *v77;
  NSObject *v78;
  const char *v79;
  char *v80;
  NSObject *v81;
  const char *v82;
  char *v83;
  NSObject *v84;
  const char *v85;
  char *v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  NSObject *v93;
  const char *v94;
  char *v95;
  NSObject *v96;
  const char *v97;
  char *v98;
  NSObject *v99;
  NSObject *v100;
  NSObject *v101;
  NSObject *v102;
  NSObject *v103;
  NSObject *v104;
  NSObject *v105;
  NSObject *v106;
  NSObject *v107;
  NSObject *v108;
  NSObject *v109;
  NSObject *v110;
  NSObject *v111;
  NSObject *v112;
  NSObject *v113;
  NSObject *v114;
  NSObject *v115;
  NSObject *v116;
  NSObject *v117;
  NSObject *v118;
  NSObject *v119;
  NSObject *v120;
  NSObject *v121;
  NSObject *v122;
  const char *v123;
  char *v124;
  NSObject *v125;
  const char *v126;
  char *v127;
  NSObject *v128;
  const char *v129;
  char *v130;
  NSObject *v131;
  _BOOL8 v132;
  NSObject *v133;
  NSObject *v134;
  NSObject *v135;
  NSObject *v136;
  NSObject *v137;
  const char *v139;
  char *v140;
  const char *v141;
  char *v142;
  const char *v143;
  char *v144;
  const char *v145;
  char *v146;
  const char *v147;
  char *v148;
  const char *v149;
  char *v150;
  const char *v151;
  char *v152;
  const char *v153;
  char *v154;
  const char *v155;
  char *v156;
  const char *v157;
  char *v158;
  const char *v159;
  char *v160;
  const char *v161;
  char *v162;
  const char *v163;
  char *v164;
  const char *v165;
  char *v166;
  const char *v167;
  char *v168;
  const char *v169;
  char *v170;
  const char *v171;
  char *v172;
  const char *v173;
  char *v174;
  const char *v175;
  char *v176;
  const char *v177;
  char *v178;
  const char *v179;
  char *v180;
  const char *v181;
  char *v182;
  const char *v183;
  char *v184;
  const char *v185;
  char *v186;
  const char *v187;
  char *v188;
  const char *v189;
  char *v190;
  const char *v191;
  char *v192;
  const char *v193;
  char *v194;
  const char *v195;
  char *v196;
  const char *v197;
  char *v198;
  const char *v199;
  char *v200;
  const char *v201;
  char *v202;
  const char *v203;
  char *v204;
  const char *v205;
  char *v206;
  const char *v207;
  char *v208;
  const char *v209;
  char *v210;
  const char *v211;
  char *v212;
  const char *v213;
  char *v214;
  const char *v215;
  char *v216;
  const char *v217;
  char *v218;
  const char *v219;
  char *v220;
  const char *v221;
  char *v222;
  const char *v223;
  char *v224;
  const char *v225;
  char *v226;
  const char *v227;
  char *v228;
  const char *v229;
  char *v230;
  const char *v231;
  char *v232;
  const char *v233;
  char *v234;
  const char *v235;
  char *v236;
  const char *v237;
  char *v238;
  const char *v239;
  char *v240;
  const char *v241;
  char *v242;
  const char *v243;
  char *v244;
  const char *v245;
  char *v246;
  const char *v247;
  char *v248;
  const char *v249;
  char *v250;
  const char *v251;
  char *v252;
  const char *v253;
  char *v254;
  const char *v255;
  char *v256;
  const char *v257;
  char *v258;
  const char *v259;
  char *v260;
  const char *v261;
  char *v262;
  const char *v263;
  char *v264;
  const char *v265;
  char *v266;
  const char *v267;
  char *v268;
  const char *v269;
  char *v270;
  const char *v271;
  char *v272;
  const char *v273;
  char *v274;
  const char *v275;
  char *v276;
  const char *v277;
  char *v278;
  const char *v279;
  char *v280;
  const char *v281;
  char *v282;
  const char *v283;
  char *v284;
  const char *v285;
  char *v286;
  const char *v287;
  char *v288;
  const char *v289;
  char *v290;
  const char *v291;
  char *v292;
  const char *v293;
  char *v294;
  const char *v295;
  char *v296;
  const char *v297;
  char *v298;
  const char *v299;
  char *v300;
  const char *v301;
  char *v302;
  const char *v303;
  char *v304;
  uint64_t v305;
  int v306;
  char v307;
  double v308[2];
  _QWORD v309[2];
  _QWORD v310[2];
  _QWORD v311[2];
  double v312[2];
  _QWORD v313[2];
  _QWORD v314[2];
  _DWORD v315[4];
  _QWORD v316[2];
  int v317;
  double v318;
  double v319[2];
  _BYTE v320[12];
  _BYTE v321[12];
  int v322;
  uint64_t v323;
  _BYTE v324[12];
  int v325;
  uint64_t v326;
  _BYTE buf[1632];

  sub_100119F3C(v314);
  if (sub_100006BB4(a2, "Wifi1", v314))
  {
    sub_100119F3C(v313);
    if (sub_100006BB4((uint64_t)v314, "ZAxis", v313))
    {
      LODWORD(v312[0]) = 0;
      if (sub_100526244((uint64_t)v313, "MaxInputAps", v312))
      {
        if (LODWORD(v312[0]))
        {
          dword_102313E60 = LODWORD(v312[0]);
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v3 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = LODWORD(v312[0]);
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiMaxInputAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = LODWORD(v312[0]);
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiMaxInputAps", &v325, 8);
            v266 = (char *)v265;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v265);
            if (v266 != buf)
              free(v266);
          }
        }
      }
      LODWORD(v311[0]) = 0;
      if (sub_1001E4B84((uint64_t)v313, "iDefaultMinNumSufficientInputSlamAps", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v4 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDefaultMinNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDefaultMinNumAps", &v325, v305);
            v268 = (char *)v267;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v267);
            if (v268 != buf)
              free(v268);
          }
        }
        else
        {
          dword_102313E78 = v311[0];
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iFoliageMinNumSufficientInputSlamAps", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v5 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iFoliageMinNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iFoliageMinNumAps", &v325, v305);
            v270 = (char *)v269;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v269);
            if (v270 != buf)
              free(v270);
          }
        }
        else
        {
          dword_102313E7C = v311[0];
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iRuralMinNumSufficientInputSlamAps", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v6 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iRuralMinNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iRuralMinNumAps", &v325, v305);
            v272 = (char *)v271;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v271);
            if (v272 != buf)
              free(v272);
          }
        }
        else
        {
          dword_102313E80 = v311[0];
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iUrbanMinNumSufficientInputSlamAps", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v7 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iUrbanMinNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iUrbanMinNumAps", &v325, v305);
            v274 = (char *)v273;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v273);
            if (v274 != buf)
              free(v274);
          }
        }
        else
        {
          dword_102313E84 = v311[0];
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iDenseUrbanMinNumSufficientInputSlamAps", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v8 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDenseUrbanMinNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDenseUrbanMinNumAps", &v325, v305);
            v276 = (char *)v275;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v275);
            if (v276 != buf)
              free(v276);
          }
        }
        else
        {
          dword_102313E88 = v311[0];
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iDenseUrbanCanyonMinNumSufficientInputSlamAps", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v9 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDenseUrbanCanyonMinNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDenseUrbanCanyonMinNumAps", &v325, v305);
            v278 = (char *)v277;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v277);
            if (v278 != buf)
              free(v278);
          }
        }
        else
        {
          dword_102313E8C = v311[0];
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iMaxScannedApRssiSpread", v311))
      {
        if ((v311[0] & 0x80000000) != 0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v10 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iMaxScannedApRssiSpread", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iMaxScannedApRssiSpread", &v325, v305);
            v280 = (char *)v279;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v279);
            if (v280 != buf)
              free(v280);
          }
        }
        else
        {
          dword_102313EB0 = v311[0];
        }
      }
      *(_QWORD *)v324 = 0;
      if (sub_1001FD98C((uint64_t)v313, "dMaxAge_s_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v11 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAge_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAge_s", &v325, v305);
            v148 = (char *)v147;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v147);
            if (v148 != buf)
              free(v148);
          }
        }
        else
        {
          qword_102313F38 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxRSSImeas_dbm_v2", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v12 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxRSSImeas_dbm", &v325, v305);
            v150 = (char *)v149;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v149);
            if (v150 != buf)
              free(v150);
          }
        }
        else
        {
          qword_102313F08 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinAge_s_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v13 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAge_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAge_s", &v325, v305);
            v152 = (char *)v151;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v151);
            if (v152 != buf)
              free(v152);
          }
        }
        else
        {
          qword_102313F40 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinReach_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v14 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinReach_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinReach_m", &v325, v305);
            v154 = (char *)v153;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v153);
            if (v154 != buf)
              free(v154);
          }
        }
        else
        {
          qword_102313F00 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinRSSImeas_dbm_v2", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v15 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRSSImeas_dbm", &v325, v305);
            v156 = (char *)v155;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v155);
            if (v156 != buf)
              free(v156);
          }
        }
        else
        {
          qword_102313F10 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinUnc_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v16 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinUnc_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinUnc_m", &v325, v305);
            v158 = (char *)v157;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v157);
            if (v158 != buf)
              free(v158);
          }
        }
        else
        {
          qword_102313EF8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dTauAge_s_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v17 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauAge_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauAge_s", &v325, v305);
            v160 = (char *)v159;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v159);
            if (v160 != buf)
              free(v160);
          }
        }
        else
        {
          qword_102313F30 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dTauReach_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v18 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauReach_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauReach_m", &v325, v305);
            v162 = (char *)v161;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v161);
            if (v162 != buf)
              free(v162);
          }
        }
        else
        {
          qword_102313F20 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinVerticalAccuracy_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v19 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVerticalAccuracy_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVerticalAccuracy_m", &v325, v305);
            v164 = (char *)v163;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v163);
            if (v164 != buf)
              free(v164);
          }
        }
        else
        {
          qword_102313E68 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dUncertaintyThreshold_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v20 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dUncertaintyThreshold_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dUncertaintyThreshold_m", &v325, v305);
            v166 = (char *)v165;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v165);
            if (v166 != buf)
              free(v166);
          }
        }
        else
        {
          qword_102313EA0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dOutlierRejectionThreshold_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v21 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dOutlierRejectionThreshold_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dOutlierRejectionThreshold_m", &v325, v305);
            v168 = (char *)v167;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v167);
            if (v168 != buf)
              free(v168);
          }
        }
        else
        {
          qword_102313EA8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinVerticalAccuracyForInsufficientData_m_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v22 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVerticalAccuracyForInsufficientData_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVerticalAccuracyForInsufficientData_m", &v325, v305);
            v170 = (char *)v169;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v169);
            if (v170 != buf)
              free(v170);
          }
        }
        else
        {
          qword_102313E70 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dVerticalAccuracyScaleFactor_v2", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v23 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dVerticalAccuracyScaleFactor", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dVerticalAccuracyScaleFactor", &v325, v305);
            v172 = (char *)v171;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v171);
            if (v172 != buf)
              free(v172);
          }
        }
        else
        {
          qword_102313E90 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinAllowedMaxRssi_dbm_v2", v324))
      {
        if (*(double *)v324 < *(double *)&qword_102313F10 || *(double *)v324 > *(double *)&qword_102313F08)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v24 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAllowedMaxRssi_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAllowedMaxRssi_dbm", &v325, v305);
            v174 = (char *)v173;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v173);
            if (v174 != buf)
              free(v174);
          }
        }
        else
        {
          qword_102313D90 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinAllowedMeanRssi_dbm", v324))
      {
        if (*(double *)v324 < *(double *)&qword_102313F10 || *(double *)v324 > *(double *)&qword_102313F08)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v25 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAllowedMeanRssi_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAllowedMeanRssi_dbm", &v325, v305);
            v176 = (char *)v175;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v175);
            if (v176 != buf)
              free(v176);
          }
        }
        else
        {
          qword_102313D98 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAllowedMeanMaxRssiDiff", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313DA0 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v26 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedMeanMaxRssiDiff", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedMeanMaxRssiDiff", &v325, v305);
            v28 = (char *)v27;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dDiffMaxRssisDivisor", v324))
      {
        if (*(double *)v324 == 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v29 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dDiffMaxRssisDivisor", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dDiffMaxRssisDivisor", &v325, v305);
            v282 = (char *)v281;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v281);
            if (v282 != buf)
              free(v282);
          }
        }
        else
        {
          qword_102313EB8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dStarvationRatioScaleFactor", v324))
        qword_102313EC0 = *(_QWORD *)v324;
      if (sub_1001FD98C((uint64_t)v313, "dHighVisibilityScaleFactor", v324))
        qword_102313EC8 = *(_QWORD *)v324;
      if (sub_1001FD98C((uint64_t)v313, "dSingleShotUncAvgWeightFactor", v324))
      {
        if (*(double *)v324 < 0.0 || *(double *)v324 > 1.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v30 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dSingleShotUncAvgWeightFactor", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dSingleShotUncAvgWeightFactor", &v325, v305);
            v178 = (char *)v177;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v177);
            if (v178 != buf)
              free(v178);
          }
        }
        else
        {
          qword_102313ED0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxTimeBetweenTwoFixes_s", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313ED8 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v31 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxTimeBetweenTwoFixes_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxTimeBetweenTwoFixes_s", &v325, v305);
            v33 = (char *)v32;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v32);
            if (v33 != buf)
              free(v33);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dTauUncert_m", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v34 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauUncert_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauUncert_m", &v325, v305);
            v180 = (char *)v179;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v179);
            if (v180 != buf)
              free(v180);
          }
        }
        else
        {
          qword_102313F18 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dTauRSSI_dbm", v324))
        qword_102313F28 = *(_QWORD *)v324;
      if (sub_1001FD98C((uint64_t)v313, "dYieldBaroOverWifiUncertaintyThreshold_m", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v35 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dYieldBaroOverWifiUncertaintyThreshold_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dYieldBaroOverWifiUncertaintyThreshold_m", &v325, v305);
            v182 = (char *)v181;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v181);
            if (v182 != buf)
              free(v182);
          }
        }
        else
        {
          qword_102313EF0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinAcceptableRssi_dbm", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v36 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAcceptableRssi_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAcceptableRssi_dbm", &v325, v305);
            v184 = (char *)v183;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v183);
            if (v184 != buf)
              free(v184);
          }
        }
        else
        {
          qword_102313E98 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAltitudeSpread_m", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313E58 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v37 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeSpread_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeSpread_m", &v325, v305);
            v39 = (char *)v38;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v38);
            if (v39 != buf)
              free(v39);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dInitialAltUncAverage_m", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313EE0 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v40 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dInitialAltUncAverage_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dInitialAltUncAverage_m", &v325, v305);
            v42 = (char *)v41;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v41);
            if (v42 != buf)
              free(v42);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxPrevCurAltDiffToAvg", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313EE8 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v43 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxPrevCurAltDiffToAvg", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxPrevCurAltDiffToAvg", &v325, v305);
            v45 = (char *)v44;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v44);
            if (v45 != buf)
              free(v45);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dStableProcessNoiseVariance", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v46 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dStableProcessNoiseVariance", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dStableProcessNoiseVariance", &v325, v305);
            v186 = (char *)v185;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v185);
            if (v186 != buf)
              free(v186);
          }
        }
        else
        {
          qword_102313DA8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dUnstableProcessNoiseVariance", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v47 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dUnstableProcessNoiseVariance", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dUnstableProcessNoiseVariance", &v325, v305);
            v188 = (char *)v187;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v187);
            if (v188 != buf)
              free(v188);
          }
        }
        else
        {
          qword_102313DB0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAltitudeVelocity", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v48 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeVelocity", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeVelocity", &v325, v305);
            v190 = (char *)v189;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v189);
            if (v190 != buf)
              free(v190);
          }
        }
        else
        {
          qword_102313DC0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAltitudeVelocityForUpdate", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v49 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeVelocityForUpdate", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeVelocityForUpdate", &v325, v305);
            v194 = (char *)v193;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v193);
            if (v194 != buf)
              free(v194);
          }
        }
        else
        {
          qword_102313E10 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMeasurementUncScaleFactor", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v50 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMeasurementUncScaleFactor", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMeasurementUncScaleFactor", &v325, v305);
            v198 = (char *)v197;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v197);
            if (v198 != buf)
              free(v198);
          }
        }
        else
        {
          qword_102313DC8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dReportingUncScaleFactor", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v51 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dReportingUncScaleFactor", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dReportingUncScaleFactor", &v325, v305);
            v202 = (char *)v201;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v201);
            if (v202 != buf)
              free(v202);
          }
        }
        else
        {
          qword_102313DD0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinVuncToReport_m", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v52 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVuncToReport_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVuncToReport_m", &v325, v305);
            v206 = (char *)v205;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v205);
            if (v206 != buf)
              free(v206);
          }
        }
        else
        {
          qword_102313DD8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinRssiToInitialize_dBm", v324))
      {
        if (*(double *)v324 < *(double *)&qword_102313F10 || *(double *)v324 > *(double *)&qword_102313F08)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v53 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRssiToInitialize_dBm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRssiToInitialize_dBm", &v325, v305);
            v210 = (char *)v209;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v209);
            if (v210 != buf)
              free(v210);
          }
        }
        else
        {
          qword_102313DE0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinVuncToInitialize_m", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v54 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVuncToInitialize_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVuncToInitialize_m", &v325, v305);
            v214 = (char *)v213;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v213);
            if (v214 != buf)
              free(v214);
          }
        }
        else
        {
          qword_102313DE8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinNoPropagateWaitTimeToStop_s", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v55 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinNoPropagateWaitTimeToStop_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinNoPropagateWaitTimeToStop_s", &v325, v305);
            v216 = (char *)v215;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v215);
            if (v216 != buf)
              free(v216);
          }
        }
        else
        {
          qword_102313DF0 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinNoUpdateWaitTimeToStop_s", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v56 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinNoUpdateWaitTimeToStop_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinNoUpdateWaitTimeToStop_s", &v325, v305);
            v218 = (char *)v217;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v217);
            if (v218 != buf)
              free(v218);
          }
        }
        else
        {
          qword_102313DF8 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dNormalizedInnovSquaredThreshold", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313E30 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v57 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dNormalizedInnovSquaredThreshold", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dNormalizedInnovSquaredThreshold", &v325, v305);
            v59 = (char *)v58;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v58);
            if (v59 != buf)
              free(v59);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dProcessNoiseCovarianceScalingFactor", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313E38 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v60 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dProcessNoiseCovarianceScalingFactor", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dProcessNoiseCovarianceScalingFactor", &v325, v305);
            v62 = (char *)v61;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v61);
            if (v62 != buf)
              free(v62);
          }
        }
      }
      if (sub_1001E4B84((uint64_t)v313, "iMaxNumberOfClusters", v311))
      {
        if (SLODWORD(v311[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v63 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iMaxNumberOfClusters", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 67174657;
            LODWORD(v326) = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iMaxNumberOfClusters", &v325, v305);
            v288 = (char *)v287;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v287);
            if (v288 != buf)
              free(v288);
          }
        }
        else
        {
          dword_102313E40 = v311[0];
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAllowedClustersDistance_m", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v64 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedClustersDistance_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedClustersDistance_m", &v325, v305);
            v220 = (char *)v219;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v219);
            if (v220 != buf)
              free(v220);
          }
        }
        else
        {
          qword_102313E48 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinStrongestClusterWeightToTotalWeight", v324))
      {
        if (*(double *)v324 < 0.0 || *(double *)v324 > 1.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v65 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinStrongestClusterWeightToTotalWeight", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinStrongestClusterWeightToTotalWeight", &v325, v305);
            v222 = (char *)v221;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v221);
            if (v222 != buf)
              free(v222);
          }
        }
        else
        {
          qword_102313E50 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAcceptableBaroWifiTimeDiffToInitialize_s", v324))
      {
        if (*(double *)v324 >= 0.0)
        {
          qword_102313E00 = *(_QWORD *)v324;
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v66 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAcceptableBaroWifiTimeDiffToInitialize_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAcceptableBaroWifiTimeDiffToInitialize_s", &v325, v305);
            v68 = (char *)v67;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v67);
            if (v68 != buf)
              free(v68);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxPropagationTimeDuringBaroOutage_s", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v69 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxPropagationTimeDuringBaroOutage_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxPropagationTimeDuringBaroOutage_s", &v325, v305);
            v224 = (char *)v223;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v223);
            if (v224 != buf)
              free(v224);
          }
        }
        else
        {
          qword_102313E08 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMinMeanRssiToInitialize_dbm", v324))
      {
        if (*(double *)v324 < *(double *)&qword_102313F10 || *(double *)v324 > *(double *)&qword_102313F08)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v70 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinMeanRssiToInitialize_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinMeanRssiToInitialize_dbm", &v325, v305);
            v226 = (char *)v225;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v225);
            if (v226 != buf)
              free(v226);
          }
        }
        else
        {
          qword_102313E20 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxAllowedMeanMaxRssiDiffToInitialize", v324))
      {
        if (*(double *)v324 < *(double *)&qword_102313F10 || *(double *)v324 > *(double *)&qword_102313F08)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v71 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedMeanMaxRssiDiffToInitialize", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedMeanMaxRssiDiffToInitialize", &v325, v305);
            v228 = (char *)v227;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v227);
            if (v228 != buf)
              free(v228);
          }
        }
        else
        {
          qword_102313E18 = *(_QWORD *)v324;
        }
      }
      if (sub_1001FD98C((uint64_t)v313, "dMaxInnovation_m", v324))
      {
        if (*(double *)v324 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v72 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v324;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxInnovation_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v325 = 134283521;
            v326 = *(_QWORD *)v324;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxInnovation_m", &v325, v305);
            v230 = (char *)v229;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v229);
            if (v230 != buf)
              free(v230);
          }
        }
        else
        {
          qword_102313E28 = *(_QWORD *)v324;
        }
      }
    }
    sub_100119F3C(&v325);
    if (sub_100006BB4((uint64_t)v314, "LatLon", &v325))
    {
      LODWORD(v311[0]) = 0;
      v312[0] = 0.0;
      LOBYTE(v310[0]) = 0;
      if (sub_100526244((uint64_t)&v325, "uiMaxOutlierCntHS", v311))
        LODWORD(qword_102313D60) = v311[0];
      if (sub_100526244((uint64_t)&v325, "uiMaxInputAps", v311))
      {
        if (LODWORD(v311[0]))
        {
          HIDWORD(qword_102313D60) = v311[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v73 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiMaxInputAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 67174657;
            *(_DWORD *)&v324[4] = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiMaxInputAps", v324, v305);
            v284 = (char *)v283;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v283);
            if (v284 != buf)
              free(v284);
          }
        }
      }
      if (sub_100526244((uint64_t)&v325, "uiReqMinNumAP", v311))
        dword_102313D68 = v311[0];
      if (sub_100526244((uint64_t)&v325, "uiSingleAPConfidence", v311))
      {
        if (LODWORD(v311[0]))
        {
          HIDWORD(qword_102313D78) = v311[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v74 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v311[0];
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiSingleAPConfidence", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 67174657;
            *(_DWORD *)&v324[4] = v311[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiSingleAPConfidence", v324, v305);
            v286 = (char *)v285;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v285);
            if (v286 != buf)
              free(v286);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMaxLocationHintAge", v312))
      {
        if (v312[0] >= 0.0)
        {
          qword_102313D80 = *(_QWORD *)&v312[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v75 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxLocationHintAge", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxLocationHintAge", v324, v305);
            v77 = (char *)v76;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v76);
            if (v77 != buf)
              free(v77);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMinHintUnc", v312))
      {
        if (v312[0] >= 0.0)
        {
          qword_102313D70 = *(_QWORD *)&v312[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v78 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinHintUnc", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinHintUnc", v324, v305);
            v80 = (char *)v79;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v79);
            if (v80 != buf)
              free(v80);
          }
        }
      }
      if (sub_100526244((uint64_t)&v325, "uiNumOfAPsToIgnoreHint", v311))
        LODWORD(qword_102313D78) = v311[0];
      if (sub_1001FD98C((uint64_t)&v325, "dMinUnc_m", v312))
      {
        if (v312[0] >= 0.0)
        {
          *(double *)&xmmword_102313D10 = v312[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v81 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinUnc_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinUnc_m", v324, v305);
            v83 = (char *)v82;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v82);
            if (v83 != buf)
              free(v83);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMinReach_m", v312))
      {
        if (v312[0] >= 0.0)
        {
          *((double *)&xmmword_102313D10 + 1) = v312[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v84 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinReach_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinReach_m", v324, v305);
            v86 = (char *)v85;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v85);
            if (v86 != buf)
              free(v86);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMaxRSSImeas_dbm", v312))
      {
        if (v312[0] >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v87 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxRSSImeas_dbm", v324, v305);
            v192 = (char *)v191;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v191);
            if (v192 != buf)
              free(v192);
          }
        }
        else
        {
          qword_102313D20 = *(_QWORD *)&v312[0];
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMinRSSImeas_dbm", v312))
      {
        if (v312[0] >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v88 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRSSImeas_dbm", v324, v305);
            v196 = (char *)v195;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v195);
            if (v196 != buf)
              free(v196);
          }
        }
        else
        {
          qword_102313D28 = *(_QWORD *)&v312[0];
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dTauUncert_m", v312))
      {
        if (v312[0] <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v89 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauUncert_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauUncert_m", v324, v305);
            v200 = (char *)v199;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v199);
            if (v200 != buf)
              free(v200);
          }
        }
        else
        {
          *(double *)&xmmword_102313D30 = v312[0];
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dTauReach_m", v312))
      {
        if (v312[0] <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v90 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauReach_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauReach_m", v324, v305);
            v204 = (char *)v203;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v203);
            if (v204 != buf)
              free(v204);
          }
        }
        else
        {
          *((double *)&xmmword_102313D30 + 1) = v312[0];
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dTauRSSI_dbm", v312))
      {
        if (v312[0] <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v91 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauRSSI_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauRSSI_dbm", v324, v305);
            v208 = (char *)v207;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v207);
            if (v208 != buf)
              free(v208);
          }
        }
        else
        {
          qword_102313D40 = *(_QWORD *)&v312[0];
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dTauAge_s", v312))
      {
        if (v312[0] <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v92 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauAge_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauAge_s", v324, v305);
            v212 = (char *)v211;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v211);
            if (v212 != buf)
              free(v212);
          }
        }
        else
        {
          qword_102313D48 = *(_QWORD *)&v312[0];
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMaxAge_s", v312))
      {
        if (v312[0] >= 0.0)
        {
          *(double *)&xmmword_102313D50 = v312[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v93 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAge_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAge_s", v324, v305);
            v95 = (char *)v94;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v94);
            if (v95 != buf)
              free(v95);
          }
        }
      }
      if (sub_1001FD98C((uint64_t)&v325, "dMinAge_s", v312))
      {
        if (v312[0] >= 0.0)
        {
          *((double *)&xmmword_102313D50 + 1) = v312[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v96 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v312[0];
            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAge_s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v324 = 134283521;
            *(double *)&v324[4] = v312[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAge_s", v324, v305);
            v98 = (char *)v97;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v97);
            if (v98 != buf)
              free(v98);
          }
        }
      }
      if (sub_1001E4874((uint64_t)&v325, "useIterativeOutlierRejectionAlg", (BOOL *)v310))
        byte_102313D88 = v310[0];
    }
    sub_100119F3C(v324);
    if (sub_100006BB4((uint64_t)v314, "E911Scan", v324))
    {
      buf[0] = 0;
      if (sub_1001E4874((uint64_t)v324, "AlwaysScan5GHz", buf))
        byte_1022FF658 = buf[0];
    }
    sub_100119F3C(v312);
    if (sub_100006BB4((uint64_t)v314, "MovingApDetector", v312))
    {
      LOBYTE(v311[0]) = 0;
      *(_QWORD *)buf = 0;
      if (sub_1001E4874((uint64_t)v312, "isEnabled", (BOOL *)v311))
        byte_1022FF660 = v311[0];
      if (sub_1001E4874((uint64_t)v312, "isCellFixUsedForCrossCheck", (BOOL *)v311))
        byte_1022FF661 = v311[0];
      if (sub_1001FD98C((uint64_t)v312, "maxAllowedDistanceChange", buf))
        qword_1022FF668 = *(_QWORD *)buf;
    }
    sub_100119F3C(v311);
    if (sub_100006BB4((uint64_t)v314, "ALSQuery", v311))
    {
      *(_DWORD *)buf = 0;
      if (sub_100526244((uint64_t)v311, "desiredKnownWifiAps", buf))
        dword_1022FF790 = *(_DWORD *)buf;
    }
    sub_100119F3C(v310);
    if (sub_100006BB4((uint64_t)v314, "WifiPositionWithAssociatedAp", v310))
    {
      LOBYTE(v319[0]) = 0;
      *(_QWORD *)v321 = 0;
      *(_DWORD *)v320 = 0;
      if (sub_1001E4874((uint64_t)v310, "isEnabled", (BOOL *)v319))
        byte_1022FF6D8 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "isWifiHarvestEnabled", (BOOL *)v319))
        byte_1022FF6DB = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "isWifiHarvestUsed", (BOOL *)v319))
        byte_1022FF6DC = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, off_1022FF650, (BOOL *)v319))
        byte_1022FF6D9 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "IsHomeLoiEnabled", (BOOL *)v319))
        byte_1022FF6DA = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "isWorkLoiEnabled", (BOOL *)v319))
        byte_1022FF6C0 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "isSchoolLoiEnabled", (BOOL *)v319))
        byte_1022FF6C1 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "isGymLoiEnabled", (BOOL *)v319))
        byte_1022FF6C2 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "isUnknownLoiEnabled", (BOOL *)v319))
        byte_1022FF6C3 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "skipWifiScanIfPossible", (BOOL *)v319))
        byte_1022FF6C4 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForIphone", (BOOL *)v319))
        byte_1022FF6C5 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForIpadWithGnss", (BOOL *)v319))
        byte_1022FF6C6 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForIpadWithoutGnss", (BOOL *)v319))
        byte_1022FF6C7 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForWatch", (BOOL *)v319))
        byte_1022FF6C8 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForMacOS", (BOOL *)v319))
        byte_1022FF6C9 = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForAppleTV", (BOOL *)v319))
        byte_1022FF6CA = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForHomePod", (BOOL *)v319))
        byte_1022FF6CB = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForVisionPro", (BOOL *)v319))
        byte_1022FF6CC = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "iCloudSharingEnabledForAllOtherPlatforms", (BOOL *)v319))
        byte_1022FF6CD = LOBYTE(v319[0]);
      if (sub_1001E4874((uint64_t)v310, "applyPrivacyPoliciesWheniCloudSharingIsDisabled", (BOOL *)v319))
        byte_1022FF6CE = LOBYTE(v319[0]);
      if (sub_1001FD98C((uint64_t)v310, "iCloudSyncTimeIntervalInSecs", v321))
      {
        if (*(double *)v321 <= 0.0 || (*(_QWORD *)v321 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v99 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to iCloudSyncTimeIntervalInSecs", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to iCloudSyncTimeIntervalInSecs", &v322, v305);
            v140 = (char *)v139;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v139);
            if (v140 != buf)
              free(v140);
          }
        }
        else
        {
          qword_1022FF6D0 = *(_QWORD *)v321;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "databasePurgeThreshold", v321))
      {
        if (*(double *)v321 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v100 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to databasePurgeThreshold", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to databasePurgeThreshold", &v322, v305);
            v236 = (char *)v235;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v235);
            if (v236 != buf)
              free(v236);
          }
        }
        else
        {
          qword_1022FF670 = *(_QWORD *)v321;
        }
      }
      if (sub_1001E4B84((uint64_t)v310, "maxSamplePointsPerAp", v320))
      {
        if (*(int *)v320 < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v101 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = *(_DWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxSamplePointsPerAp", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 67174657;
            LODWORD(v323) = *(_DWORD *)v320;
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxSamplePointsPerAp", &v322, v305);
            v290 = (char *)v289;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v289);
            if (v290 != buf)
              free(v290);
          }
        }
        else
        {
          dword_1022FF678 = *(_DWORD *)v320;
        }
      }
      if (sub_1001E4B84((uint64_t)v310, "maxNumDistinctAps", v320))
      {
        if (*(int *)v320 < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v102 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = *(_DWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumDistinctAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 67174657;
            LODWORD(v323) = *(_DWORD *)v320;
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumDistinctAps", &v322, v305);
            v292 = (char *)v291;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v291);
            if (v292 != buf)
              free(v292);
          }
        }
        else
        {
          dword_1022FF67C = *(_DWORD *)v320;
        }
      }
      if (sub_1001E4B84((uint64_t)v310, "minStationaryTimeInSeconds", v320))
      {
        if (*(int *)v320 < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v103 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = *(_DWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minStationaryTimeInSeconds", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 67174657;
            LODWORD(v323) = *(_DWORD *)v320;
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minStationaryTimeInSeconds", &v322, v305);
            v294 = (char *)v293;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v293);
            if (v294 != buf)
              free(v294);
          }
        }
        else
        {
          dword_1022FF680 = *(_DWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "minTimelapseInSecondsSinceLastHarvest", v321))
      {
        if (*(double *)v321 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v104 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minTimelapseInSecondsSinceLastHarvest", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minTimelapseInSecondsSinceLastHarvest", &v322, v305);
            v244 = (char *)v243;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v243);
            if (v244 != buf)
              free(v244);
          }
        }
        else
        {
          qword_1022FF688 = *(_QWORD *)v321;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "maxTimelapseInSecondsSinceLastHarvest", v321))
      {
        if (*(double *)v321 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v105 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxTimelapseInSecondsSinceLastHarvest", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxTimelapseInSecondsSinceLastHarvest", &v322, v305);
            v248 = (char *)v247;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v247);
            if (v248 != buf)
              free(v248);
          }
        }
        else
        {
          qword_1022FF690 = *(_QWORD *)v321;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "maxDistanceBetweenServerSideCentroidAndClientSideCentroid", v321))
      {
        if (*(double *)v321 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v106 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxDistanceBetweenServerSideCentroidAndClientSideCentroid", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxDistanceBetweenServerSideCentroidAndClientSideCentroid", &v322, v305);
            v252 = (char *)v251;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v251);
            if (v252 != buf)
              free(v252);
          }
        }
        else
        {
          qword_1022FF698 = *(_QWORD *)v321;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "maxAllowedHorizontalAccuracy", v321))
      {
        if (*(double *)v321 <= 0.0 || (*(_QWORD *)v321 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v107 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedHorizontalAccuracy", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedHorizontalAccuracy", &v322, v305);
            v142 = (char *)v141;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v141);
            if (v142 != buf)
              free(v142);
          }
        }
        else
        {
          qword_1022FF6A0 = *(_QWORD *)v321;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "maxAllowedAgeOfLatestWifiHarvest", v321))
      {
        if (*(double *)v321 <= 0.0 || (*(_QWORD *)v321 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v108 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedAgeOfLatestWifiHarvest", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedAgeOfLatestWifiHarvest", &v322, v305);
            v144 = (char *)v143;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v143);
            if (v144 != buf)
              free(v144);
          }
        }
        else
        {
          qword_1022FF6A8 = *(_QWORD *)v321;
        }
      }
      if (sub_1001FD98C((uint64_t)v310, "maxAllowedAgeOfLatestGpsHarvest", v321))
      {
        if (*(double *)v321 <= 0.0 || (*(_QWORD *)v321 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v109 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v321;
            _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedAgeOfLatestGpsHarvest", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v322 = 134283521;
            v323 = *(_QWORD *)v321;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedAgeOfLatestGpsHarvest", &v322, v305);
            v146 = (char *)v145;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v145);
            if (v146 != buf)
              free(v146);
          }
        }
        else
        {
          qword_1022FF6B0 = *(_QWORD *)v321;
        }
      }
    }
    sub_100119F3C(&v322);
    if (sub_100006BB4((uint64_t)v314, "WifiCentroidCalculator", &v322))
    {
      LOBYTE(v309[0]) = 0;
      *(_QWORD *)v320 = 0;
      LODWORD(v319[0]) = 0;
      if (sub_1001E4874((uint64_t)&v322, "rssiWeightEnabled", (BOOL *)v309))
        byte_1022FF6E0 = v309[0];
      if (sub_1001FD98C((uint64_t)&v322, "minRssi_dbm", v320))
      {
        if (*(double *)v320 >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v110 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minRssi_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minRssi_dbm", v321, v305);
            v232 = (char *)v231;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v231);
            if (v232 != buf)
              free(v232);
          }
        }
        else
        {
          qword_1022FF6E8 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "maxRssi_dbm", v320))
      {
        if (*(double *)v320 >= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v111 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxRssi_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxRssi_dbm", v321, v305);
            v234 = (char *)v233;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v233);
            if (v234 != buf)
              free(v234);
          }
        }
        else
        {
          qword_1022FF6F0 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "rssiWeight_Tau_dbm", v320))
      {
        if (*(double *)v320 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v112 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to rssiWeight_Tau_dbm", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to rssiWeight_Tau_dbm", v321, v305);
            v238 = (char *)v237;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v237);
            if (v238 != buf)
              free(v238);
          }
        }
        else
        {
          qword_1022FF6F8 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "vAcc_validthres_m", v320))
      {
        if (*(double *)v320 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v113 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to vAcc_validthres_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to vAcc_validthres_m", v321, v305);
            v240 = (char *)v239;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v239);
            if (v240 != buf)
              free(v240);
          }
        }
        else
        {
          qword_1022FF700 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "alt_diversity_m", v320))
      {
        if (*(double *)v320 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v114 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to alt_diversity_m", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to alt_diversity_m", v321, v305);
            v242 = (char *)v241;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v241);
            if (v242 != buf)
              free(v242);
          }
        }
        else
        {
          qword_1022FF708 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "invalidAltitude", v320))
      {
        if (*(double *)v320 >= -420.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v115 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to invalidAltitude", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to invalidAltitude", v321, v305);
            v246 = (char *)v245;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v245);
            if (v246 != buf)
              free(v246);
          }
        }
        else
        {
          qword_1022FF710 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "minHorizontalAccuracy", v320))
      {
        if (*(double *)v320 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v116 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minHorizontalAccuracy", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minHorizontalAccuracy", v321, v305);
            v250 = (char *)v249;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v249);
            if (v250 != buf)
              free(v250);
          }
        }
        else
        {
          qword_1022FF718 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "apOutlierThresholdMeters", v320))
      {
        if (*(double *)v320 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v117 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to apOutlierThresholdMeters", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to apOutlierThresholdMeters", v321, v305);
            v254 = (char *)v253;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v253);
            if (v254 != buf)
              free(v254);
          }
        }
        else
        {
          qword_1022FF720 = *(_QWORD *)v320;
        }
      }
      if (sub_1001FD98C((uint64_t)&v322, "movingApDistanceThreshold", v320))
      {
        if (*(double *)v320 <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v118 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(_QWORD *)&buf[4] = *(_QWORD *)v320;
            _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to movingApDistanceThreshold", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 134283521;
            *(_QWORD *)&v321[4] = *(_QWORD *)v320;
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to movingApDistanceThreshold", v321, v305);
            v256 = (char *)v255;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v255);
            if (v256 != buf)
              free(v256);
          }
        }
        else
        {
          qword_1022FF730 = *(_QWORD *)v320;
        }
      }
      if (sub_1001E4B84((uint64_t)&v322, "minStationaryPoints", v319))
      {
        if (SLODWORD(v319[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v119 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = LODWORD(v319[0]);
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minStationaryPoints", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 67174657;
            *(_DWORD *)&v321[4] = LODWORD(v319[0]);
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minStationaryPoints", v321, v305);
            v298 = (char *)v297;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v297);
            if (v298 != buf)
              free(v298);
          }
        }
        else
        {
          dword_1022FF728 = LODWORD(v319[0]);
        }
      }
      if (sub_1001E4B84((uint64_t)&v322, "maxNumMovesAllowed", v319))
      {
        if ((LODWORD(v319[0]) & 0x80000000) != 0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v120 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = LODWORD(v319[0]);
            _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumMovesAllowed", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v321 = 67174657;
            *(_DWORD *)&v321[4] = LODWORD(v319[0]);
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumMovesAllowed", v321, v305);
            v300 = (char *)v299;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v299);
            if (v300 != buf)
              free(v300);
          }
        }
        else
        {
          dword_1022FF738 = LODWORD(v319[0]);
        }
      }
    }
    sub_100119F3C(v321);
    if (sub_100006BB4((uint64_t)v314, "WifiLocationIntegrityCalculator", v321))
    {
      v319[0] = 0.0;
      LODWORD(v309[0]) = 0;
      if (sub_1001E4B84((uint64_t)v321, "minNumAps", v309))
      {
        if (SLODWORD(v309[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v121 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v309[0];
            _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minNumAps", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v320 = 67174657;
            *(_DWORD *)&v320[4] = v309[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minNumAps", v320, v305);
            v296 = (char *)v295;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v295);
            if (v296 != buf)
              free(v296);
          }
        }
        else
        {
          dword_1022FF740 = v309[0];
        }
      }
      v319[0] = 0.0;
      if (sub_1001FD98C((uint64_t)v321, "cellCrossCheckDistanceThreshold", v319))
      {
        if (v319[0] > 0.0 && (*(_QWORD *)&v319[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          qword_1022FF748 = *(_QWORD *)&v319[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v122 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v319[0];
            _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to cellCrossCheckDistanceThreshold", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v320 = 134283521;
            *(double *)&v320[4] = v319[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to cellCrossCheckDistanceThreshold", v320, v305);
            v124 = (char *)v123;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v123);
            if (v124 != buf)
              free(v124);
          }
        }
      }
      v319[0] = 0.0;
      if (sub_1001FD98C((uint64_t)v321, "multiApWifiCrossCheckDistanceThreshold", v319))
      {
        if (v319[0] > 0.0 && (*(_QWORD *)&v319[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          qword_1022FF750 = *(_QWORD *)&v319[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v125 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v319[0];
            _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to multiApWifiCrossCheckDistanceThreshold", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v320 = 134283521;
            *(double *)&v320[4] = v319[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to multiApWifiCrossCheckDistanceThreshold", v320, v305);
            v127 = (char *)v126;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v126);
            if (v127 != buf)
              free(v127);
          }
        }
      }
      v319[0] = 0.0;
      if (sub_1001FD98C((uint64_t)v321, "referenceLocationAgeThreshold", v319))
      {
        if (v319[0] > 0.0 && (*(_QWORD *)&v319[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          qword_1022FF758 = *(_QWORD *)&v319[0];
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v128 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v319[0];
            _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to referenceLocationAgeThreshold", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            *(_DWORD *)v320 = 134283521;
            *(double *)&v320[4] = v319[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to referenceLocationAgeThreshold", v320, v305);
            v130 = (char *)v129;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v129);
            if (v130 != buf)
              free(v130);
          }
        }
      }
    }
    sub_100119F3C(v320);
    if (sub_100006BB4((uint64_t)v314, "WifiCoreAnalytics", v320))
    {
      LODWORD(v309[0]) = 0;
      if (sub_1001E4B84((uint64_t)v320, "wifiPositionAnalyticsDownsamplingFactor", v309))
      {
        if (SLODWORD(v309[0]) < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v131 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v309[0];
            _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to wifiPositionAnalyticsDownsamplingFactor", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            LODWORD(v319[0]) = 67174657;
            HIDWORD(v319[0]) = v309[0];
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to wifiPositionAnalyticsDownsamplingFactor", v319, v305);
            v302 = (char *)v301;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v301);
            if (v302 != buf)
              free(v302);
          }
        }
        else
        {
          dword_1022FF760 = v309[0];
        }
      }
    }
    sub_100119F3C(v319);
    v132 = sub_100006BB4((uint64_t)v314, "WifiService", v319);
    if (v132)
      sub_101339990(v132, (uint64_t)v319);
    sub_100119F3C(v309);
    if (sub_100006BB4((uint64_t)v314, "wifiTilesManager", v309))
    {
      v308[0] = 0.0;
      if (sub_1001FD98C((uint64_t)v309, "maxTileAccessAge", v308))
      {
        if (v308[0] <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v133 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v308[0];
            _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}.1f, to maxTileAccessAge", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v317 = 134283521;
            v318 = v308[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}.1f, to maxTileAccessAge", &v317, v305);
            v258 = (char *)v257;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v257);
            if (v258 != buf)
              free(v258);
          }
        }
        else
        {
          qword_1022FF768 = *(_QWORD *)&v308[0];
        }
      }
      if (sub_1001FD98C((uint64_t)v309, "maxTileDownloadAge", v308))
      {
        if (v308[0] <= 0.0)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v134 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v308[0];
            _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}.1f, to maxTileDownloadAge", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v317 = 134283521;
            v318 = v308[0];
            LODWORD(v305) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}.1f, to maxTileDownloadAge", &v317, v305);
            v260 = (char *)v259;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v259);
            if (v260 != buf)
              free(v260);
          }
        }
        else
        {
          qword_1022FF770 = *(_QWORD *)&v308[0];
        }
      }
      buf[0] = 0;
      if (sub_1001E4874((uint64_t)v309, "isEnabledForIphone", buf))
        byte_1022FF778 = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForIpadWithGnss", buf))
        byte_1022FF779 = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForIpadWithoutGnss", buf))
        byte_1022FF77A = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForWatch", buf))
        byte_1022FF77B = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForMacOS", buf))
        byte_1022FF77C = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForAppleTV", buf))
        byte_1022FF77D = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForHomePod", buf))
        byte_1022FF77E = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForVisionPro", buf))
        byte_1022FF77F = buf[0];
      if (sub_1001E4874((uint64_t)v309, "isEnabledForAllOtherPlatforms", buf))
        byte_1022FF780 = buf[0];
    }
    sub_100119F3C(&v317);
    if (sub_100006BB4((uint64_t)v314, "WifiGpsTransition", &v317))
    {
      *(_DWORD *)buf = 0;
      if (sub_100526244((uint64_t)&v317, "gpsWarmupTimeoutSecs", buf))
        dword_1022FF788 = *(_DWORD *)buf;
      if (sub_100526244((uint64_t)&v317, "wifiAgeThresholdSecs", buf))
        dword_1022FF78C = *(_DWORD *)buf;
    }
    sub_100119F3C(v308);
    if (sub_100006BB4((uint64_t)v314, "WifiVisibilityIntersection", v308))
    {
      LOWORD(v315[0]) = word_1022FF794;
      if (sub_100525CE4((uint64_t)v308, "visibilityIntersectionType", v315))
      {
        if (LOWORD(v315[0]) > 2u)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v136 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = LOWORD(v315[0]);
            _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "#Warning, out of valid range OTA value, failed to assign, %{public}hu, to visibilityIntersectionType", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            LODWORD(v316[0]) = 67240192;
            HIDWORD(v316[0]) = LOWORD(v315[0]);
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "#Warning, out of valid range OTA value, failed to assign, %{public}hu, to visibilityIntersectionType", v316, v305);
            v264 = (char *)v263;
            sub_100512490("Generic", 1, 0, 0, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v263);
            if (v264 != buf)
              free(v264);
          }
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v135 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = LOWORD(v315[0]);
            _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_INFO, "CLWifi1Settings, overriding visibilityIntersectionType with %{public}hu", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            LODWORD(v316[0]) = 67240192;
            HIDWORD(v316[0]) = LOWORD(v315[0]);
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "CLWifi1Settings, overriding visibilityIntersectionType with %{public}hu", v316, v305);
            v262 = (char *)v261;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v261);
            if (v262 != buf)
              free(v262);
          }
          word_1022FF794 = v315[0];
        }
      }
      *(_DWORD *)buf = dword_1022FF798;
      if (sub_1001E4B84((uint64_t)v308, "conservativeValidCentroidCountUpperBound", buf))
        dword_1022FF798 = *(_DWORD *)buf;
    }
    sub_100119F3C(v316);
    if (sub_100006BB4((uint64_t)v314, "Wsb", v316))
    {
      v307 = 0;
      if (sub_1001E4874((uint64_t)v316, "skipAonsensedScansForBarometerCalibration", (BOOL *)&v307))
        byte_1022FF79E = v307;
      if (sub_1001E4874((uint64_t)v316, "skipWifiManagerScansForBarometerCalibration", (BOOL *)&v307))
        byte_1022FF79F = v307;
      if (sub_1001E4874((uint64_t)v316, "skipAonsensedScansForTransitMacMonitor", (BOOL *)&v307))
        byte_1022FF79C = v307;
      if (sub_1001E4874((uint64_t)v316, "skipWifiManagerScansForTransitMacMonitor", (BOOL *)&v307))
        byte_1022FF79D = v307;
      if (sub_1001E4874((uint64_t)v316, "skipAonsensedScansForWsbFixOnLegacyDevices", (BOOL *)&v307))
        byte_1022FF7A0 = v307;
      if (sub_1001E4874((uint64_t)v316, "skipWifiManagerScansForWsbFixOnLegacyDevices", (BOOL *)&v307))
        byte_1022FF7A1 = v307;
      if (sub_1001E4874((uint64_t)v316, "skipAonsensedScansForWsbFixOnNewDevices", (BOOL *)&v307))
        byte_1022FF7A2 = v307;
      if (sub_1001E4874((uint64_t)v316, "skipWifiManagerScansForWsbFixOnNewDevices", (BOOL *)&v307))
        byte_1022FF7A3 = v307;
      v306 = 0;
      if (sub_1001E4B84((uint64_t)v316, "maxNumWsbReprocessGroups", &v306))
      {
        if (v306 < 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v137 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v306;
            _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumWsbReprocessGroups", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
            v315[0] = 67174657;
            v315[1] = v306;
            LODWORD(v305) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumWsbReprocessGroups", v315, v305);
            v304 = (char *)v303;
            sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v303);
            if (v304 != buf)
              free(v304);
          }
        }
        else
        {
          dword_1022FF7A4 = v306;
        }
      }
    }
    sub_10011A5A8(v316);
    sub_10011A5A8(v308);
    sub_10011A5A8(&v317);
    sub_10011A5A8(v309);
    sub_10011A5A8(v319);
    sub_10011A5A8(v320);
    sub_10011A5A8(v321);
    sub_10011A5A8(&v322);
    sub_10011A5A8(v310);
    sub_10011A5A8(v311);
    sub_10011A5A8(v312);
    sub_10011A5A8(v324);
    sub_10011A5A8(&v325);
    sub_10011A5A8(v313);
  }
  return sub_10011A5A8(v314);
}

void sub_101339684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  sub_10011A5A8(&a29);
  sub_10011A5A8(&a13);
  sub_10011A5A8(&a31);
  sub_10011A5A8(&a15);
  sub_10011A5A8(&a33);
  sub_10011A5A8(&a35);
  sub_10011A5A8(&a37);
  sub_10011A5A8(&a39);
  sub_10011A5A8(&a17);
  sub_10011A5A8(&a19);
  sub_10011A5A8(&a21);
  sub_10011A5A8(&a41);
  sub_10011A5A8(&a43);
  sub_10011A5A8(&a23);
  sub_10011A5A8(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_101339990(uint64_t a1, uint64_t a2)
{
  id v3;
  const __CFString *v4;
  const __CFArray *v5;
  int *v6;
  int *v7;
  int *v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  NSObject *v15;
  std::string *v16;
  std::string *v18;
  const char *v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  void *__p;
  void *v24;
  uint64_t v25;
  int *context;
  int *v27;
  uint64_t v28;
  CFArrayRef theArray;
  _QWORD v30[2];
  std::string v31;
  _QWORD v32[2];
  std::string v33;
  CFRange v34;

  sub_100119F3C(v30);
  theArray = 0;
  if (sub_100006BB4(a2, "Default5GHzStage1Channels", v30))
  {
    v3 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    if (v3)
    {
      v4 = (const __CFString *)objc_msgSend(v3, "countryCode");
      if (v4)
        sub_100527258((uint64_t)v30, v4, (CFTypeRef *)&theArray);
    }
    v5 = theArray;
    if (theArray || (sub_100527258((uint64_t)v30, CFSTR("Default"), (CFTypeRef *)&theArray), (v5 = theArray) != 0))
    {
      context = 0;
      v27 = 0;
      v28 = 0;
      v34.length = CFArrayGetCount(v5);
      v34.location = 0;
      CFArrayApplyFunction(v5, v34, (CFArrayApplierFunction)sub_101339FB4, &context);
      v6 = v27;
      if (v27 != context)
      {
        __p = 0;
        v24 = 0;
        v25 = 0;
        sub_10027205C(&__p, context, (uint64_t)v27, v27 - context);
        sub_10132F184((uint64_t)&unk_102313F50, 12, (uint64_t)&__p);
        if (__p)
        {
          v24 = __p;
          operator delete(__p);
        }
        v7 = v27;
        v8 = context + 1;
        std::to_string(&v21, *context);
        for (; v8 != v7; ++v8)
        {
          v9 = *v8;
          sub_10078A2A0((const void **)&v21.__r_.__value_.__l.__data_, 44, (uint64_t)&v31);
          std::to_string(&v33, v9);
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = &v33;
          else
            v10 = (std::string *)v33.__r_.__value_.__r.__words[0];
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
          else
            size = v33.__r_.__value_.__l.__size_;
          v12 = std::string::append(&v31, (const std::string::value_type *)v10, size);
          v13 = v12->__r_.__value_.__r.__words[0];
          v32[0] = v12->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
          v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v21.__r_.__value_.__l.__data_);
          v21.__r_.__value_.__r.__words[0] = v13;
          v21.__r_.__value_.__l.__size_ = v32[0];
          *(std::string::size_type *)((char *)&v21.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v32 + 7);
          *((_BYTE *)&v21.__r_.__value_.__s + 23) = v14;
        }
        v22 = v21;
        memset(&v21, 0, sizeof(v21));
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
        v15 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          v16 = &v22;
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          LODWORD(v31.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#Mobile Asset Wifi1 Settings Wifi Service updated default 5GHz channels: %{private}s", (uint8_t *)&v31, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v31, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021AF6D8);
          v18 = &v22;
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
          LODWORD(v33.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          _os_log_send_and_compose_impl(2, 0, &v31, 1628, &_mh_execute_header, qword_1022A0058, 2, "#Mobile Asset Wifi1 Settings Wifi Service updated default 5GHz channels: %{private}s", &v33, 12);
          v20 = (std::string *)v19;
          sub_100512490("Generic", 1, 0, 2, "void CLWifi1Settings::updateWifiServiceSettings(const CLNameValuePair &)", "%s\n", v19);
          if (v20 != &v31)
            free(v20);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v6 = context;
      }
      if (v6)
      {
        v27 = v6;
        operator delete(v6);
      }
    }
  }
  return sub_10011A5A8(v30);
}

void sub_101339D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a23 < 0)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  sub_10011A5A8(&a31);
  _Unwind_Resume(a1);
}

BOOL sub_101339E20(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) > 0;
}

double sub_101339E30(uint64_t a1)
{
  __int128 v1;
  double result;

  *(_OWORD *)a1 = xmmword_101C9DF50;
  *(_OWORD *)(a1 + 16) = xmmword_101C9DF60;
  *(_OWORD *)(a1 + 32) = xmmword_101C9DF70;
  *(_OWORD *)(a1 + 48) = xmmword_101C9DF80;
  *(_OWORD *)(a1 + 64) = xmmword_101C9DF90;
  *(_OWORD *)(a1 + 80) = xmmword_101C9DFA0;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(0x405E000000000000uLL);
  *(_OWORD *)(a1 + 112) = xmmword_101C9DFB0;
  *(_OWORD *)(a1 + 128) = xmmword_101C9DFC0;
  *(_OWORD *)(a1 + 144) = xmmword_101C9DFD0;
  *(_OWORD *)(a1 + 160) = xmmword_101C15ED0;
  *(_DWORD *)(a1 + 176) = 3;
  *(_OWORD *)(a1 + 184) = xmmword_101C9DFE0;
  *(_QWORD *)(a1 + 200) = 0x402E000000000000;
  *(_DWORD *)(a1 + 208) = 18;
  *(_OWORD *)(a1 + 216) = xmmword_101C9DFF0;
  *(_QWORD *)&v1 = 0xA0000000ALL;
  *((_QWORD *)&v1 + 1) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 232) = v1;
  *(_QWORD *)(a1 + 248) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 256) = xmmword_101C9E000;
  *(_OWORD *)(a1 + 272) = xmmword_101C9E010;
  *(_DWORD *)(a1 + 288) = 10;
  *(_QWORD *)(a1 + 296) = 0x4008000000000000;
  *(_OWORD *)(a1 + 304) = xmmword_101C15ED0;
  *(_OWORD *)(a1 + 320) = xmmword_101C9E020;
  *(_OWORD *)(a1 + 336) = xmmword_101C9E030;
  *(_OWORD *)(a1 + 352) = xmmword_101C9E060;
  *(_OWORD *)(a1 + 384) = xmmword_101C9E050;
  *(_OWORD *)(a1 + 400) = xmmword_101C9E040;
  *(_OWORD *)(a1 + 416) = xmmword_101C9E080;
  *(_OWORD *)(a1 + 432) = xmmword_101C9E070;
  result = 100000000.0;
  *(_OWORD *)(a1 + 368) = xmmword_101C9E090;
  return result;
}

void sub_101339F5C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101339F88(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_101339FB4(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  int valuePtr;

  v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    valuePtr = 0;
    if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr))
    {
      if ((valuePtr & 0x80000000) == 0 && !sub_1000AFA5C(valuePtr))
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = *(_DWORD **)(a2 + 8);
        if ((unint64_t)v6 >= v5)
        {
          v8 = *(_DWORD **)a2;
          v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 2;
          v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62)
            sub_100259694();
          v11 = v5 - (_QWORD)v8;
          if (v11 >> 1 > v10)
            v10 = v11 >> 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
            v12 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v12 = v10;
          if (v12)
          {
            v13 = (char *)sub_100260634(a2 + 16, v12);
            v8 = *(_DWORD **)a2;
            v6 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v13 = 0;
          }
          v14 = &v13[4 * v9];
          v15 = &v13[4 * v12];
          *(_DWORD *)v14 = valuePtr;
          v7 = v14 + 4;
          while (v6 != v8)
          {
            v16 = *--v6;
            *((_DWORD *)v14 - 1) = v16;
            v14 -= 4;
          }
          *(_QWORD *)a2 = v14;
          *(_QWORD *)(a2 + 8) = v7;
          *(_QWORD *)(a2 + 16) = v15;
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v6 = valuePtr;
          v7 = v6 + 1;
        }
        *(_QWORD *)(a2 + 8) = v7;
      }
    }
  }
}

_QWORD *sub_10133A0DC(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10133A310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1008817BC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10133A32C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10133A3C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10133A3E0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10133A46C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_10133A484()
{
  xmmword_102313D10 = xmmword_101C9E0A0;
  *(_OWORD *)&qword_102313D20 = xmmword_101C9E0B0;
  xmmword_102313D30 = xmmword_101C9E0C0;
  *(_OWORD *)&qword_102313D40 = xmmword_101C9E0D0;
  xmmword_102313D50 = xmmword_101C1F9F0;
  qword_102313D60 = 0x120000000ALL;
  dword_102313D68 = 2;
  qword_102313D70 = 0x40E1170000000000;
  qword_102313D78 = 0x4100000004;
  qword_102313D80 = 0x408C200000000000;
  byte_102313D88 = 0;
  sub_101339E30((uint64_t)&qword_102313D90);
  sub_10132F240((uint64_t)&unk_102313F50);
  return __cxa_atexit((void (*)(void *))sub_10132E4FC, &unk_102313F50, (void *)&_mh_execute_header);
}

void sub_10133A70C(uint64_t a1)
{
  NSBundle *v2;
  NSBundle *v3;

  v2 = +[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/LocationBundles/AppleWatchWorkout.bundle"));
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = objc_msgSend(objc_alloc((Class)CLLocationManager), "initWithEffectiveBundlePath:delegate:onQueue:", CFSTR("/System/Library/LocationBundles/AppleWatchWorkout.bundle"), *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 40), "queue"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setDesiredAccuracy:", kCLLocationAccuracyHundredMeters);

  }
}

void sub_10133A870(uint64_t a1)
{

}

void sub_10133ABC4(dispatch_source_t *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v8;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  dispatch_time_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gfc Scheduling timer with timeout %llu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
    v15 = 134217984;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "#gfc Scheduling timer with timeout %llu", &v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void scheduleTimer(dispatch_source_t *, const uint64_t, CLDispatchSilo *, void (^)(void))", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v9 = *a1;
  if (*a1)
  {
    v10 = dispatch_time(0x8000000000000000, 1000000000 * a2);
    dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(*a1, a4);
  }
  else
  {
    v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(a3, "queue"));
    *a1 = v11;
    v12 = dispatch_time(0x8000000000000000, 1000000000 * a2);
    dispatch_source_set_timer(v11, v12, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(*a1, a4);
    dispatch_resume(*a1);
  }
}

id sub_10133AE24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onLocationUpdateTimerFire");
}

void sub_10133B758(dispatch_source_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gfc Canceling timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "#gfc Canceling timer", v9, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void cancelTimer(dispatch_source_t *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*a1)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gfc Timer existed, canceling now", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
      v9[0] = 0;
      LODWORD(v8) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "#gfc Timer existed, canceling now", v9, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void cancelTimer(dispatch_source_t *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    dispatch_source_cancel(*a1);
    dispatch_release(*a1);
    *a1 = 0;
  }
}

id sub_10133C834(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onGeoFenceTimerFire");
}

void sub_10133CD14(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_10133CD40()
{
  uint64_t result;

  if (qword_102313F88)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313F88 + 8))(qword_102313F88);
  if (qword_102313F90)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313F90 + 8))(qword_102313F90);
  if (qword_102313F98)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313F98 + 8))(qword_102313F98);
  if (qword_102313FA0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FA0 + 8))(qword_102313FA0);
  if (qword_102313FA8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FA8 + 8))(qword_102313FA8);
  if (qword_102313FB0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FB0 + 8))(qword_102313FB0);
  result = qword_102313FB8;
  if (qword_102313FB8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102313FB8 + 8))(qword_102313FB8);
  return result;
}

void sub_10133CDFC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10230E3C8 & 1) == 0)
  {
    byte_10230E3C8 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", a4);
    operator new();
  }
}

_QWORD *sub_10133D0B4(_QWORD *result)
{
  *result = off_1021AF728;
  result[1] = 0;
  result[2] = 0;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  return result;
}

void sub_10133D0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  std::string *v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 292);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102313F88 + 8);
      sub_10133DC40(v6, v7);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_18;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102313F88 + 16);
    sub_10133DDCC(v8, v9);
    if ((*(_DWORD *)(a2 + 36) & 4) != 0)
    {
LABEL_18:
      v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 4u;
      v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v11, v10);
    }
  }
}

void sub_10133D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10133D2C0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = result[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_102313F88 != result)
  {
    v4 = result[1];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10133D35C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AF728;
  sub_10133D2C0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10133D38C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AF728;
  sub_10133D2C0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_10133D3D0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102313F88;
  if (!qword_102313F88)
  {
    sub_10133CDFC(0, a2, a3, a4);
    return qword_102313F88;
  }
  return result;
}

void sub_10133D3FC()
{
  operator new();
}

uint64_t sub_10133D440(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 36);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_10133D4C8(result);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_10133D500(result);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_10133D4C8(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 48))
  {
    if ((*(_BYTE *)(result + 48) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10133D500(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  if ((*(_BYTE *)(result + 212) & 1) != 0)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 72);
      if ((_BYTE)v3)
      {
        *(_OWORD *)(v2 + 24) = 0u;
        *(_OWORD *)(v2 + 8) = 0u;
        *(_DWORD *)(v2 + 40) = 1;
      }
      if ((v3 & 0xFF00) != 0)
      {
        *(_QWORD *)(v2 + 52) = 0;
        *(_QWORD *)(v2 + 44) = 0;
        *(_QWORD *)(v2 + 60) = 0;
      }
      *(_DWORD *)(v2 + 72) = 0;
    }
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  if (*(int *)(result + 96) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 96));
  }
  *(_DWORD *)(v1 + 96) = 0;
  if (*(int *)(v1 + 120) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 8 * v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 120));
  }
  *(_DWORD *)(v1 + 120) = 0;
  if (*(int *)(v1 + 144) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * v8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v1 + 144));
  }
  *(_DWORD *)(v1 + 144) = 0;
  if (*(int *)(v1 + 168) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 8 * v10);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      ++v10;
    }
    while (v10 < *(int *)(v1 + 168));
  }
  *(_DWORD *)(v1 + 168) = 0;
  if (*(int *)(v1 + 192) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v1 + 184) + 8 * v12);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      ++v12;
    }
    while (v12 < *(int *)(v1 + 192));
  }
  *(_DWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 212) = 0;
  return result;
}

uint64_t sub_10133D68C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  void *v28;
  uint64_t result;
  unsigned int v30;
  unsigned int v31;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v30 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30))return 0;
        }
        else
        {
          v30 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v11 = *((_DWORD *)this + 14);
        v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12)
          return 0;
        v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
        if (!sub_10133E72C(v9, this, v14) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        v15 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)this + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 < *((_QWORD *)this + 2) && *v18 == 18)
        {
          *((_QWORD *)this + 1) = v18 + 1;
          goto LABEL_32;
        }
      }
      if (v7 == 2)
        break;
      if (v7 == 3)
      {
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_46;
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_20:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_20;
LABEL_32:
    *(_DWORD *)(a1 + 36) |= 2u;
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19)
      operator new();
    v31 = 0;
    v20 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31))
        return 0;
    }
    else
    {
      v31 = *v20;
      *((_QWORD *)this + 1) = v20 + 1;
    }
    v21 = *((_DWORD *)this + 14);
    v22 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v21 + 1;
    if (v21 >= v22)
      return 0;
    v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
    if (!sub_101340C20(v19, this, v24) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
    v25 = *((_DWORD *)this + 14);
    v16 = __OFSUB__(v25, 1);
    v26 = v25 - 1;
    if (v26 < 0 == v16)
      *((_DWORD *)this + 14) = v26;
    v27 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v27 < *((_QWORD *)this + 2) && *v27 == 26)
    {
      *((_QWORD *)this + 1) = v27 + 1;
LABEL_46:
      *(_DWORD *)(a1 + 36) |= 4u;
      v28 = *(void **)(a1 + 24);
      if (v28 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v28);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_10133DA34(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102313F88 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 24), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102313F88 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_10133DACC(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_28;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102313F88 + 8);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10133EC04(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    v4 = (v7 + v8 + 1);
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102313F88 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101341ACC(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v4 = (v4 + v18 + v14 + 1);
  }
LABEL_28:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_10133DBF4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10133D0D4(a1, (uint64_t)lpsrc);
}

double sub_10133DC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 791);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102313F98 + 8);
      result = sub_10133E3BC(v7, v8);
      v6 = *(_DWORD *)(a2 + 48);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_18;
      }
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 16) = v9;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
LABEL_18:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
LABEL_19:
    v11 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 40) = v11;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0)
        return result;
      goto LABEL_10;
    }
LABEL_20:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 48) & 0x20) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

void sub_10133DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10133DDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v36, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 2415);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v35, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v36);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002E60A0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 8 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  v6 = *(_DWORD *)(a2 + 48);
  if (v6)
  {
    sub_1002A19E0(a1 + 40, *(_DWORD *)(a1 + 48) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 48)), *(const void **)(a2 + 40), 4 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  v7 = *(_DWORD *)(a2 + 72);
  if (v7)
  {
    sub_1002A19E0(a1 + 64, *(_DWORD *)(a1 + 72) + v7);
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 4 * *(int *)(a1 + 72)), *(const void **)(a2 + 64), 4 * *(int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) += *(_DWORD *)(a2 + 72);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), *(_DWORD *)(a2 + 96) + *(_DWORD *)(a1 + 96));
  if (*(int *)(a2 + 96) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v8);
      v10 = *(_DWORD *)(a1 + 100);
      v11 = *(int *)(a1 + 96);
      if ((int)v11 >= v10)
      {
        if (v10 == *(_DWORD *)(a1 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), v10 + 1);
          v10 = *(_DWORD *)(a1 + 100);
        }
        *(_DWORD *)(a1 + 100) = v10 + 1;
        operator new();
      }
      v12 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 96) = v11 + 1;
      sub_1013403EC(*(_QWORD *)(v12 + 8 * v11), v9);
      ++v8;
    }
    while (v8 < *(int *)(a2 + 96));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), *(_DWORD *)(a2 + 120) + *(_DWORD *)(a1 + 120));
  if (*(int *)(a2 + 120) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v13);
      v15 = *(_DWORD *)(a1 + 124);
      v16 = *(int *)(a1 + 120);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(a1 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), v15 + 1);
          v15 = *(_DWORD *)(a1 + 124);
        }
        *(_DWORD *)(a1 + 124) = v15 + 1;
        operator new();
      }
      v17 = *(_QWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 120) = v16 + 1;
      sub_10133FB20(*(_QWORD *)(v17 + 8 * v16), v14);
      ++v13;
    }
    while (v13 < *(int *)(a2 + 120));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 136), *(_DWORD *)(a2 + 144) + *(_DWORD *)(a1 + 144));
  if (*(int *)(a2 + 144) >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v18);
      v20 = *(_DWORD *)(a1 + 148);
      v21 = *(int *)(a1 + 144);
      if ((int)v21 >= v20)
      {
        if (v20 == *(_DWORD *)(a1 + 152))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 136), v20 + 1);
          v20 = *(_DWORD *)(a1 + 148);
        }
        *(_DWORD *)(a1 + 148) = v20 + 1;
        operator new();
      }
      v22 = *(_QWORD *)(a1 + 136);
      *(_DWORD *)(a1 + 144) = v21 + 1;
      sub_10133FB20(*(_QWORD *)(v22 + 8 * v21), v19);
      ++v18;
    }
    while (v18 < *(int *)(a2 + 144));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 160), *(_DWORD *)(a2 + 168) + *(_DWORD *)(a1 + 168));
  if (*(int *)(a2 + 168) >= 1)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v23);
      v25 = *(_DWORD *)(a1 + 172);
      v26 = *(int *)(a1 + 168);
      if ((int)v26 >= v25)
      {
        if (v25 == *(_DWORD *)(a1 + 176))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 160), v25 + 1);
          v25 = *(_DWORD *)(a1 + 172);
        }
        *(_DWORD *)(a1 + 172) = v25 + 1;
        operator new();
      }
      v27 = *(_QWORD *)(a1 + 160);
      *(_DWORD *)(a1 + 168) = v26 + 1;
      sub_10133FB20(*(_QWORD *)(v27 + 8 * v26), v24);
      ++v23;
    }
    while (v23 < *(int *)(a2 + 168));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184), *(_DWORD *)(a2 + 192) + *(_DWORD *)(a1 + 192));
  if (*(int *)(a2 + 192) >= 1)
  {
    v28 = 0;
    do
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + 8 * v28);
      v30 = *(_DWORD *)(a1 + 196);
      v31 = *(int *)(a1 + 192);
      if ((int)v31 >= v30)
      {
        if (v30 == *(_DWORD *)(a1 + 200))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184), v30 + 1);
          v30 = *(_DWORD *)(a1 + 196);
        }
        *(_DWORD *)(a1 + 196) = v30 + 1;
        operator new();
      }
      v32 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)(a1 + 192) = v31 + 1;
      sub_10133FB20(*(_QWORD *)(v32 + 8 * v31), v29);
      ++v28;
    }
    while (v28 < *(int *)(a2 + 192));
  }
  if ((*(_BYTE *)(a2 + 212) & 1) != 0)
  {
    *(_DWORD *)(a1 + 212) |= 1u;
    v33 = *(_QWORD *)(a1 + 8);
    if (!v33)
      operator new();
    v34 = *(_QWORD *)(a2 + 8);
    if (!v34)
      v34 = *(_QWORD *)(qword_102313FB8 + 8);
    sub_10133ED70(v33, v34);
  }
}

void sub_10133E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10133E3A4()
{
  return 1;
}

_QWORD *sub_10133E3AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.LogEntry");
}

double sub_10133E3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 465);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_10133E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10133E45C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AF7A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10133E46C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AF7A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10133E49C()
{
  operator new();
}

uint64_t sub_10133E4D4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10133E4E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t result;
  unint64_t v8;

  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 9)
        break;
      v8 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10133E5D8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  return result;
}

uint64_t sub_10133E5F0(uint64_t a1)
{
  uint64_t v1;

  v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_10133E60C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10133E3BC(a1, (uint64_t)lpsrc);
}

uint64_t sub_10133E658()
{
  return 1;
}

_QWORD *sub_10133E660@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTileTimestamp");
}

void sub_10133E670(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021AF818;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102313F98 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10133E6C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10133E670(a1);
  operator delete();
}

void sub_10133E6E8()
{
  operator new();
}

uint64_t sub_10133E72C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t result;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30[2];

  v5 = (unsigned int *)(a1 + 16);
  v6 = (unsigned int *)(a1 + 20);
  v7 = (unsigned int *)(a1 + 40);
  while (2)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_24;
        *(_DWORD *)(a1 + 48) |= 1u;
        v11 = *(_QWORD *)(a1 + 8);
        if (!v11)
          operator new();
        v30[0] = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30))return 0;
        }
        else
        {
          v30[0] = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v17 = *((_DWORD *)this + 14);
        v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        if (!sub_10133E4E8(v11, this, v20) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        v21 = *((_DWORD *)this + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)this + 14) = v23;
        v24 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 >= v13 || *v24 != 16)
          continue;
        v14 = v24 + 1;
        *((_QWORD *)this + 1) = v14;
        goto LABEL_36;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
LABEL_36:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v14;
          v25 = v14 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        if ((unint64_t)v25 >= v13 || *v25 != 24)
          continue;
        v15 = v25 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_44:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v15;
          v27 = v15 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 48) |= 4u;
        if ((unint64_t)v27 >= v13 || *v27 != 32)
          continue;
        v16 = v27 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_52:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v16;
          v28 = v16 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 48) |= 8u;
        if ((unint64_t)v28 >= v13 || *v28 != 41)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_60:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 48) |= 0x10u;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 != 49)
          continue;
        *((_QWORD *)this + 1) = v29 + 1;
LABEL_64:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)v30;
          *(_DWORD *)(a1 + 48) |= 0x20u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v15 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_44;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_52;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_60;
        goto LABEL_24;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 != 1)
          goto LABEL_24;
        goto LABEL_64;
      default:
        v10 = TagFallback & 7;
LABEL_24:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_10133EB28(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102313F98 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 40), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 32), a3);
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 48) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 32), a3);
  return result;
}

uint64_t sub_10133EC04(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  unsigned int v14;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_29;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      goto LABEL_13;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102313F98 + 8);
  v7 = ((int)(*(_DWORD *)(v6 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v6 + 16) = v7;
  v4 = v7 | 2;
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_9:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v9 = 2;
    }
    v4 += v9;
  }
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_24;
    goto LABEL_20;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v11 = 2;
  }
  v4 += v11;
  if ((v3 & 8) != 0)
  {
LABEL_20:
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v13 = 2;
    }
    v4 += v13;
  }
LABEL_24:
  v14 = v4 + 9;
  if ((v3 & 0x10) == 0)
    v14 = v4;
  if ((v3 & 0x20) != 0)
    result = v14 + 9;
  else
    result = v14;
LABEL_29:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

double sub_10133ED0C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10133DC40(a1, (uint64_t)lpsrc);
}

uint64_t sub_10133ED58()
{
  return 1;
}

_QWORD *sub_10133ED60@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTileHeader");
}

void sub_10133ED70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 1373);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  v5 = *(_DWORD *)(a2 + 72);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 24) = v11;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_27:
    v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_26:
  v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v12;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_27;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_28:
  v14 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v14;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    v5 = *(_DWORD *)(a2 + 72);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v15 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v15;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v16;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 72) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v18 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v18;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      return;
    goto LABEL_20;
  }
LABEL_34:
  v19 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 72) |= 0x1000u;
  *(_DWORD *)(a1 + 60) = v19;
  if ((*(_DWORD *)(a2 + 72) & 0x2000) == 0)
    return;
LABEL_20:
  v7 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) |= 0x2000u;
  *(_DWORD *)(a1 + 64) = v7;
}

void sub_10133EFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10133EFC4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AF890;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10133EFD4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AF890;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10133F004()
{
  operator new();
}

uint64_t sub_10133F05C(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 72);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 1;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(result + 52) = 0;
    *(_QWORD *)(result + 44) = 0;
    *(_QWORD *)(result + 60) = 0;
  }
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_10133F098(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v14;
  uint64_t result;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  unint64_t *v40;
  unsigned int *v41;
  unsigned int v42;

  v40 = (unint64_t *)(a1 + 2);
  v41 = a1 + 4;
  v5 = a1 + 10;
  v6 = a1 + 11;
  v7 = a1 + 12;
  v8 = a1 + 13;
  v9 = a1 + 14;
  v10 = a1 + 15;
  v11 = a1 + 16;
  while (2)
  {
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if (v14 != 1)
          goto LABEL_42;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v40);
        if ((_DWORD)result)
        {
          a1[18] |= 1u;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          if ((unint64_t)v17 < v16 && *v17 == 16)
          {
            v18 = v17 + 1;
            *((_QWORD *)this + 1) = v18;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v18 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
LABEL_16:
        if ((unint64_t)v18 >= v16 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
        }
        else
        {
          *v41 = *v18;
          v19 = v18 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        a1[18] |= 2u;
        if ((unint64_t)v19 < v16 && *v19 == 29)
        {
          *((_QWORD *)this + 1) = v19 + 1;
          goto LABEL_51;
        }
        continue;
      case 3u:
        v14 = TagFallback & 7;
        if (v14 != 5)
          goto LABEL_42;
LABEL_51:
        v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0)
          return 0;
        a1[5] = v42;
        a1[18] |= 4u;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 != 37)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_55:
        v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0)
          return 0;
        a1[6] = v42;
        a1[18] |= 8u;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 != 45)
          continue;
        *((_QWORD *)this + 1) = v29 + 1;
LABEL_59:
        v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0)
          return 0;
        a1[7] = v42;
        a1[18] |= 0x10u;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 53)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_63:
        v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0)
          return 0;
        a1[8] = v42;
        a1[18] |= 0x20u;
        v31 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 != 61)
          continue;
        *((_QWORD *)this + 1) = v31 + 1;
LABEL_67:
        v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) != 0)
        {
          a1[9] = v42;
          a1[18] |= 0x40u;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v20 = *((_QWORD *)this + 2);
          if ((unint64_t)v32 < v20 && *v32 == 64)
          {
            v21 = v32 + 1;
            *((_QWORD *)this + 1) = v21;
LABEL_71:
            if ((unint64_t)v21 >= v20 || *v21 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
              if (!(_DWORD)result)
                return result;
              v33 = (_BYTE *)*((_QWORD *)this + 1);
              v20 = *((_QWORD *)this + 2);
            }
            else
            {
              *v5 = *v21;
              v33 = v21 + 1;
              *((_QWORD *)this + 1) = v33;
            }
            a1[18] |= 0x80u;
            if ((unint64_t)v33 < v20 && *v33 == 72)
            {
              v22 = v33 + 1;
              *((_QWORD *)this + 1) = v22;
LABEL_79:
              if ((unint64_t)v22 >= v20 || *v22 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
                if (!(_DWORD)result)
                  return result;
                v34 = (_BYTE *)*((_QWORD *)this + 1);
                v20 = *((_QWORD *)this + 2);
              }
              else
              {
                *v6 = *v22;
                v34 = v22 + 1;
                *((_QWORD *)this + 1) = v34;
              }
              a1[18] |= 0x100u;
              if ((unint64_t)v34 < v20 && *v34 == 80)
              {
                v23 = v34 + 1;
                *((_QWORD *)this + 1) = v23;
LABEL_87:
                if ((unint64_t)v23 >= v20 || *v23 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
                  if (!(_DWORD)result)
                    return result;
                  v35 = (_BYTE *)*((_QWORD *)this + 1);
                  v20 = *((_QWORD *)this + 2);
                }
                else
                {
                  *v7 = *v23;
                  v35 = v23 + 1;
                  *((_QWORD *)this + 1) = v35;
                }
                a1[18] |= 0x200u;
                if ((unint64_t)v35 < v20 && *v35 == 88)
                {
                  v24 = v35 + 1;
                  *((_QWORD *)this + 1) = v24;
LABEL_95:
                  if ((unint64_t)v24 >= v20 || *v24 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
                    if (!(_DWORD)result)
                      return result;
                    v36 = (_BYTE *)*((_QWORD *)this + 1);
                    v20 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    *v8 = *v24;
                    v36 = v24 + 1;
                    *((_QWORD *)this + 1) = v36;
                  }
                  a1[18] |= 0x400u;
                  if ((unint64_t)v36 < v20 && *v36 == 96)
                  {
                    v25 = v36 + 1;
                    *((_QWORD *)this + 1) = v25;
LABEL_103:
                    if ((unint64_t)v25 >= v20 || *v25 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
                      if (!(_DWORD)result)
                        return result;
                      v37 = (_BYTE *)*((_QWORD *)this + 1);
                      v20 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      *v9 = *v25;
                      v37 = v25 + 1;
                      *((_QWORD *)this + 1) = v37;
                    }
                    a1[18] |= 0x800u;
                    if ((unint64_t)v37 < v20 && *v37 == 104)
                    {
                      v26 = v37 + 1;
                      *((_QWORD *)this + 1) = v26;
LABEL_111:
                      if ((unint64_t)v26 >= v20 || *v26 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
                        if (!(_DWORD)result)
                          return result;
                        v38 = (_BYTE *)*((_QWORD *)this + 1);
                        v20 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        *v10 = *v26;
                        v38 = v26 + 1;
                        *((_QWORD *)this + 1) = v38;
                      }
                      a1[18] |= 0x1000u;
                      if ((unint64_t)v38 < v20 && *v38 == 112)
                      {
                        v27 = v38 + 1;
                        *((_QWORD *)this + 1) = v27;
LABEL_119:
                        if ((unint64_t)v27 >= v20 || *v27 < 0)
                        {
                          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
                          if (!(_DWORD)result)
                            return result;
                          v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                          v20 = *((_QWORD *)this + 2);
                        }
                        else
                        {
                          *v11 = *v27;
                          v39 = (unsigned __int8 *)(v27 + 1);
                          *((_QWORD *)this + 1) = v39;
                        }
                        a1[18] |= 0x2000u;
                        if (v39 == (unsigned __int8 *)v20
                          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                        {
                          *((_DWORD *)this + 8) = 0;
                          result = 1;
                          *((_BYTE *)this + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 4u:
        v14 = TagFallback & 7;
        if (v14 == 5)
          goto LABEL_55;
        goto LABEL_42;
      case 5u:
        v14 = TagFallback & 7;
        if (v14 == 5)
          goto LABEL_59;
        goto LABEL_42;
      case 6u:
        v14 = TagFallback & 7;
        if (v14 == 5)
          goto LABEL_63;
        goto LABEL_42;
      case 7u:
        v14 = TagFallback & 7;
        if (v14 == 5)
          goto LABEL_67;
        goto LABEL_42;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v21 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_71;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v22 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_79;
      case 0xAu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v23 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_87;
      case 0xBu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v24 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_95;
      case 0xCu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v25 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_103;
      case 0xDu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v26 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_111;
      case 0xEu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v27 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_119;
      default:
        v14 = TagFallback & 7;
LABEL_42:
        if (v14 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_10133F734(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), v4, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(float *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v4, *(float *)(v5 + 28), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v4, *(float *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v4, *(float *)(v5 + 36), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 40), v4, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 44), v4, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 48), v4, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 52), v4, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 56), v4, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(v5 + 64), v4, a4);
  }
LABEL_28:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 60), v4, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x2000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(v5 + 64), v4, a4);
  return result;
}

uint64_t sub_10133F8E0(unsigned int *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;

  v3 = a1[18];
  if ((_BYTE)v3)
  {
    v4 = ((int)(v3 << 31) >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
      if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        v3 = a1[18];
      }
      else
      {
        v6 = 2;
      }
      v4 += v6;
    }
    v8 = v4 + 5;
    if ((v3 & 4) == 0)
      v8 = v4;
    if ((v3 & 8) != 0)
      v8 += 5;
    if ((v3 & 0x10) != 0)
      v8 += 5;
    if ((v3 & 0x20) != 0)
      v8 += 5;
    if ((v3 & 0x40) != 0)
      v7 = v8 + 5;
    else
      v7 = v8;
    if ((v3 & 0x80) != 0)
    {
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
        v3 = a1[18];
      }
      else
      {
        v10 = 2;
      }
      v7 = (v10 + v7);
    }
  }
  else
  {
    v7 = 0;
  }
  if ((v3 & 0xFF00) == 0)
    goto LABEL_56;
  if ((v3 & 0x100) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = a1[18];
    }
    else
    {
      v12 = 2;
    }
    v7 = (v12 + v7);
    if ((v3 & 0x200) == 0)
    {
LABEL_27:
      if ((v3 & 0x400) == 0)
        goto LABEL_28;
      goto LABEL_40;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_27;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = a1[18];
  }
  else
  {
    v14 = 2;
  }
  v7 = (v14 + v7);
  if ((v3 & 0x400) == 0)
  {
LABEL_28:
    if ((v3 & 0x800) == 0)
      goto LABEL_29;
LABEL_44:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[14];
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      v3 = a1[18];
    }
    else
    {
      v18 = 2;
    }
    v7 = (v18 + v7);
    if ((v3 & 0x1000) == 0)
    {
LABEL_30:
      if ((v3 & 0x2000) == 0)
        goto LABEL_56;
      goto LABEL_52;
    }
    goto LABEL_48;
  }
LABEL_40:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = a1[18];
  }
  else
  {
    v16 = 2;
  }
  v7 = (v16 + v7);
  if ((v3 & 0x800) != 0)
    goto LABEL_44;
LABEL_29:
  if ((v3 & 0x1000) == 0)
    goto LABEL_30;
LABEL_48:
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[15];
  if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    v3 = a1[18];
  }
  else
  {
    v20 = 2;
  }
  v7 = (v20 + v7);
  if ((v3 & 0x2000) != 0)
  {
LABEL_52:
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[16];
    if (v21 >= 0x80)
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    else
      v22 = 2;
    v7 = (v22 + v7);
  }
LABEL_56:
  a1[17] = v7;
  return v7;
}

void sub_10133FABC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10133ED70(a1, (uint64_t)lpsrc);
}

uint64_t sub_10133FB08()
{
  return 1;
}

_QWORD *sub_10133FB10@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTilePayloadMetaData");
}

void sub_10133FB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 1675);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002A19E0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 40);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
    }
  }
}

void sub_10133FC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10133FC24(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_1021AF908;
  if (*((_QWORD *)this + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10133FC70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10133FC24(a1);
  operator delete();
}

void sub_10133FC94()
{
  operator new();
}

uint64_t sub_10133FCD0(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10133FCE8(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  char *v16;
  uint64_t result;
  _BYTE *v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v5 = a1 + 16;
  v6 = (unsigned int *)(a1 + 12);
  do
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v9 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v25 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v14 = v25;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 8) = -(v14 & 1) ^ (v14 >> 1);
        *(_DWORD *)(a1 + 40) |= 1u;
        if ((unint64_t)v15 < v11 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)this + 1) = v16;
          goto LABEL_30;
        }
      }
      if (v9 != 2)
        break;
      v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_20;
      v16 = (char *)*((_QWORD *)this + 1);
      v11 = *((_QWORD *)this + 2);
LABEL_30:
      if ((unint64_t)v16 >= v11 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!(_DWORD)result)
          return result;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
      }
      else
      {
        *v6 = *v16;
        v18 = v16 + 1;
        *((_QWORD *)this + 1) = v18;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if ((unint64_t)v18 < v11 && *v18 == 26)
      {
        v12 = v18 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_38:
        v27 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
          v19 = v27;
        }
        else
        {
          v19 = *v12;
          v27 = v19;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v19);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
        {
          v26 = 0;
          v21 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0;
          }
          else
          {
            v26 = *v21;
            *((_QWORD *)this + 1) = v21 + 1;
          }
          v22 = *(_DWORD *)(a1 + 24);
          if (v22 == *(_DWORD *)(a1 + 28))
          {
            sub_1002A19E0(v5, v22 + 1);
            v22 = *(_DWORD *)(a1 + 24);
          }
          v23 = v26;
          v24 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v22 + 1;
          *(_DWORD *)(v24 + 4 * v22) = v23;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
LABEL_53:
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v9 == 3)
    {
      v10 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        result = sub_10133FFD8(1, 0x1Au, this, v5);
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
      }
      if (v10 == 2)
      {
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_38;
      }
    }
    else
    {
      v10 = TagFallback & 7;
    }
LABEL_20:
    if (v10 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10133FFD8(int a1, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a4)
{
  char *v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _BYTE v24[48];

  v22 = 0;
  v7 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v22 = *v7;
    *((_QWORD *)this + 1) = v7 + 1;
  }
  v9 = *(_DWORD *)(a4 + 8);
  if (v9 == *(_DWORD *)(a4 + 12))
  {
    sub_1002A19E0(a4, v9 + 1);
    v9 = *(_DWORD *)(a4 + 8);
  }
  v10 = v22;
  v11 = *(_QWORD *)a4;
  *(_DWORD *)(a4 + 8) = v9 + 1;
  *(_DWORD *)(v11 + 4 * v9) = v10;
  v12 = *(_DWORD *)(a4 + 12) - *(_DWORD *)(a4 + 8);
  if (v12 >= 1)
  {
    v13 = v12 + 1;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v17 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((int)v14 - (int)v17 < 2 || (a2 & 0x7F | 0x80) != *v17 || v17[1] != (a2 >> 7))
          return 1;
        v16 = (char *)(v17 + 2);
      }
      else
      {
        v15 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v15 >= v14 || *v15 != a2)
          return 1;
        v16 = (char *)(v15 + 1);
      }
      *((_QWORD *)this + 1) = v16;
      if ((unint64_t)v16 >= v14 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v22 = *v16;
        *((_QWORD *)this + 1) = v16 + 1;
      }
      v18 = *(_DWORD *)(a4 + 8);
      if (v18 >= *(_DWORD *)(a4 + 12))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v24, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
        v19 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (size()) < (Capacity()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v19);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
        v18 = *(_DWORD *)(a4 + 8);
      }
      v20 = v22;
      v21 = *(_QWORD *)a4;
      *(_DWORD *)(a4 + 8) = v18 + 1;
      *(_DWORD *)(v21 + 4 * v18) = v20;
      --v13;
    }
    while (v13 > 1);
  }
  return 1;
}

void sub_1013401B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013401CC(uint64_t result, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
  }
  if ((v6 & 2) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x1Au);
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      v7 = 0;
      do
        result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return result;
}

uint64_t sub_101340278(uint64_t a1, unsigned int a2)
{
  char v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 40);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(a1 + 8)) ^ (*(int *)(a1 + 8) >> 31));
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  else
    v7 = 2;
  v4 += v7;
LABEL_14:
  v8 = *(_DWORD *)(a1 + 24);
  if (v8 < 1)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 16)
                                                                                             + 4 * v9);
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v8 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        v12 = 1;
      }
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v12 + (_DWORD)v10);
      ++v9;
    }
    while (v9 < v8);
    if ((int)v10 > 0)
    {
      if (v10 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      else
        v13 = 2;
      v4 += v13;
    }
  }
  result = (v4 + (_DWORD)v10);
  *(_DWORD *)(a1 + 32) = (_DWORD)v10;
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_101340388(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10133FB20(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013403D4()
{
  return 1;
}

_QWORD *sub_1013403DC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.PointFacetVisibilityData");
}

void sub_1013403EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", 1929);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002A19E0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 40);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
    }
  }
}

void sub_1013404D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013404F0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_1021AF980;
  if (*((_QWORD *)this + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10134053C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1013404F0(a1);
  operator delete();
}

void sub_101340560()
{
  operator new();
}

uint64_t sub_10134059C(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1013405B4(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t result;
  _BYTE *v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v5 = a1 + 16;
  v6 = (unsigned int *)(a1 + 8);
  v7 = (unsigned int *)(a1 + 12);
  do
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)this + 1) = v16;
          goto LABEL_30;
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_20;
      v16 = (char *)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
LABEL_30:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
        if (!(_DWORD)result)
          return result;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
      }
      else
      {
        *v7 = *v16;
        v18 = v16 + 1;
        *((_QWORD *)this + 1) = v18;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if ((unint64_t)v18 < v12 && *v18 == 26)
      {
        v13 = v18 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_38:
        v26 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0;
          v19 = v26;
        }
        else
        {
          v19 = *v13;
          v26 = v19;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v19);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
        {
          v25 = 0;
          v21 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25))return 0;
          }
          else
          {
            v25 = *v21;
            *((_QWORD *)this + 1) = v21 + 1;
          }
          v22 = *(_DWORD *)(a1 + 24);
          if (v22 == *(_DWORD *)(a1 + 28))
          {
            sub_1002A19E0(v5, v22 + 1);
            v22 = *(_DWORD *)(a1 + 24);
          }
          v23 = v25;
          v24 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v22 + 1;
          *(_DWORD *)(v24 + 4 * v22) = v23;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
LABEL_53:
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        result = sub_10133FFD8(1, 0x1Au, this, v5);
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
      }
      if (v11 == 2)
      {
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_38;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_20:
    if (v11 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_101340894(uint64_t result, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
  }
  if ((v6 & 2) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x1Au);
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      v7 = 0;
      do
        result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return result;
}

uint64_t sub_101340940(uint64_t a1, unsigned int a2)
{
  char v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 40);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  else
    v7 = 2;
  v4 += v7;
LABEL_14:
  v8 = *(_DWORD *)(a1 + 24);
  if (v8 < 1)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 16)
                                                                                             + 4 * v9);
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v8 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        v12 = 1;
      }
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v12 + (_DWORD)v10);
      ++v9;
    }
    while (v9 < v8);
    if ((int)v10 > 0)
    {
      if (v10 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      else
        v13 = 2;
      v4 += v13;
    }
  }
  result = (v4 + (_DWORD)v10);
  *(_DWORD *)(a1 + 32) = (_DWORD)v10;
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_101340A48(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1013403EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_101340A94()
{
  return 1;
}

_QWORD *sub_101340A9C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.FacetInterVisibilityData");
}

void sub_101340AAC(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)off_1021AF9F8;
  if ((uint64_t *)qword_102313FB8 != a1)
  {
    v2 = a1[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_10010C59C(a1 + 23);
  sub_10010C59C(a1 + 20);
  sub_10010C59C(a1 + 17);
  sub_10010C59C(a1 + 14);
  sub_10010C59C(a1 + 11);
  if (a1[8])
    operator delete[]();
  if (a1[5])
    operator delete[]();
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_101340B90(uint64_t *a1)
{
  sub_101340AAC(a1);
  operator delete();
}

void sub_101340BB4()
{
  operator new();
}

uint64_t sub_101340C20(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  unsigned int v29;
  int v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  int v44;
  char *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  _BYTE *v109;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v110;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v111;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v112;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v113;
  unsigned int v114[2];
  unsigned int v115;

  v5 = a1 + 64;
  v6 = a1 + 40;
  v7 = a1 + 16;
  v112 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112);
  v113 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88);
  v110 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 160);
  v111 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 136);
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_33;
        *(_DWORD *)(a1 + 212) |= 1u;
        v12 = *(_DWORD **)(a1 + 8);
        if (!v12)
          operator new();
        v114[0] = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
        }
        else
        {
          v114[0] = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
        if (!sub_10133F098(v12, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v27 < 0 == v26)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v28 >= v15 || *v28 != 18)
          continue;
        v14 = v28 + 1;
        *((_QWORD *)this + 1) = v14;
        goto LABEL_51;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          result = sub_100661090(1, 0x12u, this, v7);
          if (!(_DWORD)result)
            return result;
LABEL_66:
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
          if ((unint64_t)v35 < v17 && *v35 == 26)
          {
            v16 = v35 + 1;
            *((_QWORD *)this + 1) = v16;
LABEL_69:
            v114[0] = 0;
            if ((unint64_t)v16 >= v17 || *v16 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
              v36 = v114[0];
            }
            else
            {
              v36 = *v16;
              v114[0] = v36;
              *((_QWORD *)this + 1) = v16 + 1;
            }
            v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v36);
            while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
            {
              v115 = 0;
              v38 = (char *)*((_QWORD *)this + 1);
              if ((unint64_t)v38 >= *((_QWORD *)this + 2) || *v38 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v115))return 0;
              }
              else
              {
                v115 = *v38;
                *((_QWORD *)this + 1) = v38 + 1;
              }
              v39 = *(_DWORD *)(a1 + 48);
              if (v39 == *(_DWORD *)(a1 + 52))
              {
                sub_1002A19E0(v6, v39 + 1);
                v39 = *(_DWORD *)(a1 + 48);
              }
              v40 = v115;
              v41 = *(_QWORD *)(a1 + 40);
              *(_DWORD *)(a1 + 48) = v39 + 1;
              *(_DWORD *)(v41 + 4 * v39) = v40;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
            goto LABEL_84;
          }
          continue;
        }
        if (v11 == 2)
        {
          v14 = (char *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
LABEL_51:
          v115 = 0;
          if ((unint64_t)v14 >= v15 || *v14 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v115))return 0;
            v29 = v115;
          }
          else
          {
            v29 = *v14;
            v115 = v29;
            *((_QWORD *)this + 1) = v14 + 1;
          }
          v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            *(_QWORD *)v114 = 0;
            v31 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v114))return 0;
            }
            else
            {
              *(_QWORD *)v114 = *v31;
              *((_QWORD *)this + 1) = v31 + 1;
            }
            v32 = *(_DWORD *)(a1 + 24);
            if (v32 == *(_DWORD *)(a1 + 28))
            {
              sub_1002E60A0(v7, v32 + 1);
              v32 = *(_DWORD *)(a1 + 24);
            }
            v33 = *(_QWORD *)v114;
            v34 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 24) = v32 + 1;
            *(_QWORD *)(v34 + 8 * v32) = v33;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
          goto LABEL_66;
        }
LABEL_33:
        if (v11 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
        {
          if (v11 == 2)
          {
            v16 = (char *)*((_QWORD *)this + 1);
            v17 = *((_QWORD *)this + 2);
            goto LABEL_69;
          }
          goto LABEL_33;
        }
        result = sub_10133FFD8(1, 0x1Au, this, v6);
        if (!(_DWORD)result)
          return result;
LABEL_84:
        v42 = (_BYTE *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        if ((unint64_t)v42 < v19 && *v42 == 34)
        {
          v18 = v42 + 1;
          *((_QWORD *)this + 1) = v18;
LABEL_87:
          v114[0] = 0;
          if ((unint64_t)v18 >= v19 || *v18 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
            v43 = v114[0];
          }
          else
          {
            v43 = *v18;
            v114[0] = v43;
            *((_QWORD *)this + 1) = v18 + 1;
          }
          v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            v115 = 0;
            v45 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v45 >= *((_QWORD *)this + 2) || *v45 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v115))return 0;
            }
            else
            {
              v115 = *v45;
              *((_QWORD *)this + 1) = v45 + 1;
            }
            v46 = *(_DWORD *)(a1 + 72);
            if (v46 == *(_DWORD *)(a1 + 76))
            {
              sub_1002A19E0(v5, v46 + 1);
              v46 = *(_DWORD *)(a1 + 72);
            }
            v47 = v115;
            v48 = *(_QWORD *)(a1 + 64);
            *(_DWORD *)(a1 + 72) = v46 + 1;
            *(_DWORD *)(v48 + 4 * v46) = v47;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
LABEL_102:
          v49 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v49 < *((_QWORD *)this + 2) && *v49 == 42)
          {
            do
            {
              *((_QWORD *)this + 1) = v49 + 1;
LABEL_105:
              v50 = *(_DWORD *)(a1 + 100);
              v51 = *(int *)(a1 + 96);
              if ((int)v51 >= v50)
              {
                if (v50 == *(_DWORD *)(a1 + 104))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v113, v50 + 1);
                  v50 = *(_DWORD *)(a1 + 100);
                }
                *(_DWORD *)(a1 + 100) = v50 + 1;
                operator new();
              }
              v52 = *(_QWORD *)(a1 + 88);
              *(_DWORD *)(a1 + 96) = v51 + 1;
              v53 = *(_QWORD *)(v52 + 8 * v51);
              v114[0] = 0;
              v54 = (char *)*((_QWORD *)this + 1);
              if ((unint64_t)v54 >= *((_QWORD *)this + 2) || *v54 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
              }
              else
              {
                v114[0] = *v54;
                *((_QWORD *)this + 1) = v54 + 1;
              }
              v55 = *((_DWORD *)this + 14);
              v56 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v55 + 1;
              if (v55 >= v56)
                return 0;
              v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
              if (!sub_1013405B4(v53, this, v58) || !*((_BYTE *)this + 36))
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
              v59 = *((_DWORD *)this + 14);
              v26 = __OFSUB__(v59, 1);
              v60 = v59 - 1;
              if (v60 < 0 == v26)
                *((_DWORD *)this + 14) = v60;
              v49 = (_BYTE *)*((_QWORD *)this + 1);
              if ((unint64_t)v49 >= *((_QWORD *)this + 2))
                goto LABEL_2;
              v61 = *v49;
            }
            while (v61 == 42);
            if (v61 == 50)
            {
              do
              {
                *((_QWORD *)this + 1) = v49 + 1;
LABEL_123:
                v62 = *(_DWORD *)(a1 + 124);
                v63 = *(int *)(a1 + 120);
                if ((int)v63 >= v62)
                {
                  if (v62 == *(_DWORD *)(a1 + 128))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v62 + 1);
                    v62 = *(_DWORD *)(a1 + 124);
                  }
                  *(_DWORD *)(a1 + 124) = v62 + 1;
                  operator new();
                }
                v64 = *(_QWORD *)(a1 + 112);
                *(_DWORD *)(a1 + 120) = v63 + 1;
                v65 = *(_QWORD *)(v64 + 8 * v63);
                v114[0] = 0;
                v66 = (char *)*((_QWORD *)this + 1);
                if ((unint64_t)v66 >= *((_QWORD *)this + 2) || *v66 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
                }
                else
                {
                  v114[0] = *v66;
                  *((_QWORD *)this + 1) = v66 + 1;
                }
                v67 = *((_DWORD *)this + 14);
                v68 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v67 + 1;
                if (v67 >= v68)
                  return 0;
                v69 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                if (!sub_10133FCE8(v65, this, v70) || !*((_BYTE *)this + 36))
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v69);
                v71 = *((_DWORD *)this + 14);
                v26 = __OFSUB__(v71, 1);
                v72 = v71 - 1;
                if (v72 < 0 == v26)
                  *((_DWORD *)this + 14) = v72;
                v49 = (_BYTE *)*((_QWORD *)this + 1);
                if ((unint64_t)v49 >= *((_QWORD *)this + 2))
                  goto LABEL_2;
                v73 = *v49;
              }
              while (v73 == 50);
              if (v73 == 58)
              {
                do
                {
                  *((_QWORD *)this + 1) = v49 + 1;
LABEL_141:
                  v74 = *(_DWORD *)(a1 + 148);
                  v75 = *(int *)(a1 + 144);
                  if ((int)v75 >= v74)
                  {
                    if (v74 == *(_DWORD *)(a1 + 152))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v111, v74 + 1);
                      v74 = *(_DWORD *)(a1 + 148);
                    }
                    *(_DWORD *)(a1 + 148) = v74 + 1;
                    operator new();
                  }
                  v76 = *(_QWORD *)(a1 + 136);
                  *(_DWORD *)(a1 + 144) = v75 + 1;
                  v77 = *(_QWORD *)(v76 + 8 * v75);
                  v114[0] = 0;
                  v78 = (char *)*((_QWORD *)this + 1);
                  if ((unint64_t)v78 >= *((_QWORD *)this + 2) || *v78 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
                  }
                  else
                  {
                    v114[0] = *v78;
                    *((_QWORD *)this + 1) = v78 + 1;
                  }
                  v79 = *((_DWORD *)this + 14);
                  v80 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v79 + 1;
                  if (v79 >= v80)
                    return 0;
                  v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                  if (!sub_10133FCE8(v77, this, v82) || !*((_BYTE *)this + 36))
                    return 0;
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
                  v83 = *((_DWORD *)this + 14);
                  v26 = __OFSUB__(v83, 1);
                  v84 = v83 - 1;
                  if (v84 < 0 == v26)
                    *((_DWORD *)this + 14) = v84;
                  v49 = (_BYTE *)*((_QWORD *)this + 1);
                  if ((unint64_t)v49 >= *((_QWORD *)this + 2))
                    goto LABEL_2;
                  v85 = *v49;
                }
                while (v85 == 58);
                if (v85 == 66)
                {
                  do
                  {
                    *((_QWORD *)this + 1) = v49 + 1;
LABEL_159:
                    v86 = *(_DWORD *)(a1 + 172);
                    v87 = *(int *)(a1 + 168);
                    if ((int)v87 >= v86)
                    {
                      if (v86 == *(_DWORD *)(a1 + 176))
                      {
                        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v110, v86 + 1);
                        v86 = *(_DWORD *)(a1 + 172);
                      }
                      *(_DWORD *)(a1 + 172) = v86 + 1;
                      operator new();
                    }
                    v88 = *(_QWORD *)(a1 + 160);
                    *(_DWORD *)(a1 + 168) = v87 + 1;
                    v89 = *(_QWORD *)(v88 + 8 * v87);
                    v114[0] = 0;
                    v90 = (char *)*((_QWORD *)this + 1);
                    if ((unint64_t)v90 >= *((_QWORD *)this + 2) || *v90 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
                    }
                    else
                    {
                      v114[0] = *v90;
                      *((_QWORD *)this + 1) = v90 + 1;
                    }
                    v91 = *((_DWORD *)this + 14);
                    v92 = *((_DWORD *)this + 15);
                    *((_DWORD *)this + 14) = v91 + 1;
                    if (v91 >= v92)
                      return 0;
                    v93 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                    if (!sub_10133FCE8(v89, this, v94) || !*((_BYTE *)this + 36))
                      return 0;
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v93);
                    v95 = *((_DWORD *)this + 14);
                    v26 = __OFSUB__(v95, 1);
                    v96 = v95 - 1;
                    if (v96 < 0 == v26)
                      *((_DWORD *)this + 14) = v96;
                    v49 = (_BYTE *)*((_QWORD *)this + 1);
                    if ((unint64_t)v49 >= *((_QWORD *)this + 2))
                      goto LABEL_2;
                    v97 = *v49;
                  }
                  while (v97 == 66);
                  if (v97 == 74)
                  {
                    do
                    {
                      *((_QWORD *)this + 1) = v49 + 1;
LABEL_177:
                      v98 = *(_DWORD *)(a1 + 196);
                      v99 = *(int *)(a1 + 192);
                      if ((int)v99 >= v98)
                      {
                        if (v98 == *(_DWORD *)(a1 + 200))
                        {
                          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v98 + 1);
                          v98 = *(_DWORD *)(a1 + 196);
                        }
                        *(_DWORD *)(a1 + 196) = v98 + 1;
                        operator new();
                      }
                      v100 = *(_QWORD *)(a1 + 184);
                      *(_DWORD *)(a1 + 192) = v99 + 1;
                      v101 = *(_QWORD *)(v100 + 8 * v99);
                      v114[0] = 0;
                      v102 = (char *)*((_QWORD *)this + 1);
                      if ((unint64_t)v102 >= *((_QWORD *)this + 2) || *v102 < 0)
                      {
                        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0;
                      }
                      else
                      {
                        v114[0] = *v102;
                        *((_QWORD *)this + 1) = v102 + 1;
                      }
                      v103 = *((_DWORD *)this + 14);
                      v104 = *((_DWORD *)this + 15);
                      *((_DWORD *)this + 14) = v103 + 1;
                      if (v103 >= v104)
                        return 0;
                      v105 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                      if (!sub_10133FCE8(v101, this, v106) || !*((_BYTE *)this + 36))
                        return 0;
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v105);
                      v107 = *((_DWORD *)this + 14);
                      v26 = __OFSUB__(v107, 1);
                      v108 = v107 - 1;
                      if (v108 < 0 == v26)
                        *((_DWORD *)this + 14) = v108;
                      v49 = (_BYTE *)*((_QWORD *)this + 1);
                      v109 = (_BYTE *)*((_QWORD *)this + 2);
                    }
                    while (v49 < v109 && *v49 == 74);
                    if (v49 == v109 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      result = 1;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
        }
        continue;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          result = sub_10133FFD8(1, 0x22u, this, v5);
          if (!(_DWORD)result)
            return result;
          goto LABEL_102;
        }
        if (v11 != 2)
          goto LABEL_33;
        v18 = (char *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        goto LABEL_87;
      case 5u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_105;
        goto LABEL_33;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_123;
        goto LABEL_33;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_141;
        goto LABEL_33;
      case 8u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_159;
        goto LABEL_33;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_33;
        goto LABEL_177;
      default:
        v11 = TagFallback & 7;
        goto LABEL_33;
    }
  }
}

uint64_t sub_10134187C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if ((*(_BYTE *)(result + 212) & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102313FB8 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x12u);
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      v7 = 0;
      do
        result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  if (*(int *)(v5 + 48) > 0)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x1Au);
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 56));
    if (*(int *)(v5 + 48) >= 1)
    {
      v8 = 0;
      do
        result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v8++));
      while (v8 < *(int *)(v5 + 48));
    }
  }
  if (*(int *)(v5 + 72) > 0)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x22u);
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 80));
    if (*(int *)(v5 + 72) >= 1)
    {
      v9 = 0;
      do
        result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * v9++));
      while (v9 < *(int *)(v5 + 72));
    }
  }
  if (*(int *)(v5 + 96) >= 1)
  {
    v10 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 96));
  }
  if (*(int *)(v5 + 120) >= 1)
  {
    v11 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*(_QWORD *)(v5 + 112) + 8 * v11++), a2, a4);
    while (v11 < *(int *)(v5 + 120));
  }
  if (*(int *)(v5 + 144) >= 1)
  {
    v12 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * v12++), a2, a4);
    while (v12 < *(int *)(v5 + 144));
  }
  if (*(int *)(v5 + 168) >= 1)
  {
    v13 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_QWORD *)(*(_QWORD *)(v5 + 160) + 8 * v13++), a2, a4);
    while (v13 < *(int *)(v5 + 168));
  }
  if (*(int *)(v5 + 192) >= 1)
  {
    v14 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(*(_QWORD *)(v5 + 184) + 8 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 192));
  }
  return result;
}

uint64_t sub_101341ACC(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;
  int v54;

  if ((*(_BYTE *)(a1 + 212) & 1) != 0)
  {
    v4 = *(unsigned int **)(a1 + 8);
    if (!v4)
      v4 = *(unsigned int **)(qword_102313FB8 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10133F8E0(v4, a2);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    else
      v7 = 1;
    v3 = v6 + v7 + 1;
  }
  else
  {
    v3 = 0;
  }
  if (*(int *)(a1 + 24) < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v8 = 0;
    LODWORD(v9) = 0;
    do
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*(_QWORD *)(a1 + 16) + 8 * v8++), a2)+ v9);
    while (v8 < *(int *)(a1 + 24));
    if ((int)v9 > 0)
    {
      if (v9 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      else
        v10 = 1;
      v3 += v10 + 1;
    }
  }
  *(_DWORD *)(a1 + 32) = (_DWORD)v9;
  v11 = v3 + (_DWORD)v9;
  v12 = *(_DWORD *)(a1 + 48);
  if (v12 < 1)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    v13 = 0;
    LODWORD(v14) = 0;
    do
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 40)
                                                                                             + 4 * v13);
      if (v15 >= 0x80)
      {
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        v12 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        v16 = 1;
      }
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v16 + (_DWORD)v14);
      ++v13;
    }
    while (v13 < v12);
    if ((int)v14 > 0)
    {
      if (v14 >= 0x80)
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
      else
        v17 = 1;
      v11 += v17 + 1;
    }
  }
  *(_DWORD *)(a1 + 56) = (_DWORD)v14;
  v18 = v11 + (_DWORD)v14;
  v19 = *(_DWORD *)(a1 + 72);
  if (v19 < 1)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    v20 = 0;
    LODWORD(v21) = 0;
    do
    {
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 64)
                                                                                             + 4 * v20);
      if (v22 >= 0x80)
      {
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
        v19 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        v23 = 1;
      }
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v23 + (_DWORD)v21);
      ++v20;
    }
    while (v20 < v19);
    if ((int)v21 > 0)
    {
      if (v21 >= 0x80)
        v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      else
        v24 = 2;
      v18 += v24;
    }
  }
  *(_DWORD *)(a1 + 80) = (_DWORD)v21;
  v25 = *(_DWORD *)(a1 + 96);
  v26 = v18 + (_DWORD)v21 + v25;
  if (v25 >= 1)
  {
    v27 = 0;
    do
    {
      v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101340940(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v27), a2);
      v29 = (int)v28;
      if (v28 >= 0x80)
        v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
      else
        v30 = 1;
      v26 += v29 + v30;
      ++v27;
    }
    while (v27 < *(int *)(a1 + 96));
  }
  v31 = *(_DWORD *)(a1 + 120);
  v32 = v31 + v26;
  if (v31 >= 1)
  {
    v33 = 0;
    do
    {
      v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101340278(*(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * v33), a2);
      v35 = (int)v34;
      if (v34 >= 0x80)
        v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
      else
        v36 = 1;
      v32 += v35 + v36;
      ++v33;
    }
    while (v33 < *(int *)(a1 + 120));
  }
  v37 = *(_DWORD *)(a1 + 144);
  v38 = v37 + v32;
  if (v37 >= 1)
  {
    v39 = 0;
    do
    {
      v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101340278(*(_QWORD *)(*(_QWORD *)(a1 + 136)+ 8 * v39), a2);
      v41 = (int)v40;
      if (v40 >= 0x80)
        v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40, a2);
      else
        v42 = 1;
      v38 += v41 + v42;
      ++v39;
    }
    while (v39 < *(int *)(a1 + 144));
  }
  v43 = *(_DWORD *)(a1 + 168);
  v44 = v43 + v38;
  if (v43 >= 1)
  {
    v45 = 0;
    do
    {
      v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101340278(*(_QWORD *)(*(_QWORD *)(a1 + 160)+ 8 * v45), a2);
      v47 = (int)v46;
      if (v46 >= 0x80)
        v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
      else
        v48 = 1;
      v44 += v47 + v48;
      ++v45;
    }
    while (v45 < *(int *)(a1 + 168));
  }
  v49 = *(_DWORD *)(a1 + 192);
  v50 = (v49 + v44);
  if (v49 >= 1)
  {
    v51 = 0;
    do
    {
      v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101340278(*(_QWORD *)(*(_QWORD *)(a1 + 184)+ 8 * v51), a2);
      v53 = (int)v52;
      if (v52 >= 0x80)
        v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, a2);
      else
        v54 = 1;
      v50 = (v53 + v50 + v54);
      ++v51;
    }
    while (v51 < *(int *)(a1 + 192));
  }
  *(_DWORD *)(a1 + 208) = v50;
  return v50;
}

void sub_101341E4C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10133DDCC(a1, (uint64_t)lpsrc);
}

uint64_t sub_101341E98()
{
  return 1;
}

_QWORD *sub_101341EA0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTilePayload");
}

uint64_t sub_101341EB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

void sub_10134294C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_101342984(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;

  v2 = objc_opt_class(CLEEDMediaItem, v1);
  v4 = objc_opt_class(CLEEDMitigation, v3);
  v6 = objc_opt_class(CLEEDUploadServiceConfig, v5);
  v8 = objc_opt_class(NSArray, v7);
  v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, v4, v6, v8, objc_opt_class(NSSet, v9), 0);
  qword_10230E3D0 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___CLEEDMediaServiceProtocol);
  objc_msgSend((id)qword_10230E3D0, "setClasses:forSelector:argumentIndex:ofReply:", v10, "processMediaServicesForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:", 6, 0);
  objc_msgSend((id)qword_10230E3D0, "setClasses:forSelector:argumentIndex:ofReply:", v10, "processMediaServicesMitigations:", 0, 0);
  objc_msgSend((id)qword_10230E3D0, "setClasses:forSelector:argumentIndex:ofReply:", v10, "connectToMediaService:uploadConfig:", 0, 0);
  qword_10230E3D8 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___CLEEDMediaServiceDelegate);
}

void sub_101342AAC(id a1)
{
  NSObject *v1;
  uint64_t v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  const char *v6;
  __int16 v7;
  NSXPCConnection *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  NSXPCConnection *v12;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AFB70);
  v1 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v10 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke_2";
    v11 = 2114;
    v12 = +[NSXPCConnection currentConnection](NSXPCConnection, "currentConnection");
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, Connection[%{public}@] invalidated", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AFB70);
    v2 = qword_1022A0088;
    v5 = 136446466;
    v6 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
    v7 = 2114;
    v8 = +[NSXPCConnection currentConnection](NSXPCConnection, "currentConnection");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v2, 0, "#EED2FWK,%{public}s, Connection[%{public}@] invalidated", &v5, 22);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_101342C88(uint64_t a1)
{
  _QWORD *Weak;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v14[5];
  int v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;

  Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v3 = Weak;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AFB70);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s, Connection interrupted", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AFB70);
      v15 = 136446210;
      v16 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2FWK,%{public}s, Connection interrupted", &v15, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 16))();
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 16))();
    v7 = (void *)v3[6];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_101343010;
    v14[3] = &unk_102143618;
    v14[4] = v3;
    objc_msgSend(objc_msgSend(v7, "remoteObjectProxyWithErrorHandler:", v14), "connectToMediaService:uploadConfig:", v5, v6);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AFB70);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, reconnecting to EEDMediaService", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AFB70);
      v15 = 136446210;
      v16 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
      LODWORD(v13) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2FWK,%{public}s, reconnecting to EEDMediaService", &v15, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

id sub_101343010(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "processIdentifier"));
}

id sub_101343044(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "processIdentifier"));
}

id sub_101343974(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "processIdentifier"));
}

uint64_t sub_1013439A8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AFB70);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v13 = "-[CLEEDMediaServiceHandler processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:m"
          "ediaList:mitigation:completion:]_block_invoke_2";
    v14 = 2114;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AFB70);
    v8 = 136446466;
    v9 = "-[CLEEDMediaServiceHandler processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:me"
         "diaList:mitigation:completion:]_block_invoke";
    v10 = 2114;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", &v8, 22);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDMediaServiceHandler processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1013440BC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "processIdentifier"));
}

id sub_101344440(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "processIdentifier"));
}

void sub_101344474(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1013444A0(uint64_t a1)
{
  uint64_t v2;

  sub_100B26DC8(a1);
  sub_100E7A280(v2 + 824, a1);
  sub_10068654C(a1 + 912, 1);
  sub_101221838(a1 + 1776, a1 + 912);
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1888) = 0;
  sub_1006865B4(a1 + 912);
  sub_100687704(a1 + 912, (uint64_t)sub_1013445C0, a1);
  *(_QWORD *)(a1 + 1824) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  *(_BYTE *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1840) = 0;
  sub_100AAAA44((uint64_t *)(a1 + 1776), a1 + 1824);
  sub_100B26E68((_DWORD *)a1, 0x2710u);
  sub_100687710(a1 + 912, 0);
  return a1;
}

void sub_101344550(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = off_10214AE70;
  *v1 = off_102172790;
  _Unwind_Resume(exception_object);
}

float sub_1013445C0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;

  if (*(_DWORD *)(a4 + 468))
    return sub_100B27718(a4, a1, a2);
  return result;
}

_QWORD *sub_1013445E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = sub_10134460C((_QWORD *)(a1 + 1864), a2);
  *(_QWORD *)(a1 + 1896) = a3;
  return result;
}

_QWORD *sub_10134460C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1013448D4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1013446A4(uint64_t a1, float32x2_t *a2, double a3)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  float32x2_t v7;
  float v8;
  unint64_t v9;

  v4 = (unint64_t)(a3 * 1000000.0);
  v9 = v4;
  v5 = a2[1].f32[0];
  v7 = vmul_f32(*a2, (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  v8 = v5 * 0.017453;
  v6 = *(_QWORD *)(a1 + 1856);
  if (v6 && v6 + 1000000 < v4)
  {
    sub_1006865E4(a1 + 912, v4 - v6);
    sub_100AAAA44((uint64_t *)(a1 + 1776), a1 + 1824);
  }
  *(_QWORD *)(a1 + 1856) = v4;
  sub_100AAABFC(a1 + 1776, 29.0);
  sub_100686BA0(a1 + 912, (uint64_t)&v7, &v9);
  sub_100E7B07C(a1 + 824, &v7, v9);
  sub_100B2742C(a1, &v7, v9);
  if (*(_BYTE *)(a1 + 1656))
    sub_10134478C((_QWORD *)a1, v9);
}

_QWORD *sub_10134478C(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _DWORD v10[3];

  if (result[236])
  {
    v2 = result[237];
    if (v2)
    {
      v3 = (double)a2 / 1000000.0;
      v4 = (uint64_t)(result + 233);
      v5 = (uint64_t)result + 836;
      v6 = result[110] + 432;
      sub_100E7AD28((uint64_t)(result + 103));
      v10[0] = v7;
      v10[1] = v8;
      v10[2] = v9;
      return (_QWORD *)sub_101344894(v4, v2, v5, v6, (uint64_t)v10, v3);
    }
  }
  return result;
}

uint64_t sub_10134481C(float32x2_t *a1, float32x2_t *a2, double a3)
{
  __int32 v4;
  float32x2_t v6;
  __int32 v7;
  uint64_t v8;

  v8 = (unint64_t)(a3 * 1000000.0);
  v4 = a2[1].i32[0];
  v6 = *a2;
  v7 = v4;
  sub_100686B6C((uint64_t)&a1[114], (uint64_t)&v6);
  sub_100B270C0((uint64_t)a1, &v6, v8);
  return sub_100E7B5A0(a1 + 103, (uint64_t)&v6, v8);
}

uint64_t sub_101344894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a6;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, double *))(*(_QWORD *)v6 + 48))(v6, &v9, a3, a4, a5, &v8);
}

_QWORD *sub_1013448D4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101344A3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101344A48(uint64_t a1, void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_1005E7F24(a1, a2);
  *v2 = off_1021AFBA0;
  v2[53] = 0;
  operator new();
}

void sub_1013453D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;

  v17 = v12[77];
  v12[77] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *v15;
  *v15 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v12[70] = &off_102194F60;
  sub_1000F34E0(v12 + 72);
  sub_100261F44(v14);
  sub_10041D328(v13);
  sub_100261F44(a12);
  sub_1005E835C(v12);
  _Unwind_Resume(a1);
}

void sub_101345530(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::setExpirationRule(CFTimeInterval) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1013457E4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  NSObject *v10;
  _QWORD handler[5];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;

  v15 = 86400;
  v2 = sub_100127B9C();
  sub_100081C10(v2, &v13);
  v3 = sub_1001E4B84(v13, "MotionStateAggregateTimerInterval", &v15);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    v7 = 1000000000 * v15;
  else
    v7 = 86400000000000;
  v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
  *(_QWORD *)(a1 + 520) = v8;
  dispatch_source_set_timer(v8, 0, v7, 0xDF8475800uLL);
  v9 = *(_BYTE *)(a1 + 529);
  v10 = *(NSObject **)(a1 + 520);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10134648C;
  handler[3] = &unk_1021468D0;
  handler[4] = a1;
  v12 = v9;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 520));
}

void sub_101345924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_101345938(uint64_t a1)
{
  uint64_t v1;
  double Current;
  char *v3;
  char *v4;
  char *v6;
  char *v7;

  v1 = *(_QWORD *)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100F56190(v1 + 560, (uint64_t)&v6, Current);
  v3 = v6;
  v4 = v7;
  if (v6 != v7)
  {
    do
    {
      sub_1013459D8(v1 + 456, (uint64_t)v3);
      v3 += 160;
    }
    while (v3 != v4);
    v3 = v6;
  }
  if (v3)
  {
    v7 = v3;
    operator delete(v3);
  }
  return sub_101345A2C(v1);
}

void sub_1013459BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013459D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10134735C(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_10134662C(a1);
    }
  }
  return result;
}

id sub_101345A2C(uint64_t a1)
{
  __int128 v3;

  if (sub_100F567F8(a1 + 560, &v3))
    return objc_msgSend(*(id *)(a1 + 552), "setNextFireTime:", *((double *)&v3 + 1) + 75.0);
  else
    return objc_msgSend(*(id *)(a1 + 552), "setNextFireDelay:", 1.79769313e308);
}

void sub_101345A8C(_OWORD *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionState7::onOldActivityData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AFCE0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionState7::onOldActivityData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AFCE0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionState7::onOldActivityData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_101347154(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_101345C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_101345C5C(uint64_t a1)
{
  id v1;
  NSObject *v2;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 624), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")), "isAuthorizedForServiceTypeMask:", 16);
  if ((v1 & 1) == 0)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
    v2 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "Motion calibration system service is disabled.", v5, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionState7::checkAuthorization() const", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return v1;
}

void sub_101345E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (uint64_t *)sub_100A07FA0();
  v6 = 0x40000000DLL;
  v7 = 0;
  sub_1018E4078(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_1002B7674(v1 + 504, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_100A0A4BC(*(uint64_t **)(v1 + 504), (uint64_t)sub_10012CA10, v1);
}

id sub_101345EBC(uint64_t a1)
{
  return sub_101345EC8(*(id *)(a1 + 32), 0);
}

id sub_101345EC8(id result, int a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  CFAbsoluteTime Current;
  char v8;
  _QWORD v9[402];
  uint64_t v10;
  char v11;

  v3 = result;
  if (a2)
    result = objc_msgSend(*((id *)result + 83), "setNextFireDelay:", 5.0);
  if (v3[660] != a2)
  {
    v3[660] = a2;
    if (v3[528])
    {
      v6 = off_1021720B8;
      v8 = a2;
      Current = CFAbsoluteTimeGetCurrent();
      v4 = sub_1011B78D4();
      sub_1011B8DB0(v4, (uint64_t)&v6);
      sub_1015EB864(v9);
      sub_101605730((uint64_t)v9);
      v11 |= 1u;
      *(CFAbsoluteTime *)&v9[77] = Current;
      v5 = v10;
      *(_BYTE *)(v10 + 12) |= 1u;
      *(_BYTE *)(v5 + 8) = a2;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021AFD20);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v9);
      sub_1015EE304((PB::Base *)v9);
    }
    LOBYTE(v9[0]) = a2;
    LODWORD(v6) = 5;
    return (id)(*(uint64_t (**)(_BYTE *, uint64_t (***)(), _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, &v6, v9, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_101346028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_101346048(uint64_t a1)
{
  NSObject *v1;
  int *v2;
  uint32_t v3;
  uint32_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD handler[5];
  _DWORD v10[4];
  uint8_t buf[8];

  v1 = *(NSObject **)(a1 + 32);
  v2 = *(int **)(a1 + 40);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_101346260;
  handler[3] = &unk_102145848;
  handler[4] = v2;
  v3 = notify_register_dispatch("com.apple.coreaudio.VibratorState", v2 + 168, v1, handler);
  if (v3)
  {
    v4 = v3;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021AFD00);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Could not register for device vibration state notification error %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021AFD00);
      v10[0] = 67240192;
      v10[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Could not register for device vibration state notification error %{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "CLMotionState7::CLMotionState7(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  *(_QWORD *)buf = 0;
  notify_get_state(v2[168], (uint64_t *)buf);
  return sub_101345EC8(v2, *(_QWORD *)buf != 0);
}

id sub_101346260(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];
  int v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1013462BC;
  v5[3] = &unk_10213D6C0;
  v5[4] = v2;
  v6 = a2;
  return objc_msgSend(v3, "async:", v5);
}

id sub_1013462BC(uint64_t a1)
{
  void *v1;
  uint64_t state64;

  v1 = *(void **)(a1 + 32);
  state64 = 0;
  notify_get_state(*(_DWORD *)(a1 + 40), &state64);
  return sub_101345EC8(v1, state64 != 0);
}

uint64_t sub_101346308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1021AFBA0;
  sub_101346BA0(a1);

  *(_QWORD *)(a1 + 624) = 0;
  v2 = sub_1001FBB04(0);
  sub_1000A4A6C(v2, 0, *(_QWORD *)(a1 + 424));
  v3 = *(_QWORD *)(a1 + 424);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(a1 + 424) = 0;
  v4 = sub_1001FBB04(0);
  sub_1000A4A6C(v4, 0, *(_QWORD *)(a1 + 432));
  v5 = *(_QWORD *)(a1 + 432);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 432) = 0;
  v6 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  if (notify_is_valid_token(*(_DWORD *)(a1 + 672)))
  {
    notify_cancel(*(_DWORD *)(a1 + 672));
    *(_DWORD *)(a1 + 672) = -1;
  }
  v8 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_QWORD *)(a1 + 560) = &off_102194F60;
  sub_1000F34E0((_QWORD *)(a1 + 576));
  sub_100261F44(a1 + 504);
  sub_10041D328(a1 + 456);
  sub_100261F44(a1 + 440);
  return sub_1005E835C((_QWORD *)a1);
}

void sub_101346468(uint64_t a1)
{
  sub_101346308(a1);
  operator delete();
}

uint64_t sub_10134648C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
    v2 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records due to timer!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "Aggregating records due to timer!", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionState7::setUpAggregateOnTimer()_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  return sub_10134662C(v1 + 456);
}

uint64_t sub_10134662C(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::aggregateRecords() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::aggregateRecords() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_101347778(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_101347778(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDB8);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_101347778(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::aggregateRecords() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_101346BA0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;

  sub_1005E840C(a1);
  v2 = *(NSObject **)(a1 + 520);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 520));
    *(_QWORD *)(a1 + 520) = 0;
  }
  v3 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_101346C10(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
  v4 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Client registered for notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
    v7 = *a2;
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Client registered for notification %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMotionState7::registerForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_1005E8514(a1, a2);
  return sub_1005E8960(a1, a2);
}

uint64_t sub_101346DDC(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
  v4 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client unregistered for notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
    v7 = *a2;
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "Client unregistered for notification %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMotionState7::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return sub_1005E8C44(a1, a2);
}

id sub_101346F9C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v7;
  char *v8;

  if ((sub_1001B7910() & 0x800000000) != 0)
    return (id)sub_1013459D8(a1 + 456, a2);
  sub_100F557CC(a1 + 560, a2, (uint64_t)&v7);
  v4 = v7;
  v5 = v8;
  if (v7 != v8)
  {
    do
    {
      sub_1013459D8(a1 + 456, (uint64_t)v4);
      v4 += 160;
    }
    while (v4 != v5);
    v4 = v7;
  }
  if (v4)
  {
    v8 = v4;
    operator delete(v4);
  }
  return sub_101345A2C(a1);
}

void sub_101347044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101347060(uint64_t a1)
{
  sub_101347068(a1, a1 + 40);
}

void sub_101347068(uint64_t a1, uint64_t a2)
{
  void *v3;
  ALActivityLog *v4;

  v3 = objc_autoreleasePoolPush();
  v4 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v4, "setTimestamp:", *(double *)(a2 + 8));
  -[ALActivityLog setMotionState:](v4, "setMotionState:", objc_alloc_init(ALMotionState));
  -[ALMotionState setMotion:](-[ALActivityLog motionState](v4, "motionState"), "setMotion:", objc_alloc_init(ALCMMotionContextMotionState));
  -[ALCMMotionContextMotionState setType:](-[ALMotionState motion](-[ALActivityLog motionState](v4, "motionState"), "motion"), "setType:", *(unsigned int *)(a2 + 24));
  -[ALCMMotionContextMotionState setConfidence:](-[ALMotionState motion](-[ALActivityLog motionState](v4, "motionState"), "motion"), "setConfidence:", *(unsigned __int8 *)(a2 + 28));
  -[ALMotionState setRegularEntry:](-[ALActivityLog motionState](v4, "motionState"), "setRegularEntry:", 1);
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v4);
  objc_autoreleasePoolPop(v3);
}

double sub_101347154(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;
  _OWORD v11[10];

  v3 = a2[7];
  v11[6] = a2[6];
  v11[7] = v3;
  v4 = a2[9];
  v11[8] = a2[8];
  v11[9] = v4;
  v5 = a2[3];
  v11[2] = a2[2];
  v11[3] = v5;
  v6 = a2[5];
  v11[4] = a2[4];
  v11[5] = v6;
  v7 = a2[1];
  v11[0] = *a2;
  v11[1] = v7;
  sub_101346F9C(a1, (uint64_t)v11);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  sub_1000CF518((uint64_t)v11, (uint64_t)v9);
  return sub_1005E8F40(a1, (uint64_t)v9);
}

void sub_1013471D8(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_101347204(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101347230(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101347260(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1013472B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013472D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1013472F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101347330(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10134735C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 384))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_100AACCCC(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021AFDD8);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021AFDD8);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::addSuspectRecord(const T &) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_1000D1140(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AFDD8);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AFDD8);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_101347724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10134774C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101347778(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AFDD8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AFDD8);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_101347974(uint64_t a1, __int128 *a2, int a3)
{
  __int128 v4;
  unsigned int v5;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  v4 = *a2;
  *(_OWORD *)(a1 + 28) = a2[1];
  *(_OWORD *)(a1 + 12) = v4;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)(a1 + 44) = v4;
  *(_OWORD *)(a1 + 60) = v4;
  sub_1001C4198(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 > 7 || ((1 << v5) & 0x87) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_101347C78((unsigned int *)a1, __p);
      v8 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "bad RAT for GSM: %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
      v9 = qword_1022A02D8;
      sub_101347C78((unsigned int *)a1, buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "bad RAT for GSM: %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::Cell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_101347C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100664030(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101347C78@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  unsigned int v15;
  _QWORD *v16;
  void *p_p;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;

  sub_100263E50((uint64_t)v24);
  v4 = sub_100263F7C(&v25, (uint64_t)"Cell, RAT, ", 11);
  v5 = (_QWORD *)std::ostream::operator<<(v4, a1[2]);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_1001EFA4C(a1[2]);
  v8 = strlen(v7);
  v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
  v10 = sub_100263F7C(v9, (uint64_t)", valid , ", 10);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *(unsigned __int8 *)a1);
  v12 = sub_100263F7C(v11, (uint64_t)", cellType , ", 13);
  v13 = sub_1001EFA28(a1[1]);
  v14 = strlen(v13);
  sub_100263F7C(v12, (uint64_t)v13, v14);
  v15 = a1[2];
  if (v15 < 3)
  {
LABEL_4:
    v16 = sub_100263F7C(&v25, (uint64_t)", ", 2);
    sub_1005A18B4(a1 + 3, &__p);
    if ((v23 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v23 & 0x80u) == 0)
      v18 = v23;
    else
      v18 = v22;
    goto LABEL_37;
  }
  if (v15 == 9)
  {
    v16 = sub_100263F7C(&v25, (uint64_t)", ", 2);
    sub_1005A18B4(a1 + 11, &__p);
    if ((v23 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v23 & 0x80u) == 0)
      v18 = v23;
    else
      v18 = v22;
  }
  else
  {
    if (v15 == 7)
      goto LABEL_4;
    if (v15 - 3 > 2)
    {
      if (v15 == 10)
      {
        v16 = sub_100263F7C(&v25, (uint64_t)", ", 2);
        sub_1005A2548(a1 + 150, &__p);
        if ((v23 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v23 & 0x80u) == 0)
          v18 = v23;
        else
          v18 = v22;
      }
      else
      {
        if (v15 != 6)
        {
          sub_100263F7C(&v25, (uint64_t)", Unknow / Invalid Cell", 23);
          goto LABEL_39;
        }
        v16 = sub_100263F7C(&v25, (uint64_t)", ", 2);
        sub_10009643C(a1 + 128, &__p);
        if ((v23 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v23 & 0x80u) == 0)
          v18 = v23;
        else
          v18 = v22;
      }
    }
    else
    {
      v16 = sub_100263F7C(&v25, (uint64_t)", ", 2);
      sub_1005A3550(a1 + 20, &__p);
      if ((v23 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v23 & 0x80u) == 0)
        v18 = v23;
      else
        v18 = v22;
    }
  }
LABEL_37:
  sub_100263F7C(v16, (uint64_t)p_p, v18);
  if ((char)v23 < 0)
    operator delete(__p);
LABEL_39:
  std::stringbuf::str(a2, v26);
  *(_QWORD *)((char *)v24
  v25 = v19;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_101347FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_101347FF4(uint64_t a1, __int128 *a2, int a3)
{
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v4;
  *(_OWORD *)(a1 + 28) = v4;
  v5 = *a2;
  *(_OWORD *)(a1 + 60) = a2[1];
  *(_OWORD *)(a1 + 44) = v5;
  sub_1001C4198(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  if (*(_DWORD *)(a1 + 8) != 9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_101347C78((unsigned int *)a1, __p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "bad RAT for SCDMA: %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
      v9 = qword_1022A02D8;
      sub_101347C78((unsigned int *)a1, buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "bad RAT for SCDMA: %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::ScdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1013482C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100664030(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013482E8(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  NSObject *v28;
  void **v29;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  _BYTE buf[12];
  char v36;
  int v37;
  _BYTE *v38;
  void *__p[2];
  char v40;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 60) = v6;
  *(_OWORD *)(a1 + 44) = v6;
  *(_OWORD *)(a1 + 28) = v6;
  *(_OWORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  v7 = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10027205C((_QWORD *)(a1 + 88), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  v11 = *(_OWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 192);
  v16 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v7 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 272) = v15;
  *(_OWORD *)(a1 + 288) = v16;
  *(_OWORD *)(a1 + 256) = v14;
  v17 = (_BYTE *)(a1 + 320);
  if (*(char *)(a2 + 263) < 0)
  {
    sub_100115CE4(v17, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)v17 = v18;
  }
  v19 = *(_OWORD *)(a2 + 264);
  v20 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 376) = v20;
  *(_OWORD *)(a1 + 344) = v19;
  v21 = *(_OWORD *)(a2 + 312);
  v22 = *(_OWORD *)(a2 + 328);
  v23 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 440) = v23;
  *(_OWORD *)(a1 + 392) = v21;
  *(_OWORD *)(a1 + 408) = v22;
  v24 = *(_OWORD *)(a2 + 376);
  v25 = *(_OWORD *)(a2 + 392);
  v26 = *(_OWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 472) = v25;
  *(_OWORD *)(a1 + 488) = v26;
  *(_OWORD *)(a1 + 456) = v24;
  *(_DWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  v27 = *(_DWORD *)(a2 + 224);
  if (v27 < 0 || v27 == 11)
  {
    *(_DWORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 304) = a3;
  }
  else
  {
    a3 = *(_DWORD *)(a1 + 8);
  }
  if ((a3 - 3) >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    v28 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_101347C78((unsigned int *)a1, __p);
      v29 = v40 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "bad RAT for CDMA: %{public}s", buf, 0xCu);
      if (v40 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
      v31 = qword_1022A02D8;
      sub_101347C78((unsigned int *)a1, buf);
      if (v36 >= 0)
        v32 = buf;
      else
        v32 = *(_BYTE **)buf;
      v37 = 136446210;
      v38 = v32;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 17, "bad RAT for CDMA: %{public}s", &v37, 12);
      v34 = v33;
      if (v36 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::CdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v34);
      if (v34 != (char *)__p)
        free(v34);
    }
  }
  return a1;
}

void sub_1013486B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100664030(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013486EC(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  void **v11;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  _BYTE buf[12];
  char v18;
  int v19;
  _BYTE *v20;
  void *__p[2];
  char v22;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v5;
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 44) = v5;
  *(_OWORD *)(a1 + 60) = v5;
  sub_1001C4198(a1 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 528) = v6;
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 560) = v8;
  *(_OWORD *)(a1 + 576) = v9;
  *(_OWORD *)(a1 + 544) = v7;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  if (*(_DWORD *)(a1 + 8) != 6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_101347C78((unsigned int *)a1, __p);
      v11 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "bad RAT for LTE: %{public}s", buf, 0xCu);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
      v13 = qword_1022A02D8;
      sub_101347C78((unsigned int *)a1, buf);
      if (v18 >= 0)
        v14 = buf;
      else
        v14 = *(_BYTE **)buf;
      v19 = 136446210;
      v20 = v14;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 17, "bad RAT for LTE: %{public}s", &v19, 12);
      v16 = v15;
      if (v18 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::LteCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v16);
      if (v16 != (char *)__p)
        free(v16);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1013489A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100664030(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013489CC(uint64_t a1, _OWORD *a2, int a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  void **v11;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  _BYTE buf[12];
  char v18;
  int v19;
  _BYTE *v20;
  void *__p[2];
  char v22;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v5;
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 44) = v5;
  *(_OWORD *)(a1 + 60) = v5;
  sub_1001C4198(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  v6 = a2[1];
  *(_OWORD *)(a1 + 600) = *a2;
  *(_OWORD *)(a1 + 616) = v6;
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[5];
  *(_OWORD *)(a1 + 664) = a2[4];
  *(_OWORD *)(a1 + 680) = v9;
  *(_OWORD *)(a1 + 632) = v7;
  *(_OWORD *)(a1 + 648) = v8;
  if (*(_DWORD *)(a1 + 8) != 10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_101347C78((unsigned int *)a1, __p);
      v11 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "bad RAT for NR: %{public}s", buf, 0xCu);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
      v13 = qword_1022A02D8;
      sub_101347C78((unsigned int *)a1, buf);
      if (v18 >= 0)
        v14 = buf;
      else
        v14 = *(_BYTE **)buf;
      v19 = 136446210;
      v20 = v14;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 17, "bad RAT for NR: %{public}s", &v19, 12);
      v16 = v15;
      if (v18 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::NrCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v16);
      if (v16 != (char *)__p)
        free(v16);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_101348C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100664030(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101348CA0(uint64_t a1)
{
  __int128 v2;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0xB00000003;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v2;
  *(_OWORD *)(a1 + 28) = v2;
  *(_OWORD *)(a1 + 44) = v2;
  *(_OWORD *)(a1 + 60) = v2;
  sub_1001C4198(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  return a1;
}

BOOL sub_101348D90(uint64_t a1, uint64_t a2)
{
  return !sub_1001FBE48(a1, a2);
}

void sub_101348DA8(uint64_t a1, uint64_t a2)
{
  char *v3;
  NSObject *v4;
  int *v5;
  int *v6;
  unint64_t v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  unint64_t v12;
  int v13;
  int v14;
  char *v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  v3 = (char *)(a1 + 88);
  if (v3 != (char *)a2)
    sub_1002A3054(v3, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(int **)(a1 + 88);
    v5 = *(int **)(a1 + 96);
    v7 = (char *)v5 - (char *)v6;
    if (v5 == v6)
    {
      v8 = -1;
    }
    else
    {
      v8 = *v6;
      if (v7 >= 5)
      {
        v9 = v6[1];
LABEL_11:
        *(_DWORD *)buf = 67109376;
        v20 = v8;
        v21 = 1024;
        v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CELL_LOC: set derivedMcc, derivedMcc, %d, %d", buf, 0xEu);
        goto LABEL_12;
      }
    }
    v9 = -1;
    goto LABEL_11;
  }
LABEL_12:
  if (!sub_1001BFF7C(115, 2))
    return;
  bzero(buf, 0x65CuLL);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
  v11 = *(int **)(a1 + 88);
  v10 = *(int **)(a1 + 96);
  v12 = (char *)v10 - (char *)v11;
  if (v10 == v11)
  {
    v13 = -1;
  }
  else
  {
    v13 = *v11;
    if (v12 >= 5)
    {
      v14 = v11[1];
      goto LABEL_21;
    }
  }
  v14 = -1;
LABEL_21:
  v16[0] = 67109376;
  v16[1] = v13;
  v17 = 1024;
  v18 = v14;
  v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: set derivedMcc, derivedMcc, %d, %d", v16, 14);
  sub_100512490("Generic", 1, 0, 2, "void CLCell::setDerivedMCC(const CLTelephonyService_Type::DerivedMccVector &)", "%s\n", v15);
  if (v15 != (char *)buf)
    free(v15);
}

void sub_101348FD8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101349004(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_101349030(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a1 + 166080;
  *(_QWORD *)sub_100959E78(a1, a2) = off_1021AFEB0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 80) = 0;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021AFEE8);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLSwimOpenWaterSessionSimulator Instantiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021AFEE8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "CLSwimOpenWaterSessionSimulator Instantiated", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLSwimOpenWaterSessionSimulator::CLSwimOpenWaterSessionSimulator(CLSwimDataStore *, float)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v19 = xmmword_101C9E5D0;
  v20 = unk_101C9E5E0;
  v21 = xmmword_101C9E5F0;
  v22 = 0x404E000000000000;
  v15 = xmmword_101C9E590;
  v16 = unk_101C9E5A0;
  v17 = xmmword_101C9E5B0;
  v18 = unk_101C9E5C0;
  v11 = xmmword_101C9E550;
  v12 = unk_101C9E560;
  v13 = xmmword_101C9E570;
  v14 = unk_101C9E580;
  *(_OWORD *)buf = xmmword_101C9E530;
  v10 = unk_101C9E540;
  sub_10031F73C((char *)v3, (char *)buf, (uint64_t)&v23, 9uLL);
  sub_1013492A0(a1, v3);
  return a1;
}

void sub_10134925C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v2 + 24);
  if (v4)
  {
    *(_QWORD *)(v2 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }
  *v1 = off_10215FCD8;
  _Unwind_Resume(exception_object);
}

char *sub_1013492A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  char *result;
  char *v6;
  char *v7;
  int v8;
  int v9;

  v3 = a1 + 166104;
  v4 = (_OWORD *)(a1 + 166136);
  result = (char *)(a1 + 166080);
  *v4 = 0u;
  v4[1] = 0u;
  if (result != (char *)a2)
    result = sub_10031F73C(result, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(v3 + 24) = 0;
  v6 = *(char **)a2;
  v7 = *(char **)(a2 + 8);
  if (*(char **)a2 != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v9 = (int)(*((double *)v6 + 2) + (double)v9);
      v8 += *((_DWORD *)v6 + 1);
      v6 += 24;
    }
    while (v6 != v7);
    *(_DWORD *)(v3 + 24) = v8;
    *(_DWORD *)(v3 + 28) = v9;
  }
  *(_QWORD *)(v3 + 8) = *(_QWORD *)v3;
  return result;
}

uint64_t sub_10134934C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;

  result = sub_10047D950(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    v7 = (char **)(a1 + 166104);
    v8 = *(_QWORD *)(a1 + 166080);
    if (*(_QWORD *)(a1 + 166112) - *(_QWORD *)(a1 + 166104) != *(_QWORD *)(a1 + 166088) - v8)
    {
      v9 = *(_QWORD *)(a1 + 166160);
      v10 = (__int128 *)(v8 + 24 * v9);
      v11 = *((_DWORD *)v10 + 1);
      if (v11 <= 0)
      {
        v19 = v8 + 24 * v9;
        v20 = *(double *)(v19 + 16);
        v13 = (double *)(v19 + 16);
        v17 = v20 / *(v13 - 1);
      }
      else
      {
        v12 = v8 + 24 * v9;
        v14 = *(double *)(v12 + 16);
        v13 = (double *)(v12 + 16);
        v15 = *(v13 - 1);
        v16 = v15 / (double)v11;
        v17 = v14 / v15;
        if (v16 > 0.0)
        {
          v18 = *(double *)(a2 + 56);
          if (vabdd_f64(v18, *(double *)(a1 + 166144)) > v16)
          {
            sub_10047C430(*(_QWORD *)(a1 + 8), *(_DWORD *)v10, 1, v18);
            *(_QWORD *)(a1 + 166144) = *(_QWORD *)(a2 + 56);
          }
        }
      }
      if (vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 166152)) >= 1.0)
      {
        sub_10047E8F8(*(_QWORD *)(a1 + 8), v17);
        v21 = v17 + *(double *)(a1 + 166136);
        *(double *)(a1 + 166136) = v21;
        *(_QWORD *)(a1 + 166152) = *(_QWORD *)(a2 + 56);
        if (v21 >= *v13)
        {
          v22 = *(_QWORD *)(a1 + 166120);
          v23 = *(_QWORD *)(a1 + 166112);
          if (v23 >= v22)
          {
            v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v7) >> 3);
            v27 = v26 + 1;
            if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)*v7) >> 3);
            if (2 * v28 > v27)
              v27 = 2 * v28;
            if (v28 >= 0x555555555555555)
              v29 = 0xAAAAAAAAAAAAAAALL;
            else
              v29 = v27;
            if (v29)
              v30 = (char *)sub_1002596A8(a1 + 166120, v29);
            else
              v30 = 0;
            v31 = &v30[24 * v26];
            v32 = &v30[24 * v29];
            v33 = *v10;
            *((_QWORD *)v31 + 2) = *((_QWORD *)v10 + 2);
            *(_OWORD *)v31 = v33;
            v25 = v31 + 24;
            v35 = *(char **)(a1 + 166104);
            v34 = *(char **)(a1 + 166112);
            if (v34 != v35)
            {
              do
              {
                v36 = *(_OWORD *)(v34 - 24);
                *((_QWORD *)v31 - 1) = *((_QWORD *)v34 - 1);
                *(_OWORD *)(v31 - 24) = v36;
                v31 -= 24;
                v34 -= 24;
              }
              while (v34 != v35);
              v34 = *v7;
            }
            *(_QWORD *)(a1 + 166104) = v31;
            *(_QWORD *)(a1 + 166112) = v25;
            *(_QWORD *)(a1 + 166120) = v32;
            if (v34)
              operator delete(v34);
          }
          else
          {
            v24 = *v10;
            *(_QWORD *)(v23 + 16) = *((_QWORD *)v10 + 2);
            *(_OWORD *)v23 = v24;
            v25 = (char *)(v23 + 24);
          }
          *(_QWORD *)(a1 + 166112) = v25;
          ++*(_QWORD *)(a1 + 166160);
          *(_QWORD *)(a1 + 166136) = 0;
        }
      }
    }
    sub_10047E900(*(_QWORD *)(a1 + 8), *(double *)(a2 + 64), *(double *)(a2 + 56));
    if (vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 720)) <= 2.56)
    {
      return 0;
    }
    else
    {
      result = sub_10095B3D4(a1, a3);
      if ((_DWORD)result)
      {
        *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 56);
        return 1;
      }
    }
  }
  return result;
}

_QWORD *sub_1013495E4(_QWORD *a1)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)(a1 + 20760);
  *a1 = off_1021AFEB0;
  v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_10215FCD8;
  return a1;
}

void sub_101349648(_QWORD *a1)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)(a1 + 20760);
  *a1 = off_1021AFEB0;
  v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_10215FCD8;
  operator delete();
}

void sub_1013496BC(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

double sub_1013496E8(uint64_t a1)
{
  double result;
  __int128 v3;
  __int128 v4[3];

  result = *(double *)(a1 + 8);
  if (*(double *)&qword_1022FF868 == 1.79769313e308 || result - *(double *)&qword_1022FF868 >= 0.850000024)
  {
    qword_1022FF868 = *(_QWORD *)(a1 + 8);
    if (qword_10230E3E8 != -1)
      dispatch_once(&qword_10230E3E8, &stru_1021AFF08);
    v3 = *(_OWORD *)(a1 + 16);
    v4[0] = *(_OWORD *)a1;
    v4[1] = v3;
    v4[2] = *(_OWORD *)(a1 + 32);
    *(_QWORD *)&result = sub_101349788(qword_102313FC0, v4).n128_u64[0];
  }
  return result;
}

__n128 sub_101349788(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  NSObject *v5;
  __int128 v6;
  __n128 result;
  _QWORD block[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  block[1] = 3221225472;
  v4 = a2[1];
  v9 = *a2;
  v5 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10134D774;
  block[3] = &unk_1021AFFA8;
  block[4] = a1;
  v6 = a2[2];
  v10 = v4;
  v11 = v6;
  dispatch_async(v5, block);
  return result;
}

void sub_101349804(_QWORD *a1)
{
  _QWORD *v2;
  int64x2_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v19;
  void **block;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void *v23;
  _QWORD *v24;

  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  a1[1] = 0xBFF0000000000000;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *(_QWORD *)((char *)a1 + 37) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0xFFFFFFFF00000000;
  *((_DWORD *)a1 + 21) = 300;
  *((_BYTE *)a1 + 92) = 0;
  *(_QWORD *)((char *)a1 + 100) = 0xFFFFFFFF00000000;
  *((_DWORD *)a1 + 27) = -1;
  a1[14] = 0;
  *(_QWORD *)((char *)a1 + 118) = 0;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  v2 = a1 + 29;
  *(_QWORD *)((char *)a1 + 209) = 0;
  *(_QWORD *)((char *)a1 + 204) = 0;
  a1[28] = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)a1 + 75) = 0;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)((char *)a1 + 277) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *((_DWORD *)a1 + 102) = 0;
  *((_WORD *)a1 + 206) = 257;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  a1[60] = dispatch_queue_create("com.apple.CLFitnessTrackingAWD", 0);
  v2[32] = 0x10000000000000;
  *(_OWORD *)(v2 + 33) = xmmword_101BBE610;
  v2[35] = 0x7FEFFFFFFFFFFFFFLL;
  *((_DWORD *)v2 + 72) = 0;
  v2[37] = 0x4072C00000000000;
  *((_DWORD *)v2 + 76) = 0;
  *((_BYTE *)v2 + 308) = 0;
  sub_1015A2E04(v2 + 39, "");
  *(_OWORD *)((char *)a1 + 673) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 93) = 0u;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 99) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_OWORD *)(a1 + 103) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *(_OWORD *)(a1 + 107) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 115) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  *(_OWORD *)(a1 + 119) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 123) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_OWORD *)(a1 + 127) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 131) = 0u;
  *(_OWORD *)(a1 + 133) = 0u;
  *(_OWORD *)(a1 + 135) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 139) = 0u;
  *(_OWORD *)(a1 + 141) = 0u;
  *(_OWORD *)(a1 + 143) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(_OWORD *)(a1 + 147) = 0u;
  *(_DWORD *)((char *)a1 + 1191) = 0;
  sub_10097A6B8((uint64_t)(a1 + 150), 0, 0.0);
  *((_DWORD *)a1 + 324) = 0;
  a1[195] = 0;
  *(_OWORD *)(a1 + 191) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_OWORD *)(a1 + 187) = 0u;
  *(_OWORD *)(a1 + 189) = 0u;
  *(_OWORD *)(a1 + 183) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 179) = 0u;
  *(_OWORD *)(a1 + 181) = 0u;
  *(_OWORD *)(a1 + 175) = 0u;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_OWORD *)(a1 + 171) = 0u;
  *(_OWORD *)(a1 + 173) = 0u;
  *(_OWORD *)(a1 + 167) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_OWORD *)(a1 + 165) = 0u;
  *((_DWORD *)a1 + 331) = -1082130432;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)((char *)v2 + 1100) = _Q0;
  *(_OWORD *)((char *)v2 + 1116) = _Q0;
  *(_OWORD *)((char *)v2 + 1132) = _Q0;
  *(_OWORD *)((char *)v2 + 1148) = _Q0;
  *(_OWORD *)((char *)v2 + 1164) = _Q0;
  *(_OWORD *)((char *)v2 + 1180) = _Q0;
  *(_OWORD *)((char *)v2 + 1196) = _Q0;
  *((_DWORD *)a1 + 361) = -1082130432;
  a1[182] = -1;
  a1[181] = -1;
  *((_OWORD *)v2 + 77) = _Q0;
  *((_OWORD *)v2 + 78) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  a1[187] = _Q0;
  a1[188] = 66;
  *(_QWORD *)((char *)a1 + 1525) = 0;
  a1[190] = 0;
  a1[193] = 0;
  a1[192] = 0;
  a1[194] = 0;
  *((_DWORD *)a1 + 390) = -1082130432;
  a1[196] = _Q0;
  a1[197] = 0;
  *((_BYTE *)a1 + 1584) = 1;
  v8 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((int64x2_t *)a1 + 100) = v8;
  *((int64x2_t *)a1 + 101) = v8;
  *((int64x2_t *)a1 + 102) = v8;
  *(int32x2_t *)v8.i8 = vdup_n_s32(0x7F7FFFFFu);
  a1[206] = v8.i64[0];
  a1[207] = 0;
  a1[208] = v8.i64[0];
  a1[209] = 0;
  v10 = (id)objc_opt_class(HKHealthStore, v9);
  if (v10)
  {
    if (+[HKHealthStore isHealthDataAvailable](HKHealthStore, "isHealthDataAvailable"))
      v10 = objc_alloc_init((Class)HKHealthStore);
    else
      v10 = 0;
  }
  a1[199] = v10;
  v11 = sub_100127B9C();
  sub_100081C10(v11, &block);
  v12 = v2 + 37;
  v13 = sub_1001FD98C((uint64_t)block, "MinSessionLengthAWD", v12);
  v14 = v13;
  v15 = (std::__shared_weak_count *)v21;
  if (!v21)
    goto LABEL_9;
  v16 = (unint64_t *)(v21 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v14 & 1) != 0)
    {
LABEL_11:
      if (&MCEffectiveSettingsChangedNotification)
      {
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_101349CB4, MCEffectiveSettingsChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      v19 = a1[60];
      block = _NSConcreteStackBlock;
      v21 = 3221225472;
      v22 = sub_10134D15C;
      v23 = &unk_10212ECA0;
      v24 = a1;
      dispatch_async(v19, &block);
      sub_101349D08();
    }
  }
  else
  {
LABEL_9:
    if ((v13 & 1) != 0)
      goto LABEL_11;
  }
  *v12 = 0x4072C00000000000;
  goto LABEL_11;
}

void sub_101349C2C()
{
  operator delete();
}

void sub_101349CB4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134D15C;
  block[3] = &unk_10212ECA0;
  block[4] = a2;
  dispatch_async(v2, block);
}

void sub_101349D08()
{
  sub_10134CF0C();
}

uint64_t sub_101349D44(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_101349D94()
{
  operator new();
}

void sub_101349DD4()
{
  operator delete();
}

void sub_101349DFC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  NSObject *v8;
  _QWORD block[6];
  char v10;
  char v11;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v8 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101349E80;
  block[3] = &unk_1021AFF28;
  v10 = a2;
  v11 = a4;
  block[4] = a1;
  block[5] = a3;
  dispatch_sync(v8, block);
}

double sub_101349E80(uint64_t a1)
{
  uint64_t v2;
  double Current;
  double v4;
  int v5;
  double v6;
  int v7;
  void **v8;
  double result;
  __int128 v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  v4 = *(double *)(v2 + 504);
  if (v4 >= Current)
  {
    v5 = *(unsigned __int8 *)(a1 + 48);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v2 + 537);
    if (*(_BYTE *)(v2 + 537))
    {
      v6 = *(double *)(v2 + 488);
      if (v4 >= v6)
        v6 = *(double *)(v2 + 504);
      *(double *)(v2 + 496) = *(double *)(v2 + 496) + Current - v6;
    }
    v7 = *(unsigned __int8 *)(a1 + 48);
    if (v5 != v7)
    {
      ++*(_DWORD *)(v2 + 520);
      v5 = v7;
    }
  }
  if (v5)
    LOBYTE(v5) = *(_BYTE *)(a1 + 49) != 0;
  *(_BYTE *)(v2 + 538) = v5;
  if (v4 != 1.79769313e308)
  {
    if (*(_BYTE *)(v2 + 540))
      LOBYTE(v5) = 1;
    *(_BYTE *)(v2 + 540) = v5;
  }
  *(_BYTE *)(v2 + 537) = *(_BYTE *)(a1 + 48);
  sub_1015A2E04(&v10, *(char **)(a1 + 40));
  v8 = (void **)(v2 + 544);
  if (*(char *)(v2 + 567) < 0)
    operator delete(*v8);
  result = *(double *)&v10;
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(v2 + 560) = v11;
  *(double *)(v2 + 488) = Current;
  return result;
}

double sub_101349F78(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double result;

  v2 = *(double *)(a1 + 504);
  v1 = *(double *)(a1 + 512);
  if (*(_BYTE *)(a1 + 537))
  {
    v3 = *(double *)(a1 + 488);
    if (v2 >= v3)
      v3 = *(double *)(a1 + 504);
    v4 = *(double *)(a1 + 496) + v1 - v3;
    *(double *)(a1 + 496) = v4;
  }
  else
  {
    v4 = *(double *)(a1 + 496);
  }
  result = v4 / (v1 - v2) * 100.0;
  *(_DWORD *)(a1 + 76) = (int)result;
  return result;
}

void sub_101349FC4(uint64_t a1)
{
  void **v2;
  void **v3;
  __int128 v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  _OWORD v27[2];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  LOWORD(v26) = 0;
  BYTE2(v26) = 0;
  memset(v27, 0, 17);
  *(_QWORD *)((char *)&v26 + 3) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  v2 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v2);
  v3 = (void **)(a1 + 48);
  *v2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v3);
  *v3 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 76) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 84) = 300;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 118) = 0;
  *(_WORD *)(a1 + 126) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = v27[0];
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v4 = 0uLL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 201) = v26;
  *(_DWORD *)(a1 + 217) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 224) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
    v4 = 0uLL;
  }
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 376) = v4;
  *(_OWORD *)(a1 + 392) = v4;
  *(_OWORD *)(a1 + 344) = v4;
  *(_OWORD *)(a1 + 360) = v4;
  *(_OWORD *)(a1 + 312) = v4;
  *(_OWORD *)(a1 + 328) = v4;
  *(_DWORD *)(a1 + 412) = 257;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 512) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 1192) = 0;
  *(_BYTE *)(a1 + 1194) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_101BBE610;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 568) = v4;
  *(_OWORD *)(a1 + 584) = v4;
  *(_OWORD *)(a1 + 600) = v4;
  *(_OWORD *)(a1 + 616) = v4;
  *(_OWORD *)(a1 + 648) = v4;
  *(_OWORD *)(a1 + 664) = v4;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 696) = v4;
  *(_OWORD *)(a1 + 712) = v4;
  *(_OWORD *)(a1 + 728) = v4;
  *(_OWORD *)(a1 + 744) = v4;
  *(_OWORD *)(a1 + 760) = v4;
  *(_OWORD *)(a1 + 776) = v4;
  *(_OWORD *)(a1 + 792) = v4;
  *(_OWORD *)(a1 + 808) = v4;
  *(_OWORD *)(a1 + 824) = v4;
  *(_OWORD *)(a1 + 840) = v4;
  *(_OWORD *)(a1 + 856) = v4;
  *(_OWORD *)(a1 + 872) = v4;
  *(_OWORD *)(a1 + 888) = v4;
  *(_OWORD *)(a1 + 904) = v4;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = v4;
  *(_OWORD *)(a1 + 1120) = v4;
  *(_OWORD *)(a1 + 1104) = v4;
  *(_OWORD *)(a1 + 1088) = v4;
  *(_OWORD *)(a1 + 1072) = v4;
  *(_OWORD *)(a1 + 1056) = v4;
  *(_OWORD *)(a1 + 1040) = v4;
  *(_OWORD *)(a1 + 1008) = v4;
  *(_OWORD *)(a1 + 1024) = v4;
  *(_OWORD *)(a1 + 976) = v4;
  *(_OWORD *)(a1 + 992) = v4;
  *(_OWORD *)(a1 + 944) = v4;
  *(_OWORD *)(a1 + 960) = v4;
  *(_OWORD *)(a1 + 928) = v4;
  v6 = *(_QWORD **)(a1 + 1160);
  if (v6)
  {
    v7 = (void *)v6[14];
    if (v7)
    {
      v6[15] = v7;
      operator delete(v7);
    }
    v8 = (void *)v6[11];
    if (v8)
    {
      v6[12] = v8;
      operator delete(v8);
    }
    v9 = (void *)v6[8];
    if (v9)
    {
      v6[9] = v9;
      operator delete(v9);
    }
    v10 = (void *)v6[4];
    if (v10)
    {
      v6[5] = v10;
      operator delete(v10);
    }
    operator delete();
  }
  *(_QWORD *)(a1 + 1160) = 0;
  v11 = *(_QWORD **)(a1 + 1176);
  if (v11)
  {
    v12 = (void *)v11[14];
    if (v12)
    {
      v11[15] = v12;
      operator delete(v12);
    }
    v13 = (void *)v11[11];
    if (v13)
    {
      v11[12] = v13;
      operator delete(v13);
    }
    v14 = (void *)v11[8];
    if (v14)
    {
      v11[9] = v14;
      operator delete(v14);
    }
    v15 = (void *)v11[4];
    if (v15)
    {
      v11[5] = v15;
      operator delete(v15);
    }
    operator delete();
  }
  *(_QWORD *)(a1 + 1176) = 0;
  v16 = *(_QWORD **)(a1 + 1168);
  if (v16)
  {
    v17 = (void *)v16[14];
    if (v17)
    {
      v16[15] = v17;
      operator delete(v17);
    }
    v18 = (void *)v16[11];
    if (v18)
    {
      v16[12] = v18;
      operator delete(v18);
    }
    v19 = (void *)v16[8];
    if (v19)
    {
      v16[9] = v19;
      operator delete(v19);
    }
    v20 = (void *)v16[4];
    if (v20)
    {
      v16[5] = v20;
      operator delete(v20);
    }
    operator delete();
  }
  *(_QWORD *)(a1 + 1168) = 0;
  v21 = *(_QWORD **)(a1 + 1184);
  if (v21)
  {
    v22 = (void *)v21[14];
    if (v22)
    {
      v21[15] = v22;
      operator delete(v22);
    }
    v23 = (void *)v21[11];
    if (v23)
    {
      v21[12] = v23;
      operator delete(v23);
    }
    v24 = (void *)v21[8];
    if (v24)
    {
      v21[9] = v24;
      operator delete(v24);
    }
    v25 = (void *)v21[4];
    if (v25)
    {
      v21[5] = v25;
      operator delete(v25);
    }
    operator delete();
  }
  *(_QWORD *)(a1 + 1184) = 0;
  sub_101349D08();
}

void sub_10134A39C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;
  double v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const char *v51;
  NSObject *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  NSObject *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _QWORD *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  double v92;
  const char *v93;
  uint8_t *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  const char *v105;
  uint8_t *v106;
  __int16 v107;
  int v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  const char *v116;
  uint8_t *v117;
  int v118;
  uint8_t *v119;
  uint64_t v120;
  const char *v121;
  _BYTE v122[6];
  __int16 v123;
  _BYTE v124[28];
  int v125;
  uint64_t v126;
  int v127;
  _BYTE v128[6];
  _BYTE v129[10];
  int v130;
  _BYTE v131[6];
  int v132;
  _BYTE v133[6];
  int v134;
  _BYTE v135[6];
  int v136;
  _BYTE v137[6];
  int v138;
  _BYTE v139[6];
  int v140;
  _BYTE v141[6];
  int v142;
  _BYTE v143[6];
  int v144;
  _BYTE v145[6];
  int v146;
  _BYTE v147[6];
  int v148;
  _BYTE v149[12];
  double v150;
  _BYTE v151[6];
  int v152;
  _BYTE v153[6];
  __int128 v154;
  _BYTE v155[12];
  int v156;
  _BYTE v157[6];
  int v158;
  _BYTE v159[6];
  _DWORD v160[2];
  uint64_t v161;
  uint8_t buf[4];
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  _BYTE v167[10];
  _BYTE v168[12];
  _BYTE v169[18];
  _BYTE v170[6];
  _BYTE v171[6];
  _BYTE v172[6];
  _BYTE v173[6];
  _BYTE v174[6];
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  __int16 v180;
  int v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  int v195;
  __int16 v196;
  int v197;
  __int16 v198;
  int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  int v209;
  __int16 v210;
  double v211;
  __int16 v212;
  double v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  __int16 v226;
  uint64_t v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  int v233;
  __int16 v234;
  int v235;
  __int16 v236;
  int v237;
  __int16 v238;
  int v239;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  if (qword_10229FDE0 != -1)
    dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
  v2 = qword_10229FDE8;
  if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 44);
    v4 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v4 = (_QWORD *)*v4;
    v163 = *(_DWORD *)(a1 + 40);
    v5 = *(_DWORD *)(a1 + 80);
    v6 = *(_DWORD *)(a1 + 84);
    v165 = v3;
    v166 = 2080;
    *(_QWORD *)v167 = v4;
    v7 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)v168 = *(_DWORD *)(a1 + 72);
    v8 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)&v168[6] = v5;
    v9 = *(unsigned __int8 *)(a1 + 92);
    *(_DWORD *)v169 = v6;
    *(_DWORD *)&v169[6] = v8;
    v10 = *(_DWORD *)(a1 + 96);
    v11 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)&v169[12] = v9;
    *(_DWORD *)v170 = v10;
    v12 = *(_DWORD *)(a1 + 112);
    v13 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)v171 = v11;
    v14 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)v172 = v12;
    v15 = *(unsigned __int8 *)(a1 + 124);
    *(_DWORD *)v173 = v13;
    *(_DWORD *)v174 = v14;
    v16 = *(_DWORD *)(a1 + 140);
    v175 = *(_DWORD *)(a1 + 136);
    v17 = *(unsigned __int8 *)(a1 + 125);
    v177 = v15;
    v179 = v17;
    v18 = *(_DWORD *)(a1 + 132);
    v181 = *(_DWORD *)(a1 + 128);
    v183 = v18;
    v185 = v16;
    v187 = v7;
    v19 = *(_DWORD *)(a1 + 108);
    v189 = *(_DWORD *)(a1 + 104);
    v191 = v19;
    v20 = *(_DWORD *)(a1 + 148);
    v193 = *(_DWORD *)(a1 + 144);
    v195 = v20;
    v21 = *(_DWORD *)(a1 + 156);
    v197 = *(_DWORD *)(a1 + 152);
    v199 = v21;
    v22 = *(_DWORD *)(a1 + 164);
    v201 = *(_DWORD *)(a1 + 160);
    v203 = v22;
    v23 = *(_DWORD *)(a1 + 172);
    v205 = *(_DWORD *)(a1 + 168);
    v24 = *(_DWORD *)(a1 + 176);
    v207 = v23;
    v25 = *(unsigned __int8 *)(a1 + 200);
    v209 = v24;
    v215 = v25;
    v26 = *(_DWORD *)(a1 + 208);
    v217 = *(_DWORD *)(a1 + 204);
    v219 = v26;
    v221 = *(_DWORD *)(a1 + 212);
    v231 = *(_DWORD *)(a1 + 340);
    v235 = *(_DWORD *)(a1 + 348);
    v239 = *(_DWORD *)(a1 + 356);
    v27 = *(_DWORD *)(a1 + 196);
    v223 = *(_DWORD *)(a1 + 192);
    v225 = v27;
    v210 = 2048;
    v212 = 2048;
    v226 = 2048;
    v227 = *(_QWORD *)(a1 + 224);
    v229 = *(_DWORD *)(a1 + 336);
    v233 = *(_DWORD *)(a1 + 344);
    v237 = *(_DWORD *)(a1 + 352);
    v164 = 1024;
    *(_WORD *)&v167[8] = 1024;
    *(_WORD *)&v168[4] = 1024;
    *(_WORD *)&v168[10] = 1024;
    *(_WORD *)&v169[4] = 1024;
    *(_WORD *)&v169[10] = 1024;
    *(_WORD *)&v169[16] = 1024;
    *(_WORD *)&v170[4] = 1024;
    *(_WORD *)&v171[4] = 1024;
    *(_WORD *)&v172[4] = 1024;
    *(_WORD *)&v173[4] = 1024;
    *(_WORD *)&v174[4] = 1024;
    v176 = 1024;
    v178 = 1024;
    v180 = 1024;
    v182 = 1024;
    v184 = 1024;
    v186 = 1024;
    v188 = 1024;
    v190 = 1024;
    v192 = 1024;
    v194 = 1024;
    v196 = 1024;
    v198 = 1024;
    v200 = 1024;
    v202 = 1024;
    v204 = 1024;
    v206 = 1024;
    v208 = 1024;
    v214 = 1024;
    v216 = 1024;
    v218 = 1024;
    v220 = 1024;
    v222 = 1024;
    v224 = 1024;
    v228 = 1024;
    v230 = 1024;
    v232 = 1024;
    v234 = 1024;
    v236 = 1024;
    v238 = 1024;
    v28 = *(float *)(a1 + 180);
    v29 = *(float *)(a1 + 184);
    *(_DWORD *)buf = 67120642;
    v211 = v28;
    v213 = v29;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AWD: workout:%d, companion:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, VO2Grade:%d, idsAvail:%d, defaultUtil:%d, WRHR:%d, PedGPSAvailable:%d, DistTrackUsed:%d, DistTrackInvalidGradient:%d, DistTrackInvalidGain:%d, DistTrackInvalidSpeed:%d, DistTrackInvalidLength:%d, SeshDuration:%d, PedCalibrated:%d, PaceFail:%d, PedMetSourceDiff:%f, PedMetSourceDiff:%f, HrBoundsFail:%d, SeshUp:%d, SeshDown:%d, SeshCaloriesFromGrade:%d, SeshGPSSourcePhone:%d, SeshGPSSourceWatch:%d, ElevationError:%lld, HRSamplesValidMin: %d, HRSamplesValidMax: %d, METSamplesWithRecentHR: %d, METSamplesValidDelta: %d, VO2DeltaPercentage: %d, HRMetPairs: %d", buf, 0x126u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v70 = *(unsigned __int8 *)(a1 + 44);
    v71 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v71 = (_QWORD *)*v71;
    HIDWORD(v121) = *(_DWORD *)(a1 + 40);
    v72 = *(_DWORD *)(a1 + 80);
    v73 = *(_DWORD *)(a1 + 84);
    *(_DWORD *)&v122[2] = v70;
    v123 = 2080;
    *(_QWORD *)v124 = v71;
    v74 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)&v124[10] = *(_DWORD *)(a1 + 72);
    v75 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)&v124[16] = v72;
    v76 = *(unsigned __int8 *)(a1 + 92);
    *(_DWORD *)&v124[22] = v73;
    v125 = v75;
    v77 = *(_DWORD *)(a1 + 96);
    v78 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)((char *)&v126 + 2) = v76;
    v127 = v77;
    v79 = *(_DWORD *)(a1 + 112);
    v80 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)v128 = v78;
    v81 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)v129 = v79;
    v82 = *(unsigned __int8 *)(a1 + 124);
    *(_DWORD *)&v129[6] = v80;
    v130 = v81;
    v83 = *(_DWORD *)(a1 + 140);
    *(_DWORD *)v131 = *(_DWORD *)(a1 + 136);
    v84 = *(unsigned __int8 *)(a1 + 125);
    v132 = v82;
    *(_DWORD *)&v133[2] = v84;
    v85 = *(_DWORD *)(a1 + 132);
    v134 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)v135 = v85;
    v136 = v83;
    *(_DWORD *)&v137[2] = v74;
    v86 = *(_DWORD *)(a1 + 108);
    v138 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)v139 = v86;
    v87 = *(_DWORD *)(a1 + 148);
    v140 = *(_DWORD *)(a1 + 144);
    *(_DWORD *)&v141[2] = v87;
    v88 = *(_DWORD *)(a1 + 156);
    v142 = *(_DWORD *)(a1 + 152);
    *(_DWORD *)v143 = v88;
    v89 = *(_DWORD *)(a1 + 164);
    v144 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)&v145[2] = v89;
    v90 = *(_DWORD *)(a1 + 172);
    v146 = *(_DWORD *)(a1 + 168);
    *(_DWORD *)v147 = v90;
    v148 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)v151 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)&v153[2] = *(_DWORD *)(a1 + 208);
    *(_DWORD *)&v157[2] = *(_DWORD *)(a1 + 340);
    *(_DWORD *)v159 = *(_DWORD *)(a1 + 348);
    *(_DWORD *)((char *)v160 + 2) = *(_DWORD *)(a1 + 356);
    v91 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)((char *)&v154 + 6) = *(_DWORD *)(a1 + 192);
    *(_QWORD *)&v155[2] = *(_QWORD *)(a1 + 224);
    v92 = *(float *)(a1 + 184);
    *(double *)&v149[2] = *(float *)(a1 + 180);
    v150 = v92;
    v152 = *(_DWORD *)(a1 + 204);
    LODWORD(v154) = *(_DWORD *)(a1 + 212);
    HIDWORD(v154) = v91;
    *(_WORD *)v149 = 2048;
    *(_WORD *)&v149[10] = 2048;
    *(_WORD *)v155 = 2048;
    v156 = *(_DWORD *)(a1 + 336);
    v158 = *(_DWORD *)(a1 + 344);
    *(_WORD *)v122 = 1024;
    *(_WORD *)&v124[8] = 1024;
    *(_WORD *)&v124[26] = 1024;
    LOWORD(v126) = 1024;
    *(_WORD *)&v128[4] = 1024;
    *(_WORD *)&v129[4] = 1024;
    *(_WORD *)&v131[4] = 1024;
    *(_WORD *)v133 = 1024;
    *(_WORD *)&v135[4] = 1024;
    *(_WORD *)v137 = 1024;
    *(_WORD *)&v139[4] = 1024;
    *(_WORD *)v141 = 1024;
    *(_WORD *)&v143[4] = 1024;
    *(_WORD *)v145 = 1024;
    *(_WORD *)&v147[4] = 1024;
    *(_WORD *)&v151[4] = 1024;
    *(_WORD *)v153 = 1024;
    WORD2(v154) = 1024;
    WORD5(v154) = 1024;
    *(_WORD *)&v155[10] = 1024;
    *(_WORD *)v157 = 1024;
    *(_WORD *)&v159[4] = 1024;
    LOWORD(v160[0]) = 1024;
    LODWORD(v121) = 67120642;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDE8, 2, "AWD: workout:%d, companion:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, VO2Grade:%d, idsAvail:%d, defaultUtil:%d, WRHR:%d, PedGPSAvailable:%d, DistTrackUsed:%d, DistTrackInvalidGradient:%d, DistTrackInvalidGain:%d, DistTrackInvalidSpeed:%d, DistTrackInvalidLength:%d, SeshDuration:%d, PedCalibrated:%d, PaceFail:%d, PedMetSourceDiff:%f, PedMetSourceDiff:%f, HrBoundsFail:%d, SeshUp:%d, SeshDown:%d, SeshCaloriesFromGrade:%d, SeshGPSSourcePhone:%d, SeshGPSSourceWatch:%d, ElevationError:%lld, HRSamplesValidMin: %d, HRSamplesValidMax: %d, METSamplesWithRecentHR: %d, METSamplesValidDelta: %d, VO2DeltaPercentage: %d, HRMetPairs: %d", &v121, 294, v121, *(_DWORD *)v122, *(_DWORD *)v124,
      *(_DWORD *)&v124[8],
      *(_DWORD *)&v124[16],
      *(_DWORD *)&v124[24],
      v126,
      v127,
      *(_DWORD *)&v128[2],
      *(_DWORD *)&v129[4],
      v130,
      *(_DWORD *)&v131[2],
      *(_DWORD *)v133,
      v134,
      *(_DWORD *)&v135[2],
      *(_DWORD *)v137,
      v138,
      *(_DWORD *)&v139[2],
      *(_DWORD *)v141,
      v142,
      *(_DWORD *)&v143[2],
      *(_DWORD *)v145,
      v146,
      *(_DWORD *)&v147[2],
      *(_DWORD *)v149,
      *(_DWORD *)&v149[8],
      HIDWORD(v92),
      *(_DWORD *)&v151[2],
      *(_DWORD *)v153,
      *(double *)&v154,
      *((double *)&v154 + 1),
      *(_DWORD *)v155,
      *(_DWORD *)&v155[8],
      *(_DWORD *)v157,
      v158,
      *(_DWORD *)&v159[2],
      v160[0],
      v161);
    v94 = (uint8_t *)v93;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v93);
    if (v94 != buf)
      free(v94);
  }
  if (qword_10229FDE0 != -1)
    dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
  v30 = qword_10229FDE8;
  if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_DWORD *)(a1 + 40);
    v32 = *(_DWORD *)(a1 + 360);
    v33 = *(_DWORD *)(a1 + 364);
    v34 = *(_DWORD *)(a1 + 368);
    v35 = *(_DWORD *)(a1 + 372);
    v36 = *(_DWORD *)(a1 + 376);
    v37 = *(_DWORD *)(a1 + 380);
    v38 = *(_DWORD *)(a1 + 384);
    v39 = *(_DWORD *)(a1 + 388);
    v40 = *(_DWORD *)(a1 + 392);
    v41 = *(_DWORD *)(a1 + 396);
    v42 = *(_DWORD *)(a1 + 400);
    v43 = *(_DWORD *)(a1 + 404);
    v44 = *(_DWORD *)(a1 + 408);
    *(_DWORD *)buf = 67112448;
    v163 = v31;
    v164 = 1024;
    v165 = v32;
    v166 = 1024;
    *(_DWORD *)v167 = v33;
    *(_WORD *)&v167[4] = 1024;
    *(_DWORD *)&v167[6] = v34;
    *(_WORD *)v168 = 1024;
    *(_DWORD *)&v168[2] = v35;
    *(_WORD *)&v168[6] = 1024;
    *(_DWORD *)&v168[8] = v36;
    *(_WORD *)v169 = 1024;
    *(_DWORD *)&v169[2] = v37;
    *(_WORD *)&v169[6] = 1024;
    *(_DWORD *)&v169[8] = v38;
    *(_WORD *)&v169[12] = 1024;
    *(_DWORD *)&v169[14] = v39;
    *(_WORD *)v170 = 1024;
    *(_DWORD *)&v170[2] = v40;
    *(_WORD *)v171 = 1024;
    *(_DWORD *)&v171[2] = v41;
    *(_WORD *)v172 = 1024;
    *(_DWORD *)&v172[2] = v42;
    *(_WORD *)v173 = 1024;
    *(_DWORD *)&v173[2] = v43;
    *(_WORD *)v174 = 1024;
    *(_DWORD *)&v174[2] = v44;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,WorkoutType,%d,BaroGood,%d,BaroUnkDEMAgree,%d,DEMBaroUnk,%d,BaroUnkDEMDisagree,%d,BaroUnkNoDEM,%d,DEMBaroBad,%d,None,%d,GPSBaroGood,%d,GPSBaroUnk,%d,GPSBaroBad,%d,GPSUnvailBaroGood,%d,GPSUnvailBaroUnk,%d,GPSUnvailBaroBad,%d", buf, 0x56u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v95 = *(_DWORD *)(a1 + 360);
    v96 = *(_DWORD *)(a1 + 364);
    v97 = *(_DWORD *)(a1 + 368);
    v98 = *(_DWORD *)(a1 + 376);
    v99 = *(_DWORD *)(a1 + 380);
    v100 = *(_DWORD *)(a1 + 384);
    v101 = *(_DWORD *)(a1 + 392);
    v102 = *(_DWORD *)(a1 + 396);
    v103 = *(_DWORD *)(a1 + 400);
    v104 = *(_DWORD *)(a1 + 408);
    *(_WORD *)v122 = 1024;
    *(_WORD *)&v122[2] = v95;
    *(_WORD *)&v124[8] = HIWORD(v97);
    *(_WORD *)&v124[10] = 1024;
    *(_WORD *)&v124[16] = 1024;
    *(_WORD *)&v124[18] = v98;
    LOWORD(v126) = HIWORD(v100);
    WORD1(v126) = 1024;
    LOWORD(v127) = 1024;
    HIWORD(v127) = v101;
    *(_WORD *)&v129[4] = HIWORD(v103);
    *(_WORD *)&v129[6] = 1024;
    LOWORD(v130) = 1024;
    HIWORD(v130) = v104;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDE8, 2, "WorkoutElevationFusion,WorkoutType,%d,BaroGood,%d,BaroUnkDEMAgree,%d,DEMBaroUnk,%d,BaroUnkDEMDisagree,%d,BaroUnkNoDEM,%d,DEMBaroBad,%d,None,%d,GPSBaroGood,%d,GPSBaroUnk,%d,GPSBaroBad,%d,GPSUnvailBaroGood,%d,GPSUnvailBaroUnk,%d,GPSUnvailBaroBad,%d", &v121, 86, 67112448, *(_DWORD *)v122, v96, *(_DWORD *)&v124[8], *(_DWORD *)&v124[16], v99, v126,
      v127,
      v102,
      *(_DWORD *)&v129[4],
      v130,
      *(_DWORD *)&v131[2]);
    v106 = (uint8_t *)v105;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v105);
    if (v106 != buf)
      free(v106);
  }
  v45 = *(_DWORD *)(a1 + 40);
  if ((v45 - 4) >= 2)
  {
    if (v45 == 11)
    {
      if (qword_10229FDE0 != -1)
        dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
      v52 = qword_10229FDE8;
      if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
      {
        v53 = *(_DWORD *)(a1 + 232);
        v54 = *(_DWORD *)(a1 + 236);
        v55 = *(_DWORD *)(a1 + 240);
        v56 = *(_DWORD *)(a1 + 244);
        v57 = *(_DWORD *)(a1 + 248);
        v58 = *(_DWORD *)(a1 + 252);
        *(_DWORD *)buf = 67110400;
        v163 = v53;
        v164 = 1024;
        v165 = v54;
        v166 = 1024;
        *(_DWORD *)v167 = v55;
        *(_WORD *)&v167[4] = 1024;
        *(_DWORD *)&v167[6] = v56;
        *(_WORD *)v168 = 1024;
        *(_DWORD *)&v168[2] = v57;
        *(_WORD *)&v168[6] = 1024;
        *(_DWORD *)&v168[8] = v58;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Swimmming: Free:%d, Breast:%d, Butter:%d, Back:%d, Other:%d, Swimming:%d", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDE0 != -1)
          dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
        v118 = *(_DWORD *)(a1 + 232);
        LODWORD(v121) = 67110400;
        HIDWORD(v121) = v118;
        LODWORD(v120) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDE8, 2, "Swimmming: Free:%d, Breast:%d, Butter:%d, Back:%d, Other:%d, Swimming:%d", &v121, v120, v121);
        goto LABEL_51;
      }
    }
  }
  else
  {
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v46 = qword_10229FDE8;
    if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
    {
      v47 = *(unsigned __int8 *)(a1 + 292);
      v48 = *(_DWORD *)(a1 + 296);
      v49 = *(_DWORD *)(a1 + 300);
      v50 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)buf = 67109888;
      v163 = v47;
      v164 = 1024;
      v165 = v48;
      v166 = 1024;
      *(_DWORD *)v167 = v49;
      *(_WORD *)&v167[4] = 1024;
      *(_DWORD *)&v167[6] = v50;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Auto-pause: Enabled:%d, WillResume:%d, WillPause:%d, ResumeFalse:%d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDE0 != -1)
        dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
      LODWORD(v120) = 26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDE8, 2, "Auto-pause: Enabled:%d, WillResume:%d, WillPause:%d, ResumeFalse:%d", &v121, v120);
LABEL_51:
      v119 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v51);
      if (v119 != buf)
        free(v119);
    }
  }
  if (qword_10229FDE0 != -1)
    dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
  v59 = qword_10229FDE8;
  if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
  {
    v60 = *(unsigned __int8 *)(a1 + 412);
    v61 = *(unsigned __int8 *)(a1 + 413);
    v62 = *(_DWORD *)(a1 + 416);
    v63 = *(_DWORD *)(a1 + 420);
    v64 = *(_QWORD *)(a1 + 424);
    v65 = *(_QWORD *)(a1 + 432);
    v66 = *(_QWORD *)(a1 + 440);
    v67 = *(_DWORD *)(a1 + 448);
    v68 = *(_DWORD *)(a1 + 452);
    v69 = *(_DWORD *)(a1 + 456);
    *(_DWORD *)buf = 67111424;
    v163 = v60;
    v164 = 1024;
    v165 = v61;
    v166 = 1024;
    *(_DWORD *)v167 = v62;
    *(_WORD *)&v167[4] = 1024;
    *(_DWORD *)&v167[6] = v63;
    *(_WORD *)v168 = 2048;
    *(_QWORD *)&v168[2] = v64;
    *(_WORD *)&v168[10] = 2048;
    *(_QWORD *)v169 = v65;
    *(_WORD *)&v169[8] = 2048;
    *(_QWORD *)&v169[10] = v66;
    *(_WORD *)v170 = 1024;
    *(_DWORD *)&v170[2] = v67;
    *(_WORD *)v171 = 1024;
    *(_DWORD *)&v171[2] = v68;
    *(_WORD *)v172 = 1024;
    *(_DWORD *)&v172[2] = v69;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "WorkoutSessionStatistics,isStopAlertEnabled,%d,isStartAlertEnabled,%d,activtyTypeWhenStopDisabled,%d,activityTypeWhenStartDisabled,%d,coarseLocationLat,%lld,coarseLocationLong,%lld,timeSinceLastDetectedStopToWorkoutEnd,%f,numAlertsDetectedStops,%d,numStopAlertRetractions,%d,indoorOutdoorState,%d", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v107 = *(unsigned __int8 *)(a1 + 413);
    v108 = *(_DWORD *)(a1 + 416);
    v109 = *(_DWORD *)(a1 + 420);
    v110 = *(_QWORD *)(a1 + 424);
    v111 = *(_QWORD *)(a1 + 432);
    v112 = *(_QWORD *)(a1 + 440);
    v113 = *(_DWORD *)(a1 + 448);
    v114 = *(_DWORD *)(a1 + 452);
    v115 = *(_DWORD *)(a1 + 456);
    *(_WORD *)v122 = 1024;
    *(_WORD *)&v122[2] = v107;
    *(_DWORD *)v124 = v108;
    *(_WORD *)&v124[4] = 1024;
    *(_DWORD *)&v124[6] = v109;
    *(_WORD *)&v124[10] = 2048;
    *(_QWORD *)&v124[12] = v110;
    *(_WORD *)&v124[20] = 2048;
    *(_WORD *)&v124[22] = v111;
    LOWORD(v127) = 1024;
    HIWORD(v127) = v113;
    *(_DWORD *)&v128[2] = v114;
    *(_WORD *)v129 = 1024;
    *(_DWORD *)&v129[2] = v115;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDE8, 2, "WorkoutSessionStatistics,isStopAlertEnabled,%d,isStartAlertEnabled,%d,activtyTypeWhenStopDisabled,%d,activityTypeWhenStartDisabled,%d,coarseLocationLat,%lld,coarseLocationLong,%lld,timeSinceLastDetectedStopToWorkoutEnd,%f,numAlertsDetectedStops,%d,numStopAlertRetractions,%d,indoorOutdoorState,%d", &v121, 74, 67111424, *(_DWORD *)v122, *(_QWORD *)v124, *(_QWORD *)&v124[8], *(double *)&v124[16], v111 >> 16, v112,
      v127);
    v117 = (uint8_t *)v116;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v116);
    if (v117 != buf)
      free(v117);
  }
}

void sub_10134B124(uint64_t a1)
{
  int v2;
  float v3;
  int v4;
  int v5;
  unsigned int v6;
  float v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  float v17;
  unsigned int v18;
  double v19;
  int v20;
  int v21;
  int v22;
  float v23;
  double v24;
  int v25;
  float v26;
  int v27;
  double v28;
  uint64_t v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  NSObject *v35;
  const char *v36;
  double v37;
  double v38;
  const char *v39;
  const char *v40;
  uint8_t *v41;
  double v42;
  int v43;
  const char *v44;
  __int16 v45;
  double v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  double v50;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  *(_BYTE *)a1 = 1;
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  sub_101349F78(a1);
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a1 + 537);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a1 + 544));
  v2 = *(_DWORD *)(a1 + 596);
  if (v2 >= 1)
  {
    v3 = (float)v2;
    v4 = llroundf((float)((float)*(int *)(a1 + 584) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 72) = llroundf((float)((float)*(int *)(a1 + 568) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 88) = v4;
    *(_DWORD *)(a1 + 120) = llroundf((float)((float)*(int *)(a1 + 592) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 144) = llroundf((float)((float)*(int *)(a1 + 572) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 172) = llroundf((float)((float)*(int *)(a1 + 576) * 100.0) / (float)v2);
    v5 = llroundf((float)((float)*(int *)(a1 + 612) * 100.0) / (float)v2);
    v6 = llroundf((float)((float)*(int *)(a1 + 588) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 204) = llroundf((float)((float)*(int *)(a1 + 608) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 208) = v5;
    *(_DWORD *)(a1 + 104) = v6;
    v7 = (float)((float)*(int *)(a1 + 624) * 100.0) / (float)v2;
    *(_DWORD *)(a1 + 192) = llroundf((float)((float)*(int *)(a1 + 628) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 196) = llroundf(v7);
    if (*(_DWORD *)(a1 + 40) == 11)
    {
      v8 = llroundf((float)((float)*(int *)(a1 + 668) * 100.0) / v3);
      v9 = llroundf((float)((float)*(int *)(a1 + 672) * 100.0) / v3);
      v10 = llroundf((float)((float)*(int *)(a1 + 676) * 100.0) / v3);
      v11 = (float)*(int *)(a1 + 680) * 100.0;
      v12 = (float)*(int *)(a1 + 684);
      *(_DWORD *)(a1 + 232) = llroundf((float)((float)*(int *)(a1 + 664) * 100.0) / v3);
      *(_DWORD *)(a1 + 236) = v8;
      *(_DWORD *)(a1 + 240) = v9;
      *(_DWORD *)(a1 + 244) = v10;
      *(_DWORD *)(a1 + 248) = llroundf(v11 / v3);
      *(_DWORD *)(a1 + 252) = 100 - llroundf((float)(v12 * 100.0) / v3);
    }
  }
  *(_BYTE *)(a1 + 124) = -[CMPedometerTableRawSpeedToKValue isWalkCalibrationAvailable](+[CMPedometerTableRawSpeedToKValue sharedInstance](CMPedometerTableRawSpeedToKValue, "sharedInstance"), "isWalkCalibrationAvailable");
  v13 = -[CMPedometerTableRawSpeedToKValue isRunCalibrationAvailable](+[CMPedometerTableRawSpeedToKValue sharedInstance](CMPedometerTableRawSpeedToKValue, "sharedInstance"), "isRunCalibrationAvailable");
  *(_BYTE *)(a1 + 125) = v13;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 1536);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 1552);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a1 + 1564);
  v14 = sub_10134B800(v13, *(_DWORD *)(a1 + 1516));
  v15 = llroundf(*(float *)(a1 + 1560));
  *(_DWORD *)(a1 + 116) = v14;
  *(_DWORD *)(a1 + 100) = v15;
  v16 = llroundf(*(float *)(a1 + 1568));
  *(_DWORD *)(a1 + 136) = llroundf(*(float *)(a1 + 1572));
  *(_DWORD *)(a1 + 140) = v16;
  v17 = *(float *)(a1 + 600);
  if (v17 <= 0.0)
    v18 = 0;
  else
    v18 = llroundf((float)((float)(*(float *)(a1 + 604) - v17) * 100.0) / v17);
  *(_DWORD *)(a1 + 108) = v18;
  v19 = *(double *)(a1 + 1288);
  if (v19 > 0.0)
  {
    v20 = llround(*(double *)(a1 + 1256) * 100.0 / v19);
    *(_DWORD *)(a1 + 148) = llround(*(double *)(a1 + 1224) * 100.0 / v19);
    *(_DWORD *)(a1 + 152) = v20;
    v21 = llround(*(double *)(a1 + 1272) * 100.0 / v19);
    *(_DWORD *)(a1 + 156) = llround(*(double *)(a1 + 1264) * 100.0 / v19);
    *(_DWORD *)(a1 + 160) = v21;
    *(_DWORD *)(a1 + 164) = llround(*(double *)(a1 + 1280) * 100.0 / v19);
  }
  *(_DWORD *)(a1 + 168) = sub_10134B824(a1);
  v22 = *(_DWORD *)(a1 + 1296);
  if (v22 <= 0)
  {
    *(_DWORD *)(a1 + 180) = 0;
    v24 = 0.0;
  }
  else
  {
    v23 = *(double *)(a1 + 1304);
    *(float *)(a1 + 180) = v23;
    v24 = 0.0;
    v25 = v22 - 1;
    if (v25)
      v24 = *(double *)(a1 + 1312) / (double)v25;
  }
  v26 = sqrt(v24);
  *(float *)(a1 + 184) = v26;
  v27 = *(_DWORD *)(a1 + 616);
  if (v27 >= 1)
    *(_DWORD *)(a1 + 212) = llroundf((float)((float)*(int *)(a1 + 620) * 100.0) / (float)v27);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a1 + 688);
  sub_10134B8A0(a1);
  v28 = *(double *)(a1 + 512) - *(double *)(a1 + 504);
  *(_BYTE *)(a1 + 216) = v28 > 1200.0;
  if (*(_BYTE *)(a1 + 1584))
    v29 = (*(_QWORD *)(a1 + 656) - *(_QWORD *)(a1 + 648)) / 100;
  else
    v29 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 224) = v29;
  *(_DWORD *)(a1 + 460) = (int)(float)((float)(*(float *)(a1 + 1652) - *(float *)(a1 + 1648)) / 10.0);
  if (*(_BYTE *)(a1 + 539) || *(_BYTE *)(a1 + 540))
  {
    v30 = 0x80000000;
  }
  else
  {
    v37 = *(double *)(a1 + 1640);
    if (v37 == 3.40282347e38 || (v38 = *(double *)(a1 + 1632), v38 == 3.40282347e38))
      v30 = 0x7FFFFFFF;
    else
      v30 = (int)(v37 - v38);
  }
  *(_DWORD *)(a1 + 464) = v30;
  v31 = *(float *)(a1 + 1668);
  if (v31 == 3.4028e38 || (v32 = *(float *)(a1 + 1664), v32 == 3.4028e38))
    v33 = 0x7FFFFFFF;
  else
    v33 = (int)(float)((float)(v31 - v32) / 10.0);
  *(_DWORD *)(a1 + 468) = v33;
  *(_DWORD *)(a1 + 472) = sub_100124100(*(double *)(a1 + 1608), *(double *)(a1 + 1624), *(double *)(a1 + 1600), *(double *)(a1 + 1616));
  *(_DWORD *)(a1 + 476) = (float)(*(float *)(a1 + 1672) / 10.0);
  if (*(_DWORD *)(a1 + 40) == 12 && !*(_BYTE *)(a1 + 536) || v28 <= *(double *)(a1 + 528))
  {
    v34 = 0;
  }
  else
  {
    sub_10134A39C(a1);
    v34 = 1;
  }
  if (qword_10229FDE0 != -1)
    dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
  v35 = qword_10229FDE8;
  if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
  {
    v36 = "NOT ";
    if (v34)
      v36 = "";
    *(_DWORD *)buf = 136315394;
    v48 = v36;
    v49 = 2048;
    v50 = v28;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%sSubmitted session stats; session length, %f",
      buf,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v39 = "NOT ";
    if (v34)
      v39 = "";
    v43 = 136315394;
    v44 = v39;
    v45 = 2048;
    v46 = v28;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDE8, 2, "%sSubmitted session stats; session length, %f",
      (const char *)&v43,
      v42);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::submitSessionStats()", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
}

uint64_t sub_10134B800(uint64_t a1, unsigned int a2)
{
  if (a2 < 0xFFFFFFF3)
    return 1;
  else
    return dword_101C9E718[a2 + 13];
}

uint64_t sub_10134B824(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  if ((*(_DWORD *)(a1 + 40) - 2) > 3)
    return 0;
  result = ((double)(uint64_t)llround(*(double *)(a1 + 512) - *(double *)(a1 + 504)) / 60.0);
  if ((_DWORD)result)
  {
    if (result <= 0x3C)
    {
      v2 = (unsigned __int16)result % 0xAu;
      if (v2)
        return result - v2 + 10;
    }
    else
    {
      return 70;
    }
  }
  return result;
}

void sub_10134B8A0(uint64_t a1)
{
  sub_10134CFE0((_QWORD *)a1, *(unint64_t **)(a1 + 1160));
  sub_10134CFE0((_QWORD *)a1, *(unint64_t **)(a1 + 1176));
  sub_10134CFE0((_QWORD *)a1, *(unint64_t **)(a1 + 1168));
  sub_10134CFE0((_QWORD *)a1, *(unint64_t **)(a1 + 1184));
}

void sub_10134B8E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 40) = sub_10134B958(v6, a2, a3);
  if (sub_1009289E0(a2) - 17 <= 1)
    sub_10134BA88(a1);
}

uint64_t sub_10134B958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = 7;
  switch(a2)
  {
    case 0:
    case 8:
    case 10:
    case 13:
    case 25:
    case 26:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
      return 0;
    case 1:
      if (a3 == 2)
        v4 = 3;
      else
        v4 = 0;
      v5 = a3 == 1;
      v6 = 2;
      goto LABEL_28;
    case 2:
      if (a3 == 2)
        v4 = 5;
      else
        v4 = 0;
      v5 = a3 == 1;
      v6 = 4;
      goto LABEL_28;
    case 3:
      if (a3 == 2)
        v4 = 7;
      else
        v4 = 0;
      v5 = a3 == 1;
      v6 = 6;
      goto LABEL_28;
    case 5:
      return 6;
    case 6:
      return 14;
    case 7:
      return 19;
    case 9:
      return 8;
    case 11:
      return 10;
    case 12:
    case 35:
      return 9;
    case 14:
      return 1;
    case 15:
      return 3;
    case 16:
      return 2;
    case 17:
      return 5;
    case 18:
      return 4;
    case 19:
      v5 = a3 == 2;
      v4 = 11;
      v6 = 13;
LABEL_28:
      if (v5)
        result = v6;
      else
        result = v4;
      break;
    case 20:
    case 21:
      result = 12;
      break;
    case 22:
      result = 15;
      break;
    case 23:
      result = 18;
      break;
    case 24:
      result = 16;
      break;
    case 27:
      result = 17;
      break;
    case 28:
      result = 20;
      break;
    case 29:
      result = 21;
      break;
    case 30:
      result = 22;
      break;
    case 31:
      result = 23;
      break;
    case 32:
      result = 24;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10134BA88(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134CA18;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_10134BAF0(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134BB60;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134BB60(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 96) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10134BB70(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134BBE0;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134BBE0(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 112) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10134BBF0(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134BC60;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134BC60(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 128) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10134BC70(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134BCE0;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134BCE0(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 132) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10134BCF0(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  if (*(_BYTE *)(a1 + 1192) && *(_BYTE *)(a1 + 1193) && *(_BYTE *)(a1 + 1194))
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      sub_10134B124(a1);
      sub_101349FC4(a1);
    }
    sub_10134BD60(a1);
  }
}

void sub_10134BD60(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  _QWORD handler[5];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  sub_10134BF14(a1);
  v2 = *(NSObject **)(a1 + 1576);
  if (!v2)
  {
    v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 480));
    *(_QWORD *)(a1 + 1576) = v3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10134BF50;
    handler[3] = &unk_10212ECA0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    v2 = *(NSObject **)(a1 + 1576);
  }
  v4 = dispatch_time(0, 30000000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_resume(*(dispatch_object_t *)(a1 + 1576));
}

void sub_10134BE24(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134BE8C;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void sub_10134BE8C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 1192) = 1;
  sub_10134BCF0(v1);
}

void sub_10134BE9C(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134BF04;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void sub_10134BF04(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 1193) = 1;
  sub_10134BCF0(v1);
}

void sub_10134BF14(uint64_t a1)
{
  NSObject *v2;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  v2 = *(NSObject **)(a1 + 1576);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1576));
    *(_QWORD *)(a1 + 1576) = 0;
  }
}

void sub_10134BF50(uint64_t a1, uint64_t a2)
{
  sub_10134BF58(*(_QWORD *)(a1 + 32), a2);
}

void sub_10134BF58(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD v4[5];
  _QWORD v5[2];

  if (objc_opt_class(HKQuery, a2))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
    v5[0] = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 504)), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 512)), 0);
    v5[1] = +[HKQuery _predicateForObjectsFromAppleWatches](HKQuery, "_predicateForObjectsFromAppleWatches");
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10134C0C0;
    v4[3] = &unk_1021A2780;
    v4[4] = a1;
    v3 = objc_msgSend(objc_alloc((Class)HKSampleQuery), "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", +[HKSampleType workoutType](HKSampleType, "workoutType"), +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v5, 2)), 1, 0, v4);
    objc_msgSend(*(id *)(a1 + 1592), "executeQuery:", v3);

  }
}

void sub_10134C0C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  double v15;
  uint8_t *v16;
  _QWORD block[6];
  int v18;
  id v19;
  uint8_t buf[4];
  id v21;

  if (!a4)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = objc_msgSend(a3, "filteredArrayUsingPredicate:", +[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_1021AFF68));
    v12 = *(NSObject **)(v10 + 480);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10134C458;
    block[3] = &unk_102131360;
    block[4] = v11;
    block[5] = v10;
    dispatch_sync(v12, block);
    return;
  }
  if (objc_msgSend(a4, "code") == (id)6)
  {
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v5 = qword_10229FDE8;
    if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v21 = objc_msgSend(a4, "code");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning HealthKit Inaccessible error,%ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDE0 != -1)
        dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
      v6 = qword_10229FDE8;
      v18 = 134217984;
      v19 = objc_msgSend(a4, "code");
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "#Warning HealthKit Inaccessible error,%ld", &v18);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke", "%s\n", v7);
LABEL_21:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v13 = qword_10229FDE8;
    if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v21 = objc_msgSend(a4, "code");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Warning HealthKit query error,%ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDE0 != -1)
        dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
      v14 = qword_10229FDE8;
      v18 = 134217984;
      v19 = objc_msgSend(a4, "code");
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 16, "#Warning HealthKit query error,%ld", &v18);
      v9 = v16;
      sub_100512490("Generic", 1, 0, 0, "void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke", "%s\n", v15);
      goto LABEL_21;
    }
  }
}

BOOL sub_10134C43C(id a1, HKWorkout *a2, NSDictionary *a3)
{
  return _objc_msgSend(objc_msgSend(-[HKWorkout sourceRevision](a2, "sourceRevision", a3), "source"), "_isPreferredSource");
}

void sub_10134C458(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 0);
    if (qword_10229FDE0 != -1)
      dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
    v4 = qword_10229FDE8;
    if (os_log_type_enabled((os_log_t)qword_10229FDE8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v10 = objc_msgSend(v3, "workoutActivityType");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Setting otherWorkoutLabel: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDE0 != -1)
        dispatch_once(&qword_10229FDE0, &stru_1021AFFC8);
      v5 = qword_10229FDE8;
      v8[0] = 67109120;
      v8[1] = objc_msgSend(v3, "workoutActivityType");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 2, "Setting otherWorkoutLabel: %d", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_DWORD *)(v2 + 188) = objc_msgSend(v3, "workoutActivityType");
  }
  sub_10134B124(v2);
  sub_101349FC4(v2);
}

void sub_10134C64C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  _QWORD block[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  block[1] = 3221225472;
  v4 = a2[3];
  v11 = a2[2];
  v12 = v4;
  v5 = a2[5];
  v13 = a2[4];
  v14 = v5;
  v6 = a2[1];
  v9 = *a2;
  v7 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10134C6D4;
  block[3] = &unk_102197D38;
  block[4] = a1;
  v10 = v6;
  dispatch_sync(v7, block);
}

__n128 sub_10134C6D4(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v1 + 1216) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v1 + 1200) = v2;
  result = *(__n128 *)(a1 + 72);
  v4 = *(_OWORD *)(a1 + 88);
  v5 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v1 + 1280) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v1 + 1264) = v5;
  *(_OWORD *)(v1 + 1248) = v4;
  *(__n128 *)(v1 + 1232) = result;
  return result;
}

void sub_10134C70C(uint64_t a1, float a2)
{
  NSObject *v4;
  _QWORD v5[5];
  float v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134C784;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134C784(uint64_t result)
{
  uint64_t v1;
  double v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(float *)(result + 40);
  v3 = *(_DWORD *)(v1 + 1296);
  *(_DWORD *)(v1 + 1296) = v3 + 1;
  if (v3)
  {
    v4 = *(double *)(v1 + 1304);
    v5 = v2 - v4;
    v6 = v4 + (v2 - v4) / (double)(v3 + 1);
    v7 = *(double *)(v1 + 1312) + v5 * (v2 - v6);
    *(double *)(v1 + 1304) = v6;
    *(double *)(v1 + 1312) = v7;
  }
  else
  {
    *(double *)(v1 + 1304) = v2;
    *(_QWORD *)(v1 + 1312) = 0;
  }
  return result;
}

void sub_10134C7D8(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134C848;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134C848(uint64_t result)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(result + 32);
  switch(*(_DWORD *)(result + 40))
  {
    case 1:
      ++v1[166];
      break;
    case 2:
      ++v1[169];
      break;
    case 3:
      ++v1[167];
      break;
    case 4:
      ++v1[168];
      break;
    case 5:
      ++v1[170];
      break;
    default:
      return result;
  }
  return result;
}

void sub_10134C8C4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134C930;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

__n128 sub_10134C930(uint64_t a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 result;

  v1 = *(__n128 **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v1[16].n128_u64[0] = *(_QWORD *)(v2 + 16);
  v1[16].n128_u32[2] = *(_DWORD *)(v2 + 24);
  v1[16].n128_u32[3] = *(_DWORD *)(v2 + 28);
  result = *(__n128 *)(v2 + 36);
  v1[17] = result;
  v1[18].n128_u32[0] = *(_DWORD *)(v2 + 52);
  return result;
}

void sub_10134C960(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134C9CC;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

__n128 sub_10134C9CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32) + 1320;
  v3 = *(_OWORD *)(v1 + 112);
  v5 = *(_OWORD *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v2 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v2 + 112) = v3;
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 80) = v4;
  v6 = *(_OWORD *)(v1 + 176);
  v8 = *(_OWORD *)(v1 + 128);
  v7 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v2 + 160) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v2 + 176) = v6;
  *(_OWORD *)(v2 + 128) = v8;
  *(_OWORD *)(v2 + 144) = v7;
  v9 = *(_OWORD *)(v1 + 240);
  v11 = *(_OWORD *)(v1 + 192);
  v10 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(v2 + 224) = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(v2 + 240) = v9;
  *(_OWORD *)(v2 + 192) = v11;
  *(_OWORD *)(v2 + 208) = v10;
  result = *(__n128 *)v1;
  v13 = *(_OWORD *)(v1 + 16);
  v14 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v2 + 48) = v14;
  *(__n128 *)v2 = result;
  *(_OWORD *)(v2 + 16) = v13;
  return result;
}

void sub_10134CA18(uint64_t a1)
{
  uint64_t v1;
  const __CFBoolean *v2;
  const __CFBoolean *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("EnableAutoPause"), CFSTR("com.apple.nanolifestyle.sessiontrackerapp"), CFSTR("mobile"), kCFPreferencesAnyHost);
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(v1 + 688) = CFBooleanGetValue(v2) != 0;
    CFRelease(v3);
  }
}

void sub_10134CA84(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  _QWORD block[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  block[1] = 3221225472;
  v4 = a2[10];
  v25 = a2[11];
  v5 = a2[13];
  v26 = a2[12];
  v27 = v5;
  v6 = a2[6];
  v21 = a2[7];
  v7 = a2[9];
  v22 = a2[8];
  v23 = v7;
  v24 = v4;
  v8 = a2[2];
  v9 = a2[4];
  v10 = a2[5];
  v17 = a2[3];
  v18 = v9;
  v19 = v10;
  v20 = v6;
  v11 = a2[1];
  v14 = *a2;
  v15 = v11;
  v12 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10134CB7C;
  block[3] = &unk_1021736E0;
  block[4] = a1;
  v28 = *((_QWORD *)a2 + 28);
  v16 = v8;
  dispatch_sync(v12, block);
}

void sub_10134CB7C(uint64_t a1)
{
  double v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double *v22;
  uint64_t v23;
  double **v24;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    v5 = *(_QWORD *)(v3 + 944);
    v1 = *(double *)(v3 + 952);
    v6 = *(_OWORD *)(a1 + 56);
    v7 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(v3 + 928) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v3 + 960) = v7;
    v8 = *(_OWORD *)(a1 + 104);
    v9 = *(_OWORD *)(a1 + 136);
    v10 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v3 + 1008) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v3 + 1024) = v9;
    *(_OWORD *)(v3 + 976) = v10;
    *(_OWORD *)(v3 + 992) = v8;
    v11 = *(_OWORD *)(a1 + 168);
    v12 = *(_OWORD *)(a1 + 184);
    v13 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(v3 + 1040) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(v3 + 1088) = v13;
    *(_OWORD *)(v3 + 1072) = v12;
    *(_OWORD *)(v3 + 1056) = v11;
    v14 = *(_OWORD *)(a1 + 232);
    v15 = *(_OWORD *)(a1 + 248);
    v16 = *(_QWORD *)(a1 + 264);
    *(_OWORD *)(v3 + 1104) = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(v3 + 1152) = v16;
    *(_OWORD *)(v3 + 1136) = v15;
    *(_OWORD *)(v3 + 1120) = v14;
    *(_OWORD *)(v3 + 944) = v6;
  }
  else
  {
    v5 = 23;
  }
  switch(v4)
  {
    case 0:
      if (uuid_is_null((const unsigned __int8 *)(v3 + 632))
        || uuid_compare((const unsigned __int8 *)(v3 + 632), (const unsigned __int8 *)(a1 + 104)))
      {
        if (sub_1001FBB04(0))
        {
          v17 = sub_1001FBB04(0);
          sub_1000A4FD8(v17, 30, *(_QWORD *)(v3 + 1656), -1.0);
        }
        sub_10134BF14(v3);
        sub_10134BCF0(v3);
        uuid_copy((unsigned __int8 *)(v3 + 632), (const unsigned __int8 *)(a1 + 104));
        *(_QWORD *)(v3 + 504) = *(_QWORD *)(a1 + 64);
        *(_BYTE *)(v3 + 539) = *(_BYTE *)(v3 + 538);
        sub_10134B8E4(v3, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160));
      }
      break;
    case 1:
      if (!uuid_compare((const unsigned __int8 *)(v3 + 632), (const unsigned __int8 *)(a1 + 104)))
      {
        if (sub_1001FBB04(0))
        {
          v18 = sub_1001FBB04(0);
          sub_1000A4A6C(v18, 30, *(_QWORD *)(v3 + 1656));
        }
        *(_BYTE *)(v3 + 1194) = 1;
        *(_QWORD *)(v3 + 512) = *(_QWORD *)(a1 + 64);
        sub_10134BCF0(v3);
      }
      break;
    case 2:
      ++*(_DWORD *)(v3 + 300);
      if (v5 == 3)
      {
        v20 = *(_QWORD *)(v3 + 1168);
        v21 = *(double *)(a1 + 64) - v1;
        v22 = &v21;
        v23 = v20;
        v24 = &v22;
        sub_10134D9C4(v20, &v24);
        if (*(double *)(a1 + 64) - v1 < 5.76000023)
          ++*(_DWORD *)(v3 + 304);
      }
      else if (v5 == 2)
      {
        v19 = *(_QWORD *)(v3 + 1160);
        goto LABEL_23;
      }
      break;
    case 3:
      ++*(_DWORD *)(v3 + 296);
      if (v5 == 3)
      {
        v19 = *(_QWORD *)(v3 + 1184);
      }
      else
      {
        if (v5 != 2)
          return;
        v19 = *(_QWORD *)(v3 + 1176);
      }
LABEL_23:
      v21 = *(double *)(a1 + 64) - v1;
      v22 = &v21;
      v23 = v19;
      v24 = &v22;
      sub_10134D9C4(v19, &v24);
      break;
    default:
      return;
  }
}

void sub_10134CE0C(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134CE74;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_sync(v2, block);
}

uint64_t sub_10134CE74(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(result + 32) + 684);
  return result;
}

void sub_10134CE88(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134CEF4;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134CEF4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 616) += *(_DWORD *)(result + 40);
  return result;
}

void sub_10134CF0C()
{
  operator new();
}

void sub_10134CFBC()
{
  operator delete();
}

void sub_10134CFE0(_QWORD *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double v6;
  void **v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t *v21;

  v3 = *a2;
  v20 = a2;
  v20 = (unint64_t *)sub_10134E18C((uint64_t)(a2 + 3), &v20);
  v21 = v4;
  if (v20 != v4)
  {
    v5 = 0;
    v6 = (double)v3;
    v7 = (void **)(a1 + 39);
    do
    {
      v8 = (*(double *)(sub_10134D12C(&v20, v5) + 8) * v6);
      v10 = (unsigned int *)a1[40];
      v9 = a1[41];
      if ((unint64_t)v10 >= v9)
      {
        v12 = (unsigned int *)*v7;
        v13 = ((char *)v10 - (_BYTE *)*v7) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          sub_100259694();
        v15 = v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_100260634((uint64_t)(a1 + 41), v16);
          v12 = (unsigned int *)a1[39];
          v10 = (unsigned int *)a1[40];
        }
        else
        {
          v17 = 0;
        }
        v18 = (unsigned int *)&v17[4 * v13];
        *v18 = v8;
        v11 = v18 + 1;
        while (v10 != v12)
        {
          v19 = *--v10;
          *--v18 = v19;
        }
        a1[39] = v18;
        a1[40] = v11;
        a1[41] = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v10 = v8;
        v11 = v10 + 1;
      }
      a1[40] = v11;
      ++v5;
    }
    while (v5 < ((char *)v21 - (char *)v20) >> 4);
  }
}

uint64_t sub_10134D12C(_QWORD *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
    sub_10194DBD8();
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
    sub_10194DC00();
  return *a1 + 16 * a2;
}

void sub_10134D15C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (objc_opt_class(MCProfileConnection, a2))
  {
    v3 = objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isWheelchairDataSubmissionAllowed");
    *(_BYTE *)(v2 + 536) = v3;
    if (v3)
      return;
  }
  else if (*(_BYTE *)(v2 + 536))
  {
    return;
  }
  v4 = sub_100127B9C();
  sub_100081C10(v4, &v8);
  sub_1001E4874(v8, "EnableWheelchairAWDCollection", (BOOL *)(v2 + 536));
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10134D210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10134D224(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134D294;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134D294(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 648) = *(unsigned int *)(result + 40);
  return result;
}

void sub_10134D2A4(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134D314;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10134D314(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 656) = *(unsigned int *)(result + 40);
  return result;
}

void sub_10134D324(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  _QWORD block[5];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  block[1] = 3221225472;
  v4 = a2[1];
  v8 = *a2;
  v9 = v4;
  v5 = a2[3];
  v10 = a2[2];
  v6 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10134D3A4;
  block[3] = &unk_1021660F0;
  block[4] = a1;
  v11 = v5;
  dispatch_sync(v6, block);
}

__n128 sub_10134D3A4(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  v1 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 360) = *(_OWORD *)(a1 + 44);
  *(_OWORD *)(v1 + 376) = *(_OWORD *)(a1 + 60);
  result = *(__n128 *)(a1 + 76);
  *(__n128 *)(v1 + 392) = result;
  *(_DWORD *)(v1 + 408) = *(_DWORD *)(a1 + 92);
  return result;
}

void sub_10134D3D0(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD block[5];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  block[1] = 3221225472;
  v8 = a3[10];
  v39 = a3[11];
  v9 = a3[13];
  v40 = a3[12];
  v41 = v9;
  v10 = a3[6];
  v35 = a3[7];
  v11 = a3[9];
  v36 = a3[8];
  v37 = v11;
  v38 = v8;
  v12 = a3[2];
  v13 = a3[4];
  v14 = a3[5];
  v31 = a3[3];
  v32 = v13;
  v33 = v14;
  v34 = v10;
  v15 = a3[1];
  v28 = *a3;
  v16 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10134D580;
  block[3] = &unk_1021AFF88;
  block[4] = a1;
  v42 = *((_QWORD *)a3 + 28);
  v29 = v15;
  v30 = v12;
  v17 = a4[13];
  v55 = a4[12];
  v56 = v17;
  v18 = *((_QWORD *)a4 + 28);
  v19 = a4[9];
  v51 = a4[8];
  v52 = v19;
  v20 = a4[10];
  v54 = a4[11];
  v53 = v20;
  v21 = a4[5];
  v47 = a4[4];
  v48 = v21;
  v22 = a4[6];
  v50 = a4[7];
  v49 = v22;
  v23 = a4[1];
  v43 = *a4;
  v44 = v23;
  v24 = a4[2];
  v46 = a4[3];
  v45 = v24;
  v25 = a2[1];
  v58 = *a2;
  v59 = v25;
  v26 = *((_QWORD *)a2 + 4);
  v57 = v18;
  v60 = v26;
  dispatch_sync(v16, block);
}

double sub_10134D580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_10134B958(a1, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160));
  *(_DWORD *)(v2 + 416) = v3;
  *(_DWORD *)(v2 + 420) = sub_10134B958(v3, *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  *(_WORD *)(v2 + 412) = *(_WORD *)(a1 + 504);
  result = *(double *)(a1 + 520);
  v5 = *(_QWORD *)(a1 + 528);
  *(double *)(v2 + 440) = result;
  *(_QWORD *)(v2 + 448) = v5;
  *(_DWORD *)(v2 + 456) = *(_DWORD *)(a1 + 536);
  return result;
}

void sub_10134D5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD block[7];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v6 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134D650;
  block[3] = &unk_102143548;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v6, block);
}

_QWORD *sub_10134D650(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  *(_QWORD *)(v1 + 424) = result[5];
  *(_QWORD *)(v1 + 432) = result[6];
  return result;
}

void sub_10134D664(uint64_t a1, double a2, double a3, double a4, double a5)
{
  NSObject *v10;
  _QWORD block[9];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v10 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10134D6F4;
  block[3] = &unk_1021382B0;
  block[4] = a1;
  *(double *)&block[5] = a2;
  *(double *)&block[6] = a3;
  *(double *)&block[7] = a5;
  *(double *)&block[8] = a4;
  dispatch_async(v10, block);
}

double sub_10134D6F4(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(double *)(v1 + 504);
  if (result != 1.79769313e308)
  {
    if (*(double *)(v1 + 1600) == 1.79769313e308)
    {
      *(_QWORD *)(v1 + 1600) = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(v1 + 1616) = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(v1 + 1608) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v1 + 1624) = *(_QWORD *)(a1 + 48);
    result = *(double *)(a1 + 56);
    if (result > -1.0)
    {
      if (*(double *)(v1 + 1632) == 1.79769313e308)
        *(_QWORD *)(v1 + 1632) = *(_QWORD *)(a1 + 64);
      result = *(double *)(a1 + 64);
      *(double *)(v1 + 1640) = result;
    }
  }
  return result;
}

float sub_10134D774(uint64_t a1)
{
  uint64_t v1;
  float v2;
  unsigned int v3;
  float v4;
  float result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(float *)(a1 + 40);
  *(float *)(v1 + 1652) = v2;
  if (*(double *)(v1 + 504) != 1.79769313e308 && *(float *)(v1 + 1648) == 3.4028e38)
    *(float *)(v1 + 1648) = v2;
  v3 = *(_DWORD *)(v1 + 1676);
  v4 = v2 + (float)(*(float *)(v1 + 1672) * (float)v3++);
  result = v4 / (float)v3;
  *(float *)(v1 + 1672) = result;
  *(_DWORD *)(v1 + 1676) = v3;
  return result;
}

void sub_10134D7D4(uint64_t a1, float a2)
{
  NSObject *v4;
  _QWORD v5[5];
  float v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10134D84C;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_10134D84C(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_DWORD *)(result + 40);
  if (*(float *)(v1 + 1664) == 3.4028e38)
    *(_DWORD *)(v1 + 1664) = v2;
  else
    *(_DWORD *)(v1 + 1668) = v2;
  return result;
}

_QWORD *sub_10134D878(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_10134D8D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_10134D938(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_10134D998(id a1)
{
  qword_10229FDE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AWD");
}

double sub_10134D9C4(uint64_t a1, double ***a2)
{
  double **v2;
  double *v3;
  double v4;

  v2 = *a2;
  ++*(_QWORD *)a1;
  v3 = *v2;
  v4 = **v2;
  if (v4 < *(double *)(a1 + 8))
  {
    *(double *)(a1 + 8) = v4;
    v4 = *v3;
  }
  if (v4 > *(double *)(a1 + 16))
    *(double *)(a1 + 16) = v4;
  return sub_10134DA08((uint64_t *)(a1 + 24), (uint64_t)v2);
}

double sub_10134DA08(uint64_t *a1, uint64_t a2)
{
  double *v2;
  double v3;
  uint64_t v4;
  uint64x2_t v5;
  double *v6;
  double *v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v23;
  uint64x2_t v24;
  int32x2_t v25;
  float64x2_t v26;
  double *v27;
  double *v28;
  unint64_t v29;
  double v30;
  double *v31;
  double *v32;
  unint64_t v33;
  unint64_t v34;
  double *v35;
  double *v36;
  double v37;
  uint64_t v38;
  double *v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  double *v43;
  double v44;

  *((_BYTE *)a1 + 112) = 1;
  v2 = *(double **)(a2 + 8);
  v3 = *v2;
  v4 = *a1;
  v5.i64[0] = **(_QWORD **)a2;
  if (*(_QWORD *)v2 <= (unint64_t)*a1)
  {
    v8 = (double *)a1[1];
    v8[*(_QWORD *)&v3 - 1] = *(double *)v5.i64;
    if (*(_QWORD *)&v3 == v4)
    {
      v9 = a1[4];
      if (v9 != -2)
      {
        v10 = 0;
        v11 = *((uint64_t *)v2 + 1);
        *(double *)&v12 = (v2[2] - *(double *)&v11) / (double)v9;
        v13 = a1[8];
        v5 = (uint64x2_t)vdupq_n_s64(v9 + 1);
        v14 = (int64x2_t)xmmword_101B9ACD0;
        v15 = vdupq_n_s64(2uLL);
        v16 = (float64x2_t)vdupq_lane_s64(v12, 0);
        v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
        __asm { FMOV            V5.2D, #-1.0 }
        do
        {
          v23 = v10 + 1;
          v24.i64[0] = v10;
          v24.i64[1] = v10 + 1;
          v25 = vmovn_s64((int64x2_t)vcgeq_u64(v5, (uint64x2_t)v14));
          v26 = vmlaq_f64(v17, v16, vaddq_f64(vcvtq_f64_u64(v24), _Q5));
          if ((v25.i8[0] & 1) != 0)
            *(float64_t *)(v13 + 8 * v10) = v26.f64[0];
          if ((v25.i8[4] & 1) != 0)
            *(float64_t *)(v13 + 8 * v10 + 8) = v26.f64[1];
          v14 = vaddq_s64(v14, v15);
          v10 += 2;
        }
        while (v23 + 1 != ((v9 + 3) & 0xFFFFFFFFFFFFFFFELL));
      }
      v27 = (double *)a1[2];
      if (v8 != v27)
      {
        v28 = (double *)a1[8];
        v29 = v9 + 1;
        v5.i64[0] = 1.0;
        do
        {
          v30 = *v8;
          if (*v8 >= v28[1])
          {
            if (v30 >= v28[v29])
            {
              v31 = (double *)(a1[5] + 8 * v29);
            }
            else
            {
              v32 = (double *)a1[9];
              if (v32 != v28)
              {
                v33 = v32 - v28;
                v32 = v28;
                do
                {
                  v34 = v33 >> 1;
                  v35 = &v32[v33 >> 1];
                  v37 = *v35;
                  v36 = v35 + 1;
                  v33 += ~(v33 >> 1);
                  if (v30 < v37)
                    v33 = v34;
                  else
                    v32 = v36;
                }
                while (v33);
              }
              v31 = (double *)((char *)v32 - (char *)v28 + a1[5] - 8);
            }
          }
          else
          {
            v31 = (double *)a1[5];
          }
          *v31 = *v31 + 1.0;
          ++v8;
        }
        while (v8 != v27);
      }
    }
  }
  else
  {
    v6 = (double *)a1[8];
    if (*(double *)v5.i64 >= v6[1])
    {
      v38 = a1[4] + 1;
      if (*(double *)v5.i64 >= v6[v38])
      {
        v7 = (double *)(a1[5] + 8 * v38);
      }
      else
      {
        v39 = (double *)a1[9];
        if (v39 != v6)
        {
          v40 = v39 - v6;
          v39 = (double *)a1[8];
          do
          {
            v41 = v40 >> 1;
            v42 = &v39[v40 >> 1];
            v44 = *v42;
            v43 = v42 + 1;
            v40 += ~(v40 >> 1);
            if (*(double *)v5.i64 < v44)
              v40 = v41;
            else
              v39 = v43;
          }
          while (v40);
        }
        v7 = (double *)((char *)v39 - (char *)v6 + a1[5] - 8);
      }
    }
    else
    {
      v7 = (double *)a1[5];
    }
    *(double *)v5.i64 = *v7 + 1.0;
    *v7 = *(double *)v5.i64;
  }
  return *(double *)v5.i64;
}

void sub_10134DC28(int **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p;
  void *v12;

  sub_10134DCC8(a1, &v3);
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = v3;
  sub_10134E004(a2 + 24, (uint64_t)&v4);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
}

void sub_10134DCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10134D878((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10134DCC8(int **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *__p;
  void *v13;

  sub_10134DD68(a1, &v4);
  v3 = v4;
  *a2 = 0x7FEFFFFFFFFFFFFFLL;
  a2[1] = v3;
  sub_10134E004((uint64_t)(a2 + 2), (uint64_t)&v5);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
}

void sub_10134DD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10134D8D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10134DD68(int **a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v3[8];
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *__p;
  void *v11;

  sub_10134DE00(a1, (uint64_t)v3);
  *a2 = 0xFFEFFFFFFFFFFFFFLL;
  sub_10134E004((uint64_t)(a2 + 1), (uint64_t)v3);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
}

void sub_10134DDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10134D938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10134DE00(int **a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[8];
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *__p;
  void *v11;

  sub_10134DE90((uint64_t)v3, a1);
  sub_10134E004(a2, (uint64_t)v3);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
}

void sub_10134DE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10134D938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10134DE90(uint64_t a1, int **a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v8;

  v4 = *a2[2];
  *(_QWORD *)a1 = v4;
  sub_1000ECE2C((_QWORD *)(a1 + 8), v4);
  v5 = **a2;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)&v8 = 0;
  sub_10025E5E0((_QWORD *)(a1 + 40), v5 + 2, &v8);
  sub_1000ECE2C((_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32) + 2);
  v6 = *(_QWORD *)(a1 + 32) + 2;
  v8 = 0uLL;
  sub_10134DF84((_QWORD *)(a1 + 88), v6, &v8);
  *(_BYTE *)(a1 + 112) = 1;
  return a1;
}

void sub_10134DF34(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v5 = v4;
  v7 = *v5;
  if (*v5)
  {
    v1[9] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v1[6] = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10134DF84(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002AE87C(a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10134DFE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10134E004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10025EA00((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_10025EA00((_QWORD *)(a1 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_10025EA00((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10134E11C((char *)(a1 + 88), *(__int128 **)(a2 + 88), *(__int128 **)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 4);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

void sub_10134E0D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[9] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[6] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10134E11C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_1002AE87C(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_10134E170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10134E18C(uint64_t a1, unint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  double *v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)(a1 + 112) = 0;
    v2 = *(_QWORD *)(a1 + 32) + 2;
    if (*(_QWORD *)(a1 + 32) != -2)
    {
      v3 = *(uint64_t **)(a1 + 64);
      v4 = *(double **)(a1 + 40);
      v5 = (double)**a2;
      v6 = (double *)(*(_QWORD *)(a1 + 88) + 8);
      do
      {
        v7 = *v4++;
        v8 = v7;
        v9 = *v3++;
        *((_QWORD *)v6 - 1) = v9;
        *v6 = v8 / v5;
        v6 += 2;
        --v2;
      }
      while (v2);
    }
  }
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_10134E1E8(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 2139095039;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 2139095039;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 44) = a2;
  v4 = a1 + 48;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

uint64_t sub_10134E254()
{
  _OWORD *v0;

  qword_10230E3F0 = 0;
  qword_10230E3F8 = 0;
  qword_10230E400 = 0;
  v0 = operator new(0x5CuLL);
  qword_10230E3F8 = (uint64_t)v0 + 92;
  qword_10230E400 = (uint64_t)v0 + 92;
  v0[2] = xmmword_101C9E76C;
  v0[3] = unk_101C9E77C;
  v0[4] = xmmword_101C9E78C;
  *(_OWORD *)((char *)v0 + 76) = *(__int128 *)((char *)&xmmword_101C9E78C + 12);
  *v0 = xmmword_101C9E74C;
  v0[1] = unk_101C9E75C;
  qword_10230E3F0 = (uint64_t)v0;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230E3F0, (void *)&_mh_execute_header);
}

_QWORD *sub_10134E2D0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  int64x2_t v4;

  v3 = sub_101476A58(a1, a2);
  *v3 = off_1021B0048;
  v3[11] = 0;
  v3[12] = 0;
  v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v3 + 13) = v4;
  v3[15] = 0xBFF0000000000000;
  v3[16] = 0;
  *(int64x2_t *)(v3 + 17) = v4;
  v3[19] = 0xBFF0000000000000;
  v3[20] = 0;
  *(int64x2_t *)(v3 + 21) = v4;
  v3[23] = 0xBFF0000000000000;
  v3[24] = 0;
  *(int64x2_t *)(v3 + 25) = v4;
  v3[27] = 0xBFF0000000000000;
  v3[28] = 0;
  sub_101350724(v3 + 29);
  a1[31] = 0x4334000042820000;
  return a1;
}

void sub_10134E374(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_100261F44(v2);
  *v1 = off_102184AD0;
  sub_100261F44((uint64_t)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t sub_10134E3A4()
{
  return 1;
}

uint64_t sub_10134E3AC(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t buf;
  std::__shared_weak_count *v21;

  v4 = a1[1];
  v5 = (std::__shared_weak_count *)a1[2];
  v18 = v4;
  v19 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(&buf, v4, a1);
  sub_100349198(a1 + 11, &buf);
  v8 = v21;
  if (v21)
  {
    v9 = (unint64_t *)&v21->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v19)
  {
    v11 = &v19->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)v11);
    while (__stlxr(v12 - 1, (unint64_t *)v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v13 = sub_100A3FA88(a1[29], a1 + 11, a2);
  if ((v13 & 1) == 0)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v14 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Bouts FTP Estimator failed to setup cache", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021B00A8);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Bouts FTP Estimator failed to setup cache", &v18, 2);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCyclingFTPBoutBasedEstimateModel::setupFTP(const double, const double, const CLBodyMetrics &)", "%s\n", v16);
      if (v17 != (char *)&buf)
        free(v17);
    }
  }
  return v13;
}

void sub_10134E614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10134E630(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
    sub_100E49BB4(v1);
  return 1;
}

void sub_10134E650(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  double v12;
  float v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  float v21;
  float v22;
  double v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  int v28;
  double v29;
  int v30;
  int v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  *(_QWORD *)(a3 + 8) = 0x7FF8000000000000;
  *(_DWORD *)(a3 + 24) = 0;
  sub_10134E990(a2, 13, 0, (uint64_t)&v25);
  v6 = (int)(v26 / 2.56);
  v7 = v25;
  if (v25 <= v6)
    v8 = (int)(v26 / 2.56);
  else
    v8 = v25;
  v9 = v28;
  v10 = v8 <= 0 || v28 <= 0;
  v11 = !v10;
  if (v10)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 28) = 4;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v12 = v27 / (double)v8;
    *(double *)a3 = v12;
    *(_DWORD *)(a3 + 28) = 4;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12 > 0.0)
    {
      if (v30 <= 0)
      {
        v14 = 0.0;
      }
      else
      {
        v13 = v29 / (double)v30;
        v14 = v13;
      }
      v20 = 0.0;
      if ((double)v30 / (double)v8 > 0.5)
      {
        v21 = (*(float *)(a1 + 252) - v14) / (*(float *)(a1 + 252) - *(float *)(a1 + 248));
        v22 = 1.0 - v21;
        if (v22 >= 1.0)
          v22 = 1.0;
        v20 = v22;
        if (v20 < 0.0)
          v20 = 0.0;
      }
      *(double *)(a3 + 16) = v20;
      goto LABEL_35;
    }
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021B00A8);
  v15 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0.0;
    if (v11)
      v16 = v27 / (double)v8;
    *(_DWORD *)buf = 134218752;
    v40 = v16;
    v41 = 1024;
    v42 = v6;
    v43 = 1024;
    v44 = v7;
    v45 = 1024;
    v46 = v9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not able to compute FTP for 60 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v17 = 0.0;
    if (v11)
      v17 = v27 / (double)v8;
    v31 = 134218752;
    v32 = v17;
    v33 = 1024;
    v34 = v6;
    v35 = 1024;
    v36 = v7;
    v37 = 1024;
    v38 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Not able to compute FTP for 60 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", COERCE_DOUBLE(&v31), 30, v25, LODWORD(v26));
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getFTPEstimateFor60Min(const CLCyclingFTPBoutStatistics &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
LABEL_35:
  v23 = sub_10134EBC8(a2, 13);
  sub_10134EC10(v23, v24, (uint64_t)&v25, (uint64_t *)a3);
}

void *sub_10134E990@<X0>(_QWORD *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  char *v5;
  char *v6;
  int v7;
  double *v8;
  void *result;
  int v10;
  double v11;
  BOOL v12;
  double v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  int v20;
  double *v21;
  int v22;
  double v23;
  BOOL v24;
  double v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[84];

  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  if (a3)
  {
    v5 = (char *)a1[8];
    v6 = (char *)a1[9];
    if (v5 != v6)
    {
      v7 = 0;
      v8 = (double *)&v30[6 * a2];
      do
      {
        result = memcpy(v30, v5, sizeof(v30));
        v10 = (int)(*(double *)(a4 + 8) / 2.56);
        if (v7 > v10)
          v10 = v7;
        v11 = 0.0;
        v12 = v10 < 1 || *(_DWORD *)(a4 + 24) < 1;
        v13 = 0.0;
        if (!v12)
          v13 = *(double *)(a4 + 16) / (double)v10;
        v14 = (int)(v8[1] / 2.56);
        if (*(_DWORD *)v8 > v14)
          v14 = *(_DWORD *)v8;
        if (v14 >= 1 && *((int *)v8 + 6) >= 1)
          v11 = v8[2] / (double)v14;
        if (v13 < v11)
        {
          v15 = *((_OWORD *)v8 + 3);
          *(_OWORD *)(a4 + 32) = *((_OWORD *)v8 + 2);
          *(_OWORD *)(a4 + 48) = v15;
          v16 = *((_OWORD *)v8 + 5);
          *(_OWORD *)(a4 + 64) = *((_OWORD *)v8 + 4);
          *(_OWORD *)(a4 + 80) = v16;
          v17 = *((_OWORD *)v8 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v8;
          *(_OWORD *)(a4 + 16) = v17;
          v7 = *(_DWORD *)a4;
        }
        v5 += 1344;
      }
      while (v5 != v6);
    }
  }
  else
  {
    v18 = (char *)a1[5];
    v19 = (char *)a1[6];
    if (v18 != v19)
    {
      v20 = 0;
      v21 = (double *)&v30[6 * a2];
      do
      {
        result = memcpy(v30, v18, sizeof(v30));
        v22 = (int)(*(double *)(a4 + 8) / 2.56);
        if (v20 > v22)
          v22 = v20;
        v23 = 0.0;
        v24 = v22 < 1 || *(_DWORD *)(a4 + 24) < 1;
        v25 = 0.0;
        if (!v24)
          v25 = *(double *)(a4 + 16) / (double)v22;
        v26 = (int)(v21[1] / 2.56);
        if (*(_DWORD *)v21 > v26)
          v26 = *(_DWORD *)v21;
        if (v26 >= 1 && *((int *)v21 + 6) >= 1)
          v23 = v21[2] / (double)v26;
        if (v25 < v23)
        {
          v27 = *((_OWORD *)v21 + 3);
          *(_OWORD *)(a4 + 32) = *((_OWORD *)v21 + 2);
          *(_OWORD *)(a4 + 48) = v27;
          v28 = *((_OWORD *)v21 + 5);
          *(_OWORD *)(a4 + 64) = *((_OWORD *)v21 + 4);
          *(_OWORD *)(a4 + 80) = v28;
          v29 = *((_OWORD *)v21 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v21;
          *(_OWORD *)(a4 + 16) = v29;
          v20 = *(_DWORD *)a4;
        }
        v18 += 1344;
      }
      while (v18 != v19);
    }
  }
  return result;
}

double sub_10134EBC8(_QWORD *a1, int a2)
{
  uint64_t *v2;
  int v4;

  v4 = a2;
  v2 = sub_1001F8DEC(a1, &v4);
  if (!v2)
    sub_100263950("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.953066667;
}

void sub_10134EC10(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint8_t buf[4];
  double v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  double v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;

  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021B00A8);
  v7 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (int)(*(double *)(a3 + 8) / 2.56);
    v9 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= v8)
      v10 = (int)(*(double *)(a3 + 8) / 2.56);
    else
      v10 = *(_DWORD *)a3;
    v11 = *(_DWORD *)(a3 + 24);
    if (v10 <= 0)
    {
      v13 = *(_DWORD *)(a3 + 48);
      v12 = 0.0;
      v14 = 0.0;
    }
    else
    {
      if (v11 <= 0)
        v12 = 0.0;
      else
        v12 = *(double *)(a3 + 16) / (double)v10;
      v13 = *(_DWORD *)(a3 + 48);
      v14 = (double)v13 / (double)v10;
    }
    v15 = *a4;
    v16 = a4[2];
    if (v13 < 1)
      v17 = 0.0;
    else
      v17 = *(double *)(a3 + 32) / (double)v13;
    v18 = *(_QWORD *)(a3 + 80);
    v19 = *(_QWORD *)(a3 + 88);
    *(_DWORD *)buf = 134220544;
    v58 = a1;
    v59 = 2048;
    v60 = v15;
    v61 = 2048;
    v62 = v16;
    v63 = 2048;
    v64 = v12;
    v65 = 1024;
    v66 = v8;
    v67 = 1024;
    v68 = v9;
    v69 = 1024;
    v70 = v11;
    v71 = 2048;
    v72 = v14;
    v73 = 2048;
    v74 = v17;
    v75 = 2048;
    v76 = v18;
    v77 = 2048;
    v78 = v19;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "boutDuration,%f,ftp,%f,confidence,%f,averagePower,%f,numExpectedSamples,%d,numObservedSamples,%d,observevalidPowerSampleCount,%d,fractionValidHR,%f,averageHR,%f,startTime,%f,endTime,%f", buf, 0x64u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v20 = (int)(*(double *)(a3 + 8) / 2.56);
    v21 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= v20)
      v22 = (int)(*(double *)(a3 + 8) / 2.56);
    else
      v22 = *(_DWORD *)a3;
    v23 = *(_DWORD *)(a3 + 24);
    if (v22 <= 0)
    {
      v25 = *(_DWORD *)(a3 + 48);
      v24 = 0.0;
      v26 = 0.0;
    }
    else
    {
      if (v23 <= 0)
        v24 = 0.0;
      else
        v24 = *(double *)(a3 + 16) / (double)v22;
      v25 = *(_DWORD *)(a3 + 48);
      v26 = (double)v25 / (double)v22;
    }
    v27 = *a4;
    v28 = a4[2];
    if (v25 < 1)
      v29 = 0.0;
    else
      v29 = *(double *)(a3 + 32) / (double)v25;
    v30 = *(_QWORD *)(a3 + 80);
    v31 = *(_QWORD *)(a3 + 88);
    v35 = 134220544;
    v36 = a1;
    v37 = 2048;
    v38 = v27;
    v39 = 2048;
    v40 = v28;
    v41 = 2048;
    v42 = v24;
    v43 = 1024;
    v44 = v20;
    v45 = 1024;
    v46 = v21;
    v47 = 1024;
    v48 = v23;
    v49 = 2048;
    v50 = v26;
    v51 = 2048;
    v52 = v29;
    v53 = 2048;
    v54 = v30;
    v55 = 2048;
    v56 = v31;
    LODWORD(v34) = 100;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "boutDuration,%f,ftp,%f,confidence,%f,averagePower,%f,numExpectedSamples,%d,numObservedSamples,%d,observevalidPowerSampleCount,%d,fractionValidHR,%f,averageHR,%f,startTime,%f,endTime,%f", COERCE_DOUBLE(&v35), v34);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLCyclingFTPBoutBasedEstimateModel::logMaxBoutFTPEstimate(const CFTimeInterval, const CLCyclingFTPBoutStatistics::Bout &, const CLCyclingFTPValue &) const", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
}

void sub_10134EF9C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  double v12;
  float v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  float v21;
  float v22;
  double v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  int v28;
  double v29;
  int v30;
  int v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  *(_QWORD *)(a3 + 8) = 0x7FF8000000000000;
  *(_DWORD *)(a3 + 24) = 0;
  sub_10134E990(a2, 12, 0, (uint64_t)&v25);
  v6 = (int)(v26 / 2.56);
  v7 = v25;
  if (v25 <= v6)
    v8 = (int)(v26 / 2.56);
  else
    v8 = v25;
  v9 = v28;
  v10 = v8 <= 0 || v28 <= 0;
  v11 = !v10;
  if (v10)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 28) = 3;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v12 = v27 / (double)v8;
    *(double *)a3 = v12;
    *(_DWORD *)(a3 + 28) = 3;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12 > 0.0)
    {
      if (v30 <= 0)
      {
        v14 = 0.0;
      }
      else
      {
        v13 = v29 / (double)v30;
        v14 = v13;
      }
      v20 = 0.0;
      if ((double)v30 / (double)v8 > 0.5)
      {
        v21 = (*(float *)(a1 + 252) - v14) / (*(float *)(a1 + 252) - *(float *)(a1 + 248));
        v22 = 1.0 - v21;
        if (v22 >= 1.0)
          v22 = 1.0;
        v20 = v22;
        if (v20 < 0.0)
          v20 = 0.0;
      }
      *(double *)(a3 + 16) = v20;
      goto LABEL_35;
    }
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021B00A8);
  v15 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0.0;
    if (v11)
      v16 = v27 / (double)v8;
    *(_DWORD *)buf = 134218752;
    v40 = v16;
    v41 = 1024;
    v42 = v6;
    v43 = 1024;
    v44 = v7;
    v45 = 1024;
    v46 = v9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not able to compute FTP for 20 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v17 = 0.0;
    if (v11)
      v17 = v27 / (double)v8;
    v31 = 134218752;
    v32 = v17;
    v33 = 1024;
    v34 = v6;
    v35 = 1024;
    v36 = v7;
    v37 = 1024;
    v38 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Not able to compute FTP for 20 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", COERCE_DOUBLE(&v31), 30, v25, LODWORD(v26));
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getFTPEstimateFor20Min(const CLCyclingFTPBoutStatistics &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
LABEL_35:
  v23 = sub_10134EBC8(a2, 12);
  sub_10134EC10(v23, v24, (uint64_t)&v25, (uint64_t *)a3);
}

void sub_10134F2DC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  double v12;
  float v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  float v21;
  float v22;
  double v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  int v28;
  double v29;
  int v30;
  int v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  *(_QWORD *)(a3 + 8) = 0x7FF8000000000000;
  *(_DWORD *)(a3 + 24) = 0;
  sub_10134E990(a2, 7, 0, (uint64_t)&v25);
  v6 = (int)(v26 / 2.56);
  v7 = v25;
  if (v25 <= v6)
    v8 = (int)(v26 / 2.56);
  else
    v8 = v25;
  v9 = v28;
  v10 = v8 <= 0 || v28 <= 0;
  v11 = !v10;
  if (v10)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 28) = 8;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v12 = v27 / (double)v8;
    *(double *)a3 = v12;
    *(_DWORD *)(a3 + 28) = 8;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12 > 0.0)
    {
      if (v30 <= 0)
      {
        v14 = 0.0;
      }
      else
      {
        v13 = v29 / (double)v30;
        v14 = v13;
      }
      v20 = 0.0;
      if ((double)v30 / (double)v8 > 0.5)
      {
        v21 = (*(float *)(a1 + 252) - v14) / (*(float *)(a1 + 252) - *(float *)(a1 + 248));
        v22 = 1.0 - v21;
        if (v22 >= 1.0)
          v22 = 1.0;
        v20 = v22;
        if (v20 < 0.0)
          v20 = 0.0;
      }
      *(double *)(a3 + 16) = v20;
      goto LABEL_35;
    }
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021B00A8);
  v15 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0.0;
    if (v11)
      v16 = v27 / (double)v8;
    *(_DWORD *)buf = 134218752;
    v40 = v16;
    v41 = 1024;
    v42 = v6;
    v43 = 1024;
    v44 = v7;
    v45 = 1024;
    v46 = v9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not able to compute FTP for 8 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v17 = 0.0;
    if (v11)
      v17 = v27 / (double)v8;
    v31 = 134218752;
    v32 = v17;
    v33 = 1024;
    v34 = v6;
    v35 = 1024;
    v36 = v7;
    v37 = 1024;
    v38 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Not able to compute FTP for 8 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", COERCE_DOUBLE(&v31), 30, v25, LODWORD(v26));
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getFTPEstimateFor8Min(const CLCyclingFTPBoutStatistics &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
LABEL_35:
  v23 = sub_10134EBC8(a2, 7);
  sub_10134EC10(v23, v24, (uint64_t)&v25, (uint64_t *)a3);
}

void sub_10134F61C(uint64_t a1@<X0>, _QWORD *a2@<X1>, int64x2_t *a3@<X8>)
{
  int *v6;
  double v7;
  int v8;
  double v9;
  float v10;
  float v11;
  int v12;
  double v13;
  double v15;
  float v16;
  float v17;
  double v18;
  float v19;
  double v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  void *__p;
  double *v57;
  double v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  double v78;
  uint8_t buf[4];
  _BYTE v80[20];
  double v81;
  _BYTE v82[10];
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  double v94;

  *a3 = vdupq_n_s64(0x7FF8000000000000uLL);
  a3[1].i64[0] = 0xBFF0000000000000;
  a3[1].i64[1] = 0;
  __p = 0;
  v57 = 0;
  v58 = 0.0;
  v6 = &dword_101C9E7B8;
  v55 = 0.0;
  v7 = 0.0;
  v53 = 0.0;
  v54 = 0.0;
  do
  {
    v8 = *v6;
    sub_10134E990(a2, *v6, 1, (uint64_t)buf);
    v9 = 0.0;
    if (SHIDWORD(v84) >= 1)
      v9 = *(double *)v82 / (double)SHIDWORD(v84);
    v10 = *(float *)(a1 + 248);
    v11 = *(float *)(a1 + 252);
    v12 = (int)(*(double *)&v80[4] / 2.56);
    if (*(int *)buf > v12)
      v12 = *(_DWORD *)buf;
    v13 = 0.0;
    if (v12 >= 1 && SLODWORD(v81) >= 1)
      v13 = *(double *)&v80[12] / (double)v12;
    v15 = sub_10134FE3C(a2, v8);
    if (v13 > 0.0)
    {
      v16 = v9;
      v17 = (v11 - v16) / (v11 - v10);
      v18 = (float)(1.0 - v17);
      if (v18 > 0.7)
      {
        v19 = v15;
        v20 = (float)(1.0 / v19);
        v21 = v57;
        if ((unint64_t)v57 >= *(_QWORD *)&v58)
        {
          v23 = (double *)__p;
          v24 = ((char *)v57 - (_BYTE *)__p) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            sub_100259694();
          v26 = *(_QWORD *)&v58 - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v58 - (_QWORD)__p) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)sub_10028E224((uint64_t)&v58, v27);
            v23 = (double *)__p;
            v21 = v57;
          }
          else
          {
            v28 = 0;
          }
          v29 = (double *)&v28[16 * v24];
          *v29 = v20;
          v29[1] = v13;
          v30 = v29;
          if (v21 != v23)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
              v30 -= 2;
              v21 -= 2;
            }
            while (v21 != v23);
            v23 = (double *)__p;
          }
          v22 = v29 + 2;
          __p = v30;
          v57 = v29 + 2;
          *(_QWORD *)&v58 = &v28[16 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v57 = v20;
          v21[1] = v13;
          v22 = v21 + 2;
        }
        v57 = v22;
        v32 = v54;
        v31 = v55;
        v33 = v53;
        if (v19 > 450.0)
          v33 = v53 + v18;
        else
          v32 = v54 + v18;
        v53 = v33;
        v54 = v32;
        if (v19 > 450.0)
          v31 = v55 + 1.0;
        else
          v7 = v7 + 1.0;
        v55 = v31;
      }
    }
    ++v6;
  }
  while (v6 != (int *)"34CLCyclingFTPBoutBasedEstimateModel");
  if ((unint64_t)((char *)v57 - (_BYTE *)__p) <= 0x20)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v39 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Not enough points for Critical Power Computation", buf, 2u);
    }
    v35 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021B00A8);
      LOWORD(v59) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Not enough points for Critical Power Computation", &v59, 2);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getCriticalPowerEstimate(const CLCyclingFTPBoutStatistics &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    v36 = 0.0;
    goto LABEL_59;
  }
  v35 = sub_1011A2AA0((double **)&__p, 0);
  if (v35 <= 0.0)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v40 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Unable to make CP estimate, first Point of Critical Power curve is <= 0.", buf, 2u);
    }
    v36 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021B00A8);
      LOWORD(v59) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Unable to make CP estimate, first Point of Critical Power curve is <= 0.", &v59, 2);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getCriticalPowerEstimate(const CLCyclingFTPBoutStatistics &)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    goto LABEL_59;
  }
  a3->i64[0] = v34;
  a3[1].i64[0] = 0;
  v36 = 0.0;
  if (v55 <= 0.0)
  {
LABEL_59:
    v37 = 0.0;
    goto LABEL_60;
  }
  v37 = v53 / v55;
  if (v7 <= 0.0)
    v36 = 0.0;
  else
    v36 = v54 / v7;
  v38 = (v37 + v36) * 0.5;
  if (v38 > 1.0)
    v38 = 1.0;
  if (v38 < 0.0)
    v38 = 0.0;
  *(double *)a3[1].i64 = v38;
LABEL_60:
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021B00A8);
  v41 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v42 = a3->i64[0];
    v43 = a3[1].i64[0];
    *(_DWORD *)buf = 134220288;
    *(_QWORD *)v80 = v42;
    *(_WORD *)&v80[8] = 2048;
    *(_QWORD *)&v80[10] = v43;
    *(_WORD *)&v80[18] = 2048;
    v81 = v55;
    *(_WORD *)v82 = 2048;
    *(double *)&v82[2] = v7;
    v83 = 2048;
    v84 = v53;
    v85 = 2048;
    v86 = v54;
    v87 = 2048;
    v88 = v37;
    v89 = 2048;
    v90 = v36;
    v91 = 2048;
    v92 = ((char *)v57 - (_BYTE *)__p) >> 4;
    v93 = 2048;
    v94 = v35;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "criticalPower,%f,confidence,%f,longBoutsCount,%f,shortBoutsCount,%f,longBoutsFHRSum,%f,shortBoutsFHRSum,%f,longBoutsAverageFHR,%f,shortBoutsAverageFHR,%f,totalPoints,%zu,slope,%f", buf, 0x66u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021B00A8);
    v44 = a3->i64[0];
    v45 = a3[1].i64[0];
    v59 = 134220288;
    v60 = v44;
    v61 = 2048;
    v62 = v45;
    v63 = 2048;
    v64 = v55;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v53;
    v69 = 2048;
    v70 = v54;
    v71 = 2048;
    v72 = v37;
    v73 = 2048;
    v74 = v36;
    v75 = 2048;
    v76 = ((char *)v57 - (_BYTE *)__p) >> 4;
    v77 = 2048;
    v78 = v35;
    LODWORD(v52) = 102;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "criticalPower,%f,confidence,%f,longBoutsCount,%f,shortBoutsCount,%f,longBoutsFHRSum,%f,shortBoutsFHRSum,%f,longBoutsAverageFHR,%f,shortBoutsAverageFHR,%f,totalPoints,%zu,slope,%f", COERCE_DOUBLE(&v59), v52, v53, v54, v55, *(double *)&__p, *(double *)&v57, v58);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getCriticalPowerEstimate(const CLCyclingFTPBoutStatistics &)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  a3[1].i32[3] = 9;
  if (__p)
  {
    v57 = (double *)__p;
    operator delete(__p);
  }
}

void sub_10134FE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10134FE3C(_QWORD *a1, int a2)
{
  uint64_t *v2;
  int v4;

  v4 = a2;
  v2 = sub_1001F8DEC(a1, &v4);
  if (!v2)
    sub_100263950("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 57.184;
}

uint64_t sub_10134FE84(uint64_t a1)
{
  int64x2_t v2;

  sub_100A3FAC8(*(_QWORD **)(a1 + 232));
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 104) = v2;
  *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(int64x2_t *)(a1 + 136) = v2;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(int64x2_t *)(a1 + 168) = v2;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 192) = 0;
  *(int64x2_t *)(a1 + 200) = v2;
  *(_QWORD *)(a1 + 216) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 224) = 0;
  return 1;
}

uint64_t sub_10134FEEC(uint64_t a1, float64x2_t *a2)
{
  sub_100A3FAE8(*(_QWORD *)(a1 + 232), (uint64_t)a2);
  *(float32x2_t *)(a1 + 248) = vcvt_f32_f64(a2[4]);
  return 1;
}

uint64_t sub_10134FF24(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  double v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  char *v16;
  int *v17;
  NSObject *v18;
  int v19;
  double v20;
  double v21;
  double v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  double v46;
  double v47;
  double v48;
  char *v49;
  int v50;
  int v51;
  double v52;
  int v53;
  int v54;
  double v55;
  double v56;
  double v57;
  char *v58;
  int v59;
  int v60;
  double v61;
  double v62;
  const char *v63;
  char *v64;
  double v66;
  __int128 v67;
  double v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  int v76;
  void *v77;
  void *v78;
  int v79;
  void *__p;
  void *v81;
  double v82;
  char *v83;
  char *v84;
  int v85;
  unint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  double v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  int v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  _BYTE buf[32];
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  double v127;
  __int16 v128;
  int v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  int v143;
  __int16 v144;
  double v145;
  __int16 v146;
  double v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  double v153;
  __int16 v154;
  double v155;

  sub_100A40630(*(_QWORD *)(a1 + 232), &v72);
  sub_10134EF9C(a1, &v72, (uint64_t)buf);
  v2 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 152) = v2;
  sub_10134E650(a1, &v72, (uint64_t)buf);
  v3 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 120) = v3;
  sub_10134F2DC(a1, &v72, (uint64_t)buf);
  v4 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 184) = v4;
  sub_10134F61C(a1, &v72, (int64x2_t *)buf);
  *((_QWORD *)&v5 + 1) = *(_QWORD *)&buf[8];
  v6 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 216) = v6;
  v7 = v84;
  if (v84 != v83)
  {
    v8 = 0;
    *(_QWORD *)&v5 = 134222592;
    v67 = v5;
    v7 = v83;
    do
    {
      v9 = v74;
      if (v74 != 0.0)
      {
        v10 = &v7[40 * v8];
        v70 = (uint64_t *)(v10 + 24);
        v71 = (uint64_t *)(v10 + 16);
        v69 = (uint64_t *)(v10 + 32);
        do
        {
          v11 = *(int *)(*(_QWORD *)&v9 + 16);
          v12 = (char *)v77;
          v13 = (char *)__p;
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021B00A8);
          v14 = &v12[1344 * v8];
          v15 = (int *)&v14[96 * v11];
          v16 = &v13[1344 * v8];
          v17 = (int *)&v16[96 * v11];
          v18 = qword_10229FF98;
          if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
          {
            v19 = *(_DWORD *)&v14[96 * (int)v11 + 48];
            v20 = 0.0;
            v21 = 0.0;
            v22 = 0.0;
            if (v19 >= 1)
            {
              v23 = &v14[96 * (int)v11];
              v21 = *((double *)v23 + 4) / (double)v19;
              v22 = *((double *)v23 + 5) / (double)v19;
            }
            v24 = *v15;
            v25 = (int)(*(double *)&v14[96 * (int)v11 + 8] / 2.56);
            if (*v15 <= v25)
              v26 = (int)(*(double *)&v14[96 * (int)v11 + 8] / 2.56);
            else
              v26 = *v15;
            if (v26 < 1)
            {
              v27 = 0.0;
            }
            else
            {
              v27 = (double)v19 / (double)v26;
              if (*(int *)&v14[96 * (int)v11 + 24] >= 1)
                v20 = *(double *)&v14[96 * (int)v11 + 16] / (double)v26;
            }
            v28 = *(_DWORD *)&v16[96 * (int)v11 + 48];
            v29 = 0.0;
            v30 = 0.0;
            v31 = 0.0;
            if (v28 >= 1)
            {
              v32 = &v16[96 * (int)v11];
              v30 = *((double *)v32 + 4) / (double)v28;
              v31 = *((double *)v32 + 5) / (double)v28;
            }
            v33 = *v17;
            v34 = (int)(*(double *)&v16[96 * (int)v11 + 8] / 2.56);
            if (*v17 <= v34)
              v35 = (int)(*(double *)&v16[96 * (int)v11 + 8] / 2.56);
            else
              v35 = *v17;
            if (v35 < 1)
            {
              v36 = 0.0;
            }
            else
            {
              v36 = (double)v28 / (double)v35;
              if (*(int *)&v16[96 * (int)v11 + 24] >= 1)
                v29 = *(double *)&v16[96 * (int)v11 + 16] / (double)v35;
            }
            v37 = *v71;
            v38 = *v70;
            v39 = *v69;
            v40 = *(float *)(*(_QWORD *)&v9 + 20);
            *(_DWORD *)buf = v67;
            *(_QWORD *)&buf[4] = v8;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v37;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v38;
            v124 = 2048;
            v125 = v39;
            v126 = 2048;
            v127 = v40;
            v128 = 1024;
            v129 = v24;
            v130 = 2048;
            v131 = v21;
            v132 = 2048;
            v133 = v22;
            v134 = 1024;
            v135 = v25;
            v136 = 1024;
            v137 = v26;
            v138 = 2048;
            v139 = v27;
            v140 = 2048;
            v141 = v20;
            v142 = 1024;
            v143 = v33;
            v144 = 2048;
            v145 = v30;
            v146 = 2048;
            v147 = v31;
            v148 = 1024;
            v149 = v34;
            v150 = 1024;
            v151 = v35;
            v152 = 2048;
            v153 = v36;
            v154 = 2048;
            v155 = v29;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "sessionId,%zu,sessionStart,%f,sessionEnd,%f,workoutType,%ld,durationMin,%f,n,%d,hr,%f,hrConf,%f,nexpected,%d,nMax,%d,validHRFraction,%f,power,%f,goodHR_n,%d,goodHR_hr,%f,goodHR_hrConf,%f,goodHR_nexpected,%d,goodHR_nMax,%d,goodHR_validHRFraction,%f,goodHR_power,%f", buf, 0xA8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF90 != -1)
              dispatch_once(&qword_10229FF90, &stru_1021B00A8);
            v41 = *v71;
            v42 = *v70;
            v43 = *v69;
            v44 = *v15;
            v45 = *(_DWORD *)&v14[96 * (int)v11 + 48];
            v46 = 0.0;
            v47 = 0.0;
            v48 = 0.0;
            if (v45 >= 1)
            {
              v49 = &v14[96 * (int)v11];
              v47 = *((double *)v49 + 4) / (double)v45;
              v48 = *((double *)v49 + 5) / (double)v45;
            }
            v50 = (int)(*(double *)&v14[96 * (int)v11 + 8] / 2.56);
            if (v44 <= v50)
              v51 = (int)(*(double *)&v14[96 * (int)v11 + 8] / 2.56);
            else
              v51 = *v15;
            if (v51 < 1)
            {
              v52 = 0.0;
            }
            else
            {
              v52 = (double)v45 / (double)v51;
              if (*(int *)&v14[96 * (int)v11 + 24] >= 1)
                v46 = *(double *)&v14[96 * (int)v11 + 16] / (double)v51;
            }
            v53 = *v17;
            v54 = *(_DWORD *)&v16[96 * (int)v11 + 48];
            v55 = 0.0;
            v56 = 0.0;
            v57 = 0.0;
            if (v54 >= 1)
            {
              v58 = &v16[96 * (int)v11];
              v56 = *((double *)v58 + 4) / (double)v54;
              v57 = *((double *)v58 + 5) / (double)v54;
            }
            v59 = (int)(*(double *)&v16[96 * (int)v11 + 8] / 2.56);
            if (v53 <= v59)
              v60 = (int)(*(double *)&v16[96 * (int)v11 + 8] / 2.56);
            else
              v60 = *v17;
            if (v60 < 1)
            {
              v61 = 0.0;
            }
            else
            {
              v61 = (double)v54 / (double)v60;
              if (*(int *)&v16[96 * (int)v11 + 24] >= 1)
                v55 = *(double *)&v16[96 * (int)v11 + 16] / (double)v60;
            }
            v62 = *(float *)(*(_QWORD *)&v9 + 20);
            v85 = v67;
            v86 = v8;
            v87 = 2048;
            v88 = v41;
            v89 = 2048;
            v90 = v42;
            v91 = 2048;
            v92 = v43;
            v93 = 2048;
            v94 = v62;
            v95 = 1024;
            v96 = v44;
            v97 = 2048;
            v98 = v47;
            v99 = 2048;
            v100 = v48;
            v101 = 1024;
            v102 = v50;
            v103 = 1024;
            v104 = v51;
            v105 = 2048;
            v106 = v52;
            v107 = 2048;
            v108 = v46;
            v109 = 1024;
            v110 = v53;
            v111 = 2048;
            v112 = v56;
            v113 = 2048;
            v114 = v57;
            v115 = 1024;
            v116 = v59;
            v117 = 1024;
            v118 = v60;
            v119 = 2048;
            v120 = v61;
            v121 = 2048;
            v122 = v55;
            LODWORD(v66) = 168;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "sessionId,%zu,sessionStart,%f,sessionEnd,%f,workoutType,%ld,durationMin,%f,n,%d,hr,%f,hrConf,%f,nexpected,%d,nMax,%d,validHRFraction,%f,power,%f,goodHR_n,%d,goodHR_hr,%f,goodHR_hrConf,%f,goodHR_nexpected,%d,goodHR_nMax,%d,goodHR_validHRFraction,%f,goodHR_power,%f", (size_t)&v85, v66, *(double *)&v67, *((_QWORD *)&v67 + 1), v68, (_DWORD)v69, *(double *)&v70, *(double *)&v71, v72,
              v73,
              v74,
              v75,
              v76,
              *(double *)&v77,
              *(double *)&v78,
              v79,
              (_DWORD)__p,
              *(double *)&v81,
              v82);
            v64 = (char *)v63;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCyclingFTPBoutBasedEstimateModel::execute()", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          v9 = **(double **)&v9;
        }
        while (v9 != 0.0);
      }
      ++v8;
      v7 = v83;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((v84 - v83) >> 3));
  }
  if (v7)
  {
    v84 = v7;
    operator delete(v7);
  }
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  sub_100067AC4((uint64_t)&v72);
  return 1;
}

void sub_1013505C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1013505F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013505F4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return sub_100067AC4((uint64_t)a1);
}

__n128 sub_101350644@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 136);
  v6 = *(_OWORD *)(a1 + 152);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

void sub_10135067C(_QWORD *a1)
{
  sub_1013506CC(a1);
  operator delete();
}

void sub_1013506A0(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

_QWORD *sub_1013506CC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021B0048;
  v2 = (uint64_t)(a1 + 11);
  sub_100261F44((uint64_t)(a1 + 29));
  sub_100261F44(v2);
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_101350724@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0xD8uLL);
  result = sub_10135076C((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_101350758(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10135076C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1021B00D8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  sub_10135085C(a1 + 24);
  return a1;
}

void sub_1013507D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013507EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B00D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101350800(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B00D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101350834(uint64_t a1)
{
  char v2;

  return sub_101350988((uint64_t)&v2, (_QWORD *)(a1 + 24));
}

uint64_t sub_10135085C(uint64_t a1)
{
  _OWORD v3[7];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3[4] = xmmword_101C9E8A4;
  v3[5] = unk_101C9E8B4;
  v3[6] = xmmword_101C9E8C4;
  v3[0] = xmmword_101C9E864;
  v3[1] = unk_101C9E874;
  v3[2] = xmmword_101C9E884;
  v3[3] = unk_101C9E894;
  sub_101350914(a1 + 16, (int *)v3, 14);
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_101350900(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101350914(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      sub_1004B7728(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_101350974(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101350988(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)a2[13];
  if (v3)
  {
    a2[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[10];
  if (v4)
  {
    a2[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a2[7];
  if (v5)
  {
    a2[8] = v5;
    operator delete(v5);
  }
  sub_100067AC4((uint64_t)(a2 + 2));
  return sub_100261F44((uint64_t)a2);
}

_QWORD *sub_1013509E0(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_101350A9C((uint64_t)a1, "HRRecoveryInputHRHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021B0128;
  a1[9] = off_1021B01F0;
  a1[42] = off_1021B0240;
  sub_101351414((uint64_t)a1);
  return a1;
}

void sub_101350A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_101350EF4(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101350A9C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021B0420;
  *(_QWORD *)(a1 + 72) = off_1021B04C8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B0420;
  *(_QWORD *)(a1 + 72) = off_1021B04C8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_101350E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_102138DA8;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_101350EEC()
{
  JUMPOUT(0x101350ECCLL);
}

_QWORD *sub_101350EF4(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B04C8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B0420;
  a1[33] = off_102138DA8;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_101350F74(uint64_t a1)
{
  return sub_101350EF4((_QWORD *)(a1 - 72));
}

_QWORD *sub_101350F7C(uint64_t a1)
{
  return sub_101350EF4((_QWORD *)(a1 - 336));
}

void sub_101350F84(_QWORD *a1)
{
  sub_101350EF4(a1);
  operator delete();
}

void sub_101350FA8(uint64_t a1)
{
  sub_101350EF4((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_101350FD0(uint64_t a1)
{
  sub_101350EF4((_QWORD *)(a1 - 336));
  operator delete();
}

uint64_t sub_101350FF8(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM HRRecoveryInputHRHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_101351110(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101351130(uint64_t a1, uint64_t a2)
{
  return sub_101350FF8(a1 - 72, a2);
}

uint64_t sub_101351138(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from HRRecoveryInputHRHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1013512C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013512EC(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_101351664(a1, a2);
  return 0;
}

uint64_t sub_101351348(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM HRRecoveryInputHRHistory");
  return 0xFFFFFFFFLL;
}

void sub_1013513E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10135140C(uint64_t a1)
{
  return sub_101351348(a1 - 72);
}

uint64_t sub_101351414(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "HRRecoveryInputHRHistory", (const char **)&off_1021B02E0, (const std::string::value_type **)&off_1022FF870, 0);
  return result;
}

_QWORD *sub_101351468@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "HRRecoveryInputHRHistory");
}

_QWORD *sub_101351478@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "HRRecoveryInputHRHistory");
}

uint64_t sub_101351488(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM HRRecoveryInputHRHistory");
  return result;
}

void sub_10135151C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10135153C(uint64_t a1)
{
  return sub_101351488(a1 - 72);
}

uint64_t sub_101351544(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100131938(&v3, (uint64_t)"CLHRRecoveryInputHRRecorderDb.insertRecord", 0);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO HRRecoveryInputHRHistory (startTime, hr, hrConfidence) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_101351628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_101351658(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_101351664(a2, a3);
}

void sub_101351664(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
}

uint64_t sub_1013516D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[16];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM HRRecoveryInputHRHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_1021B03D0);
  v5 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HRRecoveryInputHRHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_1021B03D0);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "HRRecoveryInputHRHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputHRRecorderDb::queryHRRecoveryInputHRInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoveryInputHR> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_101351A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101351A9C(uint64_t a1)
{
  return sub_1013516D8(a1 - 336);
}

uint64_t sub_101351AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[16];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from HRRecoveryInputHRHistory ORDER BY startTime ASC");
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B03F0);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HRRecoveryInputHRHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B03F0);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "HRRecoveryInputHRHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputHRRecorderDb::queryHRRecoveryInputHRAllRecords(std::vector<HRRecoveryInputHR> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_101351DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101351E20(uint64_t a1)
{
  return sub_101351AA4(a1 - 336);
}

uint64_t sub_101351E28(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10194DC28(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_101352130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_101352198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B0508);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0508);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0508);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_101352764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101352794(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v32 = 0;
  v33 = 0.0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0508);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0508);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0508);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v40 = v33;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0508);
        v23 = *(_QWORD *)(a2 + 8);
        v35 = 134349312;
        v36 = v33;
        v37 = 2050;
        v38 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0508);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B0508);
          v26 = *(double *)(a2 + 8);
          v35 = 134217984;
          v36 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B0508);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0508);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_101352ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101352F00(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10194DD94(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101353160(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194DF00(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_101353398(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194E06C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_1013535C0(uint64_t a1)
{
  return sub_101352198(a1 - 72);
}

void sub_1013535C8(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_1013535F4(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101353620(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10194E1D8(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1013538E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_10135394C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101353978@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;

  v3 = *(double *)(a2 + 1024);
  if (*(double *)(a2 + 112) >= v3)
  {
    v4 = *(double *)(result + 24);
    if (v3 > v4)
    {
      v5 = *(_QWORD *)(a2 + 1032);
      if ((!*(_BYTE *)(a2 + 352) || *(_BYTE *)(result + 48)) && (v5 - *(_DWORD *)(result + 32)) >= 0xC8)
      {
        v6 = v3 - v4;
        v7 = *(double *)(result + 40);
        if (v6 <= 180.0)
        {
          if (v7 >= v6)
            v7 = v6;
          *(double *)result = *(double *)result + v7;
        }
        else
        {
          *(double *)(result + 8) = v7 + *(double *)(result + 8);
          *(double *)(result + 16) = v3;
        }
      }
      *(double *)(result + 24) = v3;
      *(_QWORD *)(result + 32) = v5;
    }
  }
  v8 = *(double *)result;
  if (*(double *)result <= 0.0)
  {
    v9 = *(double *)(result + 8);
    if (v9 <= 0.0)
    {
      v10 = 0;
      goto LABEL_21;
    }
    if (*(double *)(a2 + 112) - *(double *)(result + 16) > 900.0)
    {
      v10 = 0;
      *(_QWORD *)(result + 8) = 0;
      v9 = 0.0;
      goto LABEL_21;
    }
    v9 = v9 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
    if (v9 < 0.0)
      v9 = 0.0;
    *(double *)(result + 8) = v9;
  }
  else
  {
    v8 = v8 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
    if (v8 < 0.0)
      v8 = 0.0;
    *(double *)result = v8;
    v9 = *(double *)(result + 8);
  }
  v10 = 1;
LABEL_21:
  *(_BYTE *)a3 = v10;
  *(double *)(a3 + 8) = v9;
  *(double *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_101353A98(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_101353BF8((uint64_t)a1, "CLSedentaryAlarmRecorderDb", a2, (uint64_t)__p, 1, 0.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021B0538;
  a1[9] = off_1021B05F0;
  sub_100E81598(a1 + 42, 0, 0);
  sub_100E81598(a1 + 44, 0, 0);
  sub_100E81598(a1 + 46, 0, 0);
  sub_100E81598(a1 + 48, 0, 0);
  sub_100E81598(a1 + 50, 0, 0);
  sub_100E81598(a1 + 52, 0, 0);
  sub_100E81598(a1 + 54, 0, 0);
  sub_100E81598(a1 + 56, 0, 0);
  sub_100E81598(a1 + 58, 0, 0);
  sub_100E81598(a1 + 60, 0, 0);
  a1[62] = 0;
  a1[63] = 0;
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_101353BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

