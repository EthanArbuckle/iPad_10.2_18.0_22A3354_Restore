void sub_1017CA2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017CA314(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBarometricAltimeter::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1017D5804(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1017CA4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_1017CA4EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  double v32;
  uint8_t *v33;
  uint8_t *v34;
  NSObject *v35;
  double v37;
  uint8_t *v38;
  _WORD v39[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = 244;
    if (!*(_BYTE *)(a1 + 248))
      v3 = 364;
    v4 = *(_DWORD *)(a1 + v3);
    v5 = 252;
    if (!*(_BYTE *)(a1 + 256))
      v5 = 376;
    v6 = *(_DWORD *)(a1 + v5);
    v7 = 236;
    if (!*(_BYTE *)(a1 + 237))
      v7 = 360;
    v8 = *(_BYTE *)(a1 + v7);
    v9 = sub_1000B71A0(a1);
    v10 = sub_1017D548C(a1);
    v11 = 268;
    if (!*(_BYTE *)(a1 + 269))
      v11 = 372;
    v12 = *(_BYTE *)(a1 + v11);
    v13 = 270;
    if (!*(_BYTE *)(a1 + 271))
      v13 = 373;
    v14 = *(_BYTE *)(a1 + v13);
    v15 = sub_1017D564C(a1);
    v16 = 280;
    if (!*(_BYTE *)(a1 + 281))
      v16 = 380;
    v17 = *(_BYTE *)(a1 + v16);
    v18 = 304;
    if (!*(_BYTE *)(a1 + 308))
      v18 = 392;
    v19 = *(_DWORD *)(a1 + v18);
    v20 = 288;
    if (!*(_BYTE *)(a1 + 296))
      v20 = 384;
    v21 = *(_QWORD *)(a1 + v20);
    v22 = 328;
    if (!*(_BYTE *)(a1 + 332))
      v22 = 408;
    v23 = *(_DWORD *)(a1 + v22);
    v24 = 312;
    if (!*(_BYTE *)(a1 + 320))
      v24 = 400;
    v25 = *(_QWORD *)(a1 + v24);
    v26 = 336;
    if (!*(_BYTE *)(a1 + 344))
      v26 = 416;
    v27 = *(_QWORD *)(a1 + v26);
    v28 = 352;
    if (!*(_BYTE *)(a1 + 356))
      v28 = 424;
    v29 = *(_DWORD *)(a1 + v28);
    v30 = *(_QWORD *)a1;
    *(_BYTE *)(v30 + 648) = v8;
    *(_BYTE *)(v30 + 649) = v10;
    *(_BYTE *)(v30 + 650) = v9;
    *(_DWORD *)(v30 + 652) = v4;
    *(_DWORD *)(v30 + 656) = v15;
    *(_BYTE *)(v30 + 660) = v12;
    *(_BYTE *)(v30 + 661) = v14;
    *(_DWORD *)(v30 + 664) = v6;
    *(_BYTE *)(v30 + 668) = v17;
    *(_QWORD *)(v30 + 672) = v21;
    *(_DWORD *)(v30 + 680) = v19;
    *(_QWORD *)(v30 + 688) = v25;
    *(_DWORD *)(v30 + 696) = v23;
    *(_QWORD *)(v30 + 704) = v27;
    *(_DWORD *)(v30 + 712) = v29;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v31 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "BaroAlt,updateHarvestConfigToCore,updated", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v39[0] = 0;
      v32 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,updateHarvestConfigToCore,updated", v39, 2);
      v34 = v33;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateHarvestConfigToCore()", "%s\n", v32);
LABEL_43:
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v35 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "BaroAlt,updateHarvestConfigToCore,invalid Core", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v39[0] = 0;
      v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,updateHarvestConfigToCore,invalid Core", v39, 2);
      v34 = v38;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLBarometricAltimeter::updateHarvestConfigToCore()", "%s\n", v37);
      goto LABEL_43;
    }
  }
  return v1 != 0;
}

void sub_1017CA934(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBarometricAltimeter::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1017D729C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1017CAAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1017CAB0C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  id v11;
  _QWORD v12[5];
  _WORD v13[8];
  uint8_t buf[1640];

  if ((sub_10075E1DC() & 1) != 0)
  {
    v2 = 236;
    if (!*(_BYTE *)(a1 + 237))
      v2 = 360;
    if (*(_BYTE *)(a1 + v2))
    {
      if (!*(_QWORD *)(a1 + 3664))
        operator new();
      if (!*(_QWORD *)(a1 + 2240))
        operator new();
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,CL Reference Pressure not supported", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,CL Reference Pressure not supported", v13, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::initPressureObjects()", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
      if (!*(_QWORD *)(a1 + 2264))
      {
        v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 504), "silo"), "newTimer");
        *(_QWORD *)(a1 + 2264) = v11;
        if (!v11)
          sub_1017DCFC8();
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1017CC238;
        v12[3] = &unk_10212ECA0;
        v12[4] = a1;
        objc_msgSend(v11, "setHandler:", v12);
      }
      if (!*(_BYTE *)(a1 + 3460))
      {
        sub_1017CC3E8((_QWORD *)a1);
        *(_BYTE *)(a1 + 3460) = 1;
      }
      return;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,reference Pressure not allowed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,reference Pressure not allowed", v13, 2);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::initPressureObjects()", "%s\n", v10);
LABEL_32:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,device does not support Baro", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,device does not support Baro", v13, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::initPressureObjects()", "%s\n", v7);
      goto LABEL_32;
    }
  }
}

void sub_1017CB390()
{
  operator delete();
}

void sub_1017CB3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLBarometricAltimeter::onGpsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_1017D52F0();
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_1017CB574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1017CB594(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBarometricAltimeter::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1017DB35C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1017CB74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1017CB76C(uint64_t a1)
{
  int v2;
  double v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  _BYTE v33[12];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  _BYTE buf[22];
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  sub_1001E4804(buf);
  *(_QWORD *)v33 = 0;
  v2 = sub_1001FD98C(*(uint64_t *)buf, "BaroAltCalibrationUploadThresholdForAWeekInSeconds", v33);
  v3 = *(double *)v33;
  if (!v2)
    v3 = 604800.0;
  *(double *)(a1 + 3624) = v3;
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_1001E4804(buf);
  *(_QWORD *)v33 = 0;
  v7 = sub_1001FD98C(*(uint64_t *)buf, "BaroAltCalibrationUploadThresholdForAMonthInSeconds", v33);
  v8 = *(double *)v33;
  if (!v7)
    v8 = 2626560.0;
  *(double *)(a1 + 3632) = v8;
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_1001E4804(buf);
  *(_QWORD *)v33 = 0;
  v12 = sub_1001FD98C(*(uint64_t *)buf, "BaroAltCalibrationUploadThresholdFor3MonthsInSeconds", v33);
  v13 = *(double *)v33;
  if (!v12)
    v13 = 7884000.0;
  *(double *)(a1 + 3640) = v13;
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_1001E4804(buf);
  *(_QWORD *)v33 = 0;
  v17 = sub_1001FD98C(*(uint64_t *)buf, "BaroAltCalibrationCacheThresholdTimeInSeconds", v33);
  v18 = *(double *)v33;
  if (!v17)
    v18 = 3600.0;
  *(double *)(a1 + 3648) = v18;
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if ((*(_QWORD *)(a1 + 3624) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    *(_QWORD *)(a1 + 3624) = 0x4122750000000000;
  if ((*(_QWORD *)(a1 + 3632) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    *(_QWORD *)(a1 + 3632) = 0x414409FFFFFFFFFFLL;
  if ((*(_QWORD *)(a1 + 3640) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    *(_QWORD *)(a1 + 3640) = 0x415E133800000000;
  if ((*(_QWORD *)(a1 + 3648) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    *(_QWORD *)(a1 + 3648) = 0x40AC200000000000;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v22 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v23 = *(_QWORD *)(a1 + 3624);
    v24 = *(_QWORD *)(a1 + 3632);
    v25 = *(_QWORD *)(a1 + 3640);
    v26 = *(_QWORD *)(a1 + 3648);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v24;
    v41 = 2050;
    v42 = v25;
    v43 = 2050;
    v44 = v26;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,BaroAltCalibrationUploadThresholdForAWeekInSeconds,%{public}lf,BaroAltCalibrationUploadThresholdForAMonthInSeconds,%{public}lf,BaroAltCalibrationUploadThresholdFor3MonthsInSeconds,%{public}lf,BaroAltCalibrationCacheThresholdTimeInSeconds,%{public}lf", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v27 = *(_QWORD *)(a1 + 3624);
    v28 = *(_QWORD *)(a1 + 3632);
    v29 = *(_QWORD *)(a1 + 3640);
    v30 = *(_QWORD *)(a1 + 3648);
    *(_DWORD *)v33 = 134349824;
    *(_QWORD *)&v33[4] = v27;
    v34 = 2050;
    v35 = v28;
    v36 = 2050;
    v37 = v29;
    v38 = 2050;
    v39 = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,BaroAltCalibrationUploadThresholdForAWeekInSeconds,%{public}lf,BaroAltCalibrationUploadThresholdForAMonthInSeconds,%{public}lf,BaroAltCalibrationUploadThresholdFor3MonthsInSeconds,%{public}lf,BaroAltCalibrationCacheThresholdTimeInSeconds,%{public}lf", v33, 42);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::prepareCalibrationAnalyticsData()", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  sub_1015A2E04(buf, "InAWeek");
  sub_1017D9148((uint64_t)CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeForAWeek"), (uint64_t *)buf, a1 + 3512);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(buf, "InAMonth");
  sub_1017D9148((uint64_t)CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeForAMonth"), (uint64_t *)buf, a1 + 3544);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(buf, "In3Months");
  sub_1017D9148((uint64_t)CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeFor3Months"), (uint64_t *)buf, a1 + 3576);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(buf, "InAWeek");
  sub_1017D9380(CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeForAWeek"), (uint64_t *)buf, a1 + 3512, (uint64_t *)a1);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(buf, "InAMonth");
  sub_1017D9380(CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeForAMonth"), (uint64_t *)buf, a1 + 3544, (uint64_t *)a1);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(buf, "In3Months");
  sub_1017D9380(CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeFor3Months"), (uint64_t *)buf, a1 + 3576, (uint64_t *)a1);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  sub_1017D95E0((int *)a1);
}

void sub_1017CBD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CBD60(uint64_t a1)
{
  return sub_1017CBD68(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1017CBD68(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  double v8;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  _BYTE v12[48];
  int v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;

  v10 = 0uLL;
  v11 = xmmword_101BAFC90;
  *(_DWORD *)v12 = -1;
  *(_WORD *)&v12[4] = 0;
  memset(&v12[8], 0, 40);
  result = sub_10015CB58(a1, &v10, 0);
  if ((_DWORD)result)
  {
    v3 = v11;
    if (((unint64_t)v11 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(double *)&v11 > 0.0
      && *(_QWORD *)(a1 + 2376))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v4 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        v22 = *((double *)&v10 + 1) + *((double *)&v11 + 1);
        v23 = 2048;
        v24 = v3;
        v25 = 2048;
        v26 = *((_QWORD *)&v11 + 1);
        v27 = 1024;
        v28 = *(_DWORD *)v12;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BaroAlt,callback,alt(hae),%f,altunc,%f,undulation,%f,undulationModel,%d", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v13 = 134218752;
        v14 = *((double *)&v10 + 1) + *((double *)&v11 + 1);
        v15 = 2048;
        v16 = v3;
        v17 = 2048;
        v18 = *((_QWORD *)&v11 + 1);
        v19 = 1024;
        v20 = *(_DWORD *)v12;
        LODWORD(v8) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,callback,alt(hae),%f,altunc,%f,undulation,%f,undulationModel,%d", COERCE_DOUBLE(&v13), v8, *(double *)v9, DWORD2(v9[0]));
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::triggerBaroAltitudeReport()", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      v9[2] = *(_OWORD *)v12;
      v9[3] = *(_OWORD *)&v12[16];
      v9[4] = *(_OWORD *)&v12[32];
      v9[0] = v10;
      v9[1] = v11;
      v5 = *(_QWORD *)(a1 + 2376);
      if (!v5)
        sub_10025FD1C();
      return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 48))(v5, v9);
    }
  }
  return result;
}

uint64_t sub_1017CC014(uint64_t a1)
{
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_1017CC068(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLBarometricAltimeter::onKFFilteredPressureNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onKFFilteredPressureNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onKFFilteredPressureNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1017D31E8(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1017CC218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1017CC238(uint64_t a1)
{
  sub_1017CC240(*(_QWORD *)(a1 + 32));
}

void sub_1017CC240(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 2264), "setNextFireDelay:", 1.79769313e308);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,gps timer,off", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,gps timer,off", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onActiveGpsRequestTimeout()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1017D1B48(a1);
}

void sub_1017CC3E8(_QWORD *a1)
{
  double v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _BYTE *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE buf[12];
  __int16 v73;
  _BYTE v74[18];
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  _BYTE v79[12];
  __int16 v80;
  uint64_t v81;
  char v82;
  _BYTE __p[32];
  _BYTE v84[10];
  __int16 v85;
  uint64_t v86;

  v2 = sub_1001FCBB4();
  v3 = objc_autoreleasePoolPush();
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v4 = sub_1017D1FB0((uint64_t)v3, CFSTR("CLBaroAltBaroBiasCFAbsTime"), (char **)&v69);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)v69;
    if (v70 == v69)
    {
LABEL_13:
      v10 = sub_1017D1FB0(v4, CFSTR("CLBaroAltBaroBias"), (char **)&v66);
      if (!(_DWORD)v10
        || (v11 = sub_1017D1FB0(v10, CFSTR("CLBaroAltBaroBiasUnc"), (char **)&v63), !(_DWORD)v11)
        || (sub_1017D1FB0(v11, CFSTR("CLBaroAltModeProb"), (char **)&v60) & 1) == 0)
      {
        sub_1017CF3A0(a1, 1, v2);
        goto LABEL_64;
      }
      v56 = 0;
      v12 = sub_1001FD94C();
      v13 = sub_1001FD9FC(v12, (uint64_t)CFSTR("CLBaroAltUncompensatedAlt"), &v56);
      if ((_DWORD)v13)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          sub_1001A486C(CFSTR("CLBaroAltUncompensatedAlt"), (uint64_t)__p);
          v15 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v15;
          v73 = 2050;
          *(_QWORD *)v74 = v56;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,deprecated,key and value,%{public}lf, is cleared", buf, 0x16u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          v44 = qword_1022A0028;
          sub_1001A486C(CFSTR("CLBaroAltUncompensatedAlt"), (uint64_t)buf);
          if (v74[9] >= 0)
            v45 = buf;
          else
            v45 = *(_BYTE **)buf;
          *(_DWORD *)v79 = 136446466;
          *(_QWORD *)&v79[4] = v45;
          v80 = 2050;
          v81 = v56;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v44, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,deprecated,key and value,%{public}lf, is cleared", v79, 22);
          v47 = v46;
          if ((v74[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v47);
          if (v47 != __p)
            free(v47);
        }
        v16 = sub_1001FD94C();
        v13 = sub_1005254E4(v16);
      }
      if (sub_1017D1FB0(v13, CFSTR("CLBaroAltDeviceTemperatureAtCal"), (char **)&v57)
        && sub_1017D2E94(&v69, &v66, &v63, &v60, &v57))
      {
        sub_1017D3174(a1 + 419);
        v17 = v69;
        if (v70 != v69)
        {
          v18 = 0;
          do
          {
            v19 = *((_QWORD *)v66 + v18);
            v20 = *((_QWORD *)v63 + v18);
            v21 = *((_QWORD *)v60 + v18);
            v22 = *((_QWORD *)v57 + v18);
            *(_QWORD *)__p = v17[v18];
            *(_QWORD *)&__p[8] = v19;
            *(_QWORD *)&__p[16] = v20;
            *(_QWORD *)&__p[24] = v21;
            *(_QWORD *)v84 = v22;
            sub_101743DA8(a1 + 419, (uint64_t)__p);
            ++v18;
            v17 = v69;
          }
          while (v18 < (v70 - (_BYTE *)v69) >> 3);
        }
        if (a1[424])
        {
          sub_1017D0044(a1 + 425, a1 + 419);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          v23 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v24 = a1[424];
            sub_1017443D4(a1 + 419, buf);
            v25 = v74[9] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 134349570;
            *(double *)&__p[4] = v2;
            *(_WORD *)&__p[12] = 1026;
            *(_DWORD *)&__p[14] = v24;
            *(_WORD *)&__p[18] = 2082;
            *(_QWORD *)&__p[20] = v25;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,time,%{public}lf,success,1,fBaroBiasHistory,size,%{public}d,content,%{public}s", __p, 0x1Cu);
            if ((v74[9] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v48 = qword_1022A0028;
            v49 = a1[424];
            sub_1017443D4(a1 + 419, v79);
            if (v82 >= 0)
              v50 = v79;
            else
              v50 = *(_BYTE **)v79;
            *(_DWORD *)buf = 134349570;
            *(double *)&buf[4] = v2;
            v73 = 1026;
            *(_DWORD *)v74 = v49;
            *(_WORD *)&v74[4] = 2082;
            *(_QWORD *)&v74[6] = v50;
            LODWORD(v55) = 28;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v48, 1, "BaroAlt,disk,retrieve,time,%{public}lf,success,1,fBaroBiasHistory,size,%{public}d,content,%{public}s", buf, v55);
            v52 = v51;
            if (v82 < 0)
              operator delete(*(void **)v79);
            sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v52);
            if (v52 != __p)
              free(v52);
          }
          sub_1017CFED4((uint64_t)a1);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          v26 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v27 = a1[267];
            v28 = a1[418];
            v29 = a1[265];
            v30 = a1[268];
            *(_DWORD *)__p = 134350080;
            *(double *)&__p[4] = v2;
            *(_WORD *)&__p[12] = 2050;
            *(_QWORD *)&__p[14] = v27;
            *(_WORD *)&__p[22] = 2050;
            *(_QWORD *)&__p[24] = v28;
            *(_WORD *)v84 = 2050;
            *(_QWORD *)&v84[2] = v29;
            v85 = 2050;
            v86 = v30;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,recovered,time,%{public}lf,timeOfRefPresCal,%{public}lf,timeOfLastStoreToDisk,%{public}lf,bias,%{public}lf,biasUnc,%{public}lf", __p, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v31 = a1[267];
            v32 = a1[418];
            v33 = a1[265];
            v34 = a1[268];
            *(_DWORD *)buf = 134350080;
            *(double *)&buf[4] = v2;
            v73 = 2050;
            *(_QWORD *)v74 = v31;
            *(_WORD *)&v74[8] = 2050;
            *(_QWORD *)&v74[10] = v32;
            v75 = 2050;
            v76 = v33;
            v77 = 2050;
            v78 = v34;
            LODWORD(v55) = 52;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,retrieve,recovered,time,%{public}lf,timeOfRefPresCal,%{public}lf,timeOfLastStoreToDisk,%{public}lf,bias,%{public}lf,biasUnc,%{public}lf", buf, v55);
            v36 = (char *)v35;
            sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v35);
            if (v36 != __p)
              free(v36);
          }
          goto LABEL_64;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v39 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__p = 134349056;
          *(double *)&__p[4] = v2;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,time,%{public}lf,no data stored in memory fBaroBiasHistory", __p, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v2;
          LODWORD(v55) = 12;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,retrieve,#Warning,time,%{public}lf,no data stored in memory fBaroBiasHistory", buf, v55);
          v54 = (char *)v53;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v53);
          if (v54 != __p)
            free(v54);
        }
      }
      sub_1017CF3A0(a1, 1, v2);
      goto LABEL_64;
    }
    v6 = (v70 - (_BYTE *)v69) >> 3;
    if (v6 <= 1)
      v6 = 1;
    while (1)
    {
      v7 = *v5;
      v8 = *v5 <= -1 || ((*v5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
      if (v8 && (unint64_t)(*v5 - 1) >= 0xFFFFFFFFFFFFFLL)
        break;
      ++v5;
      if (!--v6)
        goto LABEL_13;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v38 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__p = 134349312;
      *(double *)&__p[4] = v2;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,time,%{public}lf,time invalid,%{public}lf", __p, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v2;
      v73 = 2050;
      *(_QWORD *)v74 = v7;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,retrieve,#Warning,time,%{public}lf,time invalid,%{public}lf", buf, 22);
      v43 = (char *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v42);
      if (v43 != __p)
        free(v43);
    }
    sub_1017CF3A0(a1, 1, v2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v37 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__p = 134349056;
      *(double *)&__p[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,time,%{public}lf,no bias stored", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,retrieve,time,%{public}lf,no bias stored", buf, 12);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v40);
      if (v41 != __p)
        free(v41);
    }
    v70 = v69;
  }
LABEL_64:
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  objc_autoreleasePoolPop(v3);
}

void sub_1017CD030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CD0C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(_QWORD *)(a1 + 3504);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 1);
  v3 = *(_QWORD *)(a1 + 3496);
  if (v3)
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 2);
  v4 = *(_QWORD *)(a1 + 3680);
  if (v4)
  {
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 22);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3680) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 3680) + 8), 5);
  }
  v5 = *(_QWORD *)(a1 + 2240);
  if (v5)
  {
    *(_QWORD *)(a1 + 2240) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = *(_QWORD *)(a1 + 3664);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 3664) = 0;
  }
  v7 = *(void **)(a1 + 2264);
  if (v7)
  {
    objc_msgSend(v7, "invalidate");

    *(_QWORD *)(a1 + 2264) = 0;
  }
  v8 = *(void **)(a1 + 168);
  if (v8)
  {
    objc_msgSend(v8, "invalidate");

    *(_QWORD *)(a1 + 168) = 0;
  }
  sub_1017CD3A8(a1);

  *(_QWORD *)(a1 + 3472) = 0;
  *(_QWORD *)(a1 + 3464) = 0;
  if (*(_BYTE *)(a1 + 237))
    *(_BYTE *)(a1 + 237) = 0;
  if (*(_BYTE *)(a1 + 239))
    *(_BYTE *)(a1 + 239) = 0;
  if (*(_BYTE *)(a1 + 241))
    *(_BYTE *)(a1 + 241) = 0;
  if (*(_BYTE *)(a1 + 248))
    *(_BYTE *)(a1 + 248) = 0;
  if (*(_BYTE *)(a1 + 264))
    *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a1 + 269))
    *(_BYTE *)(a1 + 269) = 0;
  if (*(_BYTE *)(a1 + 271))
    *(_BYTE *)(a1 + 271) = 0;
  if (*(_BYTE *)(a1 + 256))
    *(_BYTE *)(a1 + 256) = 0;
  v9 = *(_QWORD *)(a1 + 3672);
  if (v9)
    objc_msgSend(*(id *)(v9 + 16), "unregister:forNotification:", *(_QWORD *)(v9 + 8), 4);

  sub_10047F25C((_QWORD *)(a1 + 3688));
  v10 = *(_QWORD *)(a1 + 3680);
  *(_QWORD *)(a1 + 3680) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 3672);
  *(_QWORD *)(a1 + 3672) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 3504);
  *(_QWORD *)(a1 + 3504) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 3496);
  *(_QWORD *)(a1 + 3496) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_100427A00((_QWORD *)(a1 + 3400));
  sub_100427A00((_QWORD *)(a1 + 3352));
  sub_100261F44(a1 + 3064);
  v14 = *(_QWORD **)(a1 + 2376);
  if (v14 == (_QWORD *)(a1 + 2352))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 2352);
  }
  else
  {
    if (!v14)
      goto LABEL_46;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_46:
  sub_10047F25C((_QWORD *)(a1 + 2296));
  v16 = *(_QWORD *)(a1 + 2280);
  *(_QWORD *)(a1 + 2280) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 2240);
  *(_QWORD *)(a1 + 2240) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(char *)(a1 + 2015) < 0)
    operator delete(*(void **)(a1 + 1992));
  if (*(char *)(a1 + 1951) < 0)
    operator delete(*(void **)(a1 + 1928));
  if (*(char *)(a1 + 1639) < 0)
    operator delete(*(void **)(a1 + 1616));
  sub_10047F25C((_QWORD *)(a1 + 1440));
  if (*(char *)(a1 + 1223) < 0)
    operator delete(*(void **)(a1 + 1200));
  v19 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v20)
    sub_1017DC138(a1, v20);
  return a1;
}

void sub_1017CD3A8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 3480))
  {
    if (*(_QWORD *)(a1 + 3472) && *(_QWORD *)(a1 + 3464))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v2 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,unsubscribe to leech visits", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,unsubscribe to leech visits", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopLeechingVisits()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(*(id *)(a1 + 3472), "stopLeechingVisitsForClient:", *(_QWORD *)(a1 + 3464));
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,invalid routine proxy or adapter to unsubscribe", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,invalid routine proxy or adapter to unsubscribe", v11, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopLeechingVisits()", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
    }
    *(_BYTE *)(a1 + 3480) = 0;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BaroAlt,already stopped leeching visits", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,already stopped leeching visits", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopLeechingVisits()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1017CD7CC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  char *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 3472) && *(_QWORD *)(a1 + 3464))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,register to leech visits", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v6[0] = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,register to leech visits", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startLeechingVisits()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    objc_msgSend(*(id *)(a1 + 3472), "startLeechingVisitsForClient:", *(_QWORD *)(a1 + 3464));
    *(_BYTE *)(a1 + 3480) = 1;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,invalid routine proxy or adapter to register", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v6[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,invalid routine proxy or adapter to register", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startLeechingVisits()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
}

void sub_1017CDAB4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  char *v9;
  uint8_t *v10;
  char *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BaroAlt,startPressureSubscription", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v13[0]) = 0;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,startPressureSubscription", v13, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startPressureSubscription()", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v3 = *(_QWORD *)(a1 + 2240);
  if (!v3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Reference pressure is not support", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Reference pressure is not support", v13, v12, v13[0]);
LABEL_38:
    v10 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startPressureSubscription()", "%s\n", v7);
    if (v10 != buf)
      free(v10);
    return;
  }
  if ((sub_1000B7358(v3, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)) & 1) != 0)
  {
    if (sub_1001FBB04(0) && !*(_BYTE *)(a1 + 456))
    {
      v4 = sub_1001FBB04(0);
      sub_1000A4FD8(v4, 30, *(_QWORD *)(a1 + 3664), -1.0);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v5 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BaroAlt,fMotionCoprocessorDispatcher added", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,fMotionCoprocessorDispatcher added", v13, v12);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startPressureSubscription()", "%s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
      *(_BYTE *)(a1 + 456) = 1;
    }
    *(double *)(a1 + 464) = sub_1001FCBB4();
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,start Baro,pressure not available at location", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,start Baro,pressure not available at location", v13, v12, v13[0]);
    goto LABEL_38;
  }
}

uint64_t sub_1017CDFB8(uint64_t a1, double *a2)
{
  NSObject *v3;
  double v4;
  double v5;
  char *v6;
  uint64_t v7;
  double v8;
  int v10;
  double v11;
  uint8_t buf[4];
  double v13;

  if (*a2 >= 0.0)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(double *)&qword_101CDD6E0[v7];
      if (*a2 < v8)
        break;
      if (++v7 == 34)
        return 0xFFFFFFFFLL;
    }
    return (int)v8;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a2;
      *(_DWORD *)buf = 134349056;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "BaroAlt,distanceToLastBiasComputation is negative,%{public}.2f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v5 = *a2;
      v10 = 134349056;
      v11 = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,distanceToLastBiasComputation is negative,%{public}.2f", &v10, 12);
      sub_100512490("Generic", 1, 0, 2, "int CLBarometricAltimeter::quantizeDistanceFromLastCalibrationLocationForHarvest(const double &) const", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1017CE1A4(uint64_t a1, double *a2)
{
  NSObject *v3;
  double v4;
  double v5;
  char *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  if (*a2 >= 0.0)
  {
    v7 = 0;
    v8 = 0.0;
    while (1)
    {
      v9 = *(double *)((char *)&unk_101CDD7F0 + v7 * 8 + 8);
      v10 = *(double *)&qword_101CDD830[v7];
      v11 = (int)((*a2 - v8) / v10) + 1;
      if (v11 < (int)llround((v9 - v8) / v10))
        break;
      ++v7;
      v8 = v9;
      if (v7 == 7)
        return 0xFFFFFFFFLL;
    }
    return (int)(v8 + v10 * (double)v11);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a2;
      *(_DWORD *)buf = 134349056;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "BaroAlt,timeToLastBiasComputationS is negative,%{public}.2f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v5 = *a2;
      v13 = 134349056;
      v14 = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,timeToLastBiasComputationS is negative,%{public}.2f", &v13, 12);
      sub_100512490("Generic", 1, 0, 2, "int CLBarometricAltimeter::quantizeTimeChangeFromLastCalibrationTimeForHarvest(const double &) const", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    return 0xFFFFFFFFLL;
  }
}

BOOL sub_1017CE3CC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v8;
  _BOOL8 result;
  uint64_t v10;
  double v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  id v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char *v92;
  char *v93;
  uint64_t v94;
  _BYTE v95[24];
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  _BYTE buf[12];
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  double v141;
  __int16 v142;
  double v143;
  __int16 v144;
  double v145;
  __int16 v146;
  double v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  __int16 v180;
  int v181;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,harvestCalibratedPressure", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    *(_WORD *)v95 = 0;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,harvestCalibratedPressure", v95, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v27);
    if (v27 != buf)
      free(v27);
  }
  if ((sub_1000C4240() & 1) != 0)
  {
    if (sub_1017D83B8(a1, *(double *)(a2 + 24), *(double *)(a2 + 32)))
    {
      if (a3 && !sub_1017D78BC((_QWORD *)a1))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v25 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Data is not ready for harvest", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          *(_WORD *)v95 = 0;
          LODWORD(v94) = 2;
          v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Data is not ready for harvest", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
          goto LABEL_104;
        }
      }
      else if ((sub_1017D548C(a1) & 1) != 0)
      {
        if (!sub_10011CE88(*(double *)(a2 + 24), *(double *)(a2 + 32))
          || sub_10011CE64(*(double *)(a2 + 24), *(double *)(a2 + 32))
          || *(float *)(a2 + 60) == 0.0
          || *(float *)(a2 + 8) == 0.0
          || *(float *)(a2 + 12) <= 0.0)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          v20 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v21 = *(_QWORD *)(a2 + 24);
            v22 = *(_QWORD *)(a2 + 32);
            *(_DWORD *)buf = 134283777;
            *(_QWORD *)&buf[4] = v21;
            v138 = 2049;
            v139 = v22;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Data not valid for harvest,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x16u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v23 = *(_QWORD *)(a2 + 24);
            v24 = *(_QWORD *)(a2 + 32);
            *(_DWORD *)v95 = 134283777;
            *(_QWORD *)&v95[4] = v23;
            *(_WORD *)&v95[12] = 2049;
            *(_QWORD *)&v95[14] = v24;
            LODWORD(v94) = 22;
            v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Data not valid for harvest,lat,%{private}.3lf,lon,%{private}.3lf", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
            goto LABEL_104;
          }
        }
        else if ((sub_1017D7488(a1) & 1) != 0)
        {
          result = sub_1017D7FAC(a1);
          if (!result)
            return result;
          if (a4 && !sub_1017D7AEC(a1))
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v67 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,harvest reached permitted limit or time limit", buf, 2u);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              *(_WORD *)v95 = 0;
              LODWORD(v94) = 2;
              v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,harvest reached permitted limit or time limit", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
              goto LABEL_104;
            }
          }
          else
          {
            sub_1017D81E8((uint64_t *)a1, (int *)(a2 + 76));
            v10 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              *(_QWORD *)buf = sub_1001FCBB4();
              v11 = sub_1000B6F08(v10, (double *)buf);
            }
            else
            {
              v11 = 0.0;
            }
            *(double *)(a2 + 16) = v11;
            sub_1017D8D8C((uint64_t *)a1, a2);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v28 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
            {
              v30 = *(_QWORD *)(a2 + 24);
              v29 = *(_QWORD *)(a2 + 32);
              v31 = *(float *)a2;
              v32 = *(float *)(a2 + 4);
              v33 = *(float *)(a2 + 8);
              v34 = *(float *)(a2 + 12);
              v35 = *(_QWORD *)(a2 + 16);
              v36 = *(float *)(a2 + 40);
              v37 = *(float *)(a2 + 44);
              v38 = *(float *)(a2 + 48);
              v39 = *(float *)(a2 + 52);
              v40 = *(float *)(a2 + 56);
              v41 = *(float *)(a2 + 60);
              v42 = *(float *)(a2 + 64);
              v43 = *(_DWORD *)(a2 + 68);
              v44 = *(_DWORD *)(a2 + 72);
              v45 = *(unsigned __int8 *)(a2 + 88);
              v46 = *(unsigned __int8 *)(a2 + 90);
              v47 = *(unsigned __int8 *)(a2 + 89);
              v48 = *(_DWORD *)(a1 + 232);
              v49 = *(_DWORD *)(a2 + 76);
              v50 = *(_DWORD *)(a2 + 80);
              v51 = *(_DWORD *)(a2 + 84);
              *(_DWORD *)buf = 134289153;
              *(_QWORD *)&buf[4] = v30;
              v138 = 2049;
              v139 = v29;
              v140 = 2049;
              v141 = v31;
              v142 = 2049;
              v143 = v32;
              v144 = 2049;
              v145 = v33;
              v146 = 2049;
              v147 = v34;
              v148 = 2049;
              v149 = v35;
              v150 = 2049;
              v151 = v36;
              v152 = 2049;
              v153 = v37;
              v154 = 2049;
              v155 = v38;
              v156 = 2049;
              v157 = v39;
              v158 = 2049;
              v159 = v40;
              v160 = 2049;
              v161 = v41;
              v162 = 2049;
              v163 = v42;
              v164 = 1025;
              v165 = v43;
              v166 = 1025;
              v167 = v44;
              v168 = 1025;
              v169 = v49;
              v170 = 1025;
              v171 = v45;
              v172 = 1025;
              v173 = v46;
              v174 = 1025;
              v175 = v47;
              v176 = 1024;
              v177 = v48;
              v178 = 1025;
              v179 = v50;
              v180 = 1025;
              v181 = v51;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "BaroAlt,Harvesting,lat,%{private}.8f,lon,%{private}.8f,pressurePa,%{private}.1f,pressureUnc,%{private}.1f,calPress,%{private}.1f,calPressUnc,%{private}.1f,timeOfCalb,%{private}.1f,horUnc,%{private}.1f,AltHae,%{private}.1f,AltHaeUn,%{private}.1f,speed,%{private}.1f,speedUnc,%{private}.1f,RefAlt,%{private}.1f,RefAltUnc,%{private}.1f,activityType,%{private}d,actConf,%{private}d,rel,%{private}d,CalBaro,%{private}d,CalOutdorr,%{private}d,mapM,%{private}d,harvestCount,%u,distChangeM,%{private}d,timeChangeSec,%{private}d", buf, 0xC4u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v70 = *(_QWORD *)(a2 + 24);
              v69 = *(_QWORD *)(a2 + 32);
              v71 = *(float *)a2;
              v72 = *(float *)(a2 + 4);
              v73 = *(float *)(a2 + 8);
              v74 = *(float *)(a2 + 12);
              v75 = *(_QWORD *)(a2 + 16);
              v76 = *(float *)(a2 + 40);
              v77 = *(float *)(a2 + 44);
              v78 = *(float *)(a2 + 48);
              v79 = *(float *)(a2 + 52);
              v80 = *(float *)(a2 + 56);
              v81 = *(float *)(a2 + 60);
              v82 = *(float *)(a2 + 64);
              v83 = *(_DWORD *)(a2 + 68);
              v84 = *(_DWORD *)(a2 + 72);
              v85 = *(unsigned __int8 *)(a2 + 88);
              v86 = *(unsigned __int8 *)(a2 + 90);
              v87 = *(unsigned __int8 *)(a2 + 89);
              v88 = *(_DWORD *)(a1 + 232);
              v90 = *(_DWORD *)(a2 + 76);
              v89 = *(_DWORD *)(a2 + 80);
              v91 = *(_DWORD *)(a2 + 84);
              *(_DWORD *)v95 = 134289153;
              *(_QWORD *)&v95[4] = v70;
              *(_WORD *)&v95[12] = 2049;
              *(_QWORD *)&v95[14] = v69;
              *(_WORD *)&v95[22] = 2049;
              v96 = v71;
              v97 = 2049;
              v98 = v72;
              v99 = 2049;
              v100 = v73;
              v101 = 2049;
              v102 = v74;
              v103 = 2049;
              v104 = v75;
              v105 = 2049;
              v106 = v76;
              v107 = 2049;
              v108 = v77;
              v109 = 2049;
              v110 = v78;
              v111 = 2049;
              v112 = v79;
              v113 = 2049;
              v114 = v80;
              v115 = 2049;
              v116 = v81;
              v117 = 2049;
              v118 = v82;
              v119 = 1025;
              v120 = v83;
              v121 = 1025;
              v122 = v84;
              v123 = 1025;
              v124 = v90;
              v125 = 1025;
              v126 = v85;
              v127 = 1025;
              v128 = v86;
              v129 = 1025;
              v130 = v87;
              v131 = 1024;
              v132 = v88;
              v133 = 1025;
              v134 = v89;
              v135 = 1025;
              v136 = v91;
              LODWORD(v94) = 196;
              v92 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,Harvesting,lat,%{private}.8f,lon,%{private}.8f,pressurePa,%{private}.1f,pressureUnc,%{private}.1f,calPress,%{private}.1f,calPressUnc,%{private}.1f,timeOfCalb,%{private}.1f,horUnc,%{private}.1f,AltHae,%{private}.1f,AltHaeUn,%{private}.1f,speed,%{private}.1f,speedUnc,%{private}.1f,RefAlt,%{private}.1f,RefAltUnc,%{private}.1f,activityType,%{private}d,actConf,%{private}d,rel,%{private}d,CalBaro,%{private}d,CalOutdorr,%{private}d,mapM,%{private}d,harvestCount,%u,distChangeM,%{private}d,timeChangeSec,%{private}d", v95, v94);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v92);
              if (v92 != buf)
                free(v92);
            }
            v52 = objc_alloc_init((Class)CLPCalibratedPressureCollectionRequest);
            if (v52)
            {
              v53 = v52;
              objc_msgSend(objc_msgSend(v52, "activity"), "setType:", *(unsigned int *)(a2 + 68));
              objc_msgSend(objc_msgSend(v53, "activity"), "setConfidence:", *(unsigned int *)(a2 + 72));
              LODWORD(v54) = *(_DWORD *)(a2 + 48);
              objc_msgSend(v53, "setAltitudeHAEUncM:", v54);
              LODWORD(v55) = *(_DWORD *)(a2 + 44);
              objc_msgSend(v53, "setAltitudeHAEM:", v55);
              LODWORD(v56) = *(_DWORD *)(a2 + 8);
              objc_msgSend(v53, "setCalibratedPressurePa:", v56);
              LODWORD(v57) = *(_DWORD *)(a2 + 12);
              objc_msgSend(v53, "setCalibratedPressureUncPa:", v57);
              LODWORD(v58) = *(_DWORD *)a2;
              objc_msgSend(v53, "setDevicePressurePa:", v58);
              LODWORD(v59) = *(_DWORD *)(a2 + 4);
              objc_msgSend(v53, "setDevicePressureUncPa:", v59);
              objc_msgSend(objc_msgSend(v53, "calibration"), "setIsCalibratedBarometricAlt:", *(unsigned __int8 *)(a2 + 88));
              objc_msgSend(objc_msgSend(v53, "calibration"), "setIsMapMatched:", *(unsigned __int8 *)(a2 + 89));
              objc_msgSend(objc_msgSend(v53, "calibration"), "setIsOutdoorContext:", *(unsigned __int8 *)(a2 + 90));
              LODWORD(v60) = *(_DWORD *)(a2 + 40);
              objc_msgSend(v53, "setHorizontalUncM:", v60);
              objc_msgSend(v53, "setLatitudeDeg:", *(double *)(a2 + 24));
              objc_msgSend(v53, "setLongitudeDeg:", *(double *)(a2 + 32));
              LODWORD(v61) = *(_DWORD *)(a2 + 60);
              objc_msgSend(v53, "setReferenceAltM:", v61);
              LODWORD(v62) = *(_DWORD *)(a2 + 64);
              objc_msgSend(v53, "setReferenceAltUncM:", v62);
              objc_msgSend(v53, "setReliability:", *(unsigned int *)(a2 + 76));
              LODWORD(v63) = *(_DWORD *)(a2 + 52);
              objc_msgSend(v53, "setSpeedMps:", v63);
              LODWORD(v64) = *(_DWORD *)(a2 + 56);
              objc_msgSend(v53, "setSpeedUncMps:", v64);
              objc_msgSend(v53, "setTimestampOfCalibrationS:", *(double *)(a2 + 16));
              objc_msgSend(v53, "setQuantizedDistChangeSinceLastCalibrationM:", *(unsigned int *)(a2 + 80));
              objc_msgSend(v53, "setQuantizedTimeChangeSinceLastCalibrationS:", *(unsigned int *)(a2 + 84));
              +[GEOLocationCollectionReporter reportCalibratedPressureCollection:](GEOLocationCollectionReporter, "reportCalibratedPressureCollection:", v53);

              ++*(_DWORD *)(a1 + 232);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v65 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "BaroAlt,Harvest data sent", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021CF648);
                *(_WORD *)v95 = 0;
                LODWORD(v94) = 2;
                v93 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,Harvest data sent", v95, v94);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v93);
                if (v93 != buf)
                  free(v93);
              }
              return 1;
            }
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v66 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "BaroAlt,Invalid data pointer can't harvest", buf, 2u);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              *(_WORD *)v95 = 0;
              LODWORD(v94) = 2;
              v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,Invalid data pointer can't harvest", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
LABEL_104:
              v68 = (char *)v13;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v13);
              if (v68 != buf)
                free(v68);
              return 0;
            }
          }
        }
        else
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          v26 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,client not authorized", buf, 2u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            *(_WORD *)v95 = 0;
            LODWORD(v94) = 2;
            v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,client not authorized", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
            goto LABEL_104;
          }
        }
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v19 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Pressure Harvest is not supported", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          *(_WORD *)v95 = 0;
          LODWORD(v94) = 2;
          v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Pressure Harvest is not supported", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
          goto LABEL_104;
        }
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v14 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a2 + 24);
        v16 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)buf = 134283777;
        *(_QWORD *)&buf[4] = v15;
        v138 = 2049;
        v139 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Data harvest is not allowed at location,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v17 = *(_QWORD *)(a2 + 24);
        v18 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)v95 = 134283777;
        *(_QWORD *)&v95[4] = v17;
        *(_WORD *)&v95[12] = 2049;
        *(_QWORD *)&v95[14] = v18;
        LODWORD(v94) = 22;
        v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Data harvest is not allowed at location,lat,%{private}.3lf,lon,%{private}.3lf", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
        goto LABEL_104;
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,ref pressure harvest is not allowed on this HW", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      *(_WORD *)v95 = 0;
      LODWORD(v94) = 2;
      v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,ref pressure harvest is not allowed on this HW", v95, v94, *(_OWORD *)v95, *(_QWORD *)&v95[16]);
      goto LABEL_104;
    }
  }
  return result;
}

uint64_t sub_1017CF3A0(_QWORD *a1, int a2, double a3)
{
  NSObject *v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  int v19;
  double v20;
  uint8_t buf[4];
  double v22;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,disk,store,#Warning,time,%{public}lf,resetting", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v19 = 134349056;
    v20 = a3;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,store,#Warning,time,%{public}lf,resetting", &v19, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::resetBaroBiasHistory(const CFTimeInterval, const BOOL)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  if (a2)
  {
    v7 = (void **)a1[420];
    v8 = a1[421];
    a1[424] = 0;
    v9 = v8 - (_QWORD)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v7 = (void **)(a1[420] + 8);
        a1[420] = v7;
        v9 = a1[421] - (_QWORD)v7;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      v10 = 51;
      goto LABEL_13;
    }
    if (v9 >> 3 == 2)
    {
      v10 = 102;
LABEL_13:
      a1[423] = v10;
    }
  }
  v11 = sub_1001FD94C();
  sub_1005254E4(v11);
  v12 = sub_1001FD94C();
  sub_1005254E4(v12);
  v13 = sub_1001FD94C();
  sub_1005254E4(v13);
  v14 = sub_1001FD94C();
  sub_1005254E4(v14);
  v15 = sub_1001FD94C();
  sub_1005254E4(v15);
  v16 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 944))(v16);
}

void sub_1017CF634(double a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  NSArray *v73;
  NSArray *v74;
  NSArray *v75;
  NSArray *v76;
  NSArray *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char *v86;
  char *v87;
  void *v88;
  char *v89;
  char *v90;
  void *v91;
  char *v92;
  char *v93;
  void *v94;
  char *v95;
  char *v96;
  void *__p;
  char *v98;
  char *v99;
  int v100;
  double v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint8_t buf[4];
  double v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;

  v5 = a3[5];
  __p = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  sub_100407BF8(&__p, (int)v5);
  sub_100407BF8(&v94, (int)v5);
  sub_100407BF8(&v91, (int)v5);
  sub_100407BF8(&v88, (int)v5);
  sub_100407BF8(&v85, (int)v5);
  v6 = a3[1];
  if (a3[2] != v6)
  {
    v7 = a3[4];
    v8 = (_QWORD *)(*(_QWORD *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66));
    v9 = *(_QWORD *)(v6 + 8 * ((a3[5] + v7) / 0x66)) + 40 * ((a3[5] + v7) % 0x66);
    if (v8 != (_QWORD *)v9)
    {
      v10 = 0;
      v11 = (_QWORD *)(v6 + 8 * (v7 / 0x66));
      do
      {
        v12 = v98;
        if (v98 >= v99)
        {
          v14 = (char *)__p;
          v15 = (v98 - (_BYTE *)__p) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            goto LABEL_108;
          v17 = v99 - (_BYTE *)__p;
          if ((v99 - (_BYTE *)__p) >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_10025E6A0((uint64_t)&v99, v18);
            v14 = (char *)__p;
            v12 = v98;
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[8 * v15];
          *(_QWORD *)v20 = *v8;
          v13 = v20 + 8;
          while (v12 != v14)
          {
            v21 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *((_QWORD *)v20 - 1) = v21;
            v20 -= 8;
          }
          __p = v20;
          v98 = v13;
          v99 = &v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v98 = *v8;
          v13 = v12 + 8;
        }
        v98 = v13;
        v22 = v95;
        if (v95 >= v96)
        {
          v24 = (char *)v94;
          v25 = (v95 - (_BYTE *)v94) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            goto LABEL_108;
          v27 = v96 - (_BYTE *)v94;
          if ((v96 - (_BYTE *)v94) >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)sub_10025E6A0((uint64_t)&v96, v28);
            v24 = (char *)v94;
            v22 = v95;
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * v25];
          *(_QWORD *)v30 = v8[1];
          v23 = v30 + 8;
          while (v22 != v24)
          {
            v31 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          v94 = v30;
          v95 = v23;
          v96 = &v29[8 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_QWORD *)v95 = v8[1];
          v23 = v22 + 8;
        }
        v95 = v23;
        v32 = v92;
        if (v92 >= v93)
        {
          v34 = (char *)v91;
          v35 = (v92 - (_BYTE *)v91) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            goto LABEL_108;
          v37 = v93 - (_BYTE *)v91;
          if ((v93 - (_BYTE *)v91) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_10025E6A0((uint64_t)&v93, v38);
            v34 = (char *)v91;
            v32 = v92;
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = v8[2];
          v33 = v40 + 8;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          v91 = v40;
          v92 = v33;
          v93 = &v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v92 = v8[2];
          v33 = v32 + 8;
        }
        v92 = v33;
        v42 = v89;
        if (v89 >= v90)
        {
          v44 = (char *)v88;
          v45 = (v89 - (_BYTE *)v88) >> 3;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61)
            goto LABEL_108;
          v47 = v90 - (_BYTE *)v88;
          if ((v90 - (_BYTE *)v88) >> 2 > v46)
            v46 = v47 >> 2;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            v49 = (char *)sub_10025E6A0((uint64_t)&v90, v48);
            v44 = (char *)v88;
            v42 = v89;
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[8 * v45];
          *(_QWORD *)v50 = v8[3];
          v43 = v50 + 8;
          while (v42 != v44)
          {
            v51 = *((_QWORD *)v42 - 1);
            v42 -= 8;
            *((_QWORD *)v50 - 1) = v51;
            v50 -= 8;
          }
          v88 = v50;
          v89 = v43;
          v90 = &v49[8 * v48];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(_QWORD *)v89 = v8[3];
          v43 = v42 + 8;
        }
        v89 = v43;
        v52 = v86;
        if (v86 >= v87)
        {
          v54 = (char *)v85;
          v55 = (v86 - (_BYTE *)v85) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
LABEL_108:
            sub_100259694();
          v57 = v87 - (_BYTE *)v85;
          if ((v87 - (_BYTE *)v85) >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)sub_10025E6A0((uint64_t)&v87, v58);
            v54 = (char *)v85;
            v52 = v86;
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[8 * v55];
          *(_QWORD *)v60 = v8[4];
          v53 = v60 + 8;
          while (v52 != v54)
          {
            v61 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v60 - 1) = v61;
            v60 -= 8;
          }
          v85 = v60;
          v86 = v53;
          v87 = &v59[8 * v58];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_QWORD *)v86 = v8[4];
          v53 = v52 + 8;
        }
        v86 = v53;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v62 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v63 = v8[1];
          v64 = v8[2];
          v65 = v8[3];
          v66 = v8[4];
          *(_DWORD *)buf = 134350592;
          v115 = a1;
          v116 = 1026;
          v117 = v10;
          v118 = 1026;
          v119 = v5;
          v120 = 2050;
          v121 = v63;
          v122 = 2050;
          v123 = v64;
          v124 = 2050;
          v125 = v65;
          v126 = 2050;
          v127 = v66;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "BaroAlt,disk,store,fBaroBiasHistory,time,%{public}.3lf,index,%{public}d,size,%{public}d,bias_pa,%{public}.3lf,biasUnc_m,%{public}.3lf,modeProb,%{public}.3lf,deviceBaroTempAtCalib_C,%{public}.2lf", buf, 0x40u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          v68 = v8[1];
          v69 = v8[2];
          v70 = v8[3];
          v71 = v8[4];
          v100 = 134350592;
          v101 = a1;
          v102 = 1026;
          v103 = v10;
          v104 = 1026;
          v105 = v5;
          v106 = 2050;
          v107 = v68;
          v108 = 2050;
          v109 = v69;
          v110 = 2050;
          v111 = v70;
          v112 = 2050;
          v113 = v71;
          LODWORD(v84) = 64;
          v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,store,fBaroBiasHistory,time,%{public}.3lf,index,%{public}d,size,%{public}d,bias_pa,%{public}.3lf,biasUnc_m,%{public}.3lf,modeProb,%{public}.3lf,deviceBaroTempAtCalib_C,%{public}.2lf", &v100, v84);
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::saveBaroBiasHistoryToDisk(const CFTimeInterval, const std::deque<BaroBiasEstimate> &)", "%s\n", v72);
          if (v72 != (char *)buf)
            free(v72);
        }
        v8 += 5;
        if ((_QWORD *)((char *)v8 - *v11) == (_QWORD *)4080)
        {
          v67 = (_QWORD *)v11[1];
          ++v11;
          v8 = v67;
        }
        ++v10;
      }
      while (v8 != (_QWORD *)v9);
    }
  }
  v73 = objc_opt_new(NSArray);
  sub_1017D39A0((double **)&__p);
  v74 = objc_opt_new(NSArray);
  sub_1017D39A0((double **)&v94);
  v75 = objc_opt_new(NSArray);
  sub_1017D39A0((double **)&v91);
  v76 = objc_opt_new(NSArray);
  sub_1017D39A0((double **)&v88);
  v77 = objc_opt_new(NSArray);
  sub_1017D39A0((double **)&v85);
  v78 = sub_1001FD94C();
  sub_10023EC14(v78);
  v79 = sub_1001FD94C();
  sub_10023EC14(v79);
  v80 = sub_1001FD94C();
  sub_10023EC14(v80);
  v81 = sub_1001FD94C();
  sub_10023EC14(v81);
  v82 = sub_1001FD94C();
  sub_10023EC14(v82);
  v83 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 944))(v83);
  if (v85)
  {
    v86 = (char *)v85;
    operator delete(v85);
  }
  if (v88)
  {
    v89 = (char *)v88;
    operator delete(v88);
  }
  if (v91)
  {
    v92 = (char *)v91;
    operator delete(v91);
  }
  if (v94)
  {
    v95 = (char *)v94;
    operator delete(v94);
  }
  if (__p)
  {
    v98 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1017CFE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

__n128 sub_1017CFED4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  __n128 result;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  double v17;
  double v18;

  v17 = 0.0;
  v18 = 0.0;
  v2 = *(_QWORD *)(a1 + 3360);
  if (*(_QWORD *)(a1 + 3368) == v2
    || (v3 = *(_QWORD *)(a1 + 3384),
        v4 = v3 / 0x66,
        v5 = *(_QWORD *)(v2 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66),
        v6 = *(_QWORD *)(v2 + 8 * ((*(_QWORD *)(a1 + 3392) + v3) / 0x66)) + 40 * ((*(_QWORD *)(a1 + 3392) + v3) % 0x66),
        v5 == v6))
  {
    result.n128_u64[0] = *(_QWORD *)(a1 + 3344);
  }
  else
  {
    v7 = (_QWORD *)(v2 + 8 * v4);
    result.n128_u64[0] = *(_QWORD *)(a1 + 3344);
    v9 = 0.0;
    do
    {
      v10 = *(double *)(v5 + 24);
      if (v10 > v9)
      {
        *(_QWORD *)(a1 + 2120) = *(_QWORD *)(v5 + 8);
        v11 = *(double *)(v5 + 16);
        if (v11 < 2.5)
          v11 = 2.5;
        *(double *)(a1 + 2144) = v11;
        v12 = *(double *)v5;
        v17 = v10;
        v18 = v12;
        *(_QWORD *)(a1 + 2128) = *(_QWORD *)(v5 + 32);
        v9 = v10;
      }
      v13 = *(_QWORD *)v5;
      if (result.n128_f64[0] < *(double *)v5)
      {
        *(_QWORD *)(a1 + 3344) = v13;
        result.n128_u64[0] = v13;
      }
      v5 += 40;
      if (v5 - *v7 == 4080)
      {
        v14 = v7[1];
        ++v7;
        v5 = v14;
      }
    }
    while (v5 != v6);
  }
  *(_QWORD *)(a1 + 2136) = result.n128_u64[0];
  v15 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && result.n128_f64[0] > 0.0)
  {
    result.n128_u64[0] = *(_QWORD *)(a1 + 2144);
    if (result.n128_f64[0] > 0.0)
    {
      sub_10174A88C(v15, a1 + 1576, (uint64_t *)(a1 + 2024), (uint64_t *)(a1 + 2136), (uint64_t *)(a1 + 2120), (_QWORD *)(a1 + 2128), (uint64_t *)(a1 + 2144), (uint64_t *)&v18, (uint64_t *)&v17);
      v16 = *(_OWORD *)(a1 + 2040);
      *(_OWORD *)(a1 + 2072) = *(_OWORD *)(a1 + 2024);
      *(_OWORD *)(a1 + 2088) = v16;
      result = *(__n128 *)(a1 + 2056);
      *(__n128 *)(a1 + 2104) = result;
    }
  }
  return result;
}

_QWORD *sub_1017D0044(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _QWORD *v7;
  _BYTE *v8;

  if (a1 != a2)
  {
    v3 = a2[4];
    v4 = a2[1];
    if (a2[2] == v4)
    {
      v5 = 0;
      v8 = 0;
      v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0x66));
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(v4 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66));
      v6 = a2[5] + v3;
      v7 = (_QWORD *)(v4 + 8 * (v6 / 0x66));
      v8 = (_BYTE *)(*v7 + 40 * (v6 % 0x66));
    }
    sub_1017DC1B0(a1, (_QWORD *)(v4 + 8 * (v3 / 0x66)), v5, v7, v8);
  }
  return a1;
}

void sub_1017D00F8(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  int v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;

  if (*(_QWORD *)(a1 + 2240))
  {
    v4 = sub_1001FCBB4();
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    v5 = *(_QWORD *)(a1 + 2240);
    v6 = *(double *)(a2 + 4);
    v7 = *(double *)(a2 + 12);
    v40[0] = off_1021CF698;
    v40[1] = a1;
    v41 = v40;
    v8 = sub_101680EA0(v5, (uint64_t)&v22, (uint64_t)v40, v6, v7);
    v9 = v41;
    if (v41 == v40)
    {
      v10 = 4;
      v9 = v40;
    }
    else
    {
      if (!v41)
      {
LABEL_15:
        switch(v8)
        {
          case 0:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v13 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v43 = v4;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,PressureDataManager pressure available,time,%{public}lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v26 = 134349056;
              v27 = v4;
              v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,PressureDataManager pressure available,time,%{public}lf", &v26, 12);
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v20);
              if (v20 != (char *)buf)
                free(v20);
            }
            sub_1017D3A08(a1, (float32x2_t *)&v22);
            break;
          case 1:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v14 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v43 = v4;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager pressure Unavailable,time,%{public}lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v26 = 134349056;
              v27 = v4;
              v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,PressureDataManager pressure Unavailable,time,%{public}lf", &v26, 12);
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v15);
              goto LABEL_69;
            }
            break;
          case 2:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v16 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v43 = v4;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager pressure tile not valid,time,%{public}lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v26 = 134349056;
              v27 = v4;
              v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,PressureDataManager pressure tile not valid,time,%{public}lf", &v26, 12);
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v15);
              goto LABEL_69;
            }
            break;
          case 3:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v17 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v43 = v4;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager pressure Downloading,time,%{public}lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v26 = 134349056;
              v27 = v4;
              v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,PressureDataManager pressure Downloading,time,%{public}lf", &v26, 12);
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v15);
              goto LABEL_69;
            }
            break;
          case 4:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v18 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v43 = v4;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager AVL file not found,time,%{public}lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              v26 = 134349056;
              v27 = v4;
              v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,PressureDataManager AVL file not found,time,%{public}lf", &v26, 12);
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v15);
LABEL_69:
              if (v15 != (char *)buf)
                free(v15);
            }
            break;
          default:
            break;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v19 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134350593;
          v43 = v4;
          v44 = 2049;
          v45 = *((float *)&v23 + 2);
          v46 = 2049;
          v47 = *((float *)&v23 + 3);
          v48 = 1024;
          v49 = v25;
          v50 = 2049;
          v51 = *((float *)&v24 + 3);
          v52 = 2049;
          v53 = *((float *)&v24 + 2);
          v54 = 2049;
          v55 = *((_QWORD *)&v22 + 1);
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "BaroAlt,QueryReferencePressure for given tile,time,%{public}lf, pressure_pa,%{private}.7lf,pressureUnc,%{private}.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf,dataDownloadTime,%{private}.7lf", buf, 0x44u);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v26 = 134350593;
        v27 = v4;
        v28 = 2049;
        v29 = *((float *)&v23 + 2);
        v30 = 2049;
        v31 = *((float *)&v23 + 3);
        v32 = 1024;
        v33 = v25;
        v34 = 2049;
        v35 = *((float *)&v24 + 3);
        v36 = 2049;
        v37 = *((float *)&v24 + 2);
        v38 = 2049;
        v39 = *((_QWORD *)&v22 + 1);
        LODWORD(v21) = 68;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,QueryReferencePressure for given tile,time,%{public}lf, pressure_pa,%{private}.7lf,pressureUnc,%{private}.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf,dataDownloadTime,%{private}.7lf", &v26, v21);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v12);
LABEL_60:
        if (v12 != (char *)buf)
          free(v12);
        return;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_15;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning,BaroAlt,PressureData is not enabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v26) = 0;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#Warning,BaroAlt,PressureData is not enabled", &v26, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v12);
    goto LABEL_60;
  }
}

void sub_1017D0B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  char *v34;
  uint64_t v35;

  v34 = a32;
  if (a32 == v32)
  {
    v35 = 4;
    v34 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1017D0B9C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v6 = *(double *)(a1 + 2208);
  if (fabs(v6) <= 2.22044605e-16)
    goto LABEL_4;
  *(double *)(a1 + 2160) = a4 - (*(double *)(a1 + 2216) + *(double *)(a1 + 1240));
  v7 = a3 - v6;
  *(double *)(a1 + 2168) = v7;
  v8 = v7 * 0.000555555556 * (v7 * 0.000555555556) + *(double *)(a1 + 2224) * *(double *)(a1 + 2224) + 0.25;
  if (v8 > 0.0)
  {
    *(double *)(a1 + 2176) = sqrt(v8);
    *(double *)(a1 + 2184) = fabs(sub_100124100(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 2192), *(double *)(a1 + 2200)));
    *(_BYTE *)(a1 + 2232) = 1;
LABEL_4:
    *(_OWORD *)(a1 + 2192) = *(_OWORD *)(a2 + 4);
    v9 = *(_QWORD *)(a1 + 480);
    *(_QWORD *)(a1 + 2216) = *(_QWORD *)(a1 + 472);
    *(_QWORD *)(a1 + 2224) = v9;
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BaroAlt DriftRate,#Warning,calibratedAltitudeVarianceUsingLastCalibrationEventMSquare unexpectedly negative", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12[0] = 0;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt DriftRate,#Warning,calibratedAltitudeVarianceUsingLastCalibrationEventMSquare unexpectedly negative", v12, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::recordAWDMetrics(const CFTimeInterval, const double, const CLDaemonLocation &)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
}

void sub_1017D0DCC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 2168);
    *(_DWORD *)buf = 134349056;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,BarometricAltitudeCalibrationAnalyticsData,durationSinceLastCalibrationEventSec,%{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v4 = *(_QWORD *)(a1 + 2168);
    v6 = 134349056;
    v7 = v4;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,BarometricAltitudeCalibrationAnalyticsData,durationSinceLastCalibrationEventSec,%{public}.3lf", &v6, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::recordCalibrationAnalyticsData()", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if (fabs(*(double *)(a1 + 2168)) > *(double *)(a1 + 3648))
    sub_1017D9724((unsigned int *)a1);
}

void sub_1017D0F98(uint64_t a1, _DWORD *a2)
{
  int v4;
  NSObject *v5;
  std::string *v6;
  int v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  std::string *p_buf;
  int v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  std::string *v18;
  const char *v19;
  std::string *v20;
  uint64_t v21;
  std::string buf;
  int v23;
  std::string *v24;
  __int16 v25;
  int v26;
  std::string __p[68];

  v4 = *(unsigned __int8 *)(a1 + 2156);
  *(_BYTE *)(a1 + 2156) = sub_100CD597C((uint64_t)a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    sub_100CD5278(a2, __p);
    v6 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v7 = *(unsigned __int8 *)(a1 + 2156);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,emergency state changed,%s,isEmergency,%d", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12 = qword_1022A0028;
    sub_100CD5278(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v14 = *(unsigned __int8 *)(a1 + 2156);
    v23 = 136315394;
    v24 = p_buf;
    v25 = 1024;
    v26 = v14;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 1, "BaroAlt,emergency state changed,%s,isEmergency,%d", (const char *)&v23, 18);
    v16 = v15;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateEmergencyState(CLEmergencyState)", "%s\n", (const char *)v16);
    if (v16 != __p)
      free(v16);
  }
  if (*(_BYTE *)(a1 + 2156))
  {
    sub_1017CDAB4(a1);
    v8 = 236;
    if (!*(_BYTE *)(a1 + 237))
      v8 = 360;
    if (*(_BYTE *)(a1 + v8))
    {
      if (*(_QWORD *)a1)
      {
        if (*(double *)(a1 + 2460) > 0.0 && *(double *)(a1 + 2888) > 0.0)
        {
          v9 = sub_1001FCBB4();
          if (sub_1000B7150(v9, *(double *)(a1 + 2888), 315360000.0) < 90.0)
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021CF648);
            v10 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,query ref pressure entering a e911 call", (uint8_t *)__p, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021CF648);
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              LODWORD(v21) = 2;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,query ref pressure entering a e911 call", &buf, v21);
              v20 = (std::string *)v19;
              sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateEmergencyState(CLEmergencyState)", "%s\n", v19);
              if (v20 != __p)
                free(v20);
            }
            sub_1017D00F8(a1, a1 + 2384);
          }
        }
      }
    }
  }
  if (v4)
  {
    if (!*(_BYTE *)(a1 + 2156))
    {
      objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:", 1.79769313e308);
      *(double *)(a1 + 3616) = sub_1001FCBB4();
    }
  }
  else if (*(_BYTE *)(a1 + 2156))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = 0x3FF0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt, initializing periodic timer, report baro fixes every %f seconds", (uint8_t *)__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0x3FF0000000000000;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt, initializing periodic timer, report baro fixes every %f seconds", COERCE_DOUBLE(&buf));
      v18 = (std::string *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateEmergencyState(CLEmergencyState)", "%s\n", v17);
      if (v18 != __p)
        free(v18);
    }
    objc_msgSend(*(id *)(a1 + 168), "setNextFireDelay:interval:", 1.0, 1.0);
  }
}

_QWORD *sub_1017D1514(uint64_t a1, uint64_t a2)
{
  return sub_1017D151C((_QWORD *)(a1 + 2352), a2);
}

_QWORD *sub_1017D151C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1017DCBE8(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1017D15B4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BaroAlt,stopPressureSubscription", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,stopPressureSubscription", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopPressureSubscription()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_BYTE *)(a1 + 456) && sub_1001FBB04(0))
  {
    v3 = sub_1001FBB04(0);
    sub_1000A4A6C(v3, 30, *(_QWORD *)(a1 + 3664));
    *(_BYTE *)(a1 + 456) = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BaroAlt,fMotionCoprocessorDispatcher removed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v10[0] = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,fMotionCoprocessorDispatcher removed", v10, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopPressureSubscription()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1017D1898(uint64_t a1)
{
  void **v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  _OWORD *v13;
  int v14;
  void *v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[8];
  _OWORD v24[3];
  void *__p[2];
  _OWORD v26[3];
  __int128 v27;
  __int128 v28;

  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v26, 0, sizeof(v26));
  memset(v24, 0, sizeof(v24));
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  sub_1015A2E04(&v15[1], "");
  LOBYTE(v19) = 0;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  *((_QWORD *)&v19 + 1) = 0;
  *(_QWORD *)&v20 = 0;
  *((_QWORD *)&v20 + 1) = 0xBFF0000000000000;
  v24[2] = 0uLL;
  v21 = 0u;
  v22 = 0u;
  LODWORD(v23[0]) = 0;
  memset((char *)v23 + 8, 0, 114);
  memset(v24, 0, 28);
  sub_1015A2E04(__p, "");
  memset((char *)v26 + 8, 0, 20);
  v26[2] = 0uLL;
  sub_1015A2E04(&v27, "");
  BYTE8(v28) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void **)(a1 + 32) = v15[0];
  v2 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v15[1];
  *(void **)(a1 + 56) = v15[3];
  HIBYTE(v15[3]) = 0;
  LOBYTE(v15[1]) = 0;
  v3 = v23[6];
  *(_OWORD *)(a1 + 256) = v23[5];
  *(_OWORD *)(a1 + 272) = v3;
  *(_OWORD *)(a1 + 288) = v23[7];
  *(_QWORD *)(a1 + 304) = *(_QWORD *)&v24[0];
  v4 = v23[2];
  *(_OWORD *)(a1 + 192) = v23[1];
  *(_OWORD *)(a1 + 208) = v4;
  v5 = v23[4];
  *(_OWORD *)(a1 + 224) = v23[3];
  *(_OWORD *)(a1 + 240) = v5;
  v6 = v21;
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = v6;
  v7 = v23[0];
  *(_OWORD *)(a1 + 160) = v22;
  *(_OWORD *)(a1 + 176) = v7;
  v8 = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v8;
  v9 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)((char *)&v24[1] + 8);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)((char *)v24 + 8);
  *(_OWORD *)(a1 + 328) = v10;
  *(_QWORD *)(a1 + 344) = *((_QWORD *)&v24[2] + 1);
  v11 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)&v26[0];
  BYTE7(v26[0]) = 0;
  LOBYTE(__p[0]) = 0;
  v12 = *(_OWORD *)((char *)&v26[1] + 8);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)((char *)v26 + 8);
  *(_OWORD *)(a1 + 392) = v12;
  *(_QWORD *)(a1 + 408) = *((_QWORD *)&v26[2] + 1);
  v13 = (_OWORD *)(a1 + 416);
  if (*(char *)(a1 + 439) < 0)
  {
    operator delete(*(void **)(a1 + 416));
    v14 = SBYTE7(v26[0]);
    *v13 = v27;
    *(_QWORD *)(a1 + 432) = v28;
    BYTE7(v28) = 0;
    LOBYTE(v27) = 0;
    *(_BYTE *)(a1 + 440) = BYTE8(v28);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *v13 = v27;
    *(_QWORD *)(a1 + 432) = v28;
    BYTE7(v28) = 0;
    LOBYTE(v27) = 0;
    *(_BYTE *)(a1 + 440) = BYTE8(v28);
  }
  if (SHIBYTE(v15[3]) < 0)
    operator delete(v15[1]);
}

void sub_1017D1B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1017D1B48(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  if (*(_BYTE *)(a1 + 2256))
  {
    if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported")
      && *(_QWORD *)(a1 + 2248))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v2 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *(_QWORD *)(a1 + 2248);
        *(_DWORD *)buf = 134283521;
        v18 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BaroAlt,unregister gps client, %{private}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v9 = *(_QWORD *)(a1 + 2248);
        v15 = 134283521;
        v16 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,unregister gps client, %{private}p", &v15, 12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopGps()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v4 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,BaroAlt", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        LOWORD(v15) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#wigo,off,BaroAlt", &v15, v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopGps()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_1021CF5E0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2248) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2248) + 8), 0);
      *(_BYTE *)(a1 + 2256) = 0;
      v5 = *(_QWORD *)(a1 + 2280);
      if (*(int *)(v5 + 8) >= 1)
        sub_100E3E6F0(v5);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,already stopped gps session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,already stopped gps session", &v15, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopGps()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

uint64_t sub_1017D1FB0(uint64_t a1, const __CFString *a2, char **a3)
{
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void **v8;
  NSObject *v9;
  int v10;
  void **v11;
  id v12;
  void **v13;
  NSObject *v14;
  void **v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  void *i;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  void **v52;
  void *v53;
  void **v54;
  uint64_t v55;
  int v56;
  _BYTE *v57;
  void *v58;
  _BYTE *v59;
  char *v60;
  NSObject *v61;
  void **v62;
  id v63;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  id v68;
  _BYTE *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _BYTE *v77;
  id v78;
  char *v79;
  uint64_t v80;
  void *context;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  CFTypeRef v86;
  _BYTE v87[128];
  int v88;
  _BYTE *v89;
  __int16 v90;
  id v91;
  _BYTE buf[12];
  __int16 v93;
  id v94;
  char v95;
  void *__p[2];
  char v97;

  a3[1] = *a3;
  context = objc_autoreleasePoolPush();
  v86 = 0;
  v5 = sub_1001FD94C();
  if (!sub_100527258(v5, a2, &v86))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v21 = v97 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,key retrieval", buf, 0xCu);
      if (v97 < 0)
        operator delete(__p[0]);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_123;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v22 = qword_1022A0028;
    sub_1001A486C(a2, (uint64_t)buf);
    if (v95 >= 0)
      v23 = buf;
    else
      v23 = *(_BYTE **)buf;
    v88 = 136446210;
    v89 = v23;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,key retrieval", &v88, 12);
    v19 = v24;
    if (v95 < 0)
      operator delete(*(void **)buf);
    goto LABEL_72;
  }
  v6 = (void *)v86;
  if (!v86)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v8 = v97 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,empty array", buf, 0xCu);
      if (v97 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v72 = qword_1022A0028;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v95 >= 0)
        v73 = buf;
      else
        v73 = *(_BYTE **)buf;
      v88 = 136446210;
      v89 = v73;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v72, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,empty array", &v88, 12);
      v75 = v74;
      if (v95 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v75);
      if (v75 != (char *)__p)
        free(v75);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    sub_1001A486C(a2, (uint64_t)__p);
    v10 = v97;
    v11 = (void **)__p[0];
    v12 = objc_msgSend(v6, "count");
    v13 = __p;
    if (v10 < 0)
      v13 = v11;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v13;
    v93 = 2050;
    v94 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,key,%{public}s,size,%{public}lu", buf, 0x16u);
    if (v97 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v65 = qword_1022A0028;
    sub_1001A486C(a2, (uint64_t)buf);
    v66 = v95;
    v67 = *(_BYTE **)buf;
    v68 = objc_msgSend(v6, "count");
    v69 = buf;
    if (v66 < 0)
      v69 = v67;
    v88 = 136446466;
    v89 = v69;
    v90 = 2050;
    v91 = v68;
    LODWORD(v80) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v65, 1, "BaroAlt,disk,retrieve,key,%{public}s,size,%{public}lu", &v88, v80);
    v71 = v70;
    if (v95 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v71);
    if (v71 != (char *)__p)
      free(v71);
  }
  if (!objc_msgSend(v6, "count"))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v25 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v26 = v97 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,no record", buf, 0xCu);
      if (v97 < 0)
        operator delete(__p[0]);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_123;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v27 = qword_1022A0028;
    sub_1001A486C(a2, (uint64_t)buf);
    if (v95 >= 0)
      v28 = buf;
    else
      v28 = *(_BYTE **)buf;
    v88 = 136446210;
    v89 = v28;
    LODWORD(v80) = 12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v27, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,no record", &v88, v80);
    v19 = v29;
    if (v95 < 0)
      operator delete(*(void **)buf);
LABEL_72:
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v19);
LABEL_149:
    if (v19 != (char *)__p)
      free(v19);
    goto LABEL_123;
  }
  if ((unint64_t)objc_msgSend(v6, "count") >= 0x65)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v15 = v97 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,too many entries,cleaning needed", buf, 0xCu);
      if (v97 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v16 = qword_1022A0028;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v95 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v88 = 136446210;
      v89 = v17;
      LODWORD(v80) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v16, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,too many entries,cleaning needed", &v88, v80);
      v19 = v18;
      if (v95 < 0)
        operator delete(*(void **)buf);
      goto LABEL_72;
    }
LABEL_123:
    v49 = 0;
    goto LABEL_124;
  }
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v31 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v82, v87, 16);
  if (!v31)
  {
    v49 = 1;
    goto LABEL_124;
  }
  v32 = *(_QWORD *)v83;
  while (2)
  {
    for (i = 0; i != v31; i = (char *)i + 1)
    {
      if (*(_QWORD *)v83 != v32)
        objc_enumerationMutation(v6);
      v34 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * (_QWORD)i);
      v35 = objc_opt_class(NSNumber, v30);
      if ((objc_opt_isKindOfClass(v34, v35) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v61 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v62 = __p;
          sub_1001A486C(a2, (uint64_t)__p);
          if (v97 < 0)
            v62 = (void **)__p[0];
          v63 = objc_msgSend(objc_msgSend(v34, "description"), "UTF8String");
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v62;
          v93 = 2082;
          v94 = v63;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed as not a NSNumber,i,%{public}s", buf, 0x16u);
          if (v97 < 0)
            operator delete(__p[0]);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_123;
        bzero(__p, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v76 = qword_1022A0028;
        v77 = buf;
        sub_1001A486C(a2, (uint64_t)buf);
        if (v95 < 0)
          v77 = *(_BYTE **)buf;
        v78 = objc_msgSend(objc_msgSend(v34, "description"), "UTF8String");
        v88 = 136446466;
        v89 = v77;
        v90 = 2082;
        v91 = v78;
        LODWORD(v80) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v76, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed as not a NSNumber,i,%{public}s", &v88, v80);
        v19 = v79;
        if (v95 < 0)
          operator delete(*(void **)buf);
        goto LABEL_148;
      }
      objc_msgSend(v34, "doubleValue");
      if ((v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v50 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          sub_1001A486C(a2, (uint64_t)__p);
          v51 = v97;
          v52 = (void **)__p[0];
          objc_msgSend(v34, "doubleValue");
          v54 = __p;
          if (v51 < 0)
            v54 = v52;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v54;
          v93 = 2050;
          v94 = v53;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed as invalid number,i,%{public}lf", buf, 0x16u);
          if (v97 < 0)
            operator delete(__p[0]);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_123;
        bzero(__p, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v55 = qword_1022A0028;
        sub_1001A486C(a2, (uint64_t)buf);
        v56 = v95;
        v57 = *(_BYTE **)buf;
        objc_msgSend(v34, "doubleValue");
        v59 = buf;
        if (v56 < 0)
          v59 = v57;
        v88 = 136446466;
        v89 = v59;
        v90 = 2050;
        v91 = v58;
        LODWORD(v80) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v55, 1, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed as invalid number,i,%{public}lf", &v88, v80);
        v19 = v60;
        if (v95 < 0)
          operator delete(*(void **)buf);
LABEL_148:
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v19);
        goto LABEL_149;
      }
      objc_msgSend(v34, "doubleValue");
      objc_msgSend(v34, "doubleValue");
      v38 = v37;
      v40 = a3[1];
      v39 = (unint64_t)a3[2];
      if ((unint64_t)v40 >= v39)
      {
        v42 = *a3;
        v43 = (v40 - *a3) >> 3;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61)
          sub_100259694();
        v45 = v39 - (_QWORD)v42;
        if (v45 >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v44;
        if (v30)
        {
          v46 = (char *)sub_10025E6A0((uint64_t)(a3 + 2), v30);
          v42 = *a3;
          v40 = a3[1];
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[8 * v43];
        *(_QWORD *)v47 = v38;
        v41 = v47 + 8;
        while (v40 != v42)
        {
          v48 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v47 - 1) = v48;
          v47 -= 8;
        }
        *a3 = v47;
        a3[1] = v41;
        a3[2] = &v46[8 * v30];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_QWORD *)v40 = v37;
        v41 = v40 + 8;
      }
      a3[1] = v41;
    }
    v31 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v82, v87, 16);
    v49 = 1;
    if (v31)
      continue;
    break;
  }
LABEL_124:
  objc_autoreleasePoolPop(context);
  return v49;
}

void sub_1017D2E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1017D2E94(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  _BOOL8 result;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  _DWORD v25[2];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  v10 = (uint64_t)(a1[1] - *a1) >> 3;
  if (v10 == (uint64_t)(a2[1] - *a2) >> 3
    && v10 == (uint64_t)(a3[1] - *a3) >> 3
    && v10 == (uint64_t)(a4[1] - *a4) >> 3
    && v10 == (uint64_t)(a5[1] - *a5) >> 3)
  {
    return 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v13 = (a1[1] - *a1) >> 3;
    v14 = (a2[1] - *a2) >> 3;
    v15 = (a3[1] - *a3) >> 3;
    v16 = (a4[1] - *a4) >> 3;
    v17 = (a5[1] - *a5) >> 3;
    *(_DWORD *)buf = 67241216;
    v35 = v13;
    v36 = 1026;
    v37 = v14;
    v38 = 1026;
    v39 = v15;
    v40 = 1026;
    v41 = v16;
    v42 = 1026;
    v43 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,disk,#Warning,incorrect data size,biasTimestampHistoryCFAbs,%{public}d, biasHistory,%{public}d,biasUncHistory,%{public}d,modeProbHistory,%{public}d,devBaroTempHistory,%{public}d", buf, 0x20u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v18 = (a1[1] - *a1) >> 3;
    v19 = (a2[1] - *a2) >> 3;
    v20 = (a3[1] - *a3) >> 3;
    v21 = (a4[1] - *a4) >> 3;
    v22 = (a5[1] - *a5) >> 3;
    v25[0] = 67241216;
    v25[1] = v18;
    v26 = 1026;
    v27 = v19;
    v28 = 1026;
    v29 = v20;
    v30 = 1026;
    v31 = v21;
    v32 = 1026;
    v33 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,disk,#Warning,incorrect data size,biasTimestampHistoryCFAbs,%{public}d, biasHistory,%{public}d,biasUncHistory,%{public}d,modeProbHistory,%{public}d,devBaroTempHistory,%{public}d", v25, 32);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLBarometricAltimeter::areBaroHistoryArraysValid(std::vector<CFAbsoluteTime> &, std::vector<double> &, std::vector<double> &, std::vector<double> &, std::vector<double> &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
    return 0;
  }
  return result;
}

void sub_1017D3174(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 51;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 102;
  }
  a1[4] = v6;
}

void sub_1017D31E8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  double v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  double v21;
  double v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  _BYTE v31[12];
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BaroAlt,onKFFilteredPressureNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    *(_WORD *)v31 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,onKFFilteredPressureNotification", v31, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(float *)a2;
      v8 = *(float *)(a2 + 40);
      *(_DWORD *)buf = 134349569;
      v37 = v6;
      v38 = 2049;
      v39 = v7;
      v40 = 2049;
      v41 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,pressure update timestamp,%{public}.3lf,filteredPressure,%{private}.3lf,PressureTemperature,%{private}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v20 = *(_QWORD *)(a2 + 8);
      v21 = *(float *)a2;
      v22 = *(float *)(a2 + 40);
      *(_DWORD *)v31 = 134349569;
      *(_QWORD *)&v31[4] = v20;
      v32 = 2049;
      v33 = v21;
      v34 = 2049;
      v35 = v22;
      LODWORD(v30) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,pressure update timestamp,%{public}.3lf,filteredPressure,%{private}.3lf,PressureTemperature,%{private}.3lf", v31, v30);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    if (*(float *)a2 > 2.2204e-16)
    {
      *(double *)(a1 + 448) = sub_1001FCBB4();
      v9 = *(float *)a2;
      *(double *)(a1 + 432) = v9;
      *(double *)(a1 + 440) = *(float *)(a2 + 40);
      sub_1017D3940((_QWORD *)a1, v9);
    }
    if (!*(_BYTE *)(a1 + 2156))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(_QWORD *)(a1 + 448);
        v12 = *(double *)(a1 + 3616);
        v13 = *(double *)(a1 + 3608);
        *(_DWORD *)buf = 134349568;
        v37 = v11;
        v38 = 2050;
        v39 = v12;
        v40 = 2050;
        v41 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BaroAlt,baro update time,%{public}.2lf,E911CallStopTime,%{public}.2lf,LastIsAppropriateToCalTime,%{public}.2lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v25 = *(_QWORD *)(a1 + 448);
        v26 = *(double *)(a1 + 3616);
        v27 = *(double *)(a1 + 3608);
        *(_DWORD *)v31 = 134349568;
        *(_QWORD *)&v31[4] = v25;
        v32 = 2050;
        v33 = v26;
        v34 = 2050;
        v35 = v27;
        LODWORD(v30) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,baro update time,%{public}.2lf,E911CallStopTime,%{public}.2lf,LastIsAppropriateToCalTime,%{public}.2lf", v31, v30);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      if (!*(_QWORD *)a1
        || sub_1000B7150(*(double *)(a1 + 3616), *(double *)(a1 + 448), 315360000.0) >= 300.0
        && sub_1000B7150(*(double *)(a1 + 3608), *(double *)(a1 + 448), 315360000.0) >= 30.0)
      {
        sub_1017D15B4(a1);
        return;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v14 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BaroAlt,E911 ended < 5 mins back or calibration ended < 30sec back", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        *(_WORD *)v31 = 0;
        LODWORD(v30) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,E911 ended < 5 mins back or calibration ended < 30sec back", v31, v30, *(_QWORD *)v31);
LABEL_39:
        v17 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v15);
        if (v17 != buf)
          free(v17);
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BaroAlt,pressure data is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      *(_WORD *)v31 = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,pressure data is null", v31, v30, *(_QWORD *)v31);
      goto LABEL_39;
    }
  }
}

double sub_1017D3940(_QWORD *a1, double a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  double v6;

  v6 = a2;
  v2 = a1 + 180;
  v3 = a1[185];
  if (v3 >= 0xA)
  {
    v4 = a1[184];
    a1[185] = v3 - 1;
    a1[184] = v4 + 1;
    sub_10047F604((uint64_t)(a1 + 180), 1);
  }
  return sub_1000D796C(v2, &v6);
}

id sub_1017D39A0(double **a1)
{
  id v2;
  double *v3;
  double *v4;
  double v5;

  v2 = +[NSMutableArray array](NSMutableArray, "array");
  v4 = *a1;
  v3 = a1[1];
  while (v4 != v3)
  {
    v5 = *v4++;
    objc_msgSend(v2, "addObject:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5));
  }
  return v2;
}

void sub_1017D3A08(uint64_t a1, float32x2_t *a2)
{
  double v4;
  NSObject *v5;
  double v6;
  double v7;
  __int32 v8;
  double v9;
  double v10;
  float32x2_t v11;
  float32x2_t v12;
  int v13;
  double v14;
  double v15;
  __int32 v16;
  double v17;
  double v18;
  float32x2_t v19;
  float32x2_t v20;
  char *v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  __int32 v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  float32x2_t v35;
  __int16 v36;
  float32x2_t v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  __int32 v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  float32x2_t v51;
  __int16 v52;
  float32x2_t v53;

  v4 = sub_1001FCBB4();
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v6 = a2[3].f32[0];
    v7 = a2[3].f32[1];
    v8 = a2[6].i32[0];
    v9 = a2[5].f32[1];
    v10 = a2[5].f32[0];
    v11 = *a2;
    v12 = a2[2];
    *(_DWORD *)buf = 134350849;
    v39 = v4;
    v40 = 2049;
    v41 = v6;
    v42 = 2049;
    v43 = v7;
    v44 = 1024;
    v45 = v8;
    v46 = 2049;
    v47 = v9;
    v48 = 2049;
    v49 = v10;
    v50 = 2050;
    v51 = v11;
    v52 = 2050;
    v53 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,ServerPressureData for given tile,time,%{public}.3lf, pressure_pa,%{private}.7lf,pressureUnc,%{private}.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf,PressureCreationTime,%{public}.3lf,tileAge,%{public}.2lf", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v14 = a2[3].f32[0];
    v15 = a2[3].f32[1];
    v16 = a2[6].i32[0];
    v17 = a2[5].f32[1];
    v18 = a2[5].f32[0];
    v19 = *a2;
    v20 = a2[2];
    v22 = 134350849;
    v23 = v4;
    v24 = 2049;
    v25 = v14;
    v26 = 2049;
    v27 = v15;
    v28 = 1024;
    v29 = v16;
    v30 = 2049;
    v31 = v17;
    v32 = 2049;
    v33 = v18;
    v34 = 2050;
    v35 = v19;
    v36 = 2050;
    v37 = v20;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,ServerPressureData for given tile,time,%{public}.3lf, pressure_pa,%{private}.7lf,pressureUnc,%{private}.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf,PressureCreationTime,%{public}.3lf,tileAge,%{public}.2lf", &v22, 78);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateReferencePressure(const CLPressureDataManager::CLPressureUpdateToBaro &)", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  *(float32x2_t *)(a1 + 1488) = a2[1];
  *(float64x2_t *)(a1 + 1496) = vcvtq_f64_f32(a2[3]);
  *(float32x2_t *)(a1 + 1560) = *a2;
  *(float32x2_t *)(a1 + 1568) = a2[2];
  if (a2[6].i32[0])
    v13 = -1;
  else
    v13 = 0;
  *(_DWORD *)(a1 + 1544) = v13;
  *(double *)(a1 + 1552) = sub_1001FCBB4();
}

void sub_1017D3CD8(_QWORD *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  double *v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  double *v13;
  std::string v14;
  void *__p[2];
  int64_t v16;

  sub_1015A2E04(a2, "");
  v4 = a1[1];
  if (a1[2] != v4)
  {
    v5 = a1[4];
    v6 = (_QWORD *)(v4 + 8 * (v5 >> 9));
    v7 = (double *)(*v6 + 8 * (v5 & 0x1FF));
    v8 = *(_QWORD *)(v4 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    while (v7 != (double *)v8)
    {
      std::to_string(&v14, *v7);
      v9 = std::string::append(&v14, ",");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v16 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (v16 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if (v16 >= 0)
        v12 = HIBYTE(v16);
      else
        v12 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v11, v12);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if ((double *)((char *)++v7 - *v6) == (double *)4096)
      {
        v13 = (double *)v6[1];
        ++v6;
        v7 = v13;
      }
    }
  }
}

void sub_1017D3E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

BOOL sub_1017D3E4C(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  _BOOL4 v11;
  NSObject *v12;
  _BOOL8 result;
  char *v14;
  unsigned int *v15;
  int v16;
  unsigned int *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  int v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  int v29;
  NSObject *v30;
  int v31;
  _BYTE *v32;
  NSObject *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  std::string *v38;
  uint64_t v39;
  int v40;
  std::string *v41;
  std::string v42;
  _BYTE __p[12];
  __int16 v44;
  int v45;
  __int16 v46;
  std::string *v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  double v51;
  __int16 v52;
  int v53;
  __int16 v54;
  _BYTE *v55;
  __int16 v56;
  int v57;

  v2 = 236;
  if (!*(_BYTE *)(a1 + 237))
    v2 = 360;
  if (!*(_BYTE *)(a1 + v2)
    || (v5 = *(_QWORD *)(a1 + 2240)) != 0
    && (sub_1000B7358(v5, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "BaroAlt,#Warning,RPA is not allowed or not supported at location", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    *(_WORD *)__p = 0;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,#Warning,RPA is not allowed or not supported at location", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v14);
    if (v14 == (char *)buf)
      return 0;
LABEL_18:
    free(v14);
    return 0;
  }
  v6 = (_QWORD *)(a1 + 2296);
  v7 = *(_QWORD *)(a1 + 2336);
  if (v7)
  {
    do
    {
      v8 = *(_QWORD *)(a1 + 2328);
      v9 = a2 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 2304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      v10 = *(double *)(a1 + 2344);
      v11 = v9 > v10;
      if (v9 <= v10)
        break;
      *(_QWORD *)(a1 + 2336) = v7 - 1;
      *(_QWORD *)(a1 + 2328) = v8 + 1;
      sub_10047F604(a1 + 2296, 1);
      v7 = *(_QWORD *)(a1 + 2336);
    }
    while (v7);
  }
  else
  {
    v11 = 1;
  }
  if (*(_BYTE *)(a1 + 496))
  {
    v15 = (unsigned int *)(a1 + 252);
    v16 = *(unsigned __int8 *)(a1 + 256);
    v17 = (unsigned int *)(a1 + 376);
  }
  else
  {
    v15 = (unsigned int *)(a1 + 244);
    v16 = *(unsigned __int8 *)(a1 + 248);
    v17 = (unsigned int *)(a1 + 364);
  }
  if (!v16)
    v15 = v17;
  if (v7 >= *v15)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v22 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v23 = *(_DWORD *)(a1 + 2336);
      sub_1017D3CD8((_QWORD *)(a1 + 2296), (std::string *)__p);
      v24 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
      v25 = *(unsigned __int8 *)(a1 + 496);
      *(_DWORD *)buf = 134349826;
      v51 = a2;
      v52 = 1026;
      v53 = v23;
      v54 = 2082;
      v55 = v24;
      v56 = 1026;
      v57 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,power budget,declined,reason,reached max,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s,fIsRPACalStale,%{public}d", buf, 0x22u);
      if (SBYTE3(v47) < 0)
        operator delete(*(void **)__p);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v26 = qword_1022A0028;
    v27 = *(_DWORD *)(a1 + 2336);
    sub_1017D3CD8((_QWORD *)(a1 + 2296), &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v42;
    else
      v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
    v29 = *(unsigned __int8 *)(a1 + 496);
    *(_DWORD *)__p = 134349826;
    *(double *)&__p[4] = a2;
    v44 = 1026;
    v45 = v27;
    v46 = 2082;
    v47 = v28;
    v48 = 1026;
    v49 = v29;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 1, "BaroAlt,power budget,declined,reason,reached max,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s,fIsRPACalStale,%{public}d", __p, 34);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
LABEL_53:
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v14);
    if (v14 == (char *)buf)
      return 0;
    goto LABEL_18;
  }
  if (v11)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 2336);
      *(_DWORD *)buf = 134349312;
      v51 = a2;
      v52 = 1026;
      v53 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,power budget,pass,reason,first recent session,time,%{public}lf,recent sessions,%{public}d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v20 = *(_QWORD *)(a1 + 2336);
    *(_DWORD *)__p = 134349312;
    *(double *)&__p[4] = a2;
    v44 = 1026;
    v45 = v20;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,power budget,pass,reason,first recent session,time,%{public}lf,recent sessions,%{public}d", __p, 18);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v21);
    if (v21 == (char *)buf)
      return 1;
    goto LABEL_84;
  }
  if (a2
     - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 2304) + (((v7 + *(_QWORD *)(a1 + 2328) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v7 + *(_QWORD *)(a1 + 2328) - 1) & 0x1FF)) > *(double *)(a1 + 2288))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v30 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v31 = *(_DWORD *)(a1 + 2336);
      sub_1017D3CD8((_QWORD *)(a1 + 2296), (std::string *)__p);
      v32 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134349570;
      v51 = a2;
      v52 = 1026;
      v53 = v31;
      v54 = 2082;
      v55 = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BaroAlt,power budget,pass,reason,long since last session,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s", buf, 0x1Cu);
      if (SBYTE3(v47) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v36 = qword_1022A0028;
    v37 = *(_DWORD *)(a1 + 2336);
    sub_1017D3CD8(v6, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v42;
    else
      v38 = (std::string *)v42.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 134349570;
    *(double *)&__p[4] = a2;
    v44 = 1026;
    v45 = v37;
    v46 = 2082;
    v47 = v38;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 1, "BaroAlt,power budget,pass,reason,long since last session,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s", __p, 28);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v21);
    if (v21 == (char *)buf)
      return 1;
LABEL_84:
    free(v21);
    return 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v33 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v34 = *(_DWORD *)(a1 + 2336);
    sub_1017D3CD8((_QWORD *)(a1 + 2296), (std::string *)__p);
    v35 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134349570;
    v51 = a2;
    v52 = 1026;
    v53 = v34;
    v54 = 2082;
    v55 = v35;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "BaroAlt,power budget,declined,reason,close to last session,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s", buf, 0x1Cu);
    if (SBYTE3(v47) < 0)
      operator delete(*(void **)__p);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v39 = qword_1022A0028;
    v40 = *(_DWORD *)(a1 + 2336);
    sub_1017D3CD8(v6, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v42;
    else
      v41 = (std::string *)v42.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 134349570;
    *(double *)&__p[4] = a2;
    v44 = 1026;
    v45 = v40;
    v46 = 2082;
    v47 = v41;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 1, "BaroAlt,power budget,declined,reason,close to last session,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s", __p, 28);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_53;
  }
  return result;
}

BOOL sub_1017D480C(uint64_t a1, int a2, double a3)
{
  uint64_t v4;
  NSObject *v6;
  double v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  int v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;

  v27 = a3;
  v4 = *(_QWORD *)(a1 + 2264);
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 2264), "setNextFireDelay:", *(double *)(a1 + 2272));
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      if (*(_QWORD *)a1)
        v7 = sub_1000B6F08(*(_QWORD *)a1, &v27);
      else
        v7 = 0.0;
      v10 = *(_QWORD *)(a1 + 2272);
      objc_msgSend(*(id *)(a1 + 2264), "nextFireTime");
      v12 = v11;
      objc_msgSend(*(id *)(a1 + 2264), "nextFireDelay");
      *(_DWORD *)buf = 134350080;
      v39 = v7;
      v40 = 2050;
      v41 = v10;
      v42 = 2050;
      v43 = v12;
      v44 = 2050;
      v45 = v13;
      v46 = 1026;
      v47 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,gps timer,on,now,%{public}.3lf,interval,%{public}.3lf,nextFire,%{public}.3lf,fireDelay,%{public}.3lf,reason,%{public}d", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v17 = qword_1022A0028;
      if (*(_QWORD *)a1)
        v18 = sub_1000B6F08(*(_QWORD *)a1, &v27);
      else
        v18 = 0.0;
      v21 = *(_QWORD *)(a1 + 2272);
      objc_msgSend(*(id *)(a1 + 2264), "nextFireTime");
      v23 = v22;
      objc_msgSend(*(id *)(a1 + 2264), "nextFireDelay");
      v28 = 134350080;
      v29 = v18;
      v30 = 2050;
      v31 = v21;
      v32 = 2050;
      v33 = v23;
      v34 = 2050;
      v35 = v24;
      v36 = 1026;
      v37 = a2;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 1, "BaroAlt,gps timer,on,now,%{public}.3lf,interval,%{public}.3lf,nextFire,%{public}.3lf,fireDelay,%{public}.3lf,reason,%{public}d", &v28, 48);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::turnOnGps(const CFTimeInterval, enum GpsTurnOnReason)", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
    sub_1017D4D04(a1, v27);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v15 = *(_QWORD *)(a1 + 2272);
      *(_DWORD *)buf = 134349312;
      v39 = v27;
      v40 = 2050;
      v41 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,active gps started,time,%{public}.3lf,count for %{public}.3lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return v4 != 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v19 = *(_QWORD *)(a1 + 2272);
    v28 = 134349312;
    v29 = v27;
    v30 = 2050;
    v31 = v19;
    LODWORD(v26) = 22;
    v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,active gps started,time,%{public}.3lf,count for %{public}.3lf", &v28, v26);
LABEL_31:
    v20 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::turnOnGps(const CFTimeInterval, enum GpsTurnOnReason)", "%s\n", v9);
    if (v20 != buf)
      free(v20);
    return v4 != 0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v39) = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,#Warning fActiveGpsRequestTimer is invalid,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v28 = 67240192;
    LODWORD(v29) = a2;
    v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning fActiveGpsRequestTimer is invalid,%{public}d", &v28, 8);
    goto LABEL_31;
  }
  return v4 != 0;
}

void sub_1017D4D04(uint64_t a1, double a2)
{
  NSObject *v2;
  char *v3;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  double v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;

  v16 = a2;
  if (*(_BYTE *)(a1 + 2256))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,already during gps session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v17) = 0;
      v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,already during gps session", &v17, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v3);
LABEL_34:
      if (v3 != (char *)buf)
        free(v3);
    }
  }
  else if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported")
         && *(_QWORD *)(a1 + 2248))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 2248);
      *(_DWORD *)buf = 134283521;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,register gps client, %{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v10 = *(_QWORD *)(a1 + 2248);
      v17 = 134283521;
      v18 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,register gps client, %{private}p", &v17, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#wigo,on,BaroAlt", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v17) = 0;
      LODWORD(v13) = 2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#wigo,on,BaroAlt", &v17, v13);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_1021CF5C0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2248) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 2248) + 8), 0, 0);
    *(_BYTE *)(a1 + 2256) = 1;
    sub_1000D796C((_QWORD *)(a1 + 2296), &v16);
    v8 = *(_QWORD *)(a1 + 2280);
    if (*(int *)(v8 + 8) <= 0)
    {
      sub_1015A2E04(__p, "none");
      sub_10002B684(v8, (uint64_t *)__p);
      if (v15 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BaroAlt,failed to start GPS", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v17) = 0;
      v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,failed to start GPS", &v17, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v3);
      goto LABEL_34;
    }
  }
}

void sub_1017D52CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017D52F0()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v0 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "BaroAlt,received gps update", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,received gps update", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

NSDictionary *__cdecl sub_1017D5474(id a1)
{
  return (NSDictionary *)&off_1022202B8;
}

NSDictionary *__cdecl sub_1017D5480(id a1)
{
  return (NSDictionary *)&off_1022202E0;
}

uint64_t sub_1017D548C(uint64_t a1)
{
  uint64_t result;
  int v3;
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  result = *(_QWORD *)(a1 + 2240);
  if (result)
  {
    if ((sub_1000B7358(result, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 241))
        v3 = *(unsigned __int8 *)(a1 + 240);
      else
        v3 = *(unsigned __int8 *)(a1 + 361);
      return v3 != 0;
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v4 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Harvest,pressure not available at location", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v6[0] = 0;
        v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Harvest,pressure not available at location", v6, 2);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isPressureDataHarvestSupported() const", "%s\n", v5);
        if (v5 != (char *)buf)
          free(v5);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1017D564C(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  result = *(_QWORD *)(a1 + 2240);
  if (result)
  {
    if ((sub_1000B7358(result, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 264))
        return *(unsigned int *)(a1 + 260);
      else
        return *(unsigned int *)(a1 + 368);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Harvest Count,pressure not available at location", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v5[0] = 0;
        v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Harvest Count,pressure not available at location", v5, 2);
        sub_100512490("Generic", 1, 0, 2, "uint32_t CLBarometricAltimeter::getMaxCountToUploadPerDay() const", "%s\n", v4);
        if (v4 != (char *)buf)
          free(v4);
        return 0;
      }
    }
  }
  return result;
}

void sub_1017D5804(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t *v15;
  NSObject *v16;
  int *v17;
  NSObject *v18;
  uint64_t *v19;
  NSObject *v20;
  int *v21;
  NSObject *v22;
  uint64_t *v23;
  NSObject *v24;
  int *v25;
  NSObject *v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  NSObject *v46;
  int v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  NSObject *v51;
  const char *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  uint8_t *v70;
  const char *v71;
  uint8_t *v72;
  const char *v73;
  uint8_t *v74;
  const char *v75;
  uint8_t *v76;
  const char *v77;
  uint8_t *v78;
  const char *v79;
  uint8_t *v80;
  const char *v81;
  uint8_t *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  _BYTE *v88;
  int *v89;
  int *v90;
  int *v91;
  _BYTE *v92;
  _QWORD v93[2];
  int v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  int v123;
  uint8_t buf[4];
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  int v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  int v153;

  if (*a3 == 2)
  {
    sub_100119F3C();
    if (sub_100006BB4(a4, "RefPressureConfig", v93))
    {
      v87 = (unsigned __int8 *)(a1 + 360);
      if ((sub_1001E4874((uint64_t)v93, "ReferencePressureFeatureSupported", (BOOL *)(a1 + 360)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v6 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Ref Support config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Ref Support config read error", &v94, 2);
          v54 = (uint8_t *)v53;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v53);
          if (v54 != buf)
            free(v54);
        }
      }
      v92 = (_BYTE *)(a1 + 361);
      if ((sub_1001E4874((uint64_t)v93, "ReferencePressureDataHarvestEnable", (BOOL *)(a1 + 361)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v7 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Harvest feature read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Harvest feature read error", &v94, v83);
          v56 = (uint8_t *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v55);
          if (v56 != buf)
            free(v56);
        }
        *v92 = 0;
      }
      v91 = (int *)(a1 + 364);
      if ((sub_100526244((uint64_t)v93, "BaroAltMaxGpsSessions", (_DWORD *)(a1 + 364)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v8 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max Gps sessions read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Max Gps sessions read error", &v94, v83);
          v58 = (uint8_t *)v57;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v57);
          if (v58 != buf)
            free(v58);
        }
        *v91 = 0;
      }
      v86 = (unsigned __int8 *)(a1 + 362);
      if ((sub_1001E4874((uint64_t)v93, "BaroAlsOutDoorSupported", (BOOL *)(a1 + 362)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v9 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Als outdoor read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Als outdoor read error", &v94, v83);
          v60 = (uint8_t *)v59;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v59);
          if (v60 != buf)
            free(v60);
        }
      }
      v90 = (int *)(a1 + 368);
      if ((sub_100526244((uint64_t)v93, "NumberOfAllowedHarvestsPerDay", (_DWORD *)(a1 + 368)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v10 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max number of harvests per day read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Max number of harvests per day read error", &v94, v83);
          v62 = (uint8_t *)v61;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v61);
          if (v62 != buf)
            free(v62);
        }
        *v90 = 5;
      }
      v85 = (unsigned __int8 *)(a1 + 372);
      if ((sub_1001E4874((uint64_t)v93, "BaroAltAllowRefPressureBasedAltToYieldEnabled", (BOOL *)(a1 + 372)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v11 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,baro yield enabled read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,baro yield enabled read error", &v94, v83);
          v64 = (uint8_t *)v63;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v63);
          if (v64 != buf)
            free(v64);
        }
      }
      v84 = (unsigned __int8 *)(a1 + 373);
      if ((sub_1001E4874((uint64_t)v93, "EnableReferencePressureHarvestInAllRegions", (BOOL *)(a1 + 373)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Ref pressure harvest all region read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Ref pressure harvest all region read error", &v94, v83);
          v66 = (uint8_t *)v65;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v65);
          if (v66 != buf)
            free(v66);
        }
      }
      v89 = (int *)(a1 + 376);
      if ((sub_100526244((uint64_t)v93, "BaroAltMaxGpsSessionsForRPACal", (_DWORD *)(a1 + 376)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max Gps sessions for RPA Cal read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Max Gps sessions for RPA Cal read error", &v94, v83);
          v68 = (uint8_t *)v67;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v67);
          if (v68 != buf)
            free(v68);
        }
        *v89 = 5;
      }
      v88 = (_BYTE *)(a1 + 380);
      if ((sub_1001E4874((uint64_t)v93, "IsSlowChangingBiasWithMedianEnabled", (BOOL *)(a1 + 380)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,feature flag of slow changing bias with median filter read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,feature flag of slow changing bias with median filter read error", &v94, v83);
          v70 = (uint8_t *)v69;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v69);
          if (v70 != buf)
            free(v70);
        }
        *v88 = 1;
      }
      v15 = (uint64_t *)(a1 + 384);
      if ((sub_1001FD98C((uint64_t)v93, "LongMemoryBiasTimeSpan_s", (void *)(a1 + 384)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v16 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,long memory bias time read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,long memory bias time read error", &v94, v83);
          v72 = (uint8_t *)v71;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v71);
          if (v72 != buf)
            free(v72);
        }
        *v15 = 0x4122750000000000;
      }
      v17 = (int *)(a1 + 392);
      if ((sub_100526244((uint64_t)v93, "LongMemoryBiasMaxElements", (_DWORD *)(a1 + 392)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v18 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max long mem bias elements read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,Max long mem bias elements read error", &v94, v83);
          v74 = (uint8_t *)v73;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v73);
          if (v74 != buf)
            free(v74);
        }
        *v17 = 50;
      }
      v19 = (uint64_t *)(a1 + 400);
      if ((sub_1001FD98C((uint64_t)v93, "ShortMemoryBiasTimeSpan_s", (void *)(a1 + 400)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v20 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,short memory bias time read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,short memory bias time read error", &v94, v83);
          v76 = (uint8_t *)v75;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v75);
          if (v76 != buf)
            free(v76);
        }
        *v19 = 0x409C200000000000;
      }
      v21 = (int *)(a1 + 408);
      if ((sub_100526244((uint64_t)v93, "ShortMemoryBiasMaxElements", (_DWORD *)(a1 + 408)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v22 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,short memory bias max elements read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,short memory bias max elements read error", &v94, v83);
          v78 = (uint8_t *)v77;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v77);
          if (v78 != buf)
            free(v78);
        }
        *v21 = 60;
      }
      v23 = (uint64_t *)(a1 + 416);
      if ((sub_1001FD98C((uint64_t)v93, "ShortMemoryMinTimeInterval_s", (void *)(a1 + 416)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v24 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,short memory min time read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,short memory min time read error", &v94, v83);
          v80 = (uint8_t *)v79;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v79);
          if (v80 != buf)
            free(v80);
        }
        *v23 = 0x403E000000000000;
      }
      v25 = (int *)(a1 + 424);
      if ((sub_100526244((uint64_t)v93, "MinLongTermMemoryQueueSize", (_DWORD *)(a1 + 424)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v26 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,min long term memory queue size read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CF648);
          LOWORD(v94) = 0;
          LODWORD(v83) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,min long term memory queue size read error", &v94, v83);
          v82 = (uint8_t *)v81;
          sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v81);
          if (v82 != buf)
            free(v82);
        }
        *v25 = 8;
      }
      sub_1017CAB0C(a1);
      sub_1017CA4EC(a1);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v27 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v127 = *v92;
        v131 = *v86;
        v135 = *v85;
        v139 = *v89;
        v143 = *v15;
        v147 = *v19;
        v151 = *v23;
        v125 = *v87;
        v129 = *v91;
        v133 = *v90;
        v137 = *v84;
        v141 = *v88;
        v145 = *v17;
        v149 = *v21;
        v142 = 2050;
        v146 = 2050;
        v150 = 2050;
        v126 = 1026;
        v128 = 1026;
        v130 = 1026;
        v132 = 1026;
        v134 = 1026;
        v136 = 1026;
        v138 = 1026;
        v140 = 1026;
        v144 = 1026;
        v148 = 1026;
        v152 = 1026;
        v153 = *v25;
        *(_DWORD *)buf = 67243776;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BaroAlt,MA-OTA,RefPress,%{public}d,Harvested,%{public}d,GpsSessions,%{public}u,ALSOutDoor,%{public}d,NumberOfHarvestPerDay,%{public}u,BaroYield,%{public}d,RefPressureHarvestAllRegion,%{public}d,MaxGpsSessionForRPACal,%{public}d,isSlowChangingBiasWithMedianEnabled,%{public}d,longMemoryBiasTimeSpan_s,%{public}.3lf,longMemoryBiasMaxElements,%{public}d,shortMemoryBiasTimeSpan_s,%{public}.3lf,shortMemoryBiasMaxElements,%{public}d,shortMemoryMinTimeInterval_s,%{public}.3lf,minLongTermMemoryQueueSize,%{public}d", buf, 0x68u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_126;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v28 = *v87;
      v29 = *v92;
      v30 = *v91;
      v31 = *v86;
      v32 = *v90;
      v33 = *v85;
      v34 = *v84;
      v35 = *v89;
      v36 = *v88;
      v37 = *v15;
      v38 = *v17;
      v39 = *v19;
      v40 = *v21;
      v41 = *v23;
      v42 = *v25;
      v94 = 67243776;
      v95 = v28;
      v96 = 1026;
      v97 = v29;
      v98 = 1026;
      v99 = v30;
      v100 = 1026;
      v101 = v31;
      v102 = 1026;
      v103 = v32;
      v104 = 1026;
      v105 = v33;
      v106 = 1026;
      v107 = v34;
      v108 = 1026;
      v109 = v35;
      v110 = 1026;
      v111 = v36;
      v112 = 2050;
      v113 = v37;
      v114 = 1026;
      v115 = v38;
      v116 = 2050;
      v117 = v39;
      v118 = 1026;
      v119 = v40;
      v120 = 2050;
      v121 = v41;
      v122 = 1026;
      v123 = v42;
      LODWORD(v83) = 104;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,MA-OTA,RefPress,%{public}d,Harvested,%{public}d,GpsSessions,%{public}u,ALSOutDoor,%{public}d,NumberOfHarvestPerDay,%{public}u,BaroYield,%{public}d,RefPressureHarvestAllRegion,%{public}d,MaxGpsSessionForRPACal,%{public}d,isSlowChangingBiasWithMedianEnabled,%{public}d,longMemoryBiasTimeSpan_s,%{public}.3lf,longMemoryBiasMaxElements,%{public}d,shortMemoryBiasTimeSpan_s,%{public}.3lf,shortMemoryBiasMaxElements,%{public}d,shortMemoryMinTimeInterval_s,%{public}.3lf,minLongTermMemoryQueueSize,%{public}d", &v94, v83);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v43);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v51 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,ReferencePressure Config not available", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_126;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v94) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,MA-OTA,ReferencePressure Config not available", &v94, 2);
      v44 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v52);
    }
    if (v44 != buf)
      free(v44);
LABEL_126:
    sub_10011A5A8(v93);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v46 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v47 = *a3;
    *(_DWORD *)buf = 67240192;
    v125 = v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Invalid notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v48 = *a3;
    v94 = 67240192;
    v95 = v48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Invalid notification,%{public}d", &v94, 8);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
}

void sub_1017D723C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1017D729C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  if (*a3 == 1)
  {
    *(_DWORD *)(a1 + 1316) = *a4;
    *(_DWORD *)(a1 + 1320) = a4[1];
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v6 = *(_DWORD *)(a1 + 1316);
      v7 = *(_DWORD *)(a1 + 1320);
      *(_DWORD *)buf = 67240448;
      v16 = v6;
      v17 = 1026;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,motionActNoti,Type,%{public}u,Confidence,%{public}u", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v8 = *(_DWORD *)(a1 + 1316);
      v9 = *(_DWORD *)(a1 + 1320);
      v12[0] = 67240448;
      v12[1] = v8;
      v13 = 1026;
      v14 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,motionActNoti,Type,%{public}u,Confidence,%{public}u", v12, 14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

uint64_t sub_1017D7488(uint64_t a1)
{
  std::string *v2;
  NSString *v3;
  NSString *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  std::string *v8;
  NSObject *v9;
  __int16 v11;
  void *v12[2];
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  std::string __p[68];

  sub_1015A2E04(__p, (char *)objc_msgSend(CFSTR("com.apple.locationd.bundle-/System/Library/LocationBundles/AltimeterHarvest.bundle"), "UTF8String"));
  sub_1001AE67C(__p, (uint64_t)v12);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  sub_1001A885C((uint64_t)v12, (uint64_t)__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = __p;
  else
    v2 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4 = v3;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_8;
LABEL_20:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,AltimeterAuth Clientkey invalid", (uint8_t *)__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v11 = 0;
    v8 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,AltimeterAuth Clientkey invalid", &v11, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isAuthorizedToHarvest()", "%s\n", (const char *)v8);
    goto LABEL_44;
  }
  if (!v3)
    goto LABEL_20;
LABEL_8:
  v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 504), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache")), "syncgetAuthorizationContextIfClientIsNonZonal:", v4);
  if (v5 && (objc_msgSend(v5, "isNonProvisionallyAuthorizedForServiceTypeMask:", 16) & 1) != 0)
  {
    v6 = 1;
    goto LABEL_26;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,AltimeterAuth auth failed", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v11 = 0;
    v8 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,AltimeterAuth auth failed", &v11, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isAuthorizedToHarvest()", "%s\n", (const char *)v8);
LABEL_44:
    if (v8 != __p)
      free(v8);
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12[0]);
  return v6;
}

void sub_1017D785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_100010174((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_1017D78BC(_QWORD *a1)
{
  unint64_t v1;
  NSObject *v2;
  _BOOL8 result;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  double **v8;
  double *v9;
  double *v10;
  double v11;
  _WORD v12[7];
  char v13;
  double **buf[205];

  v1 = a1[185];
  if (v1 > 9)
  {
    v6 = a1[181];
    v7 = a1[184];
    v8 = (double **)(v6 + 8 * (v7 >> 9));
    if (a1[182] == v6)
    {
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v9 = &(*v8)[v7 & 0x1FF];
      v10 = (double *)(*(_QWORD *)(v6 + 8 * ((v7 + v1) >> 9)) + 8 * (((_WORD)v7 + (_WORD)v1) & 0x1FF));
    }
    v13 = 0;
    sub_1017DBEA8(v8, v9, v10, buf);
    v11 = *(double *)buf[3] - *(double *)buf[1];
    return v11 > 0.0 && v11 < 12.0;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,device pressure queue is empty or < 10", (uint8_t *)buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v12[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,device pressure queue is empty or < 10", v12, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRecentDevicePressureStable() const", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
      return 0;
    }
  }
  return result;
}

BOOL sub_1017D7AEC(uint64_t a1)
{
  uint64_t v2;
  double v3;
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[8];
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t v32;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)buf = sub_1001FCBB4();
    v3 = sub_1000B6F08(v2, (double *)buf);
  }
  else
  {
    v3 = 0.0;
  }
  v4 = vabdd_f64(v3, *(double *)(a1 + 1264));
  v5 = rand() % 0x1C20u + v3 % 0x15180;
  if (v5 < v4)
    *(_DWORD *)(a1 + 232) = 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 1264);
    *(_DWORD *)buf = 67175425;
    *(_DWORD *)&buf[4] = v4;
    v27 = 1025;
    v28 = v5;
    v29 = 2049;
    v30 = v3;
    v31 = 2049;
    v32 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,harvestCalibratedPressure,lastHarvest,%{private}u,TodaySec,%{private}u,CurrentTime,%{private}.1f,timeOfLastCalibrationPressureHarvest_s,%{private}.1f", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v14 = *(_QWORD *)(a1 + 1264);
    LODWORD(v19) = 67175425;
    HIDWORD(v19) = v4;
    v20 = 1025;
    v21 = v5;
    v22 = 2049;
    v23 = v3;
    v24 = 2049;
    v25 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,harvestCalibratedPressure,lastHarvest,%{private}u,TodaySec,%{private}u,CurrentTime,%{private}.1f,timeOfLastCalibrationPressureHarvest_s,%{private}.1f", &v19, 34);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isPressureHarvestAllowedToday()", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  v8 = *(_DWORD *)(a1 + 232);
  if (v8 && v4 <= 0x1D)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,multiple harvest not allowed within 0.5 mins", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v19) = 0;
      LODWORD(v18) = 2;
      v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,multiple harvest not allowed within 0.5 mins", &v19, v18, v19);
LABEL_36:
      v17 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isPressureHarvestAllowedToday()", "%s\n", v11);
      if (v17 != buf)
        free(v17);
      return 0;
    }
  }
  else
  {
    if (v8 < sub_1017D564C(a1))
      return 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v13 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Pressure harvest count,%{public}u,reached allowed limit for day", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v16 = *(_DWORD *)(a1 + 232);
      LODWORD(v19) = 67240192;
      HIDWORD(v19) = v16;
      LODWORD(v18) = 8;
      v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Pressure harvest count,%{public}u,reached allowed limit for day", &v19, v18, v19);
      goto LABEL_36;
    }
  }
  return result;
}

BOOL sub_1017D7FAC(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  _DWORD v9[2];
  __int16 v10;
  double v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  _BOOL4 v15;
  __int16 v16;
  double v17;
  __int16 v18;
  uint64_t v19;

  v2 = sub_1001FCBB4();
  if (*(_QWORD *)a1)
    v3 = sub_1000B7150(v2, *(double *)(a1 + 3656), 315360000.0);
  else
    v3 = 1.79769313e308;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 3656);
    *(_DWORD *)buf = 67240704;
    v15 = v3 <= 120.0;
    v16 = 2050;
    v17 = v3;
    v18 = 2050;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BaroAlt,Pressure harvest,isRTTrafficHarvestRecent,%{public}d,durationSinceLastRealtimeTrafficHarvest_s,%{public}.3lf,fLastTrafficHarvestMCTimestamp_s,%{public}.3lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v7 = *(_QWORD *)(a1 + 3656);
    v9[0] = 67240704;
    v9[1] = v3 <= 120.0;
    v10 = 2050;
    v11 = v3;
    v12 = 2050;
    v13 = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,Pressure harvest,isRTTrafficHarvestRecent,%{public}d,durationSinceLastRealtimeTrafficHarvest_s,%{public}.3lf,fLastTrafficHarvestMCTimestamp_s,%{public}.3lf", v9, 28);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isHarvestAllowedByRecentRealtimeHarvest() const", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  return v3 <= 120.0;
}

void sub_1017D81E8(uint64_t *a1, int *a2)
{
  uint64_t v2;
  double v3;
  int v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *a2 = 1;
  v2 = *a1;
  if (*a1)
  {
    if (!*(_BYTE *)(v2 + 97))
      return;
    v3 = *(double *)(v2 + 104);
    if (v3 <= 0.9)
    {
      if (v3 <= 0.7)
        return;
      v4 = 2;
    }
    else
    {
      v4 = 3;
    }
    *a2 = v4;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,fBaroAltCore is nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,fBaroAltCore is nil", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::getReliabilityFromBaroBiasConfiguration(int &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

BOOL sub_1017D83B8(uint64_t a1, double a2, double a3)
{
  NSObject *v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  _BOOL8 result;
  char *v17;
  float v18;
  id v19;
  CLLocationCoordinate2D v20;
  id v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[6];
  int v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  _BYTE buf[24];
  double v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BaroAlt,RPAHarvest,countryConfig", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v32) = 0;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,RPAHarvest,countryConfig", &v32, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v23);
    if (v23 != buf)
      free(v23);
  }
  if (*(_QWORD *)(a1 + 3488))
  {
    v7 = sub_100124100(a2, a3, *(double *)(a1 + 208), *(double *)(a1 + 216));
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 208);
      v10 = *(_QWORD *)(a1 + 216);
      v11 = *(unsigned __int8 *)(a1 + 224);
      *(_DWORD *)buf = 134350337;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2049;
      v45 = a3;
      v46 = 2049;
      v47 = v9;
      v48 = 2049;
      v49 = v10;
      v50 = 1025;
      v51 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BaroAlt,RPAHarvest,distanceFromLastQuery,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,prevLat,%{private}.8lf,prevLon,%{private}.8lf,isInRegion,%{private}d", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v24 = *(_QWORD *)(a1 + 208);
      v25 = *(_QWORD *)(a1 + 216);
      v26 = *(unsigned __int8 *)(a1 + 224);
      v32 = 134350337;
      v33 = v7;
      v34 = 2049;
      v35 = a2;
      v36 = 2049;
      v37 = a3;
      v38 = 2049;
      v39 = v24;
      v40 = 2049;
      v41 = v25;
      v42 = 1025;
      v43 = v26;
      LODWORD(v30) = 58;
      v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,RPAHarvest,distanceFromLastQuery,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,prevLat,%{private}.8lf,prevLon,%{private}.8lf,isInRegion,%{private}d", &v32, v30);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v27);
      if (v27 != buf)
        free(v27);
    }
    if (v7 <= 0.0 || v7 > 20000.0)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      LOBYTE(v45) = 0;
      v18 = *(float *)(a1 + 1384);
      v19 = objc_alloc((Class)CLLocation);
      v20 = CLLocationCoordinate2DMake(a2, a3);
      v21 = objc_msgSend(v19, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", +[NSDate date](NSDate, "date"), v20.latitude, v20.longitude, 0.0, fmax(v18, 20000.0), -1.0);
      v22 = *(void **)(a1 + 3488);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_1017D8AC4;
      v31[3] = &unk_1021CF608;
      v31[4] = buf;
      v31[5] = a1;
      objc_msgSend(v22, "fetchInfoForLocation:withReply:", v21, v31);
      *(double *)(a1 + 208) = a2;
      *(double *)(a1 + 216) = a3;
      v14 = *(unsigned __int8 *)(a1 + 224);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v13 = *(unsigned __int8 *)(a1 + 224);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,RPAHarvest,countryConfig supported,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v28 = *(unsigned __int8 *)(a1 + 224);
        v32 = 67109120;
        LODWORD(v33) = v28;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,RPAHarvest,countryConfig supported,%d", &v32);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v29);
        if (v29 != buf)
          free(v29);
      }
      v14 = *(unsigned __int8 *)(a1 + 224);
    }
    return v14 != 0;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "BaroAlt,RPAHarvest,countryConfig failed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v32) = 0;
      LODWORD(v30) = 2;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,RPAHarvest,countryConfig failed", &v32, v30);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v17);
      if (v17 != buf)
        free(v17);
      return 0;
    }
  }
  return result;
}

void sub_1017D8AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1017D8AC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  BOOL v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289539;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2113;
    v23 = a2;
    v24 = 2113;
    v25 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BaroAlt,RPAHarvest\", \"config\":%{private, location:escape_only}@, \"info\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  if (a2)
    v8 = objc_msgSend(a2, "objectForKey:", CFSTR("allowed")) != 0;
  else
    v8 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v10 = *(unsigned __int8 *)(v6 + 224);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *(_DWORD *)buf = 67240448;
    v19 = v10;
    v20 = 1026;
    LODWORD(v21) = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,RPAHarvest,isInRegion,%{public}d,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12 = *(unsigned __int8 *)(v6 + 224);
    v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v15[0] = 67240448;
    v15[1] = v12;
    v16 = 1026;
    v17 = v13;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,RPAHarvest,isInRegion,%{public}d,%{public}d", v15, 14);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  *(_BYTE *)(v6 + 224) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_1017D8D8C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  double v10;
  int v11;
  double v12;
  char *v13;
  _QWORD v14[6];
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;

  result = *a1;
  if (result)
  {
    result = sub_101745E5C(result);
    if ((_DWORD)result)
    {
      v5 = result;
      v6 = sub_101745E64((_QWORD *)*a1);
      v18 = 0;
      if (sub_1001594F4((float64_t *)(a2 + 24), (double *)(a2 + 32), &v18))
        v7 = v18;
      else
        v7 = -1;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v8 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *((_DWORD *)a1 + 58);
        v10 = *(float *)(a2 + 12);
        *(_DWORD *)buf = 67241217;
        v29 = v5;
        v30 = 1026;
        v31 = v6;
        v32 = 1026;
        v33 = v9;
        v34 = 2050;
        v35 = v10;
        v36 = 1025;
        v37 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BaroAlt,RPAHarvest,metric,biasHistorySize,%{public}d,biasHistoryDuration_s,%{public}d,harvestsInLast24hr,%{public}d,harvestUnc_pa,%{public}.3lf,demDeweightAreaId,%{private}d", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v11 = *((_DWORD *)a1 + 58);
        v12 = *(float *)(a2 + 12);
        v19[0] = 67241217;
        v19[1] = v5;
        v20 = 1026;
        v21 = v6;
        v22 = 1026;
        v23 = v11;
        v24 = 2050;
        v25 = v12;
        v26 = 1025;
        v27 = v7;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,RPAHarvest,metric,biasHistorySize,%{public}d,biasHistoryDuration_s,%{public}d,harvestsInLast24hr,%{public}d,harvestUnc_pa,%{public}.3lf,demDeweightAreaId,%{private}d", v19, 36);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::collectHarvestQualityIndicators(const CalibratedPressureCollectionData &) const", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1017D9040;
      v14[3] = &unk_102150CF0;
      v15 = v5;
      v16 = v6;
      v14[4] = a1;
      v14[5] = a2;
      v17 = v7;
      return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.BaroAltHarvest"), v14);
    }
  }
  return result;
}

NSDictionary *sub_1017D9040(uint64_t a1)
{
  uint64_t v2;
  double v3;
  _QWORD v5[5];
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = CFSTR("biasHistorySize");
  v6[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v5[1] = CFSTR("biasHistoryDuration_s");
  v6[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v5[2] = CFSTR("harvestsInLast24hr");
  v6[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 232));
  v5[3] = CFSTR("harvestUnc_pa");
  LODWORD(v3) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 12);
  v6[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v5[4] = CFSTR("deweightedAreaID");
  v6[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 5);
}

void sub_1017D9148(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  uint64_t *v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t *v22;
  __int16 v23;
  uint64_t v24;

  v16 = 0.0;
  v6 = sub_1001FD94C();
  if (sub_1001FD9FC(v6, a1, &v16))
  {
    v7 = fabs(v16);
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 > 2.22044605e-16)
    {
      *(double *)(a3 + 24) = v16;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        if (*((char *)a2 + 23) >= 0)
          v10 = a2;
        else
          v10 = (uint64_t *)*a2;
        v11 = *(_QWORD *)(a3 + 24);
        *(_DWORD *)buf = 136315394;
        v22 = v10;
        v23 = 2050;
        v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadFromDiskStartMonitoringCalibrationTimeForAnalyticsData,%{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        if (*((char *)a2 + 23) >= 0)
          v12 = a2;
        else
          v12 = (uint64_t *)*a2;
        v13 = *(_QWORD *)(a3 + 24);
        v17 = 136315394;
        v18 = v12;
        v19 = 2050;
        v20 = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadFromDiskStartMonitoringCalibrationTimeForAnalyticsData,%{public}lf", &v17, 22);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::prepareCalibrationAnalyticsData()::(anonymous class)::operator()(const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
  }
}

void sub_1017D9380(const __CFString *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  double *v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t *v13;
  double v14;
  uint64_t *v15;
  double v16;
  const char *v17;
  char *v18;
  int v19;
  uint64_t *v20;
  __int16 v21;
  double v22;
  _BYTE buf[12];
  __int16 v24;
  double v25;

  v4 = (double *)(a3 + 24);
  if (fabs(*(double *)(a3 + 24)) < 2.22044605e-16
    || (*(_QWORD *)(a3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v8 = *a4;
    if (*a4)
    {
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      v9 = sub_1000B6F08(v8, (double *)buf);
    }
    else
    {
      v9 = 0.0;
    }
    *v4 = v9;
    v10 = sub_1001FD94C();
    sub_10018A534(v10, a1, v4);
    v11 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      v14 = *v4;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v13;
      v24 = 2050;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,InitStartMonitoringCalibrationTimeForAnalytics,%{public}lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      if (*((char *)a2 + 23) >= 0)
        v15 = a2;
      else
        v15 = (uint64_t *)*a2;
      v16 = *v4;
      v19 = 136315394;
      v20 = v15;
      v21 = 2050;
      v22 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,InitStartMonitoringCalibrationTimeForAnalytics,%{public}lf", &v19, 22);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::prepareCalibrationAnalyticsData()::(anonymous class)::operator()(const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &, const std::unique_ptr<CLBarometricAltimeterCore> &) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_1017D95E0(int *a1)
{
  void *__p[2];
  char v3;

  sub_1015A2E04(__p, "InAWeek");
  sub_1017DA20C((uint64_t)CFSTR("CLBaroAltCalibrationCountMMForAWeek"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOutdoorContextForAWeek"), (uint64_t)CFSTR("CLBaroAltAppropriateToCalibrateCountForAWeek"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMForAWeek"), (uint64_t)CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureForAWeek"), (uint64_t *)__p, a1 + 878);
  if (v3 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "InAMonth");
  sub_1017DA20C((uint64_t)CFSTR("CLBaroAltCalibrationCountMMForAMonth"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOutdoorContextForAMonth"), (uint64_t)CFSTR("CLBaroAltAppropriateToCalibrateCountForAMonth"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMForAMonth"), (uint64_t)CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureForAMonth"), (uint64_t *)__p, a1 + 886);
  if (v3 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "In3Months");
  sub_1017DA20C((uint64_t)CFSTR("CLBaroAltCalibrationCountMMFor3Months"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOutdoorContextFor3Months"), (uint64_t)CFSTR("CLBaroAltAppropriateToCalibrateCountFor3Months"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMFor3Months"), (uint64_t)CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureFor3Months"), (uint64_t *)__p, a1 + 894);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1017D9700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017D9724(unsigned int *a1)
{
  void *__p[2];
  char v3;

  sub_1015A2E04(__p, "InAWeek");
  sub_1017DAADC(CFSTR("CLBaroAltCalibrationCountMMForAWeek"), CFSTR("CLBaroAltCalibrationCountOutdoorContextForAWeek"), CFSTR("CLBaroAltAppropriateToCalibrateCountForAWeek"), CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMForAWeek"), CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureForAWeek"), (uint64_t *)__p, a1 + 878);
  if (v3 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "InAMonth");
  sub_1017DAADC(CFSTR("CLBaroAltCalibrationCountMMForAMonth"), CFSTR("CLBaroAltCalibrationCountOutdoorContextForAMonth"), CFSTR("CLBaroAltAppropriateToCalibrateCountForAMonth"), CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMForAMonth"), CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureForAMonth"), (uint64_t *)__p, a1 + 886);
  if (v3 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "In3Months");
  sub_1017DAADC(CFSTR("CLBaroAltCalibrationCountMMFor3Months"), CFSTR("CLBaroAltCalibrationCountOutdoorContextFor3Months"), CFSTR("CLBaroAltAppropriateToCalibrateCountFor3Months"), CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMFor3Months"), CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureFor3Months"), (uint64_t *)__p, a1 + 894);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1017D9844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017D9868(_QWORD *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFString *a8, _QWORD ***a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v15;
  double v16;
  double v17;
  NSObject *v18;
  _QWORD **v19;
  uint64_t v20;
  double v21;
  float64x2_t *v22;
  double *v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t *v27;
  _QWORD **v28;
  uint64_t v29;
  int v30;
  const std::string::value_type *v32;
  _QWORD *v33;
  std::string *v36;
  NSString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  _QWORD *v51;
  double v52;
  _QWORD *v53;
  char *v54;
  std::string::size_type v55;
  char *v56;
  _QWORD *v57;
  double v58;
  char *v59;
  uint64_t v60;
  int v61;
  _QWORD v62[9];
  std::string v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  int v77;
  _BYTE buf[24];
  double v79;
  _BYTE v80[10];
  __int16 v81;
  int v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  int v88;

  v15 = *a11;
  if (*a11)
  {
    *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
    v16 = sub_1000B6F08(v15, (double *)buf);
    v17 = sub_1000B7150(v16, *(double *)(a10 + 24), 315360000.0);
  }
  else
  {
    v17 = 0.0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v18 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a9 + 23) >= 0)
      v19 = a9;
    else
      v19 = *a9;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v17;
    *(_WORD *)&buf[22] = 2050;
    v79 = a2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,uploadToAnalyticsCheck,durationSinceStartMonitoringTimeSec,%{public}.3lf,baroAltCalibrationUploadThreshold,%{public}.3lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a9 + 23) >= 0)
      v53 = a9;
    else
      v53 = *a9;
    v61 = 136315650;
    v62[0] = v53;
    LOWORD(v62[1]) = 2050;
    *(double *)((char *)&v62[1] + 2) = v17;
    WORD1(v62[2]) = 2050;
    *(double *)((char *)&v62[2] + 4) = a2;
    v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,uploadToAnalyticsCheck,durationSinceStartMonitoringTimeSec,%{public}.3lf,baroAltCalibrationUploadThreshold,%{public}.3lf", &v61, 32);
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::submitCalibrationAnalyticsData(const CLDaemonLocation &)::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, const double, BarometricAltitudeCalibrationAnalyticsData &, const std::unique_ptr<CLBarometricAltimeterCore> &) const", "%s\n", v54);
    if (v54 != buf)
      free(v54);
  }
  if (fabs(v17) > a2)
  {
    *(_QWORD *)((char *)v62 + 4) = 0xBFF0000000000000;
    memset((char *)&v62[1] + 4, 0, 60);
    LOBYTE(v61) = 1;
    v20 = *a11;
    if (*a11)
    {
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      v21 = sub_1000B6F08(v20, (double *)buf);
    }
    else
    {
      v21 = 0.0;
    }
    *(double *)((char *)v62 + 4) = v21;
    std::string::assign((std::string *)((char *)&v62[1] + 4), "com.apple.locationd");
    HIDWORD(v62[4]) = vcvtad_u64_f64(v17);
    *(_OWORD *)&v62[5] = *(_OWORD *)a10;
    LODWORD(v62[7]) = *(_DWORD *)(a10 + 16);
    v22 = (float64x2_t *)(*a1 + 4);
    v23 = (double *)(*a1 + 12);
    *(float32x2_t *)((char *)&v62[7] + 4) = vcvt_f32_f64(*v22);
    sub_1001594F4(v22->f64, v23, (_DWORD *)&v62[8] + 1);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a9 + 23) >= 0)
        v25 = a9;
      else
        v25 = *a9;
      *(_DWORD *)buf = 136317443;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = HIDWORD(v62[4]);
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v62[5];
      LOWORD(v79) = 1024;
      *(_DWORD *)((char *)&v79 + 2) = HIDWORD(v62[5]);
      HIWORD(v79) = 1024;
      *(_DWORD *)v80 = v62[6];
      *(_WORD *)&v80[4] = 1024;
      *(_DWORD *)&v80[6] = HIDWORD(v62[6]);
      v81 = 1024;
      v82 = v62[7];
      v83 = 2049;
      v84 = *((float *)&v62[7] + 1);
      v85 = 2049;
      v86 = *(float *)&v62[8];
      v87 = 1025;
      v88 = HIDWORD(v62[8]);
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#gnssca Submit BaroAltitudeCalibrationInfo session metric to CA,%s,durationSinceStartMonitoringTimeSec,%d,calibrationCountMM,%d,calibrationCountOutdoorContext,%d,appropriateToCalibrateCount,%d,calibrationCountOnlyUsedDEM,%d,calibrationCountUsedDEMandRefPressure,%d,deresFinalLatitude,%{private}.7f,deresFinalLongitude,%{private}.7f,deweightedAreaID,%{private}d", buf, 0x4Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      if (*((char *)a9 + 23) >= 0)
        v55 = (std::string::size_type)a9;
      else
        v55 = (std::string::size_type)*a9;
      LODWORD(v63.__r_.__value_.__l.__data_) = 136317443;
      *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 4) = v55;
      WORD2(v63.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v63.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v62[4]);
      WORD1(v63.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v63.__r_.__value_.__r.__words[2]) = v62[5];
      v64 = 1024;
      v65 = HIDWORD(v62[5]);
      v66 = 1024;
      v67 = v62[6];
      v68 = 1024;
      v69 = HIDWORD(v62[6]);
      v70 = 1024;
      v71 = v62[7];
      v72 = 2049;
      v73 = *((float *)&v62[7] + 1);
      v74 = 2049;
      v75 = *(float *)&v62[8];
      v76 = 1025;
      v77 = HIDWORD(v62[8]);
      LODWORD(v60) = 74;
      v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#gnssca Submit BaroAltitudeCalibrationInfo session metric to CA,%s,durationSinceStartMonitoringTimeSec,%d,calibrationCountMM,%d,calibrationCountOutdoorContext,%d,appropriateToCalibrateCount,%d,calibrationCountOnlyUsedDEM,%d,calibrationCountUsedDEMandRefPressure,%d,deresFinalLatitude,%{private}.7f,deresFinalLongitude,%{private}.7f,deweightedAreaID,%{private}d", &v63, v60);
      sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::submitCalibrationAnalyticsData(const CLDaemonLocation &)::(anonymous class)::operator()(const CLDaemonStats_Type::BarometricAltitudeCalibrationData &, const std::string &) const", "%s\n", v56);
      if (v56 != buf)
        free(v56);
    }
    memset(&v63, 0, sizeof(v63));
    v26 = *((unsigned __int8 *)a9 + 23);
    if ((v26 & 0x80) != 0)
    {
      v28 = a9[1];
      if (v28 != (_QWORD **)7)
      {
        if (v28 != (_QWORD **)8)
        {
          if (v28 != (_QWORD **)9)
            goto LABEL_62;
          v27 = (uint64_t *)*a9;
          goto LABEL_33;
        }
        v33 = **a9;
LABEL_47:
        if (v33 != (_QWORD *)0x68746E6F4D416E49)
          goto LABEL_62;
        v32 = "com.apple.locationd.position.BaroAltitudeCalibrationInAMonth";
        goto LABEL_55;
      }
      if (*(_DWORD *)*a9 != 1463905865 || *(_DWORD *)((char *)*a9 + 3) != 1801807191)
        goto LABEL_62;
    }
    else
    {
      if (v26 != 7)
      {
        if (v26 != 8)
        {
          v27 = (uint64_t *)a9;
          if (v26 != 9)
            goto LABEL_62;
LABEL_33:
          v29 = *v27;
          v30 = *((unsigned __int8 *)v27 + 8);
          if (v29 != 0x68746E6F4D336E49 || v30 != 115)
            goto LABEL_62;
          v32 = "com.apple.locationd.position.BaroAltitudeCalibrationIn3Months";
          goto LABEL_55;
        }
        v33 = *a9;
        goto LABEL_47;
      }
      if (*(_DWORD *)a9 != 1463905865 || *(_DWORD *)((char *)a9 + 3) != 1801807191)
        goto LABEL_62;
    }
    v32 = "com.apple.locationd.position.BaroAltitudeCalibrationInfo";
LABEL_55:
    std::string::assign(&v63, v32);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      v36 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if (!v63.__r_.__value_.__l.__size_)
      {
LABEL_61:
        operator delete(v36);
        goto LABEL_62;
      }
    }
    else
    {
      if (!*((_BYTE *)&v63.__r_.__value_.__s + 23))
        goto LABEL_62;
      v36 = &v63;
    }
    v37 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1017DC00C;
    v79 = COERCE_DOUBLE(&unk_102131FE8);
    *(_QWORD *)v80 = &v61;
    AnalyticsSendEventLazy(v37, buf);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      v36 = (std::string *)v63.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
LABEL_62:
    v38 = sub_1001FD94C();
    sub_1005254E4(v38);
    v39 = sub_1001FD94C();
    sub_1005254E4(v39);
    v40 = sub_1001FD94C();
    sub_1005254E4(v40);
    v41 = sub_1001FD94C();
    sub_1005254E4(v41);
    v42 = sub_1001FD94C();
    sub_1005254E4(v42);
    v43 = sub_1001FD94C();
    sub_1005254E4(v43);
    v44 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 944))(v44);
    *(_QWORD *)(a10 + 24) = 0;
    v45 = (double *)(a10 + 24);
    *(_QWORD *)a10 = 0;
    *(_QWORD *)(a10 + 8) = 0;
    *(_DWORD *)(a10 + 16) = 0;
    v46 = *a11;
    if (*a11)
    {
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      v47 = sub_1000B6F08(v46, (double *)buf);
    }
    else
    {
      v47 = 0.0;
    }
    *v45 = v47;
    v48 = sub_1001FD94C();
    sub_10018A534(v48, a8, (const void *)(a10 + 24));
    v49 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 944))(v49);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v50 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a9 + 23) >= 0)
        v51 = a9;
      else
        v51 = *a9;
      v52 = *v45;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v51;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v52;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,RestoreStartMonitoringCalibrationTimeForAnalytics,%{public}lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      if (*((char *)a9 + 23) >= 0)
        v57 = a9;
      else
        v57 = *a9;
      v58 = *v45;
      LODWORD(v63.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
      WORD2(v63.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&v63.__r_.__value_.__r.__words[1] + 6) = v58;
      LODWORD(v60) = 22;
      v59 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,RestoreStartMonitoringCalibrationTimeForAnalytics,%{public}lf", &v63, v60);
      sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::submitCalibrationAnalyticsData(const CLDaemonLocation &)::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, const double, BarometricAltitudeCalibrationAnalyticsData &, const std::unique_ptr<CLBarometricAltimeterCore> &) const", "%s\n", v59);
      if (v59 != buf)
        free(v59);
    }
    if (SBYTE3(v62[4]) < 0)
      operator delete(*(void **)((char *)&v62[1] + 4));
  }
}

void sub_1017DA1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017DA20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int *a7)
{
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  NSObject *v29;
  uint64_t *v30;
  int v31;
  NSObject *v32;
  uint64_t *v33;
  int v34;
  NSObject *v35;
  uint64_t *v36;
  int v37;
  NSObject *v38;
  uint64_t *v39;
  int v40;
  NSObject *v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  uint64_t *v48;
  int v49;
  const char *v50;
  uint8_t *v51;
  uint64_t *v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  uint64_t *v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  uint64_t *v60;
  int v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  __int16 v67;
  int v68;
  uint8_t buf[4];
  uint64_t *v70;
  __int16 v71;
  int v72;

  v14 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v15 = sub_1001C1194(v14, a1, buf);
  v16 = *(_DWORD *)buf;
  if (!v15)
    v16 = 0;
  *a7 = v16;
  v17 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v18 = sub_1001C1194(v17, a2, buf);
  v19 = *(_DWORD *)buf;
  if (!v18)
    v19 = 0;
  a7[1] = v19;
  v20 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v21 = sub_1001C1194(v20, a3, buf);
  v22 = *(_DWORD *)buf;
  if (!v21)
    v22 = 0;
  a7[2] = v22;
  v23 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v24 = sub_1001C1194(v23, a4, buf);
  v25 = *(_DWORD *)buf;
  if (!v24)
    v25 = 0;
  a7[3] = v25;
  v26 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  v27 = sub_1001C1194(v26, a5, buf);
  v28 = *(_DWORD *)buf;
  if (!v27)
    v28 = 0;
  a7[4] = v28;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v29 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v30 = a6;
    else
      v30 = (uint64_t *)*a6;
    v31 = *a7;
    *(_DWORD *)buf = 136315394;
    v70 = v30;
    v71 = 1026;
    v72 = v31;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountMM,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v44 = a6;
    else
      v44 = (uint64_t *)*a6;
    v45 = *a7;
    v65 = 136315394;
    v66 = v44;
    v67 = 1026;
    v68 = v45;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountMM,%{public}d", &v65, 18);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v32 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v33 = a6;
    else
      v33 = (uint64_t *)*a6;
    v34 = a7[1];
    *(_DWORD *)buf = 136315394;
    v70 = v33;
    v71 = 1026;
    v72 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountOutdoorContext,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v48 = a6;
    else
      v48 = (uint64_t *)*a6;
    v49 = a7[1];
    v65 = 136315394;
    v66 = v48;
    v67 = 1026;
    v68 = v49;
    LODWORD(v64) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountOutdoorContext,%{public}d", &v65, v64);
    v51 = (uint8_t *)v50;
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v50);
    if (v51 != buf)
      free(v51);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v35 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v36 = a6;
    else
      v36 = (uint64_t *)*a6;
    v37 = a7[2];
    *(_DWORD *)buf = 136315394;
    v70 = v36;
    v71 = 1026;
    v72 = v37;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadAppropriateToCalibrateCount,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v52 = a6;
    else
      v52 = (uint64_t *)*a6;
    v53 = a7[2];
    v65 = 136315394;
    v66 = v52;
    v67 = 1026;
    v68 = v53;
    LODWORD(v64) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadAppropriateToCalibrateCount,%{public}d", &v65, v64);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v38 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v39 = a6;
    else
      v39 = (uint64_t *)*a6;
    v40 = a7[3];
    *(_DWORD *)buf = 136315394;
    v70 = v39;
    v71 = 1026;
    v72 = v40;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountOnlyUsedDEM,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v56 = a6;
    else
      v56 = (uint64_t *)*a6;
    v57 = a7[3];
    v65 = 136315394;
    v66 = v56;
    v67 = 1026;
    v68 = v57;
    LODWORD(v64) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountOnlyUsedDEM,%{public}d", &v65, v64);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v41 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v42 = a6;
    else
      v42 = (uint64_t *)*a6;
    v43 = a7[4];
    *(_DWORD *)buf = 136315394;
    v70 = v42;
    v71 = 1026;
    v72 = v43;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountUsedDEMandRefPressure,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v60 = a6;
    else
      v60 = (uint64_t *)*a6;
    v61 = a7[4];
    v65 = 136315394;
    v66 = v60;
    v67 = 1026;
    v68 = v61;
    LODWORD(v64) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountUsedDEMandRefPressure,%{public}d", &v65, v64);
    v63 = (uint8_t *)v62;
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v62);
    if (v63 != buf)
      free(v63);
  }
}

void sub_1017DAADC(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, uint64_t *a6, unsigned int *a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t *v25;
  unsigned int v26;
  NSObject *v27;
  uint64_t *v28;
  unsigned int v29;
  NSObject *v30;
  uint64_t *v31;
  unsigned int v32;
  NSObject *v33;
  uint64_t *v34;
  unsigned int v35;
  NSObject *v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int v40;
  char *v41;
  uint64_t *v42;
  unsigned int v43;
  char *v44;
  uint64_t *v45;
  unsigned int v46;
  char *v47;
  uint64_t *v48;
  unsigned int v49;
  char *v50;
  uint64_t *v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  __int16 v57;
  unsigned int v58;
  uint8_t buf[4];
  uint64_t *v60;
  __int16 v61;
  unsigned int v62;

  v14 = sub_1001FD94C();
  sub_10018AAE4(v14, a1, a7);
  v15 = sub_1001FD94C();
  v16 = a7 + 1;
  sub_10018AAE4(v15, a2, a7 + 1);
  v17 = sub_1001FD94C();
  v18 = a7 + 2;
  sub_10018AAE4(v17, a3, a7 + 2);
  v19 = sub_1001FD94C();
  v20 = a7 + 3;
  sub_10018AAE4(v19, a4, a7 + 3);
  v21 = sub_1001FD94C();
  v22 = a7 + 4;
  sub_10018AAE4(v21, a5, a7 + 4);
  v23 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 944))(v23);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v24 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v25 = a6;
    else
      v25 = (uint64_t *)*a6;
    v26 = *a7;
    *(_DWORD *)buf = 136315394;
    v60 = v25;
    v61 = 1026;
    v62 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountMM,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v39 = a6;
    else
      v39 = (uint64_t *)*a6;
    v40 = *a7;
    v55 = 136315394;
    v56 = v39;
    v57 = 1026;
    v58 = v40;
    v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountMM,%{public}d", &v55, 18);
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v27 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v28 = a6;
    else
      v28 = (uint64_t *)*a6;
    v29 = *v16;
    *(_DWORD *)buf = 136315394;
    v60 = v28;
    v61 = 1026;
    v62 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountOutdoorContext,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v42 = a6;
    else
      v42 = (uint64_t *)*a6;
    v43 = *v16;
    v55 = 136315394;
    v56 = v42;
    v57 = 1026;
    v58 = v43;
    LODWORD(v54) = 18;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountOutdoorContext,%{public}d", &v55, v54);
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v30 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v31 = a6;
    else
      v31 = (uint64_t *)*a6;
    v32 = *v18;
    *(_DWORD *)buf = 136315394;
    v60 = v31;
    v61 = 1026;
    v62 = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreAppropriateToCalibrateCount,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v45 = a6;
    else
      v45 = (uint64_t *)*a6;
    v46 = *v18;
    v55 = 136315394;
    v56 = v45;
    v57 = 1026;
    v58 = v46;
    LODWORD(v54) = 18;
    v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreAppropriateToCalibrateCount,%{public}d", &v55, v54);
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v47);
    if (v47 != (char *)buf)
      free(v47);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v33 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v34 = a6;
    else
      v34 = (uint64_t *)*a6;
    v35 = *v20;
    *(_DWORD *)buf = 136315394;
    v60 = v34;
    v61 = 1026;
    v62 = v35;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountOnlyUsedDEM,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v48 = a6;
    else
      v48 = (uint64_t *)*a6;
    v49 = *v20;
    v55 = 136315394;
    v56 = v48;
    v57 = 1026;
    v58 = v49;
    LODWORD(v54) = 18;
    v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountOnlyUsedDEM,%{public}d", &v55, v54);
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v50);
    if (v50 != (char *)buf)
      free(v50);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v36 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0)
      v37 = a6;
    else
      v37 = (uint64_t *)*a6;
    v38 = *v22;
    *(_DWORD *)buf = 136315394;
    v60 = v37;
    v61 = 1026;
    v62 = v38;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountUsedDEMandRefPressure,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    if (*((char *)a6 + 23) >= 0)
      v51 = a6;
    else
      v51 = (uint64_t *)*a6;
    v52 = *v22;
    v55 = 136315394;
    v56 = v51;
    v57 = 1026;
    v58 = v52;
    LODWORD(v54) = 18;
    v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountUsedDEMandRefPressure,%{public}d", &v55, v54);
    sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v53);
    if (v53 != (char *)buf)
      free(v53);
  }
}

void sub_1017DB35C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  const char *v12;
  NSObject *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint8_t buf[4];
  _BOOL4 v23;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,LS Notification,type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v15 = *a3;
    LODWORD(v21[0]) = 67240192;
    HIDWORD(v21[0]) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,LS Notification,type,%{public}d", v21, 8);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (*a3 == 4)
  {
    sub_1017DB798(a1, *(_DWORD *)(a4 + 188));
    *(_DWORD *)(a1 + 3736) = *(_DWORD *)(a4 + 188);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v10 = *(_DWORD *)(a1 + 3736) != 0;
      *(_DWORD *)buf = 67240192;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,LS,location service enabled,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v11 = *(_DWORD *)(a1 + 3736) != 0;
      LODWORD(v21[0]) = 67240192;
      HIDWORD(v21[0]) = v11;
      LODWORD(v20) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,LS,location service enabled,%{public}d", v21, v20, v21[0]);
LABEL_28:
      v19 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v14 = *a3;
      *(_DWORD *)buf = 67240192;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BaroAlt,#Warning,unhandled LS notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v18 = *a3;
      LODWORD(v21[0]) = 67240192;
      HIDWORD(v21[0]) = v18;
      LODWORD(v20) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,#Warning,unhandled LS notification,%{public}d", v21, v20, v21[0]);
      goto LABEL_28;
    }
  }
}

void sub_1017DB798(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  double v6;
  int v7;
  _BYTE *v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  std::string *v17;
  char *v18;
  char *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  std::string v23;
  double v24;
  _BYTE __p[18];
  __int16 v26;
  std::string *v27;
  uint8_t buf[4];
  _BYTE v29[14];
  __int16 v30;
  _BYTE *v31;

  if (!a2 && *(_DWORD *)(a1 + 3736) == 1)
  {
    v24 = sub_1001FCBB4();
    sub_1000D796C((_QWORD *)(a1 + 3688), &v24);
    v3 = *(_QWORD *)(a1 + 3728);
    if (v3 >= 4)
    {
      v4 = *(_QWORD *)(a1 + 3720);
      *(_QWORD *)(a1 + 3728) = v3 - 1;
      *(_QWORD *)(a1 + 3720) = v4 + 1;
      sub_10047F604(a1 + 3688, 1);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v6 = v24;
      v7 = *(_DWORD *)(a1 + 3728);
      sub_1017D3CD8((_QWORD *)(a1 + 3688), (std::string *)__p);
      v8 = SBYTE3(v27) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134349570;
      *(double *)v29 = v6;
      *(_WORD *)&v29[8] = 1026;
      *(_DWORD *)&v29[10] = v7;
      v30 = 2082;
      v31 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,LS,time,%{public}.1lf,recent LS toggles,%{public}d,queue,%{public}s", buf, 0x1Cu);
      if (SBYTE3(v27) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v14 = qword_1022A0028;
      v15 = v24;
      v16 = *(_DWORD *)(a1 + 3728);
      sub_1017D3CD8((_QWORD *)(a1 + 3688), &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v23;
      else
        v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 134349570;
      *(double *)&__p[4] = v15;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v16;
      v26 = 2082;
      v27 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 1, "BaroAlt,LS,time,%{public}.1lf,recent LS toggles,%{public}d,queue,%{public}s", __p, 28);
      v19 = v18;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::handleLocationServiceChange(const CLCommonLocationServicesEnabled)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    if (*(_QWORD *)(a1 + 3728) == 3
      && *(_QWORD *)a1
      && sub_1000B7150(v24, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 3696) + ((*(_QWORD *)(a1 + 3720) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(a1 + 3720) & 0x1FFLL)), 315360000.0) < 30.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v29 = 3;
        *(_WORD *)&v29[4] = 2050;
        *(_QWORD *)&v29[6] = 0x403E000000000000;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BaroAlt,LS,clear baro cache after receiving %{public}d LS notifications during last %{public}lf seconds", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        *(_QWORD *)__p = 0x304020200;
        *(_WORD *)&__p[8] = 2050;
        *(_QWORD *)&__p[10] = 0x403E000000000000;
        LODWORD(v22) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "BaroAlt,LS,clear baro cache after receiving %{public}d LS notifications during last %{public}lf seconds", __p, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::handleLocationServiceChange(const CLCommonLocationServicesEnabled)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      sub_1017CF3A0((_QWORD *)a1, 1, v24);
      v10 = *(void ***)(a1 + 3696);
      v11 = *(_QWORD *)(a1 + 3704);
      *(_QWORD *)(a1 + 3728) = 0;
      v12 = v11 - (_QWORD)v10;
      if (v12 >= 0x11)
      {
        do
        {
          operator delete(*v10);
          v10 = (void **)(*(_QWORD *)(a1 + 3696) + 8);
          *(_QWORD *)(a1 + 3696) = v10;
          v12 = *(_QWORD *)(a1 + 3704) - (_QWORD)v10;
        }
        while (v12 > 0x10);
      }
      if (v12 >> 3 == 1)
      {
        v13 = 256;
      }
      else
      {
        if (v12 >> 3 != 2)
        {
LABEL_29:
          sub_1017C9950(a1);
          return;
        }
        v13 = 512;
      }
      *(_QWORD *)(a1 + 3720) = v13;
      goto LABEL_29;
    }
  }
}

void sub_1017DBC78(uint64_t a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  double v7;
  uint8_t buf[4];
  double v9;

  *(double *)(a1 + 3656) = a2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,setRealTimeHarvestTriggered,%{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v6 = 134349056;
    v7 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,setRealTimeHarvestTriggered,%{public}.3lf", &v6, 12);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::setRealTimeHarvestTriggered(const CFTimeInterval)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_1017DBE24(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1017DBE50(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1017DBE7C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

double **sub_1017DBEA8@<X0>(double **result@<X0>, double *a2@<X1>, double *a3@<X3>, double ***a4@<X8>)
{
  double **v4;
  double **v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double **v14;
  double v15;
  double v16;
  double v17;

  *a4 = result;
  a4[1] = (double **)a2;
  v4 = (double **)(a4 + 1);
  a4[2] = result;
  a4[3] = (double **)a2;
  v5 = (double **)(a4 + 3);
  if (a2 != a3)
  {
    v6 = a2 + 1;
    v7 = *result;
    if ((char *)(a2 + 1) - (char *)*result == 4096)
    {
      v8 = result[1];
      ++result;
      v7 = v8;
      v6 = v8;
    }
    if (v6 != a3)
    {
      if (*v6 >= *a2)
        v9 = 3;
      else
        v9 = 1;
      if (*v6 >= *a2)
        v10 = v6;
      else
        v10 = a2;
      if (*v6 >= *a2)
        v11 = a2;
      else
        v11 = v6;
      a4[2 * (*v6 >= *a2)] = result;
      a4[v9] = (double **)v6;
      while (1)
      {
        v12 = v6 + 1;
        if ((char *)(v6 + 1) - (char *)v7 == 4096)
        {
          v13 = result[1];
          ++result;
          v7 = v13;
          v14 = result;
          v12 = v13;
        }
        else
        {
          v14 = result;
        }
        if (v12 == a3)
          return result;
        v6 = v12 + 1;
        result = v14;
        if ((char *)(v12 + 1) - (char *)v7 == 4096)
        {
          result = v14 + 1;
          v6 = v14[1];
        }
        if (v6 == a3)
        {
          if (*v12 < *v11 || (a4 += 2, v4 = v5, *v12 >= *v10))
          {
            *a4 = v14;
            *v4 = v12;
          }
          return result;
        }
        v15 = *v6;
        v16 = *v12;
        v17 = *v11;
        if (*v6 >= *v12)
        {
          if (v16 < v17)
          {
            *a4 = v14;
            a4[1] = (double **)v12;
            v11 = v12;
          }
          v14 = result;
          v12 = v6;
          if (v15 >= *v10)
          {
LABEL_30:
            a4[2] = v14;
            *v5 = v12;
            v10 = v12;
          }
        }
        else
        {
          if (v15 < v17)
          {
            *a4 = result;
            a4[1] = (double **)v6;
            v11 = v6;
          }
          if (v16 >= *v10)
            goto LABEL_30;
        }
        v7 = *result;
      }
    }
  }
  return result;
}

NSDictionary *sub_1017DC00C(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("calibrationCountMM");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v3[1] = CFSTR("calibrationCountOutdoorContext");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v3[2] = CFSTR("appropriateToCalibrateCount");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v3[3] = CFSTR("calibrationCountOnlyUsedDEM");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  v3[4] = CFSTR("calibrationCountUsedDEMandRefPressure");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 60));
  v3[5] = CFSTR("deweightedAreaID");
  v4[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

void sub_1017DC138(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  if (a2)
  {
    sub_100427A00(a2 + 75);
    sub_100427A00(a2 + 69);
    v3 = a2[68];
    a2[68] = 0;
    if (v3)
      operator delete();
    v4 = (void *)a2[15];
    if (v4)
    {
      a2[16] = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

_QWORD *sub_1017DC1B0(_QWORD *a1, _QWORD *a2, _BYTE *a3, _QWORD *a4, _BYTE *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 102 * (a4 - a2)
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  return sub_1017DC200(a1, a2, a3, v5);
}

_QWORD *sub_1017DC200(_QWORD *a1, _QWORD *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v8;
  _BYTE **v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _BYTE **v20;
  _BYTE *v21;
  _QWORD *v22;
  _BYTE *v23;

  v8 = a1[5];
  if (v8 >= a4)
  {
    v15 = a1[4];
    v16 = a1[1];
    v17 = (_QWORD *)(v16 + 8 * (v15 / 0x66));
    if (a1[2] == v16)
      v18 = 0;
    else
      v18 = *v17 + 40 * (v15 % 0x66);
    v22 = a2;
    v23 = a3;
    sub_1004CE08C(&v22, a4);
    v20 = (_BYTE **)v22;
    v21 = v23;
    v22 = v17;
    v23 = (_BYTE *)v18;
    sub_10107031C(a2, a3, v20, v21, (uint64_t)&v22);
    return (_QWORD *)sub_1017DC4D0((uint64_t)a1, v22, (uint64_t)v23);
  }
  else
  {
    v22 = a2;
    v23 = a3;
    sub_1004CE08C(&v22, v8);
    v9 = (_BYTE **)v22;
    v10 = (__int128 *)v23;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (_QWORD *)(v12 + 8 * (v11 / 0x66));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *v13 + 40 * (v11 % 0x66);
    v22 = v13;
    v23 = (_BYTE *)v14;
    sub_10107031C(a2, a3, v9, v10, (uint64_t)&v22);
    return sub_1017DC358(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_1017DC358(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 102 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1017DC634(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x66));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 40 * (v11 % 0x66);
  v24 = (_QWORD *)(v8 + 8 * (v11 / 0x66));
  v25 = v14;
  result = sub_1004CE08C(&v24, a4);
  v16 = v25;
  if (v14 != v25)
  {
    v17 = v24;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4080;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = v14;
        do
        {
          v20 = *a3;
          v21 = a3[1];
          *(_QWORD *)(v19 + 32) = *((_QWORD *)a3 + 4);
          *(_OWORD *)v19 = v20;
          *(_OWORD *)(v19 + 16) = v21;
          a3 = (__int128 *)((char *)a3 + 40);
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4080)
          {
            v22 = (__int128 *)a2[1];
            ++a2;
            a3 = v22;
          }
          v19 += 40;
        }
        while (v19 != v18);
      }
      a1[5] -= 0x3333333333333333 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
  }
  return result;
}

uint64_t sub_1017DC4D0(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x66));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 40 * (v5 % 0x66);
  if (v9 != a3)
  {
    v10 = 102 * (v8 - a2) - 0x3333333333333333 * ((uint64_t)(v9 - *v8) >> 3);
    v11 = (a3 - *a2) >> 3;
    v12 = v10 + 0x3333333333333333 * v11;
    if (v12 >= 1)
    {
      v13 = (_QWORD *)(v6 + 8 * (v4 / 0x66));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *v13 + 40 * (v4 % 0x66);
      if (a3 == v14)
        v15 = 0;
      else
        v15 = 102 * (a2 - v13) - 0x3333333333333333 * v11 + 0x3333333333333333 * ((uint64_t)(v14 - *v13) >> 3);
      v16[0] = v13;
      v16[1] = v14;
      sub_1004CE08C(v16, v15);
      v3[5] -= v12;
      do
        result = sub_1004CE194(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_1017DC634(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x66)
    v6 = v5 / 0x66 + 1;
  else
    v6 = v5 / 0x66;
  v7 = a1[4];
  if (v6 >= v7 / 0x66)
    v8 = v7 / 0x66;
  else
    v8 = v6;
  if (v6 <= v7 / 0x66)
  {
    for (a1[4] = v7 - 102 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 101;
          else
            v64 = 102;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 102 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -102 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1017DCB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1017DCBE8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017DCD50(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1017DCD60()
{
  operator delete();
}

_QWORD *sub_1017DCD74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CF698;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DCDA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CF698;
  a2[1] = v2;
  return result;
}

void sub_1017DCDC4(uint64_t a1, float32x2_t *a2, _BYTE *a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*a3)
  {
    sub_1017D3A08(*(_QWORD *)(a1 + 8), a2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#Warning,BaroAlt,pressure data not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#Warning,BaroAlt,pressure data not available", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "auto CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)::(anonymous class)::operator()(const CLPressureDataManager::CLPressureUpdateToBaro &, BOOL) const", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_1017DCF80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DCFBC()
{
}

void sub_1017DCFC8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0020 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
    }
    v1 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
    }
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BarometricAltitude/CLBarometricAltimeter.mm", 400, "initPressureObjects");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  }
}

uint64_t sub_1017DD19C()
{
  qword_10230FAE8 = 0;
  unk_10230FAF0 = 0;
  qword_10230FAF8 = 0;
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FAE8, (void *)&_mh_execute_header);
}

double sub_1017DD1C0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021CF728;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 88) = _Q1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_DWORD *)(a1 + 208) = -1;
  *(_QWORD *)(a1 + 244) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_DWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = a1 + 488;
  *(_QWORD *)(a1 + 645) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 824) = 11;
  *(_QWORD *)(a1 + 828) = -1;
  *(_QWORD *)(a1 + 836) = -1;
  *(_QWORD *)(a1 + 844) = 0xBF800000BF800000;
  *(_DWORD *)(a1 + 852) = 0;
  *(_WORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1068) = xmmword_101CDB950;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1115) = 0;
  *(_OWORD *)(a1 + 1100) = 0u;
  *(_OWORD *)(a1 + 1124) = xmmword_101BDBEE0;
  *(_QWORD *)(a1 + 1144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1152) = -1;
  *(_BYTE *)(a1 + 1156) = 0;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_BYTE *)(a1 + 1216) = 1;
  result = NAN;
  *(_QWORD *)(a1 + 1224) = 0xFFFFFFFF00000001;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1272) = -1;
  *(_QWORD *)(a1 + 1264) = -1;
  *(_QWORD *)(a1 + 1256) = -1;
  *(_QWORD *)(a1 + 1248) = -1;
  *(_QWORD *)(a1 + 1283) = 0;
  *(_QWORD *)(a1 + 1276) = 0;
  *(_QWORD *)(a1 + 1292) = 0x40A0000042480000;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1320) = a1 + 1328;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1592) = 0;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_WORD *)(a1 + 1664) = 0;
  *(_BYTE *)(a1 + 1666) = 1;
  return result;
}

uint64_t sub_1017DD414(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1021CF728;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q1;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_DWORD *)(a1 + 208) = -1;
  *(_QWORD *)(a1 + 244) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_DWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = a1 + 488;
  *(_QWORD *)(a1 + 645) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 824) = 11;
  *(_QWORD *)(a1 + 828) = -1;
  *(_QWORD *)(a1 + 836) = -1;
  *(_QWORD *)(a1 + 844) = 0xBF800000BF800000;
  *(_DWORD *)(a1 + 852) = 0;
  *(_WORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1068) = xmmword_101CDB950;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1115) = 0;
  *(_OWORD *)(a1 + 1100) = 0u;
  *(_OWORD *)(a1 + 1124) = xmmword_101BDBEE0;
  *(_QWORD *)(a1 + 1144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1152) = -1;
  *(_BYTE *)(a1 + 1156) = 0;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_BYTE *)(a1 + 1216) = 1;
  *(_QWORD *)(a1 + 1224) = 0xFFFFFFFF00000001;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1272) = -1;
  *(_QWORD *)(a1 + 1264) = -1;
  *(_QWORD *)(a1 + 1256) = -1;
  *(_QWORD *)(a1 + 1248) = -1;
  *(_QWORD *)(a1 + 1283) = 0;
  *(_QWORD *)(a1 + 1276) = 0;
  *(_QWORD *)(a1 + 1292) = 0x40A0000042480000;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1320) = *a2;
  v23 = a1 + 1328;
  v24 = a2 + 1;
  v25 = a2[1];
  *(_QWORD *)(a1 + 1328) = v25;
  v26 = a2[2];
  *(_QWORD *)(a1 + 1336) = v26;
  if (v26)
  {
    *(_QWORD *)(v25 + 16) = v23;
    *a2 = v24;
    *v24 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1320) = v23;
  }
  sub_100270E34(a1 + 1344, a3);
  sub_100270E34(a1 + 1376, a4);
  sub_100270E34(a1 + 1408, a5);
  sub_100270E34(a1 + 1440, a6);
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  sub_100270E34(a1 + 1536, a7);
  sub_100270E34(a1 + 1568, a8);
  sub_100270E34(a1 + 1600, a9);
  sub_100270E34(a1 + 1632, a10);
  *(_BYTE *)(a1 + 1664) = a11;
  *(_BYTE *)(a1 + 1665) = a12;
  *(_BYTE *)(a1 + 1666) = 1;
  return a1;
}

void sub_1017DD75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v20 = (_QWORD *)v11[203];
  if (v20 == v15)
  {
    v21 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
    v15 = (_QWORD *)v11[203];
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v21))(v15);
LABEL_6:
  v22 = (_QWORD *)v11[199];
  if (v22 == v18)
  {
    v23 = 4;
    v22 = v18;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_11:
  v24 = (_QWORD *)v11[195];
  if (v24 == v19)
  {
    v25 = 4;
    v24 = v19;
  }
  else
  {
    if (!v24)
      goto LABEL_16;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_16:
  v26 = (_QWORD *)v11[191];
  if (v26 == v11 + 188)
  {
    v27 = 4;
    v26 = v11 + 188;
  }
  else
  {
    if (!v26)
      goto LABEL_21;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_21:
  v28 = (_QWORD *)v11[187];
  if (v28 == v11 + 184)
  {
    v29 = 4;
    v28 = v11 + 184;
  }
  else
  {
    if (!v28)
      goto LABEL_26;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_26:
  v30 = (_QWORD *)v11[183];
  if (v30 == v17)
  {
    v31 = 4;
    v30 = v17;
  }
  else
  {
    if (!v30)
      goto LABEL_31;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_31:
  v32 = (_QWORD *)v11[179];
  if (v32 == v16)
  {
    v33 = 4;
    v32 = v16;
  }
  else
  {
    if (!v32)
      goto LABEL_36;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_36:
  v34 = (_QWORD *)v11[175];
  if (v34 == v14)
  {
    v35 = 4;
    v34 = v14;
  }
  else
  {
    if (!v34)
      goto LABEL_41;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_41:
  v36 = (_QWORD *)v11[171];
  if (v36 == v13)
  {
    v37 = 4;
    v36 = v13;
  }
  else
  {
    if (!v36)
      goto LABEL_46;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_46:
  sub_10085B268(a10, *v12);
  sub_10002E6B0(v10);
  _Unwind_Resume(a1);
}

void sub_1017DD93C()
{
  JUMPOUT(0x1017DD8F4);
}

void sub_1017DD944()
{
  JUMPOUT(0x1017DD920);
}

uint64_t sub_1017DD94C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  *(_QWORD *)a1 = &off_1021CF728;
  v2 = (_QWORD *)(a1 + 1632);
  v3 = *(_QWORD **)(a1 + 1656);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 1624);
  if (v5 == (_QWORD *)(a1 + 1600))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 1600);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 1592);
  if (v7 == (_QWORD *)(a1 + 1568))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 1568);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(a1 + 1560);
  if (v9 == (_QWORD *)(a1 + 1536))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 1536);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = *(_QWORD **)(a1 + 1528);
  if (v11 == (_QWORD *)(a1 + 1504))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 1504);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = *(_QWORD **)(a1 + 1496);
  if (v13 == (_QWORD *)(a1 + 1472))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 1472);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = *(_QWORD **)(a1 + 1464);
  if (v15 == (_QWORD *)(a1 + 1440))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 1440);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = *(_QWORD **)(a1 + 1432);
  if (v17 == (_QWORD *)(a1 + 1408))
  {
    v18 = 4;
    v17 = (_QWORD *)(a1 + 1408);
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = *(_QWORD **)(a1 + 1400);
  if (v19 == (_QWORD *)(a1 + 1376))
  {
    v20 = 4;
    v19 = (_QWORD *)(a1 + 1376);
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_46:
  v21 = *(_QWORD **)(a1 + 1368);
  if (v21 == (_QWORD *)(a1 + 1344))
  {
    v22 = 4;
    v21 = (_QWORD *)(a1 + 1344);
    goto LABEL_50;
  }
  if (v21)
  {
    v22 = 5;
LABEL_50:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  sub_10085B268(a1 + 1320, *(_QWORD **)(a1 + 1328));
  sub_10002E6B0(a1 + 8);
  return a1;
}

_QWORD *sub_1017DDB70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 1496))
  {
    v2 = (_QWORD *)(a1 + 1472);
    sub_10023A554(a1, 0);
    v3 = *(_QWORD **)(a1 + 1496);
    *(_QWORD *)(a1 + 1496) = 0;
    if (v3 == v2)
    {
      v4 = 4;
      v3 = (_QWORD *)(a1 + 1472);
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_7:
  result = *(_QWORD **)(a1 + 1528);
  *(_QWORD *)(a1 + 1528) = 0;
  if (result == (_QWORD *)(a1 + 1504))
  {
    v6 = 4;
    result = (_QWORD *)(a1 + 1504);
  }
  else
  {
    if (!result)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

uint64_t *sub_1017DDC10(uint64_t a1, int a2)
{
  uint64_t *result;
  int v3;
  int *v4;

  v3 = a2;
  v4 = &v3;
  result = sub_101791254((uint64_t **)(a1 + 1320), &v3, (uint64_t)&unk_101B9EB60, &v4)[8];
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 48))(result);
  return result;
}

void sub_1017DDC64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *(_QWORD *)(a1 + 1464);
  if (v3)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    v10 = *a2;
    v11 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      v3 = *(_QWORD *)(a1 + 1464);
      if (!v3)
        sub_10025FD1C();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v10);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1017DDD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1017DDD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  _OWORD v9[4];
  uint64_t v10;
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 1528);
  if (v2)
  {
    v3 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v3;
    v10 = *(_QWORD *)(a2 + 64);
    v4 = *(_OWORD *)(a2 + 48);
    v9[2] = *(_OWORD *)(a2 + 32);
    v9[3] = v4;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 48))(v2, v9);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#tt, Time transfer callback is not set.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFA30);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, Time transfer callback is not set.", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDeviceFacade::notifyClient(GNSS::TimeTransferPulseTime)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1017DDED4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 1666))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a2 + 4);
      v6 = *(_QWORD *)(a2 + 12);
      v7 = *(_QWORD *)(a2 + 20);
      v8[0] = 68289795;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2049;
      v12 = v5;
      v13 = 2049;
      v14 = v6;
      v15 = 2050;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#injectPositionAssistance\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"horAcc\":\"%{public}f\"}", (uint8_t *)v8, 0x30u);
    }
    *(_BYTE *)(a1 + 1666) = 0;
  }
}

uint64_t sub_1017DDFF0(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  sub_1017DD1C0(a1);
  *v2 = &off_1021CF8A8;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Created a gnss device for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Created a gnss device for a target that either does not have gnss or the gnss hardware is unknown", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "CLGnssUnknownDevice::CLGnssUnknownDevice()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return a1;
}

void sub_1017DE194(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1017DD94C(v1);
  _Unwind_Resume(a1);
}

void sub_1017DE1B0()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to start gnss for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to start gnss for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::start(const DeviceOperatingContext_t &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DE334()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to stop gnss for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to stop gnss for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::stop()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DE4B8()
{
  NSObject *v0;
  NSObject *v1;
  int v2;
  int v3;
  __int16 v4;
  const char *v5;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v2 = 68289026;
    v3 = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tried to engage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  }
  v1 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v2 = 68289026;
    v3 = 0;
    v4 = 2082;
    v5 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to engage gnss for a target that either does not have gnss or the gnss hardware is unknown", "{\"msg%{public}.0s\":\"Tried to engage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
  }
}

void sub_1017DE620()
{
  NSObject *v0;
  NSObject *v1;
  int v2;
  int v3;
  __int16 v4;
  const char *v5;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v2 = 68289026;
    v3 = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tried to disengage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  }
  v1 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v2 = 68289026;
    v3 = 0;
    v4 = 2082;
    v5 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to disengage gnss for a target that either does not have gnss or the gnss hardware is unknown", "{\"msg%{public}.0s\":\"Tried to disengage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
  }
}

uint64_t sub_1017DE788()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to update operating context for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to update operating context for a target that either does not have gnss or the gnss hardware is unknown", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGnssUnknownDevice::isRestartRequired(const DeviceOperatingContext_t &, const DeviceOperatingContext_t &)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_1017DE910(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1017DE918(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t *v8;
  uint8_t buf[4];
  uint64_t *v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v4 = a2;
    if (*((char *)a2 + 23) < 0)
      v4 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446210;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_FILE: Tried to inject an assistance file, %{public}s, for a target that either does not have gnss or the gnss hardware is unknown", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v7 = 136446210;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_FILE: Tried to inject an assistance file, %{public}s, for a target that either does not have gnss or the gnss hardware is unknown", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceFile(std::string)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_1017DEADC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1017DEAE4(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t *v8;
  uint8_t buf[4];
  uint64_t *v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v4 = a2;
    if (*((char *)a2 + 23) < 0)
      v4 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446210;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_FILE: Tried to inject a RTI file, %{public}s, for a target that either does not have gnss or the gnss hardware is unknown", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v7 = 136446210;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_FILE: Tried to inject a RTI file, %{public}s, for a target that either does not have gnss or the gnss hardware is unknown", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectRtiFile(std::string)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_1017DECA8()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectTimeAssistance for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to injectTimeAssistance for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DEE2C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Trying to feed assistance for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Trying to feed assistance for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DEFB0()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectAssistanceMapVector for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to injectAssistanceMapVector for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceMapVector(CLGpsAssistant_Type::DirectionOfTravelAssistance)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DF134()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectMapMatchedPosition for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to injectMapMatchedPosition for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectMapMatchedPosition(CLGpsAssistant_Type::MapMatchedPositionAssistance)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DF2B8()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectAssistanceMotion for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to injectAssistanceMotion for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DF43C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Pedometer Assistance: attempted to provide pedometer speed assistance for a target with unknown or nonexistent GNSS hardware.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Pedometer Assistance: attempted to provide pedometer speed assistance for a target with unknown or nonexistent GNSS hardware.", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DF5C0()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Pedometer Assistance: attempted to provide pedometer speed constraint assistance for a target with unknown or nonexistent GNSS hardware.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Pedometer Assistance: attempted to provide pedometer speed constraint assistance for a target with unknown or nonexistent GNSS hardware.", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistancePedometerSpeedConstraint(const CLGNSSPedometerConstraintAssistanceCommand &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DF744()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectRawSensorSamples for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to injectRawSensorSamples for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectRawSensorSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DF8C8()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "No gnss HW or the gnss HW is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "No gnss HW or the gnss HW is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceSignalEnv(CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DFA4C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to startTimeTransfer for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to startTimeTransfer for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::startTimeTransfer(TimeTransferStateCallback, TimeTransferCallback)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DFBD0()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to stopTimeTransfer for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to stopTimeTransfer for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::stopTimeTransfer()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DFD54()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to send timeTransferPulse for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to send timeTransferPulse for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::timeTransferPulse(const BOOL)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017DFED8(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "does not have gnss or the gnss hardware is unknown,isAllowed,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v6[0] = 67240192;
    v6[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "does not have gnss or the gnss hardware is unknown,isAllowed,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::sendAllowGnssDwellDutyCycling(BOOL)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_1017E0080()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectAssistanceDem for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Tried to injectAssistanceDem for a target that either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0204()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::enableLocationServices()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0388()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::disableLocationServices()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E050C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::resetPrivacyInfo()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0690()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0814()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::updateDeviceOperatingContext(const DeviceOperatingContext_t &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0998()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0B1C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0CA0()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::handleNilrLockoutStatus(const BOOL)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E0E24()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::resetControlPlaneStatus()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

uint64_t sub_1017E0FA8()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGnssUnknownDevice::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_1017E1130()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA30);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Target either does not have gnss or the gnss hardware is unknown", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017E12B8(uint64_t a1)
{
  sub_1017DD94C(a1);
  operator delete();
}

void sub_1017E12DC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_QWORD *sub_1017E1308(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017E1470(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_1017E147C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017E15E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1017E15F0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1017E168C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1017E16A4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1017E1730(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1017E1748()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CDDA84;
      v1[3] = unk_101CDDA94;
      v1[4] = xmmword_101CDDAA4;
      v1[0] = xmmword_101CDDA64;
      v1[1] = unk_101CDDA74;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1017E181C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1017E1834()
{
  uint64_t result;

  result = sub_1005154D0();
  dword_102314120 = result;
  return result;
}

uint64_t sub_1017E1850(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100270E34(a1, a2);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1017E1868(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1017E1870(uint64_t a1, uint64_t a2)
{
  CLMotionActivity *v4;
  double v5;
  BOOL v6;
  int v7;
  int v8;
  double v9;
  BOOL v10;
  BOOL v12;
  double v13;
  double v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _DWORD v43[2];
  __int16 v44;
  int v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;

  v5 = sub_1001FCBB4();
  if (*(_BYTE *)(a2 + 48))
    v6 = *(_DWORD *)(a2 + 288) >= 2u;
  else
    v6 = 0;
  v7 = !v6;
  v8 = *(unsigned __int8 *)(a2 + 144);
  if (*(_BYTE *)(a2 + 144))
  {
    v9 = *(double *)(a2 + 160);
    v10 = v9 > 0.0 && v9 < 0.5;
    if (v10 && *(double *)(a2 + 152) < 0.25)
      *(double *)(a1 + 32) = v5;
  }
  if (!v8 || (*(double *)(a2 + 160) > 0.0 ? (v12 = *(double *)(a2 + 152) <= 1.0) : (v12 = 1), v12))
  {
    v13 = *(double *)(a1 + 40);
  }
  else
  {
    *(double *)(a1 + 40) = v5;
    v13 = v5;
  }
  v14 = *(double *)(a1 + 32);
  CLMotionActivity::getInit(v4);
  BYTE12(v42) = 0;
  DWORD2(v42) = 0;
  HIDWORD(v34) = 0;
  if ((v7 & (v14 > v13)) != 0)
    v15 = 2;
  else
    v15 = 1;
  LODWORD(v34) = v7 & (v14 > v13);
  DWORD1(v34) = v15;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFA50);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 67110400;
    v55 = v34;
    v56 = 1024;
    v57 = v7;
    v58 = 1024;
    v59 = v14 > v13;
    v60 = 2048;
    v61 = v5;
    v62 = 2048;
    v63 = v17;
    v64 = 2048;
    v65 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "SimModeAsst,motionContext,%d,outage,%d,stationaryMoreRecent,%d,mct,%.1f,lastStationary,%.1f,lastMoving,%.1f", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA50);
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 40);
    v43[0] = 67110400;
    v43[1] = v34;
    v44 = 1024;
    v45 = v7;
    v46 = 1024;
    v47 = v14 > v13;
    v48 = 2048;
    v49 = v5;
    v50 = 2048;
    v51 = v21;
    v52 = 2048;
    v53 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "SimModeAsst,motionContext,%d,outage,%d,stationaryMoreRecent,%d,mct,%.1f,lastStationary,%.1f,lastMoving,%.1f", v43, 50, (_DWORD)v25, *((double *)&v25 + 1), *(double *)&v26, *((double *)&v26 + 1));
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulatorModeAssistance::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v25 = v34;
  v26 = v35;
  v19 = *(_QWORD *)(a1 + 24);
  if (!v19)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v19 + 48))(v19, &v25);
}

void sub_1017E1B98(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_QWORD *sub_1017E1BC4@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xA)
    v2 = "UnhandledMethod";
  else
    v2 = (&off_1021CFA90)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1BF0@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 9)
    v2 = "UnhandledSession";
  else
    v2 = (&off_1021CFAE8)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1C1C@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 9)
    v2 = "UnhandledProtocol";
  else
    v2 = (&off_1021CFB38)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1C48@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x23)
    v2 = "UnhandledError";
  else
    v2 = (&off_1021CFBF0)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1C74@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = "UnhandledTandemCapability";
  else
    v2 = (&off_1021CFD10)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1CA0@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = "UnhandledPhoneNumberAvailability";
  else
    v2 = (&off_1021CFD38)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1CCC@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 2)
    v2 = "UnhandledCommunicationType";
  else
    v2 = (&off_1021CFDF8)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017E1CF8@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xB)
    v2 = "UnhandledAbortCauseType";
  else
    v2 = (&off_1021CFD60)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_1017E1D24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char *v15;
  void **v16;
  float v17;
  float v18;
  void **v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  void **v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  void **v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  void **v37;
  void **v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  char *v45;
  void **v46;
  int v47;
  void **v48;
  void **v49;
  uint64_t v50;
  char *v51;
  void **v52;
  _QWORD *v53;
  int v54;
  _QWORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  void **v69;
  int v70;
  void **v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  void **v85;
  int v86;
  void **v87;
  int v88;
  void **v89;
  int v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  void *__p[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  uint8_t buf[4];
  int v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  _BYTE v114[10];
  _BYTE v115[40];
  _BYTE v116[10];
  _BYTE v117[12];
  _BYTE v118[18];
  _BYTE v119[12];
  _BYTE v120[28];
  _BYTE v121[6];
  uint64_t v122;
  _BYTE v123[10];
  _BYTE v124[10];
  _BYTE v125[10];
  _BYTE v126[10];
  _BYTE v127[10];
  uint64_t v128;
  _BYTE v129[14];
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFA70);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 64);
    v93 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(unsigned __int8 *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 80);
    sub_1017E1BC4(*(_DWORD *)(a1 + 84), v107);
    if (v108 >= 0)
      v10 = v107;
    else
      v10 = (void **)v107[0];
    v91 = v10;
    sub_1017E1BF0(*(_DWORD *)(a1 + 88), v105);
    if (v106 >= 0)
      v11 = v105;
    else
      v11 = (void **)v105[0];
    v89 = v11;
    sub_1017E1C1C(*(_DWORD *)(a1 + 92), v103);
    if (v104 >= 0)
      v12 = v103;
    else
      v12 = (void **)v103[0];
    v87 = v12;
    sub_1001E3CC8(*(_DWORD *)(a1 + 96), v101);
    if (v102 >= 0)
      v13 = v101;
    else
      v13 = (void **)v101[0];
    v85 = v13;
    v14 = *(int *)(a1 + 136);
    if (v14 > 3)
      v15 = "UnhandledReport";
    else
      v15 = (&off_1021CFDC0)[v14];
    v73 = *(_DWORD *)(a1 + 100);
    v75 = *(_DWORD *)(a1 + 104);
    v77 = *(_DWORD *)(a1 + 108);
    v79 = *(_DWORD *)(a1 + 112);
    v81 = *(_QWORD *)(a1 + 120);
    v83 = *(_QWORD *)(a1 + 128);
    sub_1015A2E04(v99, v15);
    if (v100 >= 0)
      v16 = v99;
    else
      v16 = (void **)v99[0];
    v71 = v16;
    v18 = *(float *)(a1 + 140);
    v17 = *(float *)(a1 + 144);
    sub_1017E1C48(*(_DWORD *)(a1 + 148), v97);
    v19 = (void **)v97[0];
    if (v98 >= 0)
      v19 = v97;
    v20 = *(int *)(a1 + 156);
    v69 = v19;
    if (v20 > 2)
      v21 = "UnhandledHELOUsage";
    else
      v21 = (&off_1021CFDE0)[v20];
    v22 = *(unsigned __int8 *)(a1 + 152);
    v23 = *(unsigned __int8 *)(a1 + 153);
    sub_1015A2E04(__p, v21);
    if (v96 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    v26 = *(_DWORD *)(a1 + 160);
    v25 = *(_DWORD *)(a1 + 164);
    v28 = *(_QWORD *)(a1 + 8);
    v27 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 68296451;
    v110 = 0;
    v111 = 2082;
    v112 = "";
    v113 = 2049;
    *(_QWORD *)v114 = v2;
    *(_WORD *)&v114[8] = 2049;
    *(_QWORD *)v115 = v3;
    *(_WORD *)&v115[8] = 2049;
    *(_QWORD *)&v115[10] = v4;
    *(_WORD *)&v115[18] = 2050;
    *(_QWORD *)&v115[20] = v93;
    *(_WORD *)&v115[28] = 2050;
    *(_QWORD *)&v115[30] = v6;
    *(_WORD *)&v115[38] = 2050;
    *(_QWORD *)v116 = v7;
    *(_WORD *)&v116[8] = 1026;
    *(_DWORD *)v117 = v8;
    *(_WORD *)&v117[4] = 1026;
    *(_DWORD *)&v117[6] = v9;
    *(_WORD *)&v117[10] = 2082;
    *(_QWORD *)v118 = v91;
    *(_WORD *)&v118[8] = 2082;
    *(_QWORD *)&v118[10] = v89;
    *(_WORD *)v119 = 2082;
    *(_QWORD *)&v119[2] = v87;
    *(_WORD *)&v119[10] = 2082;
    *(_QWORD *)v120 = v85;
    *(_WORD *)&v120[8] = 1025;
    *(_DWORD *)&v120[10] = v73;
    *(_WORD *)&v120[14] = 1025;
    *(_DWORD *)&v120[16] = v75;
    *(_WORD *)&v120[20] = 1025;
    *(_DWORD *)&v120[22] = v77;
    *(_WORD *)&v120[26] = 1025;
    *(_DWORD *)v121 = v79;
    *(_WORD *)&v121[4] = 2050;
    v122 = v81;
    *(_WORD *)v123 = 2050;
    *(_QWORD *)&v123[2] = v83;
    *(_WORD *)v124 = 2082;
    *(_QWORD *)&v124[2] = v71;
    *(_WORD *)v125 = 2050;
    *(double *)&v125[2] = v18;
    *(_WORD *)v126 = 2050;
    *(double *)&v126[2] = v17;
    *(_WORD *)v127 = 2082;
    *(_QWORD *)&v127[2] = v69;
    LOWORD(v128) = 1026;
    *(_DWORD *)((char *)&v128 + 2) = v22;
    HIWORD(v128) = 1026;
    *(_DWORD *)v129 = v23;
    *(_WORD *)&v129[4] = 2082;
    *(_QWORD *)&v129[6] = v24;
    v130 = 1026;
    v131 = v26;
    v132 = 1026;
    v133 = v25;
    v134 = 2050;
    v135 = v28;
    v136 = 2050;
    v137 = v27;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLEmergencySessionReport part 1\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{public}f\", \"verticalAccuracy\":\"%{public}f\", \"ttff\":\"%{public}f\", \"positionValid\":%{public}hhd, \"source\":%{public}d, \"methodType\":%{public, location:escape_only}s, \"sessionType\":%{public, location:escape_only}s, \"protocol\":%{public, location:escape_only}s, \"rat\":%{public, location:escape_only}s, \"mcc\":%{private}d, \"mnc\":%{private}d, \"sid\":%{private}d, \"nid\":%{private}d, \"requestedTimeout\":\"%{public}f\", \"requestedAccuracy\":\"%{public}f\", \"requestReportType\":%{public, location:escape_only}s, \"transFreq\":\"%{public}f\", \"transBW\":\"%{public}f\", \"errorCode\":%{public, location:escape_only}s, \"HELOEnabled\":%{public}hhd, \"HELOInjected\":%{public}hhd, \"HELOUsed\":%{public, location:escape_only}s, \"sendError\":%{public}d, \"modemError\":%{public}d, \"starttime\":\"%{public}f\", \"stoptime\":\"%{public}f\"}", buf, 0x10Cu);
    if (v96 < 0)
      operator delete(__p[0]);
    if (v98 < 0)
      operator delete(v97[0]);
    if (v100 < 0)
      operator delete(v99[0]);
    if (v102 < 0)
      operator delete(v101[0]);
    if (v104 < 0)
      operator delete(v103[0]);
    if (v106 < 0)
      operator delete(v105[0]);
    if (v108 < 0)
      operator delete(v107[0]);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CFA70);
  }
  v29 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v90 = *(unsigned __int8 *)(a1 + 168);
    v88 = *(unsigned __int8 *)(a1 + 169);
    v86 = *(unsigned __int8 *)(a1 + 170);
    v92 = *(_QWORD *)(a1 + 176);
    v94 = *(unsigned __int8 *)(a1 + 184);
    sub_1017E1C74(*(_DWORD *)(a1 + 188), v107);
    v30 = v108;
    v31 = (void **)v107[0];
    v32 = *(_DWORD *)(a1 + 192);
    v33 = *(unsigned __int8 *)(a1 + 196);
    v34 = *(unsigned __int8 *)(a1 + 197);
    v35 = *(_DWORD *)(a1 + 200);
    v36 = *(_DWORD *)(a1 + 204);
    v70 = *(_DWORD *)(a1 + 208);
    v72 = *(unsigned __int8 *)(a1 + 212);
    v74 = *(_DWORD *)(a1 + 216);
    v76 = *(_DWORD *)(a1 + 220);
    v78 = *(_DWORD *)(a1 + 224);
    v80 = *(_DWORD *)(a1 + 228);
    v82 = *(_DWORD *)(a1 + 232);
    v84 = *(_DWORD *)(a1 + 236);
    sub_1017E1CA0(*(_DWORD *)(a1 + 240), v105);
    v112 = "";
    v37 = v107;
    if (v30 < 0)
      v37 = v31;
    v38 = (void **)v105[0];
    if (v106 >= 0)
      v38 = v105;
    *(_DWORD *)v114 = v90;
    *(_DWORD *)&v114[6] = v88;
    *(_DWORD *)&v115[2] = v86;
    *(_QWORD *)&v115[8] = v92;
    *(_DWORD *)&v115[18] = v94;
    *(_QWORD *)&v115[24] = v37;
    *(_DWORD *)&v115[34] = v32;
    *(_DWORD *)v116 = v33;
    *(_DWORD *)&v116[6] = v34;
    *(_DWORD *)&v117[2] = v35;
    *(_WORD *)v117 = 1025;
    *(_WORD *)&v117[6] = 1025;
    *(_DWORD *)&v117[8] = v36;
    *(_DWORD *)&v118[2] = v70;
    *(_DWORD *)&v118[8] = v72;
    *(_DWORD *)&v118[14] = v74;
    *(_DWORD *)&v119[2] = v76;
    *(_DWORD *)&v119[8] = v78;
    *(_DWORD *)&v120[2] = v80;
    *(_DWORD *)&v120[8] = v82;
    *(_DWORD *)&v120[14] = v84;
    v111 = 2082;
    *(_WORD *)&v115[22] = 2082;
    *(_WORD *)&v120[18] = 2082;
    v39 = *(unsigned __int8 *)(a1 + 244);
    *(_QWORD *)&v120[20] = v38;
    v40 = *(unsigned __int8 *)(a1 + 245);
    *(_DWORD *)&v121[2] = v39;
    v113 = 1026;
    *(_WORD *)&v114[4] = 1026;
    *(_WORD *)v115 = 1026;
    *(_WORD *)&v115[16] = 1026;
    *(_WORD *)&v115[32] = 1026;
    *(_WORD *)&v115[38] = 1026;
    *(_WORD *)&v116[4] = 1026;
    *(_WORD *)v118 = 1026;
    *(_WORD *)&v118[6] = 1026;
    *(_WORD *)&v118[12] = 1026;
    *(_WORD *)v119 = 1026;
    *(_WORD *)&v119[6] = 1026;
    *(_WORD *)v120 = 1026;
    *(_WORD *)&v120[6] = 1026;
    *(_WORD *)&v120[12] = 1026;
    *(_WORD *)v121 = 1026;
    LOWORD(v122) = 1026;
    *(_DWORD *)((char *)&v122 + 2) = v40;
    v41 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)v123 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)v124 = v41;
    v42 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)v125 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)v126 = v42;
    *(_QWORD *)v127 = *(_QWORD *)(a1 + 912);
    *(_WORD *)&v126[8] = 2049;
    *(_WORD *)&v127[8] = 2049;
    v128 = *(_QWORD *)(a1 + 920);
    *(_WORD *)&v115[6] = 2050;
    HIWORD(v122) = 2050;
    *(_WORD *)&v123[8] = 2050;
    *(_WORD *)&v124[8] = 2050;
    *(_WORD *)&v125[8] = 2050;
    *(_WORD *)v129 = 2050;
    *(_QWORD *)&v129[2] = *(_QWORD *)(a1 + 928);
    *(_DWORD *)buf = 68296451;
    v110 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLEmergencySessionReport part 2\", \"wifiAssociated\":%{public}hhd, \"isTandemDP\":%{public}hhd, \"isOrbitFileAvailable\":%{public}hhd, \"orbitFileAge\":%{public}llu, \"wasNetworkReachable\":%{public}hhd, \"tandemCapability\":%{public, location:escape_only}s, \"nInstance\":%{public}u, \"isTandemVD\":%{public}hhd, \"isSimPresent\":%{public}hhd, \"subscriberMCC\":%{private}d, \"subscribeMNC\":%{private}d, \"satelliteReportCount\":%{public}u, \"HELORejected\":%{public}hhd, \"heloRejectReason\":%{public}u, \"numValidFixesSent\":%{public}d, \"numNoFixMessagesSent\":%{public}d, \"numSendSuccessForValidFix\":%{public}d, \"numSendFailForValidFixes\":%{public}d, \"lastHttpPostFailureCode\":%{public}d, \"phoneNumbersAvailable\":%{public, location:escape_only}s, \"wasNILRSent\":%{public}hhd, \"isNWRefLocAvailable\":%{public}hhd, \"nwRefLocUncertainity\":\"%{public}f\", \"nwRefLocDeviationFromHELO\":\"%{public}f\", \"nwRefLocDeviationFromCellLocation\":\"%{public}f\", \"nwRefLocDeviationFromFinalFix\":\"%{public}f\", \"nwRefLocLat\":\"%{private}f\", \"nwRefLocLon\":\"%{private}f\", \"nwRefLocConfidence\":\"%{public}f\"}", buf, 0xE8u);
    if (v106 < 0)
      operator delete(v105[0]);
    if (v108 < 0)
      operator delete(v107[0]);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CFA70);
  }
  v43 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v44 = *(int *)(a1 + 936);
    if (v44 > 2)
      v45 = "UnhandledCommunicationType";
    else
      v45 = (&off_1021CFDF8)[v44];
    sub_1015A2E04(v107, v45);
    if (v108 >= 0)
      v46 = v107;
    else
      v46 = (void **)v107[0];
    v47 = *(unsigned __int8 *)(a1 + 940);
    v48 = v105;
    sub_1017E1CF8(*(_DWORD *)(a1 + 944), v105);
    if (v106 < 0)
      v48 = (void **)v105[0];
    v49 = v103;
    sub_1017E1BF0(*(_DWORD *)(a1 + 948), v103);
    if (v104 < 0)
      v49 = (void **)v103[0];
    v50 = *(int *)(a1 + 952);
    if (v50 > 2)
      v51 = "UnhandledCommunicationType";
    else
      v51 = (&off_1021CFDF8)[v50];
    sub_1015A2E04(v101, v51);
    v52 = (void **)v101[0];
    if (v102 >= 0)
      v52 = v101;
    v53 = (_QWORD *)(a1 + 960);
    if (*(char *)(a1 + 983) < 0)
      v53 = (_QWORD *)*v53;
    v54 = *(_DWORD *)(a1 + 956);
    v55 = (_QWORD *)(a1 + 984);
    if (*(char *)(a1 + 1007) < 0)
      v55 = (_QWORD *)*v55;
    v56 = *(_DWORD *)(a1 + 1008);
    v57 = *(_DWORD *)(a1 + 1012);
    v58 = *(unsigned __int8 *)(a1 + 1016);
    v59 = *(unsigned __int8 *)(a1 + 1017);
    v60 = *(unsigned __int8 *)(a1 + 1018);
    v61 = *(_DWORD *)(a1 + 1048);
    v62 = *(_DWORD *)(a1 + 1052);
    v63 = *(unsigned __int8 *)(a1 + 1068);
    v64 = *(unsigned __int8 *)(a1 + 1069);
    v65 = *(unsigned __int8 *)(a1 + 1070);
    v66 = *(unsigned __int8 *)(a1 + 1071);
    v67 = *(unsigned __int8 *)(a1 + 1072);
    v68 = *(_DWORD *)(a1 + 1076);
    *(_DWORD *)buf = 68294402;
    v110 = 0;
    v111 = 2082;
    v112 = "";
    v113 = 2082;
    *(_QWORD *)v114 = v46;
    *(_WORD *)&v114[8] = 1026;
    *(_DWORD *)v115 = v47;
    *(_WORD *)&v115[4] = 2082;
    *(_QWORD *)&v115[6] = v48;
    *(_WORD *)&v115[14] = 2082;
    *(_QWORD *)&v115[16] = v49;
    *(_WORD *)&v115[24] = 2082;
    *(_QWORD *)&v115[26] = v52;
    *(_WORD *)&v115[34] = 1026;
    *(_DWORD *)&v115[36] = v54;
    *(_WORD *)v116 = 2082;
    *(_QWORD *)&v116[2] = v53;
    *(_WORD *)v117 = 2082;
    *(_QWORD *)&v117[2] = v55;
    *(_WORD *)&v117[10] = 1026;
    *(_DWORD *)v118 = v56;
    *(_WORD *)&v118[4] = 1026;
    *(_DWORD *)&v118[6] = v57;
    *(_WORD *)&v118[10] = 1026;
    *(_DWORD *)&v118[12] = v58;
    *(_WORD *)&v118[16] = 1026;
    *(_DWORD *)v119 = v59;
    *(_WORD *)&v119[4] = 1026;
    *(_DWORD *)&v119[6] = v60;
    *(_WORD *)&v119[10] = 1026;
    *(_DWORD *)v120 = v61;
    *(_WORD *)&v120[4] = 1026;
    *(_DWORD *)&v120[6] = v62;
    *(_WORD *)&v120[10] = 1026;
    *(_DWORD *)&v120[12] = v63;
    *(_WORD *)&v120[16] = 1026;
    *(_DWORD *)&v120[18] = v64;
    *(_WORD *)&v120[22] = 1026;
    *(_DWORD *)&v120[24] = v65;
    *(_WORD *)v121 = 1026;
    *(_DWORD *)&v121[2] = v66;
    LOWORD(v122) = 1026;
    *(_DWORD *)((char *)&v122 + 2) = v67;
    HIWORD(v122) = 1026;
    *(_DWORD *)v123 = v68;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLEmergencySessionReport part 3\", \"commType\":%{public, location:escape_only}s, \"isInActiveEmergency\":%{public}hhd, \"abortCause\":%{public, location:escape_only}s, \"overridingSessionType\":%{public, location:escape_only}s, \"overridingCommType\":%{public, location:escape_only}s, \"finalFixDeviationFromCellLocation\":%{public}d, \"fCarrierBundleVersion\":%{public, location:escape_only}s, \"fCarrierBundleID\":%{public, location:escape_only}s, \"locConfigCompatibilityVersion\":%{public}d, \"locConfigContentVersion\":%{public}d, \"isSUPLEnabled\":%{public}hhd, \"isDBHEnabled\":%{public}hhd, \"wasDBHLocationSent\":%{public}hhd, \"nwReportedFixDeviationFromDBH\":%{public}d, \"nwReportedFixDeviationFromWifiLocation\":%{public}d, \"fIsWlanFeatureEnabled\":%{public}hhd, \"isLocationSourceEnabled\":%{public}hhd, \"isRssiReportingEnabled\":%{public}hhd, \"wasRssiRequested\":%{public}hhd, \"wasServingApSent\":%{public}hhd, \"finalFixDeviationFromSuplEnd\":%{public}d}", buf, 0xA8u);
    if (v102 < 0)
      operator delete(v101[0]);
    if (v104 < 0)
      operator delete(v103[0]);
    if (v106 < 0)
      operator delete(v105[0]);
    if (v108 < 0)
      operator delete(v107[0]);
  }
}

void sub_1017E26AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  if (a58 < 0)
    operator delete(a53);
  _Unwind_Resume(exception_object);
}

void sub_1017E2758(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  void **v11;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFA70);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_1017E2870((unsigned __int8 *)(a1 + 280), __p);
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 68289283;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,HELODATA\", \"heloData\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_1017E2870@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  size_t v29;
  uint64_t v30;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  _QWORD v42[10];
  char v43;
  uint64_t v44;

  sub_100263E50((uint64_t)v40);
  v4 = sub_100263F7C(&v41, (uint64_t)"isInfoValid,", 12);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",wasHELOInjected,", 17);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[3]);
  v8 = sub_100263F7C(v7, (uint64_t)",wasLastHELOInjected,", 21);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[1]);
  v10 = sub_100263F7C(v9, (uint64_t)",wasLastHELORejected,", 21);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[2]);
  v12 = sub_100263F7C(v11, (uint64_t)",heloRejectReason,", 18);
  v13 = (_QWORD *)std::ostream::operator<<(v12, *((unsigned int *)a1 + 1));
  v14 = sub_100263F7C(v13, (uint64_t)",lastReceivedHELOLocation,", 26);
  v15 = v38;
  sub_100071A00((uint64_t)(a1 + 8), v38);
  if (v39 < 0)
    v15 = (void **)v38[0];
  v16 = strlen((const char *)v15);
  v17 = sub_100263F7C(v14, (uint64_t)v15, v16);
  v18 = sub_100263F7C(v17, (uint64_t)",lastReceivedCellLocation,", 26);
  v19 = v36;
  sub_100071A00((uint64_t)(a1 + 164), v36);
  if (v37 < 0)
    v19 = (void **)v36[0];
  v20 = strlen((const char *)v19);
  v21 = sub_100263F7C(v18, (uint64_t)v19, v20);
  v22 = sub_100263F7C(v21, (uint64_t)",lastReceivedWifiLocation,", 26);
  v23 = v34;
  sub_100071A00((uint64_t)(a1 + 320), v34);
  if (v35 < 0)
    v23 = (void **)v34[0];
  v24 = strlen((const char *)v23);
  v25 = sub_100263F7C(v22, (uint64_t)v23, v24);
  v26 = sub_100263F7C(v25, (uint64_t)",lastReceivedLACLocation,", 25);
  v27 = (uint64_t)(a1 + 476);
  v28 = __p;
  sub_100071A00(v27, __p);
  if (v33 < 0)
    v28 = (void **)__p[0];
  v29 = strlen((const char *)v28);
  sub_100263F7C(v26, (uint64_t)v28, v29);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  std::stringbuf::str(a2, v42);
  *(_QWORD *)((char *)v40
  v41 = v30;
  if (v43 < 0)
    operator delete((void *)v42[8]);
  std::streambuf::~streambuf(v42);
  return std::ios::~ios(&v44);
}

void sub_1017E2B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  sub_1018B38B4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_1017E2B94(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void **v4;
  __int128 v5;
  void **v6;
  _OWORD *v7;
  int v8;
  _DWORD v9[240];
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 __p;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFA70);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    LOWORD(v9[2]) = 2082;
    *(_QWORD *)((char *)&v9[2] + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd CLEmergencySessionReport::reset\"}", (uint8_t *)v9, 0x12u);
  }
  bzero(v9, 0x4D8uLL);
  sub_100856FE0((uint64_t)v9);
  memcpy((void *)a1, v9, 0x3C0uLL);
  v3 = (void **)(a1 + 960);
  if (*(char *)(a1 + 983) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = v10;
  *(_QWORD *)(a1 + 976) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  v4 = (void **)(a1 + 984);
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v12;
  *(_QWORD *)(a1 + 1000) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(v12) = 0;
  *(_OWORD *)(a1 + 1088) = v19;
  *(_OWORD *)(a1 + 1104) = v20;
  *(_OWORD *)(a1 + 1120) = v21[0];
  *(_OWORD *)(a1 + 1040) = v16;
  *(_OWORD *)(a1 + 1056) = v17;
  *(_OWORD *)(a1 + 1072) = v18;
  v5 = v15;
  *(_OWORD *)(a1 + 1008) = v14;
  *(_OWORD *)(a1 + 1024) = v5;
  *(_OWORD *)(a1 + 1132) = *(_OWORD *)((char *)v21 + 12);
  v6 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = __p;
  *(_QWORD *)(a1 + 1168) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__p) = 0;
  v7 = (_OWORD *)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0)
  {
    operator delete(*(void **)(a1 + 1176));
    v8 = SHIBYTE(v23);
    *v7 = v24;
    *(_QWORD *)(a1 + 1192) = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    *(_OWORD *)(a1 + 1200) = v26;
    *(_OWORD *)(a1 + 1216) = v27;
    *(_QWORD *)(a1 + 1232) = v28;
    if (v8 < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_QWORD *)(a1 + 1192) = v25;
    *v7 = v24;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    *(_OWORD *)(a1 + 1200) = v26;
    *(_OWORD *)(a1 + 1216) = v27;
    *(_QWORD *)(a1 + 1232) = v28;
  }
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
}

uint64_t sub_1017E2E3C(uint64_t result, int a2, int a3)
{
  int v3;

  if (a2 && (a3 & 1) != 0)
  {
    v3 = 4;
  }
  else if (a2)
  {
    if ((*(_DWORD *)(result + 240) - 3) >= 2)
      v3 = 2;
    else
      v3 = 4;
  }
  else if (a3)
  {
    if (((*(_DWORD *)(result + 240) - 2) & 0xFFFFFFFD) != 0)
      v3 = 3;
    else
      v3 = 4;
  }
  else
  {
    v3 = 1;
  }
  *(_DWORD *)(result + 240) = v3;
  return result;
}

void sub_1017E2E94(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v3 = 4;
  switch(*(_DWORD *)(a2 + 96))
  {
    case 0:
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      if (sub_100182290(a2))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CFA70);
        v4 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Valid location with unknown or obsolete type", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CFA70);
          v7[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning Valid location with unknown or obsolete type", v7, 2);
          v6 = (uint8_t *)v5;
          sub_100512490("Generic", 1, 0, 2, "void Emergency::CLEmergencySessionReport::setPositionSource(const CLDaemonLocation &)", "%s\n", v5);
          if (v6 != buf)
            free(v6);
        }
      }
      v3 = 0;
      goto LABEL_11;
    case 1:
    case 3:
    case 9:
      v3 = 1;
      goto LABEL_11;
    case 4:
    case 0xA:
    case 0xB:
    case 0xD:
      v3 = 2;
      goto LABEL_11;
    case 6:
    case 7:
    case 8:
LABEL_11:
      *(_DWORD *)(a1 + 80) = v3;
      break;
    default:
      return;
  }
}

void sub_1017E30AC(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1017E30D8(uint64_t a1, uint64_t a2)
{
  _BYTE v4[24];

  *(_DWORD *)a1 = 30;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = off_1021693F8;
  *(_QWORD *)(a1 + 16) = 30;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 144) = 0;
  sub_100270E34((uint64_t)v4, (uint64_t)&unk_102310B78);
  sub_1006DD52C((_QWORD *)(a1 + 152), a2, (uint64_t)v4);
}

void sub_1017E31E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v2;
  sub_1006DD5DC(v4);
  *(_QWORD *)(v1 + 8) = v3 + 16;
  sub_10047F25C((_QWORD *)(v1 + 40));
  _Unwind_Resume(a1);
}

void sub_1017E324C(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  int v9;
  BOOL *v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  _BOOL4 v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  _BOOL4 v25;
  uint8_t buf[8];
  std::__shared_weak_count *v27;

  sub_1001E4804(buf);
  v2 = (_BYTE *)(a1 + 144);
  v3 = sub_1001E4874(*(uint64_t *)buf, "ForceCPIEnabled", (BOOL *)(a1 + 144));
  v4 = v3;
  v5 = v27;
  if (!v27)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    if (!v3)
      goto LABEL_11;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE10);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9 = *v2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CPI,fForceCPIEnabled, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE10);
    v18 = *v2;
    v24 = 67109120;
    v25 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CPI,fForceCPIEnabled, %d", &v24);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsCpiHandler::updateDefaultWrites()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
LABEL_11:
  sub_1001E4804(buf);
  v10 = (BOOL *)(a1 + 145);
  v11 = sub_1001E4874(*(uint64_t *)buf, "ForceCPIDisabled", v10);
  v12 = v11;
  v13 = v27;
  if (!v27)
    goto LABEL_15;
  v14 = (unint64_t *)&v27->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v12)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    if (!v11)
      goto LABEL_21;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE10);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v17 = *v10;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CPI,fForceCPIDisabled, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE10);
    v21 = *v10;
    v24 = 67109120;
    v25 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CPI,fForceCPIDisabled, %d", &v24);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsCpiHandler::updateDefaultWrites()", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
LABEL_21:
  if (*v2)
  {
    if (*v10)
      sub_1017E368C();
  }
}

void sub_1017E363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017E3660(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017E368C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFE10);
    }
    v1 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true", "{\"msg%{public}.0s\":\"Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFE10);
    }
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGpsCpiHandler.mm", 220, "updateDefaultWrites");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021CFE10);
  }
}

void sub_1017E3860()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1017E38FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1017E3914()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1017E39A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1017E39B8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  int v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint8_t buf[8];
  std::__shared_weak_count *v36;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 33) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 59) = 0;
  sub_100270E34(a1 + 72, a2);
  *(_BYTE *)(a1 + 104) = 0;
  HIDWORD(v32) = 0;
  sub_1001E4804(buf);
  v3 = sub_1001E4B84(*(uint64_t *)buf, "GpsLogInertialSensors", (_DWORD *)&v32 + 1);
  v4 = v3;
  v5 = v36;
  if (!v36)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_5:
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v4)
LABEL_6:
    *(_BYTE *)(a1 + 64) = HIDWORD(v32) == 1;
LABEL_7:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE30);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "GpsLogInertialSensors,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v24 = *(unsigned __int8 *)(a1 + 64);
    v33 = 67240192;
    v34 = v24;
    LODWORD(v32) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GpsLogInertialSensors,%{public}d", &v33, v32);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceInertial::CLGnssAssistanceInertial(CLSetCommandToExecute)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  sub_1001E4804(buf);
  v10 = sub_1001E4B84(*(uint64_t *)buf, "GpsLoggingVerbose", (_DWORD *)&v32 + 1);
  v11 = v10;
  v12 = v36;
  if (!v36)
    goto LABEL_16;
  v13 = (unint64_t *)&v36->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_16:
    if (!v10)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (v11)
LABEL_17:
    *(_BYTE *)(a1 + 65) = HIDWORD(v32) == 1;
LABEL_18:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE30);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(unsigned __int8 *)(a1 + 65);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "GpsLoggingVerbose,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v27 = *(unsigned __int8 *)(a1 + 65);
    v33 = 67240192;
    v34 = v27;
    LODWORD(v32) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GpsLoggingVerbose,%{public}d", &v33, v32);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceInertial::CLGnssAssistanceInertial(CLSetCommandToExecute)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  sub_1001E4804(buf);
  v17 = sub_1001E4B84(*(uint64_t *)buf, "GpsForceDisableINS", (_DWORD *)&v32 + 1);
  if (HIDWORD(v32))
    v18 = v17;
  else
    v18 = 0;
  v19 = v36;
  if (!v36)
    goto LABEL_30;
  v20 = (unint64_t *)&v36->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
      return a1;
  }
  else
  {
LABEL_30:
    if (!v18)
      return a1;
  }
  *(_BYTE *)(a1 + 66) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE30);
  v22 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning force INS disabled, do not inject sensor data.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    LOWORD(v33) = 0;
    LODWORD(v32) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning force INS disabled, do not inject sensor data.", &v33, v32);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceInertial::CLGnssAssistanceInertial(CLSetCommandToExecute)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  return a1;
}

void sub_1017E3F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;

  v16 = *(_QWORD **)(v13 + 96);
  if (v16 == v14)
  {
    v17 = 4;
    v16 = v14;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1017E3FF0(uint64_t a1, uint64_t a2, double a3)
{
  double v6;

  v6 = sub_100078B88();
  if (vabdd_f64(v6, *(double *)(a1 + 8)) < a3)
    *(_BYTE *)(a2 + 152) = 1;
  if (vabdd_f64(v6, *(double *)(a1 + 32)) < a3)
    *(_BYTE *)(a2 + 153) = 1;
}

void sub_1017E4050(uint64_t a1, float **a2)
{
  int v3;
  float *v4;
  float *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  const char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int128 buf;
  char v39;
  _BYTE v40[28];
  __int16 v41;
  double v42;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *((unsigned __int8 *)*a2 + 8);
    if (v3 == 2)
    {
      *(_QWORD *)&buf = off_102171938;
      *((_QWORD *)&buf + 1) = CFAbsoluteTimeGetCurrent();
      v15 = *a2;
      v14 = a2[1];
      while (v15 != v14)
      {
        *(_QWORD *)&v40[7] = *(_QWORD *)v15;
        *(_QWORD *)&v40[15] = *(_QWORD *)(v15 + 3);
        *(float *)&v40[23] = v15[5];
        v16 = sub_1011B78D4();
        sub_1011B8DB0(v16, (uint64_t)&buf);
        v15 += 6;
      }
    }
    else if (v3 == 1)
    {
      *(_QWORD *)&buf = off_1021718E0;
      *((_QWORD *)&buf + 1) = CFAbsoluteTimeGetCurrent();
      v5 = *a2;
      v4 = a2[1];
      while (v5 != v4)
      {
        *(_QWORD *)&v40[7] = *(_QWORD *)v5;
        *(_QWORD *)&v40[15] = *(_QWORD *)(v5 + 3);
        *(float *)&v40[23] = v5[5];
        v6 = sub_1011B78D4();
        sub_1011B8DB0(v6, (uint64_t)&buf);
        v5 += 6;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
      v9 = *((_BYTE *)*a2 + 8);
      v10 = *(_QWORD *)*a2;
      v11 = (*a2)[3];
      v12 = (*a2)[4];
      v13 = (*a2)[5];
      LODWORD(buf) = 134350336;
      *(_QWORD *)((char *)&buf + 4) = v8;
      WORD6(buf) = 258;
      BYTE14(buf) = v9;
      HIBYTE(buf) = 2;
      v39 = 8;
      *(_QWORD *)v40 = v10;
      *(_WORD *)&v40[8] = 2050;
      *(double *)&v40[10] = v11;
      *(_WORD *)&v40[18] = 2050;
      *(double *)&v40[20] = v12;
      v41 = 2050;
      v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GPSSENSOR,sampleNumber,%{public}zu,sesnorType,%{public}hhu,timestamp,%{public}.3lf,x,%{public}.3f,y,%{public}.3f,z,%{public}.3f", (uint8_t *)&buf, 0x37u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFE30);
      v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
      v18 = *((_BYTE *)*a2 + 8);
      v19 = *(_QWORD *)*a2;
      v20 = (*a2)[3];
      v21 = (*a2)[4];
      v22 = (*a2)[5];
      v25 = 134350336;
      v26 = v17;
      v27 = 258;
      v28 = v18;
      v29 = 2;
      v30 = 8;
      v31 = v19;
      v32 = 2050;
      v33 = v20;
      v34 = 2050;
      v35 = v21;
      v36 = 2050;
      v37 = v22;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSSENSOR,sampleNumber,%{public}zu,sesnorType,%{public}hhu,timestamp,%{public}.3lf,x,%{public}.3f,y,%{public}.3f,z,%{public}.3f", &v25, 55);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::logIntoBinary(const GNSS::RawSensorSampleVector &)", "%s\n", v23);
      if (v24 != (char *)&buf)
        free(v24);
    }
  }
}

void sub_1017E43AC(uint64_t **a1@<X1>, void **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  __int128 v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  double v28;
  double v29;
  double v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v34 = (uint64_t)(a2 + 2);
    do
    {
      if ((*v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*((_DWORD *)v3 + 3) & 0x7FFFFFFFu) > 0x7F7FFFFF
        || ((_DWORD)v3[2] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (*((_DWORD *)v3 + 5) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          v10 = *v3;
          v11 = *((_BYTE *)v3 + 8);
          v12 = *((float *)v3 + 3);
          v13 = *((float *)v3 + 4);
          v14 = *((float *)v3 + 5);
          *(_DWORD *)buf = 134350080;
          v47 = v10;
          v48 = 258;
          v49 = v11;
          v50 = 2;
          v51 = 8;
          v52 = v12;
          v53 = 2050;
          v54 = v13;
          v55 = 2050;
          v56 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "GPSSENSOR,badSample,timeStamp,%{public}.3lf,sensorType,%{public}hhu,x,%{public}.5f,y,%{public}.5f,z,%{public}.5f", buf, 0x2Du);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFE30);
          v26 = *v3;
          v27 = *((_BYTE *)v3 + 8);
          v28 = *((float *)v3 + 3);
          v29 = *((float *)v3 + 4);
          v30 = *((float *)v3 + 5);
          v35 = 134350080;
          v36 = v26;
          v37 = 258;
          v38 = v27;
          v39 = 2;
          v40 = 8;
          v41 = v28;
          v42 = 2050;
          v43 = v29;
          v44 = 2050;
          v45 = v30;
          LODWORD(v33) = 45;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSSENSOR,badSample,timeStamp,%{public}.3lf,sensorType,%{public}hhu,x,%{public}.5f,y,%{public}.5f,z,%{public}.5f", &v35, v33);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 0, "GNSS::RawSensorSampleVector CLGnssAssistanceInertial::removeBadSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
      }
      else
      {
        v6 = (char *)a2[1];
        v5 = (char *)a2[2];
        if (v6 >= v5)
        {
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a2) >> 3);
          v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a2) >> 3);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x555555555555555)
            v18 = 0xAAAAAAAAAAAAAAALL;
          else
            v18 = v16;
          if (v18)
            v19 = (char *)sub_1002596A8(v34, v18);
          else
            v19 = 0;
          v20 = &v19[24 * v15];
          v21 = *(_OWORD *)v3;
          *((_QWORD *)v20 + 2) = v3[2];
          *(_OWORD *)v20 = v21;
          v23 = (char *)*a2;
          v22 = (char *)a2[1];
          v24 = v20;
          if (v22 != *a2)
          {
            do
            {
              v25 = *(_OWORD *)(v22 - 24);
              *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              v22 -= 24;
            }
            while (v22 != v23);
            v22 = (char *)*a2;
          }
          v8 = v20 + 24;
          *a2 = v24;
          a2[1] = v20 + 24;
          a2[2] = &v19[24 * v18];
          if (v22)
            operator delete(v22);
        }
        else
        {
          v7 = *(_OWORD *)v3;
          *((_QWORD *)v6 + 2) = v3[2];
          *(_OWORD *)v6 = v7;
          v8 = v6 + 24;
        }
        a2[1] = v8;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_1017E478C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017E47B0(double **a1@<X1>, void **a2@<X8>, double a3@<D0>)
{
  double *v4;
  double *v5;
  char *v7;
  char *v8;
  __int128 v9;
  char *v10;
  NSObject *v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  __int128 v22;
  double *v23;
  char *v24;
  double *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  double v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (*v4 <= a3)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *v4;
          *(_DWORD *)buf = 134349312;
          v33 = a3;
          v34 = 2050;
          v35 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,ReverseSampleTimestamp,lastTime,%{public}.3lf,timestamp,%{public}.3lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFE30);
          v13 = *v4;
          v28 = 134349312;
          v29 = a3;
          v30 = 2050;
          v31 = v13;
          LODWORD(v27) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSSENSOR,ReverseSampleTimestamp,lastTime,%{public}.3lf,timestamp,%{public}.3lf", &v28, v27);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "GNSS::RawSensorSampleVector CLGnssAssistanceInertial::getSamplesWithMonotonicTimeStamp(CFTimeInterval, const GNSS::RawSensorSampleVector &)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      else
      {
        v8 = (char *)a2[1];
        v7 = (char *)a2[2];
        if (v8 >= v7)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a2) >> 3);
          v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          v18 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a2) >> 3);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v17;
          if (v19)
            v20 = (char *)sub_1002596A8((uint64_t)(a2 + 2), v19);
          else
            v20 = 0;
          v21 = (double *)&v20[24 * v16];
          v22 = *(_OWORD *)v4;
          v21[2] = v4[2];
          *(_OWORD *)v21 = v22;
          v24 = (char *)*a2;
          v23 = (double *)a2[1];
          v25 = v21;
          if (v23 != *a2)
          {
            do
            {
              v26 = *(_OWORD *)(v23 - 3);
              *(v25 - 1) = *(v23 - 1);
              *(_OWORD *)(v25 - 3) = v26;
              v25 -= 3;
              v23 -= 3;
            }
            while (v23 != (double *)v24);
            v23 = (double *)*a2;
          }
          v10 = (char *)(v21 + 3);
          *a2 = v25;
          a2[1] = v21 + 3;
          a2[2] = &v20[24 * v19];
          if (v23)
            operator delete(v23);
        }
        else
        {
          v9 = *(_OWORD *)v4;
          *((double *)v8 + 2) = v4[2];
          *(_OWORD *)v8 = v9;
          v10 = v8 + 24;
        }
        a2[1] = v10;
        a3 = *v4;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_1017E4AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017E4AFC(uint64_t a1, char **a2)
{
  double v3;
  char *v5;
  unsigned int v6;
  double v7;
  double v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  double v20;
  int v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  double v30;
  uint8_t *v31;
  double v32;
  double v33;
  int v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;

  v3 = *(double *)(a1 + 56);
  if (v3 <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v14 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134349056;
      v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "GPSSENSOR,invalidInterval,%{public}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFE30);
      v29 = *(_QWORD *)(a1 + 56);
      v34 = 134349056;
      v35 = v29;
      v30 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSSENSOR,invalidInterval,%{public}.3lf", &v34, 12);
      v28 = v31;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::mitigateSpuriousGyroSamples(GNSS::RawSensorSampleVector &)", "%s\n", v30);
      goto LABEL_37;
    }
  }
  else if (*(_BYTE *)a1)
  {
    v5 = *a2;
    v6 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
    if (v6 >= 2)
    {
      v7 = *(double *)(a1 + 32);
      if (v7 <= 0.0 || (v8 = *(double *)v5 - v7, v32 = *((double *)v5 + 3) - *(double *)v5, v33 = v8, v8 >= v3 * 2.1))
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
      }
      else
      {
        v9 = sub_1017E4FDC(&v33, &v32, (float *)(a1 + 44), (float *)v5 + 3, (float *)v5 + 9);
        v10 = sub_1017E4FDC(&v33, &v32, (float *)(a1 + 48), (float *)*a2 + 4, (float *)*a2 + 10);
        v11 = sub_1017E4FDC(&v33, &v32, (float *)(a1 + 52), (float *)*a2 + 5, (float *)*a2 + 11);
        v12 = v9 | v10 | v11;
      }
      v15 = v6 - 1;
      if (v15 >= 2)
      {
        v16 = v15 - 1;
        v17 = 36;
        do
        {
          v18 = &(*a2)[v17];
          v19 = *(double *)(v18 - 12);
          v20 = v19 - *(double *)(v18 - 36);
          v32 = *(double *)(v18 + 12) - v19;
          v33 = v20;
          if ((v9 & 1) != 0)
          {
            v21 = 0;
            if ((v10 & 1) == 0)
              goto LABEL_18;
          }
          else
          {
            v21 = sub_1017E4FDC(&v33, &v32, (float *)v18 - 6, (float *)v18, (float *)v18 + 6);
            if ((v10 & 1) == 0)
            {
LABEL_18:
              v22 = sub_1017E4FDC(&v33, &v32, (float *)&(*a2)[v17 - 20], (float *)&(*a2)[v17 + 4], (float *)&(*a2)[v17 + 28]);
              if ((v11 & 1) != 0)
                goto LABEL_22;
              goto LABEL_19;
            }
          }
          v22 = 0;
          if ((v11 & 1) != 0)
          {
LABEL_22:
            v11 = 0;
            goto LABEL_23;
          }
LABEL_19:
          v11 = sub_1017E4FDC(&v33, &v32, (float *)&(*a2)[v17 - 16], (float *)&(*a2)[v17 + 8], (float *)&(*a2)[v17 + 32]);
LABEL_23:
          v12 = (v21 | v22 | (v12 | v11) & 1) != 0;
          v9 = v21 != 0;
          v10 = v22 != 0;
          v17 += 24;
          --v16;
        }
        while (v16);
      }
      if ((v12 & 1) != 0 && *(_BYTE *)(a1 + 65))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v23 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v24 = *(_QWORD *)*a2;
          *(_DWORD *)buf = 134349056;
          v37 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,Gyro,SpuriousSampleDetected,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFE30);
          v25 = *(_QWORD *)*a2;
          v34 = 134349056;
          v35 = v25;
          v26 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSSENSOR,Gyro,SpuriousSampleDetected,%{public}.3f", &v34, 12, *(_QWORD *)&v32, *(_QWORD *)&v33);
          v28 = v27;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::mitigateSpuriousGyroSamples(GNSS::RawSensorSampleVector &)", "%s\n", v26);
LABEL_37:
          if (v28 != buf)
            free(v28);
        }
      }
    }
  }
}

uint64_t sub_1017E4FDC(double *a1, double *a2, float *a3, float *a4, float *a5)
{
  double v5;
  uint64_t result;
  double v7;
  double v8;
  double v9;
  float v10;

  v5 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  result = 0;
  v7 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v5 > 0.0 && v7 > 0.0)
  {
    if ((v8 = (float)(*a4 - *a3) / v5, v9 = (float)(*a5 - *a4) / v7, v8 > 18000.0) && v9 < -18000.0
      || (result = 0, v8 < -18000.0) && v9 > 18000.0)
    {
      v10 = v5 * (float)(*a5 - *a3) / (v5 + v7) + *a3;
      *a4 = v10;
      return 1;
    }
  }
  return result;
}

void sub_1017E50AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  void *__p;
  _BYTE *v39;
  void *v40;
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  int v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  char v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  if (*(_BYTE *)(a1 + 104))
    return;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "GPSSENSOR,no inertial sensor samples", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFE30);
      LOWORD(v44) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSSENSOR,no inertial sensor samples", &v44, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v11);
      goto LABEL_40;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(*(_QWORD *)a2 + 8) - 1 < 2)
    {
      sub_1017E43AC((uint64_t **)a2, &v40);
      if (v40 == v41)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "GPSSENSOR,allSensorSampleBAD", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFE30);
          LOWORD(v44) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSSENSOR,allSensorSampleBAD", &v44, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        goto LABEL_83;
      }
      if (*((_BYTE *)v40 + 8) == 1)
        v4 = 8;
      else
        v4 = 32;
      if (*((_BYTE *)v40 + 8) == 1)
        v5 = a1 + 8;
      else
        v5 = a1 + 32;
      sub_1017E47B0((double **)&v40, &__p, *(double *)(a1 + v4));
      if (__p == v39)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v18 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *((_BYTE *)v41 - 16);
          v20 = *(_QWORD *)(a1 + v4);
          v21 = *(v41 - 3);
          *(_DWORD *)buf = 16909056;
          v51 = v19;
          v52 = 2050;
          v53 = v20;
          v54 = 2050;
          v55 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,timeReset,eType,%{public}hhu,lastTime,%{public}.3lf,timestamp,%{public}.3lf", buf, 0x19u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFE30);
          v30 = *((_BYTE *)v41 - 16);
          v31 = *(_QWORD *)(a1 + v4);
          v32 = *(v41 - 3);
          v44 = 16909056;
          v45 = v30;
          v46 = 2050;
          v47 = v31;
          v48 = 2050;
          v49 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSSENSOR,timeReset,eType,%{public}hhu,lastTime,%{public}.3lf,timestamp,%{public}.3lf", &v44, 25);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        v22 = *(v41 - 1);
        *(_OWORD *)v5 = *(_OWORD *)(v41 - 3);
        *(_QWORD *)(v5 + 16) = v22;
        goto LABEL_81;
      }
      v6 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (_BYTE *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) - v6 >= 2)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,More than one sample timestamps have issue, sample block discarded", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_81;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        LOWORD(v44) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSSENSOR,More than one sample timestamps have issue, sample block discarded", &v44, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v8);
        goto LABEL_22;
      }
      if (*((_BYTE *)__p + 8) == 2)
      {
        if (v6 < 2)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFE30);
          v23 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,only 1 Gyro sample,no spur dectection", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CFE30);
            LOWORD(v44) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSSENSOR,only 1 Gyro sample,no spur dectection", &v44, 2);
            v36 = (uint8_t *)v35;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v35);
            if (v36 != buf)
              free(v36);
          }
        }
        else
        {
          sub_1017E4AFC(a1, (char **)&__p);
        }
      }
      v24 = *((_QWORD *)v39 - 1);
      *(_OWORD *)v5 = *(_OWORD *)(v39 - 24);
      *(_QWORD *)(v5 + 16) = v24;
      sub_1017E4050(a1, (float **)&__p);
      v25 = *(_QWORD *)(a1 + 96);
      if (!v25)
      {
        if (*(_BYTE *)(a1 + 66))
          goto LABEL_81;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        v28 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "GPSSENSOR,no Device Command To Inject Accel or Gyro", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_81;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFE30);
        LOWORD(v44) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSSENSOR,no Device Command To Inject Accel or Gyro", &v44, v37);
        v9 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v29);
LABEL_22:
        if (v9 != buf)
          free(v9);
        goto LABEL_81;
      }
      if (!*(_BYTE *)(a1 + 66))
      {
        v42[0] = off_1021CFE60;
        v42[1] = &__p;
        v43 = v42;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v25 + 48))(v25, v42);
        v26 = v43;
        if (v43 == v42)
        {
          v27 = 4;
          v26 = v42;
        }
        else
        {
          if (!v43)
            goto LABEL_81;
          v27 = 5;
        }
        (*(void (**)(void))(*v26 + 8 * v27))();
      }
LABEL_81:
      if (__p)
      {
        v39 = __p;
        operator delete(__p);
      }
LABEL_83:
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "GPSSENSOR,type error,neither Accel nor Gyro", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFE30);
      LOWORD(v44) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSSENSOR,type error,neither Accel nor Gyro", &v44, 2);
      v12 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v14);
LABEL_40:
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_1017E5B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1017E5BC0(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  *(_BYTE *)(a1 + 104) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE30);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 104);
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GPSSENSOR,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE30);
    v5 = *(unsigned __int8 *)(a1 + 104);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSSENSOR,fIsAirborne,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::feedAirborneActivity(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_1017E5D74(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017E5DA4()
{
  operator delete();
}

_QWORD *sub_1017E5DB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CFE60;
  result[1] = v3;
  return result;
}

uint64_t sub_1017E5DEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CFE60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017E5E08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 136))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1017E5E20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017E5E5C()
{
}

void sub_1017E5E68(_DWORD *a1, uint64_t a2, int a3)
{
  const char *v4;
  const char *v5;
  char *v6;
  void *__p;
  uint8_t buf[8];

  *a1 = a3;
  v4 = "Unknown";
  v5 = "Unknown";
  if (a3 == 1)
    v5 = "CLSupl1";
  if (a3 != 255)
    v4 = v5;
  if (a3)
    v6 = (char *)v4;
  else
    v6 = "CLSupl0";
  sub_1015A2E04(&__p, v6);
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_1017E64FC()
{
  __cxa_end_catch();
  JUMPOUT(0x1017E6504);
}

void sub_1017E6518(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1017E6604);
}

void sub_1017E6528()
{
  JUMPOUT(0x1017E6604);
}

uint64_t **sub_1017E660C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *v20[2];
  char v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  void **v27;
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  _BYTE *v32;

  v22 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_1017EF39C(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CFED0);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 3)
      v11 = "StateUnknown";
    else
      v11 = off_1021D0560[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v27) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v29 = 1024;
    v30 = v7;
    v31 = 2080;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v27) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    sub_1017ECA1C(v7, v20);
    if (v21 >= 0)
      v17 = v20;
    else
      v17 = (void **)v20[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v24 = 1024;
    v25 = v7;
    v26 = 2080;
    v27 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v20[0]);
    v19 = v18;
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaSupl>::setStateHandler(State, StateHandler) [T = CLEurekaSupl]", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)buf = &v22;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1017E68F4(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _WORD v18[8];
  _QWORD v19[3];
  _QWORD *v20;
  uint8_t buf[1640];

  result = 0;
  switch(a2)
  {
    case 0:
      sub_1017E888C(a1);
      sub_1017E8A2C(a1);
      return 0;
    case 1:
      sub_1017E8B30(a1);
      return 0;
    case 2:
      if (*(_BYTE *)(a1 + 136))
        return 2;
      if (*(_BYTE *)(a1 + 137))
        return 2;
      return 1;
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious event received", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_26;
      goto LABEL_59;
    case 7:
      v19[0] = off_1021CFF80;
      v19[1] = a1;
      v20 = v19;
      v9 = *(_QWORD *)(a1 + 1528);
      if (!v9)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v19);
      v10 = v20;
      if (v20 == v19)
      {
        v11 = 4;
        v10 = v19;
      }
      else
      {
        if (!v20)
          goto LABEL_51;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_51:
      sub_1017E906C(a1, *(_QWORD *)(a1 + 1488), 24, (uint64_t)"SuplNotEnabled");
      return 0;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious event received", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_26;
      goto LABEL_59;
    case 9:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious event received", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_26;
LABEL_59:
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
LABEL_26:
      v18[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL disabled, spurious event received", v18, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Disabled(CLEurekaSupl::Event)", "%s\n", v7);
      goto LABEL_44;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious SummaryStatsReceived event received", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFED0);
        v18[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL disabled, spurious SummaryStatsReceived event received", v18, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Disabled(CLEurekaSupl::Event)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_36;
    case 11:
LABEL_36:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious SessionDone event received", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v18[0] = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL disabled, spurious SessionDone event received", v18, v17);
      v8 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Disabled(CLEurekaSupl::Event)", "%s\n", v14);
LABEL_44:
      if (v8 != buf)
        free(v8);
      return 0;
    default:
      return result;
  }
}

void sub_1017E6FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == &a13)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017E706C(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  _WORD v16[8];
  _QWORD v17[3];
  _QWORD *v18;
  uint8_t buf[1640];

  result = 1;
  switch(a2)
  {
    case 0:
      sub_1017E888C(a1);
      return 1;
    case 3:
      return 0;
    case 4:
      return 2;
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_33;
      goto LABEL_54;
    case 7:
      v17[0] = off_1021D0010;
      v17[1] = a1;
      v18 = v17;
      v11 = *(_QWORD *)(a1 + 1528);
      if (!v11)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v17);
      v12 = v18;
      if (v18 == v17)
      {
        v13 = 4;
        v12 = v17;
      }
      else
      {
        if (!v18)
          goto LABEL_50;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_50:
      sub_1017E906C(a1, *(_QWORD *)(a1 + 1488), 27, (uint64_t)"NotInEmergency");
      return 1;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_33;
      goto LABEL_54;
    case 9:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_33;
LABEL_54:
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
LABEL_33:
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL in idle, spurious event received", v16, 2);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Idle(CLEurekaSupl::Event)", "%s\n", v10);
      goto LABEL_46;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning SUPL in idle, spurious SummaryStatsReceived event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning SUPL in idle, spurious SummaryStatsReceived event received", v16, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Idle(CLEurekaSupl::Event)", "%s\n", v7);
      goto LABEL_46;
    case 11:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious SessionDone event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL in idle, spurious SessionDone event received", v16, 2);
      v8 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Idle(CLEurekaSupl::Event)", "%s\n", v15);
LABEL_46:
      if (v8 != buf)
        free(v8);
      return 1;
    default:
      return result;
  }
}

void sub_1017E7738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == &a13)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017E77AC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _WORD v22[8];
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint8_t buf[1640];

  result = 2;
  switch(a2)
  {
    case 0:
      sub_1017E888C(a1);
      return 2;
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL ready, spurious event received", v22, 2);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Ready(CLEurekaSupl::Event)", "%s\n", v10);
      goto LABEL_34;
    case 3:
      return 0;
    case 5:
      if (*(_BYTE *)(a1 + 136))
        return 2;
      else
        return 1;
    case 7:
      v15 = *(_QWORD *)(a1 + 1488);
      if (v15)
      {
        if (sub_1017E9448(a1, v15))
        {
          v25[0] = off_1021D0090;
          v25[1] = a1;
          v26 = v25;
          v16 = *(_QWORD *)(a1 + 1528);
          if (!v16)
            sub_10025FD1C();
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v25);
          v17 = v26;
          if (v26 == v25)
          {
            v18 = 4;
            v17 = v25;
          }
          else
          {
            if (!v26)
              return 3;
            v18 = 5;
          }
          (*(void (**)(void))(*v17 + 8 * v18))();
          return 3;
        }
        v23[0] = off_1021D0110;
        v23[1] = a1;
        v24 = v23;
        v19 = *(_QWORD *)(a1 + 1528);
        if (!v19)
          sub_10025FD1C();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 48))(v19, v23);
        v20 = v24;
        if (v24 == v23)
        {
          v21 = 4;
          v20 = v23;
        }
        else
        {
          if (!v24)
            return 2;
          v21 = 5;
        }
        (*(void (**)(void))(*v20 + 8 * v21))();
      }
      else
      {
        sub_1017EF514(2);
        __break(1u);
LABEL_60:
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
LABEL_9:
        v6 = v2[15];
        v22[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#Warning SUPL ready, spurious event received", v22, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Ready(CLEurekaSupl::Event)", "%s\n", v7);
LABEL_34:
        if (v8 != buf)
          free(v8);
      }
      return 2;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v2 = &qword_1022A0000;
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_9;
      goto LABEL_60;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious SummaryStatsReceived event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL ready, spurious SummaryStatsReceived event received", v22, 2);
      v8 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Ready(CLEurekaSupl::Event)", "%s\n", v12);
      goto LABEL_34;
    case 11:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious SessionDone event received", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning SUPL ready, spurious SessionDone event received", v22, 2);
      v8 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Ready(CLEurekaSupl::Event)", "%s\n", v14);
      goto LABEL_34;
    default:
      return result;
  }
}

void sub_1017E7DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v21;
  uint64_t v22;

  v21 = a16;
  if (a16 == &a13)
  {
    v22 = 4;
    v21 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017E7E68(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  _BYTE v21[960];
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  _WORD v30[8];
  _QWORD v31[3];
  _QWORD *v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  _QWORD v37[3];
  _QWORD *v38;

  result = 3;
  switch(a2)
  {
    case 0:
      sub_100853604(a1 + 3128, *(_DWORD *)a1, 1);
      sub_1017E99BC(a1 + 8, 9, 180.0);
      *(_BYTE *)(a1 + 2484) = *(_BYTE *)(a1 + 137);
      return 3;
    case 1:
      sub_100853604(a1 + 3128, *(_DWORD *)a1, 0);
      sub_1017EA48C(a1 + 8, 9);
      if ((sub_100014ADC() & 1) != 0)
        return 3;
      v37[0] = off_1021D0190;
      v38 = v37;
      v5 = *(_QWORD *)(a1 + 1528);
      if (!v5)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v37);
      v6 = v38;
      if (v38 == v37)
      {
        v7 = 4;
        v6 = v37;
      }
      else
      {
        if (!v38)
          return 3;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
      return 3;
    case 3:
      return 0;
    case 7:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Supl, Received new SUPL request while another session is still ongoing and hence denying", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFED0);
        v30[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Supl, Received new SUPL request while another session is still ongoing and hence denying", v30, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Session(CLEurekaSupl::Event)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v31[0] = off_1021D0210;
      v31[1] = a1;
      v32 = v31;
      v12 = *(_QWORD *)(a1 + 1528);
      if (!v12)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v31);
      v13 = v32;
      if (v32 == v31)
      {
        v14 = 4;
        v13 = v31;
      }
      else
      {
        if (!v32)
          goto LABEL_55;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_55:
      sub_1017E906C(a1, *(_QWORD *)(a1 + 1488), 24, (uint64_t)"AlreadyInSession");
      return 3;
    case 9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Supl session timeout\"}", buf, 0x12u);
      }
      *(_DWORD *)(a1 + 1692) = 2;
      sub_1017E1D24(a1 + 1544);
      if (*(_QWORD *)(a1 + 3120))
      {
        sub_101703314((uint64_t)v21, a1 + 1544);
        v16 = *(_QWORD *)(a1 + 3120);
        if (!v16)
          sub_10025FD1C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, v21);
        if (v29 < 0)
          operator delete(__p);
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
        if (v23 < 0)
          operator delete(v22);
      }
      sub_1017E2B94(a1 + 1544);
      goto LABEL_48;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#SUPL,#ca,Summary stats received in Session state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFED0);
        v30[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#SUPL,#ca,Summary stats received in Session state", v30, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Session(CLEurekaSupl::Event)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      sub_1017EA91C((double *)a1);
      return 3;
    case 11:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#SUPL session, SessionDone event received", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFED0);
        v30[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#SUPL session, SessionDone event received", v30, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Session(CLEurekaSupl::Event)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
LABEL_48:
      if (*(_BYTE *)(a1 + 136))
        return 2;
      if (*(_BYTE *)(a1 + 137))
        return 2;
      return 1;
    default:
      return result;
  }
}

void sub_1017E8518(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 64);
  if (v3 == (_QWORD *)(v1 - 88))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 88);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1017E85BC(_DWORD *a1, uint64_t a2, int a3)
{
  sub_1017E5E68(a1, a2, a3);
}

uint64_t sub_1017E85C8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Supl,Destroyed\n", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,Destroyed\n", v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "CLEurekaSupl::~CLEurekaSupl()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_1017E888C(a1);

  *(_QWORD *)(a1 + 3216) = 0;
  v3 = *(_QWORD **)(a1 + 3184);
  if (v3 == (_QWORD *)(a1 + 3160))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 3160);
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  v5 = *(_QWORD **)(a1 + 3152);
  if (v5 == (_QWORD *)(a1 + 3128))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 3128);
  }
  else
  {
    if (!v5)
      goto LABEL_16;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_16:
  v7 = *(_QWORD **)(a1 + 3120);
  if (v7 == (_QWORD *)(a1 + 3096))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 3096);
  }
  else
  {
    if (!v7)
      goto LABEL_21;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_21:
  if (*(char *)(a1 + 2743) < 0)
    operator delete(*(void **)(a1 + 2720));
  if (*(char *)(a1 + 2719) < 0)
    operator delete(*(void **)(a1 + 2696));
  if (*(char *)(a1 + 2551) < 0)
    operator delete(*(void **)(a1 + 2528));
  if (*(char *)(a1 + 2527) < 0)
    operator delete(*(void **)(a1 + 2504));
  v9 = *(_QWORD **)(a1 + 1528);
  if (v9 == (_QWORD *)(a1 + 1504))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 1504);
    goto LABEL_33;
  }
  if (v9)
  {
    v10 = 5;
LABEL_33:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  sub_100857FD0(a1 + 144);
  sub_1017EE4D4(a1 + 8);
  return a1;
}

void sub_1017E8880(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_1017E888C(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Supl,Initialized state machine data\n", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,Initialized state machine data\n", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::resetStateData()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  return result;
}

uint64_t (***sub_1017E8A2C(uint64_t a1))()
{
  uint64_t (***result)();
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  char v7;
  uint64_t (***v8)();

  result = (uint64_t (***)())sub_1001DC704();
  if ((_DWORD)result)
  {
    v3 = sub_1016FA880(*(_DWORD *)a1);
    v6 = off_1021D0490;
    v7 = v3;
    v8 = &v6;
    v4 = *(_QWORD *)(a1 + 1528);
    if (!v4)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v4 + 48))(v4, &v6);
    result = v8;
    if (v8 == &v6)
    {
      v5 = 4;
      result = &v6;
    }
    else
    {
      if (!v8)
        return result;
      v5 = 5;
    }
    return (uint64_t (***)())(*result)[v5]();
  }
  return result;
}

void sub_1017E8AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1017E8B30(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  char v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  void *__p[2];
  uint64_t v21;
  _WORD v22[8];
  _QWORD v23[3];
  _QWORD *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint8_t buf[8];
  _BYTE v32[20];
  __int16 v33;
  int v34;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Supl,initializeSupl", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
    v22[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Supl,initializeSupl", v22, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::initializeSupl()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 1132);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v32 = 2082;
    *(_QWORD *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(_QWORD *)&v32[12] = "initializesupl";
    v33 = 1026;
    v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"Supl,using udp port config\":%{public}d}", buf, 0x22u);
  }
  if ((sub_1001DC704() & 1) != 0)
  {
    v5 = sub_1016FA880(*(_DWORD *)a1);
    v6 = v5;
    if (v5 == 255)
      goto LABEL_31;
    *(_QWORD *)buf = 0;
    *(_QWORD *)v32 = 0;
    *(_QWORD *)&v32[8] = 0;
    sub_100517458((int)v22, (unint64_t *)buf, (unsigned __int8 *)(a1 + 1104));
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
    sub_1007855D8(__p, *(const void **)buf, *(uint64_t *)v32, *(_QWORD *)v32 - *(_QWORD *)buf);
    v26 = 0;
    v7 = operator new(0x28uLL);
    *(_QWORD *)v7 = off_1021D0390;
    v7[8] = v6;
    *((_OWORD *)v7 + 1) = *(_OWORD *)__p;
    *((_QWORD *)v7 + 4) = v21;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
    v26 = v7;
    v8 = *(_QWORD *)(a1 + 1528);
    if (!v8)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v25);
    v9 = v26;
    if (v26 == v25)
    {
      v10 = 4;
      v9 = v25;
    }
    else
    {
      if (!v26)
      {
LABEL_27:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)v32 = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
LABEL_31:
        v23[0] = off_1021D0410;
        v23[1] = a1;
        v24 = v23;
        v17 = *(_QWORD *)(a1 + 1528);
        if (!v17)
          sub_10025FD1C();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v23);
        result = v24;
        if (v24 == v23)
        {
          v16 = 4;
          result = v23;
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
        }
        goto LABEL_33;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_27;
  }
  v29[0] = off_1021D0290;
  v29[1] = a1;
  v30 = v29;
  v11 = *(_QWORD *)(a1 + 1528);
  if (!v11)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v29);
  v12 = v30;
  if (v30 == v29)
  {
    v13 = 4;
    v12 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v27[0] = off_1021D0310;
  v28 = v27;
  v14 = *(_QWORD *)(a1 + 1528);
  if (!v14)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v27);
  result = v28;
  if (v28 == v27)
  {
    v16 = 4;
    result = v27;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
  }
LABEL_33:
  if (!result)
    return result;
  v16 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_1017E8F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  if (a33)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

void sub_1017E906C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v8;
  double Current;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _BYTE v19[960];
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  _BYTE v33[14];
  char v34;
  int v35;
  int v36;
  long double v37;
  double v38;
  int v39;
  int v40;
  int v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)v33 = a4;
    *(_WORD *)&v33[8] = 1026;
    *(_DWORD *)&v33[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Supl,isRejected,reason,%{public}s,errorCode,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
    v28 = 136446466;
    v29 = a4;
    v30 = 1026;
    v31 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Supl,isRejected,reason,%{public}s,errorCode,%{public}d", &v28, 18);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::logRejectedSupl(const CLEurekaNilrTypes::SuplInit &, Emergency::SessionErrorCode, const char *)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_100856FE0((uint64_t)buf);
  Current = CFAbsoluteTimeGetCurrent();
  v39 = 1;
  v10 = *(unsigned __int8 *)(a2 + 72);
  if (v10 == 4)
    v11 = 3;
  else
    v11 = 0;
  if (v10 == 1)
    v11 = 2;
  if (!*(_BYTE *)(a2 + 72))
    v11 = 1;
  if (v10 == 2)
    v11 = 4;
  if (v10 == 3)
    v11 = 5;
  if (v10 == 5)
    v11 = 8;
  if (v10 == 6)
    v11 = 7;
  if (v10 == 7)
    v11 = 9;
  if (v10 == 8)
    v11 = 6;
  *(double *)&v33[4] = Current;
  if (v10 == 9)
    v12 = 10;
  else
    v12 = v11;
  v36 = 2;
  v35 = v12;
  LOBYTE(Current) = *(_BYTE *)(a2 + 200);
  v38 = (pow(1.1, (double)*(unint64_t *)&Current) + -1.0) * 10.0;
  v37 = ldexp(1.0, *(unsigned __int8 *)(a2 + 203));
  v42 = *(_BYTE *)(a1 + 137);
  v13 = *(_DWORD *)(a2 + 36);
  v14 = v13 + 1;
  v15 = v13 + 2;
  if (v14 >= 3)
    v15 = 0;
  v39 = v15;
  v41 = *(_DWORD *)a1;
  v40 = a3;
  v34 = 0;
  sub_1017E1D24((uint64_t)buf);
  if (*(_QWORD *)(a1 + 3120))
  {
    sub_101703314((uint64_t)v19, (uint64_t)buf);
    v16 = *(_QWORD *)(a1 + 3120);
    if (!v16)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, v19);
    if (v27 < 0)
      operator delete(__p);
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
  }
  if (a3 == 27)
    sub_1017ECA48(a1);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
}

void sub_1017E941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1008484E0((uint64_t)va);
  sub_1008484E0((uint64_t)&STACK[0x510]);
  _Unwind_Resume(a1);
}

uint64_t sub_1017E9448(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  double Current;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  NSObject *v22;
  __int128 v23;
  uint64_t v25[2];
  uint8_t v26[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  _BYTE v31[24];
  uint8_t buf[960];
  std::string v33;
  std::string v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  std::string v43;
  std::string __p;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2 + 8;
    v6 = *(_DWORD *)(a2 + 36);
    if (*(char *)(a2 + 31) < 0)
      v5 = *(_QWORD *)(a2 + 8);
    v7 = *(unsigned __int8 *)(a1 + 1136);
    *(_DWORD *)buf = 68290306;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "isvalidsupl";
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = v6;
    *(_WORD *)&buf[34] = 2082;
    *(_QWORD *)&buf[36] = v5;
    *(_WORD *)&buf[44] = 1026;
    *(_DWORD *)&buf[46] = (v7 >> 2) & 1;
    *(_WORD *)&buf[50] = 1026;
    *(_DWORD *)&buf[52] = v7 & 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"trigger\":%{public}d, \"url\":%{public, location:escape_only}s, \"allowhslpmismatch\":%{public}d, \"allownonemergencysupl\":%{public}d}", buf, 0x38u);
  }
  sub_100856FE0((uint64_t)buf);
  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)&buf[136] = 1;
  v9 = *(unsigned __int8 *)(a2 + 72);
  if (v9 == 4)
    v10 = 3;
  else
    v10 = 0;
  if (v9 == 1)
    v10 = 2;
  if (!*(_BYTE *)(a2 + 72))
    v10 = 1;
  if (v9 == 2)
    v10 = 4;
  if (v9 == 3)
    v10 = 5;
  if (v9 == 5)
    v10 = 8;
  if (v9 == 6)
    v10 = 7;
  if (v9 == 7)
    v10 = 9;
  if (v9 == 8)
    v10 = 6;
  *(double *)&buf[8] = Current;
  if (v9 == 9)
    v11 = 10;
  else
    v11 = v10;
  *(_DWORD *)&buf[84] = v11;
  *(_DWORD *)&buf[88] = 2;
  LOBYTE(Current) = *(_BYTE *)(a2 + 200);
  *(double *)&buf[128] = (pow(1.1, (double)*(unint64_t *)&Current) + -1.0) * 10.0;
  *(_QWORD *)&buf[120] = ldexp(1.0, *(unsigned __int8 *)(a2 + 203));
  buf[940] = *(_BYTE *)(a1 + 137);
  v12 = *(_DWORD *)(a2 + 36);
  v13 = v12 + 1;
  v14 = v12 + 2;
  if (v13 >= 3)
    v14 = 0;
  *(_DWORD *)&buf[136] = v14;
  *(_DWORD *)&buf[192] = *(_DWORD *)a1;
  v25[0] = (uint64_t)buf;
  v25[1] = a1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v26 = 68289794;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    v30 = 1026;
    *(_DWORD *)v31 = *(_DWORD *)&buf[84];
    *(_WORD *)&v31[4] = 2050;
    *(_QWORD *)&v31[6] = *(_QWORD *)&buf[128];
    *(_WORD *)&v31[14] = 2050;
    *(_QWORD *)&v31[16] = *(_QWORD *)&buf[120];
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd SUPL init fields\", \"methodtype\":%{public}d, \"requestedAccuracy\":\"%{public}f\", \"requestedtimeout\":\"%{public}f\"}", v26, 0x2Cu);
  }
  if (*(_DWORD *)(a2 + 36) != -1)
  {
    v16 = "notSingleShot";
    v17 = 7;
LABEL_37:
    sub_1017ECE44(v25, v17, (uint64_t)v16);
    v18 = 0;
    goto LABEL_55;
  }
  v19 = *(unsigned __int8 *)(a2 + 31);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a2 + 16);
  if (v19)
  {
    v20 = *(unsigned __int8 *)(a1 + 1136);
    if ((v20 & 4) == 0 && !sub_100F890C0((uint64_t *)(a2 + 8), a1 + 1080, (v20 >> 3) & 1))
    {
      v16 = "hslpMismatch";
      v17 = 23;
      goto LABEL_37;
    }
  }
  if (!*(_BYTE *)(a1 + 137) && (*(_BYTE *)(a1 + 1136) & 1) == 0)
  {
    v21 = *(unsigned __int8 *)(a2 + 31);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a2 + 16);
    if (!v21)
    {
      v16 = "nonEmergencySupl";
      goto LABEL_67;
    }
  }
  if (*(_DWORD *)(a2 + 32) == 3 && !*(_DWORD *)(a1 + 1132))
  {
    v16 = "udpSuplInitNotAllowed";
LABEL_67:
    v17 = 24;
    goto LABEL_37;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v22 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v26 = 68289538;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    v30 = 2082;
    *(_QWORD *)v31 = "Supl,isValidSupl";
    *(_WORD *)&v31[8] = 2082;
    *(_QWORD *)&v31[10] = "Pass";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"result\":%{public, location:escape_only}s}", v26, 0x26u);
  }
  memcpy((void *)(a1 + 1544), buf, 0x3C0uLL);
  std::string::operator=((std::string *)(a1 + 2504), &v33);
  std::string::operator=((std::string *)(a1 + 2528), &v34);
  *(_OWORD *)(a1 + 2632) = v40;
  *(_OWORD *)(a1 + 2648) = v41;
  *(_OWORD *)(a1 + 2664) = v42[0];
  *(_OWORD *)(a1 + 2584) = v37;
  *(_OWORD *)(a1 + 2600) = v38;
  *(_OWORD *)(a1 + 2616) = v39;
  v23 = v36;
  *(_OWORD *)(a1 + 2552) = v35;
  *(_OWORD *)(a1 + 2568) = v23;
  *(_OWORD *)(a1 + 2676) = *(_OWORD *)((char *)v42 + 12);
  std::string::operator=((std::string *)(a1 + 2696), &v43);
  std::string::operator=((std::string *)(a1 + 2720), &__p);
  *(_QWORD *)(a1 + 2776) = v47;
  *(_OWORD *)(a1 + 2744) = v45;
  *(_OWORD *)(a1 + 2760) = v46;
  *(CFAbsoluteTime *)(a1 + 3200) = CFAbsoluteTimeGetCurrent();
  v18 = 1;
LABEL_55:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return v18;
}

void sub_1017E999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1008484E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017E99BC(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaSupl>::setTimeoutEvent(Event, double) [T = CLEurekaSupl]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1017EC9F0(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1017EC9F0(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaSupl>::setTimeoutEvent(Event, double) [T = CLEurekaSupl]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFED0);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1017EC9F0(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CFED0);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1017EC9F0(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaSupl>::setTimeoutEvent(Event, double) [T = CLEurekaSupl]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1017EE8F8;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1017EC9F0(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1017EC9F0(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_1017EA48C(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1017EC9F0(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1017EC9F0(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaSupl>::cancelTimeoutEvent(Event) [T = CLEurekaSupl]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1017EC9F0(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1017EC9F0(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_1017EA91C(double *a1)
{
  NSObject *v2;
  double v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t i;
  void *v20;
  double v21;
  void *v22;
  long double v23;
  void *v24;
  void *v25;
  const char *v31;
  uint8_t *v32;
  void *__p[2];
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36[3];
  void **v37;
  uint64_t v38;
  void **v39;
  uint64_t v40[3];
  char *v41;
  _BYTE *v42;
  char *v43;
  void ***v44;
  char v45;
  uint8_t buf[8];
  _DWORD v47[6];
  int v48;
  _DWORD v49[132];
  uint64_t v50;
  int v51;
  int v52;
  char v53;
  int v54;
  uint64_t v55;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Supl,#ca,submitSessionStatsToCA", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Supl,#ca,submitSessionStatsToCA", &v41, 2);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::submitSessionStatsToCA()", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v3 = sqrt(a1[363] * a1[363] + a1[362] * a1[362]);
  a1[364] = v3;
  v4 = *((_DWORD *)a1 + 733);
  *(_DWORD *)buf = 44;
  v47[0] = v4;
  v5 = (int)a1[367];
  v48 = 0;
  v49[0] = 45;
  v49[2] = v5;
  v49[8] = 0;
  v49[10] = 46;
  v49[12] = 1;
  v6 = *((_DWORD *)a1 + 714);
  v49[18] = 0;
  v49[20] = 47;
  v49[22] = v6;
  v49[28] = 0;
  v7 = *(_DWORD *)a1;
  v49[30] = 79;
  v49[32] = v7;
  v8 = a1[358];
  v49[38] = 0;
  v49[40] = 68;
  *(float *)&v49[42] = v8;
  v9 = a1[359];
  v49[48] = 4;
  v49[50] = 69;
  *(float *)&v49[52] = v9;
  v49[58] = 4;
  v49[60] = 70;
  v49[62] = (int)v3;
  v49[68] = 0;
  v10 = *((unsigned __int8 *)a1 + 2928);
  v49[70] = 71;
  v49[72] = v10;
  v49[78] = 0;
  if (*((_BYTE *)a1 + 2945))
    v11 = 1;
  else
    v11 = 2;
  v49[80] = 63;
  v49[82] = v11;
  v49[88] = 0;
  v12 = *((_QWORD *)a1 + 380);
  if ((v12 & 0x20) != 0)
    v13 = 1;
  else
    v13 = 2;
  v49[90] = 74;
  v49[92] = v13;
  v49[98] = 0;
  if ((v12 & 0x10) != 0)
    v14 = 1;
  else
    v14 = 2;
  v49[100] = 67;
  v49[102] = v14;
  v49[108] = 0;
  if ((v12 & 4) != 0)
    v15 = 1;
  else
    v15 = 2;
  v49[110] = 75;
  v49[112] = v15;
  v49[118] = 0;
  v16 = *((_QWORD *)a1 + 399);
  if (v16 == -1)
    v17 = 2;
  else
    v17 = 1;
  v49[120] = 27;
  v49[122] = v17;
  v49[128] = 0;
  v49[130] = 28;
  v50 = v16;
  v51 = 2;
  v18 = *((_BYTE *)a1 + 137);
  v52 = 83;
  v53 = v18;
  v54 = 7;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v37 = (void **)&v41;
  LOBYTE(v38) = 0;
  v41 = (char *)operator new(0x280uLL);
  v42 = v41;
  v43 = v41 + 640;
  v42 = (_BYTE *)sub_1006AB40C((uint64_t)&v43, (uint64_t)buf, (uint64_t)&v55, (uint64_t)v41);
  for (i = 608; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v20 = (void *)*((_QWORD *)a1 + 402);
  memset(v40, 0, sizeof(v40));
  sub_1006AB68C(v40, (uint64_t)v41, (uint64_t)v42, 0xCCCCCCCCCCCCCCCDLL * ((v42 - v41) >> 3));
  objc_msgSend(v20, "setMeasurements:", sub_1006A7590(v40));
  *(_QWORD *)buf = v40;
  sub_1006AB5A0((void ***)buf);
  if (*((_DWORD *)a1 + 714) == 1)
  {
    v21 = a1[401] - a1[400];
    *(_DWORD *)buf = 42;
    v47[0] = (int)v21;
    v48 = 0;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    v44 = &v37;
    v45 = 0;
    v37 = (void **)operator new(0x28uLL);
    v38 = (uint64_t)v37;
    v39 = v37 + 5;
    v38 = sub_1006AB40C((uint64_t)&v39, (uint64_t)buf, (uint64_t)v49, (uint64_t)v37);
    sub_1001F8644((uint64_t)v47);
    v22 = (void *)*((_QWORD *)a1 + 402);
    memset(v36, 0, sizeof(v36));
    sub_1006AB68C(v36, (uint64_t)v37, v38, 0xCCCCCCCCCCCCCCCDLL * ((v38 - (uint64_t)v37) >> 3));
    objc_msgSend(v22, "setMeasurements:", sub_1006A7590(v36));
    *(_QWORD *)buf = v36;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v37;
    sub_1006AB5A0((void ***)buf);
  }
  if (sub_10011CE88(a1[358], a1[359])
    && !sub_10011CE64(a1[358], a1[359])
    && sub_10011CE88(a1[370], a1[371])
    && !sub_10011CE64(a1[370], a1[371]))
  {
    v23 = sub_10011E634(a1 + 404, a1[358], a1[359], a1[370], a1[371], 0.0);
    *(_DWORD *)buf = 72;
    v47[0] = (int)v23;
    v48 = 0;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    v44 = &v37;
    v45 = 0;
    v37 = (void **)operator new(0x28uLL);
    v38 = (uint64_t)v37;
    v39 = v37 + 5;
    v38 = sub_1006AB40C((uint64_t)&v39, (uint64_t)buf, (uint64_t)v49, (uint64_t)v37);
    sub_1001F8644((uint64_t)v47);
    v24 = (void *)*((_QWORD *)a1 + 402);
    memset(v35, 0, sizeof(v35));
    sub_1006AB68C(v35, (uint64_t)v37, v38, 0xCCCCCCCCCCCCCCCDLL * ((v38 - (uint64_t)v37) >> 3));
    objc_msgSend(v24, "setMeasurements:", sub_1006A7590(v35));
    *(_QWORD *)buf = v35;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v37;
    sub_1006AB5A0((void ***)buf);
  }
  v25 = (void *)*((_QWORD *)a1 + 402);
  if (byte_1023111F7 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_1023111E0, *((unint64_t *)&xmmword_1023111E0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1023111E0;
    v34 = unk_1023111F0;
  }
  objc_msgSend(v25, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  a1[399] = NAN;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)a1 + 200) = _Q0;
  sub_1017ED82C((uint64_t)(a1 + 356));
  *(_QWORD *)buf = &v41;
  sub_1006AB5A0((void ***)buf);
}

void sub_1017EAF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char *a36)
{
  a36 = &a24;
  sub_1006AB5A0((void ***)&a36);
  a36 = &a30;
  sub_1006AB5A0((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_1017EB060(uint64_t a1)
{
  *(_BYTE *)(a1 + 1536) = 1;
  return sub_1017EB06C(a1);
}

uint64_t sub_1017EB06C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  _QWORD *v10;
  __int16 v11;
  unsigned int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  sub_100197040();
  if ((sub_10075D338() & 1) == 0)
    return sub_1017EB350(a1 + 8, 3);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 151);
    v4 = (_QWORD *)(a1 + 1080);
    v5 = *(unsigned __int16 *)(a1 + 1128);
    if (*(char *)(a1 + 1103) < 0)
      v4 = (_QWORD *)*v4;
    v6 = *(unsigned __int8 *)(a1 + 1136);
    *(_DWORD *)buf = 67110914;
    v22 = v3;
    v23 = 1024;
    v24 = v5;
    v25 = 2080;
    v26 = v4;
    v27 = 1024;
    v28 = v6 & 1;
    v29 = 1024;
    v30 = (v6 >> 1) & 1;
    v31 = 1024;
    v32 = (v6 >> 2) & 1;
    v33 = 1024;
    v34 = (v6 >> 3) & 1;
    v35 = 1024;
    v36 = (v6 >> 4) & 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Supl,carrierBundleSettings,supported,%d,port,%d,hslp,%s,allowNonEmergencySupl,%d,allowSuplWithoutEmergencyNotification,%d,allowHslpMismatch,%d,allowHslpWildCard,%d,allowNonConformingEslpAddress,%d\n", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v9 = *(unsigned __int8 *)(a1 + 151);
    v10 = (_QWORD *)(a1 + 1080);
    v11 = *(_WORD *)(a1 + 1128);
    if (*(char *)(a1 + 1103) < 0)
      v10 = (_QWORD *)*v10;
    v12 = *(unsigned __int8 *)(a1 + 1136);
    LODWORD(v15) = 67110914;
    HIDWORD(v15) = v9;
    LOWORD(v16) = 1024;
    HIWORD(v16) = v11;
    LOWORD(v17) = 1024;
    HIWORD(v17) = v12 & 1;
    LOWORD(v18) = ((v12 >> 2) & 1) >> 16;
    HIWORD(v18) = 1024;
    v19 = 1024;
    v20 = (v12 >> 4) & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,carrierBundleSettings,supported,%d,port,%d,hslp,%s,allowNonEmergencySupl,%d,allowSuplWithoutEmergencyNotification,%d,allowHslpMismatch,%d,allowHslpWildCard,%d,allowNonConformingEslpAddress,%d\n", &v15, 54, v15, v16, (_DWORD)v10, v17, (v12 >> 1) & 1, v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::updateSupport()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*(_BYTE *)(a1 + 151))
    v7 = 2;
  else
    v7 = 3;
  return sub_1017EB350(a1 + 8, v7);
}

uint64_t sub_1017EB350(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t *v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  void **v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE *v95;
  _BYTE *v96;
  void **v97;
  char *v98;
  char *v99;
  const char *v100;
  const char *v101;
  int v102;
  void *v103[2];
  char v104;
  unsigned int v105;
  _BYTE __p[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  void **v110;
  _BYTE buf[12];
  __int16 v112;
  _BYTE *v113;
  __int16 v114;
  _BYTE *v115;
  _BYTE v116[12];
  __int16 v117;
  _BYTE *v118;
  char v119;

  ++*(_DWORD *)(a1 + 88);
  v105 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_1017EF684();
    goto LABEL_169;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_1017EF7F4(qword_1022A0070 == -1);
    goto LABEL_169;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(int *)(a1 + 4);
    if (v8 > 3)
      v9 = "StateUnknown";
    else
      v9 = off_1021D0560[v8];
    sub_1015A2E04(__p, v9);
    v10 = SHIBYTE(v109);
    v11 = *(_BYTE **)__p;
    sub_1017EC9F0(a2, v116);
    v12 = __p;
    if (v10 < 0)
      v12 = v11;
    if (v119 >= 0)
      v13 = v116;
    else
      v13 = *(_BYTE **)v116;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v112 = 2080;
    v113 = v12;
    v114 = 2080;
    v115 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v119 < 0)
      operator delete(*(void **)v116);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v63 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v63 = (_QWORD *)*v63;
    v64 = qword_1022A0078;
    v65 = *(unsigned __int8 *)(a1 + 120);
    sub_1017ECA1C(*(_DWORD *)(a1 + 4), v116);
    v66 = v119;
    v67 = *(_BYTE **)v116;
    sub_1017EC9F0(a2, v103);
    v68 = v116;
    if (v66 < 0)
      v68 = v67;
    if (v104 >= 0)
      v69 = v103;
    else
      v69 = (void **)v103[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v63;
    v107 = 2080;
    v108 = v68;
    v109 = 2080;
    v110 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, v65, "%scurrent_state,%s,event,%s", __p, 32, v101);
    v71 = v70;
    if (v104 < 0)
      operator delete(v103[0]);
    v3 = &qword_1022A0000;
    if (v119 < 0)
      operator delete(*(void **)v116);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (uint64_t **)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = a1 + 16;
  do
  {
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (!v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_1017EF96C();
    goto LABEL_169;
  }
  v22 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v23 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v21 >> 1));
  if ((v21 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v22);
  v24 = v22(v23, a2);
  v25 = v24;
  v102 = v24;
  if (a2 <= 1 && (_DWORD)v24 != v105)
  {
    sub_1017EFDBC();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v78 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v78 = (_QWORD *)*v78;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v28 = qword_1022A0078;
  v29 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v29))
  {
    v30 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v30 = (_QWORD *)*v30;
    if (v25 > 3)
      v31 = "StateUnknown";
    else
      v31 = off_1021D0560[(int)v25];
    sub_1015A2E04(buf, v31);
    if (v114 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v107 = 2080;
    v108 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v114) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    sub_1017ECA1C(v25, __p);
    if (v109 >= 0)
      v75 = __p;
    else
      v75 = *(_BYTE **)__p;
    *(_DWORD *)v116 = 136315394;
    *(_QWORD *)&v116[4] = v72;
    v117 = 2080;
    v118 = v75;
    LODWORD(v100) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v116, v100);
    v77 = v76;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  if ((_DWORD)v25 != v105)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v35 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v35 = (_QWORD *)*v35;
      if (v105 > 3)
        v36 = "StateUnknown";
      else
        v36 = off_1021D0560[v105];
      sub_1015A2E04(__p, v36);
      v37 = v3;
      v38 = SHIBYTE(v109);
      v39 = *(_BYTE **)__p;
      sub_1015A2E04(v116, "Exit");
      v40 = __p;
      if (v38 < 0)
        v40 = v39;
      if (v119 >= 0)
        v41 = v116;
      else
        v41 = *(_BYTE **)v116;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v35;
      v112 = 2080;
      v113 = v40;
      v114 = 2080;
      v115 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v119 < 0)
        operator delete(*(void **)v116);
      v3 = v37;
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v81 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v81 = (_QWORD *)*v81;
      v82 = qword_1022A0078;
      v83 = *(unsigned __int8 *)(a1 + 120);
      sub_1017ECA1C(v105, v116);
      v84 = v3;
      v85 = v119;
      v86 = *(_BYTE **)v116;
      sub_1015A2E04(v103, "Exit");
      v87 = v116;
      if (v85 < 0)
        v87 = v86;
      if (v104 >= 0)
        v88 = v103;
      else
        v88 = (void **)v103[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v81;
      v107 = 2080;
      v108 = v87;
      v109 = 2080;
      v110 = v88;
      LODWORD(v100) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, v83, "%soldState,%s,event,%s", __p, v100, (const char *)(a1 + 8));
      v90 = v89;
      if (v104 < 0)
        operator delete(v103[0]);
      v3 = v84;
      v15 = (uint64_t **)v101;
      if (v119 < 0)
        operator delete(*(void **)v116);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v90);
      if (v90 != buf)
        free(v90);
    }
    v42 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v105;
    v43 = sub_1000610B4(v15, (int *)&v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v44 = v43[5];
    v45 = (uint64_t)v43[6];
    v46 = (_QWORD *)(v42 + (v45 >> 1));
    if ((v45 & 1) != 0)
      v44 = *(uint64_t **)(*v46 + v44);
    v47 = ((uint64_t (*)(_QWORD *, uint64_t))v44)(v46, 1);
    if (v47 == v105)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v48 = qword_1022A0078;
      v49 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v49))
      {
        v50 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v50 = (_QWORD *)*v50;
        if (v25 > 3)
          v51 = "StateUnknown";
        else
          v51 = off_1021D0560[(int)v25];
        sub_1015A2E04(__p, v51);
        v52 = v3;
        v53 = SHIBYTE(v109);
        v54 = *(_BYTE **)__p;
        sub_1015A2E04(v116, "Enter");
        v55 = __p;
        if (v53 < 0)
          v55 = v54;
        if (v119 >= 0)
          v56 = v116;
        else
          v56 = *(_BYTE **)v116;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v50;
        v112 = 2080;
        v113 = v55;
        v114 = 2080;
        v115 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v119 < 0)
          operator delete(*(void **)v116);
        v3 = v52;
        if (SHIBYTE(v109) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CFED0);
        v91 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v91 = (_QWORD *)*v91;
        v92 = qword_1022A0078;
        v93 = *(unsigned __int8 *)(a1 + 120);
        sub_1017ECA1C(v25, v116);
        v94 = v119;
        v95 = *(_BYTE **)v116;
        sub_1015A2E04(v103, "Enter");
        v96 = v116;
        if (v94 < 0)
          v96 = v95;
        if (v104 >= 0)
          v97 = v103;
        else
          v97 = (void **)v103[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v91;
        v107 = 2080;
        v108 = v96;
        v109 = 2080;
        v110 = v97;
        LODWORD(v100) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, v93, "%snewState,%s,event,%s", __p, v100, v101);
        v99 = v98;
        if (v104 < 0)
          operator delete(v103[0]);
        if (v119 < 0)
          operator delete(*(void **)v116);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v99);
        if (v99 != buf)
          free(v99);
      }
      v57 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v102;
      v58 = sub_1000610B4(v15, &v102, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v59 = v58[5];
      v60 = (uint64_t)v58[6];
      v61 = (_QWORD *)(v57 + (v60 >> 1));
      if ((v60 & 1) != 0)
        v59 = *(uint64_t **)(*v61 + v59);
      v25 = ((uint64_t (*)(_QWORD *, _QWORD))v59)(v61, 0);
      if ((_DWORD)v25 == v102)
        goto LABEL_101;
      sub_1017EFADC();
    }
    else
    {
      sub_1017EFC4C();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_1017EC0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

void sub_1017EC110(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v5;
  void **v6;
  int v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  int v19;
  _BYTE *v20;
  __int16 v21;
  int v22;
  _BYTE buf[12];
  __int16 v24;
  int v25;
  char v26;
  void *__p[2];
  char v28;

  sub_10084B628(a1 + 144, a2);
  if (*(_BYTE *)(a1 + 1536))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      sub_100F790BC(a3, __p);
      v6 = v28 >= 0 ? __p : (void **)__p[0];
      v7 = *(_DWORD *)a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v6;
      v24 = 1024;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Supl,emergency settings changed with reason %s,instance,%d", buf, 0x12u);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v10 = qword_1022A0078;
      sub_100F790BC(a3, buf);
      if (v26 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v12 = *(_DWORD *)a1;
      v19 = 136315394;
      v20 = v11;
      v21 = 1024;
      v22 = v12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 2, "Supl,emergency settings changed with reason %s,instance,%d", (const char *)&v19, 18);
      v14 = v13;
      if (v26 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v14);
      if (v14 != (char *)__p)
        free(v14);
    }
    sub_1017EB06C(a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      sub_100F790BC(a3, __p);
      v9 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Supl,emergency settings changed with reason %s when not started, waiting till start to push", buf, 0xCu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFED0);
      v15 = qword_1022A0078;
      sub_100F790BC(a3, buf);
      if (v26 >= 0)
        v16 = buf;
      else
        v16 = *(_BYTE **)buf;
      v19 = 136315138;
      v20 = v16;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 0, "Supl,emergency settings changed with reason %s when not started, waiting till start to push", (const char *)&v19);
      v18 = v17;
      if (v26 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v18);
      if (v18 != (char *)__p)
        free(v18);
    }
  }
}

uint64_t sub_1017EC508(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  std::string *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  std::string *p_buf;
  int v12;
  std::string *v13;
  std::string *v14;
  std::string buf;
  int v16;
  std::string *v17;
  __int16 v18;
  int v19;
  std::string __p[68];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278(a2, __p);
    v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v6 = *(_DWORD *)a1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Supl,emergencyState,%s,instance,%d", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v10 = qword_1022A0078;
    sub_100CD5278(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v12 = *(_DWORD *)a1;
    v16 = 136315394;
    v17 = p_buf;
    v18 = 1024;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 0, "Supl,emergencyState,%s,instance,%d", (const char *)&v16, 18);
    v14 = v13;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v14);
    if (v14 != __p)
      free(v14);
  }
  if (!sub_100CD5700((uint64_t)a2))
  {
    *(_BYTE *)(a1 + 137) = 0;
    goto LABEL_14;
  }
  v7 = sub_100CD5748(a2, *(_DWORD *)a1);
  *(_BYTE *)(a1 + 137) = v7;
  if (!v7)
  {
LABEL_14:
    v8 = 5;
    return sub_1017EB350(a1 + 8, v8);
  }
  v8 = 4;
  return sub_1017EB350(a1 + 8, v8);
}

uint64_t sub_1017EC77C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "handlesuplinit";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  *(_QWORD *)(a1 + 1488) = a2;
  result = sub_1017EB350(a1 + 8, 7);
  *(_QWORD *)(a1 + 1488) = 0;
  return result;
}

uint64_t sub_1017EC884(uint64_t a1, unsigned int *a2)
{
  NSObject *v4;
  double v5;
  double v6;
  unsigned int v7;
  uint64_t result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68289282;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "handlesuplend";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x1Cu);
  }
  *(_QWORD *)(a1 + 1496) = a2;
  *(CFAbsoluteTime *)(a1 + 1560) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 3208) = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 1552);
  *(double *)(a1 + 2784) = v5;
  v6 = *(double *)(a1 + 1560);
  *(double *)(a1 + 2792) = v6;
  v7 = *a2;
  if (!*a2)
  {
    *(double *)(a1 + 1616) = v6 - v5;
    *(_DWORD *)(a1 + 2840) = 311;
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 2840) = 287;
  if (v7 <= 0xC)
  {
    v7 = dword_101CDE5F0[v7 - 1];
LABEL_9:
    *(_DWORD *)(a1 + 1692) = v7;
  }
  result = sub_1017EB350(a1 + 8, 8);
  *(_QWORD *)(a1 + 1496) = 0;
  return result;
}

_QWORD *sub_1017EC9F0@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xB)
    v2 = "EventUnknown";
  else
    v2 = off_1021D0500[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1017ECA1C@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StateUnknown";
  else
    v2 = off_1021D0560[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_1017ECA48(uint64_t a1)
{
  NSObject *v2;
  uint64_t i;
  void *v4;
  void *v5;
  const char *v6;
  uint8_t *v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10[4];
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[10];
  __int16 v15;
  int v16;
  uint8_t buf[8];
  _BYTE v18[6];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v18 = 1026;
    *(_DWORD *)&v18[2] = 2;
    v19 = 1026;
    v20 = 0;
    v21 = 1026;
    v22 = 0;
    v23 = 1026;
    v24 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,submitNonEmergencySuplSessionStatsToCA,posProtocol,%{public}d,sessionProtocol,%{public}d,msgType,%{public}d,methodType,%{public}d,discardReason,%{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v12 = 67241216;
    v13 = 0x402000000020402;
    *(_DWORD *)v14 = 0;
    *(_WORD *)&v14[4] = 1026;
    *(_DWORD *)&v14[6] = 0;
    v15 = 1026;
    v16 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,submitNonEmergencySuplSessionStatsToCA,posProtocol,%{public}d,sessionProtocol,%{public}d,msgType,%{public}d,methodType,%{public}d,discardReason,%{public}d", &v12, 32);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::submitNonEmergencySuplSessionStatsToCA()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_DWORD *)buf = 86;
  *(_DWORD *)v18 = 0;
  v25 = 0;
  v26 = 51;
  v27 = 2;
  v28 = 0;
  v29 = 52;
  v30 = 0;
  v31 = 0;
  v32 = 84;
  v33 = 1;
  v34 = 0;
  v35 = 85;
  v36 = 0;
  v37 = 0;
  v13 = 0;
  *(_QWORD *)v14 = 0;
  v12 = 0;
  v10[3] = (uint64_t)&v12;
  v11 = 0;
  v12 = (uint64_t)operator new(0xC8uLL);
  v13 = v12;
  *(_QWORD *)v14 = v12 + 200;
  v13 = sub_1006AB40C((uint64_t)v14, (uint64_t)buf, (uint64_t)&v38, v12);
  for (i = 168; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v4 = *(void **)(a1 + 3216);
  memset(v10, 0, 24);
  sub_1006AB68C(v10, v12, v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 3));
  objc_msgSend(v4, "setMeasurements:", sub_1006A7590(v10));
  *(_QWORD *)buf = v10;
  sub_1006AB5A0((void ***)buf);
  v5 = *(void **)(a1 + 3216);
  if (byte_102311227 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102311210, *((unint64_t *)&xmmword_102311210 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102311210;
    v9 = unk_102311220;
  }
  objc_msgSend(v5, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = &v12;
  sub_1006AB5A0((void ***)buf);
}

void sub_1017ECDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

void sub_1017ECE44(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[960];
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t buf;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;

  v6 = a1[1];
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289794;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = "Supl,isValidSupl";
    v24 = 2082;
    v25 = "Failed";
    v26 = 2082;
    v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"result\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  }
  v8 = *a1;
  *(_DWORD *)(v8 + 148) = a2;
  *(_BYTE *)(v8 + 40) = 0;
  sub_1017E1D24(v8);
  if (*(_QWORD *)(v6 + 3120))
  {
    sub_101703314((uint64_t)v10, *a1);
    v9 = *(_QWORD *)(v6 + 3120);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, v10);
    if (v18 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
    if (v14 < 0)
      operator delete(v13);
    if (v12 < 0)
      operator delete(v11);
  }
}

void sub_1017ECFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1008484E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***sub_1017ED004(uint64_t a1))()
{
  if (*(_BYTE *)(a1 + 151))
    return (uint64_t (***)())sub_1017E8B30(a1);
  else
    return sub_1017E8A2C(a1);
}

double sub_1017ED014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  double v10;
  int v11;
  float v12;
  uint64_t i;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void **v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v34;
  int v35;
  _BYTE v36[960];
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *__p[2];
  char v46;
  void *v47;
  char v48;
  char v49;
  uint64_t v50[3];
  void *v51;
  uint64_t v52;
  char *v53;
  uint8_t buf[8];
  _BYTE v55[10];
  __int16 v56;
  void *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  _BYTE v62[10];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  void **v72;
  __int16 v73;
  _BYTE v74[10];
  int v75;
  int v76;
  int v77;
  uint64_t v78;

  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 2800) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 2808) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 2816) = v6;
  v7 = a1 + 1544;
  *(_QWORD *)(a1 + 1568) = v4;
  *(_QWORD *)(a1 + 1576) = v5;
  *(_BYTE *)(a1 + 1584) = 1;
  *(_QWORD *)(a1 + 1592) = v6;
  *(_DWORD *)(a1 + 1624) = (*(_DWORD *)(a2 + 136) >> 4) & 2 | (*(_DWORD *)(a2 + 136) >> 5) & 4 | (*(_DWORD *)(a2 + 136) >> 1) & 0x20 | ((*(_DWORD *)(a2 + 136) & 0x1F) != 0);
  v8 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 2824) = v8;
  *(_OWORD *)(a1 + 1600) = v8;
  *(_DWORD *)(a1 + 1632) = 2;
  *(_DWORD *)(a1 + 1736) = *(_DWORD *)a1;
  sub_1016FF42C((std::string *)(a1 + 1544), a1 + 144);
  v9 = *(_DWORD *)(a2 + 136);
  if ((v9 & 0x40) == 0)
  {
    v10 = *(double *)(a2 + 104);
    v11 = (int)*(double *)(a2 + 96);
    v12 = *(double *)(a2 + 72);
    *(float *)v55 = v12;
    *(_DWORD *)buf = 39;
    *(_DWORD *)((char *)&v59 + 2) = 4;
    LODWORD(v61) = 40;
    *(_DWORD *)v62 = v11;
    *(_DWORD *)((char *)&v66 + 2) = 0;
    v68 = 41;
    *(_DWORD *)((char *)&v70 + 2) = (int)v10;
    *(_DWORD *)&v74[6] = 0;
    v75 = 43;
    v76 = (v9 >> 4) & 2 | (v9 >> 5) & 4 | (v9 >> 1) & 0x20 | ((v9 & 0x1F) != 0);
    v77 = 0;
    v53 = 0;
    v51 = 0;
    v52 = 0;
    v47 = &v51;
    v48 = 0;
    v51 = operator new(0xA0uLL);
    v52 = (uint64_t)v51;
    v53 = (char *)v51 + 160;
    v52 = sub_1006AB40C((uint64_t)&v53, (uint64_t)buf, (uint64_t)&v78, (uint64_t)v51);
    for (i = 128; i != -32; i -= 40)
      sub_1001F8644((uint64_t)&buf[i]);
    v14 = *(void **)(a1 + 3216);
    memset(v50, 0, sizeof(v50));
    sub_1006AB68C(v50, (uint64_t)v51, v52, 0xCCCCCCCCCCCCCCCDLL * ((v52 - (uint64_t)v51) >> 3));
    objc_msgSend(v14, "setMeasurements:", sub_1006A7590(v50));
    *(_QWORD *)buf = v50;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v51;
    sub_1006AB5A0((void ***)buf);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_1017E1C48(*(_DWORD *)(a1 + 1692), &v51);
    if (SHIBYTE(v53) >= 0)
      v16 = &v51;
    else
      v16 = v51;
    v17 = *(_QWORD *)(a1 + 1568);
    v18 = *(_QWORD *)(a1 + 1576);
    v19 = *(_QWORD *)(a1 + 1592);
    v20 = *(_QWORD *)(a1 + 1600);
    v34 = *(_QWORD *)(a1 + 1608);
    v35 = *(_DWORD *)(a1 + 1624);
    sub_1017E1BC4(*(_DWORD *)(a1 + 1628), &v47);
    v21 = v49;
    v22 = (void **)v47;
    sub_1017E1C1C(*(_DWORD *)(a1 + 1636), __p);
    v23 = &v47;
    v24 = (void **)__p[0];
    if (v21 < 0)
      v23 = v22;
    v25 = *(_QWORD *)(a1 + 1616);
    if (v46 >= 0)
      v24 = __p;
    *(_DWORD *)buf = 68291587;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v55 = 2082;
    *(_QWORD *)&v55[2] = "";
    v56 = 2081;
    v57 = v16;
    v58 = 2049;
    v59 = v17;
    v60 = 2049;
    v61 = v18;
    *(_WORD *)v62 = 2049;
    *(_QWORD *)&v62[2] = v19;
    v63 = 2050;
    v64 = v20;
    v65 = 2050;
    v66 = v34;
    v67 = 1026;
    v68 = v35;
    v69 = 2082;
    v70 = v23;
    v71 = 2082;
    v72 = v24;
    v73 = 2049;
    *(_QWORD *)v74 = v25;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Supl,Summary Status\", \"status\":%{private, location:escape_only}s, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"acc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"source\":%{public}d, \"method\":%{public, location:escape_only}s, \"protocol\":%{public, location:escape_only}s, \"ttf\":\"%{private}f\"}", buf, 0x72u);
    if (v46 < 0)
      operator delete(__p[0]);
    if (v49 < 0)
      operator delete(v47);
    if (SHIBYTE(v53) < 0)
      operator delete(v51);
  }
  sub_1017E1D24(v7);
  if (*(_QWORD *)(a1 + 3120))
  {
    sub_101703314((uint64_t)v36, v7);
    v26 = *(_QWORD *)(a1 + 3120);
    if (!v26)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 48))(v26, v36);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(v41);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
  }
  sub_1017E2B94(v7);
  v27 = *(_QWORD *)(a1 + 3184);
  if (v27)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 48))(v27, a1 + 2784);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 2784) = _Q0;
  *(_QWORD *)(a1 + 2808) = 0;
  *(_QWORD *)(a1 + 2816) = 0;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_QWORD *)(a1 + 2824) = 0xBFF0000000000000;
  result = NAN;
  *(_QWORD *)(a1 + 2832) = -1;
  *(_DWORD *)(a1 + 2840) = 0;
  return result;
}

void sub_1017ED4E8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  if (SLOBYTE(STACK[0x54F]) < 0)
    operator delete((void *)STACK[0x538]);
  _Unwind_Resume(a1);
}

uint64_t sub_1017ED598(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  _BYTE buf[12];
  char v26;
  int v27;
  _BYTE *v28;
  void *__p[2];
  char v30;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_1018637E0(*((_QWORD *)a2 + 28), __p);
    v7 = v30 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Supl,#ca,processPdsSessionStatisticsReport,type,%s", buf, 0xCu);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
    v21 = qword_1022A0078;
    sub_1018637E0(*((_QWORD *)a2 + 28), buf);
    if (v26 >= 0)
      v22 = buf;
    else
      v22 = *(_BYTE **)buf;
    v27 = 136315138;
    v28 = v22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 2, "#Supl,#ca,processPdsSessionStatisticsReport,type,%s", (const char *)&v27);
    v24 = v23;
    if (v26 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::processPdsSessionStatisticsReport(CLEurekaNilrTypes::sessionStatisticsReport, uint64_t)", "%s\n", v24);
    if (v24 != (char *)__p)
      free(v24);
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  *(_OWORD *)(a1 + 2896) = a2[3];
  *(_OWORD *)(a1 + 2880) = v10;
  *(_OWORD *)(a1 + 2864) = v9;
  *(_OWORD *)(a1 + 2848) = v8;
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[6];
  *(_OWORD *)(a1 + 2960) = a2[7];
  *(_OWORD *)(a1 + 2944) = v13;
  *(_OWORD *)(a1 + 2928) = v12;
  *(_OWORD *)(a1 + 2912) = v11;
  v14 = a2[8];
  v15 = a2[9];
  v16 = a2[10];
  *(_OWORD *)(a1 + 3024) = a2[11];
  *(_OWORD *)(a1 + 3008) = v16;
  *(_OWORD *)(a1 + 2992) = v15;
  *(_OWORD *)(a1 + 2976) = v14;
  v17 = a2[12];
  v18 = a2[13];
  v19 = a2[14];
  *(_BYTE *)(a1 + 3088) = *((_BYTE *)a2 + 240);
  *(_OWORD *)(a1 + 3072) = v19;
  *(_OWORD *)(a1 + 3056) = v18;
  *(_OWORD *)(a1 + 3040) = v17;
  *(_QWORD *)(a1 + 3192) = a3;
  return sub_1017EB350(a1 + 8, 10);
}

double sub_1017ED82C(uint64_t a1)
{
  int64x2_t v1;
  double result;

  *(_QWORD *)a1 = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  v1 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  __asm { FMOV            V1.2D, #-1.0 }
  *(int64x2_t *)(a1 + 16) = v1;
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_OWORD *)(a1 + 48) = _Q1;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_101CDB6F0;
  *(int64x2_t *)(a1 + 112) = v1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a1 + 128) = _Q0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 168) = _Q0;
  *(_DWORD *)(a1 + 176) = -1082130432;
  *(_QWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 188) = -1082130432;
  *(_BYTE *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

void sub_1017ED894(uint64_t a1, char a2)
{
  int v3;
  void *v4;
  uint64_t v5[3];
  char *v6;
  _BYTE *v7;
  _QWORD v8[2];
  char v9;
  void **v10;
  _DWORD v11[8];
  uint64_t v12;

  v3 = sub_1016FF408(a2);
  *(_DWORD *)(a1 + 1628) = v3;
  LODWORD(v10) = 52;
  v11[0] = v3;
  v11[6] = 0;
  v7 = 0;
  v8[0] = 0;
  v6 = 0;
  v8[1] = &v6;
  v9 = 0;
  v6 = (char *)operator new(0x28uLL);
  v7 = v6;
  v8[0] = v6 + 40;
  v7 = (_BYTE *)sub_1006AB40C((uint64_t)v8, (uint64_t)&v10, (uint64_t)&v12, (uint64_t)v6);
  sub_1001F8644((uint64_t)v11);
  v4 = *(void **)(a1 + 3216);
  memset(v5, 0, sizeof(v5));
  sub_1006AB68C(v5, (uint64_t)v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - v6) >> 3));
  objc_msgSend(v4, "setMeasurements:", sub_1006A7590(v5));
  v10 = (void **)v5;
  sub_1006AB5A0(&v10);
  v10 = (void **)&v6;
  sub_1006AB5A0(&v10);
}

void sub_1017ED9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_1006AB5A0(&a17);
  _Unwind_Resume(a1);
}

void sub_1017EDA1C(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  NSObject *v6;
  uint64_t j;
  void *v8;
  uint64_t *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  __int128 *p_buf;
  char *v16;
  char *v17;
  const char *v18;
  void **v19;
  const char *v20;
  void **v21;
  const char *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26[3];
  __int128 buf;
  _QWORD v28[2];
  void *__p;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _BYTE v36[1552];
  _BYTE v37[12];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_101862E2C(a2, &__p);
    v5 = v31 >= 0 ? &__p : (void **)__p;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Supl,Emergency Event ,EmergencyEvent,%{public}s", (uint8_t *)&buf, 0xCu);
    if (v31 < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
    v14 = qword_1022A0088;
    sub_101862E2C(a2, &buf);
    if (v28[0] >= 0)
      p_buf = &buf;
    else
      p_buf = (__int128 *)buf;
    *(_DWORD *)v37 = 136446210;
    *(_QWORD *)&v37[4] = p_buf;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v14, 2, "#Supl,Emergency Event ,EmergencyEvent,%{public}s", v37, 12);
    v17 = v16;
    if (SHIBYTE(v28[0]) < 0)
      operator delete((void *)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v17);
    if (v17 != (char *)&__p)
      free(v17);
  }
  if (a2 == 9)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Supl,BB Emergency Session end", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
      LOWORD(buf) = 0;
      LODWORD(v24) = 2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Supl,BB Emergency Session end", &buf, v24);
      v21 = (void **)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v20);
      if (v21 != &__p)
        free(v21);
    }
    sub_1017EB350(a1 + 8, 11);
  }
  else
  {
    if (a2 == 5)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Supl,BB Emergency Session begin", (uint8_t *)&__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
        LOWORD(buf) = 0;
        LODWORD(v24) = 2;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Supl,BB Emergency Session begin", &buf, v24);
        v23 = (void **)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v22);
        if (v23 != &__p)
          free(v23);
      }
      *(_DWORD *)(a1 + 1636) = 3;
      LODWORD(__p) = 49;
      v30 = 3;
      v32 = 0;
      v33 = 51;
      v34 = 2;
      v35 = 0;
      v28[0] = 0;
      buf = 0uLL;
      *(_QWORD *)v37 = &buf;
      v37[8] = 0;
      *(_QWORD *)&buf = operator new(0x50uLL);
      *((_QWORD *)&buf + 1) = buf;
      v28[0] = buf + 80;
      *((_QWORD *)&buf + 1) = sub_1006AB40C((uint64_t)v28, (uint64_t)&__p, (uint64_t)v36, buf);
      for (i = 48; i != -32; i -= 40)
        sub_1001F8644((uint64_t)&__p + i);
      v13 = *(void **)(a1 + 3216);
      memset(v25, 0, sizeof(v25));
      sub_1006AB68C(v25, buf, *((uint64_t *)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3));
      objc_msgSend(v13, "setMeasurements:", sub_1006A7590(v25));
      v9 = v25;
    }
    else
    {
      if (a2 != 3)
        return;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Supl,BB Emergency Session begin", (uint8_t *)&__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CFEF0);
        LOWORD(buf) = 0;
        LODWORD(v24) = 2;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Supl,BB Emergency Session begin", &buf, v24);
        v19 = (void **)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v18);
        if (v19 != &__p)
          free(v19);
      }
      *(_DWORD *)(a1 + 1636) = 1;
      LODWORD(__p) = 49;
      v30 = 1;
      v32 = 0;
      v33 = 51;
      v34 = 2;
      v35 = 0;
      v28[0] = 0;
      buf = 0uLL;
      *(_QWORD *)v37 = &buf;
      v37[8] = 0;
      *(_QWORD *)&buf = operator new(0x50uLL);
      *((_QWORD *)&buf + 1) = buf;
      v28[0] = buf + 80;
      *((_QWORD *)&buf + 1) = sub_1006AB40C((uint64_t)v28, (uint64_t)&__p, (uint64_t)v36, buf);
      for (j = 48; j != -32; j -= 40)
        sub_1001F8644((uint64_t)&__p + j);
      v8 = *(void **)(a1 + 3216);
      memset(v26, 0, sizeof(v26));
      sub_1006AB68C(v26, buf, *((uint64_t *)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3));
      objc_msgSend(v8, "setMeasurements:", sub_1006A7590(v26));
      v9 = v26;
    }
    __p = v9;
    sub_1006AB5A0((void ***)&__p);
    __p = &buf;
    sub_1006AB5A0((void ***)&__p);
  }
}

void sub_1017EE19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a17;
  sub_1006AB5A0(&a21);
  _Unwind_Resume(a1);
}

void sub_1017EE24C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017EE278(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1017EE2A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1017EE2D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1017EE310(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  size_t v14;
  __int128 *v15;
  const void *v16;
  uint8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v10 = a3[1];
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_6;
LABEL_21:
    sub_1017EFF2C(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, v23, v24, v25, v26,
      v27,
      v28,
      v29,
      v30,
      v31);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*(char *)(a2 + 23) >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  sub_100259584((uint64_t)&v21, v14 + 1);
  if (v22 >= 0)
    v15 = &v21;
  else
    v15 = (__int128 *)v21;
  if (v14)
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    memmove(v15, v16, v14);
  }
  *(_WORD *)((char *)v15 + v14) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v21;
  *(_QWORD *)(a1 + 112) = v22;
}

void sub_1017EE494(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_1017EE4D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_1017EE53C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_1017EE53C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1017EA48C(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1017EE5BC()
{
  operator delete();
}

_QWORD *sub_1017EE5D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CFF80;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EE604(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CFF80;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1017EE620(uint64_t a1, uint64_t a2)
{
  return sub_1016E7AE4(a2, 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1488));
}

uint64_t sub_1017EE634(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EE670()
{
}

void sub_1017EE680()
{
  operator delete();
}

_QWORD *sub_1017EE694(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0010;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EE6C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0010;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1017EE6E4(uint64_t a1, uint64_t a2)
{
  return sub_1016E7AE4(a2, 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1488));
}

uint64_t sub_1017EE6F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EE734()
{
}

void sub_1017EE744()
{
  operator delete();
}

_QWORD *sub_1017EE758(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0090;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EE78C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0090;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1017EE7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if ((sub_100014ADC() & 1) == 0)
  {
    sub_1016E9BA0(a2);
    sub_1016E5000(a2);
  }
  return sub_1016E7AE4(a2, 1u, *(_QWORD *)(v3 + 1488));
}

uint64_t sub_1017EE7EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EE828()
{
}

void sub_1017EE838()
{
  operator delete();
}

_QWORD *sub_1017EE84C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0110;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EE880(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0110;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1017EE89C(uint64_t a1, uint64_t a2)
{
  return sub_1016E7AE4(a2, 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1488));
}

uint64_t sub_1017EE8B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EE8EC()
{
}

uint64_t sub_1017EE8F8(uint64_t a1)
{
  return sub_1017EB350(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1017EE90C()
{
  operator delete();
}

_QWORD *sub_1017EE920()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D0190;
  return result;
}

void sub_1017EE944(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D0190;
}

_QWORD *sub_1017EE95C(uint64_t a1, uint64_t a2)
{
  return sub_1016E4AC4(a2);
}

uint64_t sub_1017EE964(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EE9A0()
{
}

void sub_1017EE9B0()
{
  operator delete();
}

_QWORD *sub_1017EE9C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0210;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EE9F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0210;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1017EEA14(uint64_t a1, uint64_t a2)
{
  return sub_1016E7AE4(a2, 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1488));
}

uint64_t sub_1017EEA28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EEA64()
{
}

void sub_1017EEA74()
{
  operator delete();
}

_QWORD *sub_1017EEA88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0290;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EEABC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0290;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_1017EEAD8(uint64_t a1, uint64_t a2))()
{
  return sub_1016E9AC8(a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1132));
}

uint64_t sub_1017EEAEC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EEB28()
{
}

void sub_1017EEB38()
{
  operator delete();
}

_QWORD *sub_1017EEB4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D0310;
  return result;
}

void sub_1017EEB70(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D0310;
}

id sub_1017EEB88(uint64_t a1, uint64_t a2)
{
  return sub_1016E8874(a2);
}

uint64_t sub_1017EEB90(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EEBCC()
{
}

_QWORD *sub_1017EEBD8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D0390;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1017EEC14(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D0390;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

_BYTE *sub_1017EEC60(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021D0390;
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  sub_1007855D8((_QWORD *)v2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_1017EECB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017EECC8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021D0390;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_1007855D8((_QWORD *)(a2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
}

void sub_1017EECF8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_1017EED10(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_1017EED40(uint64_t a1, uint64_t a2)
{
  sub_1016E9594(a2, *(unsigned __int8 *)(a1 + 8), a1 + 16);
}

uint64_t sub_1017EED54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EED90()
{
}

void sub_1017EEDA0()
{
  operator delete();
}

_QWORD *sub_1017EEDB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0410;
  result[1] = v3;
  return result;
}

uint64_t sub_1017EEDE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0410;
  a2[1] = v2;
  return result;
}

id sub_1017EEE04(uint64_t a1, uint64_t a2)
{
  return sub_1016E8ED4(a2, **(unsigned int **)(a1 + 8));
}

uint64_t sub_1017EEE18(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EEE54()
{
}

void sub_1017EEE64()
{
  operator delete();
}

_BYTE *sub_1017EEE78(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021D0490;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1017EEEB0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021D0490;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t (***sub_1017EEED0(uint64_t a1, uint64_t a2))()
{
  return sub_1016E988C(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1017EEEE0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017EEF1C()
{
}

void sub_1017EEF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_10085FC18();
  if (!v29)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v30 = qword_1022A0078;
  if (sub_10034F4E4(qword_1022A0078))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v30, v31, v32, "Invalid instance", "{\"msg%{public}.0s\":\"Invalid instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  v33 = qword_1022A0078;
  if (sub_100299F70(qword_1022A0078))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 48;
  sub_100299FDC();
}

void sub_1017EF0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_10085FC18();
  if (!v29)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v30 = qword_1022A0078;
  if (sub_10034F4E4(qword_1022A0078))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid SUPL session status callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v30, v31, v32, "Invalid SUPL session status callback", "{\"msg%{public}.0s\":\"Invalid SUPL session status callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  v33 = qword_1022A0078;
  if (sub_100299F70(qword_1022A0078))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid SUPL session status callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 47;
  sub_100299FDC();
}

void sub_1017EF220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_10085FC18();
  if (!v29)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  v30 = qword_1022A0078;
  if (sub_10034F4E4(qword_1022A0078))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"SUPL queue assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v30, v31, v32, "SUPL queue assertion failed", "{\"msg%{public}.0s\":\"SUPL queue assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  v33 = qword_1022A0078;
  if (sub_100299F70(qword_1022A0078))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"SUPL queue assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 46;
  sub_100299FDC();
}

#error "1017EF414: call analysis failed (funcsize=75)"

#error "1017EF588: call analysis failed (funcsize=73)"

#error "1017EF6F8: call analysis failed (funcsize=73)"

#error "1017EF86C: call analysis failed (funcsize=75)"

#error "1017EF9E0: call analysis failed (funcsize=73)"

#error "1017EFB50: call analysis failed (funcsize=73)"

#error "1017EFCC0: call analysis failed (funcsize=73)"

#error "1017EFE30: call analysis failed (funcsize=73)"

void sub_1017EFF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v27, v28, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFED0);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1017F0094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  float v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  int v14;
  NSObject *v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  double v27[4];
  int v28;
  double v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;

  sub_10010F434((uint64_t)v27);
  v6 = *(_DWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) == 0)
    v7 = 0;
  *(_QWORD *)a2 = v7;
  v8 = *(float *)(a1 + 16) * 0.000001;
  if ((v6 & 2) == 0)
    v8 = 0.0;
  *(float *)(a2 + 44) = v8;
  *(double *)(a2 + 16) = sub_1005155E0(v7 / 0xF4240) + (double)(v7 % 0xF4240) * 0.000000001;
  v26 = *(double *)(a1 + 32);
  if (v26 == 0.0 || (*(_BYTE *)(a1 + 72) & 0x20) == 0)
  {
    v26 = v27[0];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,falling back to fix receipt time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v28) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,falling back to fix receipt time", &v28, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  *(double *)(a2 + 32) = v26;
  if (!sub_100AD25A0(a3, &v26, (double *)(a2 + 24)))
  {
    *(double *)(a2 + 24) = sub_100078B88() + v27[0] - v26;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,falling back in fix mach abs calc", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v28) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,falling back in fix mach abs calc", &v28, v25);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  v11 = v27[0] - v26;
  *(double *)(a2 + 8) = v27[2] - (v27[0] - v26);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v13 = *(double *)(a2 + 8) - *(double *)(a2 + 16);
    *(_DWORD *)buf = 134349312;
    v33 = v11;
    v34 = 2050;
    v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#gpsd,fixAgeSeconds,%{public}.4f,pedApparentCfTimeErr,%{public}.4f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v16 = *(double *)(a2 + 8) - *(double *)(a2 + 16);
    v28 = 134349312;
    v29 = v11;
    v30 = 2050;
    v31 = v16;
    LODWORD(v25) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,fixAgeSeconds,%{public}.4f,pedApparentCfTimeErr,%{public}.4f", &v28, v25);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if ((~*(_DWORD *)(a1 + 72) & 0xC) != 0 || !*(_BYTE *)(a1 + 20))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#gpsd,Time.leapSeconds invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v28) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,Time.leapSeconds invalid", &v28, v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v14 = 0;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(a2 + 40) = v14;
}

uint64_t sub_1017F0708(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  float64x2_t v4;
  double v5;
  BOOL v6;

  if ((~*(_DWORD *)(result + 96) & 0x3BF) == 0)
  {
    v3 = result;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 40);
    v4 = *(float64x2_t *)(result + 48);
    *(double *)(a2 + 48) = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v4, v4).f64[1]), v4.f64[0], v4.f64[0]));
    *(float64x2_t *)(a2 + 64) = vmulq_f64(v4, (float64x2_t)vdupq_n_s64(0x400399999999999AuLL));
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 64);
    *(_DWORD *)(a2 + 88) = sub_1016B8574(*(_DWORD *)(result + 72));
    result = sub_1016B857C(*(_DWORD *)(v3 + 76));
    *(_DWORD *)(a2 + 92) = result;
    v5 = *(double *)(a2 + 48);
    v6 = v5 > 0.0;
    if (v5 >= 100000.0)
      v6 = 0;
    *(_BYTE *)a2 = v6;
    *(_DWORD *)(a2 + 40) = 1;
    if (fabs(*(double *)(a2 + 32)) < 2.22044605e-16)
      *(_DWORD *)(a2 + 40) = -1;
  }
  return result;
}

uint64_t sub_1017F07E8(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  char v7;
  double v8;

  v3 = *(double *)(result + 8);
  v2 = *(double *)(result + 16);
  *(double *)(a2 + 8) = v3;
  *(double *)(a2 + 16) = v2;
  if (v3 < 0.0 || v2 < 0.0)
  {
    v4 = 0;
    *(_QWORD *)(a2 + 8) = 0xBFF0000000000000;
  }
  else
  {
    v4 = 1;
  }
  *(_BYTE *)a2 = v4;
  v6 = *(double *)(result + 40);
  v5 = *(double *)(result + 48);
  *(double *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = v5;
  if (v6 < 0.0 || v6 > 360.0 || v5 < 0.0)
  {
    v7 = 0;
    *(_QWORD *)(a2 + 32) = 0xBFF0000000000000;
  }
  else
  {
    v7 = 1;
  }
  *(_BYTE *)(a2 + 24) = v7;
  v8 = *(double *)(result + 32);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 24);
  *(double *)(a2 + 64) = v8;
  *(_BYTE *)(a2 + 48) = v8 >= 0.0;
  return result;
}

void sub_1017F0870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102310C70 + 8);
    sub_1017F0094(v6, a2, a3);
    v5 = *(_DWORD *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return;
      goto LABEL_11;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310C70 + 16);
  sub_1017F0708(v7, a2 + 48);
  if ((*(_DWORD *)(a1 + 48) & 4) != 0)
  {
LABEL_11:
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310C70 + 24);
    sub_1017F07E8(v8, a2 + 144);
  }
}

void sub_1017F0918(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  char v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *__p;
  uint8_t buf[8];
  std::__shared_weak_count *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  sub_100270E34((uint64_t)v63, a4);
  sub_100270E34((uint64_t)v61, a5);
  sub_100270E34((uint64_t)v59, a6);
  sub_100270E34((uint64_t)v57, a7);
  sub_100270E34((uint64_t)v55, a8);
  sub_100270E34((uint64_t)v53, a9);
  sub_100270E34((uint64_t)v51, a10);
  sub_100270E34((uint64_t)v49, a11);
  sub_1017DD414(a1, a3, (uint64_t)v63, (uint64_t)v61, (uint64_t)v59, (uint64_t)v57, (uint64_t)v55, (uint64_t)v53, (uint64_t)v51, (uint64_t)v49, a12, a13);
  v20 = v50;
  if (v50 == v49)
  {
    v21 = 4;
    v20 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_11:
  v24 = v54;
  if (v54 == v53)
  {
    v25 = 4;
    v24 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_16;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_16:
  v26 = v56;
  if (v56 == v55)
  {
    v27 = 4;
    v26 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_21;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_21:
  v28 = v58;
  if (v58 == v57)
  {
    v29 = 4;
    v28 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_26;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_26:
  v30 = v60;
  if (v60 == v59)
  {
    v31 = 4;
    v30 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_31;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_31:
  v32 = v62;
  if (v62 == v61)
  {
    v33 = 4;
    v32 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_36;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_36:
  v34 = v64;
  if (v64 == v63)
  {
    v35 = 4;
    v34 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_41;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_41:
  *(_QWORD *)a1 = &off_1021D0590;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1684) = 255;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_DWORD *)(a1 + 1704) = 0;
  sub_1001E4804(buf);
  LOBYTE(v65) = 0;
  v36 = sub_1001E4874(*(uint64_t *)buf, "OverrideReliabilityCriteriaForGnssDemos", (BOOL *)&v65);
  if ((_BYTE)v65)
    v37 = v36;
  else
    v37 = 0;
  v38 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_BYTE *)(a1 + 1708) = v37;
  *(_QWORD *)(a1 + 1712) = 0xC08F400000000000;
  sub_100197040();
  *(_BYTE *)(a1 + 1720) = sub_10075B938();
  sub_100197040();
  *(_BYTE *)(a1 + 1721) = sub_10075B95C();
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1881) = 0u;
  *(_DWORD *)(a1 + 1936) = 1;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 2000) = _Q1;
  *(_BYTE *)(a1 + 2016) = 0;
  *(_QWORD *)(a1 + 2024) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2032) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 2048) = _Q1;
  *(_BYTE *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_DWORD *)(a1 + 2128) = 1065353216;
  *(_QWORD *)(a1 + 2136) = 0x100000005;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2152) = a2;
  *(_OWORD *)(a1 + 2160) = 0u;
  sub_1015A2E04(&__p, "CLGnssDaemonDevice");
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_1017F25D8()
{
  __cxa_end_catch();
  JUMPOUT(0x1017F25E0);
}

void sub_1017F25F8(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1017F2B7CLL);
}

void sub_1017F2608()
{
  JUMPOUT(0x1017F2AE4);
}

void sub_1017F2610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_100261F44((uint64_t)&a35);
  JUMPOUT(0x1017F2B68);
}

void sub_1017F2620()
{
  JUMPOUT(0x1017F2B68);
}

void sub_1017F281C()
{
  JUMPOUT(0x1017F2B7CLL);
}

void sub_1017F2B84(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssDaemonDevice::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 1784), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D07B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssDaemonDevice::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D07B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssDaemonDevice::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101803E58(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1017F2D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1017F2D5C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21[2];
  char v22;
  int v23;
  _BYTE __p[12];
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  void **v28;
  _BYTE buf[12];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  _BYTE *v33;

  v23 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10180AB1C(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021D0798);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 2)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021D0C20)[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v28) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v30 = 1024;
    v31 = v7;
    v32 = 2080;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v28) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    if (v7 > 2)
      v15 = "StateUnknown";
    else
      v15 = (&off_1021D0C20)[v7];
    v16 = qword_1022A0078;
    v17 = *(unsigned __int8 *)(v6 + 120);
    sub_1015A2E04(v21, v15);
    if (v22 >= 0)
      v18 = v21;
    else
      v18 = (void **)v21[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v25 = 1024;
    v26 = v7;
    v27 = 2080;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, v17, "%sstate,%d,%s", __p, 28, (const char *)v21[0]);
    v20 = v19;
    if (v22 < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLGnssDaemonDevice>::setStateHandler(State, StateHandler) [T = CLGnssDaemonDevice]", "%s\n", v20);
    if (v20 != buf)
      free(v20);
  }
  *(_QWORD *)buf = &v23;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1017F3060(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  std::string::size_type v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  std::string::size_type v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  NSObject *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  NSObject *v52;
  NSObject *v53;
  uint64_t v54;
  NSObject *v56;
  int v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  NSObject *v61;
  std::string *v62;
  uint64_t v63;
  std::string *p_p;
  std::string *v65;
  std::string *v66;
  uint64_t v67;
  int v68;
  std::string::size_type v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  const char *v74;
  std::string *v75;
  const char *v76;
  std::string *v77;
  uint64_t v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  const char *v82;
  std::string *v83;
  uint64_t v84;
  int v85;
  std::string::size_type v86;
  std::string *v87;
  std::string *p_buf;
  std::string *v89;
  std::string *v90;
  uint64_t v91;
  int v92;
  std::string::size_type v93;
  std::string *v94;
  std::string *v95;
  std::string *v96;
  std::string *v97;
  uint64_t v98;
  _QWORD block[5];
  _QWORD v100[5];
  _BYTE v101[22];
  unsigned __int8 v102;
  _QWORD v103[2];
  std::string buf;
  std::string __p;
  std::string v106;

  v4 = 0;
  switch(a2)
  {
    case 0u:
      v45 = *(NSObject **)(a1 + 2152);
      v100[0] = _NSConcreteStackBlock;
      v100[1] = 3221225472;
      v100[2] = sub_101807240;
      v100[3] = &unk_10212ECA0;
      v100[4] = a1;
      dispatch_async(v45, v100);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1736) + 24))(*(_QWORD *)(a1 + 1736));
      sub_10180724C(a1 + 2176, 9, 20.0);
      goto LABEL_122;
    case 1u:
      return v4;
    case 2u:
      v35 = *(_DWORD *)(a1 + 2596);
      v36 = v35 > 0x25;
      v37 = (1 << v35) & 0x3C20000010;
      if (v36 || v37 == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v61 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          sub_10173E9F0(*(_DWORD *)(a1 + 2596), (uint64_t)&v106);
          v62 = (v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v106
              : (std::string *)v106.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#gpsd,Idle,Request,Dropping,%{public}s", (uint8_t *)&__p, 0xCu);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v106, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v63 = qword_1022A0078;
          sub_10173E9F0(*(_DWORD *)(a1 + 2596), (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, v63, 0, "#gpsd,Idle,Request,Dropping,%{public}s", &buf, 12);
          v66 = v65;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v66);
          if (v66 != &v106)
            free(v66);
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v39 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          sub_10173E9F0(*(_DWORD *)(a1 + 2596), (uint64_t)&v106);
          v40 = (v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v106
              : (std::string *)v106.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#gpsd,Idle,Request,sending,%{public}s", (uint8_t *)&__p, 0xCu);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v106, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v78 = qword_1022A0078;
          sub_10173E9F0(*(_DWORD *)(a1 + 2596), (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &__p;
          else
            v79 = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v79;
          _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, v78, 2, "#gpsd,Idle,Request,sending,%{public}s", &buf, 12);
          v81 = v80;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v81);
          if (v81 != &v106)
            free(v81);
        }
        sub_100102100(a1, a1 + 2576);
      }
      v41 = sub_100103BB0(0);
      if ((v41 & 1) == 0)
        sub_10180AC90(v41, v42, v43);
      v4 = 0;
      *(_DWORD *)(a1 + 2972) |= 4u;
      *(_DWORD *)(a1 + 2596) = 0;
      return v4;
    case 3u:
      if (*(_DWORD *)(a1 + 2984) != 34)
        goto LABEL_122;
      v44 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_101807D1C;
      block[3] = &unk_10212ECA0;
      block[4] = a1;
      dispatch_async(v44, block);
      v4 = 1;
      break;
    case 4u:
      if (*(_DWORD *)(a1 + 2984) == 34)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v20 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          sub_1015A2E04(&v106, "GpsdResponseFailureStatusCode");
          v21 = SHIBYTE(v106.__r_.__value_.__r.__words[2]);
          v22 = v106.__r_.__value_.__r.__words[0];
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          v23 = &v106;
          if (v21 < 0)
            v23 = (std::string *)v22;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &__p;
          else
            v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gpsd,Idle,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&v106, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v84 = qword_1022A0078;
          sub_1015A2E04(&__p, "GpsdResponseFailureStatusCode");
          v85 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v86 = __p.__r_.__value_.__r.__words[0];
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          v87 = &__p;
          if (v85 < 0)
            v87 = (std::string *)v86;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v101 = 136446466;
          *(_QWORD *)&v101[4] = v87;
          *(_WORD *)&v101[12] = 2082;
          *(_QWORD *)&v101[14] = p_buf;
          _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, v84, 16, "#gpsd,Idle,FailedRequest,Recover,%{public}s,%{public}s", v101, 22);
          v90 = v89;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v90);
          if (v90 != &v106)
            free(v90);
        }
        sub_101807F44((_DWORD *)a1, 0, *(_DWORD *)(a1 + 2984));
        sub_1015A2E04(&buf, "GpsdResponseFailureStatusCode");
        v25 = std::string::append(&buf, " for request ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)v101);
        if ((v102 & 0x80u) == 0)
          v27 = v101;
        else
          v27 = *(const std::string::value_type **)v101;
        if ((v102 & 0x80u) == 0)
          v28 = v102;
        else
          v28 = *(_QWORD *)&v101[8];
        v29 = std::string::append(&__p, v27, v28);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = (uint64_t)std::string::append(&v106, " in Idle state");
        v32 = *(_QWORD *)v31;
        v103[0] = *(_QWORD *)(v31 + 8);
        *(_QWORD *)((char *)v103 + 7) = *(_QWORD *)(v31 + 15);
        v33 = *(_BYTE *)(v31 + 23);
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v31 + 16) = 0;
        *(_QWORD *)v31 = 0;
        if (*(char *)(a1 + 2335) < 0)
          operator delete(*(void **)(a1 + 2312));
        *(_QWORD *)(a1 + 2312) = v32;
        *(_QWORD *)(a1 + 2320) = v103[0];
        *(_QWORD *)(a1 + 2327) = *(_QWORD *)((char *)v103 + 7);
        *(_BYTE *)(a1 + 2335) = v33;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if ((char)v102 < 0)
          operator delete(*(void **)v101);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v4 = 2;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v56 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          sub_1015A2E04(&v106, "GpsdResponseFailureStatusCode");
          v57 = SHIBYTE(v106.__r_.__value_.__r.__words[2]);
          v58 = v106.__r_.__value_.__r.__words[0];
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          v59 = &v106;
          if (v57 < 0)
            v59 = (std::string *)v58;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &__p;
          else
            v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v60;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#gpsd,Idle,FailedRequest,Drop,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        v31 = sub_1001BFF7C(115, 0);
        if ((_DWORD)v31)
        {
          bzero(&v106, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v91 = qword_1022A0078;
          sub_1015A2E04(&__p, "GpsdResponseFailureStatusCode");
          v92 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v93 = __p.__r_.__value_.__r.__words[0];
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          v94 = &__p;
          if (v92 < 0)
            v94 = (std::string *)v93;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = &buf;
          else
            v95 = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v101 = 136446466;
          *(_QWORD *)&v101[4] = v94;
          *(_WORD *)&v101[12] = 2082;
          *(_QWORD *)&v101[14] = v95;
          _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, v91, 16, "#gpsd,Idle,FailedRequest,Drop,%{public}s,%{public}s", v101, 22);
          v97 = v96;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v31 = sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v97);
          if (v97 != &v106)
            free(v97);
        }
        v4 = 0;
      }
      sub_1018070B4(v31, *(_DWORD *)(a1 + 2984));
      *(_DWORD *)(a1 + 2984) = 0;
      return v4;
    case 5u:
    case 6u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        sub_101807F18(a2, &v106);
        v6 = SHIBYTE(v106.__r_.__value_.__r.__words[2]);
        v7 = v106.__r_.__value_.__r.__words[0];
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
        v8 = &v106;
        if (v6 < 0)
          v8 = (std::string *)v7;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &__p;
        else
          v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,Idle,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v106, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v67 = qword_1022A0078;
        sub_101807F18(a2, &__p);
        v68 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v69 = __p.__r_.__value_.__r.__words[0];
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
        v70 = &__p;
        if (v68 < 0)
          v70 = (std::string *)v69;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &buf;
        else
          v71 = (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v101 = 136446466;
        *(_QWORD *)&v101[4] = v70;
        *(_WORD *)&v101[12] = 2082;
        *(_QWORD *)&v101[14] = v71;
        _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, v67, 16, "#gpsd,Idle,FailedRequest,Recover,%{public}s,%{public}s", v101, 22);
        v73 = v72;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v73);
        if (v73 != &v106)
          free(v73);
      }
      sub_101807F44((_DWORD *)a1, 1, *(_DWORD *)(a1 + 2984));
      sub_101807F18(a2, &buf);
      v10 = std::string::append(&buf, " for request ");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)v101);
      if ((v102 & 0x80u) == 0)
        v12 = v101;
      else
        v12 = *(const std::string::value_type **)v101;
      if ((v102 & 0x80u) == 0)
        v13 = v102;
      else
        v13 = *(_QWORD *)&v101[8];
      v14 = std::string::append(&__p, v12, v13);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v106, " in Idle state");
      v17 = v16->__r_.__value_.__r.__words[0];
      v103[0] = v16->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v103 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a1 + 2335) < 0)
        operator delete(*(void **)(a1 + 2312));
      *(_QWORD *)(a1 + 2312) = v17;
      *(_QWORD *)(a1 + 2320) = v103[0];
      *(_QWORD *)(a1 + 2327) = *(_QWORD *)((char *)v103 + 7);
      *(_BYTE *)(a1 + 2335) = v18;
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if ((char)v102 < 0)
        operator delete(*(void **)v101);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_37;
    case 7u:
      v34 = *(_QWORD *)(a1 + 2992);
      if (v34 && *(_DWORD *)(v34 + 8) == 2)
      {
        sub_101808128(a1 + 2176, 9);
        sub_1017FA1AC(a1);
        sub_100102100(a1, a1 + 2576);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v53 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          LOWORD(v106.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#gpsd,Idle,Unexpected event,GpsdIndication", (uint8_t *)&v106, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v106, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,Idle,Unexpected event,GpsdIndication", &__p, 2);
          v83 = (std::string *)v82;
          sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", v82);
          if (v83 != &v106)
            free(v83);
        }
        v54 = *(_QWORD *)(a1 + 2992);
        *(_QWORD *)(a1 + 2992) = 0;
        v98 = v54;
        sub_100106220(a1, &v98);
        if (v98)
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
      }
      goto LABEL_122;
    case 8u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v52 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v106.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#gpsd,Idle,Detected GpsdShutdown", (uint8_t *)&v106, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v106, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Idle,Detected GpsdShutdown", &__p, 2);
        v77 = (std::string *)v76;
        sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", v76);
        if (v77 != &v106)
          free(v77);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1736) + 24))(*(_QWORD *)(a1 + 1736));
      sub_10180724C(a1 + 2176, 9, 20.0);
      goto LABEL_122;
    case 9u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v106.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsd,Idle,GspdAliveTimer expired,Recover", (uint8_t *)&v106, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v106, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Idle,GspdAliveTimer expired,Recover", &__p, 2);
        v75 = (std::string *)v74;
        sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", v74);
        if (v75 != &v106)
          free(v75);
      }
      sub_101807F44((_DWORD *)a1, 2, -1);
      std::string::assign((std::string *)(a1 + 2312), "GpsdAliveTimerExpired");
LABEL_37:
      v4 = 2;
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v46 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        sub_101807F18(a2, &v106);
        v47 = (v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v106
            : (std::string *)v106.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#gpsd,Idle,Unexpected event,%{public}s", (uint8_t *)&__p, 0xCu);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v106, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v48 = qword_1022A0078;
        sub_101807F18(a2, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &__p;
        else
          v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
        _os_log_send_and_compose_impl(2, 0, &v106, 1628, &_mh_execute_header, v48, 16, "#gpsd,Idle,Unexpected event,%{public}s", &buf, 12);
        v51 = v50;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v51);
        if (v51 != &v106)
          free(v51);
      }
LABEL_122:
      v4 = 0;
      break;
  }
  return v4;
}

void sub_1017F4448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017F4568(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  uint8_t *v7;
  uint8_t *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  std::string *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  uint8_t *v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  _QWORD block[5];
  _BYTE buf[12];
  __int16 v44;
  _BYTE *v45;
  char v46;
  int v47;
  _BYTE *v48;
  __int16 v49;
  _BYTE *v50;
  _BYTE __p[12];
  char v52;
  uint8_t v53[8];
  char v54;

  result = 2;
  switch(a2)
  {
    case 0u:
      v22 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1018085B8;
      block[3] = &unk_10212ECA0;
      block[4] = a1;
      dispatch_async(v22, block);
      sub_1000FF154(a1 + 2576);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v23 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Sending EXIT", v53, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v53, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        *(_WORD *)__p = 0;
        _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Recovery,Sending EXIT", __p, 2);
        v40 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v39);
        if (v40 != v53)
          free(v40);
      }
      v24 = sub_100103BB0(36);
      if ((v24 & 1) == 0)
        sub_10180AC90(v24, v25, v26);
      v27 = *(_DWORD *)(a1 + 2972);
      *(_DWORD *)(a1 + 2596) = 36;
      *(_DWORD *)(a1 + 2972) = v27 | 0x2000004;
      v28 = *(_QWORD *)(a1 + 2776);
      if (!v28)
        operator new();
      *(_DWORD *)(v28 + 20) |= 1u;
      v29 = *(std::string **)(v28 + 8);
      if (v29 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v29, (const std::string *)(a1 + 2312));
      if (*(char *)(a1 + 2335) < 0)
      {
        **(_BYTE **)(a1 + 2312) = 0;
        *(_QWORD *)(a1 + 2320) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 2312) = 0;
        *(_BYTE *)(a1 + 2335) = 0;
      }
      sub_100102100(a1, a1 + 2576);
      return 2;
    case 1u:
      return result;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      if ((*(_DWORD *)(a1 + 2984) - 35) < 2)
        return 0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_101807F18(a2, v53);
        v6 = v54;
        v7 = *(uint8_t **)v53;
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)__p);
        v8 = v53;
        if (v6 < 0)
          v8 = v7;
        if (v52 >= 0)
          v9 = __p;
        else
          v9 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v8;
        v44 = 2082;
        v45 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event,%{public}s,%{public}s", buf, 0x16u);
        if (v52 < 0)
          operator delete(*(void **)__p);
        if (v54 < 0)
          operator delete(*(void **)v53);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(v53, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v10 = qword_1022A0078;
      sub_101807F18(a2, __p);
      v11 = v52;
      v12 = *(_BYTE **)__p;
      sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)buf);
      v13 = __p;
      if (v11 < 0)
        v13 = v12;
      if (v46 >= 0)
        v14 = buf;
      else
        v14 = *(_BYTE **)buf;
      v47 = 136446466;
      v48 = v13;
      v49 = 2082;
      v50 = v14;
      _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, v10, 0, "#gpsd,Recovery,Unexpected event,%{public}s,%{public}s", &v47, 22);
      v16 = v15;
      if (v46 < 0)
        operator delete(*(void **)buf);
      if (v52 < 0)
        operator delete(*(void **)__p);
      goto LABEL_82;
    case 7u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v17 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event,GpsdIndication", v53, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v53, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        *(_WORD *)__p = 0;
        _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Recovery,Unexpected event,GpsdIndication", __p, 2);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v37);
        if (v38 != v53)
          free(v38);
      }
      v18 = *(_QWORD *)(a1 + 2992);
      *(_QWORD *)(a1 + 2992) = 0;
      v41 = v18;
      sub_100106220(a1, &v41);
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      return 2;
    case 8u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Detected GpsdShutdown", v53, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(v53, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Recovery,Detected GpsdShutdown", __p, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v20);
      goto LABEL_64;
    case 9u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v30 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event GpsdAliveTimerExpired", v53, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(v53, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Recovery,Unexpected event GpsdAliveTimerExpired", __p, 2);
      v21 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v31);
LABEL_64:
      if (v21 != v53)
        free(v21);
      return 0;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_101807F18(a2, v53);
        v33 = v54 >= 0 ? v53 : *(uint8_t **)v53;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event %{public}s", __p, 0xCu);
        if (v54 < 0)
          operator delete(*(void **)v53);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(v53, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v34 = qword_1022A0078;
      sub_101807F18(a2, __p);
      if (v52 >= 0)
        v35 = __p;
      else
        v35 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v35;
      _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, v34, 0, "#gpsd,Recovery,Unexpected event %{public}s", buf, 12);
      v16 = v36;
      if (v52 < 0)
        operator delete(*(void **)__p);
LABEL_82:
      sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v16);
      if (v16 != (char *)v53)
        free(v16);
      return 2;
  }
}

void sub_1017F4FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1017F5074(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  v2 = *a1;
  sub_100270E34((uint64_t)v5, a2);
  sub_101840654(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1017F5108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id sub_1017F5148(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#timingadvance,reset timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,reset timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::CLGnssDaemonDevice(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = objc_msgSend(*(id *)(v1 + 3464), "setNextFireDelay:", 1.79769313e308);
  *(_BYTE *)(v1 + 3456) = 0;
  return result;
}

uint64_t sub_1017F52EC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1017F532C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  sub_1017F0918(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1017F5350(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = &off_1021D0590;
  sub_1017FAE20(a1);

  *(_QWORD *)(a1 + 1784) = 0;
  v2 = *(uint64_t **)(a1 + 3448);
  *(_QWORD *)(a1 + 3448) = 0;
  if (v2)
    sub_1018093E4(a1 + 3448, v2);
  v3 = *(_QWORD *)(a1 + 3352);
  *(_QWORD *)(a1 + 3352) = 0;
  if (v3)
    operator delete();
  v4 = *(_QWORD **)(a1 + 3320);
  if (v4 == (_QWORD *)(a1 + 3296))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 3296);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = *(_QWORD **)(a1 + 3288);
  if (v6 == (_QWORD *)(a1 + 3264))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 3264);
  }
  else
  {
    if (!v6)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  v8 = *(_QWORD **)(a1 + 3256);
  if (v8 == (_QWORD *)(a1 + 3232))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 3232);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  v10 = *(_QWORD **)(a1 + 3224);
  if (v10 == (_QWORD *)(a1 + 3200))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 3200);
  }
  else
  {
    if (!v10)
      goto LABEL_25;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_25:
  sub_1018093A8((uint64_t *)(a1 + 3192), 0);
  v12 = *(_QWORD **)(a1 + 3184);
  if (v12 == (_QWORD *)(a1 + 3160))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 3160);
  }
  else
  {
    if (!v12)
      goto LABEL_30;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_30:
  v14 = *(_QWORD **)(a1 + 3152);
  if (v14 == (_QWORD *)(a1 + 3128))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 3128);
  }
  else
  {
    if (!v14)
      goto LABEL_35;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_35:
  v16 = *(_QWORD **)(a1 + 3120);
  if (v16 == (_QWORD *)(a1 + 3096))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 3096);
  }
  else
  {
    if (!v16)
      goto LABEL_40;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_40:
  v18 = *(_QWORD **)(a1 + 3088);
  if (v18 == (_QWORD *)(a1 + 3064))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 3064);
  }
  else
  {
    if (!v18)
      goto LABEL_45;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_45:
  v20 = *(_QWORD **)(a1 + 3056);
  if (v20 == (_QWORD *)(a1 + 3032))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 3032);
  }
  else
  {
    if (!v20)
      goto LABEL_50;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_50:
  v22 = *(_QWORD **)(a1 + 3024);
  if (v22 == (_QWORD *)(a1 + 3000))
  {
    v23 = 4;
    v22 = (_QWORD *)(a1 + 3000);
  }
  else
  {
    if (!v22)
      goto LABEL_55;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_55:
  v24 = *(_QWORD *)(a1 + 2992);
  *(_QWORD *)(a1 + 2992) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_1000FF078(a1 + 2576);
  v25 = *(void **)(a1 + 2504);
  if (v25)
  {
    *(_QWORD *)(a1 + 2512) = v25;
    operator delete(v25);
  }
  v26 = *(_QWORD **)(a1 + 2456);
  if (v26 == (_QWORD *)(a1 + 2432))
  {
    v27 = 4;
    v26 = (_QWORD *)(a1 + 2432);
  }
  else
  {
    if (!v26)
      goto LABEL_64;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_64:
  if (*(char *)(a1 + 2415) < 0)
    operator delete(*(void **)(a1 + 2392));
  if (*(char *)(a1 + 2375) < 0)
    operator delete(*(void **)(a1 + 2352));
  if (*(char *)(a1 + 2335) < 0)
    operator delete(*(void **)(a1 + 2312));
  sub_1018092C4(a1 + 2176);
  sub_100067A50(a1 + 2096);
  if (*(char *)(a1 + 1847) < 0)
    operator delete(*(void **)(a1 + 1824));
  if (*(char *)(a1 + 1823) < 0)
    operator delete(*(void **)(a1 + 1800));
  v28 = *(_QWORD *)(a1 + 1792);
  *(_QWORD *)(a1 + 1792) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD **)(a1 + 1768);
  if (v29 == (_QWORD *)(a1 + 1744))
  {
    v30 = 4;
    v29 = (_QWORD *)(a1 + 1744);
  }
  else
  {
    if (!v29)
      goto LABEL_81;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_81:
  v31 = *(_QWORD *)(a1 + 1736);
  *(_QWORD *)(a1 + 1736) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  sub_101809288((uint64_t *)(a1 + 1672), 0);
  return sub_1017DD94C(a1);
}

void sub_1017F56E0(uint64_t a1)
{
  sub_1017F5350(a1);
  operator delete();
}

uint64_t sub_1017F5704(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,gpsdShutdownHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,gpsdShutdownHandler", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::gpsdShutdownHandler()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1736) + 24))(*(_QWORD *)(a1 + 1736));
  if (*(_BYTE *)(a1 + 1680))
    ++*(_DWORD *)(a1 + 1236);
  return sub_1000FF8D8(a1 + 2176, 8);
}

void sub_1017F593C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 buf;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v2 = *a2;
  if ((*(_BYTE *)(*a2 + 224) & 0x80) != 0)
  {
    LOBYTE(buf) = 0;
    *((_QWORD *)&buf + 1) = 0;
    LODWORD(v17) = -1082130432;
    BYTE4(v17) = 0;
    DWORD2(v17) = 0;
    v18 = 0xFFFFFFFFFFFFFFFFLL;
    v19 = 0uLL;
    v15 = 0uLL;
    v7 = *(_QWORD *)(v2 + 56);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311908 + 56);
    sub_1016B1DD0(v7, (uint64_t)&buf, &v15);
    block[1] = 3221225472;
    v10 = buf;
    v11 = v17;
    v12 = v18;
    v8 = *(NSObject **)(a1 + 2152);
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_1017FEA5C;
    block[3] = &unk_1021D0740;
    block[4] = a1;
    v13 = v19;
    v14 = v15;
    dispatch_async(v8, block);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "handleTimeTransferIndication";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsd,#warning,#tt,no_data,%s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LODWORD(v15) = 136315138;
      *(_QWORD *)((char *)&v15 + 4) = "handleTimeTransferIndication";
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#warning,#tt,no_data,%s", (const char *)&v15);
      v5 = (char *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleTimeTransferIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v4);
      if (v5 != (char *)&buf)
        free(v5);
    }
  }
}

void sub_1017F5BA4(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v19[2];
  uint8_t buf[16];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencySummaryReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleEmergencySummaryReport", v19, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencySummaryReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v5 = *a2;
  if ((*(_BYTE *)(*a2 + 226) & 2) != 0)
  {
    *(int64x2_t *)buf = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v21 = xmmword_101BBE630;
    __asm { FMOV            V0.2D, #-1.0 }
    v22 = _Q0;
    v23 = 0;
    v24 = 0;
    v25 = _Q0;
    v26 = 0xBFF0000000000000;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v14 = *(_QWORD *)(v5 + 128);
    if (!v14)
      v14 = *(_QWORD *)(qword_102311908 + 128);
    sub_1016B560C(v14, (uint64_t)buf);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1);
    sub_10180484C(a1 + 3160, (uint64_t)buf, v19[0] + 24, 1);
    v15 = v19[0];
    v19[0] = 0;
    if (v15)
      sub_10085B928((uint64_t)v19, v15);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencySummaryReport,indication missing summary_report", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v19[0]) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencySummaryReport,indication missing summary_report", v19, v18);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySummaryReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1017F5F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    sub_10085B928((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void sub_1017F5F38(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  __int128 v10;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint8_t *v38;
  uint8_t buf[8];
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  _QWORD v44[3];
  __int16 v45;
  char v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  int v50;
  char v51;
  __int128 v52;
  _DWORD v53[6];
  __int16 v54;
  __int128 v55;
  __int16 v56;
  char v57;
  _BYTE v58[124];
  int v59;
  _QWORD v60[3];
  int v61;
  uint64_t v62;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,handleEmergencyPositionReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v21) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,handleEmergencyPositionReport", &v21, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyPositionReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v5 = *a2;
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 226) & 8) != 0)
    {
      *(_QWORD *)buf = 0;
      v40 = -1;
      v41 = -1;
      v42 = 0;
      v43 = -1;
      v44[0] = -1;
      *(_QWORD *)((char *)v44 + 7) = -1;
      v44[2] = 0xFFFFFFFF00000004;
      v45 = -1;
      v46 = -1;
      v47 = -1;
      v48 = 0;
      v49 = 0x7FFFFFFF000000FFLL;
      v50 = 0x7FFFFFFF;
      v51 = -1;
      v52 = xmmword_101CCE1C0;
      *(_QWORD *)v53 = 0xFFFFFFFF7FFFFFFFLL;
      *(_DWORD *)((char *)&v53[1] + 3) = -1;
      *(_QWORD *)&v53[3] = 0x8000000080000000;
      v53[5] = -1;
      v54 = -1;
      *(_QWORD *)&v10 = 0x8000000080000000;
      *((_QWORD *)&v10 + 1) = 0x8000000080000000;
      v55 = v10;
      v56 = -1;
      v57 = -1;
      memset_pattern16(v58, &unk_101CCE1D0, 0x78uLL);
      v58[120] = -1;
      v59 = 255;
      v60[2] = -1;
      v60[0] = -1;
      *(_QWORD *)((char *)v60 + 7) = -1;
      v61 = 0;
      v62 = 0;
      v21 = 0;
      v22 = -1082130432;
      v23 = 0;
      v24 = 0;
      v25 = -1;
      v26 = 0u;
      v27 = 0u;
      __asm { FMOV            V0.2D, #-1.0 }
      v28 = _Q0;
      v29 = _Q0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = _Q0;
      v34 = xmmword_101BDB7D0;
      v35 = _Q0;
      v36 = 0;
      v37 = 0;
      v16 = *(_QWORD *)(v5 + 144);
      if (!v16)
        v16 = *(_QWORD *)(qword_102311908 + 144);
      sub_1016B6BAC(v16, buf);
      v38 = buf;
      v17 = *(_QWORD *)(a1 + 3088);
      if (!v17)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t **, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v38, &v21);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyPositionReport,missing position_report", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v21) = 0;
        LODWORD(v20) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencyPositionReport,missing position_report", &v21, v20, v21);
LABEL_24:
        v9 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyPositionReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
        if (v9 != buf)
          free(v9);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyPositionReport,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v21) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencyPositionReport,nullptr", &v21, v20, v21);
      goto LABEL_24;
    }
  }
}

void sub_1017F643C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint8_t buf[4];
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;
  char v33;
  _QWORD v34[2];
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  char v56;
  int v57;
  __int16 v58;
  char v59;
  _DWORD v60[2];
  char v61;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencyMeasurementReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v18[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleEmergencyMeasurementReport", v18, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyMeasurementReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v5 = *a2;
  if (*a2 && (*(_BYTE *)(v5 + 226) & 0x10) != 0)
  {
    *(_DWORD *)buf = 0;
    v21 = -1;
    v22 = -1;
    v23 = -1;
    v9 = 28;
    v20 = 0;
    do
    {
      v10 = &buf[v9];
      *(_WORD *)v10 = 0x7FFF;
      *(_DWORD *)(v10 + 2) = -1;
      *(_DWORD *)(v10 + 5) = -1;
      *(_QWORD *)(v10 + 12) = 0xFFFFFFFF00000004;
      v10[20] = -1;
      v9 += 24;
    }
    while (v10 + 24 != (uint8_t *)&v24);
    v24 = 0;
    v25 = -1;
    v26 = 33619967;
    v27 = -1;
    v31 = -1;
    v32 = -1;
    v28 = -1;
    v29 = -1;
    v30 = -1;
    v33 = -1;
    *(_DWORD *)((char *)v34 + 7) = -1;
    v34[0] = -1;
    v35 = 4;
    v36 = -1;
    v37 = 0;
    v41 = -1;
    v42 = -1;
    v40 = -1;
    v39 = -1;
    v38 = -1;
    v43 = -1;
    v45 = -1;
    v46 = -1;
    v44 = -1;
    v47 = -1;
    v48 = -1;
    v49 = -1;
    v53 = -1;
    v50 = -1;
    v51 = -1;
    v52 = -1;
    v54 = -129;
    v55 = -1;
    v56 = -1;
    v57 = 5;
    v58 = -1;
    v59 = -1;
    v11 = 620;
    do
    {
      v12 = &buf[v11];
      *(_DWORD *)v12 = -32769;
      v12[4] = -1;
      *((_QWORD *)v12 + 1) = 0xFF00000004;
      *((_WORD *)v12 + 8) = -1;
      *((_DWORD *)v12 + 5) = -1;
      v11 += 24;
    }
    while (v12 + 24 != (uint8_t *)v60);
    v60[1] = -1;
    v61 = 0;
    v13 = *(_QWORD *)(v5 + 152);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311908 + 152);
    sub_1016B72A4(v13, (uint64_t)buf);
    v18[0] = buf;
    v14 = *(_QWORD *)(a1 + 3120);
    if (!v14)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v18);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyMeasurementReport,invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v18[0]) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencyMeasurementReport,invalid", v18, v17);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyMeasurementReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1017F68C0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint8_t buf[4];
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  char v30;
  char v31;
  _BYTE v32[24];
  int v33;
  char v34;
  int v35;
  char v36;
  char v37;
  int v38;
  __int16 v39;
  char v40;
  __int16 v41;
  char v42;
  int v43;
  char v44;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencyMeasurementReportWithEstimate", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v16[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleEmergencyMeasurementReportWithEstimate", v16, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyMeasurementReportWithEstimate(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v5 = *a2;
  if (*a2 && (*(_BYTE *)(v5 + 226) & 0x80) != 0)
  {
    *(_DWORD *)buf = 0;
    v18 = 0;
    v19 = -1;
    v20 = -1;
    v9 = 28;
    v21 = -1;
    do
    {
      v10 = &buf[v9];
      *(_WORD *)v10 = 0x7FFF;
      *(_DWORD *)(v10 + 2) = -1;
      *(_DWORD *)(v10 + 5) = -1;
      *(_QWORD *)(v10 + 12) = 0xFFFFFFFF00000004;
      v10[20] = -1;
      v9 += 24;
    }
    while (v10 + 24 != (uint8_t *)&v22);
    v22 = 0;
    v23 = -1;
    v24 = 33619967;
    v25 = -1;
    v29 = -1;
    v30 = -1;
    v26 = -1;
    v27 = -1;
    v28 = -1;
    v31 = -1;
    memset(v32, 255, 11);
    v33 = -1;
    memset(&v32[12], 255, 11);
    v34 = 0;
    v35 = -1;
    v36 = -1;
    v37 = 0;
    v38 = -1;
    v39 = -1;
    v40 = 0;
    v41 = -1;
    v42 = -1;
    v43 = 0;
    v44 = 0;
    v11 = *(_QWORD *)(v5 + 176);
    if (!v11)
      v11 = *(_QWORD *)(qword_102311908 + 176);
    sub_1016B9034(v11, (uint64_t)buf);
    v16[0] = buf;
    v12 = *(_QWORD *)(a1 + 3152);
    if (!v12)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v16);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyMeasurementReportWithEstimate,invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v16[0]) = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencyMeasurementReportWithEstimate,invalid", v16, v15);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyMeasurementReportWithEstimate(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1017F6CB8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint8_t buf[4];
  char v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  int v28;
  char v29;
  _BYTE v30[77];
  uint64_t v31;
  uint64_t v32;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencyAssNeededReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleEmergencyAssNeededReport", v22, 2);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(v5 + 226) & 0x20) != 0)
    {
      *(_DWORD *)buf = 0;
      v24 = 0;
      v25 = -1;
      v26 = -1;
      v27 = 0;
      v28 = -1;
      v29 = -1;
      memset(v30, 0, 14);
      v30[14] = -1;
      memset(&v30[15], 0, 14);
      v10 = &v31;
      v11 = 112;
      v30[29] = -1;
      v12 = 262;
      v30[33] = 0;
      do
      {
        *(_DWORD *)v10 = 5;
        *((_WORD *)v10 + 2) = 0;
        v13 = v11;
        *((_BYTE *)v10 + 6) = -1;
        do
        {
          v14 = &buf[v13];
          *v14 = -1;
          *((_DWORD *)v14 + 1) = -1;
          v13 += 8;
        }
        while (v14 + 8 != (uint8_t *)(v10 + 16));
        *((_DWORD *)v10 + 32) = -1;
        *((_WORD *)v10 + 66) = -1;
        *(_DWORD *)((char *)v10 + 134) = -256;
        *(uint64_t *)((char *)v10 + 138) = 0;
        v10[18] = 0;
        *((_DWORD *)v10 + 38) = -1;
        v15 = v12;
        *((_BYTE *)v10 + 156) = -1;
        do
        {
          v16 = &buf[v15];
          *v16 = -1;
          *((_WORD *)v16 + 1) = -1;
          v15 += 4;
        }
        while (v16 + 4 != (uint8_t *)((char *)v10 + 218));
        *(_DWORD *)((char *)v10 + 218) = -1;
        v10 += 28;
        v11 += 224;
        v12 += 224;
      }
      while (v10 != &v32);
      v17 = *(_QWORD *)(v5 + 160);
      if (!v17)
        v17 = *(_QWORD *)(qword_102311908 + 160);
      sub_1016B7B90(v17, (uint64_t)buf);
      v22[0] = buf;
      v18 = *(_QWORD *)(a1 + 3024);
      if (!v18)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v22);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyAssNeededReport,missing asst needed rpt", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v22[0]) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencyAssNeededReport,missing asst needed rpt", v22, v21, v22[0]);
LABEL_24:
        v9 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
        if (v9 != buf)
          free(v9);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyAssNeededReport,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v22[0]) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencyAssNeededReport,nullptr", v22, v21, v22[0]);
      goto LABEL_24;
    }
  }
}

void sub_1017F7188(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  __int128 *v5;
  _DWORD *v12;
  NSObject *v13;
  _QWORD block[5];
  __int128 v15;
  __int128 v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  int64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int16 v24[8];
  __int128 buf;
  __int128 v26;
  int64x2_t v27;
  __int128 v28;
  __int128 v29;
  int64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v2 = *a2;
  if (*a2 && (*(_BYTE *)(v2 + 227) & 1) != 0)
  {
    buf = xmmword_101BB0C00;
    v26 = xmmword_101BBBED0;
    v27 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    __asm { FMOV            V1.2D, #-1.0 }
    v28 = _Q1;
    *(_QWORD *)&v29 = 0xBFF0000000000000;
    WORD4(v29) = 0;
    BYTE10(v29) = 0;
    HIDWORD(v29) = 0;
    v30 = v27;
    v31 = xmmword_101BBE630;
    *(_QWORD *)&v32 = 0xBFF0000000000000;
    WORD4(v32) = -1;
    LODWORD(v33) = -1;
    WORD2(v33) = -1;
    *((_QWORD *)&v33 + 1) = 0xBFF0000000000000;
    v12 = *(_DWORD **)(v2 + 184);
    if (!v12)
      v12 = *(_DWORD **)(qword_102311908 + 184);
    sub_1016B5A8C(v12, (uint64_t)&buf);
    block[1] = 3221225472;
    v19 = v29;
    v20 = v30;
    v21 = v31;
    v22 = v32;
    v23 = v33;
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v13 = *(NSObject **)(a1 + 2152);
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_101806EA4;
    block[3] = &unk_1021D0760;
    block[4] = a1;
    v15 = buf;
    dispatch_async(v13, block);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencySuplStatusReport,missing", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v24[0] = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencySuplStatusReport,missing", v24, 2);
      v5 = (__int128 *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySuplStatusReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v4);
      if (v5 != &buf)
        free(v5);
    }
  }
}

void sub_1017F741C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*a2)
  {
    v2 = *(_QWORD *)(a1 + 3256);
    if (!v2)
      sub_10025FD1C();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencySuplLocationIdNeededReport,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleEmergencySuplLocationIdNeededReport,nullptr", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySuplLocationIdNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1017F75E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  _DWORD v31[2];
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  uint64_t buf;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  unsigned int v42;
  void *v43[2];
  void *v44[5];
  char v45;
  __int128 v46;
  _DWORD v47[8];
  uint64_t v48;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_DWORD *)(v2 + 224);
    if ((v3 & 0x10000000) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gpsd,#nilr,#supl,handleEmergencyDecodedSuplInit g_instance is missing", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v31[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gpsd,#nilr,#supl,handleEmergencyDecodedSuplInit g_instance is missing", v31, 2);
        v6 = (char *)v5;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v5);
LABEL_19:
        if (v6 != (char *)&buf)
          free(v6);
        return;
      }
      return;
    }
    v11 = *(_DWORD *)(v2 + 216);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12 = v3 & 0x8000000;
    v13 = v3 & 0x4000000;
    v14 = v3 & 0x2000000;
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67240960;
      HIDWORD(buf) = v13 >> 26;
      v39 = 1026;
      v40 = v14 >> 25;
      v41 = 1026;
      v42 = v12 >> 27;
      LOWORD(v43[0]) = 1026;
      *(_DWORD *)((char *)v43 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#gpsd,#nilr,#supl,DecodedSuplInit,has_supl_init_index,%{public}d,has_decoded_supl_init,%{public}d,has_supl_init_decode_result,inst,%{public}d,%{public}d", (uint8_t *)&buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v31[0] = 67240960;
      v31[1] = v13 >> 26;
      v32 = 1026;
      v33 = v14 >> 25;
      v34 = 1026;
      v35 = v12 >> 27;
      v36 = 1026;
      v37 = v11;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#nilr,#supl,DecodedSuplInit,has_supl_init_index,%{public}d,has_decoded_supl_init,%{public}d,has_supl_init_decode_result,inst,%{public}d,%{public}d", v31, 26);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v23);
      if (v24 != (char *)&buf)
        free(v24);
    }
    if (v12)
    {
      v17 = *(unsigned int *)(*a2 + 204);
      if ((_DWORD)v17 != 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v20 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,SUPL decode failed", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          LOWORD(v31[0]) = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#nilr,#supl,SUPL decode failed", v31, v30);
          v28 = (char *)v27;
          sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v27);
          if (v28 != (char *)&buf)
            free(v28);
        }
        v39 = 0;
        LOBYTE(v40) = 0;
        LOBYTE(v42) = 0;
        v45 = 0;
        v46 = 0u;
        memset(v47, 0, sizeof(v47));
        v48 = 0;
        LODWORD(buf) = 0;
        *(_DWORD *)((char *)&buf + 3) = 0;
        *(_OWORD *)v43 = 0u;
        memset(v44, 0, 38);
        v21 = sub_1016B7C60(v17);
        sub_101806E60(a1 + 3200, v21, v11, 0);
        goto LABEL_58;
      }
      if ((~v3 & 0x6000000) == 0)
      {
        v18 = *(_QWORD *)(*a2 + 192);
        if (!v18)
          v18 = *(_QWORD *)(qword_102311908 + 192);
        sub_1008D1E7C((uint64_t)v31, v18);
        v39 = 0;
        LOBYTE(v40) = 0;
        LOBYTE(v42) = 0;
        v45 = 0;
        v46 = 0u;
        memset(v47, 0, sizeof(v47));
        v48 = 0;
        LODWORD(buf) = 0;
        *(_DWORD *)((char *)&buf + 3) = 0;
        *(_OWORD *)v43 = 0u;
        memset(v44, 0, 38);
        sub_1016B5990((uint64_t)v31, (uint64_t)&buf);
        v19 = sub_1016B7C60(1);
        sub_101806E60(a1 + 3200, v19, v11, *(_DWORD *)(*a2 + 200));
        if (*(_QWORD *)&v47[3])
        {
          *(_QWORD *)&v47[5] = *(_QWORD *)&v47[3];
          operator delete(*(void **)&v47[3]);
        }
        if (SHIBYTE(v47[2]) < 0)
          operator delete(*(void **)((char *)&v46 + 4));
        if (*(void **)((char *)&v44[1] + 4))
        {
          *(void **)((char *)&v44[2] + 4) = *(void **)((char *)&v44[1] + 4);
          operator delete(*(void **)((char *)&v44[1] + 4));
        }
        if (SBYTE3(v44[1]) < 0)
          operator delete(*(void **)((char *)v43 + 4));
        sub_1008D1F04((wireless_diagnostics::google::protobuf::MessageLite *)v31);
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,Incomplete decoded SUPL payload", (uint8_t *)&buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_57;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#nilr,#supl,Incomplete decoded SUPL payload", v31, v30);
      v26 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v29);
      if (v26 == (char *)&buf)
      {
LABEL_57:
        v39 = 0;
        LOBYTE(v40) = 0;
        LOBYTE(v42) = 0;
        v45 = 0;
        v46 = 0u;
        memset(v47, 0, sizeof(v47));
        v48 = 0;
        LODWORD(buf) = 0;
        *(_DWORD *)((char *)&buf + 3) = 0;
        *(_OWORD *)v43 = 0u;
        memset(v44, 0, 38);
        sub_101806E60(a1 + 3200, 2, v11, 0);
LABEL_58:
        if (*(_QWORD *)&v47[3])
        {
          *(_QWORD *)&v47[5] = *(_QWORD *)&v47[3];
          operator delete(*(void **)&v47[3]);
        }
        if (SHIBYTE(v47[2]) < 0)
          operator delete(*(void **)((char *)&v46 + 4));
        if (*(void **)((char *)&v44[1] + 4))
        {
          *(void **)((char *)&v44[2] + 4) = *(void **)((char *)&v44[1] + 4);
          operator delete(*(void **)((char *)&v44[1] + 4));
        }
        if (SBYTE3(v44[1]) < 0)
          operator delete(*(void **)((char *)v43 + 4));
        return;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,Incomplete decoded SUPL payload", (uint8_t *)&buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_57;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#nilr,#supl,Incomplete decoded SUPL payload", v31, v30);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v25);
      if (v26 == (char *)&buf)
        goto LABEL_57;
    }
    free(v26);
    goto LABEL_57;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,handleEmergencyDecodedSuplInit,null", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v31[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#nilr,#supl,handleEmergencyDecodedSuplInit,null", v31, 2);
    v6 = (char *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
    goto LABEL_19;
  }
}

void sub_1017F8024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1016A69A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1017F8064(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint64_t v6;
  NSObject *v7;
  double v8;
  double v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  unsigned __int8 v16;
  unint64_t v17;
  char v18;
  int v19;
  double v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  int v26;

  if ((*(_BYTE *)(a2 + 225) & 8) != 0)
  {
    v17 = 0;
    v18 = 0;
    v6 = *(_QWORD *)(a2 + 88);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311908 + 88);
    sub_1016B877C(v6, (uint64_t)&v17);
    if (!v18)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v24 = *(double *)&v17;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,RTI integrity failure,dataTimeGpsNs,%{public}llu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v19 = 134349056;
        v20 = *(double *)&v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,RTI integrity failure,dataTimeGpsNs,%{public}llu", &v19, 12);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedRtiIndication(const proto::gpsd::Indication &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    v16 = 0;
    v8 = sub_100214380(a1 + 2536, &v16);
    v9 = v8 - (double)v17;
    v15 = v9;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v24 = v9;
      v25 = 1024;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gpsd,RTI,ageSeconds,%f,isAccurate,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v19 = 134218240;
      v20 = v9;
      v21 = 1024;
      v22 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,RTI,ageSeconds,%f,isAccurate,%d", COERCE_DOUBLE(&v19), 18);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleDecodedRtiIndication(const proto::gpsd::Indication &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_100067B0C(a1 + 8, (const char *)(a1 + 1824), 1, 3, &v15);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,Indication missing decoded Rti", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,Indication missing decoded Rti", &v19, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedRtiIndication(const proto::gpsd::Indication &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1017F851C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint64_t v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;

  if ((*(_BYTE *)(a2 + 225) & 2) != 0)
  {
    if (*(_QWORD *)(a1 + 3328))
    {
      v6 = *(_QWORD *)(a2 + 72);
      if (!v6)
        v6 = *(_QWORD *)(qword_102311908 + 72);
      sub_1016B8544(v6, (_DWORD *)&v21 + 1);
      if (*(_BYTE *)(a1 + 3344))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          v27 = HIDWORD(v21);
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,req,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v22 = 67109120;
          v23 = HIDWORD(v21);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#xocal,req,%d", &v22);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        v8 = *(uint64_t **)(a1 + 3328);
        if (v8)
          sub_10183FE5C(*v8, SHIDWORD(v21));
      }
      else
      {
        if (!*(_QWORD *)(a1 + 3352))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v13 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v27 = HIDWORD(v21);
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,req deferred,%d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            v22 = 67109120;
            v23 = HIDWORD(v21);
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#xocal,req deferred,%d", &v22);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
          operator new();
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v12 = **(_DWORD **)(a1 + 3352);
          *(_DWORD *)buf = 67109376;
          v27 = v12;
          v28 = 1024;
          v29 = HIDWORD(v21);
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,req update,old,%d,new,%d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v16 = **(_DWORD **)(a1 + 3352);
          v22 = 67109376;
          v23 = v16;
          v24 = 1024;
          v25 = HIDWORD(v21);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#xocal,req update,old,%d,new,%d", &v22, 14);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
        **(_DWORD **)(a1 + 3352) = HIDWORD(v21);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#xocal,#Warning,Requested but servicing controller not instantiated", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#xocal,#Warning,Requested but servicing controller not instantiated", &v22, v21);
        v4 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v10);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,#xocal,Indication missing in request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v22) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#xocal,Indication missing in request", &v22, v21);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v3);
LABEL_29:
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1017F8C88(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  uint64_t v6;
  char v7;
  NSObject *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  _QWORD block[5];
  char v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if ((*(_BYTE *)(a2 + 225) & 0x40) != 0)
  {
    if (*(_QWORD *)(a1 + 3336))
    {
      v6 = *(_QWORD *)(a2 + 104);
      if (!v6)
        v6 = *(_QWORD *)(qword_102311908 + 104);
      v7 = *(_BYTE *)(v6 + 8);
      v8 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1017FD68C;
      block[3] = &unk_1021468D0;
      block[4] = a1;
      v13 = v7;
      dispatch_async(v8, block);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#cntin,#Warning,RequestedButNoXccProxy", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v14[0] = 0;
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#cntin,#Warning,RequestedButNoXccProxy", v14, 2);
        v5 = v11;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)", "%s\n", v10);
        goto LABEL_23;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,#cntin,cntin_clock_control,IndicationMissed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v14[0] = 0;
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#cntin,cntin_clock_control,IndicationMissed", v14, 2);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)", "%s\n", v3);
LABEL_23:
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1017F8F9C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,handleFT1xAssNeededReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,handleFT1xAssNeededReport", v13, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleFT1xAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_QWORD *)a2)
  {
    if ((*(_BYTE *)(*(_QWORD *)a2 + 226) & 0x40) != 0)
    {
      LODWORD(v13[0]) = 4;
      *(_QWORD *)buf = v13;
      v9 = *(_QWORD *)(a1 + 3056);
      if (!v9)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,handleFT1xAssNeededReport,missing FT asst needed rpt", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleFT1xAssNeededReport,missing FT asst needed rpt", v13, v12, v13[0]);
LABEL_24:
        v8 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleFT1xAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v6);
        if (v8 != buf)
          free(v8);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,handleFT1xAssNeededReport,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v13[0]) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleFT1xAssNeededReport,nullptr", v13, v12, v13[0]);
      goto LABEL_24;
    }
  }
}

void sub_1017F9368(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t *v7;
  double v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  double v12;
  uint8_t *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v19[2];
  uint8_t buf[4];
  int v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,handleStopCompletedIndication", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,handleStopCompletedIndication", v19, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleStopCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_1017FA9F4(a1);
  v5 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(v5 + 225) & 0x20) != 0)
    {
      v10 = *(_DWORD *)(v5 + 100);
      if (v10 == 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#gpsd,stopCompleted,success", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          LOWORD(v19[0]) = 0;
          LODWORD(v18) = 2;
          v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,stopCompleted,success", v19, v18);
          v14 = v13;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleStopCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v12);
          goto LABEL_47;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v21 = v10;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#gpsd,stopCompleted,fail,status=%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,stopCompleted,fail,status=%d", v19);
          goto LABEL_46;
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,stopCompleted,statusMissing", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v19[0]) = 0;
        LODWORD(v18) = 2;
        v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,stopCompleted,statusMissing", v19, v18, v19[0]);
LABEL_46:
        v14 = v7;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleStopCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
LABEL_47:
        if (v14 != buf)
          free(v14);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gpsd,handleStopCompletedIndication,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handleStopCompletedIndication,nullptr");
      goto LABEL_46;
    }
  }
}

void sub_1017F9910(_DWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;
  int v18;
  int v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v17 = "handleExceptionIndication";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v14 = 136315138;
    v15 = "handleExceptionIndication";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,%s", (const char *)&v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleExceptionIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v5 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(v5 + 225) & 0x80) != 0)
    {
      v11 = *(_QWORD *)(v5 + 112);
      if (!v11)
        v11 = *(_QWORD *)(qword_102311908 + 112);
      sub_100F493E4(buf, v11);
      sub_1018059C4(a1, v19, v18);
      sub_100F493E8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v17 = "handleExceptionIndication";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,%s,statusMissing", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v14 = 136315138;
        v15 = "handleExceptionIndication";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,%s,statusMissing", (const char *)&v14);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleExceptionIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
LABEL_24:
        if (v8 != buf)
          free(v8);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "handleExceptionIndication";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gpsd,%s,nullptr", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v14 = 136315138;
      v15 = "handleExceptionIndication";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,%s,nullptr", (const char *)&v14);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleExceptionIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v10);
      goto LABEL_24;
    }
  }
}

void sub_1017F9DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100F493E8((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

void sub_1017F9DC4(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint8_t buf[2];
  char v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,#wlan,handleEmergencySuplWlanMeasNeededReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#wlan,handleEmergencySuplWlanMeasNeededReport", v15, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencySuplWlanMeasNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v5 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(v5 + 227) & 0x20) != 0)
    {
      *(_WORD *)buf = -1;
      v17 = 0;
      v10 = *(_QWORD *)(v5 + 208);
      if (!v10)
        v10 = *(_QWORD *)(qword_102311908 + 208);
      sub_1016B8CC4(v10, (uint64_t)buf);
      v11 = *(_QWORD *)(a1 + 3288);
      if (!v11)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 48))(v11, buf);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,#wlan,Missing wlan_measurement_request", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v15[0]) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#wlan,Missing wlan_measurement_request", v15, v14, v15[0]);
LABEL_24:
        v9 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySuplWlanMeasNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
        if (v9 != buf)
          free(v9);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,#wlan,handleEmergencySuplWlanMeasNeededReport,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#wlan,handleEmergencySuplWlanMeasNeededReport,nullptr", v15, v14, v15[0]);
      goto LABEL_24;
    }
  }
}

void sub_1017FA1AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  sub_1000FF154(a1 + 2576);
  v2 = sub_100103BB0(34);
  if ((v2 & 1) == 0)
    sub_10180AC90(v2, v3, v4);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 34;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gpsd,prepareBuildDeviceRequest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,prepareBuildDeviceRequest", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::prepareBuildDeviceRequest()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

uint64_t sub_1017FA360(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,deleteGnssData,deleteFlag,%{public}llu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12 = 134349056;
    v13 = a2;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,deleteGnssData,deleteFlag,%{public}llu", &v12, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::deleteGnssData(uint64_t)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(5);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  v8 = *(_DWORD *)(a1 + 2972);
  *(_DWORD *)(a1 + 2596) = 5;
  *(_DWORD *)(a1 + 2972) = v8 | 0x40004;
  v9 = *(_QWORD *)(a1 + 2720);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 20) |= 1u;
  *(_QWORD *)(v9 + 8) = a2;
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_1017FA584()
{
  operator delete();
}

void sub_1017FA5B0(_BYTE *a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unint64_t v14;
  __int16 v15;
  int v16;
  _DWORD v17[58];
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  unint64_t v21;
  __int16 v22;
  int v23;

  if (*(_BYTE *)(*(_QWORD *)a1 + 1680))
  {
    if (a1[16])
      v2 = 80;
    else
      v2 = 0;
    sub_1000FF07C((uint64_t)v17);
    if ((sub_100103BB0(31) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    v17[5] = 31;
    v19 |= 0x20000004u;
    v3 = v18;
    if (!v18)
      operator new();
    v4 = sub_1001047C0();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      v21 = v4;
      v22 = 1026;
      v23 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#cts,thermalRiskScale,time,%{public}llu,scale,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v13 = 134349312;
      v14 = v4;
      v15 = 1026;
      v16 = v2;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#cts,thermalRiskScale,time,%{public}llu,scale,%{public}d", &v13, 18);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::sendThermalRiskScale()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    v6 = *(_DWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 8) = v4;
    *(_DWORD *)(v3 + 24) = v6 | 3;
    *(_DWORD *)(v3 + 16) = v2;
    v7 = *(_QWORD *)a1;
    sub_1000FF114(v7 + 2576, (uint64_t)v17);
    sub_1000FF8D8(v7 + 2176, 2);
    sub_1000FF078(v17);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1[16];
      *(_DWORD *)buf = 67240192;
      LODWORD(v21) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cts,thermalRiskScale,%{public}d,ignored,notRunning", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v11 = a1[16];
      v17[0] = 67240192;
      v17[1] = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#cts,thermalRiskScale,%{public}d,ignored,notRunning", v17, 8);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::sendThermalRiskScale()", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

void sub_1017FA9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000FF078(va);
  _Unwind_Resume(a1);
}

id sub_1017FA9F4(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,deregisterKeepAlive", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,deregisterKeepAlive", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::deregisterKeepAlive()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1784), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetRegisterPowerKeepAlive:client:dbgMessage:", 0, a1, CFSTR("GNSS: Allowing Sleep"));
}

uint64_t sub_1017FABAC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setEmergencyConfig", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setEmergencyConfig", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setEmergencyConfig(const gnss::Emergency::Config &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_BYTE *)(a1 + 2344) = *(_BYTE *)a2;
  std::string::operator=((std::string *)(a1 + 2352), (const std::string *)(a2 + 8));
  *(_BYTE *)(a1 + 2376) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 2384) = *(_WORD *)(a2 + 40);
  std::string::operator=((std::string *)(a1 + 2392), (const std::string *)(a2 + 48));
  *(_DWORD *)(a1 + 2416) = *(_DWORD *)(a2 + 72);
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(53);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  v8 = *(_DWORD *)(a1 + 2972);
  *(_DWORD *)(a1 + 2596) = 53;
  *(_DWORD *)(a1 + 2972) = v8 | 0x80000004;
  v9 = *(_QWORD *)(a1 + 2824);
  if (!v9)
    operator new();
  sub_1016B2978((std::string *)a2, v9);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_1017FADF4()
{
  operator delete();
}

uint64_t sub_1017FAE20(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,shutdown", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::shutdown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_1017FAFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(_BYTE *)(a3 + 5) != 0) & ~sub_100CD597C(a1 + 1684);
}

void sub_1017FAFF4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  sub_1000BE2B0(a1, &v4);
  v3 = std::string::insert(&v4, 0, "sim_");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1017FB05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017FB078(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string v3;

  if (sub_1000FDB0C())
  {
    if (sub_10075FA90())
    {
      sub_1017FB150(&v3);
      v2 = std::string::insert(&v3, 0, "https://iphone-ld.apple.com/rto/v5/latest/");
    }
    else
    {
      sub_1017FB150(&v3);
      v2 = std::string::insert(&v3, 0, "https://iphone-ld.apple.com/rto/v4/latest/");
    }
  }
  else
  {
    sub_1017FB150(&v3);
    v2 = std::string::insert(&v3, 0, "https://iphone-ld.apple.com/rto/v3/latest/");
  }
  *(_OWORD *)a1 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v2->__r_.__value_.__l + 2);
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1017FB12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1017FB150(std::string *a1@<X8>)
{
  int v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  BOOL v11;

  sub_1015A2E04(a1, "rto.dat");
  if (sub_1000FDB0C())
    v2 = sub_1000C4240();
  else
    v2 = 0;
  sub_1001E4804(&v9);
  v11 = 0;
  if (sub_1001E4874(v9, "GpsAssistanceRteFileLZMA", &v11))
    v3 = v11;
  else
    v3 = v2;
  v4 = v10;
  if (!v10)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      return;
  }
  else
  {
LABEL_11:
    if (!v3)
      return;
  }
  if (byte_10230FB17 >= 0)
    v7 = (const std::string::value_type *)&qword_10230FB00;
  else
    v7 = (const std::string::value_type *)qword_10230FB00;
  if (byte_10230FB17 >= 0)
    v8 = byte_10230FB17;
  else
    v8 = qword_10230FB08;
  std::string::append(a1, v7, v8);
}

void sub_1017FB248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017FB278@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;

  if (*(_BYTE *)(a1 + 1720))
  {
    v3 = "https://iphone-ld.apple.com/xof/current.rti";
  }
  else if (*(_BYTE *)(a1 + 1721))
  {
    v3 = "https://iphone-ld.apple.com/xof/gnss3.rti";
  }
  else if (sub_10075FA90())
  {
    v3 = "https://iphone-ld.apple.com/lto/rtistatus6.dat";
  }
  else
  {
    v3 = "https://iphone-ld.apple.com/lto/a/rtistatus5.dat";
  }
  return sub_1015A2E04(a2, v3);
}

void sub_1017FB2DC(std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  void **v23;
  std::string *p_str;
  NSObject *v25;
  const char *v26;
  std::string *v27;
  void **v28;
  std::string *v29;
  const char *v30;
  std::string *v31;
  std::string v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string __str;
  std::string __p;
  void *v37[2];
  char v38;
  std::string v39;
  std::string v40;

  sub_1001E4804(&v40);
  v4 = v40.__r_.__value_.__r.__words[0];
  v5 = sub_1000BE610();
  LOBYTE(v37[0]) = 0;
  if (sub_1001E4874(v4, "ForceEnableGpsAssistanceRte", (BOOL *)v37))
    v6 = LOBYTE(v37[0]) != 0;
  else
    v6 = v5;
  size = (std::__shared_weak_count *)v40.__r_.__value_.__l.__size_;
  if (!v40.__r_.__value_.__l.__size_)
    goto LABEL_8;
  v8 = (unint64_t *)(v40.__r_.__value_.__l.__size_ + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (v6)
    {
LABEL_9:
      sub_1001E4804(&v40);
      v10 = v40.__r_.__value_.__r.__words[0];
      sub_1017FB078((uint64_t)&__p);
      sub_1005F0F40(v10, "GpsAssistanceRteSrcUrl", &__p, (uint64_t)v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = (std::__shared_weak_count *)v40.__r_.__value_.__l.__size_;
      if (v40.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(v40.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      sub_1001E4804(&v33);
      v14 = v33;
      sub_1000BE558((uint64_t)&v40);
      sub_1017FB150(&v39);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v39;
      else
        v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v16 = v39.__r_.__value_.__l.__size_;
      v17 = std::string::append(&v40, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      sub_1005F0F40(v14, "GpsAssistanceRteDstUrl", &v32, (uint64_t)&__str);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v19 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v23 = v37;
        if (v38 < 0)
          v23 = (void **)v37[0];
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        LODWORD(v40.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#gpsd,#rte,GpsAssistanceRteSrcUrl,%s,GpsAssistanceRteDstUrl,%s", (uint8_t *)&v40, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v40, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v28 = v37;
        if (v38 < 0)
          v28 = (void **)v37[0];
        v29 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
        LODWORD(v39.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        WORD2(v39.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v29;
        _os_log_send_and_compose_impl(2, 0, &v40, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#rte,GpsAssistanceRteSrcUrl,%s,GpsAssistanceRteDstUrl,%s", (const char *)&v39, 22);
        v31 = (std::string *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getRealTimeEphemerisFileInfo() const", "%s\n", v30);
        if (v31 != &v40)
          free(v31);
      }
      std::string::operator=(a1 + 75, &__str);
      operator new();
    }
  }
  else
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v25 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v40.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#gpsd,#rte,disabled", (uint8_t *)&v40, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v40, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v37[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v40, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#rte,disabled", v37, 2);
    v27 = (std::string *)v26;
    sub_100512490("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getRealTimeEphemerisFileInfo() const", "%s\n", v26);
    if (v27 != &v40)
      free(v27);
  }
  *a2 = 0;
}

void sub_1017FB860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a25 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void sub_1017FB944(std::string *a1)
{
  std::string::size_type size;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  NSObject *v22;
  std::string *p_p;
  std::string *p_str;
  std::string *v25;
  std::string *v26;
  const char *v27;
  std::string *v28;
  std::string __str;
  std::string __p;
  std::string v31;
  _BYTE v32[22];
  unsigned __int8 v33;
  _QWORD v34[2];

  memset(&__p, 0, sizeof(__p));
  sub_1001E4804(&v31);
  if (sub_1000BCB64((uint64_t)v31.__r_.__value_.__l.__data_, "GpsAssistanceRtiSrcUrl", &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v3 = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
    if (!v31.__r_.__value_.__l.__size_)
      goto LABEL_9;
    v4 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (size)
        goto LABEL_20;
    }
    else
    {
LABEL_9:
      if (size)
        goto LABEL_20;
    }
  }
  else
  {
    v6 = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
    if (v31.__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  sub_1017FB278((uint64_t)a1, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v31;
LABEL_20:
  memset(&__str, 0, sizeof(__str));
  sub_1001E4804(&v31);
  if (sub_1000BCB64((uint64_t)v31.__r_.__value_.__l.__data_, "GpsAssistanceRtiDstUrl", &__str))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v9 = __str.__r_.__value_.__l.__size_;
    v10 = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
    if (!v31.__r_.__value_.__l.__size_)
      goto LABEL_28;
    v11 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v9)
        goto LABEL_53;
    }
    else
    {
LABEL_28:
      if (v9)
        goto LABEL_53;
    }
  }
  else
  {
    v13 = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
    if (v31.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  sub_1000BE558((uint64_t)&v31);
  if (a1[71].__r_.__value_.__s.__data_[16])
  {
    v16 = "current.rti";
  }
  else if (a1[71].__r_.__value_.__s.__data_[17])
  {
    v16 = "gnss3.rti";
  }
  else
  {
    v16 = "rti.dat";
  }
  sub_1015A2E04(v32, v16);
  if ((v33 & 0x80u) == 0)
    v17 = v32;
  else
    v17 = *(const std::string::value_type **)v32;
  if ((v33 & 0x80u) == 0)
    v18 = v33;
  else
    v18 = *(_QWORD *)&v32[8];
  v19 = std::string::append(&v31, v17, v18);
  v20 = v19->__r_.__value_.__r.__words[0];
  v34[0] = v19->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = v20;
  __str.__r_.__value_.__l.__size_ = v34[0];
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v34 + 7);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v21;
  if ((char)v33 < 0)
    operator delete(*(void **)v32);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_53:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v22 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    LODWORD(v31.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v31.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#gpsd,#ee,GpsAssistanceRtiSrcUrl,%s,GpsAssistanceRtiDstUrl,%s", (uint8_t *)&v31, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v31, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v25 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v26 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)v32 = 136315394;
    *(_QWORD *)&v32[4] = v25;
    *(_WORD *)&v32[12] = 2080;
    *(_QWORD *)&v32[14] = v26;
    _os_log_send_and_compose_impl(2, 0, &v31, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#ee,GpsAssistanceRtiSrcUrl,%s,GpsAssistanceRtiDstUrl,%s", v32, 22);
    v28 = (std::string *)v27;
    sub_100512490("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getRtiFileInfo() const", "%s\n", v27);
    if (v28 != &v31)
      free(v28);
  }
  std::string::operator=(a1 + 76, &__str);
  operator new();
}

void sub_1017FBE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1017FBEE0(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  float v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  int v20;

  if (*(_BYTE *)(a1 + 1664))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,Warning,Simulator mode,not updating leap second", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Warning,Simulator mode,not updating leap second", &v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateLeapSecond(const proto::gnss::Time &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    v4 = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 1704) = v4 < 250000000.0;
    if (*(_BYTE *)(a2 + 20))
    {
      if (v4 < 250000000.0)
      {
        v5 = *(unsigned int *)(a2 + 64);
        if (sub_100512544() != (_DWORD)v5)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v6 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v7 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
            *(_DWORD *)buf = 134218240;
            v18 = v7;
            v19 = 1024;
            v20 = v5;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,GPS_TIME,UpdateLeapSeconds,gpsMs,%f,leapS,%d", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            v10 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
            v13 = 134218240;
            v14 = v10;
            v15 = 1024;
            v16 = v5;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,GPS_TIME,UpdateLeapSeconds,gpsMs,%f,leapS,%d", COERCE_DOUBLE(&v13), 18);
            v12 = (uint8_t *)v11;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateLeapSecond(const proto::gnss::Time &)", "%s\n", v11);
            if (v12 != buf)
              free(v12);
          }
          sub_1005125F0(v5);
        }
      }
    }
  }
}

void sub_1017FC244(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  const char *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  _BYTE v29[20];
  int v30;
  uint64_t v31;
  int v32;
  _WORD v33[10];
  int v34;
  uint64_t v35;
  int v36;
  _DWORD v37[4];
  uint8_t buf[4];
  int v39;

  if (*(_BYTE *)(a1 + 1680))
  {
    v4 = sub_1001047C0();
    sub_1000FF07C((uint64_t)v33);
    if ((sub_100103BB0(18) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    v34 = 18;
    v36 |= 0x404u;
    v5 = v35;
    if (!v35)
      operator new();
    *(_DWORD *)(v35 + 32) |= 1u;
    *(_QWORD *)(v5 + 8) = v4;
    if (!sub_100106094(3u))
      __assert_rtn("set_moving_state", "GpsdProtocol.pb.h", 10147, "::proto::gnss::MovingState_IsValid(value)");
    *(_DWORD *)(v5 + 32) |= 4u;
    *(_DWORD *)(v5 + 20) = 3;
    sub_1000FF07C((uint64_t)v29);
    if ((sub_100103BB0(19) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    v30 = 19;
    v32 |= 0x804u;
    v6 = v31;
    if (!v31)
      operator new();
    *(_DWORD *)(v31 + 24) |= 1u;
    *(_QWORD *)(v6 + 8) = v4;
    if (!sub_100106170(3))
    {
      v19 = "::proto::gnss::DeviceMountState_IsValid(value)";
      v20 = 10219;
      v21 = "set_mount_state";
      goto LABEL_48;
    }
    *(_DWORD *)(v6 + 24) |= 2u;
    *(_DWORD *)(v6 + 16) = 3;
    if (a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,enter airborne", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v37[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,enter airborne", v37, 2);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::feedAirborneActivity(BOOL)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      *(_BYTE *)(a1 + 1706) = 1;
      *(_DWORD *)(a1 + 2340) = 8;
      if (sub_100106054(0x4Bu))
      {
        v8 = 75;
LABEL_31:
        *(_DWORD *)(v5 + 32) |= 8u;
        *(_DWORD *)(v5 + 24) = v8;
        v12 = sub_10010927C(*(_DWORD *)(a1 + 2340));
        if (sub_10010285C(v12))
        {
          *(_DWORD *)(v5 + 32) |= 2u;
          *(_DWORD *)(v5 + 16) = v12;
          if (v12 - 1 > 8)
            v13 = 0;
          else
            v13 = dword_101CE0474[v12 - 1];
          *(_DWORD *)(a1 + 344) = v13;
          v14 = *(_DWORD *)(v5 + 20) - 1;
          if (v14 > 2)
            v15 = 0;
          else
            v15 = dword_101CE0498[v14];
          *(_DWORD *)(a1 + 348) = v15;
          if (*(_DWORD *)(v6 + 16) == 2)
            v16 = 1;
          else
            v16 = 2;
          *(_DWORD *)(a1 + 352) = v16;
          v17 = a1 + 2576;
          sub_1000FF114(a1 + 2576, (uint64_t)v33);
          v18 = a1 + 2176;
          sub_1000FF8D8(v18, 2);
          sub_1000FF114(v17, (uint64_t)v29);
          sub_1000FF8D8(v18, 2);
          sub_1000FF078(v29);
          sub_1000FF078(v33);
          return;
        }
        v19 = "::proto::gnss::MotionActivityContext_IsValid(value)";
        v20 = 10124;
        v21 = "set_context";
LABEL_48:
        __assert_rtn(v21, "GpsdProtocol.pb.h", v20, v19);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(unsigned __int8 *)(a1 + 1706);
        *(_DWORD *)buf = 67240192;
        v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsd,exit airborne,current state,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v26 = *(unsigned __int8 *)(a1 + 1706);
        v37[0] = 67240192;
        v37[1] = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,exit airborne,current state,%{public}d", v37, 8);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::feedAirborneActivity(BOOL)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      *(_BYTE *)(a1 + 1706) = 0;
      *(_DWORD *)(a1 + 2340) = 0;
      if (sub_100106054(0x19u))
      {
        v8 = 25;
        goto LABEL_31;
      }
    }
    v19 = "::proto::gnss::Reliability_IsValid(value)";
    v20 = 10170;
    v21 = "set_motion_reliability";
    goto LABEL_48;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,session not running,save airborne state", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v33[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,session not running,save airborne state", v33, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::feedAirborneActivity(BOOL)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  *(_BYTE *)(a1 + 1706) = a2;
}

void sub_1017FC954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_1000FF078(&a12);
  sub_1000FF078(&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FC9D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 304))
    sub_100067A50(a1 + 248);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 152) = _Q1;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 200) = _Q1;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_QWORD *)(a1 + 288) = 0x100000005;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 1;
  return a1;
}

NSDictionary *__cdecl sub_1017FCA74(id a1)
{
  return (NSDictionary *)&off_102220308;
}

NSDictionary *__cdecl sub_1017FCA80(id a1)
{
  return (NSDictionary *)&off_102220330;
}

void sub_1017FCA8C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  _BOOL4 v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  const char *v27;
  _BOOL4 v28;
  int v29;
  _BOOL4 v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  const char *v38;
  uint8_t *v39;
  _BYTE v40[32];
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[4];
  _BYTE v46[10];
  uint64_t v47;
  _BYTE v48[10];
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;

  if (*(_QWORD *)(a1 + 3448) || *(_BYTE *)(a1 + 3472) || !*(_QWORD *)(a1 + 1656))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 3448) != 0;
      v5 = *(unsigned __int8 *)(a1 + 3472);
      v6 = *(_QWORD *)(a1 + 1656) != 0;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v46 = v4;
      *(_WORD *)&v46[4] = 1026;
      *(_DWORD *)&v46[6] = v5;
      LOWORD(v47) = 1026;
      *(_DWORD *)((char *)&v47 + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsd,updateBasebandTimeFreqTransferData,protoFix,%{public}d,%{public}d,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v28 = *(_QWORD *)(a1 + 3448) != 0;
      v29 = *(unsigned __int8 *)(a1 + 3472);
      v30 = *(_QWORD *)(a1 + 1656) != 0;
      *(_DWORD *)v40 = 67240704;
      *(_DWORD *)&v40[4] = v28;
      *(_WORD *)&v40[8] = 1026;
      *(_DWORD *)&v40[10] = v29;
      *(_WORD *)&v40[14] = 1026;
      *(_DWORD *)&v40[16] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,updateBasebandTimeFreqTransferData,protoFix,%{public}d,%{public}d,%{public}d", v40, 20, *(_OWORD *)v40, *(_OWORD *)&v40[16]);
      goto LABEL_40;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102310C70 + 8);
      if ((~*(_DWORD *)(v8 + 72) & 0x183) == 0)
      {
        *(_QWORD *)(a1 + 3408) = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(a1 + 3416) = *(_DWORD *)(v8 + 16);
        *(double *)(a1 + 3360) = sub_100108DB0();
        *(_WORD *)(a1 + 3424) = sub_100512544();
        v9 = *(_QWORD *)(a2 + 8);
        if (!v9)
          v9 = *(_QWORD *)(qword_102310C70 + 8);
        v10 = (double)*(unint64_t *)(v9 + 48);
        *(_QWORD *)(a1 + 3368) = (unint64_t)(v10 * 0.000001);
        *(float *)&v10 = -((double)(unint64_t)(v10 * 0.000001) - v10 * 0.000001);
        *(_DWORD *)(a1 + 3376) = LODWORD(v10);
        *(float *)&v10 = (double)*(unint64_t *)(v9 + 56) * 0.000000999999997;
        *(_DWORD *)(a1 + 3380) = LODWORD(v10);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v11 = (uint64_t *)(a1 + 3360);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *v11;
          v14 = *(_QWORD *)(a2 + 8);
          if (!v14)
            v14 = *(_QWORD *)(qword_102310C70 + 8);
          v15 = *(_QWORD *)(v14 + 48);
          v16 = *(_QWORD *)(a1 + 3368);
          v17 = *(float *)(a1 + 3376);
          v18 = *(float *)(a1 + 3380);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)v46 = v13;
          *(_WORD *)&v46[8] = 2048;
          v47 = v15;
          *(_WORD *)v48 = 2048;
          *(_QWORD *)&v48[2] = v16;
          v49 = 2048;
          v50 = v17;
          v51 = 2048;
          v52 = v18;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gpsd,#tt,baseband TFT data,mct,%.1f,bbNs,%llu,bbIntegerMs,%llu,bbSubMs,%.3f,bbUncMs,%.6f", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v32 = *v11;
          v33 = *(_QWORD *)(a2 + 8);
          if (!v33)
            v33 = *(_QWORD *)(qword_102310C70 + 8);
          v34 = *(_QWORD *)(v33 + 48);
          v35 = *(_QWORD *)(a1 + 3368);
          v36 = *(float *)(a1 + 3376);
          v37 = *(float *)(a1 + 3380);
          *(_DWORD *)v40 = 134219008;
          *(_QWORD *)&v40[4] = v32;
          *(_WORD *)&v40[12] = 2048;
          *(_QWORD *)&v40[14] = v34;
          *(_WORD *)&v40[22] = 2048;
          *(_QWORD *)&v40[24] = v35;
          v41 = 2048;
          v42 = v36;
          v43 = 2048;
          v44 = v37;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#tt,baseband TFT data,mct,%.1f,bbNs,%llu,bbIntegerMs,%llu,bbSubMs,%.3f,bbUncMs,%.6f", COERCE_DOUBLE(v40), 52);
          v39 = (uint8_t *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const proto::gnss::Fix &)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        v19 = *(_QWORD *)(a1 + 1656);
        if (!v19)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, a1 + 3360);
        *v11 = 0;
        *(_QWORD *)(a1 + 3368) = 0;
        *(_QWORD *)(a1 + 3376) = 0xBF800000BF800000;
        *(_QWORD *)(a1 + 3384) = 0x7FF8000000000000;
        *(_QWORD *)(a1 + 3392) = 3212836864;
        *(_QWORD *)(a1 + 3400) = 0x7FF8000000000000;
        *(_QWORD *)(a1 + 3408) = 0;
        *(_QWORD *)(a1 + 3416) = 3212836864;
        *(_WORD *)(a1 + 3424) = 0x8000;
        *(_QWORD *)(a1 + 3426) = 0;
        *(_QWORD *)(a1 + 3432) = 0;
        *(_WORD *)(a1 + 3440) = 0x8000;
        *(_DWORD *)(a1 + 3442) = 0;
        *(_WORD *)(a1 + 3446) = 0;
        return;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_DWORD *)(a2 + 48) & 1;
      v22 = *(_QWORD *)(a2 + 8);
      if (!v22)
        v22 = *(_QWORD *)(qword_102310C70 + 8);
      v23 = *(_DWORD *)(v22 + 72);
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)v46 = v21;
      *(_WORD *)&v46[4] = 1026;
      *(_DWORD *)&v46[6] = v23 & 1;
      LOWORD(v47) = 1026;
      *(_DWORD *)((char *)&v47 + 2) = (v23 >> 1) & 1;
      HIWORD(v47) = 1026;
      *(_DWORD *)v48 = (v23 >> 7) & 1;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = (v23 >> 8) & 1;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#gpsd,updateBasebandTimeFreqTransferData,protoFix,isTimeValidInFix,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v24 = *(_DWORD *)(a2 + 48) & 1;
      v25 = *(_QWORD *)(a2 + 8);
      if (!v25)
        v25 = *(_QWORD *)(qword_102310C70 + 8);
      v26 = *(_DWORD *)(v25 + 72);
      *(_DWORD *)v40 = 67241216;
      *(_DWORD *)&v40[4] = v24;
      *(_WORD *)&v40[8] = 1026;
      *(_DWORD *)&v40[10] = v26 & 1;
      *(_WORD *)&v40[14] = 1026;
      *(_DWORD *)&v40[16] = (v26 >> 1) & 1;
      *(_WORD *)&v40[20] = 1026;
      *(_DWORD *)&v40[22] = (v26 >> 7) & 1;
      *(_WORD *)&v40[26] = 1026;
      *(_DWORD *)&v40[28] = (v26 >> 8) & 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,updateBasebandTimeFreqTransferData,protoFix,isTimeValidInFix,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", v40, 32, *(_OWORD *)v40, *(_OWORD *)&v40[16]);
LABEL_40:
      v31 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const proto::gnss::Fix &)", "%s\n", v27);
      if (v31 != buf)
        free(v31);
    }
  }
}

void sub_1017FD170(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  unint64_t v11;
  float v12;
  float v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  _BOOL4 v25;
  int v26;
  _BOOL4 v27;
  int v28;
  _BOOL4 v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  const char *v37;
  uint8_t *v38;
  int v39;
  _BYTE v40[10];
  uint64_t v41;
  _BYTE v42[10];
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint8_t buf[4];
  _BYTE v48[10];
  uint64_t v49;
  _BYTE v50[10];
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;

  if (*(_QWORD *)(a1 + 3448)
    || !*(_BYTE *)(a1 + 3472)
    || (*(_QWORD *)(a1 + 1656) ? (_ZF = *a2 == 0) : (_ZF = 1), _ZF || !*((_QWORD *)a2 + 6)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 3448) != 0;
      v6 = *(unsigned __int8 *)(a1 + 3472);
      v7 = *(_QWORD *)(a1 + 1656) != 0;
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 6) != 0;
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)v48 = v5;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = v6;
      LOWORD(v49) = 1026;
      *(_DWORD *)((char *)&v49 + 2) = v7;
      HIWORD(v49) = 1026;
      *(_DWORD *)v50 = v8;
      *(_WORD *)&v50[4] = 1026;
      *(_DWORD *)&v50[6] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,updateBasebandTimeFreqTransferData,ttData,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v25 = *(_QWORD *)(a1 + 3448) != 0;
      v26 = *(unsigned __int8 *)(a1 + 3472);
      v27 = *(_QWORD *)(a1 + 1656) != 0;
      v28 = *a2;
      v29 = *((_QWORD *)a2 + 6) != 0;
      v39 = 67241216;
      *(_DWORD *)v40 = v25;
      *(_WORD *)&v40[4] = 1026;
      *(_DWORD *)&v40[6] = v26;
      LOWORD(v41) = 1026;
      *(_DWORD *)((char *)&v41 + 2) = v27;
      HIWORD(v41) = 1026;
      *(_DWORD *)v42 = v28;
      *(_WORD *)&v42[4] = 1026;
      *(_DWORD *)&v42[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,updateBasebandTimeFreqTransferData,ttData,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", &v39, 32);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const gnss::TimeTransferData &)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 3408) = *((_QWORD *)a2 + 1);
    *(_DWORD *)(a1 + 3416) = *((_DWORD *)a2 + 4);
    *(double *)(a1 + 3360) = sub_100108DB0();
    *(_WORD *)(a1 + 3424) = sub_100512544();
    v11 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 3368) = v11 / 0xF4240;
    v12 = -((double)(v11 / 0xF4240) - (double)v11 * 0.000001);
    *(float *)(a1 + 3376) = v12;
    v13 = (double)*((unint64_t *)a2 + 7) * 0.000001;
    *(float *)(a1 + 3380) = v13;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 3360);
      v16 = *((_QWORD *)a2 + 6);
      v17 = *(_QWORD *)(a1 + 3368);
      v18 = *(float *)(a1 + 3376);
      v19 = *(float *)(a1 + 3380);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)v48 = v15;
      *(_WORD *)&v48[8] = 2048;
      v49 = v16;
      *(_WORD *)v50 = 2048;
      *(_QWORD *)&v50[2] = v17;
      v51 = 2048;
      v52 = v18;
      v53 = 2048;
      v54 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gpsd,#tt,baseband TFT data,mct,%.1f,bbNs,%llu,bbIntegerMs,%llu,bbSubMs,%.3f,bbUncMs,%.6f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v32 = *(_QWORD *)(a1 + 3360);
      v33 = *((_QWORD *)a2 + 6);
      v34 = *(_QWORD *)(a1 + 3368);
      v35 = *(float *)(a1 + 3376);
      v36 = *(float *)(a1 + 3380);
      v39 = 134219008;
      *(_QWORD *)v40 = v32;
      *(_WORD *)&v40[8] = 2048;
      v41 = v33;
      *(_WORD *)v42 = 2048;
      *(_QWORD *)&v42[2] = v34;
      v43 = 2048;
      v44 = v35;
      v45 = 2048;
      v46 = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#tt,baseband TFT data,mct,%.1f,bbNs,%llu,bbIntegerMs,%llu,bbSubMs,%.3f,bbUncMs,%.6f", COERCE_DOUBLE(&v39), 52);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const gnss::TimeTransferData &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v20 = *(_QWORD *)(a1 + 1656);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v20, a1 + 3360);
    *(_QWORD *)(a1 + 3360) = 0;
    *(_QWORD *)(a1 + 3368) = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)(a1 + 3376) = _D0;
    *(_QWORD *)(a1 + 3384) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 3392) = 3212836864;
    *(_QWORD *)(a1 + 3400) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 3408) = 0;
    *(_QWORD *)(a1 + 3416) = 3212836864;
    *(_WORD *)(a1 + 3424) = 0x8000;
    *(_QWORD *)(a1 + 3426) = 0;
    *(_QWORD *)(a1 + 3432) = 0;
    *(_WORD *)(a1 + 3440) = 0x8000;
    *(_DWORD *)(a1 + 3442) = 0;
    *(_WORD *)(a1 + 3446) = 0;
  }
}

void sub_1017FD68C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67240192;
    v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#gpsd,#cntin,enableClock,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12 = *(unsigned __int8 *)(a1 + 40);
    v19[0] = 67240192;
    v19[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,#cntin,enableClock,%{public}d", v19, 8);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)_block_invoke", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v5 = *(uint64_t **)(v2 + 3336);
  if (*(_BYTE *)(a1 + 40))
  {
    v17[0] = off_1021D0B48;
    v17[1] = v2;
    v18 = v17;
    sub_1017FDB38(v5, (uint64_t)v17);
    v6 = v18;
    if (v18 == v17)
    {
      v7 = 4;
      v6 = v17;
    }
    else
    {
      if (!v18)
      {
LABEL_20:
        sub_10183F474(**(_QWORD **)(v2 + 3336), 0xFFFFFFFF);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsd,#cntin,enableCntinClock", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v19[0]) = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#cntin,enableCntinClock", v19, v16);
        v10 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)_block_invoke", "%s\n", v15);
LABEL_33:
        if (v10 != buf)
          free(v10);
        return;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_20;
  }
  sub_10183F474(*v5, 0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gpsd,#cntin,disableCntinClock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v19[0]) = 0;
    LODWORD(v16) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#cntin,disableCntinClock", v19, v16);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)_block_invoke", "%s\n", v9);
    goto LABEL_33;
  }
}

void sub_1017FDAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1017FDB38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  v2 = *a1;
  sub_100270E34((uint64_t)v5, a2);
  sub_10183FC4C(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1017FDBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1017FDC0C(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  NSObject *v6;
  void **v7;
  NSObject *v8;
  int v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  void **v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  void **v34;
  NSObject *v35;
  int v36;
  int v37;
  const char *v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  int v59;
  const char *v60;
  void **v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  const char *v70;
  _BYTE buf[14];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  int v84;
  _BYTE *v85;
  void *__p;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    sub_101840924(a2, &__p);
    v7 = (v92 & 0x8000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,#xocal,status,%s", buf, 0xCu);
    if (SBYTE1(v92) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v55 = qword_1022A0078;
    sub_101840924(a2, buf);
    if ((v75 & 0x8000) == 0)
      v56 = buf;
    else
      v56 = *(_BYTE **)buf;
    v84 = 136315138;
    v85 = v56;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v55, 0, "#gpsd,#xocal,status,%s", (const char *)&v84);
    v58 = v57;
    if (SBYTE1(v75) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v58);
    if (v58 != (char *)&__p)
      free(v58);
  }
  switch(a2)
  {
    case 0u:
      *(_BYTE *)(a1 + 3344) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(unsigned __int8 *)(a1 + 3344);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,ind,ifOn,%d", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v59 = *(unsigned __int8 *)(a1 + 3344);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v59;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#xocal,ind,ifOn,%d", buf);
        v61 = (void **)v60;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v60);
        if (v61 != &__p)
          free(v61);
      }
      v10 = *(int **)(a1 + 3352);
      if (!v10)
      {
        *(_QWORD *)(a1 + 3352) = 0;
        return;
      }
      v11 = *(uint64_t **)(a1 + 3328);
      if (v11)
      {
        sub_10183FE5C(*v11, *v10);
        v12 = *(_QWORD *)(a1 + 3352);
        *(_QWORD *)(a1 + 3352) = 0;
        if (!v12)
          return;
      }
      else
      {
        *(_QWORD *)(a1 + 3352) = 0;
      }
      operator delete();
    case 1u:
      *(_BYTE *)(a1 + 3344) = 0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v35 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(unsigned __int8 *)(a1 + 3344);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,ind,ifOn,%d", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v37 = *(unsigned __int8 *)(a1 + 3344);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v37;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#xocal,ind,ifOn,%d", buf);
      v15 = (void **)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v38);
      goto LABEL_54;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#gpsd,#xocal,reqFailed", (uint8_t *)&__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gpsd,#xocal,reqFailed", buf, 2);
      v15 = (void **)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v14);
      goto LABEL_54;
    case 3u:
      if (a3)
      {
        if (*a3)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v16 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v17 = *a3;
            v19 = *((_DWORD *)a3 + 7);
            v18 = *((_DWORD *)a3 + 8);
            v21 = *((_DWORD *)a3 + 5);
            v20 = *((_DWORD *)a3 + 6);
            v23 = *((_DWORD *)a3 + 3);
            v22 = *((_DWORD *)a3 + 4);
            v24 = *((_DWORD *)a3 + 2);
            LODWORD(__p) = 67241984;
            HIDWORD(__p) = v17;
            v87 = 1026;
            v88 = v24;
            v89 = 1026;
            v90 = v18;
            v91 = 1026;
            v92 = v19;
            v93 = 1026;
            v94 = v20;
            v95 = 1026;
            v96 = v21;
            v97 = 1026;
            v98 = v22;
            v99 = 1026;
            v100 = v23;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#gpsd,#xocal,ind,success,%{public}d,infoType,%{public}d,coeff,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", (uint8_t *)&__p, 0x32u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_62;
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v25 = *a3;
          v27 = *((_DWORD *)a3 + 7);
          v26 = *((_DWORD *)a3 + 8);
          v29 = *((_DWORD *)a3 + 5);
          v28 = *((_DWORD *)a3 + 6);
          v31 = *((_DWORD *)a3 + 3);
          v30 = *((_DWORD *)a3 + 4);
          v32 = *((_DWORD *)a3 + 2);
          *(_DWORD *)buf = 67241984;
          *(_DWORD *)&buf[4] = v25;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v32;
          v72 = 1026;
          v73 = v26;
          v74 = 1026;
          v75 = v27;
          v76 = 1026;
          v77 = v28;
          v78 = 1026;
          v79 = v29;
          v80 = 1026;
          v81 = v30;
          v82 = 1026;
          v83 = v31;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,#xocal,ind,success,%{public}d,infoType,%{public}d,coeff,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 50);
          v34 = (void **)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v33);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v41 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            v42 = *a3;
            v44 = *((_DWORD *)a3 + 7);
            v43 = *((_DWORD *)a3 + 8);
            v46 = *((_DWORD *)a3 + 5);
            v45 = *((_DWORD *)a3 + 6);
            v48 = *((_DWORD *)a3 + 3);
            v47 = *((_DWORD *)a3 + 4);
            v49 = *((_DWORD *)a3 + 2);
            LODWORD(__p) = 67241984;
            HIDWORD(__p) = v42;
            v87 = 1026;
            v88 = v49;
            v89 = 1026;
            v90 = v43;
            v91 = 1026;
            v92 = v44;
            v93 = 1026;
            v94 = v45;
            v95 = 1026;
            v96 = v46;
            v97 = 1026;
            v98 = v47;
            v99 = 1026;
            v100 = v48;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning,#gpsd,#xocal,ind,success,%{public}d,infoType,%{public}d,coeff,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", (uint8_t *)&__p, 0x32u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_62;
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v62 = *a3;
          v64 = *((_DWORD *)a3 + 7);
          v63 = *((_DWORD *)a3 + 8);
          v66 = *((_DWORD *)a3 + 5);
          v65 = *((_DWORD *)a3 + 6);
          v68 = *((_DWORD *)a3 + 3);
          v67 = *((_DWORD *)a3 + 4);
          v69 = *((_DWORD *)a3 + 2);
          *(_DWORD *)buf = 67241984;
          *(_DWORD *)&buf[4] = v62;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v69;
          v72 = 1026;
          v73 = v63;
          v74 = 1026;
          v75 = v64;
          v76 = 1026;
          v77 = v65;
          v78 = 1026;
          v79 = v66;
          v80 = 1026;
          v81 = v67;
          v82 = 1026;
          v83 = v68;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#gpsd,#xocal,ind,success,%{public}d,infoType,%{public}d,coeff,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 50);
          v34 = (void **)v70;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v70);
        }
        if (v34 != &__p)
          free(v34);
LABEL_62:
        sub_1000FF154(a1 + 2576);
        v50 = sub_100103BB0(29);
        if ((v50 & 1) == 0)
          sub_10180AC90(v50, v51, v52);
        v53 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)(a1 + 2596) = 29;
        *(_DWORD *)(a1 + 2972) = v53 | 0x4000004;
        v54 = *(_QWORD *)(a1 + 2784);
        if (!v54)
          operator new();
        sub_1016B8064((char *)a3, v54);
        sub_1000FF8D8(a1 + 2176, 2);
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#gpsd,#xocal,nullInfo", (uint8_t *)&__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        *(_WORD *)buf = 0;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#xocal,nullInfo", buf, 2);
        v15 = (void **)v40;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v40);
LABEL_54:
        if (v15 != &__p)
          free(v15);
      }
      return;
    default:
      return;
  }
}

void sub_1017FE798()
{
  operator delete();
}

uint64_t sub_1017FE7D4(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  unsigned int v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,#cntin,handleXccStatus,status,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v14[0] = 67240192;
    v14[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,#cntin,handleXccStatus,status,%{public}d", v14, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleXccStatus(CLIceController::CLXccControllerProxy::XccStatus)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (a2 > 5)
    v5 = 0;
  else
    v5 = dword_101CE045C[a2];
  sub_1000FF154(a1 + 2576);
  v6 = sub_100103BB0(30);
  if ((v6 & 1) == 0)
    sub_10180AC90(v6, v7, v8);
  v9 = *(_DWORD *)(a1 + 2972);
  *(_DWORD *)(a1 + 2596) = 30;
  *(_DWORD *)(a1 + 2972) = v9 | 0x10000004;
  v10 = *(_QWORD *)(a1 + 2800);
  if (!v10)
    operator new();
  if (!sub_10001B780(v5))
    sub_101935CF4();
  *(_DWORD *)(v10 + 16) |= 1u;
  *(_DWORD *)(v10 + 8) = v5;
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_1017FEA30()
{
  operator delete();
}

void sub_1017FEA5C(uint64_t a1)
{
  sub_1017FEA70(*(_QWORD *)(a1 + 32), a1 + 40, (uint64_t *)(a1 + 104));
}

void sub_1017FEA70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _BYTE v39[10];
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[4];
  _BYTE v57[10];
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;

  if (*a3 && a3[1] > (unint64_t)*a3)
  {
    sub_101800914(a1, a2, a3, (uint64_t)&v33);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
LABEL_23:
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_24:
        sub_1017FD170(a1, (unsigned __int8 *)a2);
        v30 = v35;
        v31 = v36;
        v32 = v37;
        v28 = v33;
        v29 = v34;
        sub_1017DDD1C(a1, (uint64_t)&v28);
        if (*(_BYTE *)a2)
        {
          v19 = *(_QWORD *)(a1 + 3448);
          if (v19)
            sub_10171BE68(v19, *(_QWORD *)(a2 + 8), *a3, a3[1], *(float *)(a2 + 16));
        }
        sub_100033A54(a1, 28);
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v20 = qword_1022A0078;
      v21 = sub_1016F2BF0((uint64_t)&v33);
      if (*((float *)&v33 + 2) >= 1.0e11)
      {
        if (*((float *)&v33 + 2) <= 0.0)
        {
          v22 = 0;
          goto LABEL_38;
        }
      }
      else
      {
        v22 = 0;
        if (*((float *)&v33 + 2) <= 0.0 || !(_QWORD)v33)
        {
LABEL_38:
          v23 = *(float *)(a2 + 16);
          v24 = *a3;
          v25 = a3[1];
          v38 = 67111680;
          *(_DWORD *)v39 = v21;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v22;
          LOWORD(v40) = 1024;
          *(_DWORD *)((char *)&v40 + 2) = BYTE12(v33);
          HIWORD(v40) = 2048;
          v41 = v33;
          v42 = 2048;
          v43 = 604800000000000 * dword_102314120;
          v44 = 2048;
          v45 = *((float *)&v33 + 2);
          v46 = 2048;
          v47 = v23;
          v48 = 2048;
          v49 = v35;
          v50 = 1024;
          v51 = v37;
          v52 = 2048;
          v53 = v24;
          v54 = 2048;
          v55 = v25;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "#tt,pulseTimeValid,%d,fTimeValid,%d,LeapValid,%d,GPSNs,%llu,%llu,uncNs,%.1f,uncNsTT,%.1f,fBias,%lld,fSource,%d,before,%llu,after,%llu", &v38, 96, (_DWORD)v28, *((_QWORD *)&v28 + 1), (_QWORD)v29, *((double *)&v29 + 1), *(double *)&v30, *((_QWORD *)&v30 + 1), (_DWORD)v31, *((_QWORD *)&v31 + 1),
            v32);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleTimeTransferData(const gnss::TimeTransferData &, const GNSS::TimeMark &)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
          goto LABEL_24;
        }
      }
      v22 = *((_QWORD *)&v34 + 1) != -1;
      goto LABEL_38;
    }
    v7 = sub_1016F2BF0((uint64_t)&v33);
    if (*((float *)&v33 + 2) >= 1.0e11)
    {
      if (*((float *)&v33 + 2) <= 0.0)
      {
        v8 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v8 = 0;
      if (*((float *)&v33 + 2) <= 0.0 || !(_QWORD)v33)
        goto LABEL_22;
    }
    v8 = *((_QWORD *)&v34 + 1) != -1;
LABEL_22:
    v16 = *(float *)(a2 + 16);
    v17 = *a3;
    v18 = a3[1];
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)v57 = v7;
    *(_WORD *)&v57[4] = 1024;
    *(_DWORD *)&v57[6] = v8;
    LOWORD(v58) = 1024;
    *(_DWORD *)((char *)&v58 + 2) = BYTE12(v33);
    HIWORD(v58) = 2048;
    v59 = v33;
    v60 = 2048;
    v61 = 604800000000000 * dword_102314120;
    v62 = 2048;
    v63 = *((float *)&v33 + 2);
    v64 = 2048;
    v65 = v16;
    v66 = 2048;
    v67 = v35;
    v68 = 1024;
    v69 = v37;
    v70 = 2048;
    v71 = v17;
    v72 = 2048;
    v73 = v18;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#tt,pulseTimeValid,%d,fTimeValid,%d,LeapValid,%d,GPSNs,%llu,%llu,uncNs,%.1f,uncNsTT,%.1f,fBias,%lld,fSource,%d,before,%llu,after,%llu", buf, 0x60u);
    goto LABEL_23;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *a3;
    v11 = a3[1];
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)v57 = v10;
    *(_WORD *)&v57[8] = 2050;
    v58 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#tt,#Warning,invalid ttPulseMark,before,%{public}llu,after,%{public}llu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12 = *a3;
    v13 = a3[1];
    v38 = 134349312;
    *(_QWORD *)v39 = v12;
    *(_WORD *)&v39[8] = 2050;
    v40 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#tt,#Warning,invalid ttPulseMark,before,%{public}llu,after,%{public}llu", &v38, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleTimeTransferData(const gnss::TimeTransferData &, const GNSS::TimeMark &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

uint64_t sub_1017FEFE4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint8x8_t v17;
  int16x8_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  _BYTE v56[10];
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD v69[40];
  int v70;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(unsigned __int8 *)(a2 + 72);
    v11 = *(unsigned __int8 *)(a2 + 73);
    v12 = *(unsigned __int8 *)(a2 + 74);
    v13 = *(unsigned __int8 *)(a2 + 75);
    v14 = *(unsigned __int8 *)(a2 + 76);
    *(_DWORD *)buf = 134220288;
    v54 = v5;
    v55 = 2048;
    *(_QWORD *)v56 = v6;
    *(_WORD *)&v56[8] = 2048;
    v57 = v7;
    v58 = 2048;
    v59 = v8;
    v60 = 2048;
    v61 = v9;
    v62 = 1024;
    v63 = v10;
    v64 = 1024;
    v65 = v11;
    v66 = 1024;
    v67 = v12;
    v68 = 1024;
    LODWORD(v69[0]) = v13;
    WORD2(v69[0]) = 1024;
    *(_DWORD *)((char *)v69 + 6) = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,feeding mapVector,startLat,%.7lf,startLon,%.7lf,length,%.1f,azimuth,%.1f,width,%.1f,isTunnel,%d,isOneWay,%d,isRailWay,%d,isBridge,%d,isFreeway,%d", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v20 = *(_QWORD *)(a2 + 8);
    v21 = *(_QWORD *)(a2 + 16);
    v22 = *(_QWORD *)(a2 + 40);
    v23 = *(_QWORD *)(a2 + 48);
    v24 = *(_QWORD *)(a2 + 64);
    v25 = *(unsigned __int8 *)(a2 + 72);
    v26 = *(unsigned __int8 *)(a2 + 73);
    v27 = *(unsigned __int8 *)(a2 + 74);
    v28 = *(unsigned __int8 *)(a2 + 75);
    v29 = *(unsigned __int8 *)(a2 + 76);
    v33 = 134220288;
    v34 = v20;
    v35 = 2048;
    v36 = v21;
    v37 = 2048;
    v38 = v22;
    v39 = 2048;
    v40 = v23;
    v41 = 2048;
    v42 = v24;
    v43 = 1024;
    v44 = v25;
    v45 = 1024;
    v46 = v26;
    v47 = 1024;
    v48 = v27;
    v49 = 1024;
    v50 = v28;
    v51 = 1024;
    v52 = v29;
    LODWORD(v32) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,feeding mapVector,startLat,%.7lf,startLon,%.7lf,length,%.1f,azimuth,%.1f,width,%.1f,isTunnel,%d,isOneWay,%d,isRailWay,%d,isBridge,%d,isFreeway,%d", COERCE_DOUBLE(&v33), v32);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMapVector(CLGpsAssistant_Type::DirectionOfTravelAssistance)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  sub_1000FF07C((uint64_t)buf);
  if ((sub_100103BB0(17) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  *(_DWORD *)&v56[6] = 17;
  v70 |= 0x204u;
  v15 = v69[0];
  if (!v69[0])
    operator new();
  v16 = *(_DWORD *)(v69[0] + 76);
  *(_QWORD *)(v69[0] + 8) = (unint64_t)(*(double *)(a2 + 96) * 1000000000.0);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(v15 + 64) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v17 = *(uint8x8_t *)(a2 + 64);
  *(uint8x8_t *)(v15 + 56) = v17;
  *(_BYTE *)(v15 + 65) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(v15 + 76) = v16 | 0x1FEF;
  v17.i32[0] = *(_DWORD *)(a2 + 72);
  v18 = (int16x8_t)vmovl_u8(v17);
  *(int16x4_t *)v18.i8 = vrev32_s16(*(int16x4_t *)v18.i8);
  *(int8x8_t *)v18.i8 = vext_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8, 6uLL);
  *(_DWORD *)(v15 + 66) = vmovn_s16(v18).u32[0];
  sub_1000FF114(a1 + 2576, (uint64_t)buf);
  sub_1000FF8D8(a1 + 2176, 2);
  return sub_1000FF078(buf);
}

void sub_1017FF374()
{
  operator delete();
}

void sub_1017FF3B4()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#gpsd,#Warning,Map matched position assistance not supported", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#Warning,Map matched position assistance not supported", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectMapMatchedPosition(CLGpsAssistant_Type::MapMatchedPositionAssistance)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1017FF568(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  double v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  double v15;
  double v16;
  const char *v17;
  NSObject *v18;
  double v19;
  double v20;
  const char *v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  int v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  _QWORD v34[12];
  uint64_t v35;
  int v36;

  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *a2 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a2;
      *(_DWORD *)buf = 134349056;
      v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,PedometerAssistance,Ignored due to invalid validity time,%{public}f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v11 = *a2;
    v27 = 134349056;
    v28 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,PedometerAssistance,Ignored due to invalid validity time,%{public}f", &v27, 12);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v12);
LABEL_41:
    if (v13 != buf)
      free(v13);
    return;
  }
  if (((_QWORD)a2[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[2] < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v15 = a2[2];
      *(_DWORD *)buf = 134349056;
      v32 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#gpsd,PedometerAssistance,Ignored due to invalid speed,%{public}f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v16 = a2[2];
    v27 = 134349056;
    v28 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,PedometerAssistance,Ignored due to invalid speed,%{public}f", &v27, 12);
    v13 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v17);
    goto LABEL_41;
  }
  if (((_QWORD)a2[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a2[3] > 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = a2[2];
      v6 = *((_QWORD *)a2 + 3);
      *(_DWORD *)buf = 134218240;
      v32 = v5;
      v33 = 2048;
      v34[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,PedometerAssistance,Speed,%.2f,Uncertainty=%.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v22 = a2[2];
      v23 = *((_QWORD *)a2 + 3);
      v27 = 134218240;
      v28 = v22;
      v29 = 2048;
      v30 = v23;
      LODWORD(v26) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,PedometerAssistance,Speed,%.2f,Uncertainty=%.2f", COERCE_DOUBLE(&v27), v26);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    sub_1000FF07C((uint64_t)buf);
    if ((sub_100103BB0(22) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    *(_DWORD *)((char *)v34 + 6) = 22;
    v36 |= 0x4004u;
    v7 = v35;
    if (!v35)
      operator new();
    v8 = *(_DWORD *)(v35 + 36);
    *(_QWORD *)(v35 + 8) = (unint64_t)(a2[1] * 1000000000.0);
    *(_DWORD *)(v7 + 36) = v8 | 7;
    *(_OWORD *)(v7 + 16) = *((_OWORD *)a2 + 1);
    sub_1000FF114(a1 + 2576, (uint64_t)buf);
    sub_1000FF8D8(a1 + 2176, 2);
    sub_1000FF078(buf);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v19 = a2[3];
    *(_DWORD *)buf = 134349056;
    v32 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#gpsd,PedometerAssistance,Ignored due to invalid uncertainty,%{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v20 = a2[3];
    v27 = 134349056;
    v28 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,PedometerAssistance,Ignored due to invalid uncertainty,%{public}f", &v27, 12);
    v13 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v21);
    goto LABEL_41;
  }
}

void sub_1017FFC1C()
{
  operator delete();
}

void sub_1017FFC5C(uint64_t a1, uint64_t a2)
{
  double v3;
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  _BYTE v39[10];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)a2 < 0.0
    || (*(_QWORD *)(a2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(a2 + 16) <= 0.0
    || (v3 = *(double *)(a2 + 24), (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v3 < 0.0
    || (*(_QWORD *)(a2 + 32) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(a2 + 32) < v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v13 = *(double *)a2;
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)buf = 134349824;
      v37 = v13;
      v38 = 2050;
      *(_QWORD *)v39 = v14;
      *(_WORD *)&v39[8] = 2050;
      v40 = v15;
      v41 = 2050;
      v42 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#gpsd,PedometerAssistance,Ignoring invalid constraint,validityTime,%{public}.2f,duration,%{public}.2f,min,%{public}.2f,max,%{public}.2f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v17 = *(double *)a2;
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 32);
      v28 = 134349824;
      v29 = v17;
      v30 = 2050;
      v31 = v18;
      v32 = 2050;
      v33 = v19;
      v34 = 2050;
      v35 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,PedometerAssistance,Ignoring invalid constraint,validityTime,%{public}.2f,duration,%{public}.2f,min,%{public}.2f,max,%{public}.2f", &v28, 42);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeedConstraint(const CLGNSSPedometerConstraintAssistanceCommand &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(double *)(a2 + 24);
      v6 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349568;
      v37 = v7;
      v38 = 2050;
      *(_QWORD *)v39 = v6;
      *(_WORD *)&v39[8] = 2050;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gpsd,PedometerAssistance,SpeedConstraint,MinSpeedBound,%{public}.2f,MaxSpeedBound,%{public}.2f,ValidityDuration,%{public}.2f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v24 = *(double *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 32);
      v25 = *(_QWORD *)(a2 + 16);
      v28 = 134349568;
      v29 = v24;
      v30 = 2050;
      v31 = v23;
      v32 = 2050;
      v33 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,PedometerAssistance,SpeedConstraint,MinSpeedBound,%{public}.2f,MaxSpeedBound,%{public}.2f,ValidityDuration,%{public}.2f", &v28, 32);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeedConstraint(const CLGNSSPedometerConstraintAssistanceCommand &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    sub_1000FF07C((uint64_t)buf);
    if ((sub_100103BB0(21) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    *(_DWORD *)&v39[6] = 21;
    v44 |= 0x2004u;
    v9 = v43;
    if (!v43)
      operator new();
    v10 = *(_DWORD *)(v43 + 44);
    *(_QWORD *)(v43 + 8) = (unint64_t)(*(double *)(a2 + 8) * 1000000000.0);
    *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(v9 + 44) = v10 | 0xF;
    *(_QWORD *)(v9 + 32) = v11;
    sub_1000FF114(a1 + 2576, (uint64_t)buf);
    sub_1000FF8D8(a1 + 2176, 2);
    sub_1000FF078(buf);
  }
}

void sub_101800120()
{
  operator delete();
}

void sub_101800160(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  _WORD v32[8];
  uint8_t buf[1640];

  if (*a2 == a2[1])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "#gpsd,GPSSENSOR,No Sensor Samples", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v32[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gpsd,GPSSENSOR,No Sensor Samples", v32, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectRawSensorSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v17);
LABEL_48:
    if (v18 != buf)
      free(v18);
    return;
  }
  sub_1000FF154(a1 + 2576);
  v4 = *(unsigned __int8 *)(*a2 + 8);
  if (v4 == 2)
  {
    v19 = sub_100103BB0(15);
    if ((v19 & 1) == 0)
      sub_10180AC90(v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 2972);
    *(_DWORD *)(a1 + 2596) = 15;
    *(_DWORD *)(a1 + 2972) = v22 | 0x84;
    v23 = *(int **)(a1 + 2632);
    if (!v23)
      operator new();
    v24 = *a2;
    if (a2[1] != *a2)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = v23[5];
        v28 = v23[4];
        if ((int)v28 >= v27)
        {
          if (v27 == v23[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v23 + 2), v27 + 1);
            v27 = v23[5];
          }
          v23[5] = v27 + 1;
          sub_100F4AF38();
        }
        v29 = *((_QWORD *)v23 + 1);
        v23[4] = v28 + 1;
        sub_101800718(a1, v24 + v25, *(float32x2_t **)(v29 + 8 * v28), v26++ == 0, 0.0174532925);
        v24 = *a2;
        v25 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v26);
    }
    *(_BYTE *)(a1 + 651) = 1;
    goto LABEL_36;
  }
  if (v4 == 1)
  {
    v5 = sub_100103BB0(14);
    if ((v5 & 1) == 0)
      sub_10180AC90(v5, v6, v7);
    v8 = *(_DWORD *)(a1 + 2972);
    *(_DWORD *)(a1 + 2596) = 14;
    *(_DWORD *)(a1 + 2972) = v8 | 0x44;
    v9 = *(int **)(a1 + 2624);
    if (!v9)
      operator new();
    v10 = *a2;
    if (a2[1] != *a2)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = v9[5];
        v14 = v9[4];
        if ((int)v14 >= v13)
        {
          if (v13 == v9[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 2), v13 + 1);
            v13 = v9[5];
          }
          v9[5] = v13 + 1;
          sub_100F4AF38();
        }
        v15 = *((_QWORD *)v9 + 1);
        v9[4] = v14 + 1;
        sub_101800718(a1, v10 + v11, *(float32x2_t **)(v15 + 8 * v14), v12++ == 0, -9.80665);
        v10 = *a2;
        v11 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v12);
    }
    *(_BYTE *)(a1 + 650) = 1;
LABEL_36:
    sub_1000FF8D8(a1 + 2176, 2);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v30 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "#gpsd,GPSSENSOR,unsupported Type", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v32[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gpsd,GPSSENSOR,unsupported Type", v32, 2);
    v18 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectRawSensorSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v31);
    goto LABEL_48;
  }
}

void sub_1018006E8()
{
  operator delete();
}

float32_t sub_101800718(uint64_t a1, uint64_t a2, float32x2_t *a3, char a4, double a5)
{
  int v7;
  float32x2_t v8;
  NSObject *v9;
  __int32 v10;
  float32_t result;
  const char *v12;
  uint8_t *v13;
  __int16 v15;
  float32x2_t v16;
  uint8_t buf[1640];

  v16 = 0;
  sub_10010929C(a1, &v16, a4, *(double *)a2);
  if (v7)
  {
    v8 = v16;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#gpsd,Could not get cont time for inertial sensor sample", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v15 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,Could not get cont time for inertial sensor sample", &v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::populateProtoSensorSample(const GNSS::RawSensorSample &, proto::gnss::SensorSample3Axis *, BOOL, double)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v8 = 0;
  }
  v10 = a3[4].i32[0];
  a3[1] = v8;
  a3[2] = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 12)), a5));
  result = *(float *)(a2 + 20) * a5;
  a3[4].i32[0] = v10 | 0xF;
  a3[3].f32[0] = result;
  return result;
}

void sub_101800914(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  float v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;

  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = -1082130432;
  *(_BYTE *)(a4 + 12) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_OWORD *)(a4 + 24) = xmmword_101CD0FE0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  if (*(_BYTE *)a2)
  {
    *(_QWORD *)a4 = *(_QWORD *)(a2 + 8);
    v8 = sub_100127828(a3[1] - *a3) * 1000000000.0 + 1000000.0 + *(float *)(a2 + 16);
    *(float *)(a4 + 8) = v8;
    *(_BYTE *)(a4 + 12) = *(_BYTE *)(a1 + 1704);
    *(_DWORD *)(a4 + 16) = sub_100512544();
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)a3;
    *(_DWORD *)(a4 + 64) = sub_100D021C8((uint64_t *)(a1 + 1848), (float *)a4);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289026;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tt,InvalidGpsWeek\"}", (uint8_t *)v10, 0x12u);
    }
  }
}

uint64_t *sub_101800AA4(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,setBasebandCausesL1InterferenceAssertion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,setBasebandCausesL1InterferenceAssertion", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_1017DDC10(a1, 7);
}

void sub_101800C40(uint64_t a1, unsigned int a2, double *a3, double a4)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  int v28;
  double v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  _BYTE v33[10];
  unsigned int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;

  if (a2 > 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *((_QWORD *)a3 + 67);
      v13 = *((_QWORD *)a3 + 68);
      v14 = *((_QWORD *)a3 + 63);
      *(_DWORD *)buf = 134219008;
      v42 = v12;
      v43 = 2048;
      v44 = v13;
      v45 = 1024;
      v46 = a2;
      v47 = 2048;
      v48 = a4;
      v49 = 2048;
      v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsd,DEM,feeding,alt,%.3f,unc,%.3f,reliability,%d,undulation,%.3lf,mach_cont,%.2f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v20 = *((_QWORD *)a3 + 67);
      v21 = *((_QWORD *)a3 + 68);
      v22 = *((_QWORD *)a3 + 63);
      v30 = 134219008;
      v31 = v20;
      v32 = 2048;
      *(_QWORD *)v33 = v21;
      *(_WORD *)&v33[8] = 1024;
      v34 = a2;
      v35 = 2048;
      v36 = a4;
      v37 = 2048;
      v38 = v22;
      LODWORD(v27) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,DEM,feeding,alt,%.3f,unc,%.3f,reliability,%d,undulation,%.3lf,mach_cont,%.2f", COERCE_DOUBLE(&v30), v27, v28, v29);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    sub_1000FF07C((uint64_t)&v30);
    if ((sub_100103BB0(16) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    *(_DWORD *)&v33[6] = 16;
    v40 |= 0x104u;
    v15 = v39;
    if (!v39)
      operator new();
    v16 = (unint64_t)(a3[63] * 1000000000.0);
    *(_DWORD *)(v39 + 36) |= 1u;
    *(_QWORD *)(v15 + 8) = v16;
    if (!v16)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v17 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#gpsd,#Warning DEM timestamp is zero", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v28) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,#Warning DEM timestamp is zero", &v28, *(_QWORD *)&v27);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
    v18 = *(_DWORD *)(v15 + 36);
    *(double *)(v15 + 16) = a3[67] + a4;
    v19 = *((_QWORD *)a3 + 68);
    *(_DWORD *)(v15 + 36) = v18 | 6;
    *(_QWORD *)(v15 + 24) = v19;
    sub_1000FF114(a1 + 2576, (uint64_t)&v30);
    sub_1000FF8D8(a1 + 2176, 2);
    sub_1000FF078(&v30);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v42) = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gpsd,DEM,reliability too low to inject,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v30 = 67240192;
      LODWORD(v31) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,DEM,reliability too low to inject,%{public}d", &v30, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1018011C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000FF078(va);
  _Unwind_Resume(a1);
}

_QWORD *sub_101801204(uint64_t a1, uint64_t a2)
{
  return sub_10180120C((_QWORD *)(a1 + 3000), a2);
}

_QWORD *sub_10180120C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101809B2C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1018012A4(uint64_t a1, uint64_t a2)
{
  return sub_1018012AC((_QWORD *)(a1 + 3032), a2);
}

_QWORD *sub_1018012AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101809CA0(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101801344(uint64_t a1, uint64_t a2)
{
  return sub_10180134C((_QWORD *)(a1 + 3064), a2);
}

_QWORD *sub_10180134C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101809E14(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1018013E4(uint64_t a1, uint64_t a2)
{
  return sub_1018013EC((_QWORD *)(a1 + 3096), a2);
}

_QWORD *sub_1018013EC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101809F88(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101801484(uint64_t a1, uint64_t a2)
{
  return sub_10180148C((_QWORD *)(a1 + 3128), a2);
}

_QWORD *sub_10180148C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10180A0FC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101801524(uint64_t a1, uint64_t a2)
{
  return sub_10180152C((_QWORD *)(a1 + 3160), a2);
}

_QWORD *sub_10180152C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10180A270(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1018015C4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsd, enableLocationServices", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd, enableLocationServices", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::enableLocationServices()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_BYTE *)(a1 + 2336) = 1;
}

uint64_t sub_10180175C(_BYTE *a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsd, disableLocationServices", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd, disableLocationServices", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::disableLocationServices()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2336] = 0;
  return result;
}

uint64_t sub_101801900(uint64_t a1)
{
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  std::string *v10;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[10];
  uint8_t buf[4];
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  int v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,resetInfo,first_stage", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,resetInfo,first_stage", &v19, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::resetPrivacyInfo()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_100033A54(a1, 4);
  v3 = sub_100108DB0();
  v4 = *(double *)&qword_10230FB28;
  qword_10230FB28 = *(_QWORD *)&v3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v5 = v3 - v4;
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,resetInfo,second_stage,deltaSeconds,%{public}.1f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v19 = 134349056;
    *(double *)v20 = v5;
    LODWORD(v18) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,resetInfo,second_stage,deltaSeconds,%{public}.1f", &v19, v18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::resetPrivacyInfo()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (v5 >= 16.0)
  {
    dword_1023008E8 = 1;
  }
  else
  {
    v7 = dword_1023008E8++;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      LODWORD(v22[0]) = dword_1023008E8;
      WORD2(v22[0]) = 1026;
      *(_DWORD *)((char *)v22 + 6) = v7 > 4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gpsd,resetInfo,repeated,%{public}d,forceClearAllNv,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v19 = 67240448;
      *(_DWORD *)v20 = dword_1023008E8;
      *(_WORD *)&v20[4] = 1026;
      *(_DWORD *)&v20[6] = v7 > 4;
      LODWORD(v18) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,resetInfo,repeated,%{public}d,forceClearAllNv,%{public}d", &v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::resetPrivacyInfo()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    if (v7 >= 5)
    {
      dword_1023008E8 = 1;
      sub_100033A54(a1, 37);
    }
  }
  sub_1000FF07C((uint64_t)buf);
  if ((sub_100103BB0(36) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  v23 = 36;
  v25 |= 0x2000004u;
  v9 = v24;
  if (!v24)
    operator new();
  *(_DWORD *)(v24 + 20) |= 1u;
  v10 = *(std::string **)(v9 + 8);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::assign(v10, "LS off");
  ++*(_DWORD *)(a1 + 1244);
  sub_1000FF114(a1 + 2576, (uint64_t)buf);
  sub_1000FF8D8(a1 + 2176, 2);
  return sub_1000FF078(buf);
}

void sub_101801EB4()
{
  operator delete();
}

uint64_t sub_101801EF0(_BYTE *a1, int *a2, const __CFDictionary **a3)
{
  const void *v5;
  uint64_t result;
  const __CFDictionary *v7;
  BOOL v8;
  int v9;
  int v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  uint8_t v17[16];
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  char v23;

  v5 = (const void *)sub_1001DEC98(a2);
  result = CFEqual(v5, CFSTR("kCLCellularTransmitStateNotification"));
  v7 = *a3;
  if ((_DWORD)result)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    sub_1001C1D6C((int)v17, v7);
    HIBYTE(v16) = 0;
    if ((sub_1001E48E4((uint64_t)v17, (uint64_t)CFSTR("kCLCellularTransmitStateNotification"), (BOOL *)&v16 + 7) & 1) != 0)
    {
      v9 = HIBYTE(v16);
      v10 = a1[16];
      a1[16] = HIBYTE(v16);
      if (v9 != v10 && *(_BYTE *)(*(_QWORD *)a1 + 1680))
      {
        if (v9)
        {
          if (a1[17])
            sub_101808DE4((uint64_t)a1);
          else
            sub_1017FA5B0(a1);
        }
        else
        {
          sub_101808C20((uint64_t)a1);
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1001A486C(CFSTR("kCLCellularTransmitStateNotification"), (uint64_t)__p);
        v12 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#cts,key,%{public}s,notExist", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v13 = qword_1022A0078;
        sub_1001A486C(CFSTR("kCLCellularTransmitStateNotification"), (uint64_t)buf);
        if (v19 >= 0)
          v14 = buf;
        else
          v14 = *(_BYTE **)buf;
        v20 = 136446210;
        v21 = v14;
        LODWORD(v16) = 12;
        v15 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 0, "#Warning,#cts,key,%{public}s,notExist", &v20, v16);
        if (v19 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::onTelephonyNotificationCellTransmitState(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)__p)
          free(v15);
      }
    }
    return sub_10011A5A8(v17);
  }
  return result;
}

void sub_1018021A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1018021D4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _DWORD v23[2];
  __int16 v24;
  int v25;
  uint8_t buf[8];
  std::__shared_weak_count *v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,startEmergencyPreemptiveSession", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v23[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,startEmergencyPreemptiveSession", v23, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPreemptiveSession()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*(_BYTE *)(a1 + 1680))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,emergency preemptive session requested during a local client session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v23[0]) = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,emergency preemptive session requested during a local client session", v23, v22);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::startEmergencyPreemptiveSession()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  sub_1000FF154(a1 + 2576);
  sub_100197040();
  if (sub_1000FDBD0())
  {
    sub_1001E4804(buf);
    v4 = *(_BYTE *)(a1 + 2564);
    LOBYTE(v23[0]) = 0;
    if (sub_1001E4874(*(uint64_t *)buf, "b13Enable", (BOOL *)v23))
      v5 = v23[0];
    else
      v5 = v4;
    v6 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(unsigned __int8 *)(a1 + 2564);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v5;
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,b13Enable,%d,context.fB13,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v19 = *(unsigned __int8 *)(a1 + 2564);
      v23[0] = 67109376;
      v23[1] = v5;
      v24 = 1024;
      v25 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,b13Enable,%d,context.fB13,%d", v23, 14);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPreemptiveSession()", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    *(_DWORD *)(a1 + 2972) |= 0x8000000u;
    v11 = *(_QWORD *)(a1 + 2792);
    if (!v11)
      operator new();
    *(_DWORD *)(v11 + 24) |= 1u;
    *(_BYTE *)(v11 + 16) = v5;
    if (!*(_BYTE *)(a1 + 1665))
      sub_10180274C(a1);
  }
  v12 = sub_100103BB0(51);
  if ((v12 & 1) == 0)
    sub_10180AC90(v12, v13, v14);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 51;
  sub_1000FF8D8(a1 + 2176, 2);
  sub_1000336A0(a1);
}

void sub_101802710()
{
  operator delete();
}

uint64_t sub_10180274C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  HIDWORD(v8) = 0;
  v2 = *(_QWORD *)(a1 + 3192);
  if (v2)
  {
    sub_101824810(v2, (int *)&v8 + 1);
    v3 = HIDWORD(v8);
  }
  else
  {
    v3 = 0;
  }
  HIDWORD(v8) = v3 | *(_DWORD *)(a1 + 1284);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v11 = HIDWORD(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#gpsd,dis,denylistFlags,0x%{public}x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9[0] = 67240192;
    v9[1] = HIDWORD(v8);
    LODWORD(v8) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#gpsd,dis,denylistFlags,0x%{public}x", v9, v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setGnssConstellationsForEmergency()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100009A5C(a1, 0, SHIDWORD(v8));
}

uint64_t sub_101802938(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,stopEmergencyPreemptiveSession", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,stopEmergencyPreemptiveSession", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::stopEmergencyPreemptiveSession()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1000FF154(a1 + 2576);
  v3 = sub_100103BB0(52);
  if ((v3 & 1) == 0)
    sub_10180AC90(v3, v4, v5);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 52;
  sub_1000FF8D8(a1 + 2176, 2);
  sub_100197040();
  result = sub_1000FDBD0();
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 1665))
      return sub_101802B1C(a1);
  }
  return result;
}

uint64_t sub_101802B1C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 1284);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nilr,#gpsd,en,denylistFlags,0x%{public}x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = *(_DWORD *)(a1 + 1284);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#gpsd,en,denylistFlags,0x%{public}x", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setGnssConstellationsPersistentConfig()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100009A5C(a1, 0, *(_DWORD *)(a1 + 1284));
}

uint64_t sub_101802CDC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,enterEmergencyMode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,enterEmergencyMode", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::enterEmergencyMode()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1000FF154(a1 + 2576);
  v3 = sub_100103BB0(55);
  if ((v3 & 1) == 0)
    sub_10180AC90(v3, v4, v5);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 55;
  return sub_1000FF8D8(a1 + 2176, 2);
}

uint64_t sub_101802EA4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,exitEmergencyMode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,exitEmergencyMode", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::exitEmergencyMode()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1000FF154(a1 + 2576);
  v3 = sub_100103BB0(56);
  if ((v3 & 1) == 0)
    sub_10180AC90(v3, v4, v5);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 56;
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_10180306C(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,updateDeviceOperatingContext", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,updateDeviceOperatingContext", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::updateDeviceOperatingContext(const DeviceOperatingContext_t &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v5 = *a2;
  *(_WORD *)(a1 + 2564) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 2560) = v5;
}

void sub_101803210(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  std::string *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  __int128 v11;
  uint64_t v12;
  NSObject *v13;
  std::string *p_buf;
  _BOOL4 v15;
  uint64_t v16;
  std::string *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  std::string *p_p;
  _BOOL4 v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  int v28;
  std::string v29;
  std::string __p;
  __int16 v31;
  _BOOL4 v32;
  std::string buf;
  __int16 v34;
  _BOOL4 v35;

  v4 = a1 + 1684;
  v5 = sub_100CD5700(a1 + 1684);
  v6 = sub_100CD5700((uint64_t)a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278(a2, &__p);
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v9 = sub_100CD597C((uint64_t)a2);
    v10 = sub_100219C64((uint64_t)a2);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v9;
    v34 = 1024;
    v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,EMERGENCY: state,%s,inBasebandEmergencyNow,%d,inEmergency,%d,isNoneOrCleea,%d", (uint8_t *)&buf, 0x1Eu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v16 = qword_1022A0078;
    sub_100CD5278(a2, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v29;
    else
      v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
    v18 = sub_100CD597C((uint64_t)a2);
    v19 = sub_100219C64((uint64_t)a2);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v6;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v18;
    v31 = 1024;
    v32 = v19;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v16, 0, "#gpsd,EMERGENCY: state,%s,inBasebandEmergencyNow,%d,inEmergency,%d,isNoneOrCleea,%d", (const char *)&__p, 30, (_DWORD)v27, DWORD2(v27));
    v21 = v20;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v21);
    if (v21 != &buf)
      free(v21);
  }
  v11 = *(_OWORD *)a2;
  *(_DWORD *)(v4 + 16) = a2[4];
  *(_OWORD *)v4 = v11;
  if (sub_100CD597C((uint64_t)a2) && *(_BYTE *)(a1 + 1706))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, 0);
  v12 = *(_QWORD *)(a1 + 3192);
  if (v12)
  {
    v27 = *(_OWORD *)a2;
    v28 = a2[4];
    sub_1018221D4(v12, (unsigned int *)&v27);
  }
  if (v5 != v6)
  {
    if (v6)
      sub_101803758(a1);
    else
      sub_10180390C(a1);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    p_buf = &buf;
    sub_100CD5278(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v15 = sub_100CD5700((uint64_t)a2);
    if (v15)
      v15 = sub_100CD5724((uint64_t)a2);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsd,EMERGENCY: state,%s,isDefiniteBasebandEmergency,%d", (uint8_t *)&__p, 0x12u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v22 = qword_1022A0078;
    p_p = &__p;
    sub_100CD5278(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v24 = sub_100CD5700((uint64_t)a2);
    if (v24)
      v24 = sub_100CD5724((uint64_t)a2);
    LODWORD(v29.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v29.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = v24;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v22, 0, "#gpsd,EMERGENCY: state,%s,isDefiniteBasebandEmergency,%d", (const char *)&v29, 18);
    v26 = v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v26);
    if (v26 != &buf)
      free(v26);
  }
}

void sub_101803708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101803758(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,enterCellularEmergency", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,enterCellularEmergency", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::enterCellularEmergency()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (!*(_BYTE *)(a1 + 1665))
    sub_10180274C(a1);
  sub_100197040();
  result = sub_100014ADC();
  if ((_DWORD)result)
    return sub_101802CDC(a1);
  return result;
}

void sub_10180390C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,exitCellularEmergency", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,exitCellularEmergency", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::exitCellularEmergency()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100197040();
  if (sub_100014ADC())
    sub_101802EA4(a1);
  if (!*(_BYTE *)(a1 + 1665))
  {
    sub_101802B1C(a1);
    sub_101803AC8(a1);
  }
}

void sub_101803AC8(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _BYTE v10[960];
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  _DWORD v19[2];
  __int16 v20;
  _BOOL4 v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  _BOOL4 v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;

  v2 = a1 + 1684;
  v3 = sub_100CD5700(a1 + 1684) && sub_100CD5724(v2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 2424);
    *(_DWORD *)buf = 67109376;
    v23 = v5;
    v24 = 1024;
    v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#awd,fWasNilrRequestReceived,%d,isDefiniteBasebandEmergency,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v7 = *(unsigned __int8 *)(a1 + 2424);
    v19[0] = 67109376;
    v19[1] = v7;
    v20 = 1024;
    v21 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#awd,fWasNilrRequestReceived,%d,isDefiniteBasebandEmergency,%d", v19, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::reportNoNILRtoAWD()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v3 && !*(_BYTE *)(a1 + 2424))
  {
    sub_100856FE0((uint64_t)buf);
    v26 = 0;
    sub_1017E1D24((uint64_t)buf);
    if (*(_QWORD *)(a1 + 2456))
    {
      sub_101703314((uint64_t)v10, (uint64_t)buf);
      v6 = *(_QWORD *)(a1 + 2456);
      if (!v6)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(v6, v10);
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
      if (v14 < 0)
        operator delete(v13);
      if (v12 < 0)
        operator delete(v11);
    }
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    if (v30 < 0)
      operator delete(v29);
    if (v28 < 0)
      operator delete(v27);
  }
  *(_BYTE *)(a1 + 2424) = 0;
}

void sub_101803D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1008484E0((uint64_t)va);
  sub_1008484E0((uint64_t)&STACK[0x500]);
  _Unwind_Resume(a1);
}

void sub_101803DC4(uint64_t a1, signed int *a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 3192);
  if (v3)
    sub_101820A84(v3, a2, a3);
}

void sub_101803DD4(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 3192))
  {
    if ((sub_100014ADC() & 1) == 0)
      sub_1018214F8(*(_QWORD *)(a1 + 3192), a2);
  }
}

void sub_101803E18(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 3192);
  if (v1)
    sub_10182398C(v1);
}

BOOL sub_101803E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 3192);
  if (v2)
    sub_101823F5C(*(_QWORD *)(a1 + 3192), a2);
  return v2 != 0;
}

void sub_101803E58(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  NSObject *v11;
  int v12;
  int v13;
  uint8_t *v14;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;

  v5 = *a3;
  if (*a3 == 8)
  {
    *(_BYTE *)(a1 + 1707) = *a4;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int8 *)(a1 + 1707);
      *(_DWORD *)buf = 67240192;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,modemFlightMode,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = *(unsigned __int8 *)(a1 + 1707);
    LODWORD(v15[0]) = 67240192;
    HIDWORD(v15[0]) = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,modemFlightMode,%{public}d", v15, 8, v15[0]);
LABEL_23:
    v14 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v9);
    if (v14 != buf)
      free(v14);
    return;
  }
  if (v5 == 3)
  {
    sub_101804328(a1);
    return;
  }
  if (v5 == 2)
  {
    sub_10180418C(a1);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *a3;
    *(_DWORD *)buf = 67240192;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,Unhandled notification %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v13 = *a3;
    LODWORD(v15[0]) = 67240192;
    HIDWORD(v15[0]) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#Warning,Unhandled notification %{public}d", v15, 8, v15[0]);
    goto LABEL_23;
  }
}

uint64_t *sub_10180418C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,onSleep", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,onSleep", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onSleep()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_1017DDC10(a1, 2);
}

uint64_t *sub_101804328(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,onWake", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,onWake", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onWake()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_1017DDC10(a1, 3);
}

void sub_1018044C4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,onNilrBegin", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,onNilrBegin", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onNilrBegin()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  if (*(_BYTE *)(a1 + 1665))
    sub_10180274C(a1);
  sub_1017DDC10(a1, 4);
  *(_BYTE *)(a1 + 2424) = 1;
  sub_100197040();
  if ((sub_100014ADC() & 1) == 0)
    sub_1018021D4(a1);
}

uint64_t *sub_10180468C(uint64_t a1)
{
  NSObject *v2;
  uint64_t *result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,onNilrEnd", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,onNilrEnd", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onNilrEnd()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100197040();
  if ((sub_100014ADC() & 1) == 0)
    sub_101802938(a1);
  result = sub_1017DDC10(a1, 5);
  if (*(_BYTE *)(a1 + 1665))
    return (uint64_t *)sub_101802B1C(a1);
  return result;
}

uint64_t sub_10180484C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v6;
  uint64_t v7;

  v7 = a2;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v7, a3, &v6);
}

void sub_10180488C(uint64_t a1, unsigned __int16 *a2, unsigned __int8 *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,startEmergencyPositionRequest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v21[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,startEmergencyPositionRequest", v21, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPositionRequest(const gnss::Emergency::Cplane::PositionRequest &, const gnss::Emergency::Cplane::Context &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_1000FF154(a1 + 2576);
  v7 = sub_100103BB0(60);
  if ((v7 & 1) == 0)
    sub_10180AC90(v7, v8, v9);
  *(_DWORD *)(a1 + 2596) = 60;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x200000004);
  v10 = *(_DWORD **)(a1 + 2840);
  if (!v10)
    operator new();
  sub_1016B225C(a2, v10);
  *(_DWORD *)(a1 + 2976) |= 0x100u;
  v11 = *(_QWORD *)(a1 + 2896);
  if (!v11)
    operator new();
  sub_1016B2878((uint64_t)a3, v11);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D07F8);
  v12 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *a3;
    v14 = a3[1];
    *(_DWORD *)buf = 67109376;
    v25 = v13;
    v26 = 1024;
    v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gpsd,#nilr,#cplane,cplaneContext,heloEnabled,%d,cplane_early_return,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D07F8);
    v17 = *a3;
    v18 = a3[1];
    v21[0] = 67109376;
    v21[1] = v17;
    v22 = 1024;
    v23 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#gpsd,#nilr,#cplane,cplaneContext,heloEnabled,%d,cplane_early_return,%d", v21, 14);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPositionRequest(const gnss::Emergency::Cplane::PositionRequest &, const gnss::Emergency::Cplane::Context &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1000FF8D8(a1 + 2176, 2);
  sub_1000336A0(a1);
}

void sub_101804C68()
{
  operator delete();
}

uint64_t sub_101804CB0(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,stopEmergencyPositionRequest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,stopEmergencyPositionRequest", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::stopEmergencyPositionRequest(const uint32_t)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(61);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  *(_DWORD *)(a1 + 2596) = 61;
  *(_QWORD *)(a1 + 2972) |= 0x400000004uLL;
  *(_DWORD *)(a1 + 2880) = a2;
  return sub_1000FF8D8(a1 + 2176, 2);
}

uint64_t sub_101804E84(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceGpsRefTime", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setNwAssistanceGpsRefTime", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceGpsRefTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(65);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  *(_DWORD *)(a1 + 2596) = 65;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x800000004);
  v8 = *(_DWORD **)(a1 + 2848);
  if (!v8)
    operator new();
  sub_1016B236C(a2, v8);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_101805098()
{
  operator delete();
}

uint64_t sub_1018050C4(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceRefPosition", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setNwAssistanceRefPosition", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceRefPosition(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(66);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  *(_DWORD *)(a1 + 2596) = 66;
  v8 = (uint8x8_t)vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x1000000004);
  *(uint8x8_t *)(a1 + 2972) = v8;
  v9 = *(_QWORD *)(a1 + 2856);
  if (!v9)
    operator new();
  sub_1016B2504(a2, v9, v8);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_1018052D8()
{
  operator delete();
}

uint64_t sub_101805304(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceGpsEphemeris", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setNwAssistanceGpsEphemeris", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceGpsEphemeris(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(67);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  *(_DWORD *)(a1 + 2596) = 67;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x2000000004);
  v8 = *(int **)(a1 + 2864);
  if (!v8)
    operator new();
  sub_1016B273C(a2, v8);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_101805518()
{
  operator delete();
}

uint64_t sub_101805544(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceGpsAcq", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setNwAssistanceGpsAcq", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceGpsAcq(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(68);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  *(_DWORD *)(a1 + 2596) = 68;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x4000000004);
  v8 = *(_QWORD *)(a1 + 2872);
  if (!v8)
    operator new();
  sub_1016B2EA8(a2, v8);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_101805758()
{
  operator delete();
}

uint64_t sub_101805784(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,injectFt1xAssistance", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,injectFt1xAssistance", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::injectFt1xAssistance(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1000FF154(a1 + 2576);
  v5 = sub_100103BB0(69);
  if ((v5 & 1) == 0)
    sub_10180AC90(v5, v6, v7);
  *(_DWORD *)(a1 + 2596) = 69;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x8000000004);
  v8 = *(_QWORD *)(a1 + 2888);
  if (!v8)
    operator new();
  sub_1016B304C(a2, v8);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_101805998()
{
  operator delete();
}

void sub_1018059C4(_DWORD *a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v13 = a2;
    v14 = 1026;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,exceptionCategory,%{public}d,payload,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9[0] = 67240448;
    v9[1] = a2;
    v10 = 1026;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,exceptionCategory,%{public}d,payload,%{public}d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::awdLoggingOfGpsdException(int, int)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  ++a1[319];
  a1[317] = a2;
  a1[318] = a3;
}

_QWORD *sub_101805BA8(uint64_t a1, uint64_t a2)
{
  return sub_101805BB0((_QWORD *)(a1 + 3200), a2);
}

_QWORD *sub_101805BB0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10180A3E4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_101805C48(uint64_t a1, int a2, int a3, unsigned __int8 **a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  const char *v21;
  uint8_t *v22;
  _DWORD v23[2];
  __int16 v24;
  int v25;
  uint8_t buf[8];
  uint64_t v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,,inst,%d,decodeSuplInit,index,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v23[0] = 67109376;
    v23[1] = a2;
    v24 = 1024;
    v25 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#supl,,inst,%d,decodeSuplInit,index,%d", v23, 14);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::decodeSuplInit(SimInstance, gnss::Emergency::Supl::SuplInitIndex, const std::vector<uint8_t> &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  sub_1000FF154(a1 + 2576);
  v9 = sub_100103BB0(70);
  if ((v9 & 1) == 0)
    sub_10180AC90(v9, v10, v11);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 70;
  v13 = *a4;
  v12 = a4[1];
  *(_QWORD *)buf = 0;
  v27 = 0;
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v13;
      v16 = v27;
      if ((_DWORD)v27 == HIDWORD(v27))
      {
        sub_1002A19E0((uint64_t)buf, v27 + 1);
        v16 = v27;
        v14 = *(_QWORD *)buf;
      }
      LODWORD(v27) = v16 + 1;
      *(_DWORD *)(v14 + 4 * v16) = v15;
      ++v13;
    }
    while (v13 != v12);
  }
  if ((uint8_t *)(a1 + 2904) != buf)
  {
    v17 = *(_QWORD *)(a1 + 2904);
    *(_QWORD *)(a1 + 2904) = v14;
    *(_QWORD *)buf = v17;
    v18 = *(_QWORD *)(a1 + 2912);
    *(_QWORD *)(a1 + 2912) = v27;
    v27 = v18;
  }
  v19 = *(_DWORD *)(a1 + 2976);
  *(_DWORD *)(a1 + 2884) = a3;
  *(_DWORD *)(a1 + 2976) = v19 | 0x4800;
  *(_DWORD *)(a1 + 2948) = a2;
  sub_1000FF8D8(a1 + 2176, 2);
  result = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
    operator delete[]();
  return result;
}

void sub_101805F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_101805F40(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __int16 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int16 *v18;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  const char *v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  int v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  v36 = a1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,#wlan,setSuplWlanMeas", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v38) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#supl,#wlan,setSuplWlanMeas", &v38, 2);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplWlanMeas(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))
  {
    v5 = 0;
    v6 = 10;
    *(_QWORD *)&v4 = 67111424;
    v37 = v4;
    do
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D07F8);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v8 = (__int16 *)(*(_QWORD *)(a2 + 8) + v6);
        v9 = *((unsigned __int8 *)v8 - 10);
        v10 = *((unsigned __int8 *)v8 - 9);
        v11 = *((unsigned __int8 *)v8 - 8);
        v12 = *((unsigned __int8 *)v8 - 7);
        v13 = *((unsigned __int8 *)v8 - 6);
        v14 = *((unsigned __int8 *)v8 - 5);
        v15 = (unsigned __int16)*(v8 - 1);
        v16 = *v8;
        v17 = *((unsigned __int8 *)v8 - 4);
        LODWORD(v8) = *((unsigned __int8 *)v8 - 3);
        *(_DWORD *)buf = v37;
        v52 = v9;
        v53 = 1024;
        v54 = v10;
        v55 = 1024;
        v56 = v11;
        v57 = 1024;
        v58 = v12;
        v59 = 1024;
        v60 = v13;
        v61 = 1024;
        v62 = v14;
        v63 = 1024;
        v64 = v15;
        v65 = 1024;
        v66 = v16;
        v67 = 1024;
        v68 = v17;
        v69 = 1024;
        v70 = (int)v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#wlan,setSuplWlanMeas,WlanMeasurementElement,bssid,%02x:%02x:%02x:%02x:%02x:%02x,channel,%d,rssi,%d,isServingFlagPresent,%d,servingFlag,%d", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D07F8);
        v18 = (__int16 *)(*(_QWORD *)(a2 + 8) + v6);
        v19 = *((unsigned __int8 *)v18 - 9);
        v20 = *((unsigned __int8 *)v18 - 8);
        v21 = *((unsigned __int8 *)v18 - 7);
        v22 = *((unsigned __int8 *)v18 - 5);
        v23 = (unsigned __int16)*(v18 - 1);
        v24 = *v18;
        v25 = *((unsigned __int8 *)v18 - 4);
        LODWORD(v18) = *((unsigned __int8 *)v18 - 3);
        LOWORD(v39) = 1024;
        HIWORD(v39) = v19;
        LOWORD(v40) = HIWORD(v21);
        HIWORD(v40) = 1024;
        v41 = 1024;
        v42 = v22;
        v43 = 1024;
        v44 = v23;
        v45 = 1024;
        v46 = v24;
        v47 = 1024;
        v48 = v25;
        v49 = 1024;
        v50 = (int)v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,setSuplWlanMeas,WlanMeasurementElement,bssid,%02x:%02x:%02x:%02x:%02x:%02x,channel,%d,rssi,%d,isServingFlagPresent,%d,servingFlag,%d", &v38, 62, v35, v36, (_DWORD)v37, DWORD2(v37), (_DWORD)v37, v39, v20, v40);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplWlanMeas(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      ++v5;
      v6 += 12;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2) > v5);
  }
  sub_1000FF154(v36 + 2576);
  v28 = sub_100103BB0(76);
  if ((v28 & 1) == 0)
    sub_10180AC90(v28, v29, v30);
  *(_DWORD *)(v36 + 2596) = 76;
  *(int8x8_t *)(v36 + 2972) = vorr_s8(*(int8x8_t *)(v36 + 2972), (int8x8_t)0x1000000000004);
  v31 = *(int **)(v36 + 2960);
  if (!v31)
    operator new();
  sub_1016B8BA8(a2, v31);
  return sub_1000FF8D8(v36 + 2176, 2);
}

void sub_1018063F8()
{
  operator delete();
}

uint64_t sub_101806424(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, std::string *a4, std::string *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  std::string::value_type *v32;
  int v33;
  int data_low;
  std::string::size_type p_size;
  int v36;
  std::string *v37;
  uint64_t result;
  const char *v39;
  uint8_t *v40;
  int v41;
  std::string::value_type *v42;
  int v43;
  int v44;
  std::string::size_type size;
  int v46;
  std::string *v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD v55[2];
  __int16 v56;
  std::string::value_type *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  std::string::size_type v63;
  __int16 v64;
  int v65;
  __int16 v66;
  std::string *v67;
  uint8_t buf[4];
  int v69;
  __int16 v70;
  std::string::value_type *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  std::string::size_type v77;
  __int16 v78;
  int v79;
  __int16 v80;
  std::string *v81;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,setSuplInit", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v55[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#supl,setSuplInit", v55, 2);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplInit(const std::vector<uint8_t> &, const gnss::Emergency::Supl::ConnectionContext &, const gnss::Emergency::Supl::Context &, const std::string &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  sub_1000FF154(a1 + 2576);
  v11 = sub_100103BB0(71);
  if ((v11 & 1) == 0)
    sub_10180AC90(v11, v12, v13);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 71;
  v15 = *a2;
  v14 = a2[1];
  v53 = 0;
  v54 = 0;
  if (v14 == v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = *v15;
      v18 = v54;
      if ((_DWORD)v54 == HIDWORD(v54))
      {
        sub_1002A19E0((uint64_t)&v53, v54 + 1);
        v18 = v54;
        v16 = v53;
      }
      LODWORD(v54) = v18 + 1;
      *(_DWORD *)(v16 + 4 * v18) = v17;
      ++v15;
    }
    while (v15 != v14);
  }
  if ((uint64_t *)(a1 + 2904) != &v53)
  {
    v19 = *(_QWORD *)(a1 + 2904);
    *(_QWORD *)(a1 + 2904) = v16;
    v53 = v19;
    v20 = *(_QWORD *)(a1 + 2912);
    *(_QWORD *)(a1 + 2912) = v54;
    v54 = v20;
  }
  v21 = *a3;
  v22 = a3[1];
  v51 = 0;
  v52 = 0;
  if (v22 == v21)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    do
    {
      v24 = *v21;
      v25 = v52;
      if ((_DWORD)v52 == HIDWORD(v52))
      {
        sub_1002A19E0((uint64_t)&v51, v52 + 1);
        v25 = v52;
        v23 = v51;
      }
      LODWORD(v52) = v25 + 1;
      *(_DWORD *)(v23 + 4 * v25) = v24;
      ++v21;
    }
    while (v21 != v22);
  }
  if ((uint64_t *)(a1 + 2928) != &v51)
  {
    v26 = *(_QWORD *)(a1 + 2928);
    *(_QWORD *)(a1 + 2928) = v23;
    v51 = v26;
    v27 = *(_QWORD *)(a1 + 2936);
    *(_QWORD *)(a1 + 2936) = v52;
    v52 = v27;
  }
  v28 = *(_DWORD *)(a1 + 2976);
  *(_BYTE *)(a1 + 2944) = *((_BYTE *)a3 + 24);
  *(_DWORD *)(a1 + 2976) = v28 | 0xA000;
  v29 = *(_QWORD *)(a1 + 2952);
  if (!v29)
    operator new();
  sub_1016B8964(a4, v29);
  sub_1016B21F4(a5, v29);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D07F8);
  v30 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v31 = a4[3].__r_.__value_.__s.__data_[0];
    if (a4[2].__r_.__value_.__s.__data_[15] >= 0)
      v32 = &a4[1].__r_.__value_.__s.__data_[16];
    else
      v32 = (std::string::value_type *)a4[1].__r_.__value_.__r.__words[2];
    v33 = a4[1].__r_.__value_.__s.__data_[8];
    data_low = LOWORD(a4->__r_.__value_.__l.__data_);
    if (a4[1].__r_.__value_.__s.__data_[7] >= 0)
      p_size = (std::string::size_type)&a4->__r_.__value_.__l.__size_;
    else
      p_size = a4->__r_.__value_.__l.__size_;
    v36 = a4[3].__r_.__value_.__s.__data_[1];
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = a5;
    else
      v37 = (std::string *)a5->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67110659;
    v69 = v31;
    v70 = 2081;
    v71 = v32;
    v72 = 1024;
    v73 = v33;
    v74 = 1024;
    v75 = data_low;
    v76 = 2081;
    v77 = p_size;
    v78 = 1024;
    v79 = v36;
    v80 = 2080;
    v81 = v37;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#gpsd,#nilr,#supl,emergContext,heloEnabled,%d,imsi,%{private}s,supl_enable_msa,%d,suplPort,%d,suplServer,%{private}s,cplane_early_return,%d,uuid,%s", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D07F8);
    v41 = a4[3].__r_.__value_.__s.__data_[0];
    if (a4[2].__r_.__value_.__s.__data_[15] >= 0)
      v42 = &a4[1].__r_.__value_.__s.__data_[16];
    else
      v42 = (std::string::value_type *)a4[1].__r_.__value_.__r.__words[2];
    v43 = a4[1].__r_.__value_.__s.__data_[8];
    v44 = LOWORD(a4->__r_.__value_.__l.__data_);
    if (a4[1].__r_.__value_.__s.__data_[7] >= 0)
      size = (std::string::size_type)&a4->__r_.__value_.__l.__size_;
    else
      size = a4->__r_.__value_.__l.__size_;
    v46 = a4[3].__r_.__value_.__s.__data_[1];
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = a5;
    else
      v47 = (std::string *)a5->__r_.__value_.__r.__words[0];
    v55[0] = 67110659;
    v55[1] = v41;
    v56 = 2081;
    v57 = v42;
    v58 = 1024;
    v59 = v43;
    v60 = 1024;
    v61 = v44;
    v62 = 2081;
    v63 = size;
    v64 = 1024;
    v65 = v46;
    v66 = 2080;
    v67 = v47;
    LODWORD(v50) = 56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#gpsd,#nilr,#supl,emergContext,heloEnabled,%d,imsi,%{private}s,supl_enable_msa,%d,suplPort,%d,suplServer,%{private}s,cplane_early_return,%d,uuid,%s", v55, v50);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplInit(const std::vector<uint8_t> &, const gnss::Emergency::Supl::ConnectionContext &, const gnss::Emergency::Supl::Context &, const std::string &)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  sub_1000FF8D8(a1 + 2176, 2);
  if (v51)
    operator delete[]();
  result = v53;
  if (v53)
    operator delete[]();
  return result;
}

void sub_1018069FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a11)
    operator delete[]();
  if (a13)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_101806A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  sub_1000FF154(a1 + 2576);
  v4 = sub_100103BB0(73);
  if ((v4 & 1) == 0)
    sub_10180AC90(v4, v5, v6);
  *(_DWORD *)(a1 + 2596) = 73;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x40000000004);
  v7 = *(int **)(a1 + 2920);
  if (!v7)
    operator new();
  sub_1016B1F50(a2, v7);
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_101806B14()
{
  operator delete();
}

uint64_t sub_101806B38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000FF154(a1 + 2576);
  v2 = sub_100103BB0(74);
  if ((v2 & 1) == 0)
    sub_10180AC90(v2, v3, v4);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 74;
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_101806B88(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  sub_1001E4804(buf);
  LOBYTE(v11[0]) = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "b13EnableInConformance", (BOOL *)v11);
  if (LOBYTE(v11[0]))
    v3 = v2;
  else
    v3 = 0;
  v4 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      return;
  }
  else
  {
LABEL_8:
    if (!v3)
      return;
  }
  sub_100197040();
  if (sub_1000FDBD0())
  {
    sub_100197040();
    if (sub_100195F08())
    {
      if (*(_BYTE *)(a1 + 1665) && !sub_100CD5700(a1 + 1684))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = 1;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,isBand13EnabledInConformance,%{public}d,", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v11[0] = 67240192;
          v11[1] = 1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,isBand13EnabledInConformance,%{public}d,", v11, 8);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setB13InConformanceMode()", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        *(_DWORD *)(a1 + 2972) |= 0x8000000u;
        v8 = *(_QWORD *)(a1 + 2792);
        if (!v8)
          operator new();
        *(_DWORD *)(v8 + 24) |= 1u;
        *(_BYTE *)(v8 + 16) = 1;
      }
    }
  }
}

void sub_101806E24()
{
  operator delete();
}

uint64_t sub_101806E60(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  int v6;
  int v7;
  int v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, int *, int *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_101806EA4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3320);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 40);
}

_QWORD *sub_101806ED4(uint64_t a1, uint64_t a2)
{
  return sub_101806EDC((_QWORD *)(a1 + 3296), a2);
}

_QWORD *sub_101806EDC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10180A558(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101806F74(uint64_t a1, uint64_t a2)
{
  return sub_101806F7C((_QWORD *)(a1 + 3232), a2);
}

_QWORD *sub_101806F7C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10180A6CC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101807014(uint64_t a1, uint64_t a2)
{
  return sub_10180701C((_QWORD *)(a1 + 3264), a2);
}

_QWORD *sub_10180701C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10180A840(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1018070B4(uint64_t a1, int a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (a2 == 10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,EE injection failure code", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#Warning,EE injection failure code", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::performActionForFailureCodeResponse(proto::gpsd::Request::Type)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t *sub_101807240(uint64_t a1)
{
  return sub_1017DDC10(*(_QWORD *)(a1 + 32), 0);
}

void sub_10180724C(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLGnssDaemonDevice>::setTimeoutEvent(Event, double) [T = CLGnssDaemonDevice]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_101807F18(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_101807F18(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLGnssDaemonDevice>::setTimeoutEvent(Event, double) [T = CLGnssDaemonDevice]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_101807F18(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_101807F18(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLGnssDaemonDevice>::setTimeoutEvent(Event, double) [T = CLGnssDaemonDevice]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10180A9B4;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_101807F18(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_101807F18(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_101807D1C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1017DDC10(v1, 1);
  if ((sub_1001DC634() & 1) == 0 && sub_100219C64(v1 + 1684))
  {
    sub_10023A6F8(v1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v3 = *(_DWORD *)(v1 + 1284);
      *(_DWORD *)buf = 67240192;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,on build,MA blocked constellation,0x%{public}x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v4 = *(_DWORD *)(v1 + 1284);
      v7[0] = 67240192;
      v7[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,on build,MA blocked constellation,0x%{public}x", v7, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_100009A5C(v1, 0, *(_DWORD *)(v1 + 1284));
  }
  sub_1017FABAC(v1, v1 + 2344);
  sub_101806B88(v1);
}

_QWORD *sub_101807F18@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xA)
    v2 = "EventUnknown";
  else
    v2 = (&off_1021D0BC8)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_101807F44(_DWORD *a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v13 = a2;
    v14 = 1026;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,exitCategory,%{public}d,payload,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9[0] = 67240448;
    v9[1] = a2;
    v10 = 1026;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,exitCategory,%{public}d,payload,%{public}d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::awdLoggingOfExitCommand(GpsdExitCategory_t, int)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  ++a1[308];
  a1[306] = a2;
  a1[307] = a3;
}

void sub_101808128(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_101807F18(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_101807F18(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLGnssDaemonDevice>::cancelTimeoutEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_101807F18(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_101807F18(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

uint64_t *sub_1018085B8(uint64_t a1)
{
  return sub_1017DDC10(*(_QWORD *)(a1 + 32), 0);
}

uint64_t *sub_1018085C4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,handleOTADeleteRequest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleOTADeleteRequest", v13, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleOTADeleteRequest()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_BYTE *)(a1 + 1680))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsd,handleOTADeleteRequest,gnss session active,OTA reset queued", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v13[0] = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleOTADeleteRequest,gnss session active,OTA reset queued", v13, v12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleOTADeleteRequest()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return sub_1017DDC10(a1, 6);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,handleOTADeleteRequest,OTA reset initiated", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v13[0] = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handleOTADeleteRequest,OTA reset initiated", v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleOTADeleteRequest()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return (uint64_t *)sub_1017FA360(a1, 1);
  }
}

uint64_t sub_1018089C0(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD v5[5];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  v3 = objc_msgSend(objc_msgSend(*(id *)(a2 + 1784), "silo"), "newTimer");
  *(_QWORD *)(a1 + 8) = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101808A38;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v3, "setHandler:", v5);
  return a1;
}

void sub_101808A38(uint64_t a1)
{
  sub_101808A40(*(_BYTE **)(a1 + 32));
}

void sub_101808A40(_BYTE *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#cts,timer,debounceTimeout", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#cts,timer,debounceTimeout", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::onDebounceTimeout()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_101808DE4((uint64_t)a1);
  if (!a1[16])
    sub_1017FA5B0(a1);
}

uint64_t sub_101808BE8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "invalidate");

  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

id sub_101808C20(uint64_t a1)
{
  NSObject *v2;
  id result;
  char *v4;
  int v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    v8 = 0x4000000000000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#cts,timer,setDebounce,interval,%{public}.1f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = 134349056;
    v6 = 0x4000000000000000;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#cts,timer,setDebounce,interval,%{public}.1f", &v5, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::setDebouncedFalling()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  result = objc_msgSend(*(id *)(a1 + 8), "setNextFireDelay:", 2.0);
  *(_BYTE *)(a1 + 17) = 1;
  return result;
}

id sub_101808DE4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id result;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67240192;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#cts,timer,clearDebounce,state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = *(unsigned __int8 *)(a1 + 16);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#cts,timer,clearDebounce,state,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::clearDebouncedFalling()", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  result = objc_msgSend(*(id *)(a1 + 8), "setNextFireDelay:", 1.79769313e308);
  *(_BYTE *)(a1 + 17) = 0;
  return result;
}

void sub_101808FA8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101808FD4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101809000(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10180902C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10180905C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101809084(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1018090C4(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_10180B6B0();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_101809248(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_101809288(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101808BE8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1018092C4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10180932C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_10180932C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_101808128(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1018093A8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101820560();
    operator delete();
  }
  return result;
}

void sub_1018093E4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = (uint64_t *)a2[24];
    if (v3 == a2 + 21)
    {
      v4 = 4;
      v3 = a2 + 21;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    sub_10171C088(a2, 0);
    operator delete();
  }
}

void sub_10180945C()
{
  operator delete();
}

_QWORD *sub_101809470(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0888;
  result[1] = v3;
  return result;
}

uint64_t sub_1018094A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0888;
  a2[1] = v2;
  return result;
}

uint64_t sub_1018094C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018094FC()
{
}

void sub_10180950C()
{
  operator delete();
}

_QWORD *sub_101809520(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0918;
  result[1] = v3;
  return result;
}

uint64_t sub_101809554(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0918;
  a2[1] = v2;
  return result;
}

uint64_t sub_101809570(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018095AC()
{
}

void sub_1018095BC()
{
  operator delete();
}

_QWORD *sub_1018095D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D09A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101809604(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D09A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101809620(uint64_t a1)
{
  return sub_1017F5704(*(_QWORD *)(a1 + 8));
}

uint64_t sub_101809628(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101809664()
{
}

void sub_101809674()
{
  operator delete();
}

_QWORD *sub_101809688(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0A28;
  result[1] = v3;
  return result;
}

uint64_t sub_1018096BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0A28;
  a2[1] = v2;
  return result;
}

uint64_t sub_1018096D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  _BYTE v11[24];
  _BYTE *v12;
  uint8_t buf[1640];

  sub_10180994C((uint64_t)v11, a2);
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "NilrDbg,ExecWrapper", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,ExecWrapper", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "auto CLGnssDaemonDevice::CLGnssDaemonDevice(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)::(anonymous class)::operator()(std::function<void (CLGnssDaemonDevice &)>) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!v12)
    sub_10025FD1C();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v12 + 48))(v12, v3);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_11;
  }
  if (v12)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return 1;
}

void sub_1018098C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == &a13)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101809904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101809940()
{
}

uint64_t sub_10180994C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1018099B4()
{
  operator delete();
}

_QWORD *sub_1018099C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0AB8;
  result[1] = v3;
  return result;
}

uint64_t sub_1018099FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0AB8;
  a2[1] = v2;
  return result;
}

void sub_101809A18(uint64_t a1, unsigned int *a2, unsigned __int8 **a3)
{
  sub_1017FDC0C(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t sub_101809A28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101809A64()
{
}

void sub_101809A74()
{
  operator delete();
}

_QWORD *sub_101809A88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0B48;
  result[1] = v3;
  return result;
}

uint64_t sub_101809ABC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0B48;
  a2[1] = v2;
  return result;
}

uint64_t sub_101809AD8(uint64_t a1, unsigned int *a2)
{
  return sub_1017FE7D4(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_101809AE4(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021D0BB8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101809B20()
{
  return &off_1021D0BB8;
}

_QWORD *sub_101809B2C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101809C94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_101809CA0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101809E08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_101809E14(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101809F7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_101809F88(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A0F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10180A0FC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A264(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10180A270(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A3D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10180A3E4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A54C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10180A558(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A6C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10180A6CC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A834(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10180A840(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10180A9A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10180A9B4(uint64_t a1)
{
  return sub_1000FF8D8(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10180A9C4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5888, a4);
}

void sub_10180A9CC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_10085FC2C();
  if (!v1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#gpsd,null fCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "#gpsd,null fCallbackQueue", "{\"msg%{public}.0s\":\"#gpsd,null fCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"#gpsd,null fCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

#error "10180AB94: call analysis failed (funcsize=74)"

void sub_10180AC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10180A9C4("set_type", "GpsdProtocol.pb.h", a3, "::proto::gpsd::Request_Type_IsValid(value)");
}

#error "10180AD28: call analysis failed (funcsize=72)"

#error "10180AE98: call analysis failed (funcsize=74)"

#error "10180B008: call analysis failed (funcsize=72)"

#error "10180B174: call analysis failed (funcsize=72)"

#error "10180B2E0: call analysis failed (funcsize=72)"

#error "10180B44C: call analysis failed (funcsize=72)"

#error "10180B5B8: call analysis failed (funcsize=72)"

void sub_10180B6B0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_10085FC2C();
  if (!v1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_10180B800()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10180B89C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10180B8B4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10180B940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10180B958()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CDE6B4;
      v1[3] = unk_101CDE6C4;
      v1[4] = xmmword_101CDE6D4;
      v1[0] = xmmword_101CDE694;
      v1[1] = unk_101CDE6A4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10180BA2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10180BA44()
{
  sub_1015A2E04(&qword_10230FB00, ".lzma");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FB00, (void *)&_mh_execute_header);
}

void sub_10180BA88(uint64_t a1)
{
  void *__p;
  uint8_t buf[8];

  sub_1015A2E04(&__p, "CLCplane");
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_10180BE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v22 = *(_QWORD **)(v16 + 1696);
  if (v22 == v20)
  {
    v23 = 4;
    v22 = v20;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:
  sub_1008484E0(v19);
  v24 = *v18;
  *v18 = 0;
  if (v24)
    sub_101699B48((uint64_t)v18, v24);
  v25 = *(_QWORD **)(v16 + 160);
  if (v25 == v17)
  {
    v26 = 4;
    v25 = v17;
  }
  else
  {
    if (!v25)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_13:
  sub_101812AAC(v16);
  _Unwind_Resume(a1);
}

uint64_t **sub_10180BF3C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *v20[2];
  char v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  void **v27;
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  _BYTE *v32;

  v22 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101812BA0(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021D0C58);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 3)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021D0D48)[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v27) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v29 = 1024;
    v30 = v7;
    v31 = 2080;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v27) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    sub_1018124E4(v7, v20);
    if (v21 >= 0)
      v17 = v20;
    else
      v17 = (void **)v20[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v24 = 1024;
    v25 = v7;
    v26 = 2080;
    v27 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v20[0]);
    v19 = v18;
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaControlPlane>::setStateHandler(State, StateHandler) [T = CLEurekaControlPlane]", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)buf = &v22;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_10180C224(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  void **v7;
  NSObject *v8;
  void **v9;
  _BOOL4 v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void **v21;

  result = 0;
  switch(a2)
  {
    case 0u:
      sub_10180DC3C(a1, 11);
      sub_10180DC3C(a1, 12);
      if (*(_DWORD *)(a1 + 332) != 26)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          sub_1015A2E04(__p, "Enter");
          if (v15 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          *(_DWORD *)buf = 68289283;
          v17 = 0;
          v18 = 2082;
          v19 = "";
          v20 = 2081;
          v21 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Cplane calling printSessionStatus from Idle State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
        sub_10180E0F8(a1);
      }
      sub_1017E2B94(a1 + 184);
      return 0;
    case 2u:
      return 1;
    case 3u:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v5 = qword_1022A0088;
      v10 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v10)
        return result;
      sub_1015A2E04(__p, "EmergencyExit");
      if (v15 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      goto LABEL_8;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xBu:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v5 = qword_1022A0088;
      v6 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v6)
        return result;
      sub_10180E0CC(a2, __p);
      if (v15 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
LABEL_8:
      *(_DWORD *)buf = 68289283;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2081;
      v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Cplane unexpected event in Idle State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (v15 < 0)
        operator delete(__p[0]);
      break;
    case 0xDu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,Summary stats received in Idle state", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,Summary stats received in Idle state", __p, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_Idle(CLEurekaControlPlane::Event)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
      break;
    default:
      return result;
  }
  return 0;
}

uint64_t sub_10180C69C(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  NSObject *v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  CFAbsoluteTime Current;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;

  result = 1;
  switch(a2)
  {
    case 0u:
      sub_10180DC3C(a1, 11);
      sub_10180DC3C(a1, 12);
      if (*(_DWORD *)(a1 + 332) != 26)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          sub_1015A2E04(__p, "Enter");
          if (v17 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          *(_DWORD *)buf = 68289283;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2081;
          v23 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Cplane calling printSessionStatus from Ready State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        sub_10180E0F8(a1);
      }
      sub_1017E2B94(a1 + 184);
      goto LABEL_41;
    case 3u:
      return *(unsigned __int8 *)(a1 + 128);
    case 4u:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane Comm Begin/Open event received, expecting nilr shortly\"}", buf, 0x12u);
      }
      return 2;
    case 5u:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning #Cplane NILR received before assistance was received\"}", buf, 0x12u);
      }
      Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 192) = Current;
      *(CFAbsoluteTime *)(a1 + 1736) = Current;
      return 2;
    case 6u:
    case 8u:
    case 0xBu:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        sub_10180E0CC(a2, __p);
        v6 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289283;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2081;
        v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning #Cplane unexpected event in Ready State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_41;
    case 7u:
    case 9u:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane Failure/Abort received from previous session\"}", buf, 0x12u);
      }
      goto LABEL_41;
    case 0xDu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,Summary stats received in Ready state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0C58);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,Summary stats received in Ready state", __p, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_Ready(CLEurekaControlPlane::Event)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
LABEL_41:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10180CC14(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  result = 2;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 176);
      *(_BYTE *)(a1 + 1124) = *(_BYTE *)(a1 + 129);
      sub_10180E440(a1, 12, 120.0);
      goto LABEL_26;
    case 2:
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 176);
      return result;
    case 3:
      if (*(_DWORD *)(a1 + 332) != 26)
        goto LABEL_28;
      return 3;
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane NILR Session is active\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 192) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1864) = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 192);
      v5 = 263;
      goto LABEL_16;
    case 6:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      sub_10180DC3C(a1, 11);
      *(_QWORD *)(a1 + 1744) = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(a1 + 332) = 2;
      goto LABEL_13;
    case 7:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      sub_10180DC3C(a1, 11);
      *(_DWORD *)(a1 + 332) = 6;
      *(CFAbsoluteTime *)(a1 + 1744) = CFAbsoluteTimeGetCurrent();
LABEL_13:
      *(_DWORD *)(a1 + 1792) |= 0x18u;
      goto LABEL_35;
    case 8:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      sub_10180DC3C(a1, 11);
      v7 = *(double *)(a1 + 192);
      v6 = *(double *)(a1 + 200);
      *(double *)(a1 + 1744) = v6;
      *(_DWORD *)(a1 + 332) = 0;
      *(double *)(a1 + 256) = v6 - v7;
      *(_BYTE *)(a1 + 224) = 1;
      v5 = *(_DWORD *)(a1 + 1792) | 0x30;
      goto LABEL_16;
    case 9:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1744) = CFAbsoluteTimeGetCurrent();
      sub_10180DC3C(a1, 11);
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)(a1 + 332) = 1;
      v5 = *(_DWORD *)(a1 + 1792) | 0x80;
LABEL_16:
      *(_DWORD *)(a1 + 1792) = v5;
      goto LABEL_26;
    case 10:
      sub_10180E440(a1, 11, 3.0);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v8 = qword_1022A0088;
      if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        goto LABEL_26;
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v9 = "{\"msg%{public}.0s\":\"#Cplane Session in Progress\"}";
      goto LABEL_25;
    case 11:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)(a1 + 332) = 2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v8 = qword_1022A0088;
      if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        goto LABEL_26;
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v9 = "{\"msg%{public}.0s\":\"#warning #Cplane Session in Progress not received for 3 secs, timing out\"}";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x12u);
LABEL_26:
      result = 2;
      break;
    case 12:
      if (*(_BYTE *)(a1 + 129))
        goto LABEL_35;
LABEL_28:
      result = *(unsigned __int8 *)(a1 + 128);
      break;
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,Summary stats received in Session state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0C58);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,Summary stats received in Session state", v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_Session(CLEurekaControlPlane::Event)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      sub_10180EF10(a1);
LABEL_35:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10180D12C(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  CFAbsoluteTime Current;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  _WORD v23[8];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;

  result = 3;
  switch(a2)
  {
    case 0:
      sub_10180E440(a1, 12, 120.0);
      return 3;
    case 2:
      return 1;
    case 4:
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane comm event in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v5 = qword_1022A0088;
      if (!os_signpost_enabled((os_log_t)qword_1022A0088))
        return 3;
      *(_DWORD *)buf = 68289026;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v6 = "#warning #Cplane control plane comm event in Lingering state, spurious event received";
      v7 = "{\"msg%{public}.0s\":\"#warning #Cplane control plane comm event in Lingering state, spurious event received\"}";
      break;
    case 6:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane timeout in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v9 = qword_1022A0088;
      if (os_signpost_enabled((os_log_t)qword_1022A0088))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane timeout in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane timeout in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      v10 = 2;
      goto LABEL_42;
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr failure in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v12 = qword_1022A0088;
      if (os_signpost_enabled((os_log_t)qword_1022A0088))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane nilr failure in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr failure in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      v10 = 6;
      goto LABEL_42;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v13 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr success in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v14 = qword_1022A0088;
      if (os_signpost_enabled((os_log_t)qword_1022A0088))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane nilr success in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr success in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 200) = Current;
      *(_DWORD *)(a1 + 332) = 0;
      *(CFAbsoluteTime *)(a1 + 256) = Current - *(double *)(a1 + 192);
      *(_BYTE *)(a1 + 224) = 1;
      return 3;
    case 9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr abort in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v17 = qword_1022A0088;
      if (os_signpost_enabled((os_log_t)qword_1022A0088))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane nilr abort in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr abort in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      v10 = 1;
LABEL_42:
      *(_DWORD *)(a1 + 332) = v10;
      return 3;
    case 10:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane Session in Progress in Lingering state\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v5 = qword_1022A0088;
      if (!os_signpost_enabled((os_log_t)qword_1022A0088))
        return 3;
      *(_DWORD *)buf = 68289026;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v6 = "#warning #Cplane Session in Progress in Lingering state";
      v7 = "{\"msg%{public}.0s\":\"#warning #Cplane Session in Progress in Lingering state\"}";
      break;
    case 11:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr no progress timeout in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v5 = qword_1022A0088;
      if (!os_signpost_enabled((os_log_t)qword_1022A0088))
        return 3;
      *(_DWORD *)buf = 68289026;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v6 = "#warning #Cplane control plane nilr no progress timeout in Lingering state, spurious event received";
      v7 = "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr no progress timeout in Lingering state, spurious e"
           "vent received\"}";
      break;
    case 12:
      *(_DWORD *)(a1 + 332) = 26;
      return *(unsigned __int8 *)(a1 + 129);
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#warning,#Cplane,#ca,Summary stats received in LingeringSession state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0C58);
        v23[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#warning,#Cplane,#ca,Summary stats received in LingeringSession state", v23, 2);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_LingeringSession(CLEurekaControlPlane::Event)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      sub_10180EF10(a1);
      return 1;
    default:
      return result;
  }
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v6, v7, buf, 0x12u);
  return 3;
}

uint64_t sub_10180DB24(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 1800) = 0;
  v2 = *(_QWORD **)(a1 + 1728);
  if (v2 == (_QWORD *)(a1 + 1704))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 1704);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 1696);
  if (v4 == (_QWORD *)(a1 + 1672))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 1672);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  if (*(char *)(a1 + 1383) < 0)
    operator delete(*(void **)(a1 + 1360));
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  if (*(char *)(a1 + 1191) < 0)
    operator delete(*(void **)(a1 + 1168));
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v6)
    sub_101699B48(a1 + 168, v6);
  v7 = *(_QWORD **)(a1 + 160);
  if (v7 == (_QWORD *)(a1 + 136))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 136);
    goto LABEL_25;
  }
  if (v7)
  {
    v8 = 5;
LABEL_25:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return sub_101812AAC(a1);
}

void sub_10180DC3C(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_10180E0CC(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_10180E0CC(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaControlPlane>::cancelTimeoutEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_10180E0CC(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_10180E0CC(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

_QWORD *sub_10180E0CC@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xD)
    v2 = "EventUnknown";
  else
    v2 = (&off_1021D0CD8)[a1];
  return sub_1015A2E04(a2, v2);
}

double sub_10180E0F8(uint64_t a1)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  int v22;
  _BYTE v23[960];
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  uint64_t buf;
  __int16 v39;
  const char *v40;
  __int16 v41;
  void **v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  __int16 v55;
  void **v56;
  __int16 v57;
  void **v58;
  __int16 v59;
  uint64_t v60;

  v2 = (std::string *)(a1 + 184);
  *(_DWORD *)(a1 + 272) = 1;
  v3 = *(_DWORD *)(a1 + 376);
  v4 = sub_1001DC538();
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v6 = sub_1016911FC((_QWORD *)(a1 + 168), v5);
  sub_1016FF42C(v2, v6);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D0C38);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_1017E1C48(*(_DWORD *)(a1 + 332), v36);
    if (v37 >= 0)
      v8 = v36;
    else
      v8 = (void **)v36[0];
    v10 = *(_QWORD *)(a1 + 208);
    v9 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 232);
    v11 = *(_QWORD *)(a1 + 240);
    v21 = *(_QWORD *)(a1 + 248);
    v22 = *(_DWORD *)(a1 + 264);
    sub_1017E1BC4(*(_DWORD *)(a1 + 268), v34);
    v13 = v35;
    v14 = (void **)v34[0];
    sub_1017E1C1C(*(_DWORD *)(a1 + 276), __p);
    v15 = v34;
    v16 = (void **)__p[0];
    if (v13 < 0)
      v15 = v14;
    v17 = *(_QWORD *)(a1 + 256);
    if (v33 >= 0)
      v16 = __p;
    buf = 68291587;
    v39 = 2082;
    v40 = "";
    v41 = 2081;
    v42 = v8;
    v43 = 2049;
    v44 = v10;
    v45 = 2049;
    v46 = v9;
    v47 = 2049;
    v48 = v12;
    v49 = 2050;
    v50 = v11;
    v51 = 2050;
    v52 = v21;
    v53 = 1026;
    v54 = v22;
    v55 = 2082;
    v56 = v15;
    v57 = 2082;
    v58 = v16;
    v59 = 2049;
    v60 = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane,Summary Status\", \"status\":%{private, location:escape_only}s, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"acc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"source\":%{public}d, \"method\":%{public, location:escape_only}s, \"protocol\":%{public, location:escape_only}s, \"ttf\":\"%{private}f\"}", (uint8_t *)&buf, 0x72u);
    if (v33 < 0)
      operator delete(__p[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
  }
  sub_1017E1D24((uint64_t)v2);
  if (*(_QWORD *)(a1 + 1696))
  {
    sub_101703314((uint64_t)v23, (uint64_t)v2);
    v18 = *(_QWORD *)(a1 + 1696);
    if (!v18)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 48))(v18, v23);
    if (v31 < 0)
      operator delete(v30);
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26);
    if (v25 < 0)
      operator delete(v24);
  }
  v19 = *(_QWORD *)(a1 + 1728);
  if (v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, a1 + 1736);
  *(_QWORD *)(a1 + 1736) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1744) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1776) = 0xBFF0000000000000;
  result = NAN;
  *(_QWORD *)(a1 + 1784) = -1;
  *(_DWORD *)(a1 + 1792) = 0;
  return result;
}

void sub_10180E3F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (*(char *)(v1 - 225) < 0)
    operator delete(*(void **)(v1 - 248));
  _Unwind_Resume(a1);
}

void sub_10180E440(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaControlPlane>::setTimeoutEvent(Event, double) [T = CLEurekaControlPlane]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_10180E0CC(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_10180E0CC(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaControlPlane>::setTimeoutEvent(Event, double) [T = CLEurekaControlPlane]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0C58);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_10180E0CC(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0C58);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_10180E0CC(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaControlPlane>::setTimeoutEvent(Event, double) [T = CLEurekaControlPlane]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101812B90;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_10180E0CC(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_10180E0CC(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_10180EF10(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t i;
  void *v20;
  double v21;
  void *v22;
  long double v23;
  void *v24;
  void *v25;
  const char *v26;
  uint8_t *v27;
  void *__p[2];
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31[3];
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35[3];
  char *v36;
  _BYTE *v37;
  char *v38;
  void ***v39;
  char v40;
  uint8_t buf[8];
  _DWORD v42[6];
  int v43;
  _DWORD v44[132];
  uint64_t v45;
  int v46;
  int v47;
  char v48;
  int v49;
  uint64_t v50;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,submitSessionStatsToCA", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    LOWORD(v36) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,submitSessionStatsToCA", &v36, 2);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::submitSessionStatsToCA()", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v3 = sqrt(*(double *)(a1 + 1480) * *(double *)(a1 + 1480) + *(double *)(a1 + 1472) * *(double *)(a1 + 1472));
  *(double *)(a1 + 1488) = v3;
  v4 = *(_DWORD *)(a1 + 1508);
  *(_DWORD *)buf = 44;
  v42[0] = v4;
  v5 = (int)*(double *)(a1 + 1512);
  v43 = 0;
  v44[0] = 45;
  v44[2] = v5;
  v44[8] = 0;
  v44[10] = 46;
  v44[12] = 1;
  v6 = *(_DWORD *)(a1 + 1432);
  v44[18] = 0;
  v44[20] = 47;
  v44[22] = v6;
  v44[28] = 0;
  v7 = *(_DWORD *)(a1 + 176);
  v44[30] = 79;
  v44[32] = v7;
  v8 = *(double *)(a1 + 1440);
  v44[38] = 0;
  v44[40] = 68;
  *(float *)&v44[42] = v8;
  v9 = *(double *)(a1 + 1448);
  v44[48] = 4;
  v44[50] = 69;
  *(float *)&v44[52] = v9;
  v44[58] = 4;
  v44[60] = 70;
  v44[62] = (int)v3;
  v44[68] = 0;
  v10 = *(unsigned __int8 *)(a1 + 1504);
  v44[70] = 71;
  v44[72] = v10;
  v44[78] = 0;
  if (*(_BYTE *)(a1 + 1521))
    v11 = 1;
  else
    v11 = 2;
  v44[80] = 63;
  v44[82] = v11;
  v44[88] = 0;
  v12 = *(_QWORD *)(a1 + 1616);
  if ((v12 & 0x20) != 0)
    v13 = 1;
  else
    v13 = 2;
  v44[90] = 74;
  v44[92] = v13;
  v44[98] = 0;
  if ((v12 & 0x10) != 0)
    v14 = 1;
  else
    v14 = 2;
  v44[100] = 67;
  v44[102] = v14;
  v44[108] = 0;
  if ((v12 & 4) != 0)
    v15 = 1;
  else
    v15 = 2;
  v44[110] = 75;
  v44[112] = v15;
  v44[118] = 0;
  v16 = *(_QWORD *)(a1 + 1856);
  if (v16 == -1)
    v17 = 2;
  else
    v17 = 1;
  v44[120] = 27;
  v44[122] = v17;
  v44[128] = 0;
  v44[130] = 28;
  v45 = v16;
  v46 = 2;
  v18 = *(_BYTE *)(a1 + 129);
  v47 = 83;
  v48 = v18;
  v49 = 7;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v32 = (void **)&v36;
  LOBYTE(v33) = 0;
  v36 = (char *)operator new(0x280uLL);
  v37 = v36;
  v38 = v36 + 640;
  v37 = (_BYTE *)sub_1006AB40C((uint64_t)&v38, (uint64_t)buf, (uint64_t)&v50, (uint64_t)v36);
  for (i = 608; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v20 = *(void **)(a1 + 1800);
  memset(v35, 0, sizeof(v35));
  sub_1006AB68C(v35, (uint64_t)v36, (uint64_t)v37, 0xCCCCCCCCCCCCCCCDLL * ((v37 - v36) >> 3));
  objc_msgSend(v20, "setMeasurements:", sub_1006A7590(v35));
  *(_QWORD *)buf = v35;
  sub_1006AB5A0((void ***)buf);
  if (*(_DWORD *)(a1 + 1432) == 1)
  {
    v21 = *(double *)(a1 + 1872) - *(double *)(a1 + 1864);
    *(_DWORD *)buf = 42;
    v42[0] = (int)v21;
    v43 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v39 = &v32;
    v40 = 0;
    v32 = (void **)operator new(0x28uLL);
    v33 = (uint64_t)v32;
    v34 = v32 + 5;
    v33 = sub_1006AB40C((uint64_t)&v34, (uint64_t)buf, (uint64_t)v44, (uint64_t)v32);
    sub_1001F8644((uint64_t)v42);
    v22 = *(void **)(a1 + 1800);
    memset(v31, 0, sizeof(v31));
    sub_1006AB68C(v31, (uint64_t)v32, v33, 0xCCCCCCCCCCCCCCCDLL * ((v33 - (uint64_t)v32) >> 3));
    objc_msgSend(v22, "setMeasurements:", sub_1006A7590(v31));
    *(_QWORD *)buf = v31;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v32;
    sub_1006AB5A0((void ***)buf);
  }
  if (sub_10011CE88(*(double *)(a1 + 1440), *(double *)(a1 + 1448))
    && !sub_10011CE64(*(double *)(a1 + 1440), *(double *)(a1 + 1448))
    && sub_10011CE88(*(double *)(a1 + 1536), *(double *)(a1 + 1544))
    && !sub_10011CE64(*(double *)(a1 + 1536), *(double *)(a1 + 1544)))
  {
    v23 = sub_10011E634((double *)(a1 + 1816), *(double *)(a1 + 1440), *(double *)(a1 + 1448), *(double *)(a1 + 1536), *(double *)(a1 + 1544), 0.0);
    *(_DWORD *)buf = 72;
    v42[0] = (int)v23;
    v43 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v39 = &v32;
    v40 = 0;
    v32 = (void **)operator new(0x28uLL);
    v33 = (uint64_t)v32;
    v34 = v32 + 5;
    v33 = sub_1006AB40C((uint64_t)&v34, (uint64_t)buf, (uint64_t)v44, (uint64_t)v32);
    sub_1001F8644((uint64_t)v42);
    v24 = *(void **)(a1 + 1800);
    memset(v30, 0, sizeof(v30));
    sub_1006AB68C(v30, (uint64_t)v32, v33, 0xCCCCCCCCCCCCCCCDLL * ((v33 - (uint64_t)v32) >> 3));
    objc_msgSend(v24, "setMeasurements:", sub_1006A7590(v30));
    *(_QWORD *)buf = v30;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v32;
    sub_1006AB5A0((void ***)buf);
  }
  v25 = *(void **)(a1 + 1800);
  if (byte_1023111F7 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_1023111E0, *((unint64_t *)&xmmword_1023111E0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1023111E0;
    v29 = unk_1023111F0;
  }
  objc_msgSend(v25, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 1856) = -1;
  *(_QWORD *)(a1 + 1864) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1872) = 0xBFF0000000000000;
  sub_1017ED82C(a1 + 1424);
  *(_QWORD *)buf = &v36;
  sub_1006AB5A0((void ***)buf);
}

void sub_10180F574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char *a36)
{
  a36 = &a24;
  sub_1006AB5A0((void ***)&a36);
  a36 = &a30;
  sub_1006AB5A0((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_10180F658(uint64_t a1, unsigned int *a2)
{
  uint64_t result;

  result = sub_100217A98(a2);
  *(_DWORD *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 376) = result;
  return result;
}

void sub_10180F684(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v3 = *(unsigned __int8 *)(a1 + 129);
  *(_BYTE *)(a1 + 129) = sub_100CD5700(a2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D0C38);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 129);
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane\", \"Emergency\":%{public}d}", (uint8_t *)v7, 0x18u);
  }
  if (v3)
  {
    if (*(_BYTE *)(a1 + 129))
      return;
    v6 = 3;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 129))
      return;
    v6 = 2;
  }
  sub_10180F7A8(a1, v6);
}

uint64_t sub_10180F7A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t *v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  void **v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE *v95;
  _BYTE *v96;
  void **v97;
  char *v98;
  char *v99;
  const char *v100;
  const char *v101;
  int v102;
  void *v103[2];
  char v104;
  unsigned int v105;
  _BYTE __p[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  void **v110;
  _BYTE buf[12];
  __int16 v112;
  _BYTE *v113;
  __int16 v114;
  _BYTE *v115;
  _BYTE v116[12];
  __int16 v117;
  _BYTE *v118;
  char v119;

  ++*(_DWORD *)(a1 + 88);
  v105 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_101812D10();
    goto LABEL_169;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_101812E78(qword_1022A0070 == -1);
    goto LABEL_169;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(int *)(a1 + 4);
    if (v8 > 3)
      v9 = "StateUnknown";
    else
      v9 = (&off_1021D0D48)[v8];
    sub_1015A2E04(__p, v9);
    v10 = SHIBYTE(v109);
    v11 = *(_BYTE **)__p;
    sub_10180E0CC(a2, v116);
    v12 = __p;
    if (v10 < 0)
      v12 = v11;
    if (v119 >= 0)
      v13 = v116;
    else
      v13 = *(_BYTE **)v116;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v112 = 2080;
    v113 = v12;
    v114 = 2080;
    v115 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v119 < 0)
      operator delete(*(void **)v116);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v63 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v63 = (_QWORD *)*v63;
    v64 = qword_1022A0078;
    v65 = *(unsigned __int8 *)(a1 + 120);
    sub_1018124E4(*(_DWORD *)(a1 + 4), v116);
    v66 = v119;
    v67 = *(_BYTE **)v116;
    sub_10180E0CC(a2, v103);
    v68 = v116;
    if (v66 < 0)
      v68 = v67;
    if (v104 >= 0)
      v69 = v103;
    else
      v69 = (void **)v103[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v63;
    v107 = 2080;
    v108 = v68;
    v109 = 2080;
    v110 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, v65, "%scurrent_state,%s,event,%s", __p, 32, v101);
    v71 = v70;
    if (v104 < 0)
      operator delete(v103[0]);
    v3 = &qword_1022A0000;
    if (v119 < 0)
      operator delete(*(void **)v116);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (uint64_t **)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = a1 + 16;
  do
  {
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (!v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_101812FE8();
    goto LABEL_169;
  }
  v22 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v23 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v21 >> 1));
  if ((v21 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v22);
  v24 = v22(v23, a2);
  v25 = v24;
  v102 = v24;
  if (a2 <= 1 && (_DWORD)v24 != v105)
  {
    sub_101813420();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v78 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v78 = (_QWORD *)*v78;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v28 = qword_1022A0078;
  v29 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v29))
  {
    v30 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v30 = (_QWORD *)*v30;
    if (v25 > 3)
      v31 = "StateUnknown";
    else
      v31 = (&off_1021D0D48)[(int)v25];
    sub_1015A2E04(buf, v31);
    if (v114 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v107 = 2080;
    v108 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v114) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    sub_1018124E4(v25, __p);
    if (v109 >= 0)
      v75 = __p;
    else
      v75 = *(_BYTE **)__p;
    *(_DWORD *)v116 = 136315394;
    *(_QWORD *)&v116[4] = v72;
    v117 = 2080;
    v118 = v75;
    LODWORD(v100) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v116, v100);
    v77 = v76;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  if ((_DWORD)v25 != v105)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v35 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v35 = (_QWORD *)*v35;
      if (v105 > 3)
        v36 = "StateUnknown";
      else
        v36 = (&off_1021D0D48)[v105];
      sub_1015A2E04(__p, v36);
      v37 = v3;
      v38 = SHIBYTE(v109);
      v39 = *(_BYTE **)__p;
      sub_1015A2E04(v116, "Exit");
      v40 = __p;
      if (v38 < 0)
        v40 = v39;
      if (v119 >= 0)
        v41 = v116;
      else
        v41 = *(_BYTE **)v116;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v35;
      v112 = 2080;
      v113 = v40;
      v114 = 2080;
      v115 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v119 < 0)
        operator delete(*(void **)v116);
      v3 = v37;
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v81 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v81 = (_QWORD *)*v81;
      v82 = qword_1022A0078;
      v83 = *(unsigned __int8 *)(a1 + 120);
      sub_1018124E4(v105, v116);
      v84 = v3;
      v85 = v119;
      v86 = *(_BYTE **)v116;
      sub_1015A2E04(v103, "Exit");
      v87 = v116;
      if (v85 < 0)
        v87 = v86;
      if (v104 >= 0)
        v88 = v103;
      else
        v88 = (void **)v103[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v81;
      v107 = 2080;
      v108 = v87;
      v109 = 2080;
      v110 = v88;
      LODWORD(v100) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, v83, "%soldState,%s,event,%s", __p, v100, (const char *)(a1 + 8));
      v90 = v89;
      if (v104 < 0)
        operator delete(v103[0]);
      v3 = v84;
      v15 = (uint64_t **)v101;
      if (v119 < 0)
        operator delete(*(void **)v116);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v90);
      if (v90 != buf)
        free(v90);
    }
    v42 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v105;
    v43 = sub_1000610B4(v15, (int *)&v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v44 = v43[5];
    v45 = (uint64_t)v43[6];
    v46 = (_QWORD *)(v42 + (v45 >> 1));
    if ((v45 & 1) != 0)
      v44 = *(uint64_t **)(*v46 + v44);
    v47 = ((uint64_t (*)(_QWORD *, uint64_t))v44)(v46, 1);
    if (v47 == v105)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      v48 = qword_1022A0078;
      v49 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v49))
      {
        v50 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v50 = (_QWORD *)*v50;
        if (v25 > 3)
          v51 = "StateUnknown";
        else
          v51 = (&off_1021D0D48)[(int)v25];
        sub_1015A2E04(__p, v51);
        v52 = v3;
        v53 = SHIBYTE(v109);
        v54 = *(_BYTE **)__p;
        sub_1015A2E04(v116, "Enter");
        v55 = __p;
        if (v53 < 0)
          v55 = v54;
        if (v119 >= 0)
          v56 = v116;
        else
          v56 = *(_BYTE **)v116;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v50;
        v112 = 2080;
        v113 = v55;
        v114 = 2080;
        v115 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v119 < 0)
          operator delete(*(void **)v116);
        v3 = v52;
        if (SHIBYTE(v109) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0C58);
        v91 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v91 = (_QWORD *)*v91;
        v92 = qword_1022A0078;
        v93 = *(unsigned __int8 *)(a1 + 120);
        sub_1018124E4(v25, v116);
        v94 = v119;
        v95 = *(_BYTE **)v116;
        sub_1015A2E04(v103, "Enter");
        v96 = v116;
        if (v94 < 0)
          v96 = v95;
        if (v104 >= 0)
          v97 = v103;
        else
          v97 = (void **)v103[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v91;
        v107 = 2080;
        v108 = v96;
        v109 = 2080;
        v110 = v97;
        LODWORD(v100) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, v93, "%snewState,%s,event,%s", __p, v100, v101);
        v99 = v98;
        if (v104 < 0)
          operator delete(v103[0]);
        if (v119 < 0)
          operator delete(*(void **)v116);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v99);
        if (v99 != buf)
          free(v99);
      }
      v57 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v102;
      v58 = sub_1000610B4(v15, &v102, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v59 = v58[5];
      v60 = (uint64_t)v58[6];
      v61 = (_QWORD *)(v57 + (v60 >> 1));
      if ((v60 & 1) != 0)
        v59 = *(uint64_t **)(*v61 + v59);
      v25 = ((uint64_t (*)(_QWORD *, _QWORD))v59)(v61, 0);
      if ((_DWORD)v25 == v102)
        goto LABEL_101;
      sub_101813150();
    }
    else
    {
      sub_1018132B8();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_101810508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

void sub_101810568(uint64_t a1, char *a2)
{
  int v4;
  NSObject *v5;
  _BOOL8 v6;
  void **v7;
  int v8;
  int v9;
  uint64_t i;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  void **v15;
  int v16;
  uint64_t v17;
  void **v18;
  NSObject *v19;
  void **v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  void **v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  NSObject *v31;
  void **v32;
  int v33;
  NSObject *v34;
  void **p_p_p;
  int v36;
  int v37;
  void *p_p;
  char v39;
  char v40;
  uint64_t v41[3];
  void *__p;
  uint64_t v43;
  char *v44;
  uint8_t buf[8];
  _BYTE v46[10];
  __int16 v47;
  void **v48;
  __int16 v49;
  _DWORD v50[12];
  uint64_t v51;

  v4 = sub_101810F80(a1, (uint64_t)a2);
  if (v4)
  {
    *(_DWORD *)(a1 + 276) = v4;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D0C38);
    v5 = qword_1022A0088;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      sub_1017E1C1C(*(_DWORD *)(a1 + 276), &__p);
      v7 = SHIBYTE(v44) >= 0 ? &__p : (void **)__p;
      v8 = *a2;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v46 = 2082;
      *(_QWORD *)&v46[2] = "";
      v47 = 2082;
      v48 = v7;
      v49 = 1026;
      v50[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
      if (SHIBYTE(v44) < 0)
        operator delete(__p);
    }
    v9 = sub_101811168(v6, (uint64_t)a2);
    *(_DWORD *)buf = 49;
    *(_DWORD *)v46 = v9;
    *(_DWORD *)((char *)v50 + 2) = 0;
    *(_DWORD *)((char *)&v50[2] + 2) = 51;
    *(_DWORD *)((char *)&v50[4] + 2) = 1;
    *(_DWORD *)((char *)&v50[10] + 2) = 0;
    v43 = 0;
    v44 = 0;
    __p = 0;
    p_p = &__p;
    v39 = 0;
    __p = operator new(0x50uLL);
    v43 = (uint64_t)__p;
    v44 = (char *)__p + 80;
    v43 = sub_1006AB40C((uint64_t)&v44, (uint64_t)buf, (uint64_t)&v51, (uint64_t)__p);
    for (i = 48; i != -32; i -= 40)
      sub_1001F8644((uint64_t)&buf[i]);
    v11 = *(void **)(a1 + 1800);
    memset(v41, 0, sizeof(v41));
    sub_1006AB68C(v41, (uint64_t)__p, v43, 0xCCCCCCCCCCCCCCCDLL * ((v43 - (uint64_t)__p) >> 3));
    objc_msgSend(v11, "setMeasurements:", sub_1006A7590(v41));
    *(_QWORD *)buf = v41;
    sub_1006AB5A0((void ***)buf);
    v12 = a2[1];
    if (v12 > 0xC)
      goto LABEL_47;
    if (((1 << v12) & 0xC) != 0)
    {
      if (!*a2)
        goto LABEL_45;
      if (*a2 == 3)
      {
LABEL_44:
        v23 = 5;
        goto LABEL_46;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v34 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
        if (v40 >= 0)
          p_p_p = &p_p;
        else
          p_p_p = (void **)p_p;
        v36 = *a2;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v46 = 2082;
        *(_QWORD *)&v46[2] = "";
        v47 = 2082;
        v48 = p_p_p;
        v49 = 1026;
        v50[0] = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
        if (v40 < 0)
          operator delete(p_p);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v17 = qword_1022A0088;
      if (!os_signpost_enabled((os_log_t)qword_1022A0088))
        goto LABEL_93;
      sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
      if (v40 >= 0)
        v18 = &p_p;
      else
        v18 = (void **)p_p;
    }
    else
    {
      if (((1 << v12) & 0x120) == 0)
      {
        if (((1 << v12) & 0x1400) != 0)
        {
          v13 = *a2;
          if (v13 >= 2)
          {
            if (v13 != 3)
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021D0C38);
              v14 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
              {
                sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
                if (v40 >= 0)
                  v15 = &p_p;
                else
                  v15 = (void **)p_p;
                v16 = *a2;
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)v46 = 2082;
                *(_QWORD *)&v46[2] = "";
                v47 = 2082;
                v48 = v15;
                v49 = 1026;
                v50[0] = v16;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
                if (v40 < 0)
                  operator delete(p_p);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_1021D0C38);
              }
              v17 = qword_1022A0088;
              if (!os_signpost_enabled((os_log_t)qword_1022A0088))
                goto LABEL_93;
              sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
              if (v40 >= 0)
                v18 = &p_p;
              else
                v18 = (void **)p_p;
              goto LABEL_90;
            }
            goto LABEL_44;
          }
LABEL_45:
          v23 = 4;
          goto LABEL_46;
        }
LABEL_47:
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
        v24 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
          if (v40 >= 0)
            v25 = &p_p;
          else
            v25 = (void **)p_p;
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v46 = 2082;
          *(_QWORD *)&v46[2] = "";
          v47 = 2082;
          v48 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v40 < 0)
            operator delete(p_p);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D0C38);
        }
        v26 = qword_1022A0088;
        if (!os_signpost_enabled((os_log_t)qword_1022A0088))
          goto LABEL_93;
        sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
        if (v40 >= 0)
          v27 = &p_p;
        else
          v27 = (void **)p_p;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v46 = 2082;
        *(_QWORD *)&v46[2] = "";
        v47 = 2082;
        v48 = v27;
        v28 = "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, locat"
              "ion:escape_only}s}";
        v29 = v26;
        v30 = 28;
        goto LABEL_91;
      }
      v22 = *a2;
      if (v22 <= 3)
      {
        v23 = dword_101CE04B0[v22];
LABEL_46:
        sub_10180F7A8(a1, v23);
LABEL_93:
        *(_QWORD *)buf = &__p;
        sub_1006AB5A0((void ***)buf);
        return;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v31 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
        if (v40 >= 0)
          v32 = &p_p;
        else
          v32 = (void **)p_p;
        v33 = *a2;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v46 = 2082;
        *(_QWORD *)&v46[2] = "";
        v47 = 2082;
        v48 = v32;
        v49 = 1026;
        v50[0] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
        if (v40 < 0)
          operator delete(p_p);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      }
      v17 = qword_1022A0088;
      if (!os_signpost_enabled((os_log_t)qword_1022A0088))
        goto LABEL_93;
      sub_1017E1C1C(*(_DWORD *)(a1 + 276), &p_p);
      if (v40 >= 0)
        v18 = &p_p;
      else
        v18 = (void **)p_p;
    }
LABEL_90:
    v37 = *a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v46 = 2082;
    *(_QWORD *)&v46[2] = "";
    v47 = 2082;
    v48 = v18;
    v49 = 1026;
    v50[0] = v37;
    v28 = "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:"
          "escape_only}s, \"type\":%{public}d}";
    v29 = v17;
    v30 = 34;
LABEL_91:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Cplane Unusual COM event failure response returned", v28, buf, v30);
    if (v40 < 0)
      operator delete(p_p);
    goto LABEL_93;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D0C38);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_1017E1C1C(0, &__p);
    v20 = SHIBYTE(v44) >= 0 ? &__p : (void **)__p;
    v21 = *a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v46 = 2082;
    *(_QWORD *)&v46[2] = "";
    v47 = 2082;
    v48 = v20;
    v49 = 1026;
    v50[0] = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning dropping the protocol:\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
    if (SHIBYTE(v44) < 0)
      operator delete(__p);
  }
}

void sub_101810EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  sub_1006AB5A0(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_101810F80(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  uint64_t result;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v3 = *(unsigned __int8 *)(a2 + 1) - 2;
  if (v3 < 0xB && ((0x543u >> v3) & 1) != 0)
    return dword_101CE0710[(char)v3];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)buf = 67109120;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#error,protocol not supported,%d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v8 = *(unsigned __int8 *)(a2 + 1);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#error,protocol not supported,%d", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionProtocol CLEurekaControlPlane::getProtocol(const pds::tlv::commEvent &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  return result;
}

uint64_t sub_101811168(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  uint64_t result;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v3 = *(unsigned __int8 *)(a2 + 1) - 2;
  if (v3 < 0xB && ((0x543u >> v3) & 1) != 0)
    return dword_101CE073C[(char)v3];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)buf = 67109120;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#error,protocol not supported,%d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v8 = *(unsigned __int8 *)(a2 + 1);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#error,protocol not supported,%d", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "Emergency::NILRPositionProtocol CLEurekaControlPlane::mapProtocolType(const pds::tlv::commEvent &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  return result;
}

void sub_101811350(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  void **v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  _BYTE buf[12];
  char v16;
  int v17;
  _BYTE *v18;
  void *__p[2];
  char v20;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D0C38);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_101862E2C(a2, __p);
    v4 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#Cplane,Emergency Event ,EmergencyEvent,%{public}s", buf, 0xCu);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D0C38);
    v9 = qword_1022A0088;
    sub_101862E2C(a2, buf);
    if (v16 >= 0)
      v10 = buf;
    else
      v10 = *(_BYTE **)buf;
    v17 = 136446210;
    v18 = v10;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 2, "#Cplane,Emergency Event ,EmergencyEvent,%{public}s", &v17, 12);
    v12 = v11;
    if (v16 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v12);
    if (v12 != (char *)__p)
      free(v12);
  }
  if (a2 <= 0xA)
  {
    if (((1 << a2) & 0x416) != 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Cplane,BB Emergency Session begin", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      *(_WORD *)buf = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Cplane,BB Emergency Session begin", buf, v14);
      v8 = (void **)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v13);
LABEL_39:
      if (v8 != __p)
        free(v8);
      return;
    }
    if (a2 == 9)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D0C38);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Cplane,BB Emergency Session end", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D0C38);
        *(_WORD *)buf = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Cplane,BB Emergency Session end", buf, v14);
        v8 = (void **)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v7);
        goto LABEL_39;
      }
    }
  }
}

void sub_1018117C4(uint64_t a1, uint64_t a2, unsigned int *a3, char a4)
{
  NSObject *v8;
  float v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  float v13;
  double v14;
  double v15;
  unsigned int v16;
  uint64_t i;
  void *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21[3];
  void **v22;
  uint64_t v23;
  void **v24;
  uint64_t v25[3];
  char *v26;
  _BYTE *v27;
  _QWORD v28[3];
  char v29;
  uint8_t buf[8];
  float v31[6];
  int v32;
  _DWORD v33[30];
  uint64_t v34;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "process_SessionResponse", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "process_SessionResponse", &v26, 2);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_SessionResponse(const GNSS::PerEpochData &, const qmi::pds::SessionFixStatus &, uint8_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 96);
  LODWORD(v9) = sub_1016FF408(a4);
  *(float *)(a1 + 268) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 232) = v10;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 264) = (*(_DWORD *)(a2 + 136) >> 4) & 2 | (*(_DWORD *)(a2 + 136) >> 5) & 4 | (*(_DWORD *)(a2 + 136) >> 1) & 0x20 | ((*(_DWORD *)(a2 + 136) & 0x1F) != 0);
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 1768) = v10;
  *(_QWORD *)(a1 + 1776) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 272) = 1;
  sub_1001DC538();
  *(_DWORD *)buf = 52;
  v31[0] = v9;
  v32 = 0;
  v27 = 0;
  v28[0] = 0;
  v26 = 0;
  v22 = (void **)&v26;
  LOBYTE(v23) = 0;
  v26 = (char *)operator new(0x28uLL);
  v27 = v26;
  v28[0] = v26 + 40;
  v27 = (_BYTE *)sub_1006AB40C((uint64_t)v28, (uint64_t)buf, (uint64_t)v33, (uint64_t)v26);
  sub_1001F8644((uint64_t)v31);
  v11 = *(void **)(a1 + 1800);
  memset(v25, 0, sizeof(v25));
  sub_1006AB68C(v25, (uint64_t)v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v27 - v26) >> 3));
  objc_msgSend(v11, "setMeasurements:", sub_1006A7590(v25));
  *(_QWORD *)buf = v25;
  sub_1006AB5A0((void ***)buf);
  v12 = *a3;
  if (!*a3)
  {
    v13 = *(double *)(a2 + 72);
    v31[0] = v13;
    v14 = *(double *)(a2 + 96);
    v15 = *(double *)(a2 + 104);
    *(_DWORD *)buf = 39;
    v32 = 4;
    v33[0] = 40;
    v33[2] = (int)v14;
    v33[8] = 0;
    v33[10] = 41;
    v33[12] = (int)v15;
    v16 = *(_DWORD *)(a2 + 136);
    v33[18] = 0;
    v33[20] = 43;
    v33[22] = (v16 >> 4) & 2 | (v16 >> 5) & 4 | (v16 >> 1) & 0x20 | ((v16 & 0x1F) != 0);
    v33[28] = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v28[2] = &v22;
    v29 = 0;
    v22 = (void **)operator new(0xA0uLL);
    v23 = (uint64_t)v22;
    v24 = v22 + 20;
    v23 = sub_1006AB40C((uint64_t)&v24, (uint64_t)buf, (uint64_t)&v34, (uint64_t)v22);
    for (i = 128; i != -32; i -= 40)
      sub_1001F8644((uint64_t)&buf[i]);
    v18 = *(void **)(a1 + 1800);
    memset(v21, 0, sizeof(v21));
    sub_1006AB68C(v21, (uint64_t)v22, v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - (uint64_t)v22) >> 3));
    objc_msgSend(v18, "setMeasurements:", sub_1006A7590(v21));
    *(_QWORD *)buf = v21;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v22;
    sub_1006AB5A0((void ***)buf);
    v12 = *a3;
  }
  if (v12 <= 9)
    sub_10180F7A8(a1, dword_101CE0768[v12]);
  *(_QWORD *)buf = &v26;
  sub_1006AB5A0((void ***)buf);
}

void sub_101811C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  a27 = (void **)&a15;
  sub_1006AB5A0(&a27);
  a27 = (void **)&a21;
  sub_1006AB5A0(&a27);
  _Unwind_Resume(a1);
}

void sub_101811CEC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  const char *v25;
  void **v26;
  _BYTE buf[12];
  char v28;
  int v29;
  _BYTE *v30;
  void *__p[2];
  char v32;

  if ((*(_DWORD *)(a1 + 276) - 1) <= 1 && *((_DWORD *)a2 + 2) == 1)
    *((_QWORD *)a2 + 28) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_1018637E0(*((_QWORD *)a2 + 28), __p);
    v7 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,processPdsSessionStatisticsReport,type,%s", buf, 0xCu);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v21 = qword_1022A0078;
    sub_1018637E0(*((_QWORD *)a2 + 28), buf);
    if (v28 >= 0)
      v22 = buf;
    else
      v22 = *(_BYTE **)buf;
    v29 = 136315138;
    v30 = v22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 2, "#Cplane,#ca,processPdsSessionStatisticsReport,type,%s", (const char *)&v29);
    v24 = v23;
    if (v28 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::processPdsSessionStatisticsReport(CLEurekaNilrTypes::sessionStatisticsReport, uint64_t)", "%s\n", v24);
    if (v24 != (char *)__p)
      free(v24);
  }
  if (*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 129))
  {
    if (*((_QWORD *)a2 + 28) == 1)
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[2];
      *(_OWORD *)(a1 + 1472) = a2[3];
      *(_OWORD *)(a1 + 1456) = v10;
      *(_OWORD *)(a1 + 1440) = v9;
      *(_OWORD *)(a1 + 1424) = v8;
      v11 = a2[4];
      v12 = a2[5];
      v13 = a2[6];
      *(_OWORD *)(a1 + 1536) = a2[7];
      *(_OWORD *)(a1 + 1520) = v13;
      *(_OWORD *)(a1 + 1504) = v12;
      *(_OWORD *)(a1 + 1488) = v11;
      v14 = a2[8];
      v15 = a2[9];
      v16 = a2[10];
      *(_OWORD *)(a1 + 1600) = a2[11];
      *(_OWORD *)(a1 + 1584) = v16;
      *(_OWORD *)(a1 + 1568) = v15;
      *(_OWORD *)(a1 + 1552) = v14;
      v17 = a2[12];
      v18 = a2[13];
      v19 = a2[14];
      *(_BYTE *)(a1 + 1664) = *((_BYTE *)a2 + 240);
      *(_OWORD *)(a1 + 1648) = v19;
      *(_OWORD *)(a1 + 1632) = v18;
      *(_OWORD *)(a1 + 1616) = v17;
      *(_QWORD *)(a1 + 1856) = a3;
      sub_10180F7A8(a1, 13);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,processPdsSessionStatisticsReport,summary report for non-emergency NILR", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0C58);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,processPdsSessionStatisticsReport,summary report for non-emergency NILR", buf, 2);
      v26 = (void **)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::processPdsSessionStatisticsReport(CLEurekaNilrTypes::sessionStatisticsReport, uint64_t)", "%s\n", v25);
      if (v26 != __p)
        free(v26);
    }
    sub_1018120F4(a1);
  }
}

void sub_1018120F4(uint64_t a1)
{
  NSObject *v2;
  uint64_t i;
  void *v4;
  void *v5;
  const char *v6;
  uint8_t *v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10[4];
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[10];
  __int16 v15;
  int v16;
  uint8_t buf[8];
  _BYTE v18[6];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v18 = 1024;
    *(_DWORD *)&v18[2] = 1;
    v19 = 1024;
    v20 = 0;
    v21 = 1024;
    v22 = 0;
    v23 = 1024;
    v24 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,submitNonEmergencyNILRSessionStatsToCA,posProtocol,%d,sessionProtocol,%d,msgType,%d,methodType,%d,discardReason,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v12 = 67110144;
    v13 = 0x400000000010400;
    *(_DWORD *)v14 = 0;
    *(_WORD *)&v14[4] = 1024;
    *(_DWORD *)&v14[6] = 0;
    v15 = 1024;
    v16 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Cplane,#ca,submitNonEmergencyNILRSessionStatsToCA,posProtocol,%d,sessionProtocol,%d,msgType,%d,methodType,%d,discardReason,%d", &v12, 32, LODWORD(__p[0]), LODWORD(__p[1]), v9);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::submitNonEmergencyNILRSessionStatsToCA()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_DWORD *)buf = 86;
  *(_DWORD *)v18 = 0;
  v25 = 0;
  v26 = 51;
  v27 = 1;
  v28 = 0;
  v29 = 52;
  v30 = 0;
  v31 = 0;
  v32 = 84;
  v33 = 1;
  v34 = 0;
  v35 = 85;
  v36 = 0;
  v37 = 0;
  v13 = 0;
  *(_QWORD *)v14 = 0;
  v12 = 0;
  v10[3] = (uint64_t)&v12;
  v11 = 0;
  v12 = (uint64_t)operator new(0xC8uLL);
  v13 = v12;
  *(_QWORD *)v14 = v12 + 200;
  v13 = sub_1006AB40C((uint64_t)v14, (uint64_t)buf, (uint64_t)&v38, v12);
  for (i = 168; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v4 = *(void **)(a1 + 1800);
  memset(v10, 0, 24);
  sub_1006AB68C(v10, v12, v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 3));
  objc_msgSend(v4, "setMeasurements:", sub_1006A7590(v10));
  *(_QWORD *)buf = v10;
  sub_1006AB5A0((void ***)buf);
  v5 = *(void **)(a1 + 1800);
  if (byte_102311227 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102311210, *((unint64_t *)&xmmword_102311210 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102311210;
    v9 = unk_102311220;
  }
  objc_msgSend(v5, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = &v12;
  sub_1006AB5A0((void ***)buf);
}

void sub_10181245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1018124E4@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StateUnknown";
  else
    v2 = (&off_1021D0D48)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_101812510(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D0C38);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Cplane,emergency settings changed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D0C38);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Cplane,emergency settings changed", v14, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaControlPlane::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
    goto LABEL_10;
  if (v5 == 1 && sub_1001DC538())
  {
    v5 = *(_DWORD *)a2;
LABEL_10:
    v6 = sub_1016911FC((_QWORD *)(a1 + 168), v5);
    sub_10084B628(v6, a2);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67109120;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "InvalidArg,handleEmergencySettingsChange,instance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
    v11 = *(_DWORD *)a2;
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "InvalidArg,handleEmergencySettingsChange,instance,%d", v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaControlPlane::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_101812824(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101812850(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101812880(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018128A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1018128E8(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_101813588();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_101812A6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_101812AAC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_101812B14(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_101812B14(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_10180DC3C(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_101812B90(uint64_t a1)
{
  return sub_10180F7A8(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

#error "101812C18: call analysis failed (funcsize=73)"

#error "101812D84: call analysis failed (funcsize=71)"

#error "101812EF0: call analysis failed (funcsize=73)"

#error "10181305C: call analysis failed (funcsize=71)"

#error "1018131C4: call analysis failed (funcsize=71)"

#error "10181332C: call analysis failed (funcsize=71)"

#error "101813494: call analysis failed (funcsize=71)"

void sub_101813588()
{
  NSObject *v0;
  uint8_t v1[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0C58);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

void sub_101813728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1632];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_100270E34(a1 + 16, a3);
  *(_QWORD *)(a1 + 48) = off_1021D0DB8;
  *(_QWORD *)(a1 + 56) = a1;
  *(_QWORD *)(a1 + 72) = a1 + 48;
  *(_QWORD *)(a1 + 80) = off_1021D0E38;
  *(_QWORD *)(a1 + 88) = a1;
  *(_QWORD *)(a1 + 104) = a1 + 80;
  sub_100270E34(a1 + 112, a4);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101BBE5E0;
  *(_DWORD *)(a1 + 192) = -1;
  *(_QWORD *)(a1 + 200) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 210) = 0;
  *(_OWORD *)(a1 + 216) = xmmword_101BBE610;
  *(_WORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_101CE0790;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRGCM,created", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGCM,created", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLRhythmicGnssClientManager::CLRhythmicGnssClientManager(id<CLIntersiloUniverse>, GnssStateUpdateCallback, GnssRegisteredClientStateChangeCallback)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  qword_102314128 = a1;
  sub_101813CB8();
}

void sub_101813B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  void **v17;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v19 = *v17;
  if (*v17)
  {
    v12[34] = (uint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)v12[19];
  if (v20)
  {
    v12[20] = (uint64_t)v20;
    operator delete(v20);
  }
  sub_10181AA00(v16, 0);
  v21 = (_QWORD *)v12[17];
  if (v21 == a12)
  {
    v22 = 4;
    v21 = a12;
  }
  else
  {
    if (!v21)
      goto LABEL_10;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_10:
  v23 = (_QWORD *)v12[13];
  if (v23 == v15)
  {
    v24 = 4;
  }
  else
  {
    if (!v23)
      goto LABEL_15;
    v24 = 5;
    v15 = (_QWORD *)v12[13];
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v24))(v15);
LABEL_15:
  v25 = (_QWORD *)v12[9];
  if (v25 == v14)
  {
    v26 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_20;
    v26 = 5;
    v14 = (_QWORD *)v12[9];
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v26))(v14);
LABEL_20:
  v27 = (_QWORD *)v12[5];
  if (v27 == v13)
  {
    v28 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_25;
    v28 = 5;
    v13 = (_QWORD *)v12[5];
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v28))(v13);
LABEL_25:
  v29 = *v12;
  *v12 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Unwind_Resume(a1);
}

void sub_101813CB8()
{
  operator new();
}

void sub_101813E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v22 = a13;
  if (a13 == v21)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_16:
  operator delete();
}

void sub_101813EE0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRhythmicGnssClientManager::onMotionStateWorkoutNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D0D88);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssClientManager::onMotionStateWorkoutNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D0D88);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssClientManager::onMotionStateWorkoutNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10181A39C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101814098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1018140BC(uint64_t *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGCM,deconstructor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v17[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGCM,deconstructor", v17, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "CLRhythmicGnssClientManager::~CLRhythmicGnssClientManager()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v3 = (void *)a1[33];
  if (v3)
  {
    a1[34] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = (uint64_t)v4;
    operator delete(v4);
  }
  sub_10181AA00(a1 + 18, 0);
  v5 = (uint64_t *)a1[17];
  if (v5 == a1 + 14)
  {
    v6 = 4;
    v5 = a1 + 14;
  }
  else
  {
    if (!v5)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  v7 = (uint64_t *)a1[13];
  if (v7 == a1 + 10)
  {
    v8 = 4;
    v7 = a1 + 10;
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  v9 = (uint64_t *)a1[9];
  if (v9 == a1 + 6)
  {
    v10 = 4;
    v9 = a1 + 6;
  }
  else
  {
    if (!v9)
      goto LABEL_25;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_25:
  v11 = (uint64_t *)a1[5];
  if (v11 == a1 + 2)
  {
    v12 = 4;
    v11 = a1 + 2;
  }
  else
  {
    if (!v11)
      goto LABEL_30;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_30:
  v13 = *a1;
  *a1 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

void sub_101814354(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_101814364(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  double v24;

  result = 0;
  switch(*a2)
  {
    case 0xFFFFFFFF:
      return result;
    case 0:
      __asm { FMOV            V0.2D, #30.0; jumptable 00000001018143A0 case 1 }
      *(_OWORD *)a3 = _Q0;
      *(_DWORD *)(a3 + 16) = 0;
      sub_1018144F8();
      v10 = 0;
      *(_QWORD *)(a3 + 24) = v11;
      *(_WORD *)(a3 + 32) = 256;
      *(_QWORD *)(a3 + 48) = 0x408C200000000000;
      goto LABEL_4;
    case 1:
      __asm { FMOV            V0.2D, #30.0; jumptable 00000001018143A0 case 2 }
      *(_OWORD *)a3 = _Q0;
      *(_DWORD *)(a3 + 16) = 1;
      sub_1018144F8();
      *(_QWORD *)(a3 + 24) = v13;
      *(_WORD *)(a3 + 32) = 257;
      sub_1018144F8();
      v10 = 0;
      *(_QWORD *)(a3 + 48) = v14;
LABEL_4:
      *(_BYTE *)(a3 + 34) = 0;
      v15 = 1.79769313e308;
      goto LABEL_13;
    case 2:
      *(_QWORD *)a3 = 0x403E000000000000;
      sub_1001E4804(&v22);
      v24 = 0.0;
      v16 = sub_1001FD98C(v22, "CLRhythmicGnssDefaultActiveGnssTime_s", &v24);
      v17 = v24;
      if (!v16)
        v17 = 18.0;
      *(double *)(a3 + 8) = v17;
      v18 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      *(_DWORD *)(a3 + 16) = 2;
      sub_1018144F8();
      *(_QWORD *)(a3 + 24) = v21;
      *(_WORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 48) = 0x7FEFFFFFFFFFFFFFLL;
      v10 = 1;
      *(_BYTE *)(a3 + 34) = 1;
      v15 = (double)sub_1018145A8();
LABEL_13:
      *(double *)(a3 + 40) = v15;
      *(_WORD *)(a3 + 56) = 1;
      *(_OWORD *)(a3 + 64) = xmmword_101CE07A0;
      *(_BYTE *)(a3 + 80) = v10;
      break;
    default:
      return 1;
  }
  return 1;
}

void sub_1018144E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018144F8()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;

  sub_1001E4804(&v3);
  v5 = 0;
  sub_1001FD98C(v3, "CLRhythmicGnssDefaultInterSessionInterval_s", &v5);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_101814594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018145A8()
{
  char v0;
  char v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  HIDWORD(v9) = 0;
  sub_1001E4804(buf);
  v0 = sub_100526244(*(uint64_t *)buf, "CLProactiveGnssPowerBudget_s", (_DWORD *)&v9 + 1);
  v1 = v0;
  v2 = v12;
  if (!v12)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((v0 & 1) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if ((v1 & 1) == 0)
LABEL_6:
    HIDWORD(v9) = sub_1007627D4();
LABEL_7:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = HIDWORD(v9);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGE,getPowerBudget,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v10[0] = 67240192;
    v10[1] = HIDWORD(v9);
    LODWORD(v9) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGE,getPowerBudget,%{public}d", v10, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLRhythmicGnssClientManager::getProactiveGnssPowerBudgetInSecondsBasedOnHW()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return HIDWORD(v9);
}

void sub_1018147C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018147E0(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _OWORD v16[5];
  uint64_t v17;
  _WORD v18[8];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  uint64_t v23;
  uint8_t buf[4];
  int v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67174657;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRGCM,removeRhythmicGnssClient,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v10 = *a2;
    LODWORD(v19) = 67174657;
    DWORD1(v19) = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,removeRhythmicGnssClient,%{private}d", &v19, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::removeRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v19 = xmmword_101BBE5E0;
  LODWORD(v20) = -1;
  *((_QWORD *)&v20 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)v21 = 0;
  v21[2] = 0;
  *(_OWORD *)&v21[8] = xmmword_101BBE610;
  *(_WORD *)&v21[24] = 1;
  v22 = xmmword_101CE0790;
  LOBYTE(v23) = 0;
  v6 = sub_101814364(a1, a2, (uint64_t)&v19);
  if ((v6 & 1) != 0)
  {
    v16[2] = *(_OWORD *)v21;
    v16[3] = *(_OWORD *)&v21[16];
    v16[4] = v22;
    v17 = v23;
    v16[0] = v19;
    v16[1] = v20;
    sub_101814BA0(a1, (uint64_t *)v16);
    if (*(_QWORD *)(a1 + 152) == *(_QWORD *)(a1 + 160))
    {
      v7 = *(_QWORD *)(a1 + 144);
      if (v7)
        sub_101798FBC(v7);
    }
    if (*(_QWORD *)(a1 + 136))
      sub_10181572C(a1 + 112, 0, *(_DWORD *)(a1 + 192), -1431655765 * ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGCM,removeRhythmicGnssClient,invalid mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v18[0] = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,removeRhythmicGnssClient,invalid mode", v18, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::removeRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v6;
}

void sub_101814BA0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint8_t *v67;
  NSObject *v68;
  NSObject *v69;
  int v70;
  NSObject *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  const char *v79;
  uint8_t *v80;
  unint64_t v81;
  const char *v82;
  uint8_t *v83;
  const char *v84;
  uint8_t *v85;
  int v86;
  const char *v87;
  uint8_t *v88;
  uint64_t v89;
  _OWORD v90[5];
  uint64_t v91;
  int v92;
  _BYTE v93[24];
  __int16 v94;
  _BYTE v95[14];
  __int16 v96;
  int v97;
  __int16 v98;
  _BYTE v99[14];
  __int16 v100;
  _BYTE v101[14];
  __int16 v102;
  int v103;
  __int16 v104;
  _BYTE v105[24];
  uint8_t buf[4];
  _BYTE v107[24];
  __int16 v108;
  _BYTE v109[14];
  __int16 v110;
  int v111;
  __int16 v112;
  _BYTE v113[14];
  __int16 v114;
  _BYTE v115[14];
  __int16 v116;
  int v117;
  __int16 v118;
  _BYTE v119[24];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v107 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    v92 = 134349056;
    *(_QWORD *)v93 = v78;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientConfigurationList,size,%{public}zu", &v92, 12);
    v80 = (uint8_t *)v79;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v79);
    if (v80 != buf)
      free(v80);
  }
  v6 = *(_QWORD *)(a1 + 152);
  if (v6 != *(_QWORD *)(a1 + 160))
  {
    v7 = -v6;
    while (1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)v6;
        v10 = *(_QWORD *)(v6 + 8);
        v11 = *(_QWORD *)(v6 + 16);
        v12 = *(_DWORD *)(v6 + 24);
        v13 = *(_QWORD *)(v6 + 32);
        v14 = *(unsigned __int8 *)(v6 + 40);
        v15 = *(unsigned __int8 *)(v6 + 41);
        v16 = *(unsigned __int8 *)(v6 + 42);
        v18 = *(_QWORD *)(v6 + 48);
        v17 = *(_QWORD *)(v6 + 56);
        v19 = *(unsigned __int8 *)(v6 + 64);
        v20 = *(unsigned __int8 *)(v6 + 65);
        v21 = *(_QWORD *)(v6 + 72);
        v22 = *(_QWORD *)(v6 + 80);
        *(_DWORD *)buf = 67243520;
        *(_DWORD *)v107 = v9;
        *(_WORD *)&v107[4] = 2050;
        *(_QWORD *)&v107[6] = v10;
        *(_WORD *)&v107[14] = 2050;
        *(_QWORD *)&v107[16] = v11;
        v108 = 1026;
        *(_DWORD *)v109 = v12;
        *(_WORD *)&v109[4] = 2050;
        *(_QWORD *)&v109[6] = v13;
        v110 = 1026;
        v111 = v14;
        v112 = 1026;
        *(_DWORD *)v113 = v15;
        *(_WORD *)&v113[4] = 2050;
        *(_QWORD *)&v113[6] = v17;
        v114 = 1026;
        *(_DWORD *)v115 = v16;
        *(_WORD *)&v115[4] = 2050;
        *(_QWORD *)&v115[6] = v18;
        v116 = 1026;
        v117 = v19;
        v118 = 1026;
        *(_DWORD *)v119 = v20;
        *(_WORD *)&v119[4] = 2050;
        *(_QWORD *)&v119[6] = v21;
        *(_WORD *)&v119[14] = 2050;
        *(_QWORD *)&v119[16] = v22;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,clientIter->clientInfo,fRhythmicGnssActiveConfiguration,refCount,%{public}d,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf", buf, 0x72u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v37 = *(_DWORD *)v6;
        v38 = *(_QWORD *)(v6 + 8);
        v39 = *(_QWORD *)(v6 + 16);
        v40 = *(_DWORD *)(v6 + 24);
        v41 = *(_QWORD *)(v6 + 32);
        v42 = *(unsigned __int8 *)(v6 + 40);
        v43 = *(unsigned __int8 *)(v6 + 41);
        v44 = *(unsigned __int8 *)(v6 + 42);
        v46 = *(_QWORD *)(v6 + 48);
        v45 = *(_QWORD *)(v6 + 56);
        v47 = *(unsigned __int8 *)(v6 + 64);
        v48 = *(unsigned __int8 *)(v6 + 65);
        v49 = *(_QWORD *)(v6 + 72);
        v50 = *(_QWORD *)(v6 + 80);
        v92 = 67243520;
        *(_DWORD *)v93 = v37;
        *(_WORD *)&v93[4] = 2050;
        *(_QWORD *)&v93[6] = v38;
        *(_WORD *)&v93[14] = 2050;
        *(_QWORD *)&v93[16] = v39;
        v94 = 1026;
        *(_DWORD *)v95 = v40;
        *(_WORD *)&v95[4] = 2050;
        *(_QWORD *)&v95[6] = v41;
        v96 = 1026;
        v97 = v42;
        v98 = 1026;
        *(_DWORD *)v99 = v43;
        *(_WORD *)&v99[4] = 2050;
        *(_QWORD *)&v99[6] = v45;
        v100 = 1026;
        *(_DWORD *)v101 = v44;
        *(_WORD *)&v101[4] = 2050;
        *(_QWORD *)&v101[6] = v46;
        v102 = 1026;
        v103 = v47;
        v104 = 1026;
        *(_DWORD *)v105 = v48;
        *(_WORD *)&v105[4] = 2050;
        *(_QWORD *)&v105[6] = v49;
        *(_WORD *)&v105[14] = 2050;
        *(_QWORD *)&v105[16] = v50;
        LODWORD(v89) = 114;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientConfigurationList,clientIter->clientInfo,fRhythmicGnssActiveConfiguration,refCount,%{public}d,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf", &v92, v89);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v23 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v24 = *a2;
        v25 = a2[1];
        v26 = *((_DWORD *)a2 + 4);
        v27 = a2[3];
        v28 = *((unsigned __int8 *)a2 + 32);
        v29 = *((unsigned __int8 *)a2 + 33);
        v30 = *((unsigned __int8 *)a2 + 34);
        v32 = a2[5];
        v31 = a2[6];
        v33 = *((unsigned __int8 *)a2 + 56);
        v34 = *((unsigned __int8 *)a2 + 57);
        v35 = a2[8];
        v36 = a2[9];
        *(_DWORD *)buf = 134352128;
        *(_QWORD *)v107 = v24;
        *(_WORD *)&v107[8] = 2050;
        *(_QWORD *)&v107[10] = v25;
        *(_WORD *)&v107[18] = 1026;
        *(_DWORD *)&v107[20] = v26;
        v108 = 2050;
        *(_QWORD *)v109 = v27;
        *(_WORD *)&v109[8] = 1026;
        *(_DWORD *)&v109[10] = v28;
        v110 = 1026;
        v111 = v29;
        v112 = 2050;
        *(_QWORD *)v113 = v31;
        *(_WORD *)&v113[8] = 1026;
        *(_DWORD *)&v113[10] = v30;
        v114 = 2050;
        *(_QWORD *)v115 = v32;
        *(_WORD *)&v115[8] = 1026;
        *(_DWORD *)&v115[10] = v33;
        v116 = 1026;
        v117 = v34;
        v118 = 2050;
        *(_QWORD *)v119 = v35;
        *(_WORD *)&v119[8] = 2050;
        *(_QWORD *)&v119[10] = v36;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf", buf, 0x6Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v53 = *a2;
        v54 = a2[1];
        v55 = *((_DWORD *)a2 + 4);
        v56 = a2[3];
        v57 = *((unsigned __int8 *)a2 + 32);
        v58 = *((unsigned __int8 *)a2 + 33);
        v59 = *((unsigned __int8 *)a2 + 34);
        v61 = a2[5];
        v60 = a2[6];
        v62 = *((unsigned __int8 *)a2 + 56);
        v63 = *((unsigned __int8 *)a2 + 57);
        v64 = a2[8];
        v65 = a2[9];
        v92 = 134352128;
        *(_QWORD *)v93 = v53;
        *(_WORD *)&v93[8] = 2050;
        *(_QWORD *)&v93[10] = v54;
        *(_WORD *)&v93[18] = 1026;
        *(_DWORD *)&v93[20] = v55;
        v94 = 2050;
        *(_QWORD *)v95 = v56;
        *(_WORD *)&v95[8] = 1026;
        *(_DWORD *)&v95[10] = v57;
        v96 = 1026;
        v97 = v58;
        v98 = 2050;
        *(_QWORD *)v99 = v60;
        *(_WORD *)&v99[8] = 1026;
        *(_DWORD *)&v99[10] = v59;
        v100 = 2050;
        *(_QWORD *)v101 = v61;
        *(_WORD *)&v101[8] = 1026;
        *(_DWORD *)&v101[10] = v62;
        v102 = 1026;
        v103 = v63;
        v104 = 2050;
        *(_QWORD *)v105 = v64;
        *(_WORD *)&v105[8] = 2050;
        *(_QWORD *)&v105[10] = v65;
        LODWORD(v89) = 108;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientConfigurationList,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf", &v92, v89);
        v67 = (uint8_t *)v66;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v66);
        if (v67 != buf)
          free(v67);
      }
      if (*((_DWORD *)a2 + 4) == *(_DWORD *)(v6 + 24))
        break;
      v6 += 96;
      v7 -= 96;
      if (v6 == *(_QWORD *)(a1 + 160))
        goto LABEL_40;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v68 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,item found", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      LOWORD(v92) = 0;
      LODWORD(v89) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientConfigurationList,item found", &v92, v89);
      v85 = (uint8_t *)v84;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v84);
      if (v85 != buf)
        free(v85);
    }
    --*(_DWORD *)v6;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v69 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v70 = *(_DWORD *)v6;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v107 = v70;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,clientIter->refCount,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v86 = *(_DWORD *)v6;
      v92 = 67240192;
      *(_DWORD *)v93 = v86;
      LODWORD(v89) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientConfigurationList,clientIter->refCount,%{public}d", &v92, v89);
      v88 = (uint8_t *)v87;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v87);
      if (v88 != buf)
        free(v88);
    }
    if (!*(_DWORD *)v6)
    {
      v73 = *(_QWORD *)(a1 + 160);
      v74 = v73 - (96 - v7);
      if (v73 != 96 - v7)
        memmove((void *)-v7, (const void *)(96 - v7), v73 - (96 - v7));
      *(_QWORD *)(a1 + 160) = v74 - v7;
      sub_101816AC8(a1);
      v75 = *(_QWORD *)(a1 + 144);
      if (v75 && *(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
      {
        v76 = *(_OWORD *)(a1 + 224);
        v90[2] = *(_OWORD *)(a1 + 208);
        v90[3] = v76;
        v90[4] = *(_OWORD *)(a1 + 240);
        v91 = *(_QWORD *)(a1 + 256);
        v77 = *(_OWORD *)(a1 + 192);
        v90[0] = *(_OWORD *)(a1 + 176);
        v90[1] = v77;
        sub_1017988EC(v75, (uint64_t *)v90);
      }
    }
  }
LABEL_40:
  sub_101817F70(a1, (int *)a2 + 4);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v71 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v107 = v72;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    v92 = 134349056;
    *(_QWORD *)v93 = v81;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientConfigurationList,size,%{public}zu", &v92, v89);
    v83 = (uint8_t *)v82;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v82);
    if (v83 != buf)
      free(v83);
  }
}

uint64_t sub_10181572C(uint64_t a1, char a2, int a3, int a4)
{
  uint64_t v4;
  int v6;
  int v7;
  char v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, char *, int *, int *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_101815770(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  NSObject *v14;
  int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _OWORD v28[5];
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  unsigned __int8 v35;
  __int128 v36;
  __int16 v37;
  __int128 v38;
  unsigned __int8 v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  uint8_t buf[4];
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  int v95;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67174657;
    LODWORD(v69) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v16 = *a2;
    v40 = 67174657;
    LODWORD(v41) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addRhythmicGnssClient,%{private}d", &v40, 8);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v6 = *a2;
  if (*a2 == 2)
  {
    if ((sub_10076287C() & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    if (v6 == 1)
    {
      if ((sub_10003EC70() & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      if (v6)
        goto LABEL_30;
      if ((sub_100195F08() & 1) != 0)
      {
LABEL_15:
        v30 = 0;
        v31 = xmmword_101BBE5E0;
        v32 = -1;
        v33 = 0x7FEFFFFFFFFFFFFFLL;
        v34 = 0;
        v35 = 0;
        v36 = xmmword_101BBE610;
        v37 = 1;
        v38 = xmmword_101CE0790;
        v39 = 0;
        v7 = sub_101814364(a1, a2, (uint64_t)&v31);
        if ((v7 & 1) != 0)
        {
          sub_101816074(a1, (uint64_t)&v31);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0D68);
          v8 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient starting Gps", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0D68);
            LOWORD(v40) = 0;
            LODWORD(v27) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addRhythmicGnssClient starting Gps", &v40, v27);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          sub_1018160E4((_QWORD *)a1, (uint64_t *)&v31);
          sub_101816AC8(a1);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0D68);
          v9 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134352384;
            v69 = v31;
            v70 = 2050;
            v71 = *((_QWORD *)&v31 + 1);
            v72 = 1026;
            v73 = v32;
            v74 = 2050;
            v75 = v33;
            v76 = 1026;
            v77 = v34;
            v78 = 1026;
            v79 = HIBYTE(v34);
            v80 = 2050;
            v81 = *((_QWORD *)&v36 + 1);
            v82 = 1026;
            v83 = v35;
            v84 = 2050;
            v85 = v36;
            v86 = 1026;
            v87 = v37;
            v88 = 1026;
            v89 = HIBYTE(v37);
            v90 = 2050;
            v91 = v38;
            v92 = 2050;
            v93 = *((_QWORD *)&v38 + 1);
            v94 = 1026;
            v95 = v39;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lf,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", buf, 0x72u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0D68);
            v40 = 134352384;
            v41 = v31;
            v42 = 2050;
            v43 = *((_QWORD *)&v31 + 1);
            v44 = 1026;
            v45 = v32;
            v46 = 2050;
            v47 = v33;
            v48 = 1026;
            v49 = v34;
            v50 = 1026;
            v51 = HIBYTE(v34);
            v52 = 2050;
            v53 = *((_QWORD *)&v36 + 1);
            v54 = 1026;
            v55 = v35;
            v56 = 2050;
            v57 = v36;
            v58 = 1026;
            v59 = v37;
            v60 = 1026;
            v61 = HIBYTE(v37);
            v62 = 2050;
            v63 = v38;
            v64 = 2050;
            v65 = *((_QWORD *)&v38 + 1);
            v66 = 1026;
            v67 = v39;
            LODWORD(v27) = 114;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addRhythmicGnssClient,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lf,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", &v40, v27);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          sub_1018176D0((_QWORD *)a1, (uint64_t)&v31);
          v10 = *(_QWORD *)(a1 + 144);
          if (v10)
          {
            v11 = *(_OWORD *)(a1 + 224);
            v28[2] = *(_OWORD *)(a1 + 208);
            v28[3] = v11;
            v28[4] = *(_OWORD *)(a1 + 240);
            v29 = *(_QWORD *)(a1 + 256);
            v12 = *(_OWORD *)(a1 + 192);
            v28[0] = *(_OWORD *)(a1 + 176);
            v28[1] = v12;
            sub_1017988EC(v10, (uint64_t *)v28);
          }
          if (*(_QWORD *)(a1 + 136))
            sub_10181572C(a1 + 112, 1, *(_DWORD *)(a1 + 192), -1431655765 * ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5));
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0D68);
          v14 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,invalid mode", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0D68);
            LOWORD(v40) = 0;
            LODWORD(v27) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addRhythmicGnssClient,invalid mode", &v40, v27);
            v26 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }
        }
        return v7;
      }
    }
    if ((sub_1000C4240() & 1) != 0)
      goto LABEL_15;
  }
LABEL_30:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,not supported", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    LOWORD(v40) = 0;
    LODWORD(v27) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addRhythmicGnssClient,not supported", &v40, v27);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return 0;
}

void sub_101816074(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(a2 + 16);
  if (v3)
    v4 = v3 == 2;
  else
    v4 = 1;
  if (v4)
  {
    sub_1018144F8();
    *(_QWORD *)(a2 + 24) = v5;
    v6 = 0x408C200000000000;
  }
  else
  {
    if (v3 != 1)
      return;
    if (*(_BYTE *)(a1 + 288))
    {
      *(_QWORD *)(a2 + 24) = 0x404E000000000000;
      v6 = 0x404E000000000000;
    }
    else
    {
      sub_1018144F8();
      *(_QWORD *)(a2 + 24) = v7;
      sub_1018144F8();
    }
  }
  *(_QWORD *)(a2 + 48) = v6;
}

void sub_1018160E4(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  unint64_t v5;
  int *v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  NSObject *v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  char **v63;
  int v64;
  __int16 v65;
  int v66;
  char v67;
  int v68;
  _BYTE v69[10];
  uint8_t buf[4];
  _QWORD v71[203];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
    *(_DWORD *)buf = 134349056;
    v71[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToClientManagerInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
    v68 = 134349056;
    *(_QWORD *)v69 = v55;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,addClientToClientManagerInfo,size,%{public}zu", &v68, 12);
    v57 = (uint8_t *)v56;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v56);
    if (v57 != buf)
      free(v57);
  }
  v6 = (int *)a1[19];
  v63 = (char **)(a1 + 19);
  if (v6 == (int *)a1[20])
  {
LABEL_19:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToClientManagerInfo,adding new client type", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      LOWORD(v68) = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addClientToClientManagerInfo,adding new client type", &v68, v62);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
    v16 = *a2;
    v15 = a2[1];
    v18 = *((_DWORD *)a2 + 4);
    v17 = *((_DWORD *)a2 + 5);
    v19 = a2[3];
    v20 = *((_BYTE *)a2 + 32);
    v21 = *((_BYTE *)a2 + 33);
    v22 = *((_BYTE *)a2 + 34);
    v66 = *(_DWORD *)((char *)a2 + 35);
    v67 = *((_BYTE *)a2 + 39);
    v24 = a2[5];
    v23 = a2[6];
    v25 = *((_BYTE *)a2 + 56);
    v26 = *((_BYTE *)a2 + 57);
    v65 = *((_WORD *)a2 + 31);
    v64 = *(_DWORD *)((char *)a2 + 58);
    v28 = a2[8];
    v27 = a2[9];
    v29 = *((_BYTE *)a2 + 80);
    v30 = a1[21];
    v31 = a1[20];
    if (v31 >= v30)
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)*v63) >> 5);
      v34 = v33 + 1;
      if (v33 + 1 > 0x2AAAAAAAAAAAAAALL)
        sub_100259694();
      v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)*v63) >> 5);
      if (2 * v35 > v34)
        v34 = 2 * v35;
      if (v35 >= 0x155555555555555)
        v36 = 0x2AAAAAAAAAAAAAALL;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)sub_10067257C((uint64_t)(a1 + 21), v36);
      else
        v37 = 0;
      v45 = &v37[96 * v33];
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = v16;
      *((_QWORD *)v45 + 2) = v15;
      v46 = &v37[96 * v36];
      *((_DWORD *)v45 + 6) = v18;
      *((_DWORD *)v45 + 7) = v17;
      *((_QWORD *)v45 + 4) = v19;
      v45[40] = v20;
      v45[41] = v21;
      v45[42] = v22;
      *(_DWORD *)(v45 + 43) = v66;
      v45[47] = v67;
      *((_QWORD *)v45 + 6) = v24;
      *((_QWORD *)v45 + 7) = v23;
      v45[64] = v25;
      v45[65] = v26;
      *((_WORD *)v45 + 35) = v65;
      *(_DWORD *)(v45 + 66) = v64;
      *((_QWORD *)v45 + 9) = v28;
      *((_QWORD *)v45 + 10) = v27;
      v45[88] = v29;
      v32 = v45 + 96;
      v48 = (char *)a1[19];
      v47 = (char *)a1[20];
      if (v47 != v48)
      {
        do
        {
          v49 = *((_OWORD *)v47 - 5);
          *((_OWORD *)v45 - 6) = *((_OWORD *)v47 - 6);
          *((_OWORD *)v45 - 5) = v49;
          v50 = *((_OWORD *)v47 - 4);
          v51 = *((_OWORD *)v47 - 3);
          v52 = *((_OWORD *)v47 - 1);
          *((_OWORD *)v45 - 2) = *((_OWORD *)v47 - 2);
          *((_OWORD *)v45 - 1) = v52;
          *((_OWORD *)v45 - 4) = v50;
          *((_OWORD *)v45 - 3) = v51;
          v45 -= 96;
          v47 -= 96;
        }
        while (v47 != v48);
        v47 = *v63;
      }
      a1[19] = v45;
      a1[20] = v32;
      a1[21] = v46;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = v16;
      *(_QWORD *)(v31 + 16) = v15;
      *(_DWORD *)(v31 + 24) = v18;
      *(_DWORD *)(v31 + 28) = v17;
      *(_QWORD *)(v31 + 32) = v19;
      *(_BYTE *)(v31 + 40) = v20;
      *(_BYTE *)(v31 + 41) = v21;
      *(_BYTE *)(v31 + 42) = v22;
      *(_DWORD *)(v31 + 43) = v66;
      *(_BYTE *)(v31 + 47) = v67;
      *(_QWORD *)(v31 + 48) = v24;
      *(_QWORD *)(v31 + 56) = v23;
      *(_BYTE *)(v31 + 64) = v25;
      *(_BYTE *)(v31 + 65) = v26;
      *(_WORD *)(v31 + 70) = v65;
      *(_DWORD *)(v31 + 66) = v64;
      *(_QWORD *)(v31 + 72) = v28;
      *(_QWORD *)(v31 + 80) = v27;
      v32 = (char *)(v31 + 96);
      *(_BYTE *)(v31 + 88) = v29;
    }
    a1[20] = v32;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v53 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
      *(_DWORD *)buf = 134349056;
      v71[0] = v54;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToClientManagerInfo,size,%{public}zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
      v68 = 134349056;
      *(_QWORD *)v69 = v60;
      LODWORD(v62) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,addClientToClientManagerInfo,size,%{public}zu", &v68, v62);
      v44 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v61);
LABEL_65:
      if (v44 != buf)
        free(v44);
    }
  }
  else
  {
    while (1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v6[6];
        v9 = *((_DWORD *)a2 + 4);
        *(_DWORD *)buf = 67109376;
        LODWORD(v71[0]) = v8;
        WORD2(v71[0]) = 1024;
        *(_DWORD *)((char *)v71 + 6) = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%d,requestPowerMode,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v10 = v6[6];
        v11 = *((_DWORD *)a2 + 4);
        v68 = 67109376;
        *(_DWORD *)v69 = v10;
        *(_WORD *)&v69[4] = 1024;
        *(_DWORD *)&v69[6] = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%d,requestPowerMode,%d", &v68, 14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      if (*((_DWORD *)a2 + 4) == v6[6])
        break;
      v6 += 24;
      if (v6 == (int *)a1[20])
        goto LABEL_19;
    }
    ++*v6;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v38 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v39 = v6[6];
      v40 = *v6;
      *(_DWORD *)buf = 67240448;
      LODWORD(v71[0]) = v39;
      WORD2(v71[0]) = 1026;
      *(_DWORD *)((char *)v71 + 6) = v40;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v41 = v6[6];
      v42 = *v6;
      v68 = 67240448;
      *(_DWORD *)v69 = v41;
      *(_WORD *)&v69[4] = 1026;
      *(_DWORD *)&v69[6] = v42;
      LODWORD(v62) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d", &v68, v62);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v43);
      goto LABEL_65;
    }
  }
}

void sub_101816AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  double v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int *v127;
  int v128;
  int v129;
  int v130;
  BOOL v132;
  NSObject *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  double v142;
  int v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  double v158;
  double v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  int v170;
  double v171;
  int v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  const char *v179;
  uint8_t *v180;
  int v181;
  unint64_t v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  int v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  double v196;
  __int16 v197;
  int v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  int v202;
  __int16 v203;
  int v204;
  __int16 v205;
  uint64_t v206;
  __int16 v207;
  uint64_t v208;
  __int16 v209;
  int v210;
  uint8_t buf[4];
  unint64_t v212;
  __int16 v213;
  uint64_t v214;
  __int16 v215;
  uint64_t v216;
  __int16 v217;
  int v218;
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  int v222;
  __int16 v223;
  int v224;
  __int16 v225;
  double v226;
  __int16 v227;
  int v228;
  __int16 v229;
  uint64_t v230;
  __int16 v231;
  int v232;
  __int16 v233;
  int v234;
  __int16 v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  __int16 v239;
  int v240;

  *(_OWORD *)(a1 + 176) = xmmword_101BBE5E0;
  *(_DWORD *)(a1 + 192) = -1;
  *(_QWORD *)(a1 + 200) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 210) = 0;
  *(_OWORD *)(a1 + 216) = xmmword_101BBE610;
  *(_WORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_101CE0790;
  *(_BYTE *)(a1 + 256) = 0;
  v1 = *(_QWORD *)(a1 + 152);
  v2 = *(_QWORD *)(a1 + 160);
  if (v1 == v2)
    return;
  v4 = v1 + 96;
  if (v1 + 96 == v2)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(v1 + 8);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v1 + 32);
    *(_WORD *)(a1 + 208) = *(_WORD *)(v1 + 40);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(v1 + 88);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(v1 + 56);
    v20 = v1;
  }
  else
  {
    v5 = *(double *)(v1 + 104);
    v6 = *(double *)(v1 + 8);
    if (v5 >= v6)
      v7 = *(_QWORD *)(a1 + 152);
    else
      v7 = v1 + 96;
    v8 = v1 + 192;
    if (v1 + 192 != v2)
    {
      if (v5 >= v6)
        v9 = v1 + 96;
      else
        v9 = *(_QWORD *)(a1 + 152);
      v10 = v1 + 192;
      v11 = *(_QWORD *)(a1 + 152);
      while (1)
      {
        v12 = v10;
        v13 = v10 + 96;
        if (v13 == v2)
          break;
        v14 = v11 + 288;
        v15 = *(double *)(v12 + 104);
        v16 = *(double *)(v12 + 8);
        v17 = *(double *)(v7 + 8);
        v18 = *(double *)(v9 + 8);
        if (v16 >= v17)
          v19 = v7;
        else
          v19 = v12;
        if (v15 < v18)
          v14 = v9;
        if (v15 < v17)
          v7 = v13;
        if (v16 >= v18)
          v9 = v12;
        if (v15 >= v16)
        {
          v7 = v19;
          v9 = v14;
        }
        v10 = v12 + 192;
        v11 = v12;
        if (v12 + 192 == v2)
          goto LABEL_28;
      }
      if (*(double *)(v12 + 8) < *(double *)(v7 + 8))
        v7 = v12;
    }
LABEL_28:
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(v7 + 8);
    v21 = *(double *)(v1 + 112);
    v22 = *(double *)(v1 + 16);
    if (v21 >= v22)
      v23 = v1 + 96;
    else
      v23 = v1;
    if (v8 != v2)
    {
      if (v21 >= v22)
        v24 = v1;
      else
        v24 = v1 + 96;
      v25 = v1 + 192;
      v26 = v1;
      while (1)
      {
        v27 = v25;
        v28 = v25 + 96;
        if (v28 == v2)
          break;
        v29 = v26 + 288;
        v30 = *(double *)(v27 + 112);
        v31 = *(double *)(v27 + 16);
        v32 = *(double *)(v24 + 16);
        v33 = *(double *)(v23 + 16);
        if (v31 >= v32)
          v34 = v24;
        else
          v34 = v27;
        if (v30 < v33)
          v29 = v23;
        if (v30 < v32)
          v24 = v28;
        if (v31 >= v33)
          v23 = v27;
        if (v30 >= v31)
        {
          v24 = v34;
          v23 = v29;
        }
        v25 = v27 + 192;
        v26 = v27;
        if (v27 + 192 == v2)
          goto LABEL_53;
      }
      v35 = *(double *)(v27 + 16);
      if (v35 >= *(double *)(v24 + 16) && v35 >= *(double *)(v23 + 16))
        v23 = v27;
    }
LABEL_53:
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v23 + 16);
    v36 = *(double *)(v1 + 128);
    v37 = *(double *)(v1 + 32);
    if (v36 >= v37)
      v38 = v1;
    else
      v38 = v1 + 96;
    if (v8 != v2)
    {
      if (v36 >= v37)
        v39 = v1 + 96;
      else
        v39 = v1;
      v40 = v1 + 192;
      v41 = v1;
      while (1)
      {
        v42 = v40;
        v43 = v40 + 96;
        if (v43 == v2)
          break;
        v44 = v41 + 288;
        v45 = *(double *)(v42 + 128);
        v46 = *(double *)(v42 + 32);
        v47 = *(double *)(v38 + 32);
        v48 = *(double *)(v39 + 32);
        if (v46 >= v47)
          v49 = v38;
        else
          v49 = v42;
        if (v45 < v48)
          v44 = v39;
        if (v45 < v47)
          v38 = v43;
        if (v46 >= v48)
          v39 = v42;
        if (v45 >= v46)
        {
          v38 = v49;
          v39 = v44;
        }
        v40 = v42 + 192;
        v41 = v42;
        if (v42 + 192 == v2)
          goto LABEL_77;
      }
      if (*(double *)(v42 + 32) < *(double *)(v38 + 32))
        v38 = v42;
    }
LABEL_77:
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v38 + 32);
    v50 = *(unsigned __int8 *)(v1 + 136);
    v51 = *(unsigned __int8 *)(v1 + 40);
    if (v50 >= v51)
      v52 = v1 + 96;
    else
      v52 = v1;
    if (v8 != v2)
    {
      if (v50 >= v51)
        v53 = v1;
      else
        v53 = v1 + 96;
      v54 = v1 + 192;
      while (v54 + 96 != v2)
      {
        v55 = *(unsigned __int8 *)(v54 + 136);
        v56 = *(unsigned __int8 *)(v54 + 40);
        v57 = *(unsigned __int8 *)(v53 + 40);
        if (v55 >= v56)
        {
          if (v56 < v57)
            v53 = v54;
          if (v55 >= *(unsigned __int8 *)(v52 + 40))
            v52 = v54 + 96;
        }
        else
        {
          if (v55 < v57)
            v53 = v54 + 96;
          v52 = v54;
        }
        v54 += 192;
        if (v54 == v2)
          goto LABEL_99;
      }
      v58 = *(unsigned __int8 *)(v54 + 40);
      if (v58 >= *(unsigned __int8 *)(v53 + 40) && v58 >= *(unsigned __int8 *)(v52 + 40))
        v52 = v54;
    }
LABEL_99:
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(v52 + 40);
    v59 = *(unsigned __int8 *)(v1 + 137);
    v60 = *(unsigned __int8 *)(v1 + 41);
    if (v59 >= v60)
      v61 = v1 + 96;
    else
      v61 = v1;
    if (v8 != v2)
    {
      if (v59 >= v60)
        v62 = v1;
      else
        v62 = v1 + 96;
      v63 = v1 + 192;
      while (v63 + 96 != v2)
      {
        v64 = *(unsigned __int8 *)(v63 + 137);
        v65 = *(unsigned __int8 *)(v63 + 41);
        v66 = *(unsigned __int8 *)(v62 + 41);
        if (v64 >= v65)
        {
          if (v65 < v66)
            v62 = v63;
          if (v64 >= *(unsigned __int8 *)(v61 + 41))
            v61 = v63 + 96;
        }
        else
        {
          if (v64 < v66)
            v62 = v63 + 96;
          v61 = v63;
        }
        v63 += 192;
        if (v63 == v2)
          goto LABEL_121;
      }
      v67 = *(unsigned __int8 *)(v63 + 41);
      if (v67 >= *(unsigned __int8 *)(v62 + 41) && v67 >= *(unsigned __int8 *)(v61 + 41))
        v61 = v63;
    }
LABEL_121:
    *(_BYTE *)(a1 + 209) = *(_BYTE *)(v61 + 41);
    if (*(unsigned __int8 *)(v1 + 184) >= *(unsigned __int8 *)(v1 + 88))
      v68 = v1;
    else
      v68 = v1 + 96;
    if (v8 != v2)
    {
      v69 = v1 + 192;
      while (1)
      {
        v70 = v69 + 96;
        if (v69 + 96 == v2)
          break;
        v71 = *(unsigned __int8 *)(v69 + 184);
        if (v71 >= *(unsigned __int8 *)(v69 + 88))
        {
          v71 = *(unsigned __int8 *)(v69 + 88);
          v70 = v69;
        }
        if (v71 < *(unsigned __int8 *)(v68 + 88))
          v68 = v70;
        v69 += 192;
        if (v69 == v2)
          goto LABEL_135;
      }
      if (*(unsigned __int8 *)(v69 + 88) < *(unsigned __int8 *)(v68 + 88))
        v68 = v69;
    }
LABEL_135:
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(v68 + 88);
    v72 = *(double *)(v1 + 152);
    v73 = *(double *)(v1 + 56);
    if (v72 >= v73)
      v74 = v1;
    else
      v74 = v1 + 96;
    if (v8 != v2)
    {
      if (v72 >= v73)
        v75 = v1 + 96;
      else
        v75 = v1;
      v76 = v1 + 192;
      v77 = v1;
      while (1)
      {
        v78 = v76;
        v79 = v76 + 96;
        if (v79 == v2)
          break;
        v80 = v77 + 288;
        v81 = *(double *)(v78 + 152);
        v82 = *(double *)(v78 + 56);
        v83 = *(double *)(v74 + 56);
        v84 = *(double *)(v75 + 56);
        if (v82 >= v83)
          v85 = v74;
        else
          v85 = v78;
        if (v81 < v84)
          v80 = v75;
        if (v81 < v83)
          v74 = v79;
        if (v82 >= v84)
          v75 = v78;
        if (v81 >= v82)
        {
          v74 = v85;
          v75 = v80;
        }
        v76 = v78 + 192;
        v77 = v78;
        if (v78 + 192 == v2)
          goto LABEL_159;
      }
      if (*(double *)(v78 + 56) < *(double *)(v74 + 56))
        v74 = v78;
    }
LABEL_159:
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(v74 + 56);
    if (*(unsigned __int8 *)(v1 + 138) >= *(unsigned __int8 *)(v1 + 42))
      v20 = v1;
    else
      v20 = v1 + 96;
    if (v8 == v2)
    {
      v88 = *(unsigned __int8 *)(v20 + 42);
      *(_BYTE *)(a1 + 210) = v88;
      if (!v88)
        goto LABEL_203;
LABEL_176:
      v91 = *(double *)(v1 + 144);
      v92 = *(double *)(v1 + 48);
      if (v91 >= v92)
        v90 = v1 + 96;
      else
        v90 = v1;
      v93 = v1 + 192;
      if (v1 + 192 != v2)
      {
        if (v91 >= v92)
          v94 = v1;
        else
          v94 = v1 + 96;
        v95 = v1;
        while (1)
        {
          v96 = v93;
          v97 = v93 + 96;
          if (v97 == v2)
            break;
          v98 = v95 + 288;
          v99 = *(double *)(v96 + 144);
          v100 = *(double *)(v96 + 48);
          v101 = *(double *)(v94 + 48);
          v102 = *(double *)(v90 + 48);
          if (v100 >= v101)
            v103 = v94;
          else
            v103 = v96;
          if (v99 < v102)
            v98 = v90;
          if (v99 < v101)
            v94 = v97;
          if (v100 >= v102)
            v90 = v96;
          if (v99 >= v100)
          {
            v94 = v103;
            v90 = v98;
          }
          v93 = v96 + 192;
          v95 = v96;
          if (v96 + 192 == v2)
            goto LABEL_201;
        }
        v104 = *(double *)(v96 + 48);
        if (v104 >= *(double *)(v94 + 48) && v104 >= *(double *)(v90 + 48))
          v90 = v96;
      }
      goto LABEL_201;
    }
    while (1)
    {
      v86 = v8 + 96;
      if (v8 + 96 == v2)
        break;
      v87 = *(unsigned __int8 *)(v8 + 138);
      if (v87 >= *(unsigned __int8 *)(v8 + 42))
      {
        v87 = *(unsigned __int8 *)(v8 + 42);
        v86 = v8;
      }
      if (v87 < *(unsigned __int8 *)(v20 + 42))
        v20 = v86;
      v8 += 192;
      if (v8 == v2)
        goto LABEL_174;
    }
    if (*(unsigned __int8 *)(v8 + 42) < *(unsigned __int8 *)(v20 + 42))
      v20 = v8;
  }
LABEL_174:
  v89 = *(unsigned __int8 *)(v20 + 42);
  *(_BYTE *)(a1 + 210) = v89;
  if (!v89)
    goto LABEL_202;
  v90 = v1;
  if (v4 != v2)
    goto LABEL_176;
LABEL_201:
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(v90 + 48);
LABEL_202:
  if (v4 == v2)
  {
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(v1 + 64);
    goto LABEL_242;
  }
LABEL_203:
  if (*(unsigned __int8 *)(v1 + 160) >= *(unsigned __int8 *)(v1 + 64))
    v105 = v1;
  else
    v105 = v1 + 96;
  v106 = v1 + 192;
  if (v1 + 192 != v2)
  {
    v107 = v1 + 192;
    while (1)
    {
      v108 = v107 + 96;
      if (v107 + 96 == v2)
        break;
      v109 = *(unsigned __int8 *)(v107 + 160);
      if (v109 >= *(unsigned __int8 *)(v107 + 64))
      {
        v109 = *(unsigned __int8 *)(v107 + 64);
        v108 = v107;
      }
      if (v109 < *(unsigned __int8 *)(v105 + 64))
        v105 = v108;
      v107 += 192;
      if (v107 == v2)
        goto LABEL_219;
    }
    if (*(unsigned __int8 *)(v107 + 64) < *(unsigned __int8 *)(v105 + 64))
      v105 = v107;
LABEL_219:
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(v105 + 64);
    if (v4 != v2)
      goto LABEL_220;
LABEL_242:
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(v1 + 80);
    goto LABEL_243;
  }
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(v105 + 64);
LABEL_220:
  v110 = *(double *)(v1 + 176);
  v111 = *(double *)(v1 + 80);
  if (v110 >= v111)
    v112 = v1 + 96;
  else
    v112 = v1;
  if (v106 == v2)
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(v112 + 80);
LABEL_280:
    v151 = *(double *)(v1 + 168);
    v152 = *(double *)(v1 + 72);
    if (v151 >= v152)
      v124 = v1 + 96;
    else
      v124 = v1;
    if (v106 != v2)
    {
      if (v151 >= v152)
        v4 = v1;
      v153 = v1;
      while (1)
      {
        v154 = v106;
        v155 = v106 + 96;
        if (v155 == v2)
          break;
        v156 = v153 + 288;
        v157 = *(double *)(v154 + 168);
        v158 = *(double *)(v154 + 72);
        v159 = *(double *)(v4 + 72);
        v160 = *(double *)(v124 + 72);
        if (v158 >= v159)
          v161 = v4;
        else
          v161 = v154;
        if (v157 < v160)
          v156 = v124;
        if (v157 < v159)
          v4 = v155;
        if (v158 >= v160)
          v162 = v154;
        else
          v162 = v124;
        if (v157 < v158)
        {
          v124 = v162;
        }
        else
        {
          v4 = v161;
          v124 = v156;
        }
        v106 = v154 + 192;
        v153 = v154;
        if (v154 + 192 == v2)
          goto LABEL_244;
      }
      v163 = *(double *)(v154 + 72);
      if (v163 >= *(double *)(v4 + 72) && v163 >= *(double *)(v124 + 72))
        v124 = v154;
    }
    goto LABEL_244;
  }
  if (v110 >= v111)
    v113 = v1;
  else
    v113 = v1 + 96;
  v114 = v1 + 192;
  v115 = v1;
  while (1)
  {
    v116 = v114;
    v117 = v114 + 96;
    if (v117 == v2)
      break;
    v118 = v115 + 288;
    v119 = *(double *)(v116 + 176);
    v120 = *(double *)(v116 + 80);
    v121 = *(double *)(v113 + 80);
    v122 = *(double *)(v112 + 80);
    if (v120 >= v121)
      v123 = v113;
    else
      v123 = v116;
    if (v119 < v122)
      v118 = v112;
    if (v119 < v121)
      v113 = v117;
    if (v120 >= v122)
      v112 = v116;
    if (v119 >= v120)
    {
      v113 = v123;
      v112 = v118;
    }
    v114 = v116 + 192;
    v115 = v116;
    if (v116 + 192 == v2)
      goto LABEL_279;
  }
  v150 = *(double *)(v116 + 80);
  if (v150 >= *(double *)(v113 + 80) && v150 >= *(double *)(v112 + 80))
    v112 = v116;
LABEL_279:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(v112 + 80);
  if (v4 != v2)
    goto LABEL_280;
LABEL_243:
  v124 = v1;
LABEL_244:
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(v124 + 72);
  v125 = (unsigned __int128)((v2 - v1) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v126 = (v125 >> 4) + ((unint64_t)v125 >> 63);
  if (v126 <= 1)
    v126 = 1;
  v127 = (int *)(v1 + 24);
  v128 = -1;
  do
  {
    v130 = *v127;
    v127 += 24;
    v129 = v130;
    if (v130 == 1 || v128 == 1)
    {
      v128 = 1;
LABEL_265:
      *(_DWORD *)(a1 + 192) = v128;
      goto LABEL_266;
    }
    if (v129)
      v132 = v128 == 0;
    else
      v132 = 1;
    if (v132)
    {
      v128 = 0;
      goto LABEL_265;
    }
    if (v129 == 2 || v128 == 2)
    {
      v128 = 2;
      goto LABEL_265;
    }
LABEL_266:
    --v126;
  }
  while (v126);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v134 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    v136 = *(_QWORD *)(a1 + 176);
    v137 = *(_QWORD *)(a1 + 184);
    v138 = *(_DWORD *)(a1 + 192);
    v139 = *(_QWORD *)(a1 + 200);
    v140 = *(unsigned __int8 *)(a1 + 208);
    v141 = *(unsigned __int8 *)(a1 + 209);
    v142 = *(double *)(a1 + 224);
    if (v142 == 1.79769313e308)
      v142 = -1.0;
    v143 = *(unsigned __int8 *)(a1 + 210);
    v144 = *(_QWORD *)(a1 + 216);
    v145 = *(unsigned __int8 *)(a1 + 232);
    v146 = *(unsigned __int8 *)(a1 + 233);
    v147 = *(_QWORD *)(a1 + 240);
    v148 = *(_QWORD *)(a1 + 248);
    v149 = *(unsigned __int8 *)(a1 + 256);
    *(_DWORD *)buf = 134352640;
    v212 = v135;
    v213 = 2050;
    v214 = v136;
    v215 = 2050;
    v216 = v137;
    v217 = 1026;
    v218 = v138;
    v219 = 2050;
    v220 = v139;
    v221 = 1026;
    v222 = v140;
    v223 = 1026;
    v224 = v141;
    v225 = 2050;
    v226 = v142;
    v227 = 1026;
    v228 = v143;
    v229 = 2050;
    v230 = v144;
    v231 = 1026;
    v232 = v145;
    v233 = 1026;
    v234 = v146;
    v235 = 2050;
    v236 = v147;
    v237 = 2050;
    v238 = v148;
    v239 = 1026;
    v240 = v149;
    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "CLRGCM,updateCurrentConfigurations,size,%{public}zu,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", buf, 0x7Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    v165 = *(_QWORD *)(a1 + 176);
    v166 = *(_QWORD *)(a1 + 184);
    v167 = *(_DWORD *)(a1 + 192);
    v168 = *(_QWORD *)(a1 + 200);
    v169 = *(unsigned __int8 *)(a1 + 208);
    v170 = *(unsigned __int8 *)(a1 + 209);
    v171 = *(double *)(a1 + 224);
    if (v171 == 1.79769313e308)
      v171 = -1.0;
    v172 = *(unsigned __int8 *)(a1 + 210);
    v173 = *(_QWORD *)(a1 + 216);
    v174 = *(unsigned __int8 *)(a1 + 232);
    v175 = *(unsigned __int8 *)(a1 + 233);
    v176 = *(_QWORD *)(a1 + 240);
    v177 = *(_QWORD *)(a1 + 248);
    v178 = *(unsigned __int8 *)(a1 + 256);
    v181 = 134352640;
    v182 = v164;
    v183 = 2050;
    v184 = v165;
    v185 = 2050;
    v186 = v166;
    v187 = 1026;
    v188 = v167;
    v189 = 2050;
    v190 = v168;
    v191 = 1026;
    v192 = v169;
    v193 = 1026;
    v194 = v170;
    v195 = 2050;
    v196 = v171;
    v197 = 1026;
    v198 = v172;
    v199 = 2050;
    v200 = v173;
    v201 = 1026;
    v202 = v174;
    v203 = 1026;
    v204 = v175;
    v205 = 2050;
    v206 = v176;
    v207 = 2050;
    v208 = v177;
    v209 = 1026;
    v210 = v178;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,updateCurrentConfigurations,size,%{public}zu,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", &v181, 124);
    v180 = (uint8_t *)v179;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::updateCurrentConfigurations()", "%s\n", v179);
    if (v180 != buf)
      free(v180);
  }
}

void sub_1018176D0(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  int v13;
  double v14;
  double v15;
  double *v16;
  unint64_t v17;
  double *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  NSObject *v36;
  unint64_t v37;
  unint64_t v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[10];
  uint8_t buf[4];
  _QWORD v49[203];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
    *(_DWORD *)buf = 134349056;
    v49[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
    v46 = 134349056;
    *(_QWORD *)v47 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu", &v46, 12);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  v6 = a1[33];
  if (v6 == a1[34])
  {
LABEL_19:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToCoreAnalyticsInfo,adding new client type", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      LOWORD(v46) = 0;
      LODWORD(v45) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addClientToCoreAnalyticsInfo,adding new client type", &v46, v45);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    v13 = *(_DWORD *)(a2 + 16);
    v14 = sub_1001FCBB4();
    v15 = v14;
    v16 = (double *)a1[34];
    v17 = a1[35];
    if ((unint64_t)v16 >= v17)
    {
      v19 = (double *)a1[33];
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v19) >> 4);
      v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555)
        sub_100259694();
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v19) >> 4);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x2AAAAAAAAAAAAAALL)
        v23 = 0x555555555555555;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)sub_100313718((uint64_t)(a1 + 35), v23);
        v19 = (double *)a1[33];
        v16 = (double *)a1[34];
      }
      else
      {
        v24 = 0;
      }
      v32 = &v24[48 * v20];
      *(double *)v32 = v15;
      *((_DWORD *)v32 + 2) = 1;
      *((_DWORD *)v32 + 4) = v13;
      *((_QWORD *)v32 + 3) = 0;
      v33 = &v24[48 * v23];
      *((_DWORD *)v32 + 8) = 0;
      *((_QWORD *)v32 + 5) = 0;
      v18 = (double *)(v32 + 48);
      if (v16 != v19)
      {
        do
        {
          v34 = *((_OWORD *)v16 - 3);
          v35 = *((_OWORD *)v16 - 1);
          *((_OWORD *)v32 - 2) = *((_OWORD *)v16 - 2);
          *((_OWORD *)v32 - 1) = v35;
          *((_OWORD *)v32 - 3) = v34;
          v32 -= 48;
          v16 -= 6;
        }
        while (v16 != v19);
        v19 = (double *)a1[33];
      }
      a1[33] = v32;
      a1[34] = v18;
      a1[35] = v33;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v16 = v14;
      *((_DWORD *)v16 + 2) = 1;
      *((_DWORD *)v16 + 4) = v13;
      v16[3] = 0.0;
      *((_DWORD *)v16 + 8) = 0;
      v18 = v16 + 6;
      v16[5] = 0.0;
    }
    a1[34] = v18;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v36 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
      *(_DWORD *)buf = 134349056;
      v49[0] = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
      v46 = 134349056;
      *(_QWORD *)v47 = v43;
      LODWORD(v45) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu", &v46, v45);
      v31 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v44);
LABEL_65:
      if (v31 != buf)
        free(v31);
    }
  }
  else
  {
    while (1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_DWORD *)(v6 + 16);
        *(_DWORD *)buf = 67109120;
        LODWORD(v49[0]) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v9 = *(_DWORD *)(v6 + 16);
        v46 = 67109120;
        *(_DWORD *)v47 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%d", &v46);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(v6 + 16))
        break;
      v6 += 48;
      if (v6 == a1[34])
        goto LABEL_19;
    }
    ++*(_DWORD *)(v6 + 8);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_DWORD *)(v6 + 16);
      v27 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)buf = 67240448;
      LODWORD(v49[0]) = v26;
      WORD2(v49[0]) = 1026;
      *(_DWORD *)((char *)v49 + 6) = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v28 = *(_DWORD *)(v6 + 16);
      v29 = *(_DWORD *)(v6 + 8);
      v46 = 67240448;
      *(_DWORD *)v47 = v28;
      *(_WORD *)&v47[4] = 1026;
      *(_DWORD *)&v47[6] = v29;
      LODWORD(v45) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d", &v46, v45);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v30);
      goto LABEL_65;
    }
  }
}

void sub_101817F70(uint64_t a1, int *a2)
{
  NSObject *v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  double *v9;
  uint64_t v10;
  int *v11;
  int v12;
  double v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  uint8_t *v25;
  unint64_t v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  _BYTE v36[14];
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  _BYTE v42[14];
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v42 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
    v35 = 134349056;
    *(_QWORD *)v36 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu", &v35, 12);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v7 = *(_QWORD *)(a1 + 264);
  v6 = *(int **)(a1 + 272);
  if ((int *)v7 != v6)
  {
    v8 = *a2;
    v9 = (double *)(v7 + 16);
    v10 = -v7;
    while (v8 != *(_DWORD *)v9)
    {
      v11 = (int *)(v9 + 4);
      v9 += 6;
      v10 -= 48;
      if (v11 == v6)
        goto LABEL_20;
    }
    v12 = *((_DWORD *)v9 - 2) - 1;
    *((_DWORD *)v9 - 2) = v12;
    if (!v12)
    {
      v13 = sub_1001FCBB4();
      v9[1] = v13 - *(v9 - 2);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_DWORD *)v9;
        v16 = *((_QWORD *)v9 + 1);
        v17 = *((_QWORD *)v9 - 2);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)v42 = v15;
        *(_WORD *)&v42[4] = 2050;
        *(_QWORD *)&v42[6] = v16;
        v43 = 2050;
        v44 = v13;
        v45 = 2050;
        v46 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,now,%{public}.3lf,clientAddedAt,%{public}.3lf", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v29 = *(_DWORD *)v9;
        v30 = *((_QWORD *)v9 + 1);
        v31 = *((_QWORD *)v9 - 2);
        v35 = 67240960;
        *(_DWORD *)v36 = v29;
        *(_WORD *)&v36[4] = 2050;
        *(_QWORD *)&v36[6] = v30;
        v37 = 2050;
        v38 = v13;
        v39 = 2050;
        v40 = v31;
        LODWORD(v34) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,now,%{public}.3lf,clientAddedAt,%{public}.3lf", &v35, v34);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v18 = sub_10073C788();
      sub_100747600(v18, (int *)v9);
      v19 = *(_QWORD *)(a1 + 272);
      v20 = v19 - (48 - v10);
      if (v19 != 48 - v10)
        memmove((void *)-v10, (const void *)(48 - v10), v19 - (48 - v10));
      *(_QWORD *)(a1 + 272) = v20 - v10;
    }
  }
LABEL_20:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v42 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
    v35 = 134349056;
    *(_QWORD *)v36 = v26;
    LODWORD(v34) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu", &v35, v34);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
}

uint64_t sub_1018184F8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  int v23;
  uint8_t buf[4];
  int v25;

  v3 = *(_QWORD *)(a1 + 152);
  if (v3 == *(_QWORD *)(a1 + 160))
    return 0;
  while (1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)buf = 67109120;
      v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v9 = *(_DWORD *)(v3 + 24);
      v22 = 67109120;
      v23 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,clientIter->clientInfo.powerMode,%d", &v22);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::getRegisteredClientInformation(const CLRhythmicGnssWakeMode &, CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    if (*a2 == *(_DWORD *)(v3 + 24))
      break;
    v3 += 96;
    if (v3 == *(_QWORD *)(a1 + 160))
      return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)buf = 67109120;
    v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v19 = *(_DWORD *)(v3 + 24);
    v22 = 67109120;
    v23 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,clientIter->clientInfo.powerMode,%d", &v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::getRegisteredClientInformation(const CLRhythmicGnssWakeMode &, CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v15 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a3 + 16) = v15;
  v16 = *(_OWORD *)(v3 + 40);
  v17 = *(_OWORD *)(v3 + 56);
  v18 = *(_OWORD *)(v3 + 72);
  *(_BYTE *)(a3 + 80) = *(_BYTE *)(v3 + 88);
  *(_OWORD *)(a3 + 48) = v17;
  *(_OWORD *)(a3 + 64) = v18;
  *(_OWORD *)(a3 + 32) = v16;
  return 1;
}

uint64_t sub_10181886C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  int v23;
  uint8_t buf[4];
  int v25;

  v3 = *(_QWORD *)(a1 + 152);
  if (v3 == *(_QWORD *)(a1 + 160))
    return 0;
  while (1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)buf = 67109120;
      v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v9 = *(_DWORD *)(v3 + 24);
      v22 = 67109120;
      v23 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,clientIter->clientInfo.powerMode,%d", &v22);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::modifyRegisteredGnssClientConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &, const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(v3 + 24))
      break;
    v3 += 96;
    if (v3 == *(_QWORD *)(a1 + 160))
      return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)buf = 67109120;
    v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v19 = *(_DWORD *)(v3 + 24);
    v22 = 67109120;
    v23 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,clientIter->clientInfo.powerMode,%d", &v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::modifyRegisteredGnssClientConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &, const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v15 = *a3;
  *(_OWORD *)(v3 + 24) = a3[1];
  *(_OWORD *)(v3 + 8) = v15;
  v16 = a3[2];
  v17 = a3[3];
  v18 = a3[4];
  *(_BYTE *)(v3 + 88) = *((_BYTE *)a3 + 80);
  *(_OWORD *)(v3 + 72) = v18;
  *(_OWORD *)(v3 + 56) = v17;
  *(_OWORD *)(v3 + 40) = v16;
  return 1;
}

BOOL sub_101818BE0(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  uint8_t *v13;
  _OWORD v14[5];
  uint64_t v15;
  _WORD v16[8];
  __int128 v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  __int128 v22;
  __int16 v23;
  __int128 v24;
  char v25;
  uint8_t buf[1640];

  v17 = xmmword_101BBE5E0;
  v18 = -1;
  v19 = 0x7FEFFFFFFFFFFFFFLL;
  v20 = 0;
  v21 = 0;
  v22 = xmmword_101BBE610;
  v23 = 1;
  v24 = xmmword_101CE0790;
  v25 = 0;
  if ((sub_1018184F8(a1, a2, (uint64_t)&v17) & 1) != 0)
  {
    if (sub_101818FD0((uint64_t)&v17, (uint64_t)a3))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGCM,updateRegisteredClientConfiguration,no configuration changed", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,updateRegisteredClientConfiguration,no configuration changed", v16, 2);
LABEL_32:
        v13 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::updateRegisteredClientConfiguration(const CLRhythmicGnssWakeMode &, const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v7);
        if (v13 != buf)
          free(v13);
        return 0;
      }
    }
    else if ((sub_10181886C(a1, (uint64_t)&v17, a3) & 1) != 0)
    {
      sub_101816AC8(a1);
      v9 = *(_QWORD *)(a1 + 144);
      if (v9)
      {
        v10 = *(_OWORD *)(a1 + 224);
        v14[2] = *(_OWORD *)(a1 + 208);
        v14[3] = v10;
        v14[4] = *(_OWORD *)(a1 + 240);
        v15 = *(_QWORD *)(a1 + 256);
        v11 = *(_OWORD *)(a1 + 192);
        v14[0] = *(_OWORD *)(a1 + 176);
        v14[1] = v11;
        sub_1017988EC(v9, (uint64_t *)v14);
      }
      return 1;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRGCM,updateRegisteredClientConfiguration,config could not be changed", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,updateRegisteredClientConfiguration,config could not be changed", v16, 2);
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGCM,updateRegisteredClientConfiguration,no registered client", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,updateRegisteredClientConfiguration,no registered client", v16, 2);
      goto LABEL_32;
    }
  }
  return result;
}

BOOL sub_101818FD0(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
      && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57)
      && *(double *)(a1 + 64) == *(double *)(a2 + 64)
      && *(double *)(a1 + 72) == *(double *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80);
}

uint64_t sub_1018190BC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t i;
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _OWORD v23[5];
  uint64_t v24;
  _WORD v25[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRGCM,addProactiveGnssClientWithConfiguration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v25[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addProactiveGnssClientWithConfiguration", v25, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  for (i = *(_QWORD *)(a1 + 152); i != *(_QWORD *)(a1 + 160); i += 96)
  {
    if (*(_DWORD *)(i + 24) == 2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGCM,addProactiveGnssClientWithConfiguration,only one proactive client is allowed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v25[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addProactiveGnssClientWithConfiguration,only one proactive client is allowed", v25, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      return 0;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGCM,addProactiveGnssClientWithConfiguration starting Gps", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v25[0] = 0;
    LODWORD(v22) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,addProactiveGnssClientWithConfiguration starting Gps", v25, v22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  sub_1018160E4((_QWORD *)a1, a2);
  sub_101816AC8(a1);
  sub_1018176D0((_QWORD *)a1, (uint64_t)a2);
  v7 = *(_QWORD *)(a1 + 144);
  if (v7)
  {
    v8 = *(_OWORD *)(a1 + 224);
    v23[2] = *(_OWORD *)(a1 + 208);
    v23[3] = v8;
    v23[4] = *(_OWORD *)(a1 + 240);
    v24 = *(_QWORD *)(a1 + 256);
    v9 = *(_OWORD *)(a1 + 192);
    v23[0] = *(_OWORD *)(a1 + 176);
    v23[1] = v9;
    sub_1017988EC(v7, (uint64_t *)v23);
  }
  if (!*(_QWORD *)(a1 + 136))
    return 1;
  v10 = a1 + 112;
  v11 = *(_DWORD *)(a1 + 192);
  v12 = -1431655765 * ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
  v13 = 1;
  sub_10181572C(v10, 1, v11, v12);
  return v13;
}

void sub_101819560(uint64_t a1, double a2)
{
  uint64_t v4;
  char v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  char v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  _DWORD v29[2];
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;

  v4 = *(_QWORD *)(a1 + 264);
  if (v4 == *(_QWORD *)(a1 + 272))
  {
LABEL_5:
    v5 = 0;
LABEL_16:
    v9 = *(_QWORD *)(a1 + 264);
    if (v9 != v4)
    {
      do
      {
        v27 = 0;
        *(_DWORD *)buf = *(_DWORD *)(v9 + 16);
        sub_101814364(a1, buf, (uint64_t)&v23);
        if (v27)
          v10 = v5;
        else
          v10 = 0;
        if ((v10 & 1) == 0)
        {
          *(double *)(v9 + 40) = *(double *)(v9 + 40) + a2;
          ++*(_DWORD *)(v9 + 32);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(_DWORD *)(v9 + 16);
          v13 = *(_QWORD *)(v9 + 24);
          v14 = *(_QWORD *)(v9 + 40);
          v15 = *(_DWORD *)(v9 + 32);
          *(_DWORD *)buf = 67240960;
          v37 = v12;
          v38 = 2050;
          v39 = v13;
          v40 = 2050;
          v41 = v14;
          v42 = 1026;
          v43 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,totalGPSDuration,%{public}.3lf,sessionCount,%{public}d", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0D68);
          v16 = *(_DWORD *)(v9 + 16);
          v17 = *(_QWORD *)(v9 + 24);
          v18 = *(_QWORD *)(v9 + 40);
          v19 = *(_DWORD *)(v9 + 32);
          v29[0] = 67240960;
          v29[1] = v16;
          v30 = 2050;
          v31 = v17;
          v32 = 2050;
          v33 = v18;
          v34 = 1026;
          v35 = v19;
          LODWORD(v22) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,totalGPSDuration,%{public}.3lf,sessionCount,%{public}d", v29, v22);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::rhythmicGnssSessionUsageDetails(double)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        v9 += 48;
      }
      while (v9 != *(_QWORD *)(a1 + 272));
    }
  }
  else
  {
    while (1)
    {
      v23 = xmmword_101BBE5E0;
      v24 = -1;
      v25 = 0x7FEFFFFFFFFFFFFFLL;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      *(_DWORD *)buf = *(_DWORD *)(v4 + 16);
      if ((sub_101814364(a1, buf, (uint64_t)&v23) & 1) == 0)
        break;
      if (!v27)
      {
        v4 = *(_QWORD *)(a1 + 272);
        v5 = 1;
        goto LABEL_16;
      }
      v4 += 48;
      if (v4 == *(_QWORD *)(a1 + 272))
        goto LABEL_5;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGCM,rhythmicGnssSessionUsageDetails,invalid mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      LOWORD(v29[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,rhythmicGnssSessionUsageDetails,invalid mode", v29, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::rhythmicGnssSessionUsageDetails(double)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1018199A0(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  double v4;
  NSObject *v5;
  uint8_t *v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  unint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  __int16 v18[8];
  _BYTE v19[22];
  uint64_t v20;
  __int16 v21;
  char v22;
  __int128 v23;
  __int16 v24;
  __int128 v25;
  char v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  double v30;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    *(_DWORD *)buf = 134349056;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 5);
    *(_DWORD *)v19 = 134349056;
    *(_QWORD *)&v19[4] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback,size,%{public}zu", v19, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::RhythmicGnssClientManagerHeartBeatTimerCallback()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*(_QWORD *)(a1 + 152) == *(_QWORD *)(a1 + 160) || (sub_10181A070(a1) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback no waking mode client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      *(_WORD *)v19 = 0;
      LODWORD(v17) = 2;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback no waking mode client", v19, v17);
      goto LABEL_50;
    }
  }
  else if (*(_BYTE *)(a1 + 289))
  {
    if (*(_BYTE *)(a1 + 288) || (v4 = sub_1001FCBB4() - *(double *)(a1 + 296), v4 >= 60.0))
    {
      *(_BYTE *)(a1 + 289) = 0;
      *(_OWORD *)v19 = xmmword_101BBE5E0;
      *(_DWORD *)&v19[16] = -1;
      v20 = 0x7FEFFFFFFFFFFFFFLL;
      v21 = 0;
      v22 = 0;
      v23 = xmmword_101BBE610;
      v24 = 1;
      v25 = xmmword_101CE0790;
      v26 = 0;
      *(_DWORD *)buf = 1;
      if ((sub_101814364(a1, buf, (uint64_t)v19) & 1) != 0)
      {
        sub_101816074(a1, (uint64_t)v19);
        *(_DWORD *)buf = 1;
        sub_101818BE0(a1, buf, (__int128 *)v19);
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback,can not read config", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        v18[0] = 0;
        LODWORD(v17) = 2;
        v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback,can not read config", v18, v17);
        v13 = v12;
        sub_100512490("Generic", 1, 0, 0, "void CLRhythmicGnssClientManager::RhythmicGnssClientManagerHeartBeatTimerCallback()", "%s\n", v11);
        goto LABEL_51;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        v28 = 0x404E000000000000;
        v29 = 2050;
        v30 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGCM,RunningStopped less than,%{public}.3lf,timeElapsed,%{public}.3lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0D68);
        *(_DWORD *)v19 = 134349312;
        *(_QWORD *)&v19[4] = 0x404E000000000000;
        *(_WORD *)&v19[12] = 2050;
        *(double *)&v19[14] = v4;
        LODWORD(v17) = 22;
        v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,RunningStopped less than,%{public}.3lf,timeElapsed,%{public}.3lf", v19, v17);
LABEL_50:
        v13 = v6;
        sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::RhythmicGnssClientManagerHeartBeatTimerCallback()", "%s\n", v7);
LABEL_51:
        if (v13 != buf)
          free(v13);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback state is up to date", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      *(_WORD *)v19 = 0;
      LODWORD(v17) = 2;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback state is up to date", v19, v17);
      goto LABEL_50;
    }
  }
}

uint64_t sub_10181A070(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v1 = *(_QWORD *)(a1 + 152);
  if (v1 == *(_QWORD *)(a1 + 160))
    return 0;
  while (1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(v1 + 24);
      *(_DWORD *)buf = 67109120;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLRGCM,isWakingModeClientActive,clientInfo.powerMode,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v5 = *(_DWORD *)(v1 + 24);
      v12[0] = 67109120;
      v12[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,isWakingModeClientActive,clientInfo.powerMode,%d", v12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::isWakingModeClientActive()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    if (*(_DWORD *)(v1 + 24) == 1)
      break;
    v1 += 96;
    if (v1 == *(_QWORD *)(a1 + 160))
      return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGCM,isWakingModeClientActive,valid client", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRGCM,isWakingModeClientActive,valid client", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::isWakingModeClientActive()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return 1;
}

void sub_10181A39C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0D68);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGCM,onMotionStateWorkoutNotification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v15 = *a3;
    v24 = 67240192;
    LODWORD(v25) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGCM,onMotionStateWorkoutNotification,%{public}d", &v24, 8);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::onMotionStateWorkoutNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (*a3 == 2)
  {
    v9 = *(_QWORD *)(a4 + 112);
    v11 = v9 == 2 || v9 == 17;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(unsigned __int8 *)(a1 + 288);
      *(_DWORD *)buf = 134349568;
      v31 = v9;
      v32 = 1026;
      v33 = v13;
      v34 = 1026;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLRGCM,onMotionStateWorkoutNotification,workout,%{public}ld,fIsRunningWorkout,%{public}d,newRunningWorkoutState,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      v18 = *(unsigned __int8 *)(a1 + 288);
      v24 = 134349568;
      v25 = v9;
      v26 = 1026;
      v27 = v18;
      v28 = 1026;
      v29 = v11;
      LODWORD(v23) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLRGCM,onMotionStateWorkoutNotification,workout,%{public}ld,fIsRunningWorkout,%{public}d,newRunningWorkoutState,%{public}d", &v24, v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::onMotionStateWorkoutNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (*(unsigned __int8 *)(a1 + 288) != v11)
    {
      *(_BYTE *)(a1 + 288) = v11;
      *(double *)(a1 + 296) = sub_1001FCBB4();
      *(_BYTE *)(a1 + 289) = 1;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0D68);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLRGCM,onMotionStateWorkoutNotification,invalid notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0D68);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRGCM,onMotionStateWorkoutNotification,invalid notification", &v24, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::onMotionStateWorkoutNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
}

void sub_10181A834(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10181A860(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10181A890()
{
  operator delete();
}

_QWORD *sub_10181A8A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0DB8;
  result[1] = v3;
  return result;
}

uint64_t sub_10181A8D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0DB8;
  a2[1] = v2;
  return result;
}

void sub_10181A8F4(uint64_t a1)
{
  sub_1018199A0(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10181A8FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10181A938()
{
}

void sub_10181A948()
{
  operator delete();
}

_QWORD *sub_10181A95C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0E38;
  result[1] = v3;
  return result;
}

uint64_t sub_10181A990(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0E38;
  a2[1] = v2;
  return result;
}

void sub_10181A9AC(uint64_t a1, double *a2)
{
  sub_101819560(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10181A9B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10181A9F4()
{
}

uint64_t sub_10181AA00(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101796D90(result);
    operator delete();
  }
  return result;
}

void sub_10181AA3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint8_t buf[18];

  v14 = a2;
  v13 = a3;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = a2;
  sub_100270E34(a1 + 712, a5);
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 760) = a1 + 768;
  *(_QWORD *)(a1 + 784) = 0xFF000000FFLL;
  *(_BYTE *)(a1 + 792) = sub_1001DC538();
  sub_101833C9C(a1 + 800, a2, a3);
  *(_BYTE *)(a1 + 1200) = a4;
  *(_BYTE *)(a1 + 1201) = a3;
  *(_QWORD *)(a1 + 1204) = 0;
  *(_QWORD *)(a1 + 1212) = 0;
  *(_QWORD *)(a1 + 1220) = 0;
  *(_QWORD *)(a1 + 1228) = 0xFF00000000;
  *(_WORD *)(a1 + 1236) = 0;
  *(_QWORD *)(a1 + 1240) = 0;
  v12[1] = a1;
  v12[2] = a1;
  v12[0] = objc_msgSend(objc_msgSend(*(id *)(a1 + 704), "silo"), "queue");
  sub_1018252E4(v12, (unsigned __int8 *)(a1 + 1200), (unsigned __int8 *)(a1 + 1201), buf);
  sub_1002B7674(a1 + 744, (__int128 *)buf);
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_10181C290();
}

void sub_10181BE3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;

  v7 = *(_QWORD *)(v1 + 1240);
  *(_QWORD *)(v1 + 1240) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(void **)(v1 + 1208);
  if (v8)
  {
    *(_QWORD *)(v1 + 1216) = v8;
    operator delete(v8);
  }
  sub_101833D50(v5);
  sub_101825298(v4, *(_QWORD **)(v1 + 768));
  sub_100261F44(v3);
  v9 = *(_QWORD **)(v1 + 736);
  if (v9 == v2)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v10 = 5;
    v2 = *(_QWORD **)(v1 + 736);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v10))(v2);
LABEL_10:
  sub_10087B6D0(v1);
  _Unwind_Resume(a1);
}

void sub_10181C290()
{
  operator new();
}

void sub_10181C4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v29 = a16;
  if (a16 == v28)
  {
    v30 = 4;
    v29 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  v31 = a20;
  if (a20 == &a17)
  {
    v32 = 4;
    v31 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_11:
  v33 = a24;
  if (a24 == &a21)
  {
    v34 = 4;
    v33 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_16;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_16:
  sub_100261F44((uint64_t)&a11);
  v35 = a28;
  if (a28 == &a25)
  {
    v36 = 4;
    v35 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_21;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_21:
  operator delete();
}

_QWORD *sub_10181C5D0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ResetDataReqParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101825B6C;
  v32[3] = &unk_1021D11A8;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181CAA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181CAE8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PositionRequestFromModem]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_1018263FC;
  v32[3] = &unk_1021D1298;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181CFBC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181D000(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsNavigationModelFromModem]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101826CE4;
  v32[3] = &unk_1021D1388;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181D4D4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181D518(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsAcqAssistanceFromModem]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101827624;
  v32[3] = &unk_1021D1478;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181D9EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181DA30(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ReferenceLocationFromModem]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101827F40;
  v32[3] = &unk_1021D1568;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181DF04(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181DF48(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsReferenceTimeFromModem]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101828804;
  v32[3] = &unk_1021D1658;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181E41C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181E460(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GnssAbortReqParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101829100;
  v32[3] = &unk_1021D1748;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181E934(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181E978(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_1018299A4;
  v32[3] = &unk_1021D1838;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181EE4C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181EE90(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosLocationRequestStatusIndParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_10182A250;
  v32[3] = &unk_1021D1928;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181F364(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181F3A8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::CellFTAssistanceFromModem]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_10182AAF0;
  v32[3] = &unk_1021D1A18;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181F87C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181F8C0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosIs801GpsLocationIndParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_10182B3B8;
  v32[3] = &unk_1021D1B08;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10181FD94(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10181FDD8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::WlanMeasReqParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_10182BC64;
  v32[3] = &unk_1021D1BF8;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_1018202AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1018202F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNilrInterfaceController::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 704), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D0EC8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNilrInterfaceController::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D0EC8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNilrInterfaceController::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101820594(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1018204A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018204CC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 1208);
  if (v3)
  {
    *(_QWORD *)(a1 + 1216) = v3;
    operator delete(v3);
  }
  sub_101833D50(a1 + 800);
  sub_101825298(a1 + 760, *(_QWORD **)(a1 + 768));
  sub_100261F44(a1 + 744);
  v4 = *(_QWORD **)(a1 + 736);
  if (v4 == (_QWORD *)(a1 + 712))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 712);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return sub_10087B6D0(a1);
}

uint64_t sub_101820564(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 32);
  if (v1)
    return v1 + 312;
  else
    return 0;
}

uint64_t sub_10182057C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 32);
  if (v1)
    return v1 + 320;
  else
    return 0;
}

void sub_101820594(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE buf[1632];

  HIBYTE(v17) = 0;
  if (*a3 == 4)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021D0EE8);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#timingadvance Asset Harvest notification data: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021D0EE8);
      v12 = qword_1022A0208;
      v18 = 138477827;
      v19 = sub_10011A5AC(a4);
      LODWORD(v17) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "#timingadvance Asset Harvest notification data: %{private}@", &v18, v17);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_100119F3C();
    if (sub_100006BB4(a4, "CellHarvest", buf)
      && sub_1001E4874((uint64_t)buf, "TimingAdvance", (BOOL *)&v17 + 7))
    {
      *(_BYTE *)(a1 + 1237) = HIBYTE(v17);
    }
    sub_10011A5A8(buf);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,setTimingAdvanceConfig(allowTimingAdvance)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    LODWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,setTimingAdvanceConfig(allowTimingAdvance)", &v18);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (sub_1001D9934(a1, 0))
  {
    *(_QWORD *)buf = &dword_101CE0B30;
    v8 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018516E8((uint64_t)v8[5], (_BYTE *)&v17 + 7);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_101820A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_101820A84(uint64_t a1, signed int *a2, unsigned int a3)
{
  NSObject *v6;
  signed int v7;
  uint64_t **v8;
  NSObject *v9;
  signed int v10;
  signed int v11;
  double v12;
  uint8_t *v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  signed int v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  uint8_t *v21;
  int v22;
  signed int v23;
  uint8_t buf[8];

  if (!sub_1001D9934(a1, *a2))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#Warning,#EmergSettings, Unexpected instance,%d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_22;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v11 = *a2;
    v22 = 67109120;
    v23 = v11;
    v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#Warning,#EmergSettings, Unexpected instance,%d", &v22);
    v14 = v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v12);
LABEL_32:
    if (v14 != buf)
      free(v14);
    goto LABEL_22;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,handleEmergencySettingsChange(locSettings, reason)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = *a2;
    v22 = 67109120;
    v23 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,handleEmergencySettingsChange(locSettings, reason)", &v22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (sub_1001D9934(a1, *a2))
  {
    *(_QWORD *)buf = a2;
    v8 = sub_100041CE0((uint64_t **)(a1 + 760), a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018518AC((uint64_t)v8[5], (uint64_t)a2, a3);
    goto LABEL_22;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    LOWORD(v22) = 0;
    v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v22, 2);
    v14 = v21;
    sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v20);
    goto LABEL_32;
  }
LABEL_22:
  sub_1018361B8(a1 + 800, a2, a3);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 40);
  if (v16)
    sub_101697970(v16, (uint64_t *)a2, a3);
}

void sub_101820F14(uint64_t a1, char **a2)
{
  NSObject *v4;
  uint64_t **v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint8_t buf[8];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_RawSuplInit(suplInitBuffer)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v19 = 67109120;
    v20 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_RawSuplInit(suplInitBuffer)", &v19);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (sub_1001D9934(a1, 0))
  {
    *(_QWORD *)buf = &dword_101CE0B30;
    v5 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018518A4((uint64_t)v5[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v19, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (sub_1001D9934(a1, 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_RawSuplInit(suplInitBuffer)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v19 = 67109120;
      v20 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_RawSuplInit(suplInitBuffer)", &v19);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (sub_1001D9934(a1, 1))
    {
      *(_QWORD *)buf = &dword_101CE0B34;
      v8 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_1018518A4((uint64_t)v8[5], a2);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        LOWORD(v19) = 0;
        LODWORD(v18) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v19, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
}

void sub_1018214F8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t **v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint8_t buf[8];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,handleNilrLockoutStatus(lockNilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v19 = 67109120;
    v20 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,handleNilrLockoutStatus(lockNilr)", &v19);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (sub_1001D9934(a1, 0))
  {
    *(_QWORD *)buf = &dword_101CE0B30;
    v5 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101851BE0((uint64_t)v5[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v19, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (sub_1001D9934(a1, 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,handleNilrLockoutStatus(lockNilr)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v19 = 67109120;
      v20 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,handleNilrLockoutStatus(lockNilr)", &v19);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (sub_1001D9934(a1, 1))
    {
      *(_QWORD *)buf = &dword_101CE0B34;
      v8 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_101851BE0((uint64_t)v8[5], a2);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        LOWORD(v19) = 0;
        LODWORD(v18) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v19, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
}

void sub_101821ADC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 1237);
    v4 = *(unsigned __int8 *)(a1 + 1236);
    *(_DWORD *)buf = 67109376;
    v19 = v3;
    v20 = 1024;
    v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#timingadvance,query timing advance,isTimingAdvanceEnabled, %d,isDeviceInRRCState %d ", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = *(unsigned __int8 *)(a1 + 1237);
    v8 = *(unsigned __int8 *)(a1 + 1236);
    v14 = 67109376;
    v15 = v7;
    v16 = 1024;
    v17 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,query timing advance,isTimingAdvanceEnabled, %d,isDeviceInRRCState %d ", &v14, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::queryTimingAdvance()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1001DCA70() && sub_1000FDB0C() && *(_BYTE *)(a1 + 1236))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a1 + 1232);
      *(_DWORD *)buf = 67109120;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#timingadvance,queryTimingAdvance for mav22 TB,siminstance %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v11 = *(_DWORD *)(a1 + 1232);
      v14 = 67109120;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,queryTimingAdvance for mav22 TB,siminstance %d", &v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::queryTimingAdvance()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_101699910(*(uint64_t **)(*(_QWORD *)(a1 + 744) + 40), *(_DWORD *)(a1 + 1232));
  }
  else if (((sub_1001DC634() & 1) != 0 || sub_1001DC5AC())
         && *(_BYTE *)(a1 + 1236)
         && *(_DWORD *)(a1 + 8) == 6)
  {
    sub_101821E50(a1, *(_DWORD *)(a1 + 1232));
  }
}

_QWORD *sub_101821E50(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 32);
  v5[0] = off_1021D2A88;
  v5[1] = a1;
  v5[2] = a2;
  v6 = v5;
  sub_10183EBD8(v2, a2 != 0, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_101821F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101821F3C(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a3 + 2);
  v6 = *(unsigned __int16 *)(*(_QWORD *)a3 + 4);
  v8 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  v7 = *(_DWORD *)(*(_QWORD *)a3 + 12);
  v9 = *(unsigned __int16 *)(*(_QWORD *)a3 + 16);
  v10 = *(unsigned __int8 *)(*(_QWORD *)a3 + 18);
  v11 = *(unsigned __int8 *)(*(_QWORD *)a3 + 19);
  v12 = *(_DWORD *)(*(_QWORD *)a3 + 20);
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 24);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67242497;
    v38 = a2;
    v39 = 1025;
    v40 = v5;
    v41 = 1025;
    v42 = v6;
    v43 = 1026;
    v44 = v8;
    v45 = 1026;
    v46 = v7;
    v47 = 1026;
    v48 = v9;
    v49 = 1026;
    v50 = v10;
    v51 = 1026;
    v52 = v11;
    v53 = 1026;
    v54 = v12;
    v55 = 1026;
    v56 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#timingadvance,SimInstance,%{public}d,LTE Cell Info,mcc,%{private}hu,mnc,%{private}d,tac,%{public}u,cellid,%{public}d,pci,%{public}d,rsrp,%{public}u,rsrq,%{public}u,ta,%{public}d,dlearfcn,%{public}u", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18[0] = 67242497;
    v18[1] = a2;
    v19 = 1025;
    v20 = v5;
    v21 = 1025;
    v22 = v6;
    v23 = 1026;
    v24 = v8;
    v25 = 1026;
    v26 = v7;
    v27 = 1026;
    v28 = v9;
    v29 = 1026;
    v30 = v10;
    v31 = 1026;
    v32 = v11;
    v33 = 1026;
    v34 = v12;
    v35 = 1026;
    v36 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,SimInstance,%{public}d,LTE Cell Info,mcc,%{private}hu,mnc,%{private}d,tac,%{public}u,cellid,%{public}d,pci,%{public}d,rsrp,%{public}u,rsrq,%{public}u,ta,%{public}d,dlearfcn,%{public}u", v18, 62);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::printTimingAdvanceForIceDevices(SimInstance, std::vector<gnss::Emergency::Supl::LteCellInfo>, int32_t &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  *a4 = v12;
}

void sub_1018221D4(uint64_t a1, unsigned int *a2)
{
  _BOOL4 v4;
  signed int v5;
  int v6;
  NSObject *v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *p_p;
  NSObject *v12;
  uint64_t **v13;
  NSObject *v14;
  uint64_t **v15;
  NSObject *v16;
  _BOOL4 v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  signed int v22;
  int v23;
  int v24;
  uint64_t **v25;
  NSObject *v26;
  uint64_t **v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t **v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  std::string::size_type v37;
  std::string *v38;
  void **v39;
  char *v40;
  char *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  int v50;
  int v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  const char *v60;
  __int128 v61;
  unsigned int v62;
  void *v63[2];
  char v64;
  std::string __p;
  int v66;
  std::string v67;
  __int16 v68;
  void **v69;
  uint8_t buf[8];
  __int16 v71;
  std::string *v72;
  __int16 v73;
  _BOOL4 v74;
  __int16 v75;
  std::string *v76;

  v4 = sub_100CD5700((uint64_t)a2);
  v5 = sub_100217A98(a2);
  v66 = v5;
  if (!sub_100CD597C((uint64_t)a2))
  {
    v6 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 1204))
    goto LABEL_7;
  if (sub_100CD595C((uint64_t)a2))
  {
    v6 = 1;
LABEL_6:
    *(_DWORD *)(a1 + 1204) = v6;
    goto LABEL_7;
  }
  if (sub_100CD596C((uint64_t)a2))
  {
    v6 = 2;
    goto LABEL_6;
  }
LABEL_7:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278(a2, &v67);
    v8 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
    v9 = v67.__r_.__value_.__r.__words[0];
    sub_1017E1CCC(*(_DWORD *)(a1 + 1204), &__p);
    v10 = &v67;
    if (v8 < 0)
      v10 = (std::string *)v9;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v5;
    v71 = 2080;
    v72 = v10;
    v73 = 1024;
    v74 = v4;
    v75 = 2080;
    v76 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,handleEmergencyStateChange,instance,%d,state,%s,isBasebandEmergency,%d,commType,%s", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v35 = qword_1022A0078;
    sub_100CD5278(a2, &__p);
    v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v37 = __p.__r_.__value_.__r.__words[0];
    sub_1017E1CCC(*(_DWORD *)(a1 + 1204), v63);
    v38 = &__p;
    if (v36 < 0)
      v38 = (std::string *)v37;
    if (v64 >= 0)
      v39 = v63;
    else
      v39 = (void **)v63[0];
    LODWORD(v67.__r_.__value_.__l.__data_) = 67109890;
    HIDWORD(v67.__r_.__value_.__r.__words[0]) = v5;
    LOWORD(v67.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v38;
    WORD1(v67.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v67.__r_.__value_.__r.__words[2]) = v4;
    v68 = 2080;
    v69 = v39;
    LODWORD(v60) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 0, "#nilr,#nifc,handleEmergencyStateChange,instance,%d,state,%s,isBasebandEmergency,%d,commType,%s", &v67, v60, (_DWORD)v61, *((const char **)&v61 + 1));
    v41 = v40;
    if (v64 < 0)
      operator delete(v63[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
  }
  if (v5 == 255)
  {
    if (*(_BYTE *)(a1 + 792))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v67.__r_.__value_.__r.__words[0] = 67109120;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", &v67);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      if (sub_1001D9934(a1, 0))
      {
        *(_QWORD *)buf = &dword_101CE0B30;
        v13 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_101854094((uint64_t)v13[5], v4, *(_DWORD *)(a1 + 1204));
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v28 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          LOWORD(v67.__r_.__value_.__l.__data_) = 0;
          LODWORD(v60) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v67, v60);
          v57 = (uint8_t *)v56;
          sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v56);
          if (v57 != buf)
            free(v57);
        }
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v29 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v67.__r_.__value_.__r.__words[0] = 0x104000100;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", &v67);
        v47 = (uint8_t *)v46;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      if (sub_1001D9934(a1, 1))
      {
        *(_QWORD *)buf = &dword_101CE0B34;
        v30 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_101854094((uint64_t)v30[5], v4, *(_DWORD *)(a1 + 1204));
        goto LABEL_110;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v31 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
          goto LABEL_161;
        goto LABEL_163;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v67.__r_.__value_.__r.__words[0] = 67109120;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", &v67);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
      if (sub_1001D9934(a1, 0))
      {
        *(_QWORD *)buf = &dword_101CE0B30;
        v27 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_101854094((uint64_t)v27[5], v4, *(_DWORD *)(a1 + 1204));
        goto LABEL_110;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
          goto LABEL_161;
        goto LABEL_163;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LODWORD(v67.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v67.__r_.__value_.__r.__words[0]) = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", &v67);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    if (sub_1001D9934(a1, v5))
    {
      *(_QWORD *)buf = &v66;
      v15 = sub_100041CE0((uint64_t **)(a1 + 760), &v66, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_101854094((uint64_t)v15[5], v4, *(_DWORD *)(a1 + 1204));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        LOWORD(v67.__r_.__value_.__l.__data_) = 0;
        LODWORD(v60) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v67, v60);
        v49 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
    }
    if (*(_BYTE *)(a1 + 792))
      v17 = v4;
    else
      v17 = 0;
    if (v17)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        if (v66 == 1)
          v19 = 0;
        else
          v19 = 255;
        if (v66)
          v20 = v19;
        else
          v20 = 1;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(false, fCommType)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        if (v66 == 1)
          v50 = 0;
        else
          v50 = 255;
        if (v66)
          v51 = v50;
        else
          v51 = 1;
        LODWORD(v67.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v67.__r_.__value_.__r.__words[0]) = v51;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_EmergencyMode(false, fCommType)", &v67);
        v53 = (uint8_t *)v52;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
      if (v66 == 1)
        v21 = 0;
      else
        v21 = 255;
      if (v66)
        v22 = v21;
      else
        v22 = 1;
      if (sub_1001D9934(a1, v22))
      {
        if (v66 == 1)
          v23 = 0;
        else
          v23 = 255;
        if (v66)
          v24 = v23;
        else
          v24 = 1;
        LODWORD(v67.__r_.__value_.__l.__data_) = v24;
        *(_QWORD *)buf = &v67;
        v25 = sub_100041CE0((uint64_t **)(a1 + 760), (int *)&v67, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_101854094((uint64_t)v25[5], 0, *(_DWORD *)(a1 + 1204));
        goto LABEL_110;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
        {
LABEL_161:
          LOWORD(v67.__r_.__value_.__l.__data_) = 0;
          LODWORD(v60) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v67, v60);
          v59 = (uint8_t *)v58;
          sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v58);
          if (v59 != buf)
            free(v59);
          goto LABEL_110;
        }
LABEL_163:
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        goto LABEL_161;
      }
    }
  }
LABEL_110:
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 40);
  if (v34)
  {
    v61 = *(_OWORD *)a2;
    v62 = a2[4];
    sub_1016972B8(v34, &v61);
  }
}

void sub_1018232F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101823328(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  BOOL v7;
  char v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  unsigned int v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  unsigned int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t (**v32)();
  int v33;
  int v34;
  uint64_t (***v35)();
  _QWORD v36[3];
  uint64_t (***v37)();
  int v38;
  unsigned int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  unsigned int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v51 = a2;
    v52 = 1024;
    v53 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,setNilrActiveStatus,isActive,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v38 = 67109376;
    v39 = a2;
    v40 = 1024;
    v41 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#ins%d,setNilrActiveStatus,isActive,%d", &v38, 14);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::setNilrActiveStatus(const SimInstance, BOOL)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if (a2)
    v7 = *(_BYTE *)(a1 + 792) == 0;
  else
    v7 = 0;
  v8 = !v7;
  if (a2 > 1 || (v8 & 1) == 0)
    sub_101831D70();
  v9 = *(_DWORD *)(a1 + 784);
  if (v9 == 255)
    v10 = a3;
  else
    v10 = 0;
  if (v9 == a2)
    v11 = a3 ^ 1;
  else
    v11 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_DWORD *)(a1 + 784);
    v14 = *(_DWORD *)(a1 + 788);
    *(_DWORD *)buf = 67110400;
    v51 = a2;
    v52 = 1024;
    v53 = v10;
    v54 = 1024;
    v55 = v11;
    v56 = 1024;
    v57 = v13;
    v58 = 1024;
    v59 = a3;
    v60 = 1024;
    v61 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,isNewInstGettingActivated,%d,isCurrentInstGettingDeactivated,%d,fActiveNilrInst,%d,isActive,%d,fChosenNilrInst,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v24 = *(_DWORD *)(a1 + 784);
    v25 = *(_DWORD *)(a1 + 788);
    v38 = 67110400;
    v39 = a2;
    v40 = 1024;
    v41 = v10;
    v42 = 1024;
    v43 = v11;
    v44 = 1024;
    v45 = v24;
    v46 = 1024;
    v47 = a3;
    v48 = 1024;
    v49 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#ins%d,isNewInstGettingActivated,%d,isCurrentInstGettingDeactivated,%d,fActiveNilrInst,%d,isActive,%d,fChosenNilrInst,%d", &v38, 38, (_DWORD)v32, v33, v34, (_DWORD)v35);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::setNilrActiveStatus(const SimInstance, BOOL)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  if (((v10 | v11) & 1) == 0)
    sub_101831BFC();
  if (a3)
  {
    *(_DWORD *)(a1 + 784) = a2;
    *(_DWORD *)(a1 + 788) = a2;
    v36[0] = off_1021D2B08;
    v37 = (uint64_t (***)())v36;
    v15 = *(_QWORD *)(a1 + 736);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v36);
    v16 = v37;
    if (v37 == v36)
    {
      v17 = 4;
      v16 = (uint64_t (***)())v36;
      goto LABEL_35;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 784) = 255;
    v32 = off_1021D2B88;
    v35 = &v32;
    v18 = *(_QWORD *)(a1 + 736);
    if (!v18)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v18 + 48))(v18, &v32);
    v16 = v35;
    if (v35 == &v32)
    {
      v17 = 4;
      v16 = &v32;
      goto LABEL_35;
    }
  }
  if (!v16)
    goto LABEL_36;
  v17 = 5;
LABEL_35:
  (*v16)[v17]();
LABEL_36:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v19 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(_DWORD *)(a1 + 784);
    v21 = *(_DWORD *)(a1 + 788);
    *(_DWORD *)buf = 67109376;
    v51 = v20;
    v52 = 1024;
    v53 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,setNilrActiveStatus,fActiveNilrInst,%d,fChosenNilrInst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v28 = *(_DWORD *)(a1 + 784);
    v29 = *(_DWORD *)(a1 + 788);
    v38 = 67109376;
    v39 = v28;
    v40 = 1024;
    v41 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,setNilrActiveStatus,fActiveNilrInst,%d,fChosenNilrInst,%d", &v38, 14);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::setNilrActiveStatus(const SimInstance, BOOL)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
}

void sub_101823928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char *v19;
  uint64_t v20;

  v19 = a14;
  if (a14 == &a11)
  {
    v20 = 4;
    v19 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10182398C(uint64_t a1)
{
  NSObject *v2;
  uint64_t **v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t **v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint8_t buf[8];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,resetControlPlaneStatus()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v17 = 67109120;
    v18 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,resetControlPlaneStatus()", &v17);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (sub_1001D9934(a1, 0))
  {
    *(_QWORD *)buf = &dword_101CE0B30;
    v3 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185DCD4((uint64_t)v3[5]);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v17, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  if (sub_1001D9934(a1, 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,resetControlPlaneStatus()", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v17 = 67109120;
      v18 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,resetControlPlaneStatus()", &v17);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if (sub_1001D9934(a1, 1))
    {
      *(_QWORD *)buf = &dword_101CE0B34;
      v6 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_10185DCD4((uint64_t)v6[5]);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        LOWORD(v17) = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v17, v16);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
  }
}

void sub_101823F5C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t **v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  uint64_t **v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  uint8_t buf[8];
  __int16 v34;
  int v35;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getControlPlaneStatusReport(report)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v29 = 67109120;
    v30 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,getControlPlaneStatusReport(report)", &v29);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (sub_1001D9934(a1, 0))
  {
    *(_QWORD *)buf = &dword_101CE0B30;
    v5 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185DEAC((uint64_t)v5[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v29, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 0;
    v34 = 1024;
    v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d, report status %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v16 = *(_DWORD *)(a2 + 56);
    v29 = 67109376;
    v30 = 0;
    v31 = 1024;
    v32 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#ins%d, report status %u", &v29, 14);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (!*(_DWORD *)(a2 + 56) && sub_1001D9934(a1, 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getControlPlaneStatusReport(report)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v29 = 67109120;
      v30 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,getControlPlaneStatusReport(report)", &v29);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (sub_1001D9934(a1, 1))
    {
      *(_QWORD *)buf = &dword_101CE0B34;
      v10 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_10185DEAC((uint64_t)v10[5], a2);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        LOWORD(v29) = 0;
        LODWORD(v28) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v29, v28);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = 1;
      v34 = 1024;
      v35 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d, report status %u", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v23 = *(_DWORD *)(a2 + 56);
      v29 = 67109376;
      v30 = 1;
      v31 = 1024;
      v32 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#ins%d, report status %u", &v29, 14);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
}

void sub_101824810(uint64_t a1, int *a2)
{
  NSObject *v4;
  uint64_t **v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t **v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  int v34;
  uint8_t buf[8];
  __int16 v36;
  int v37;

  v30 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getConstellationDenylistMask(dlInstance1)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v31 = 67109120;
    v32 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,getConstellationDenylistMask(dlInstance1)", &v31);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (sub_1001D9934(a1, 0))
  {
    *(_QWORD *)buf = &dword_101CE0B30;
    v5 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185E148(v5[5], (int *)&v30 + 1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v31, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 0;
    v36 = 1024;
    v37 = HIDWORD(v30);
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,dlMask,%x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v31 = 67109376;
    v32 = 0;
    v33 = 1024;
    v34 = HIDWORD(v30);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#ins%d,dlMask,%x", &v31, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (sub_1001D9934(a1, 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getConstellationDenylistMask(dlInstance2)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v31 = 67109120;
      v32 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,getConstellationDenylistMask(dlInstance2)", &v31);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    if (sub_1001D9934(a1, 1))
    {
      *(_QWORD *)buf = &dword_101CE0B34;
      v9 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_10185E148(v9[5], (int *)&v30);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        LOWORD(v31) = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v31, v29);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = 1;
      v36 = 1024;
      v37 = v30;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,dlMask,%x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v31 = 67109376;
      v32 = 1;
      v33 = 1024;
      v34 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,#ins%d,dlMask,%x", &v31, 14);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  *a2 = v30 | HIDWORD(v30);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,fromCb,dlMask,%x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = *a2;
    v31 = 67109120;
    v32 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,fromCb,dlMask,%x", &v31);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

void sub_101825214(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101825240(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10182526C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_101825298(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_101825298(a1, *a2);
    sub_101825298(a1, a2[1]);
    sub_101825600(a2 + 5, 0);
    operator delete(a2);
  }
}

_QWORD *sub_1018252E4@<X0>(_QWORD *a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = sub_101825354(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_101825340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101825354(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  a1[2] = 0;
  *a1 = off_1021D0F18;
  a1[1] = 0;
  sub_1017209C8(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_101825398(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1018253AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D0F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018253C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D0F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018253F4(uint64_t a1)
{
  char v2;

  return sub_10182541C((uint64_t)&v2, (uint64_t *)(a1 + 24));
}

uint64_t sub_10182541C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t *v4;

  sub_101720A40(a2 + 5, 0);
  result = sub_101720A04(a2 + 4, 0);
  v4 = (uint64_t *)a2[3];
  if (v4 == a2)
    return (*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

void sub_10182548C()
{
  operator delete();
}

_QWORD *sub_1018254A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0F68;
  result[1] = v3;
  return result;
}

uint64_t sub_1018254D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0F68;
  a2[1] = v2;
  return result;
}

void sub_1018254F0(uint64_t a1, unsigned int *a2, unsigned __int8 *a3)
{
  sub_101823328(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t sub_101825500(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182553C()
{
}

void sub_10182554C()
{
  operator delete();
}

_QWORD *sub_101825560(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D0FE8;
  result[1] = v3;
  return result;
}

uint64_t sub_101825594(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D0FE8;
  a2[1] = v2;
  return result;
}

void sub_1018255B0(uint64_t a1, char **a2)
{
  sub_101820F14(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1018255B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018255F4()
{
}

uint64_t sub_101825600(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1018513B4();
    operator delete();
  }
  return result;
}

void sub_101825640()
{
  operator delete();
}

_QWORD *sub_101825654(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1078;
  result[1] = v3;
  return result;
}

uint64_t sub_101825688(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1078;
  a2[1] = v2;
  return result;
}

void sub_1018256A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t **v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,wlanMeasurementHandler(measResult)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = *(_DWORD *)(v3 + 788);
    v13[0] = 67109120;
    v13[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,wlanMeasurementHandler(measResult)", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementList &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185E1BC((uint64_t)v6[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementList &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_1018259C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101825A04()
{
}

void sub_101825A14()
{
  operator delete();
}

_QWORD *sub_101825A28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1108;
  result[1] = v3;
  return result;
}

uint64_t sub_101825A5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1108;
  a2[1] = v2;
  return result;
}

uint64_t sub_101825A78(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t result;
  uint64_t **v6;
  int *v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v7 = &dword_101CE0B30;
  v4 = sub_100041CE0((uint64_t **)(v3 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, &v7);
  sub_101858A28((uint64_t)v4[5], v2);
  result = sub_1001D9934(v3, 1);
  if ((_DWORD)result)
  {
    v7 = &dword_101CE0B34;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, &v7);
    return sub_101858A28((uint64_t)v6[5], v2 != 0);
  }
  return result;
}

uint64_t sub_101825B24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101825B60()
{
}

_QWORD *sub_101825B6C(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _QWORD block[4];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  int v16;
  _DWORD v17[2];
  __int16 v18;
  unsigned int v19;
  uint8_t buf[8];
  _DWORD v21[408];

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = AriMsg::getGmid(a2) >> 26;
    LOWORD(v21[0]) = 1024;
    *(_DWORD *)((char *)v21 + 2) = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v17[0] = 67109376;
    v17[1] = AriMsg::getGmid(a2) >> 26;
    v18 = 1024;
    v19 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v17, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ResetDataReqParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1017593F0(a2, buf);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101825E08;
  block[3] = &unk_1021D1178;
  sub_100270E34((uint64_t)v13, a1 + 40);
  v15 = *(_QWORD *)buf;
  v16 = v21[0];
  dispatch_async(v6, block);
  result = v14;
  if (v14 == v13)
  {
    v8 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_101825E08(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_101825E34(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101825E40(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101825E74(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101825E80(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101825EB8()
{
  operator delete();
}

_QWORD *sub_101825ECC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D11E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101825F00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D11E8;
  a2[1] = v2;
  return result;
}

void sub_101825F1C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 4;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,ResetDataReqParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 4;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,ResetDataReqParams,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_ResetDataReq(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_ResetDataReq(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857864((uint64_t)v8[5]);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_1018263B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018263F0()
{
}

_QWORD *sub_1018263FC(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  _QWORD block[4];
  _BYTE v17[24];
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  _DWORD v23[2];
  __int16 v24;
  unsigned int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  unsigned int v29;

  v4 = *(NSObject ***)(a1 + 32);
  WORD2(v12) = -1;
  DWORD2(v12) = -1;
  WORD6(v12) = -1;
  BYTE14(v12) = 0;
  LODWORD(v13) = -1;
  WORD2(v13) = 0;
  BYTE6(v13) = 0;
  *((_QWORD *)&v13 + 1) = -1;
  LODWORD(v14) = -16777216;
  BYTE4(v14) = -1;
  *((_QWORD *)&v14 + 1) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v27 = AriMsg::getGmid(a2) >> 26;
    v28 = 1024;
    v29 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v23[0] = 67109376;
    v23[1] = AriMsg::getGmid(a2) >> 26;
    v24 = 1024;
    v25 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v23, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PositionRequestFromModem]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_10175931C(a2, (uint64_t)&v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018266F0;
  block[3] = &unk_1021D1268;
  sub_100270E34((uint64_t)v17, a1 + 40);
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v22 = v15;
  dispatch_async(v6, block);
  result = v18;
  if (v18 == v17)
  {
    v8 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_1018266F0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182671C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101826728(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182675C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101826768(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1018267A0()
{
  operator delete();
}

_QWORD *sub_1018267B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D12D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1018267E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D12D8;
  a2[1] = v2;
  return result;
}

void sub_101826804(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 5;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PositionRequestFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 5;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PositionRequestFromModem,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CplaneRequest(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_CplaneRequest(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018576AC((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_101826C9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101826CD8()
{
}

_QWORD *sub_101826CE4(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int Gmid;
  NSObject *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  const char *v17;
  uint8_t *v18;
  _BYTE __src[1556];
  _QWORD block[4];
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[1556];
  _DWORD v24[2];
  __int16 v25;
  int v26;
  uint8_t buf[4];
  unsigned int v28;
  __int16 v29;
  int v30;

  v4 = *(NSObject ***)(a1 + 32);
  __src[4] = -1;
  v5 = 8;
  *(_QWORD *)&v6 = 0x8000000080000000;
  *((_QWORD *)&v6 + 1) = 0x8000000080000000;
  do
  {
    v7 = &__src[v5];
    *(_OWORD *)v7 = xmmword_101CCCCE0;
    *((_OWORD *)v7 + 1) = v6;
    *((_OWORD *)v7 + 2) = xmmword_101CCCCF0;
    *((_QWORD *)v7 + 6) = 0x8000800080008000;
    *((_DWORD *)v7 + 14) = 0x80000000;
    *((_WORD *)v7 + 30) = -1;
    *((_DWORD *)v7 + 16) = -1;
    v7[68] = 127;
    *((_DWORD *)v7 + 18) = -1;
    v5 += 96;
    v7[76] = -1;
  }
  while (v7 + 96 != &__src[1544]);
  *(_QWORD *)&__src[1544] = -1;
  *(_DWORD *)&__src[1552] = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9 = AriMsg::getGmid(a2) >> 26;
    Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)buf = 67109376;
    v28 = v9;
    v29 = 1024;
    v30 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v14 = qword_1022A0078;
    v15 = AriMsg::getGmid(a2) >> 26;
    v16 = AriMsg::getGmid(a2);
    v24[0] = 67109376;
    v24[1] = v15;
    v25 = 1024;
    v26 = (v16 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v24, 14);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsNavigationModelFromModem]_block_invoke", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_10175993C(a2, (uint64_t)__src);
  v11 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101827030;
  block[3] = &unk_1021D1358;
  sub_100270E34((uint64_t)v21, a1 + 40);
  memcpy(v23, __src, sizeof(v23));
  dispatch_async(v11, block);
  result = v22;
  if (v22 == v21)
  {
    v13 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

uint64_t sub_101827030(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182705C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101827068(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182709C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1018270A8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1018270E0()
{
  operator delete();
}

_QWORD *sub_1018270F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D13C8;
  result[1] = v3;
  return result;
}

uint64_t sub_101827128(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D13C8;
  a2[1] = v2;
  return result;
}

void sub_101827144(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 21;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsNavigationModelFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 21;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsNavigationModelFromModem,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceEph(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_AssistanceEph(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857C08((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_1018275DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101827618()
{
}

_QWORD *sub_101827624(uint64_t a1, AriMsg *a2)
{
  uint64_t v4;
  NSObject **v5;
  _BYTE *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int Gmid;
  NSObject *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  const char *v16;
  uint8_t *v17;
  _BYTE __src[380];
  _QWORD block[4];
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[380];
  _DWORD v23[2];
  __int16 v24;
  int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  int v29;

  v4 = 0;
  v5 = *(NSObject ***)(a1 + 32);
  *(_DWORD *)&__src[4] = -1;
  __src[8] = -1;
  *(_DWORD *)&__src[12] = 0;
  *(_WORD *)&__src[16] = -1;
  *(_DWORD *)&__src[20] = -1;
  *(_WORD *)&__src[24] = -1;
  *(_QWORD *)&__src[28] = -1;
  *(_WORD *)&__src[36] = -1;
  *(_DWORD *)&__src[40] = -1;
  do
  {
    v6 = &__src[v4];
    *(_QWORD *)(v6 + 44) = 0xFFFFFFFF7FFFFFFFLL;
    v6[52] = -1;
    *(_DWORD *)(v6 + 54) = -1;
    *((_WORD *)v6 + 29) = -1;
    v4 += 20;
  }
  while (v4 != 320);
  __src[364] = -1;
  *(_QWORD *)&__src[368] = -1;
  *(_DWORD *)&__src[376] = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = AriMsg::getGmid(a2) >> 26;
    Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)buf = 67109376;
    v27 = v8;
    v28 = 1024;
    v29 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v13 = qword_1022A0078;
    v14 = AriMsg::getGmid(a2) >> 26;
    v15 = AriMsg::getGmid(a2);
    v23[0] = 67109376;
    v23[1] = v14;
    v24 = 1024;
    v25 = (v15 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v23, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsAcqAssistanceFromModem]_block_invoke", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_101759F90(a2, (uint64_t)__src);
  v10 = *v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10182794C;
  block[3] = &unk_1021D1448;
  sub_100270E34((uint64_t)v20, a1 + 40);
  memcpy(v22, __src, sizeof(v22));
  dispatch_async(v10, block);
  result = v21;
  if (v21 == v20)
  {
    v12 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

uint64_t sub_10182794C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_101827978(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101827984(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1018279B8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1018279C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1018279FC()
{
  operator delete();
}

_QWORD *sub_101827A10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D14B8;
  result[1] = v3;
  return result;
}

uint64_t sub_101827A44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D14B8;
  a2[1] = v2;
  return result;
}

void sub_101827A60(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 18;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsAcqAssistanceFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 18;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsAcqAssistanceFromModem,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceAcquisition(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_AssistanceAcquisition(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857F14((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_101827EF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101827F34()
{
}

_QWORD *sub_101827F40(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _BYTE v12[32];
  int v13;
  _QWORD block[4];
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _DWORD v20[2];
  __int16 v21;
  unsigned int v22;
  uint8_t buf[4];
  unsigned int v24;
  __int16 v25;
  unsigned int v26;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)&v12[4] = -1;
  *(_QWORD *)&v12[12] = 0xFFFFFFFF7FFFFFFFLL;
  *(_QWORD *)&v12[24] = -1;
  v13 = -1;
  *(_WORD *)&v12[20] = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v24 = AriMsg::getGmid(a2) >> 26;
    v25 = 1024;
    v26 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v20[0] = 67109376;
    v20[1] = AriMsg::getGmid(a2) >> 26;
    v21 = 1024;
    v22 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v20, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ReferenceLocationFromModem]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1017596B0(a2, (uint64_t)v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101828210;
  block[3] = &unk_1021D1538;
  sub_100270E34((uint64_t)v15, a1 + 40);
  v17 = *(_OWORD *)v12;
  v18 = *(_OWORD *)&v12[16];
  v19 = v13;
  dispatch_async(v6, block);
  result = v16;
  if (v16 == v15)
  {
    v8 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_101828210(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182823C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101828248(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182827C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101828288(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1018282C0()
{
  operator delete();
}

_QWORD *sub_1018282D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D15A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101828308(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D15A8;
  a2[1] = v2;
  return result;
}

void sub_101828324(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 23;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,ReferenceLocationFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 23;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,ReferenceLocationFromModem,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceLocation(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_AssistanceLocation(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101858220((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_1018287BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018287F8()
{
}

_QWORD *sub_101828804(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  uint64_t v5;
  _BYTE *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int Gmid;
  NSObject *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  const char *v16;
  uint8_t *v17;
  _BYTE __src[284];
  _QWORD block[4];
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[284];
  _DWORD v23[2];
  __int16 v24;
  int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  int v29;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)&__src[4] = -1;
  v5 = 12;
  do
  {
    v6 = &__src[v5];
    *(_WORD *)v6 = -1;
    v6[2] = -1;
    *(_QWORD *)(v6 + 4) = -1;
    v6[12] = -1;
    v5 += 16;
  }
  while (v6 + 16 != &__src[268]);
  __src[268] = -1;
  *(_QWORD *)&__src[272] = -1;
  *(_DWORD *)&__src[280] = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = AriMsg::getGmid(a2) >> 26;
    Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)buf = 67109376;
    v27 = v8;
    v28 = 1024;
    v29 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v13 = qword_1022A0078;
    v14 = AriMsg::getGmid(a2) >> 26;
    v15 = AriMsg::getGmid(a2);
    v23[0] = 67109376;
    v23[1] = v14;
    v24 = 1024;
    v25 = (v15 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v23, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsReferenceTimeFromModem]_block_invoke", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_101759428(a2, (uint64_t)__src);
  v10 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101828B0C;
  block[3] = &unk_1021D1628;
  sub_100270E34((uint64_t)v20, a1 + 40);
  memcpy(v22, __src, sizeof(v22));
  dispatch_async(v10, block);
  result = v21;
  if (v21 == v20)
  {
    v12 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

uint64_t sub_101828B0C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_101828B38(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101828B44(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101828B78(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101828B84(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101828BBC()
{
  operator delete();
}

_QWORD *sub_101828BD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1698;
  result[1] = v3;
  return result;
}

uint64_t sub_101828C04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1698;
  a2[1] = v2;
  return result;
}

void sub_101828C20(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 24;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsReferenceTimeFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 24;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsReferenceTimeFromModem,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceTime(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_AssistanceTime(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185852C((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_1018290B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018290F4()
{
}

_QWORD *sub_101829100(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _BYTE v12[28];
  _QWORD block[4];
  _BYTE v14[24];
  _BYTE *v15;
  _OWORD v16[2];
  _DWORD v17[2];
  __int16 v18;
  unsigned int v19;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  unsigned int v23;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)&v12[20] = 0;
  *(_DWORD *)&v12[16] = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v21 = AriMsg::getGmid(a2) >> 26;
    v22 = 1024;
    v23 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v17[0] = 67109376;
    v17[1] = AriMsg::getGmid(a2) >> 26;
    v18 = 1024;
    v19 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v17, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GnssAbortReqParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_101759E10(a2, (uint64_t)v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018293B0;
  block[3] = &unk_1021D1718;
  sub_100270E34((uint64_t)v14, a1 + 40);
  v16[0] = *(_OWORD *)v12;
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)&v12[12];
  dispatch_async(v6, block);
  result = v15;
  if (v15 == v14)
  {
    v8 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_1018293B0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_1018293DC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1018293E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182941C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101829428(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101829460()
{
  operator delete();
}

_QWORD *sub_101829474(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1788;
  result[1] = v3;
  return result;
}

uint64_t sub_1018294A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1788;
  a2[1] = v2;
  return result;
}

void sub_1018294C4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 16;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GnssAbortReqParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 16;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GnssAbortReqParams,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GnssAbortReqParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_SessionAbort(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_SessionAbort(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GnssAbortReqParams &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101858838((uint64_t)v8[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GnssAbortReqParams &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182995C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101829998()
{
}

_QWORD *sub_1018299A4(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  __int128 v13;
  _QWORD block[4];
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  _DWORD v19[2];
  __int16 v20;
  unsigned int v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  unsigned int v25;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)((char *)&v12 + 4) = -1;
  HIDWORD(v12) = -1;
  DWORD1(v13) = 0;
  *((_QWORD *)&v13 + 1) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v23 = AriMsg::getGmid(a2) >> 26;
    v24 = 1024;
    v25 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v19[0] = 67109376;
    v19[1] = AriMsg::getGmid(a2) >> 26;
    v20 = 1024;
    v21 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v19, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_101759ED4(a2, (uint64_t)&v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101829C5C;
  block[3] = &unk_1021D1808;
  sub_100270E34((uint64_t)v15, a1 + 40);
  v17 = v12;
  v18 = v13;
  dispatch_async(v6, block);
  result = v16;
  if (v16 == v15)
  {
    v8 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_101829C5C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_101829C88(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101829C94(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101829CC8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101829CD4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101829D0C()
{
  operator delete();
}

_QWORD *sub_101829D20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1878;
  result[1] = v3;
  return result;
}

uint64_t sub_101829D54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1878;
  a2[1] = v2;
  return result;
}

void sub_101829D70(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 29;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,DiscardedPosSessionIndParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 29;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,DiscardedPosSessionIndParams,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,log_DiscardedSessionInd(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,log_DiscardedSessionInd(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101855274((uint64_t)v8[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182A208(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182A244()
{
}

_QWORD *sub_10182A250(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD block[4];
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[2];
  __int16 v20;
  unsigned int v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  unsigned int v25;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)((char *)&v12 + 4) = -1;
  HIDWORD(v12) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v23 = AriMsg::getGmid(a2) >> 26;
    v24 = 1024;
    v25 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v19[0] = 67109376;
    v19[1] = AriMsg::getGmid(a2) >> 26;
    v20 = 1024;
    v21 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v19, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosLocationRequestStatusIndParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_101759F54(a2, &v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10182A4FC;
  block[3] = &unk_1021D18F8;
  sub_100270E34((uint64_t)v15, a1 + 40);
  v17 = v12;
  v18 = v13;
  dispatch_async(v6, block);
  result = v16;
  if (v16 == v15)
  {
    v8 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_10182A4FC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182A528(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_10182A534(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182A568(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10182A574(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10182A5AC()
{
  operator delete();
}

_QWORD *sub_10182A5C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1968;
  result[1] = v3;
  return result;
}

uint64_t sub_10182A5F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1968;
  a2[1] = v2;
  return result;
}

void sub_10182A610(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 28;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PosLocationRequestStatusIndParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 28;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PosLocationRequestStatusIndParams,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_BasebandCplaneInd(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_BasebandCplaneInd(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857068((uint64_t)v8[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182AAA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182AAE4()
{
}

_QWORD *sub_10182AAF0(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD block[4];
  _BYTE v16[24];
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _DWORD v21[2];
  __int16 v22;
  unsigned int v23;
  uint8_t buf[4];
  unsigned int v25;
  __int16 v26;
  unsigned int v27;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)((char *)&v12 + 4) = 0;
  WORD6(v12) = -1;
  LODWORD(v13) = -1;
  WORD2(v13) = -1;
  *((_QWORD *)&v13 + 1) = -1;
  LOWORD(v14) = -1;
  HIDWORD(v14) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v25 = AriMsg::getGmid(a2) >> 26;
    v26 = 1024;
    v27 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v21[0] = 67109376;
    v21[1] = AriMsg::getGmid(a2) >> 26;
    v22 = 1024;
    v23 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v21, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::CellFTAssistanceFromModem]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_10175A1F8(a2, (uint64_t)&v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10182ADC4;
  block[3] = &unk_1021D19E8;
  sub_100270E34((uint64_t)v16, a1 + 40);
  v18 = v12;
  v19 = v13;
  v20 = v14;
  dispatch_async(v6, block);
  result = v17;
  if (v17 == v16)
  {
    v8 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_10182ADC4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182ADF0(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_10182ADFC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182AE30(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10182AE3C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10182AE74()
{
  operator delete();
}

_QWORD *sub_10182AE88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1A58;
  result[1] = v3;
  return result;
}

uint64_t sub_10182AEBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1A58;
  a2[1] = v2;
  return result;
}

void sub_10182AED8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 30;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,CellFTAssistanceFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 30;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,CellFTAssistanceFromModem,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CellFT1xAssistance(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_CellFT1xAssistance(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185B064((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182B370(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182B3AC()
{
}

_QWORD *sub_10182B3B8(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _OWORD v12[4];
  _QWORD block[4];
  _BYTE v14[24];
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD v20[2];
  __int16 v21;
  unsigned int v22;
  uint8_t buf[4];
  unsigned int v24;
  __int16 v25;
  unsigned int v26;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)((char *)v12 + 4) = -1;
  HIDWORD(v12[0]) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v24 = AriMsg::getGmid(a2) >> 26;
    v25 = 1024;
    v26 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v20[0] = 67109376;
    v20[1] = AriMsg::getGmid(a2) >> 26;
    v21 = 1024;
    v22 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v20, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosIs801GpsLocationIndParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_101759E98(a2, (uint64_t)v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10182B670;
  block[3] = &unk_1021D1AD8;
  sub_100270E34((uint64_t)v14, a1 + 40);
  v16 = v12[0];
  v17 = v12[1];
  v18 = v12[2];
  v19 = v12[3];
  dispatch_async(v6, block);
  result = v15;
  if (v15 == v14)
  {
    v8 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_10182B670(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182B69C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_10182B6A8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182B6DC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10182B6E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10182B720()
{
  operator delete();
}

_QWORD *sub_10182B734(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1B48;
  result[1] = v3;
  return result;
}

uint64_t sub_10182B768(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1B48;
  a2[1] = v2;
  return result;
}

void sub_10182B784(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  double v9;
  double v10;
  NSObject *v11;
  unsigned int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  uint8_t buf[8];
  __int16 v25;
  unsigned int v26;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 31;
    v25 = 1024;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PosIs801GpsLocationIndParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v12 = *a2;
    v20 = 67109376;
    v21 = 31;
    v22 = 1024;
    v23 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PosIs801GpsLocationIndParams,id,%d,inst,%d", &v20, 14);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v19) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,log_1xFinalFixFromNetwork(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v20 = 67109120;
    v21 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,log_1xFinalFixFromNetwork(nilr)", &v20);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v19 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v19 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101856A78((uint64_t)v8[5], (uint64_t)a2, v9, v10);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v20, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

uint64_t sub_10182BC1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182BC58()
{
}

_QWORD *sub_10182BC64(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  int v13;
  _QWORD block[4];
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  int v18;
  _DWORD v19[2];
  __int16 v20;
  unsigned int v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  unsigned int v25;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)((char *)&v12 + 4) = -1;
  HIDWORD(v12) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v23 = AriMsg::getGmid(a2) >> 26;
    v24 = 1024;
    v25 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v19[0] = 67109376;
    v19[1] = AriMsg::getGmid(a2) >> 26;
    v20 = 1024;
    v21 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v19, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::WlanMeasReqParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_10175A7AC(a2, (uint64_t)&v12);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10182BF1C;
  block[3] = &unk_1021D1BC8;
  sub_100270E34((uint64_t)v15, a1 + 40);
  v17 = v12;
  v18 = v13;
  dispatch_async(v6, block);
  result = v16;
  if (v16 == v15)
  {
    v8 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_10182BF1C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10182BF48(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_10182BF54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10182BF88(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10182BF94(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10182BFCC()
{
  operator delete();
}

_QWORD *sub_10182BFE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1C38;
  result[1] = v3;
  return result;
}

uint64_t sub_10182C014(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1C38;
  a2[1] = v2;
  return result;
}

void sub_10182C030(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  signed int v6;
  NSObject *v7;
  uint64_t **v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  unsigned int v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 33;
    v23 = 1024;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,WlanMeasReqParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *a2;
    v18 = 67109376;
    v19 = 33;
    v20 = 1024;
    v21 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,Ari,Ind,NilrController::Ind,WlanMeasReqParams,id,%d,inst,%d", &v18, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::WlanMeasReqParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  HIDWORD(v17) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CplaneWlanRequest(nilr)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v18 = 67109120;
    v19 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,process_CplaneWlanRequest(nilr)", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::WlanMeasReqParams &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, v6))
  {
    *(_QWORD *)buf = (char *)&v17 + 4;
    v8 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101858BE8((uint64_t)v8[5], (int *)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::WlanMeasReqParams &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182C4C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182C504()
{
}

void sub_10182C514()
{
  operator delete();
}

_QWORD *sub_10182C528(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182C55C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1CC8;
  a2[1] = v2;
  return result;
}

void sub_10182C578(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  signed int v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100599A28(*a2);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_ResetDataReq(req)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v10 = sub_100599A28(*a2);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#nilr,#nifc,invoke,%d,process_ResetDataReq(req)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  if (sub_1001D9934(v3, v6))
  {
    v15[0] = sub_100599A28(*a2);
    *(_QWORD *)buf = v15;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857864((uint64_t)v7[5]);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182C8C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182C900()
{
}

void sub_10182C910()
{
  operator delete();
}

_QWORD *sub_10182C924(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1D48;
  result[1] = v3;
  return result;
}

uint64_t sub_10182C958(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1D48;
  a2[1] = v2;
  return result;
}

void sub_10182C974(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  signed int v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100599A28(*a2);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceTime(data)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v10 = sub_100599A28(*a2);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#nilr,#nifc,invoke,%d,process_AssistanceTime(data)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  if (sub_1001D9934(v3, v6))
  {
    v15[0] = sub_100599A28(*a2);
    *(_QWORD *)buf = v15;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185852C((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182CCC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182CCFC()
{
}

void sub_10182CD0C()
{
  operator delete();
}

_QWORD *sub_10182CD20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1DC8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182CD54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1DC8;
  a2[1] = v2;
  return result;
}

void sub_10182CD70(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  signed int v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100599A28(*a2);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CplaneRequest(req)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v10 = sub_100599A28(*a2);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#nilr,#nifc,invoke,%d,process_CplaneRequest(req)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  if (sub_1001D9934(v3, v6))
  {
    v15[0] = sub_100599A28(*a2);
    *(_QWORD *)buf = v15;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018576AC((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182D0BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182D0F8()
{
}

void sub_10182D108()
{
  operator delete();
}

_QWORD *sub_10182D11C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1E48;
  result[1] = v3;
  return result;
}

uint64_t sub_10182D150(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1E48;
  a2[1] = v2;
  return result;
}

void sub_10182D16C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  signed int v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100599A28(*a2);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceEph(data)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v10 = sub_100599A28(*a2);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#nilr,#nifc,invoke,%d,process_AssistanceEph(data)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  if (sub_1001D9934(v3, v6))
  {
    v15[0] = sub_100599A28(*a2);
    *(_QWORD *)buf = v15;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857C08((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182D4B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182D4F4()
{
}

void sub_10182D504()
{
  operator delete();
}

_QWORD *sub_10182D518(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1EC8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182D54C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1EC8;
  a2[1] = v2;
  return result;
}

void sub_10182D568(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  signed int v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100599A28(*a2);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceLocation(data)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v10 = sub_100599A28(*a2);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#nilr,#nifc,invoke,%d,process_AssistanceLocation(data)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  if (sub_1001D9934(v3, v6))
  {
    v15[0] = sub_100599A28(*a2);
    *(_QWORD *)buf = v15;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101858220((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182D8B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182D8F0()
{
}

void sub_10182D900()
{
  operator delete();
}

_QWORD *sub_10182D914(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1F48;
  result[1] = v3;
  return result;
}

uint64_t sub_10182D948(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1F48;
  a2[1] = v2;
  return result;
}

void sub_10182D964(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  signed int v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100599A28(*a2);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_BasebandCplaneInd(ind)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    v10 = sub_100599A28(*a2);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#nilr,#nifc,invoke,%d,process_BasebandCplaneInd(ind)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = sub_100599A28(*a2);
  if (sub_1001D9934(v3, v6))
  {
    v15[0] = sub_100599A28(*a2);
    *(_QWORD *)buf = v15;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101857068((uint64_t)v7[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182DCB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182DCEC()
{
}

void sub_10182DCFC()
{
  operator delete();
}

_QWORD *sub_10182DD10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D1FC8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182DD44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D1FC8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182DD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2038;
  v5[1] = v2;
  v6 = v5;
  sub_101801204(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182DE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182DE3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182DE78()
{
}

void sub_10182DE88()
{
  operator delete();
}

_QWORD *sub_10182DE9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2038;
  result[1] = v3;
  return result;
}

uint64_t sub_10182DED0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2038;
  a2[1] = v2;
  return result;
}

void sub_10182DEEC(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t **v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrAssistanceRequestHandler(pAssistReq)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = *(_DWORD *)(v3 + 788);
    v13[0] = 67109120;
    v13[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,nilrAssistanceRequestHandler(pAssistReq)", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::AssistanceNeededReport *) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101859050((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::AssistanceNeededReport *) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_10182E210(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182E24C()
{
}

void sub_10182E25C()
{
  operator delete();
}

_QWORD *sub_10182E270(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D20D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182E2A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D20D8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182E2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2148;
  v5[1] = v2;
  v6 = v5;
  sub_101801344(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182E360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182E39C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182E3D8()
{
}

void sub_10182E3E8()
{
  operator delete();
}

_QWORD *sub_10182E3FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2148;
  result[1] = v3;
  return result;
}

uint64_t sub_10182E430(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2148;
  a2[1] = v2;
  return result;
}

void sub_10182E44C(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t **v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[8];

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(v5 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrPositionHandler(pFix, pvtFix)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v10 = *(_DWORD *)(v5 + 788);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,nilrPositionHandler(pFix, pvtFix)", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionReport *, const gnss::Fix &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (sub_1001D9934(v5, *(_DWORD *)(v5 + 788)))
  {
    *(_QWORD *)buf = v5 + 788;
    v8 = sub_100041CE0((uint64_t **)(v5 + 760), (int *)(v5 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101859210((uint64_t)v8[5], v4, a3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionReport *, const gnss::Fix &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_10182E778(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182E7B4()
{
}

void sub_10182E7C4()
{
  operator delete();
}

_QWORD *sub_10182E7D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D21E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182E80C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D21E8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182E828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2258;
  v5[1] = v2;
  v6 = v5;
  sub_1018013E4(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182E8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182E904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182E940()
{
}

void sub_10182E950()
{
  operator delete();
}

_QWORD *sub_10182E964(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2258;
  result[1] = v3;
  return result;
}

uint64_t sub_10182E998(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2258;
  a2[1] = v2;
  return result;
}

void sub_10182E9B4(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t **v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrMeasurementHandler(pMeas)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = *(_DWORD *)(v3 + 788);
    v13[0] = 67109120;
    v13[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,nilrMeasurementHandler(pMeas)", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReport *) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018593E0((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReport *) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_10182ECD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182ED14()
{
}

void sub_10182ED24()
{
  operator delete();
}

_QWORD *sub_10182ED38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D22F8;
  result[1] = v3;
  return result;
}

uint64_t sub_10182ED6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D22F8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182ED88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2368;
  v5[1] = v2;
  v6 = v5;
  sub_101801484(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182EE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182EE64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182EEA0()
{
}

void sub_10182EEB0()
{
  operator delete();
}

_QWORD *sub_10182EEC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2368;
  result[1] = v3;
  return result;
}

uint64_t sub_10182EEF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2368;
  a2[1] = v2;
  return result;
}

void sub_10182EF14(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t **v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrMeasurementReportWithEstimateHandler(pMeasReportWithEstimate)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = *(_DWORD *)(v3 + 788);
    v13[0] = 67109120;
    v13[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,nilrMeasurementReportWithEstimateHandler(pMeasReportWithEstimate)", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReportWithEstimate *) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1018595A0((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReportWithEstimate *) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_10182F238(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182F274()
{
}

void sub_10182F284()
{
  operator delete();
}

_QWORD *sub_10182F298(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2408;
  result[1] = v3;
  return result;
}

uint64_t sub_10182F2CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2408;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182F2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2478;
  v5[1] = v2;
  v6 = v5;
  sub_101801524(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182F388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182F3C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182F400()
{
}

void sub_10182F410()
{
  operator delete();
}

_QWORD *sub_10182F424(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2478;
  result[1] = v3;
  return result;
}

uint64_t sub_10182F458(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2478;
  a2[1] = v2;
  return result;
}

void sub_10182F474(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t **v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[8];

  v5 = *a2;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(v7 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrReportHandler(pReport, filename, isOrbitFile)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v12 = *(_DWORD *)(v7 + 788);
    v17[0] = 67109120;
    v17[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,nilrReportHandler(pReport, filename, isOrbitFile)", v17);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::SummaryReport *, const std::string &, BOOL) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v7, *(_DWORD *)(v7 + 788)))
  {
    *(_QWORD *)buf = v7 + 788;
    v10 = sub_100041CE0((uint64_t **)(v7 + 760), (int *)(v7 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101859760((uint64_t)v10[5], v5, a3, v6 != 0);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::SummaryReport *, const std::string &, BOOL) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182F7B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182F7F4()
{
}

void sub_10182F804()
{
  operator delete();
}

_QWORD *sub_10182F818(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2518;
  result[1] = v3;
  return result;
}

uint64_t sub_10182F84C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2518;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182F868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2588;
  v5[1] = v2;
  v6 = v5;
  sub_101806ED4(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182F908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182F944(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182F980()
{
}

void sub_10182F990()
{
  operator delete();
}

_QWORD *sub_10182F9A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2588;
  result[1] = v3;
  return result;
}

uint64_t sub_10182F9D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2588;
  a2[1] = v2;
  return result;
}

void sub_10182F9F4(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,updateSessionStatus(suplStatusReport)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v12 = *(_DWORD *)(v3 + 788);
    v17[0] = 67109120;
    v17[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,updateSessionStatus(suplStatusReport)", v17);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::SessionStatus &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
    v7 = a2[7];
    v24 = a2[6];
    v25 = v7;
    v26 = a2[8];
    v8 = a2[3];
    v20 = a2[2];
    v21 = v8;
    v9 = a2[5];
    v22 = a2[4];
    v23 = v9;
    v10 = a2[1];
    *(_OWORD *)buf = *a2;
    v19 = v10;
    sub_10185B784((uint64_t)v6, buf);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::SessionStatus &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t sub_10182FD40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182FD7C()
{
}

void sub_10182FD8C()
{
  operator delete();
}

_QWORD *sub_10182FDA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2628;
  result[1] = v3;
  return result;
}

uint64_t sub_10182FDD4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2628;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10182FDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D2698;
  v5[1] = v2;
  v6 = v5;
  sub_101806F74(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10182FE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10182FECC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10182FF08()
{
}

void sub_10182FF18()
{
  operator delete();
}

_QWORD *sub_10182FF2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2698;
  result[1] = v3;
  return result;
}

uint64_t sub_10182FF60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2698;
  a2[1] = v2;
  return result;
}

uint64_t sub_10182FF7C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t **v4;
  NSObject *v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[8];

  v1 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,suplLocationIdRequestHandler()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = *(_DWORD *)(v1 + 788);
    v12[0] = 67109120;
    v12[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,suplLocationIdRequestHandler()", v12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()() const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (sub_1001D9934(v1, *(_DWORD *)(v1 + 788)))
  {
    *(_QWORD *)buf = v1 + 788;
    v4 = sub_100041CE0((uint64_t **)(v1 + 760), (int *)(v1 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185B224((uint64_t)v4[5]);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()() const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return 1;
}

uint64_t sub_101830294(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018302D0()
{
}

void sub_1018302E0()
{
  operator delete();
}

_QWORD *sub_1018302F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2738;
  result[1] = v3;
  return result;
}

uint64_t sub_101830328(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2738;
  a2[1] = v2;
  return result;
}

_QWORD *sub_101830344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D27A8;
  v5[1] = v2;
  v6 = v5;
  sub_1018012A4(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1018303E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101830420(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183045C()
{
}

void sub_10183046C()
{
  operator delete();
}

_QWORD *sub_101830480(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D27A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1018304B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D27A8;
  a2[1] = v2;
  return result;
}

void sub_1018304D0(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t **v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,processFineTimeAssistance1x(ftAssist)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = *(_DWORD *)(v3 + 788);
    v13[0] = 67109120;
    v13[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,processFineTimeAssistance1x(ftAssist)", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceRequest *) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v6 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_101851F34((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceRequest *) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_1018307F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101830830()
{
}

void sub_101830840()
{
  operator delete();
}

_QWORD *sub_101830854(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2848;
  result[1] = v3;
  return result;
}

uint64_t sub_101830888(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2848;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1018308A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D28B8;
  v5[1] = v2;
  v6 = v5;
  sub_101805BA8(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_101830944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101830980(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018309BC()
{
}

void sub_1018309CC()
{
  operator delete();
}

_QWORD *sub_1018309E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D28B8;
  result[1] = v3;
  return result;
}

uint64_t sub_101830A14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D28B8;
  a2[1] = v2;
  return result;
}

void sub_101830A30(uint64_t a1, uint64_t a2, signed int *a3, int *a4, uint64_t *a5)
{
  signed int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t **v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  signed int v21;
  __int16 v22;
  int v23;
  uint8_t buf[8];
  __int16 v25;
  int v26;

  v6 = *a3;
  v7 = *a4;
  HIDWORD(v19) = *a3;
  v8 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2928);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v6;
    v25 = 1024;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#supl,decodedSuplInit,ins,%d,index,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2928);
    v20 = 67109376;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#nilr,#nifc,#supl,decodedSuplInit,ins,%d,index,%d", &v20, 14);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(gnss::Emergency::Supl::DecodeResult, SimInstance, gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,dispatch_decodedSuplInit(index, decodedSuplInit)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v20 = 67109120;
    v21 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,dispatch_decodedSuplInit(index, decodedSuplInit)", &v20);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(gnss::Emergency::Supl::DecodeResult, SimInstance, gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (sub_1001D9934(v8, v6))
  {
    *(_QWORD *)buf = (char *)&v19 + 4;
    v11 = sub_100041CE0((uint64_t **)(v8 + 760), (int *)&v19 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185B59C((uint64_t)v11[5], v7, a5);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", &v20, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(gnss::Emergency::Supl::DecodeResult, SimInstance, gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

uint64_t sub_101830EC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101830F04()
{
}

void sub_101830F10(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101830F40()
{
  operator delete();
}

_QWORD *sub_101830F54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2978;
  result[1] = v3;
  return result;
}

uint64_t sub_101830F88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2978;
  a2[1] = v2;
  return result;
}

_QWORD *sub_101830FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = off_1021D29E8;
  v5[1] = v2;
  v6 = v5;
  sub_101807014(a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_101831044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101831080(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018310BC()
{
}

void sub_1018310CC()
{
  operator delete();
}

_QWORD *sub_1018310E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D29E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101831114(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D29E8;
  a2[1] = v2;
  return result;
}

void sub_101831130(uint64_t a1, __int16 *a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint64_t **v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _DWORD v17[4];
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2928);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#supl,#wlan,suplWlanMeasRequestHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2928);
    LOWORD(v17[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#nilr,#nifc,#supl,#wlan,suplWlanMeasRequestHandler", v17, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementRequest &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,suplWlanMeasRequestHandler(wlanMeasRequest)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v11 = *(_DWORD *)(v3 + 788);
    v17[0] = 67109120;
    v17[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,suplWlanMeasRequestHandler(wlanMeasRequest)", v17);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementRequest &) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (sub_1001D9934(v3, *(_DWORD *)(v3 + 788)))
  {
    *(_QWORD *)buf = v3 + 788;
    v7 = sub_100041CE0((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10185B3DC((uint64_t)v7[5], a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      LOWORD(v17[0]) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementRequest &) const", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

uint64_t sub_101831584(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018315C0()
{
}

void sub_1018315D0()
{
  operator delete();
}

__n128 sub_1018315E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021D2A88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10183161C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021D2A88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10183163C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  CFAbsoluteTime Current;
  int v10;
  _QWORD *v11;
  NSObject *v12;
  int v13;
  id v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _DWORD v21[4];
  void *__p;
  void *v23;
  uint64_t v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  CFAbsoluteTime v29;
  __int16 v30;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)buf = 67240449;
    v26 = v8;
    v27 = 1025;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#timingadvance,SimInstance,%{public}d,isServingCellLTE,%{private}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v15 = *(_DWORD *)(a1 + 16);
    LODWORD(__p) = 67240449;
    HIDWORD(__p) = v15;
    LOWORD(v23) = 1025;
    *(_DWORD *)((char *)&v23 + 2) = v5;
    LODWORD(v20) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,SimInstance,%{public}d,isServingCellLTE,%{private}d", &__p, v20);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::queryTimingAdvanceForIceDevices(SimInstance)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (v5 && *(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (v6 + 1208 != a3)
      sub_100AAEFA8((char *)(v6 + 1208), *(char **)a3, *(_QWORD *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2));
    HIDWORD(v20) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    v23 = 0;
    v24 = 0;
    __p = 0;
    v11 = sub_100D03CC8(&__p, *(const void **)(v6 + 1208), *(_QWORD *)(v6 + 1216), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v6 + 1216) - *(_QWORD *)(v6 + 1208)) >> 2));
    sub_101821F3C((uint64_t)v11, v10, (uint64_t)&__p, (_DWORD *)&v20 + 1);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v26 = HIDWORD(v20);
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#timingadvance,ta,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v13 = HIDWORD(v20);
      v21[0] = 67240192;
      v21[1] = HIDWORD(v20);
      LODWORD(v20) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,ta,%{public}d", v21, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "auto CLNilrInterfaceController::queryTimingAdvanceForIceDevices(SimInstance)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    else
    {
      v13 = HIDWORD(v20);
    }
    v14 = objc_msgSend(objc_msgSend(*(id *)(v6 + 704), "vendor"), "proxyForService:", CFSTR("CLTelephonyService"));
    *(_DWORD *)buf = 16 * v13;
    v29 = Current;
    v30 = 1;
    objc_msgSend(v14, "updateTAInfo:", buf);
  }
}

void sub_101831A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101831A6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101831AA8()
{
}

void sub_101831AB8()
{
  operator delete();
}

_QWORD *sub_101831ACC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D2B08;
  return result;
}

void sub_101831AF0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D2B08;
}

void sub_101831B08(uint64_t a1, uint64_t a2)
{
  sub_1018044C4(a2);
}

uint64_t sub_101831B10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101831B4C()
{
}

void sub_101831B5C()
{
  operator delete();
}

_QWORD *sub_101831B70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D2B88;
  return result;
}

void sub_101831B94(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D2B88;
}

uint64_t *sub_101831BAC(uint64_t a1, uint64_t a2)
{
  return sub_10180468C(a2);
}

uint64_t sub_101831BB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101831BF0()
{
}

void sub_101831BFC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"InvalidActivationSequence\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "InvalidActivationSequence", "{\"msg%{public}.0s\":\"InvalidActivationSequence\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"InvalidActivationSequence\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrInterfaceController.mm", 639, "setNilrActiveStatus");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  }
}

void sub_101831D70()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Invalid Instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Invalid Instance", "{\"msg%{public}.0s\":\"Invalid Instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Invalid Instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrInterfaceController.mm", 624, "setNilrActiveStatus");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  }
}

void sub_101831EE4(uint64_t a1, uint64_t a2, char a3)
{
  __int128 v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 40) = unk_101CE6674;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = xmmword_101CE6664;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 96), *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)byte_1023114A8;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)&byte_1023114A8[16];
  }
  *(_QWORD *)(a1 + 200) = 0;
  v5 = xmmword_1023114D0;
  *(_OWORD *)(a1 + 120) = xmmword_1023114C0;
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 152) = xmmword_1023114E0;
  *(_QWORD *)(a1 + 168) = qword_1023114F0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = a3;
  *(_QWORD *)(a1 + 224) = 0;
  sub_1015A2E04(&v6, "#wlan,CLNilrWlanScanner");
  operator new();
}

void sub_10183286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v19;
  va_list va;

  va_start(va, a17);
  sub_100279AA4((void ***)va);
  v19 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 16) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

uint64_t **sub_10183295C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t **result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  int v21;
  _BYTE __p[12];
  __int16 v23;
  int v24;
  __int16 v25;
  void **v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE *v31;

  v21 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10183884C(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    sub_1015A2E04(__p, (&off_1021D2D08)[v7]);
    if (SBYTE3(v26) >= 0)
      v11 = __p;
    else
      v11 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v28 = 1024;
    v29 = v7;
    v30 = 2080;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v26) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v13 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v14 = qword_1022A0078;
    v15 = *(unsigned __int8 *)(v6 + 120);
    sub_1015A2E04(v19, (&off_1021D2D08)[v7]);
    if (v20 >= 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v13;
    v23 = 1024;
    v24 = v7;
    v25 = 2080;
    v26 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, v15, "%sstate,%d,%s", __p, 28, (const char *)v19[0]);
    v18 = v17;
    if (v20 < 0)
      operator delete(v19[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrWlanScanner>::setStateHandler(State, StateHandler) [T = CLNilrWlanScanner]", "%s\n", v18);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)buf = &v21;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101832C38(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[1640];

  switch(a2)
  {
    case 2:
      result = sub_101833D68(a1);
      if ((_DWORD)result)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v3 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#wlan,LPPR13 feature enabled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D2C18);
          LOWORD(v11[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,LPPR13 feature enabled", v11, 2);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Disabled(CLNilrWlanScanner::Event)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        result = 1;
      }
      break;
    case 3:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Warning,#wlan request in disabled mode", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        LOWORD(v11[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning,#wlan request in disabled mode", v11, 2, v11[0]);
        goto LABEL_33;
      }
      break;
    case 4:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning,#wlan response in disabled mode", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        LOWORD(v11[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning,#wlan response in disabled mode", v11, 2, v11[0]);
        goto LABEL_33;
      }
      break;
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning,#wlan request timeout in disabled mode", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        LOWORD(v11[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning,#wlan request timeout in disabled mode", v11, 2, v11[0]);
LABEL_33:
        v8 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Disabled(CLNilrWlanScanner::Event)", "%s\n", v5);
        if (v8 != buf)
          free(v8);
        goto LABEL_35;
      }
      break;
    default:
LABEL_35:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1018330D8(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[2];
  uint8_t buf[1640];

  result = 1;
  switch(a2)
  {
    case 0:
      sub_101833EEC(a1);
      return 1;
    case 2:
      if ((sub_101833D68(a1) & 1) != 0)
        return 1;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,LPPR13 feature disabled", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,LPPR13 feature disabled", v14, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Idle(CLNilrWlanScanner::Event)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
        return 0;
      }
      return result;
    case 3:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#wlan request", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan request", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Idle(CLNilrWlanScanner::Event)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      sub_101834088(a1);
      if ((sub_101834240(a1) & 1) != 0)
        return 2;
      sub_1018343F4(a1);
      sub_1018345E8(a1);
      return 1;
    case 4:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning,#wlan response in Idle state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning,#wlan response in Idle state", v14, 2, v14[0]);
      goto LABEL_37;
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning,#wlan request timeout in Idle state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning,#wlan request timeout in Idle state", v14, 2, v14[0]);
LABEL_37:
      v11 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Idle(CLNilrWlanScanner::Event)", "%s\n", v9);
      if (v11 != buf)
        free(v11);
      return 1;
    default:
      return result;
  }
}

uint64_t sub_101833628(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  switch(a2)
  {
    case 0:
      sub_10183479C(a1 + 232, 5, *(double *)(a1 + 224));
      return 2;
    case 1:
      sub_10183526C(a1 + 232, 5);
      sub_1018345E8(a1);
      sub_101833EEC(a1);
      return 2;
    case 2:
      if ((sub_101833D68(a1) & 1) != 0)
        return 2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#wlan,LPPR13 feature disabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,LPPR13 feature disabled", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Session(CLNilrWlanScanner::Event)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      sub_1018343F4(a1);
      return 0;
    case 3:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Warning,#wlan,dropping the second wlan request", buf, 2u);
      }
      v3 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning,#wlan,dropping the second wlan request", v14, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Session(CLNilrWlanScanner::Event)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 2;
    case 4:
      sub_1018356FC(a1);
      return 1;
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#wlan request timeout", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan request timeout", v14, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Session(CLNilrWlanScanner::Event)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      return 1;
    default:
      return 2;
  }
}

void sub_101833AC4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLNilrWlanScanner::onWifiNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D2BF8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNilrWlanScanner::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D2BF8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNilrWlanScanner::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101837518((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101833C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101833CA0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  sub_100859D78(a1 + 360);
  sub_1018385E4(a1 + 232);
  v2 = *(_QWORD **)(a1 + 200);
  if (v2 == (_QWORD *)(a1 + 176))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v6 = (void **)(a1 + 56);
  sub_100279AA4(&v6);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

_QWORD *sub_101833D54@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, (&off_1021D2CD8)[a1]);
}

uint64_t sub_101833D68(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  _BOOL4 v3;
  int v5;
  int v6;
  int *v7;

  v1 = a1 + 360;
  if (sub_1001DC538())
  {
    v6 = 0;
    v7 = &v6;
    v2 = 1;
    v3 = 1;
    if (!*((_DWORD *)sub_10085EDC0(v1, &v6, (uint64_t)&unk_101B9EB60, &v7) + 28))
    {
      v5 = 0;
      v7 = &v5;
      v3 = *((_DWORD *)sub_10085EDC0(v1, &v5, (uint64_t)&unk_101B9EB60, &v7) + 16) != 0;
    }
    v6 = 1;
    v7 = &v6;
    if (!*((_DWORD *)sub_10085EDC0(v1, &v6, (uint64_t)&unk_101B9EB60, &v7) + 28))
    {
      v5 = 1;
      v7 = &v5;
      v2 = *((_DWORD *)sub_10085EDC0(v1, &v5, (uint64_t)&unk_101B9EB60, &v7) + 16) != 0;
    }
    return v3 | v2;
  }
  else
  {
    v6 = 0;
    v7 = &v6;
    if (*((_DWORD *)sub_10085EDC0(v1, &v6, (uint64_t)&unk_101B9EB60, &v7) + 28))
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v7 = &v5;
      return *((_DWORD *)sub_10085EDC0(v1, &v5, (uint64_t)&unk_101B9EB60, &v7) + 16) != 0;
    }
  }
}

void sub_101833EEC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#wlan,clearWlanScanResults", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,clearWlanScanResults", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::clearWlanScanResults()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100279AE4((uint64_t *)(a1 + 56));
  *(_QWORD *)(a1 + 80) = 0;
}

id sub_101834088(uint64_t a1)
{
  NSObject *v2;
  uint64_t i;
  id result;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#wlan,registerForWifiNotifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,registerForWifiNotifications", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::registerForWifiNotifications()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  for (i = 0; i != 32; i += 4)
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(a1 + 24 + i), 0);
  return result;
}

id sub_101834240(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#wlan,triggerWifiScan", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#wlan,triggerWifiScan", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrWlanScanner::triggerWifiScan()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_101833EEC(a1);
  return objc_msgSend(*(id *)(a1 + 8), "syncgetStartScanWithType:lowPriority:passive:requester:", 10, 0, 0, "nilr");
}

void sub_1018343F4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[8];
  void *__p;
  void *v9;
  uint64_t v10;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#wlan,sendError", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#wlan,sendError", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendError()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  __p = 0;
  v9 = 0;
  v10 = 0;
  *(_DWORD *)buf = 4;
  v3 = *(_QWORD *)(a1 + 200);
  if (!v3)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, buf);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1018345C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

id sub_1018345E8(uint64_t a1)
{
  NSObject *v2;
  uint64_t i;
  id result;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#wlan,unregisterForWifiNotifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,unregisterForWifiNotifications", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::unregisterForWifiNotifications()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  for (i = 0; i != 32; i += 4)
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(a1 + 24 + i));
  return result;
}

void sub_10183479C(uint64_t a1, int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  int v49;
  int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrWlanScanner>::setTimeoutEvent(Event, double) [T = CLNilrWlanScanner]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_101833D54(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_101833D54(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrWlanScanner>::setTimeoutEvent(Event, double) [T = CLNilrWlanScanner]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_101833D54(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_101833D54(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrWlanScanner>::setTimeoutEvent(Event, double) [T = CLNilrWlanScanner]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1018386C8;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_101833D54(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_101833D54(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_10183526C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_101833D54(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_101833D54(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrWlanScanner>::cancelTimeoutEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_101833D54(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_101833D54(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_1018356FC(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;
  NSObject *v4;
  void **v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _DWORD *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  const char *v71;
  void **v72;
  uint64_t v73;
  const char *v74;
  void **v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  char *v79;
  int v80;
  void **v81;
  __int128 v82;
  int v83;
  void *v84;
  char *v85;
  char *v86;
  _BYTE buf[12];
  char v88;
  int v89;
  _BYTE *v90;
  void *__p;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  void *v112;
  _BYTE v113[24];
  _BYTE v114[32];
  __int128 v115;
  uint64_t v116;

  if (!*(_DWORD *)(a1 + 208))
    return;
  v83 = 0;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  v2 = &qword_1022A0000;
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 64))
  {
    v112 = (void *)qword_1023114A0;
    if (byte_1023114A8[23] < 0)
    {
      sub_100115CE4(v113, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
    }
    else
    {
      *(_OWORD *)v113 = *(_OWORD *)byte_1023114A8;
      *(_QWORD *)&v113[16] = *(_QWORD *)&byte_1023114A8[16];
    }
    *(_OWORD *)v114 = xmmword_1023114C0;
    *(_OWORD *)&v114[16] = xmmword_1023114D0;
    v115 = xmmword_1023114E0;
    v116 = qword_1023114F0;
    v3 = objc_msgSend(*(id *)(a1 + 8), "syncgetAssociatedNetwork:", &v112);
    if (v3)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        sub_100CF1BCC((uint64_t *)&v112, &__p);
        v5 = (v97 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wlan,sendScanResults,serving AP,%s", buf, 0xCu);
        if (SBYTE1(v97) < 0)
          operator delete(__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v76 = qword_1022A0088;
        sub_100CF1BCC((uint64_t *)&v112, buf);
        if (v88 >= 0)
          v77 = buf;
        else
          v77 = *(_BYTE **)buf;
        v89 = 136315138;
        v90 = v77;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v76, 0, "#wlan,sendScanResults,serving AP,%s", (const char *)&v89);
        v79 = v78;
        if (v88 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendScanResults()", "%s\n", v79);
        if (v79 != (char *)&__p)
          free(v79);
      }
    }
    v6 = *(_DWORD *)(a1 + 212);
    if (v6)
    {
      v81 = &v84;
      if (v6 != 1)
        goto LABEL_70;
      v7 = *(_QWORD *)(a1 + 56);
      for (i = *(_QWORD *)(a1 + 64); v7 != i; v7 += 88)
      {
        v9 = *(_DWORD *)(v7 + 40);
        __p = *(void **)v7;
        v10 = sub_100B063E8((unint64_t *)&__p);
        if (*(_DWORD *)(a1 + 216))
        {
          v11 = *(_DWORD *)(v7 + 32);
          if (!v3)
            goto LABEL_24;
        }
        else
        {
          LOWORD(v11) = 0x7FFF;
          if (!v3)
          {
LABEL_24:
            v13 = 0;
            goto LABEL_25;
          }
        }
        __p = v112;
        v12 = sub_100129380((uint64_t)&__p);
        *(_QWORD *)buf = *(_QWORD *)v7;
        v13 = v12 == sub_100129380((uint64_t)buf);
LABEL_25:
        v14 = v85;
        if (v85 >= v86)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v85 - (_BYTE *)v84) >> 2);
          v17 = v16 + 1;
          if (v16 + 1 > 0x1555555555555555)
            sub_100259694();
          if (0x5555555555555556 * ((v86 - (_BYTE *)v84) >> 2) > v17)
            v17 = 0x5555555555555556 * ((v86 - (_BYTE *)v84) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)v84) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v18 = 0x1555555555555555;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)sub_100821B78((uint64_t)&v86, v18);
          else
            v19 = 0;
          v20 = &v19[12 * v16];
          *((_WORD *)v20 + 2) = WORD2(v10);
          *(_DWORD *)v20 = v10;
          v20[6] = v13;
          v20[7] = v13;
          *((_WORD *)v20 + 4) = v9;
          *((_WORD *)v20 + 5) = v11;
          v22 = v84;
          v21 = v85;
          v23 = v20;
          v2 = &qword_1022A0000;
          if (v85 != v84)
          {
            do
            {
              v24 = *(_QWORD *)(v21 - 3);
              v21 -= 3;
              v25 = v21[2];
              *(_QWORD *)(v23 - 12) = v24;
              v23 -= 12;
              *((_DWORD *)v23 + 2) = v25;
            }
            while (v21 != v22);
            v21 = v84;
          }
          v15 = v20 + 12;
          v84 = v23;
          v85 = v20 + 12;
          v86 = &v19[12 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v85 = v10;
          *((_WORD *)v14 + 2) = WORD2(v10);
          v14[6] = v13;
          v14[7] = v13;
          *((_WORD *)v14 + 4) = v9;
          v15 = v14 + 12;
          *((_WORD *)v14 + 5) = v11;
        }
        v85 = v15;
      }
      v26 = 1;
    }
    else
    {
      if (v3)
      {
        v81 = &v84;
        v27 = *(_QWORD *)(a1 + 56);
        for (j = *(_QWORD *)(a1 + 64); v27 != j; v27 += 88)
        {
          __p = v112;
          v29 = sub_100129380((uint64_t)&__p);
          *(_QWORD *)buf = *(_QWORD *)v27;
          if (v29 == sub_100129380((uint64_t)buf))
          {
            if (*(_DWORD *)(a1 + 216))
              v30 = *(_DWORD *)(v27 + 32);
            else
              LOWORD(v30) = 0x7FFF;
            v31 = *(_DWORD *)(v27 + 40);
            __p = *(void **)v27;
            v32 = sub_100B063E8((unint64_t *)&__p);
            v33 = v32;
            v34 = v85;
            if (v85 >= v86)
            {
              v36 = 0xAAAAAAAAAAAAAAABLL * ((v85 - (_BYTE *)v84) >> 2);
              v37 = v36 + 1;
              if (v36 + 1 > 0x1555555555555555)
                sub_100259694();
              if (0x5555555555555556 * ((v86 - (_BYTE *)v84) >> 2) > v37)
                v37 = 0x5555555555555556 * ((v86 - (_BYTE *)v84) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)v84) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v38 = 0x1555555555555555;
              else
                v38 = v37;
              if (v38)
                v39 = (char *)sub_100821B78((uint64_t)&v86, v38);
              else
                v39 = 0;
              v40 = &v39[12 * v36];
              *((_WORD *)v40 + 2) = WORD2(v33);
              *(_DWORD *)v40 = v33;
              *((_WORD *)v40 + 3) = 257;
              *((_WORD *)v40 + 4) = v31;
              *((_WORD *)v40 + 5) = v30;
              v42 = v84;
              v41 = v85;
              v43 = v40;
              if (v85 != v84)
              {
                do
                {
                  v44 = *(_QWORD *)(v41 - 3);
                  v41 -= 3;
                  v45 = v41[2];
                  *(_QWORD *)(v43 - 12) = v44;
                  v43 -= 12;
                  *((_DWORD *)v43 + 2) = v45;
                }
                while (v41 != v42);
                v41 = v84;
              }
              v35 = v40 + 12;
              v84 = v43;
              v85 = v40 + 12;
              v86 = &v39[12 * v38];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v85 = v32;
              *((_WORD *)v34 + 2) = WORD2(v32);
              *((_WORD *)v34 + 3) = 257;
              *((_WORD *)v34 + 4) = v31;
              v35 = v34 + 12;
              *((_WORD *)v34 + 5) = v30;
            }
            v85 = v35;
            v83 = 1;
          }
        }
        goto LABEL_70;
      }
      v26 = 4;
    }
    v83 = v26;
LABEL_70:
    if ((v113[23] & 0x80000000) != 0)
      operator delete(*(void **)v113);
    goto LABEL_72;
  }
  v83 = 4;
LABEL_72:
  if (v2[16] != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v46 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v83;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "#wlan,sendScanResults,result,%d", (uint8_t *)&__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (v2[16] != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    LODWORD(v112) = 67109120;
    HIDWORD(v112) = v83;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,sendScanResults,result,%d", &v112);
    v75 = (void **)v74;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendScanResults()", "%s\n", v74);
    if (v75 != &__p)
      free(v75);
  }
  if (v85 != v84)
  {
    v48 = 0;
    v49 = 10;
    *(_QWORD *)&v47 = 67111680;
    v82 = v47;
    do
    {
      if (v2[16] != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v50 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v51 = *((char *)v84 + v49 - 10);
        v52 = *((char *)v84 + v49 - 9);
        v53 = *((char *)v84 + v49 - 8);
        v54 = *((char *)v84 + v49 - 7);
        v55 = *((char *)v84 + v49 - 6);
        v56 = *((char *)v84 + v49 - 5);
        v57 = *(unsigned __int16 *)((char *)v84 + v49 - 2);
        v58 = *(__int16 *)((char *)v84 + v49);
        v59 = *((char *)v84 + v49 - 4);
        v60 = *((char *)v84 + v49 - 3);
        __p = (void *)__PAIR64__(v83, v82);
        v92 = 1024;
        v93 = v51;
        v94 = 1024;
        v95 = v52;
        v96 = 1024;
        v97 = v53;
        v98 = 1024;
        v99 = v54;
        v100 = 1024;
        v101 = v55;
        v102 = 1024;
        v103 = v56;
        v104 = 1024;
        v105 = v57;
        v106 = 1024;
        v107 = v58;
        v108 = 1024;
        v109 = v59;
        v110 = 1024;
        v111 = v60;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#wlan,sendScanResults,result,%d,WlanMeasurementElement,bssid,%02x:%02x:%02x:%02x:%02x:%02x,channel,%d,rssi,%d,isServingFlagPresent,%d,servingFlag,%d", (uint8_t *)&__p, 0x44u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (v2[16] != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v61 = *((char *)v84 + v49 - 10);
        v62 = *((char *)v84 + v49 - 9);
        v63 = *((char *)v84 + v49 - 8);
        v64 = *((char *)v84 + v49 - 7);
        v65 = *((char *)v84 + v49 - 6);
        v66 = *((char *)v84 + v49 - 5);
        v67 = *(unsigned __int16 *)((char *)v84 + v49 - 2);
        v68 = *(__int16 *)((char *)v84 + v49);
        v69 = *((char *)v84 + v49 - 4);
        v70 = *((char *)v84 + v49 - 3);
        v112 = (void *)__PAIR64__(v83, v82);
        *(_WORD *)v113 = 1024;
        *(_DWORD *)&v113[2] = v61;
        *(_WORD *)&v113[6] = 1024;
        *(_DWORD *)&v113[8] = v62;
        *(_WORD *)&v113[12] = 1024;
        *(_DWORD *)&v113[14] = v63;
        *(_WORD *)&v113[18] = 1024;
        *(_DWORD *)&v113[20] = v64;
        *(_WORD *)v114 = 1024;
        *(_DWORD *)&v114[2] = v65;
        *(_WORD *)&v114[6] = 1024;
        *(_DWORD *)&v114[8] = v66;
        *(_WORD *)&v114[12] = 1024;
        *(_DWORD *)&v114[14] = v67;
        *(_WORD *)&v114[18] = 1024;
        *(_DWORD *)&v114[20] = v68;
        *(_WORD *)&v114[24] = 1024;
        *(_DWORD *)&v114[26] = v69;
        *(_WORD *)&v114[30] = 1024;
        LODWORD(v115) = v70;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,sendScanResults,result,%d,WlanMeasurementElement,bssid,%02x:%02x:%02x:%02x:%02x:%02x,channel,%d,rssi,%d,isServingFlagPresent,%d,servingFlag,%d", &v112, 68, v80, (_DWORD)v81, (_DWORD)v82, DWORD2(v82), v83, (_DWORD)v84, (_DWORD)v85, (_DWORD)v86,
          *(_DWORD *)buf);
        v72 = (void **)v71;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendScanResults()", "%s\n", v71);
        if (v72 != &__p)
          free(v72);
      }
      ++v48;
      v49 += 12;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v85 - (_BYTE *)v84) >> 2) > v48);
  }
  v73 = *(_QWORD *)(a1 + 200);
  if (!v73)
    sub_10025FD1C();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v73 + 48))(v73, &v83);
  if (v84)
  {
    v85 = (char *)v84;
    operator delete(v84);
  }
}

void sub_101836140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 161) < 0)
    operator delete(*(void **)(v17 - 184));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1018361B8(uint64_t a1, int *a2, unsigned int a3)
{
  NSObject *v6;
  int v7;
  void **v8;
  uint64_t *v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint8_t *v14;
  char *v15;
  char *v16;
  const char *v17;
  void **v18;
  const char *v19;
  uint8_t buf[8];
  __int16 v21;
  void **v22;
  char v23;
  _DWORD v24[2];
  __int16 v25;
  uint8_t *v26;
  void *__p[2];
  char v28;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a2;
    sub_100F790BC(a3, __p);
    v8 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v7;
    v21 = 2080;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wlan,handleEmergencySettingsChange,inst,%d,reason,%s", buf, 0x12u);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v12 = qword_1022A0088;
    v13 = *a2;
    sub_100F790BC(a3, buf);
    if (v23 >= 0)
      v14 = buf;
    else
      v14 = *(uint8_t **)buf;
    v24[0] = 67109378;
    v24[1] = v13;
    v25 = 2080;
    v26 = v14;
    LODWORD(v19) = 18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 0, "#wlan,handleEmergencySettingsChange,inst,%d,reason,%s", v24, v19);
    v16 = v15;
    if (v23 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v16);
    if (v16 != (char *)__p)
      free(v16);
  }
  v9 = sub_1001F8DEC((_QWORD *)(a1 + 360), a2);
  if (v9)
  {
    sub_100F8CA40((uint64_t)__p, v9 + 3);
    sub_10084B628((uint64_t)__p, (uint64_t *)a2);
    *(_QWORD *)buf = a2;
    v10 = sub_10085EDC0(a1 + 360, a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10084B628((uint64_t)(v10 + 3), (uint64_t *)__p);
    if (a3 < 4 || a3 == 5)
      sub_1018365C0(a1 + 232, 2);
    sub_100857FD0((uint64_t)__p);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#wlan,#Warning,handleEmergencySettingsChange,fLocationSettingsMap,null", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      *(_WORD *)buf = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#wlan,#Warning,handleEmergencySettingsChange,fLocationSettingsMap,null", buf, v19);
      v18 = (void **)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrWlanScanner::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v17);
      if (v18 != __p)
        free(v18);
    }
  }
}

void sub_1018365A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100857FD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018365C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;
  _BYTE *v29;
  NSObject *v30;
  os_log_type_t v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  void **v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  const char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  void **v92;
  char *v93;
  char *v94;
  const char *v95;
  const char *v96;
  int v97;
  void *v98[2];
  char v99;
  int v100;
  _BYTE __p[12];
  __int16 v102;
  _BYTE *v103;
  __int16 v104;
  void **v105;
  _BYTE buf[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  _BYTE *v110;
  _BYTE v111[12];
  __int16 v112;
  _BYTE *v113;
  char v114;

  ++*(_DWORD *)(a1 + 88);
  v100 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_1018389C0();
    goto LABEL_157;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_101838B30(qword_1022A0070 == -1);
    goto LABEL_157;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    sub_1015A2E04(__p, (&off_1021D2D08)[*(int *)(a1 + 4)]);
    v8 = SHIBYTE(v104);
    v9 = *(_BYTE **)__p;
    sub_101833D54(a2, v111);
    v10 = __p;
    if (v8 < 0)
      v10 = v9;
    if (v114 >= 0)
      v11 = v111;
    else
      v11 = *(_BYTE **)v111;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v107 = 2080;
    v108 = v10;
    v109 = 2080;
    v110 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v114 < 0)
      operator delete(*(void **)v111);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v58 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v58 = (_QWORD *)*v58;
    v59 = qword_1022A0078;
    v60 = *(unsigned __int8 *)(a1 + 120);
    sub_1015A2E04(v111, (&off_1021D2D08)[*(int *)(a1 + 4)]);
    v61 = v114;
    v62 = *(_BYTE **)v111;
    sub_101833D54(a2, v98);
    v63 = v111;
    if (v61 < 0)
      v63 = v62;
    if (v99 >= 0)
      v64 = v98;
    else
      v64 = (void **)v98[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v58;
    v102 = 2080;
    v103 = v63;
    v104 = 2080;
    v105 = v64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, v60, "%scurrent_state,%s,event,%s", __p, 32, v96);
    v66 = v65;
    if (v99 < 0)
      operator delete(v98[0]);
    v3 = &qword_1022A0000;
    if (v114 < 0)
      operator delete(*(void **)v111);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v66);
    if (v66 != buf)
      free(v66);
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_28;
  v13 = (uint64_t **)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = a1 + 16;
  do
  {
    v16 = *(_DWORD *)(v12 + 32);
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = (uint64_t *)v12;
    else
      v18 = (uint64_t *)(v12 + 8);
    if (!v17)
      v15 = v12;
    v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_101838CA4();
    goto LABEL_157;
  }
  v20 = *(uint64_t (**)(_QWORD *, uint64_t))(v15 + 40);
  v19 = *(_QWORD *)(v15 + 48);
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v19 >> 1));
  if ((v19 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v21 + v20);
  v22 = v20(v21, a2);
  v23 = v22;
  v97 = v22;
  if (a2 <= 1 && (_DWORD)v22 != v100)
  {
    sub_1018390F4();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v25 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v73 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v73 = (_QWORD *)*v73;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v75 = (char *)v74;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
  v26 = qword_1022A0078;
  v27 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v27))
  {
    v28 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v28 = (_QWORD *)*v28;
    sub_1015A2E04(buf, (&off_1021D2D08)[(int)v23]);
    if (v109 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    v102 = 2080;
    v103 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v67 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v67 = (_QWORD *)*v67;
    v68 = qword_1022A0078;
    v69 = *(unsigned __int8 *)(a1 + 120);
    sub_1015A2E04(__p, (&off_1021D2D08)[(int)v23]);
    if (v104 >= 0)
      v70 = __p;
    else
      v70 = *(_BYTE **)__p;
    *(_DWORD *)v111 = 136315394;
    *(_QWORD *)&v111[4] = v67;
    v112 = 2080;
    v113 = v70;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, v69, "%snewState,%s", v111, v95);
    v72 = v71;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if ((_DWORD)v23 != v100)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
    v30 = qword_1022A0078;
    v31 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v31))
    {
      v32 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v32 = (_QWORD *)*v32;
      sub_1015A2E04(__p, (&off_1021D2D08)[v100]);
      v33 = v3;
      v34 = SHIBYTE(v104);
      v35 = *(_BYTE **)__p;
      sub_1015A2E04(v111, "Exit");
      v36 = __p;
      if (v34 < 0)
        v36 = v35;
      if (v114 >= 0)
        v37 = v111;
      else
        v37 = *(_BYTE **)v111;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v32;
      v107 = 2080;
      v108 = v36;
      v109 = 2080;
      v110 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v114 < 0)
        operator delete(*(void **)v111);
      v3 = v33;
      if (SHIBYTE(v104) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v76 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v76 = (_QWORD *)*v76;
      v77 = qword_1022A0078;
      v78 = *(unsigned __int8 *)(a1 + 120);
      sub_1015A2E04(v111, (&off_1021D2D08)[v100]);
      v79 = v3;
      v80 = v114;
      v81 = *(_BYTE **)v111;
      sub_1015A2E04(v98, "Exit");
      v82 = v111;
      if (v80 < 0)
        v82 = v81;
      if (v99 >= 0)
        v83 = v98;
      else
        v83 = (void **)v98[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v76;
      v102 = 2080;
      v103 = v82;
      v104 = 2080;
      v105 = v83;
      LODWORD(v95) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, v78, "%soldState,%s,event,%s", __p, v95, (const char *)(a1 + 8));
      v85 = v84;
      if (v99 < 0)
        operator delete(v98[0]);
      v3 = v79;
      v13 = (uint64_t **)v96;
      if (v114 < 0)
        operator delete(*(void **)v111);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v85);
      if (v85 != buf)
        free(v85);
    }
    v38 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v100;
    v39 = sub_1000610B4(v13, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v40 = v39[5];
    v41 = (uint64_t)v39[6];
    v42 = (_QWORD *)(v38 + (v41 >> 1));
    if ((v41 & 1) != 0)
      v40 = *(uint64_t **)(*v42 + v40);
    v43 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v42, 1);
    if (v43 == v100)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
      v44 = qword_1022A0078;
      v45 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v45))
      {
        v46 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v46 = (_QWORD *)*v46;
        sub_1015A2E04(__p, (&off_1021D2D08)[(int)v23]);
        v47 = v3;
        v48 = SHIBYTE(v104);
        v49 = *(_BYTE **)__p;
        sub_1015A2E04(v111, "Enter");
        v50 = __p;
        if (v48 < 0)
          v50 = v49;
        if (v114 >= 0)
          v51 = v111;
        else
          v51 = *(_BYTE **)v111;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v46;
        v107 = 2080;
        v108 = v50;
        v109 = 2080;
        v110 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v114 < 0)
          operator delete(*(void **)v111);
        v3 = v47;
        if (SHIBYTE(v104) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
        v86 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v86 = (_QWORD *)*v86;
        v87 = qword_1022A0078;
        v88 = *(unsigned __int8 *)(a1 + 120);
        sub_1015A2E04(v111, (&off_1021D2D08)[(int)v23]);
        v89 = v114;
        v90 = *(_BYTE **)v111;
        sub_1015A2E04(v98, "Enter");
        v91 = v111;
        if (v89 < 0)
          v91 = v90;
        if (v99 >= 0)
          v92 = v98;
        else
          v92 = (void **)v98[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v86;
        v102 = 2080;
        v103 = v91;
        v104 = 2080;
        v105 = v92;
        LODWORD(v95) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, v88, "%snewState,%s,event,%s", __p, v95, v96);
        v94 = v93;
        if (v99 < 0)
          operator delete(v98[0]);
        if (v114 < 0)
          operator delete(*(void **)v111);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v94);
        if (v94 != buf)
          free(v94);
      }
      v52 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v97;
      v53 = sub_1000610B4(v13, &v97, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v54 = v53[5];
      v55 = (uint64_t)v53[6];
      v56 = (_QWORD *)(v52 + (v55 >> 1));
      if ((v55 & 1) != 0)
        v54 = *(uint64_t **)(*v56 + v54);
      v23 = ((uint64_t (*)(_QWORD *, _QWORD))v54)(v56, 0);
      if ((_DWORD)v23 == v97)
        goto LABEL_89;
      sub_101838E14();
    }
    else
    {
      sub_101838F84();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_1018372F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_101837358(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#wlan,requestWifiScan", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#wlan,requestWifiScan", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::requestWifiScan(CLEmergencyController::LocationSettings::Emergency::Settings::LPPRel13MeasSettings, uint16_t)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_QWORD *)(a1 + 208) = a2;
  *(_DWORD *)(a1 + 216) = a3;
  *(double *)(a1 + 224) = (double)a4;
  return sub_1018365C0(a1 + 232, 3);
}

void sub_101837518(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  int v14;
  int v15;
  const char *v16;
  double Current;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  _BYTE *v23;
  void **v24;
  __int128 v25;
  NSObject *v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  const char *v32;
  char *v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  double v40;
  _BYTE v41[12];
  char v42;
  int v43;
  _BYTE *v44;
  _BYTE v45[24];
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE buf[24];
  double v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    *(_WORD *)v45 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,onWifiNotification", v45, 2);
    v28 = (char *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  switch(*a3)
  {
    case 1:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v13 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v14 = *a4;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,power state,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v15 = *a4;
        *(_DWORD *)v45 = 67109120;
        *(_DWORD *)&v45[4] = v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,onWifiNotification,power state,%d", v45);
        v10 = (char *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v16);
        goto LABEL_35;
      }
      break;
    case 3:
      Current = CFAbsoluteTimeGetCurrent();
      if ((unsigned __int8 *)(a1 + 56) != a4 + 112)
        sub_10055A264((uint64_t *)(a1 + 56), *((_QWORD *)a4 + 14), *((_QWORD *)a4 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a4 + 15) - *((_QWORD *)a4 + 14)) >> 3));
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a4 + 13);
      if (a4[96])
      {
        if (*((int *)a4 + 12) >= 1)
        {
          sub_100CF27E8((uint64_t)(a4 + 8), (uint64_t)buf);
          sub_100CF2714((uint64_t)buf, (uint64_t *)(a1 + 56));
          if (SHIBYTE(v52) < 0)
            operator delete(*(void **)&buf[8]);
        }
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D2C38);
      v18 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
        v20 = *(_QWORD *)(a1 + 80);
        v21 = Current - *((double *)a4 + 13);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        v52 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,scanResult,%zu,scanTimestamp, %.1lf,age,%.1lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D2C38);
        v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
        v30 = *(_QWORD *)(a1 + 80);
        v31 = Current - *((double *)a4 + 13);
        *(_DWORD *)v45 = 134218496;
        *(_QWORD *)&v45[4] = v29;
        *(_WORD *)&v45[12] = 2048;
        *(_QWORD *)&v45[14] = v30;
        *(_WORD *)&v45[22] = 2048;
        v46 = v31;
        LODWORD(v40) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "#wlan,onWifiNotification,scanResult,%zu,scanTimestamp, %.1lf,age,%.1lf", (size_t)v45, v40, *(double *)v41);
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      sub_1018365C0(a1 + 232, 4);
      break;
    case 4:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D2C18);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#wlan,scan failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        *(_WORD *)v45 = 0;
        LODWORD(v40) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#wlan,scan failed", v45, *(_QWORD *)&v40);
        v10 = (char *)v12;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v12);
        goto LABEL_35;
      }
      break;
    case 6:
    case 7:
      if (a4[96] && *((int *)a4 + 12) >= 1)
      {
        *(_QWORD *)v45 = qword_1023114A0;
        if (byte_1023114A8[23] < 0)
        {
          sub_100115CE4(&v45[8], *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
        }
        else
        {
          *(_OWORD *)&v45[8] = *(_OWORD *)byte_1023114A8;
          v46 = *(double *)&byte_1023114A8[16];
        }
        v47 = xmmword_1023114C0;
        v48 = xmmword_1023114D0;
        v49 = xmmword_1023114E0;
        v50 = qword_1023114F0;
        if (objc_msgSend(*(id *)(a1 + 8), "syncgetAssociatedNetwork:", v45))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D2C18);
          v22 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            sub_100CF1BCC((uint64_t *)v45, buf);
            v23 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v41 = 136315138;
            *(_QWORD *)&v41[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,serving AP,%s", v41, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021D2C18);
            v36 = qword_1022A0088;
            sub_100CF1BCC((uint64_t *)v45, v41);
            if (v42 >= 0)
              v37 = v41;
            else
              v37 = *(_BYTE **)v41;
            v43 = 136315138;
            v44 = v37;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "#wlan,onWifiNotification,serving AP,%s", (const char *)&v43);
            v39 = v38;
            if (v42 < 0)
              operator delete(*(void **)v41);
            sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v39);
            if (v39 != buf)
              free(v39);
          }
          sub_100CF27E8((uint64_t)v45, (uint64_t)buf);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)buf;
          v24 = (void **)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            operator delete(*v24);
          *(_OWORD *)v24 = *(_OWORD *)&buf[8];
          *(double *)(a1 + 112) = v52;
          v25 = v54;
          *(_OWORD *)(a1 + 120) = v53;
          *(_OWORD *)(a1 + 136) = v25;
          *(_OWORD *)(a1 + 152) = v55;
          *(_QWORD *)(a1 + 168) = v56;
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D2C18);
          v26 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,could not fetch serving AP", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021D2C18);
            *(_WORD *)v41 = 0;
            LODWORD(v40) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,onWifiNotification,could not fetch serving AP", v41, *(_QWORD *)&v40);
            v35 = (char *)v34;
            sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v34);
            if (v35 != buf)
              free(v35);
          }
        }
        if (SHIBYTE(v46) < 0)
          operator delete(*(void **)&v45[8]);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D2C18);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,not associated to any AP", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D2C18);
          *(_WORD *)v45 = 0;
          LODWORD(v40) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,onWifiNotification,not associated to any AP", v45, *(_QWORD *)&v40);
          v10 = (char *)v9;
          sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v9);
LABEL_35:
          if (v10 != buf)
            free(v10);
        }
      }
      break;
    default:
      return;
  }
}

void sub_101838064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1018380CC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021D2C18);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,setWlanMeasurementHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D2C18);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#wlan,setWlanMeasurementHandler", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrWlanScanner::setWlanMeasurementHandler(WlanMeasurementHandler)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_10183826C((_QWORD *)(a1 + 176), a2);
}

_QWORD *sub_10183826C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1018386D8(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101838304(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101838330(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10183835C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10183838C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018383B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1018383F4(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_101839264();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_101838578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_1018385B8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1018385E4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10183864C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_10183864C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_10183526C(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1018386C8(uint64_t a1)
{
  return sub_1018365C0(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

_QWORD *sub_1018386D8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101838840(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

#error "1018388C4: call analysis failed (funcsize=74)"

#error "101838A38: call analysis failed (funcsize=73)"

#error "101838BA8: call analysis failed (funcsize=74)"

#error "101838D1C: call analysis failed (funcsize=73)"

#error "101838E8C: call analysis failed (funcsize=73)"

#error "101838FFC: call analysis failed (funcsize=73)"

#error "10183916C: call analysis failed (funcsize=73)"

void sub_101839264()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2CB8);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_1018393EC(uint64_t a1, uint64_t a2)
{
  uint64_t __dst;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  __dst = a1;
  operator new();
}

void sub_10183982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v46 = a36;
  if (a36 == v40)
  {
    v47 = 4;
    v46 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_6:
  sub_1010E76C0((_QWORD *)(v37 + 400));
  sub_1010E76C0(v45);
  v48 = *(_QWORD **)(v37 + 304);
  if (v48 == v44)
  {
    v49 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_11;
    v49 = 5;
    v44 = *(_QWORD **)(v37 + 304);
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v49))(v44);
LABEL_11:
  v50 = *(_QWORD **)(v37 + 272);
  if (v50 == v43)
  {
    v51 = 4;
  }
  else
  {
    if (!v50)
      goto LABEL_16;
    v51 = 5;
    v43 = *(_QWORD **)(v37 + 272);
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v51))(v43);
LABEL_16:
  v52 = *(_QWORD **)(v37 + 232);
  if (v52 == v42)
  {
    v53 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_21;
    v53 = 5;
    v42 = *(_QWORD **)(v37 + 232);
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v53))(v42);
LABEL_21:
  sub_100008848(v41, *(_QWORD **)(v37 + 192));
  v54 = *(_QWORD **)(v37 + 176);
  if (v54 == a11)
  {
    v55 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_26;
    v55 = 5;
    a11 = *(_QWORD **)(v37 + 176);
  }
  (*(void (**)(void))(*a11 + 8 * v55))();
LABEL_26:
  sub_101840FD8(v39, 0);
  sub_101840A64(v38);
  _Unwind_Resume(a1);
}

uint64_t **sub_1018399D0(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21[2];
  char v22;
  int v23;
  _BYTE __p[12];
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  _BYTE buf[12];
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;

  v23 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10184A384(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021D2D20);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7)
      v11 = "kRunning";
    else
      v11 = "kDisconnected";
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v28) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v30 = 1024;
    v31 = v7;
    v32 = 2080;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v28) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    if (v7)
      v17 = "kRunning";
    else
      v17 = "kDisconnected";
    sub_1015A2E04(v21, v17);
    if (v22 >= 0)
      v18 = v21;
    else
      v18 = (void **)v21[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v25 = 1024;
    v26 = v7;
    v27 = 2080;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v21[0]);
    v20 = v19;
    if (v22 < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLIceController>::setStateHandler(State, StateHandler) [T = CLIceController]", "%s\n", v20);
    if (v20 != buf)
      free(v20);
  }
  *(_QWORD *)buf = &v23;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_101839CC4(uint64_t a1, int a2)
{
  _BOOL8 result;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  result = 0;
  switch(a2)
  {
    case 0:
      sub_10183C394(a1);
      return 0;
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Already in disconnected state, but getting another kDisconnect", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Already in disconnected state, but getting another kDisconnect", v9, 2, v9[0]);
      break;
    case 3:
      return 1;
    case 4:
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected events", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unexpected events", v9, 2, v9[0]);
      break;
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning kResetRequestFromGnss when disconnected", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning kResetRequestFromGnss when disconnected", v9, 2, v9[0]);
      break;
    default:
      return result;
  }
  v8 = (uint8_t *)v5;
  sub_100512490("Generic", 1, 0, 2, "CLIceController::State CLIceController::handler_kDisconnected(CLIceController::Event)", "%s\n", v5);
  if (v8 != buf)
    free(v8);
  return 0;
}

uint64_t sub_10183A050(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  result = 1;
  switch(a2)
  {
    case 0:
    case 3:
      sub_10183C578(a1);
      goto LABEL_10;
    case 2:
      result = 0;
      break;
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning servicing kResetRequestFromGnss", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D2D20);
        v7[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning servicing kResetRequestFromGnss", v7, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "CLIceController::State CLIceController::handler_kRunning(CLIceController::Event)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLTelephonyService")), "resetModemWithReason:", CFSTR("GPS library cannot reach BB; please attach sysdiagnose and BB logs for triage"));
LABEL_10:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10183A258(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(NSObject ***)(a1 + 32);
  v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10183A2B0;
  block[3] = &unk_10212ECA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10183A2B0(uint64_t a1)
{
  return sub_10183A2C0(*(_QWORD *)(a1 + 32) + 16, 4);
}

uint64_t sub_10183A2C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t **v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  _QWORD *v29;
  char *v30;
  _BYTE *v31;
  NSObject *v32;
  os_log_type_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t *v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  NSObject *v47;
  os_log_type_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t *v51;
  int v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _BYTE *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  const char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  int v87;
  _BYTE *v88;
  _BYTE *v89;
  void **v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  int v97;
  _BYTE *v98;
  _BYTE *v99;
  void **v100;
  char *v101;
  char *v102;
  const char *v103;
  const char *v104;
  int v105;
  void *v106[2];
  char v107;
  int v108;
  _BYTE __p[12];
  __int16 v110;
  _BYTE *v111;
  __int16 v112;
  void **v113;
  _BYTE buf[12];
  __int16 v115;
  _BYTE *v116;
  __int16 v117;
  _BYTE *v118;
  _BYTE v119[12];
  __int16 v120;
  _BYTE *v121;
  char v122;

  ++*(_DWORD *)(a1 + 88);
  v108 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10184A4F4();
    goto LABEL_181;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_10184A65C(qword_1022A0070 == -1);
    goto LABEL_181;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    if (*(_DWORD *)(a1 + 4))
      v8 = "kRunning";
    else
      v8 = "kDisconnected";
    sub_1015A2E04(__p, v8);
    v9 = SHIBYTE(v112);
    v10 = *(_BYTE **)__p;
    sub_10183C768(a2, v119);
    v11 = __p;
    if (v9 < 0)
      v11 = v10;
    if (v122 >= 0)
      v12 = v119;
    else
      v12 = *(_BYTE **)v119;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v115 = 2080;
    v116 = v11;
    v117 = 2080;
    v118 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v122 < 0)
      operator delete(*(void **)v119);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v112) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v62 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v62 = (_QWORD *)*v62;
    v63 = qword_1022A0078;
    v64 = *(unsigned __int8 *)(a1 + 120);
    if (*(_DWORD *)(a1 + 4))
      v65 = "kRunning";
    else
      v65 = "kDisconnected";
    sub_1015A2E04(v119, v65);
    v66 = v122;
    v67 = *(_BYTE **)v119;
    sub_10183C768(a2, v106);
    v68 = v119;
    if (v66 < 0)
      v68 = v67;
    if (v107 >= 0)
      v69 = v106;
    else
      v69 = (void **)v106[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v62;
    v110 = 2080;
    v111 = v68;
    v112 = 2080;
    v113 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, v64, "%scurrent_state,%s,event,%s", __p, 32, v104);
    v71 = v70;
    if (v107 < 0)
      operator delete(v106[0]);
    v3 = &qword_1022A0000;
    if (v122 < 0)
      operator delete(*(void **)v119);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_31;
  v14 = (uint64_t **)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 4);
  v16 = a1 + 16;
  do
  {
    v17 = *(_DWORD *)(v13 + 32);
    v18 = v17 < v15;
    if (v17 >= v15)
      v19 = (uint64_t *)v13;
    else
      v19 = (uint64_t *)(v13 + 8);
    if (!v18)
      v16 = v13;
    v13 = *v19;
  }
  while (*v19);
  if (v16 == a1 + 16 || v15 < *(_DWORD *)(v16 + 32))
  {
LABEL_31:
    sub_10184A7CC();
    goto LABEL_181;
  }
  v21 = *(uint64_t (**)(_QWORD *, uint64_t))(v16 + 40);
  v20 = *(_QWORD *)(v16 + 48);
  v22 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v20 >> 1));
  if ((v20 & 1) != 0)
    v21 = *(uint64_t (**)(_QWORD *, uint64_t))(*v22 + v21);
  v23 = v21(v22, a2);
  v24 = v23;
  v105 = v23;
  if (a2 <= 1 && (_DWORD)v23 != v108)
  {
    sub_10184AC04();
    goto LABEL_181;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v26 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v26 = (_QWORD *)*v26;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v79 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v79 = (_QWORD *)*v79;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v79;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v81 = (char *)v80;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v80);
      if (v81 != buf)
        free(v81);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v27 = qword_1022A0078;
  v28 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v28))
  {
    v29 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v29 = (_QWORD *)*v29;
    if ((_DWORD)v24)
      v30 = "kRunning";
    else
      v30 = "kDisconnected";
    sub_1015A2E04(buf, v30);
    if (v117 >= 0)
      v31 = buf;
    else
      v31 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v29;
    v110 = 2080;
    v111 = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v117) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    if ((_DWORD)v24)
      v75 = "kRunning";
    else
      v75 = "kDisconnected";
    sub_1015A2E04(__p, v75);
    if (v112 >= 0)
      v76 = __p;
    else
      v76 = *(_BYTE **)__p;
    *(_DWORD *)v119 = 136315394;
    *(_QWORD *)&v119[4] = v72;
    v120 = 2080;
    v121 = v76;
    LODWORD(v103) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v119, v103);
    v78 = v77;
    if (SHIBYTE(v112) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v78);
    if (v78 != buf)
      free(v78);
  }
  if ((_DWORD)v24 != v108)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v32 = qword_1022A0078;
    v33 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v33))
    {
      v34 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v34 = (_QWORD *)*v34;
      if (v108)
        v35 = "kRunning";
      else
        v35 = "kDisconnected";
      sub_1015A2E04(__p, v35);
      v36 = v3;
      v37 = SHIBYTE(v112);
      v38 = *(_BYTE **)__p;
      sub_1015A2E04(v119, "Exit");
      v39 = __p;
      if (v37 < 0)
        v39 = v38;
      if (v122 >= 0)
        v40 = v119;
      else
        v40 = *(_BYTE **)v119;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v34;
      v115 = 2080;
      v116 = v39;
      v117 = 2080;
      v118 = v40;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%soldState,%s,event,%s", buf, 0x20u);
      if (v122 < 0)
        operator delete(*(void **)v119);
      v3 = v36;
      if (SHIBYTE(v112) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v82 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v82 = (_QWORD *)*v82;
      v83 = qword_1022A0078;
      v84 = *(unsigned __int8 *)(a1 + 120);
      if (v108)
        v85 = "kRunning";
      else
        v85 = "kDisconnected";
      sub_1015A2E04(v119, v85);
      v86 = v3;
      v87 = v122;
      v88 = *(_BYTE **)v119;
      sub_1015A2E04(v106, "Exit");
      v89 = v119;
      if (v87 < 0)
        v89 = v88;
      if (v107 >= 0)
        v90 = v106;
      else
        v90 = (void **)v106[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v82;
      v110 = 2080;
      v111 = v89;
      v112 = 2080;
      v113 = v90;
      LODWORD(v103) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, v84, "%soldState,%s,event,%s", __p, v103, (const char *)(a1 + 8));
      v92 = v91;
      if (v107 < 0)
        operator delete(v106[0]);
      v3 = v86;
      v14 = (uint64_t **)v104;
      if (v122 < 0)
        operator delete(*(void **)v119);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v92);
      if (v92 != buf)
        free(v92);
    }
    v41 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v108;
    v42 = sub_1000610B4(v14, &v108, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v43 = v42[5];
    v44 = (uint64_t)v42[6];
    v45 = (_QWORD *)(v41 + (v44 >> 1));
    if ((v44 & 1) != 0)
      v43 = *(uint64_t **)(*v45 + v43);
    v46 = ((uint64_t (*)(_QWORD *, uint64_t))v43)(v45, 1);
    if (v46 == v108)
    {
      *(_DWORD *)(a1 + 4) = v24;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v47 = qword_1022A0078;
      v48 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v48))
      {
        v49 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v49 = (_QWORD *)*v49;
        if ((_DWORD)v24)
          v50 = "kRunning";
        else
          v50 = "kDisconnected";
        sub_1015A2E04(__p, v50);
        v51 = v3;
        v52 = SHIBYTE(v112);
        v53 = *(_BYTE **)__p;
        sub_1015A2E04(v119, "Enter");
        v54 = __p;
        if (v52 < 0)
          v54 = v53;
        if (v122 >= 0)
          v55 = v119;
        else
          v55 = *(_BYTE **)v119;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v49;
        v115 = 2080;
        v116 = v54;
        v117 = 2080;
        v118 = v55;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%snewState,%s,event,%s", buf, 0x20u);
        if (v122 < 0)
          operator delete(*(void **)v119);
        v3 = v51;
        if (SHIBYTE(v112) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D2D20);
        v93 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v93 = (_QWORD *)*v93;
        v94 = qword_1022A0078;
        v95 = *(unsigned __int8 *)(a1 + 120);
        if ((_DWORD)v24)
          v96 = "kRunning";
        else
          v96 = "kDisconnected";
        sub_1015A2E04(v119, v96);
        v97 = v122;
        v98 = *(_BYTE **)v119;
        sub_1015A2E04(v106, "Enter");
        v99 = v119;
        if (v97 < 0)
          v99 = v98;
        if (v107 >= 0)
          v100 = v106;
        else
          v100 = (void **)v106[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v93;
        v110 = 2080;
        v111 = v99;
        v112 = 2080;
        v113 = v100;
        LODWORD(v103) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v94, v95, "%snewState,%s,event,%s", __p, v103, v104);
        v102 = v101;
        if (v107 < 0)
          operator delete(v106[0]);
        if (v122 < 0)
          operator delete(*(void **)v119);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v102);
        if (v102 != buf)
          free(v102);
      }
      v56 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v105;
      v57 = sub_1000610B4(v14, &v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v58 = v57[5];
      v59 = (uint64_t)v57[6];
      v60 = (_QWORD *)(v56 + (v59 >> 1));
      if ((v59 & 1) != 0)
        v58 = *(uint64_t **)(*v60 + v58);
      v24 = ((uint64_t (*)(_QWORD *, _QWORD))v58)(v60, 0);
      if ((_DWORD)v24 == v105)
        goto LABEL_101;
      sub_10184A934();
    }
    else
    {
      sub_10184AA9C();
    }
LABEL_181:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v24;
}

void sub_10183B058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

void sub_10183B0B8(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(NSObject ***)(a1 + 32);
  v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10183B110;
  block[3] = &unk_10212ECA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10183B110(uint64_t a1)
{
  return sub_10183A2C0(*(_QWORD *)(a1 + 32) + 16, 5);
}

void sub_10183B120(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(NSObject ***)(a1 + 32);
  v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10183B178;
  block[3] = &unk_10212ECA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10183B178(uint64_t a1)
{
  return sub_10183A2C0(*(_QWORD *)(a1 + 32) + 16, 3);
}

void sub_10183B188(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(NSObject ***)(a1 + 32);
  v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10183B1E0;
  block[3] = &unk_10212ECA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10183B1E0(uint64_t a1)
{
  return sub_10183A2C0(*(_QWORD *)(a1 + 32) + 16, 2);
}

_QWORD *sub_10183B1F0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = GnssHal::ExtensionsOlaf::LtlInfo]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101841EC4;
  v32[3] = &unk_1021D2FE0;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_10183B6C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10183B708(uint64_t a1, uint64_t a2)
{
  sub_1018393EC(a1, a2);
}

uint64_t sub_10183B710(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  sub_1010E76C0((_QWORD *)(a1 + 400));
  sub_1010E76C0((_QWORD *)(a1 + 344));
  v2 = *(_QWORD **)(a1 + 304);
  if (v2 == (_QWORD *)(a1 + 280))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 280);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 272);
  if (v4 == (_QWORD *)(a1 + 248))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 248);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD **)(a1 + 232);
  if (v6 == (_QWORD *)(a1 + 208))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 208);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  sub_100008848(a1 + 184, *(_QWORD **)(a1 + 192));
  v8 = *(_QWORD **)(a1 + 176);
  if (v8 == (_QWORD *)(a1 + 152))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 152);
    goto LABEL_20;
  }
  if (v8)
  {
    v9 = 5;
LABEL_20:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  sub_101840FD8((uint64_t *)(a1 + 144), 0);
  sub_101840A64(a1 + 16);
  return a1;
}

uint64_t sub_10183B824(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  sub_10021018C((_QWORD *)(a1 + 208), a2);
  v5 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 232);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

void sub_10183B874(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  char v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  unsigned int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v10 = sub_1001DC538();
  if (!a2 || (v10 & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      v25 = a2;
      v26 = 1024;
      v27 = a3;
      v28 = 1024;
      v29 = a4;
      v30 = 1024;
      v31 = a5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "setLPPConfig,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v20) = 1024;
      HIWORD(v20) = a3;
      v21 = a4;
      v22 = 1024;
      v23 = a5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "setLPPConfig,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", &v19, 26, 67109888, v20);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::setLPPConfig(uint32_t, BOOL, BOOL, BOOL)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    if (sub_10075B95C())
    {
      v15 = (uint64_t *)(a1 + 392);
      sub_10183BC74(v15, a2, 0x2Cu, a3);
      sub_10183BC74(v15, a2, 0x2Du, a4);
      sub_10183BC74(v15, a2, 0x2Eu, a5);
    }
    else
    {
      v16 = (uint64_t *)(a1 + 336);
      sub_10183C008(v16, a2, 0x2Cu, a3);
      sub_10183C008(v16, a2, 0x2Du, a4);
      sub_10183C008(v16, a2, 0x2Eu, a5);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109888;
      v25 = a2;
      v26 = 1024;
      v27 = a3;
      v28 = 1024;
      v29 = a4;
      v30 = 1024;
      v31 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "setLPPConfig,Invalid,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v20) = 1024;
      HIWORD(v20) = a3;
      v21 = a4;
      v22 = 1024;
      v23 = a5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "setLPPConfig,Invalid,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", &v19, 26, 67109888, v20);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::setLPPConfig(uint32_t, BOOL, BOOL, BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10183BC74(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  int v27;

  v14 = __PAIR64__(a3, a2);
  LOBYTE(v15) = a4;
  if (a2 && (sub_1001DC538() & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67175169;
      v23 = a2;
      v24 = 1025;
      v25 = a3;
      v26 = 1025;
      v27 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "PosCapabilityQueue,push,Invalid,nInstance,%{private}d,cap,%{private}d,value,%{private}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v16 = 67175169;
      v17 = a2;
      v18 = 1025;
      v19 = a3;
      v20 = 1025;
      v21 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "PosCapabilityQueue,push,Invalid,nInstance,%{private}d,cap,%{private}d,value,%{private}d", &v16, 20, v14, v15);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::PosCapabilityQueue::setCapability(uint32_t, IBIClsPositioningCapabilityType, BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67175169;
      v23 = a2;
      v24 = 1025;
      v25 = a3;
      v26 = 1025;
      v27 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PosCapabilityQueue,push,nInstance,%{private}d,cap,%{private}d,value,%{private}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v16 = 67175169;
      v17 = a2;
      v18 = 1025;
      v19 = a3;
      v20 = 1025;
      v21 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "PosCapabilityQueue,push,nInstance,%{private}d,cap,%{private}d,value,%{private}d", &v16, 20, v14, v15);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::setCapability(uint32_t, IBIClsPositioningCapabilityType, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_101844A64(a1 + 1, (uint64_t *)&v14);
    if (a1[6] == 1)
      sub_10183D3E0(a1, v14, v15);
  }
}

void sub_10183C008(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  char v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  int v28;

  v15 = __PAIR64__(a3, a2);
  v16 = a4;
  v8 = sub_1001DC538();
  if (!a2 || (v8 & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v24 = a2;
      v25 = 1024;
      v26 = a3;
      v27 = 1024;
      v28 = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,push,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v17 = 67109632;
      v18 = a2;
      v19 = 1024;
      v20 = a3;
      v21 = 1024;
      v22 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "SsLcsCapabilityQueue,push,nInstance,%d,cap,%d,value,%d", &v17, 20, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::setCapability(uint32_t, IBISsLcsPositioningCapabilityType, BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_1018434E0(a1 + 1, (uint64_t *)&v15);
    if (a1[6] == 1)
      sub_10183CBB8(a1, v15, v16);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109632;
      v24 = a2;
      v25 = 1024;
      v26 = a3;
      v27 = 1024;
      v28 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SsLcsCapabilityQueue,push,Invalid,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v17 = 67109632;
      v18 = a2;
      v19 = 1024;
      v20 = a3;
      v21 = 1024;
      v22 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "SsLcsCapabilityQueue,push,Invalid,nInstance,%d,cap,%d,value,%d", &v17, 20, v15);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::SsLcsCapabilityQueue::setCapability(uint32_t, IBISsLcsPositioningCapabilityType, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

uint64_t sub_10183C394(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "baseband/CT is down", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "baseband/CT is down", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::onStop()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_BYTE *)(a1 + 8) = 0;
  buf[0] = 0;
  v3 = *(_QWORD *)(a1 + 232);
  if (!v3
    || ((*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, buf),
        *(_DWORD *)buf = 5,
        (v4 = *(_QWORD *)(a1 + 272)) == 0))
  {
    sub_10025FD1C();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
  return sub_1009FAA60(a1 + 280, 1, 0);
}

void sub_10183C578(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "baseband/CT is up", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "baseband/CT is up", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::onStart()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 8) = 1;
  buf[0] = 1;
  v3 = *(_QWORD *)(a1 + 232);
  if (!v3
    || ((*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, buf),
        *(_DWORD *)buf = 4,
        (v4 = *(_QWORD *)(a1 + 272)) == 0))
  {
    sub_10025FD1C();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
  sub_1009FAA60(a1 + 280, 0, 0);
  sub_10183E664(a1);
}

_QWORD *sub_10183C768@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_1021D37D0[a1]);
}

BOOL sub_10183C77C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  NSObject *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  NSObject *v18;
  _BOOL4 v19;
  uint8_t *v20;
  double v21;
  NSObject *v22;
  int v23;
  int v24;
  double v25;
  uint8_t *v26;
  uint8_t *v27;
  _QWORD v28[2];
  uint8_t buf[4];
  int v30;

  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_11;
  v6 = a1 + 192;
  v7 = *(_QWORD *)(a1 + 192);
  do
  {
    v8 = *(_DWORD *)(v7 + 28);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v7;
    else
      v10 = (uint64_t *)(v7 + 8);
    if (!v9)
      v6 = v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v3 || *(_DWORD *)(v6 + 28) > a2)
  {
LABEL_11:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid request id. Cannot map to GMID", buf, 2u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v12)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    LOWORD(v28[0]) = 0;
    v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid request id. Cannot map to GMID", v28, 2, v28[0]);
    goto LABEL_47;
  }
  v14 = a1 + 192;
  do
  {
    v15 = *(_DWORD *)(v4 + 28);
    v16 = v15 < a3;
    if (v15 >= a3)
      v17 = (uint64_t *)v4;
    else
      v17 = (uint64_t *)(v4 + 8);
    if (!v16)
      v14 = v4;
    v4 = *v17;
  }
  while (*v17);
  if (v14 == v3 || *(_DWORD *)(v14 + 28) > a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Invalid expected response id. Cannot map to GMID", buf, 2u);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v28[0]) = 0;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid expected response id. Cannot map to GMID", v28, 2, v28[0]);
LABEL_47:
      v27 = v20;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIceController::isSendAllowed(CLIceMessageDef::MessageId, CLIceMessageDef::MessageId)", "%s\n", v21);
LABEL_48:
      if (v27 != buf)
        free(v27);
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 8))
      return 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(unsigned __int8 *)(a1 + 8);
      *(_DWORD *)buf = 67109120;
      v30 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Message send not allowed,connected,%d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v24 = *(unsigned __int8 *)(a1 + 8);
      LODWORD(v28[0]) = 67109120;
      HIDWORD(v28[0]) = v24;
      v25 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Message send not allowed,connected,%d", v28);
      v27 = v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLIceController::isSendAllowed(CLIceMessageDef::MessageId, CLIceMessageDef::MessageId)", "%s\n", v25);
      goto LABEL_48;
    }
  }
  return result;
}

_QWORD *sub_10183CBB8(uint64_t *a1, unint64_t a2, char a3)
{
  int v4;
  unint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  _BYTE v23[6];
  __int16 v24;
  int v25;
  int v26;

  v4 = a2;
  v6 = HIDWORD(a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v22 = v4;
    *(_WORD *)v23 = 1024;
    *(_DWORD *)&v23[2] = v6;
    v24 = 1024;
    v25 = a3 & 1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,send,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8 = a3 & 1;
    v16[0] = 67109632;
    v16[1] = v4;
    v17 = 1024;
    v18 = v6;
    v19 = 1024;
    v20 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "SsLcsCapabilityQueue,send,nInstance,%d,cap,%d,value,%d", v16, 20, LODWORD(v14[0]));
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::sendToBaseband(SsLcsCapabilityElement)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  else
  {
    v8 = a3 & 1;
  }
  *(_DWORD *)buf = v4;
  v22 = 0;
  *(_DWORD *)v23 = v6;
  v23[4] = 1;
  v25 = v8;
  v26 = 0;
  v9 = *a1;
  v14[0] = off_1021D3140;
  v14[1] = a1;
  v15 = v14;
  sub_10183CE54(v9, 53, (uint64_t)buf, 39, (uint64_t)v14);
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_10183CE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_10183CE54(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  __int16 v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_101842EFC;
    block[3] = &unk_1021D3100;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758B68((AriMsg *)v28, a3))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    v45 = 1024;
    v46 = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_10184232C;
  v35[3] = &unk_1021D30D0;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_10183D374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10183D3E0(uint64_t *a1, unint64_t a2, char a3)
{
  int v4;
  unint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  _BYTE v23[6];
  __int16 v24;
  int v25;
  int v26;

  v4 = a2;
  v6 = HIDWORD(a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67175169;
    v22 = v4;
    *(_WORD *)v23 = 1025;
    *(_DWORD *)&v23[2] = v6;
    v24 = 1025;
    v25 = a3 & 1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PosLcsCapabilityElement,send,nInstance,%{private}d,cap,%{private}d,value,%{private}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8 = a3 & 1;
    v16[0] = 67175169;
    v16[1] = v4;
    v17 = 1025;
    v18 = v6;
    v19 = 1025;
    v20 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "PosLcsCapabilityElement,send,nInstance,%{private}d,cap,%{private}d,value,%{private}d", v16, 20);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::sendToBaseband(PosLcsCapabilityElement)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  else
  {
    v8 = a3 & 1;
  }
  *(_DWORD *)buf = v4;
  v22 = 0;
  *(_DWORD *)v23 = v6;
  v23[4] = 1;
  v25 = v8;
  v26 = 0;
  v9 = *a1;
  v14[0] = off_1021D3260;
  v14[1] = a1;
  v15 = v14;
  sub_10183D67C(v9, 54, (uint64_t)buf, 40, (uint64_t)v14);
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_10183D63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_10183D67C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  __int16 v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_101844480;
    block[3] = &unk_1021D3220;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758B68((AriMsg *)v28, a3))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    v45 = 1024;
    v46 = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1018438B0;
  v35[3] = &unk_1021D31F0;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_10183DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_10183DC08(uint64_t a1)
{
  unint64_t v2;
  int v3;
  int v4;
  char v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  uint8_t *v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (!*(_QWORD *)(a1 + 48))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "SsLcsCapabilityQueue,pop,queueEmptyFailure", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    LOWORD(v17) = 0;
    v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "SsLcsCapabilityQueue,pop,queueEmptyFailure", &v17, 2);
    v11 = v10;
    sub_100512490("Generic", 1, 0, 0, "void CLIceController::SsLcsCapabilityQueue::onCapabilityResponse()", "%s\n", v9);
LABEL_30:
    if (v11 != buf)
      free(v11);
    return;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x155uLL))
     + 12 * (*(_QWORD *)(a1 + 40) % 0x155uLL);
  v4 = *(_DWORD *)v2;
  v3 = *(_DWORD *)(v2 + 4);
  v5 = *(_BYTE *)(v2 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v23 = v4;
    v24 = 1024;
    v25 = v3;
    v26 = 1024;
    v27 = v5 & 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,pop,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = 1024;
    v19 = v3;
    v20 = 1024;
    v21 = v5 & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "SsLcsCapabilityQueue,pop,nInstance,%d,cap,%d,value,%d", &v17, 20, 67109632);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::onCapabilityResponse()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_101B9DFC0);
  sub_1010E7864(a1 + 8, 1);
  if (*(_QWORD *)(a1 + 48))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x155uLL))
       + 12 * (*(_QWORD *)(a1 + 40) % 0x155uLL);
    sub_10183CBB8((uint64_t *)a1, *(_QWORD *)v7, *(_DWORD *)(v7 + 8));
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v23 = v4;
    v24 = 1024;
    v25 = v3;
    v26 = 1024;
    v27 = v5 & 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,end,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = 1024;
    v19 = v3;
    v20 = 1024;
    v21 = v5 & 1;
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "SsLcsCapabilityQueue,end,nInstance,%d,cap,%d,value,%d", &v17, 20, 67109632);
    v11 = v16;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::onCapabilityResponse()", "%s\n", v15);
    goto LABEL_30;
  }
}

void sub_10183E144(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  NSObject *v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  NSObject *v11;
  unint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  if (!*(_QWORD *)(a1 + 48))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "PosCapabilityQueue,pop,queueEmptyFailure", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    LOWORD(v19) = 0;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "PosCapabilityQueue,pop,queueEmptyFailure", &v19, 2);
    v10 = v9;
    sub_100512490("Generic", 1, 0, 0, "void CLIceController::PosCapabilityQueue::onCapabilityResponse()", "%s\n", v8);
LABEL_30:
    if (v10 != buf)
      free(v10);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x155uLL))
       + 12 * (*(_QWORD *)(a1 + 40) % 0x155uLL);
    v4 = *(_DWORD *)v3;
    v5 = *(_DWORD *)(v3 + 4);
    LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
    *(_DWORD *)buf = 67109632;
    v25 = v4;
    v26 = 1024;
    v27 = v5;
    v28 = 1024;
    v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PosCapabilityQueue,pop,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x155uLL))
        + 12 * (*(_QWORD *)(a1 + 40) % 0x155uLL);
    v13 = *(_DWORD *)(v12 + 4);
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 8);
    v20 = 1024;
    v21 = v13;
    v22 = 1024;
    v23 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "PosCapabilityQueue,pop,nInstance,%d,cap,%d,value,%d", &v19, 20, 67109632);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::onCapabilityResponse()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_101B9DFC0);
  sub_1010E7864(a1 + 8, 1);
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x155uLL))
       + 12 * (*(_QWORD *)(a1 + 40) % 0x155uLL);
    sub_10183D3E0((uint64_t *)a1, *(_QWORD *)v6, *(_DWORD *)(v6 + 8));
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PosCapabilityQueue,end", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    LOWORD(v19) = 0;
    LODWORD(v18) = 2;
    v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "PosCapabilityQueue,end", &v19, v18);
    v10 = v17;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::onCapabilityResponse()", "%s\n", v16);
    goto LABEL_30;
  }
}

void sub_10183E664(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  uint8_t *v7;
  _QWORD v8[2];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 240))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,fIsNonEmergencySessionAllowed,true", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v8[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,fIsNonEmergencySessionAllowed,true", v8, 2, v8[0]);
LABEL_24:
      v7 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::sendNonEmergencySessionConfig()", "%s\n", v3);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "fIsNonEmergencySessionAllowed,false", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v8[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "fIsNonEmergencySessionAllowed,false", v8, 2, v8[0]);
      goto LABEL_24;
    }
  }
  v5 = sub_10075B95C();
  v6 = *(_BYTE *)(a1 + 240) != 0;
  if (v5)
  {
    sub_10183BC74((uint64_t *)(a1 + 392), 0, 0x23u, v6);
    if (sub_1001DC538())
      sub_10183BC74((uint64_t *)(a1 + 392), 1u, 0x23u, *(unsigned __int8 *)(a1 + 240));
  }
  else
  {
    sub_10183C008((uint64_t *)(a1 + 336), 0, 0x23u, v6);
    if (sub_1001DC538())
      sub_10183C008((uint64_t *)(a1 + 336), 1u, 0x23u, *(unsigned __int8 *)(a1 + 240));
  }
}

uint64_t sub_10183E954(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[5];
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = *((__int16 *)a2 + 8);
    v11 = *((__int16 *)a2 + 9);
    *(_DWORD *)buf = 67110656;
    v27 = v6;
    v28 = 1024;
    v29 = v5;
    v30 = 1024;
    v31 = v7;
    v32 = 1024;
    v33 = v8;
    v34 = 1024;
    v35 = v9;
    v36 = 1024;
    v37 = v10;
    v38 = 1024;
    v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "XccDbg,kXccClockCotrolInd,ind_type,%d,peripheral,%d,ref_clk_status,%d,ref_clock_state,%d,modem_connected,%d,freq_error_ppb,%d,freq_qual,%d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v14 = a2[5];
    v15 = a2[1];
    v16 = a2[2];
    v17 = *((_WORD *)a2 + 8);
    v18 = *((__int16 *)a2 + 9);
    LOWORD(v22) = 1024;
    HIWORD(v22) = v14;
    LOWORD(v23) = HIWORD(v16);
    HIWORD(v23) = 1024;
    LOWORD(v24) = 1024;
    HIWORD(v24) = v17;
    v25 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "XccDbg,kXccClockCotrolInd,ind_type,%d,peripheral,%d,ref_clk_status,%d,ref_clock_state,%d,modem_connected,%d,freq_error_ppb,%d,freq_qual,%d", &v21, 44, 67110656, v22, v15, v23, v24);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::handleXccIndication(const IBIXccClockControlIndCbParams &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  *(_DWORD *)buf = *a2 || !a2[1] || a2[2] == -1;
  v12 = *(_QWORD *)(a1 + 272);
  if (!v12)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
}

_QWORD *sub_10183EBD8(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[3];
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;

  v14[2] = 0;
  v14[0] = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,req", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v20[0] = 67109120;
    v20[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#supl,#ecid,req", v20);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v15 = a1;
  v7 = v16;
  sub_100270E34((uint64_t)v16, a3);
  v19 = 0;
  v8 = operator new(0x30uLL);
  *v8 = off_1021D3380;
  v8[1] = a1;
  sub_101846FD8((uint64_t)(v8 + 2), (uint64_t)v16);
  v19 = v8;
  sub_10183EECC(a1, 57, (char *)v14, 43, (uint64_t)v18);
  result = v19;
  if (v19 == v18)
  {
    v10 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v17 == v16)
  {
    v11 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
    v7 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
}

void sub_10183EE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a20;
  if (a20 == v20)
  {
    v24 = 4;
    v23 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a16 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a16)
      goto LABEL_11;
    v25 = 5;
    v21 = a16;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10183EECC(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t v41[4];
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[8];
  __int16 v46;
  int v47;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_101845AB0;
    block[3] = &unk_1021D3340;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758C10((AriMsg *)v28, a3))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v41 = 67240192;
      v42 = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v41, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v41, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, v41, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]", "%s\n", v21);
      if (v22 != v41)
        free(v22);
    }
    *(_DWORD *)v41 = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, uint8_t *))(*(_QWORD *)v20 + 48))(v20, v41, buf);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v46 = 1024;
    v47 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)v41 = 67109376;
    v42 = v24 >> 26;
    v43 = 1024;
    v44 = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v41, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_101844E34;
  v35[3] = &unk_1021D3310;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_10183F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10183F474(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  _QWORD *result;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  _QWORD v10[3];
  _QWORD *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  unsigned int v14;

  v9[0] = 0;
  v9[1] = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "XccDbg,timeout,%u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "XccDbg,timeout,%u", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::setXccEnableInternal(uint32_t)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v10[0] = off_1021D34C0;
  v10[1] = a2;
  v10[2] = a1;
  v11 = v10;
  sub_10183F6C0(a1, 56, v9, 42, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v6 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_10183F680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void sub_10183F6C0(uint64_t a1, int a2, void *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  __int16 v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_101847C38;
    block[3] = &unk_1021D3480;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758BE8((AriMsg *)v28, a3))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    v45 = 1024;
    v46 = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_101847068;
  v35[3] = &unk_1021D3450;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_10183FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10183FC4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  if (!*(_QWORD *)(a2 + 24))
  {
    sub_10184AD6C();
    __break(1u);
  }
  v3 = v15;
  sub_100270E34((uint64_t)v15, a2);
  v17 = a1;
  v4 = v18;
  sub_1018483E8((uint64_t)v18, (uint64_t)v15);
  v5 = operator new(0x30uLL);
  v6 = v17;
  *v5 = off_1021D3550;
  v5[1] = v6;
  sub_1018483E8((uint64_t)(v5 + 2), (uint64_t)v18);
  v21 = v5;
  sub_10184180C(v20, (_QWORD *)(a1 + 248));
  v7 = v21;
  if (v21 == v20)
  {
    v8 = 4;
    v7 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_7;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_7:
  if (v19 == v18)
  {
    v9 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_12;
    v9 = 5;
    v4 = v19;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v9))(v4);
LABEL_12:
  if (v16 == v15)
  {
    v10 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_17;
    v10 = 5;
    v3 = v16;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v10))(v3);
LABEL_17:
  if (*(_BYTE *)(a1 + 8))
    v11 = 4;
  else
    v11 = 5;
  LODWORD(v17) = v11;
  v12 = *(_QWORD *)(a1 + 272);
  if (!v12)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v17);
}

void sub_10183FDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  if (a19 == v20)
  {
    v22 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
    v20 = a19;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
LABEL_6:
  if (a14 == v19)
  {
    v23 = 4;
  }
  else
  {
    if (!a14)
      goto LABEL_11;
    v23 = 5;
    v19 = a14;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v23))(v19);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10183FE5C(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD *result;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[3];
  _QWORD v10[3];
  _QWORD *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v9[0] = 0;
  if ((a2 + 1) <= 3)
    v9[1] = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#xocal,requestInfo,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#xocal,requestInfo,%d", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::requestLtlInfo(const GnssHal::ExtensionsOlaf::LtlInfoType)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v10[0] = off_1021D3750;
  v10[1] = a1;
  v11 = v10;
  sub_1018400B4(a1, 59, (char *)v9, 45, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v6 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_101840074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void sub_1018400B4(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[72];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[2];
  __int16 v41;
  int v42;
  _DWORD v43[4];
  uint8_t buf[8];
  __int16 v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_101849E0C;
    block[3] = &unk_1021D3710;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758C68((AriMsg *)v28, a3))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v43[0] = 67240192;
      v43[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v43, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v40);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v45 = 1024;
    v46 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v40[0] = 67109376;
    v40[1] = v24 >> 26;
    v41 = 1024;
    v42 = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v40, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_101849244;
  v35[3] = &unk_1021D36E0;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1018405DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101840648(uint64_t a1)
{
  return sub_10183A2C0(a1 + 16, 6);
}

_QWORD *sub_101840654(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  if (*(_QWORD *)(a2 + 24))
  {
    v3 = a1 + 280;
    sub_10184069C((_QWORD *)(a1 + 280), a2);
    return (_QWORD *)sub_1009FAA60(v3, *(_BYTE *)(a1 + 8) == 0, 0);
  }
  else
  {
    v5 = (_QWORD *)sub_10184AED4();
    return sub_10184069C(v5, v6);
  }
}

_QWORD *sub_10184069C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101841D50(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101840734(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 304))
  {
    sub_1009FAA60(a1 + 280, 3, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#xocal,callback not set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#xocal,callback not set", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::handleLtlInfoInd(const GnssHal::ExtensionsOlaf::LtlInfo &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

_QWORD *sub_1018408F8@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 5)
    v2 = "StatusUnknown";
  else
    v2 = off_1021D3808[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_101840924@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StatusUnknown";
  else
    v2 = off_1021D3838[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t sub_101840950(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_100752D04((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1018409B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1018409CC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018409FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101840A24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_101840A64(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_101840ACC(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_101840ACC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_101840B48(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_101840B48(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_10183C768(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_10183C768(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLIceController>::cancelTimeoutEvent(Event) [T = CLIceController]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_10183C768(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_10183C768(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

uint64_t sub_101840FD8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100261F44(result);
    operator delete();
  }
  return result;
}

void sub_101841018()
{
  operator delete();
}

_QWORD *sub_10184102C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D2DB0;
  result[1] = v3;
  return result;
}

uint64_t sub_101841060(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D2DB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10184107C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE *v7;

  sub_1018411AC((uint64_t)v6, a2);
  if (!v7)
    sub_10025FD1C();
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)(a1 + 8));
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_6;
  }
  if (v7)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return 1;
}

void sub_101841128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101841164(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018411A0()
{
}

uint64_t sub_1018411AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_101841210(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101841378(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101841388()
{
  operator delete();
}

_QWORD *sub_10184139C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D2E40;
  return result;
}

void sub_1018413C0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D2E40;
}

void sub_1018413D8(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v2 = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Baseband status callback not yet registered, power, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6[0] = 67109120;
    v6[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Baseband status callback not yet registered, power, %d", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "auto CLIceController::CLIceController(dispatch_queue_t, BOOL, BOOL)::(anonymous class)::operator()(BOOL) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

uint64_t sub_101841580(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018415BC()
{
}

void sub_1018415CC()
{
  operator delete();
}

_QWORD *sub_1018415E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D2EC0;
  return result;
}

void sub_101841604(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D2EC0;
}

void sub_10184161C(uint64_t a1, int *a2)
{
  int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v2 = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning XCC status callback not yet registered, status, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6[0] = 67109120;
    v6[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning XCC status callback not yet registered, status, %d", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "auto CLIceController::CLIceController(dispatch_queue_t, BOOL, BOOL)::(anonymous class)::operator()(CLXccControllerProxy::XccStatus) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

uint64_t sub_1018417C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101841800()
{
}

_QWORD *sub_10184180C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101841974(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101841984()
{
  operator delete();
}

_QWORD *sub_101841998()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D2F40;
  return result;
}

void sub_1018419BC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D2F40;
}

void sub_1018419D4(uint64_t a1, int *a2, _DWORD **a3)
{
  _DWORD *v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  int v16;
  NSObject *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v3 = *a3;
  if (*a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)v3;
      v7 = v3[7];
      v6 = v3[8];
      v9 = v3[5];
      v8 = v3[6];
      v11 = v3[3];
      v10 = v3[4];
      v12 = v3[2];
      *(_DWORD *)buf = 67110912;
      v22 = v5;
      v23 = 1024;
      v24 = v12;
      v25 = 1024;
      v26 = v6;
      v27 = 1024;
      v28 = v7;
      v29 = 1024;
      v30 = v8;
      v31 = 1024;
      v32 = v9;
      v33 = 1024;
      v34 = v10;
      v35 = 1024;
      v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#warning,#xocal,defaultHandler,success,%d,infoType,%d,coeff,%d,%d,%d,%d,%d,%d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v13 = *(unsigned __int8 *)v3;
      v14 = v3[2];
      LODWORD(v19) = 67110912;
      HIDWORD(v19) = v13;
      LOWORD(v20) = 1024;
      *(_DWORD *)((char *)&v20 + 2) = v14;
      HIWORD(v20) = 1024;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#warning,#xocal,defaultHandler,success,%d,infoType,%d,coeff,%d,%d,%d,%d,%d,%d", &v19, 50, v19, v20);
LABEL_19:
      v18 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::CLIceController(dispatch_queue_t, BOOL, BOOL)::(anonymous class)::operator()(LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *) const", "%s\n", v15);
      if (v18 != buf)
        free(v18);
    }
  }
  else
  {
    v16 = *a2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#warning,#xocal,defaultHandler,status,%d,infoStatus,nullptr", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#warning,#xocal,defaultHandler,status,%d,infoStatus,nullptr", &v19);
      goto LABEL_19;
    }
  }
}

uint64_t sub_101841D08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101841D44()
{
}

_QWORD *sub_101841D50(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101841EB8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_101841EC4(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  __int128 v5;
  NSObject *v6;
  unsigned int v7;
  unsigned int Gmid;
  NSObject *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  uint8_t *v16;
  _QWORD __src[112];
  _QWORD block[4];
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[896];
  _DWORD v22[2];
  __int16 v23;
  int v24;
  uint8_t buf[4];
  unsigned int v26;
  __int16 v27;
  int v28;

  v4 = *(NSObject ***)(a1 + 32);
  LOBYTE(__src[0]) = 0;
  *(_OWORD *)((char *)__src + 4) = xmmword_101CE6760;
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)((char *)&__src[2] + 4) = v5;
  BYTE4(__src[4]) = 0;
  HIWORD(__src[4]) = 0x7FFF;
  memset(&__src[5], 255, 20);
  bzero((char *)&__src[7] + 4, 0x32AuLL);
  *(_OWORD *)&__src[109] = 0u;
  LODWORD(__src[111]) = -1;
  WORD2(__src[111]) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = AriMsg::getGmid(a2) >> 26;
    Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)buf = 67109376;
    v26 = v7;
    v27 = 1024;
    v28 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v12 = qword_1022A0078;
    v13 = AriMsg::getGmid(a2) >> 26;
    v14 = AriMsg::getGmid(a2);
    v22[0] = 67109376;
    v22[1] = v13;
    v23 = 1024;
    v24 = (v14 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v22, 14);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = GnssHal::ExtensionsOlaf::LtlInfo]_block_invoke", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_10175A498(a2, (uint64_t)__src);
  v9 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018421C8;
  block[3] = &unk_1021D2FB0;
  sub_100270E34((uint64_t)v19, a1 + 40);
  memcpy(v21, __src, sizeof(v21));
  dispatch_async(v9, block);
  result = v20;
  if (v20 == v19)
  {
    v11 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

uint64_t sub_1018421C8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_1018421F4(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101842200(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101842234(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101842240(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101842278()
{
  operator delete();
}

_QWORD *sub_10184228C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3020;
  result[1] = v3;
  return result;
}

uint64_t sub_1018422C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3020;
  a2[1] = v2;
  return result;
}

void sub_1018422DC(uint64_t a1, uint64_t a2)
{
  sub_101840734(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1018422E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101842320()
{
}

void sub_10184232C(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[28];
  _QWORD block[4];
  _BYTE v46[24];
  _BYTE *v47;
  int v48;
  _BYTE v49[28];
  int v50;
  int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  int v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  int v73;

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v63 = Gmid;
    v64 = 1024;
    v65 = v7;
    v66 = 1024;
    v67 = (v8 >> 15) & 0x3FF;
    v68 = 1024;
    v69 = v9;
    v70 = 1024;
    v71 = v9 >> 26;
    v72 = 1024;
    v73 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v50 = 67110400;
    v51 = v27;
    v52 = 1024;
    v53 = v28 >> 26;
    v54 = 1024;
    v55 = (v29 >> 15) & 0x3FF;
    v56 = 1024;
    v57 = v30;
    v58 = 1024;
    v59 = v30 >> 26;
    v60 = 1024;
    v61 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v50, 38, v43, *(_DWORD *)&v44[4], *(_DWORD *)&v44[12], *(_DWORD *)&v44[20]);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v63 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v50 = 67109120;
      v51 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v50);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v50, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_1017584FC(a2, (uint64_t)v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v50, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v50, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101842E38;
  block[3] = &unk_1021D30A0;
  v21 = v46;
  sub_100270E34((uint64_t)v46, a1 + 40);
  v48 = v17;
  *(_OWORD *)v49 = *(_OWORD *)v44;
  *(_OWORD *)&v49[12] = *(_OWORD *)&v44[12];
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v63 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v50 = 67240192;
      v51 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v50, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v63 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v50 = 67109120;
      v51 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v50);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v47 == v46)
  {
    v25 = 4;
  }
  else
  {
    if (!v47)
      return;
    v25 = 5;
    v21 = v47;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_101842DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101842E38(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_101842E7C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101842E88(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101842EBC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101842EC8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101842EFC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = *(_DWORD *)(a1 + 64);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9[0] = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v4 + 48))(v4, v9, buf);
}

void sub_1018430D8()
{
  operator delete();
}

_QWORD *sub_1018430EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3140;
  result[1] = v3;
  return result;
}

uint64_t sub_101843120(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3140;
  a2[1] = v2;
  return result;
}

void sub_10184313C(uint64_t a1, int *a2, int *a3)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (*a2 == 39)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = a3[2];
      v8 = a3[3];
      v9 = *((unsigned __int8 *)a3 + 16);
      v10 = a3[5];
      v12 = *a3;
      v11 = a3[1];
      *(_DWORD *)buf = 67110400;
      v20 = v11;
      v21 = 1024;
      v22 = v7;
      v23 = 1024;
      v24 = v8;
      v25 = 1024;
      v26 = v9;
      v27 = 1024;
      v28 = v10;
      v29 = 1024;
      v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "kSsLcsPositioningCapabilityRsp,result,%d,operation_type,%d,pos_caps_type,%d,pos_caps_value_length,%d,pos_caps_value,%u,ins%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v13 = a3[1];
      LODWORD(v18) = 67110400;
      HIDWORD(v18) = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "kSsLcsPositioningCapabilityRsp,result,%d,operation_type,%d,pos_caps_type,%d,pos_caps_value_length,%d,pos_caps_value,%u,ins%d", &v18, 38, v18);
LABEL_19:
      v17 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::SsLcsCapabilityQueue::sendToBaseband(SsLcsCapabilityElement)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIMsSsLcsPositioningCapabilityRspParamWithInstance &) const", "%s\n", v14);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *a3;
      *(_DWORD *)buf = 67109376;
      v20 = v4;
      v21 = 1024;
      v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected response for kSsLcsPositioningCapabilityReq,resp,%d,ins,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unexpected response for kSsLcsPositioningCapabilityReq,resp,%d,ins,%d", &v18);
      goto LABEL_19;
    }
  }
  sub_10183DC08(v5);
}

uint64_t sub_101843498(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018434D4()
{
}

void sub_1018434E0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10184359C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void sub_10184359C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_101843864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1018438B0(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[28];
  _QWORD block[4];
  _BYTE v46[24];
  _BYTE *v47;
  int v48;
  _BYTE v49[28];
  int v50;
  int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  int v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  int v73;

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v63 = Gmid;
    v64 = 1024;
    v65 = v7;
    v66 = 1024;
    v67 = (v8 >> 15) & 0x3FF;
    v68 = 1024;
    v69 = v9;
    v70 = 1024;
    v71 = v9 >> 26;
    v72 = 1024;
    v73 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v50 = 67110400;
    v51 = v27;
    v52 = 1024;
    v53 = v28 >> 26;
    v54 = 1024;
    v55 = (v29 >> 15) & 0x3FF;
    v56 = 1024;
    v57 = v30;
    v58 = 1024;
    v59 = v30 >> 26;
    v60 = 1024;
    v61 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v50, 38, v43, *(_DWORD *)&v44[4], *(_DWORD *)&v44[12], *(_DWORD *)&v44[20]);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v63 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v50 = 67109120;
      v51 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v50);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v50, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_1017584FC(a2, (uint64_t)v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v50, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v50, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018443BC;
  block[3] = &unk_1021D31C0;
  v21 = v46;
  sub_100270E34((uint64_t)v46, a1 + 40);
  v48 = v17;
  *(_OWORD *)v49 = *(_OWORD *)v44;
  *(_OWORD *)&v49[12] = *(_OWORD *)&v44[12];
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v63 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v50 = 67240192;
      v51 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v50, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v63 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v50 = 67109120;
      v51 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v50);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v47 == v46)
  {
    v25 = 4;
  }
  else
  {
    if (!v47)
      return;
    v25 = 5;
    v21 = v47;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_101844370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018443BC(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_101844400(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_10184440C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101844440(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10184444C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101844480(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = *(_DWORD *)(a1 + 64);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9[0] = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v4 + 48))(v4, v9, buf);
}

void sub_10184465C()
{
  operator delete();
}

_QWORD *sub_101844670(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3260;
  result[1] = v3;
  return result;
}

uint64_t sub_1018446A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3260;
  a2[1] = v2;
  return result;
}

void sub_1018446C0(uint64_t a1, int *a2, int *a3)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  NSObject *v15;
  int v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (*a2 == 40)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = a3[2];
      v8 = a3[3];
      v9 = *((unsigned __int8 *)a3 + 16);
      v10 = a3[5];
      v12 = *a3;
      v11 = a3[1];
      *(_DWORD *)buf = 67110400;
      v24 = v11;
      v25 = 1024;
      v26 = v7;
      v27 = 1024;
      v28 = v8;
      v29 = 1024;
      v30 = v9;
      v31 = 1024;
      v32 = v10;
      v33 = 1024;
      v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "kClsPositioningCapabilityRsp,result,%d,operation_type,%d,pos_caps_type,%d,pos_caps_value_length,%d,pos_caps_value,%u,ins%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v13 = a3[1];
      LODWORD(v19) = 67110400;
      HIDWORD(v19) = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "kClsPositioningCapabilityRsp,result,%d,operation_type,%d,pos_caps_type,%d,pos_caps_value_length,%d,pos_caps_value,%u,ins%d", &v19, 38, v19);
LABEL_19:
      v18 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::PosCapabilityQueue::sendToBaseband(PosLcsCapabilityElement)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const CLIBIMsClsPositioningCapabilityRspParamWithInstance &) const", "%s\n", v14);
      if (v18 != buf)
        free(v18);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *a3;
      *(_DWORD *)buf = 67174913;
      v24 = v4;
      v25 = 1025;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected response for kClsPositioningCapabilityReq,resp,%{private}d,ins,%{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v17 = *a3;
      LODWORD(v19) = 67174913;
      HIDWORD(v19) = v4;
      LOWORD(v20) = 1025;
      *(_DWORD *)((char *)&v20 + 2) = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unexpected response for kClsPositioningCapabilityReq,resp,%{private}d,ins,%{private}d", &v19, 14, v19, v20, v21, v22);
      goto LABEL_19;
    }
  }
  sub_10183E144(v5);
}

uint64_t sub_101844A1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101844A58()
{
}

void sub_101844A64(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101844B20(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void sub_101844B20(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_101844DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_101844E34(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  int *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  int *v32;
  const char *v33;
  int *v34;
  const char *v35;
  int *v36;
  const char *v37;
  int *v38;
  const char *v39;
  int *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  _DWORD __src[821];
  _QWORD block[4];
  _BYTE v46[24];
  _BYTE *v47;
  int v48;
  _BYTE v49[3284];
  int v50;
  int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  int v73;

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    v62 = 67110400;
    v63 = Gmid;
    v64 = 1024;
    v65 = v7;
    v66 = 1024;
    v67 = (v8 >> 15) & 0x3FF;
    v68 = 1024;
    v69 = v9;
    v70 = 1024;
    v71 = v9 >> 26;
    v72 = 1024;
    v73 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", (uint8_t *)&v62, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v62, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v50 = 67110400;
    v51 = v27;
    v52 = 1024;
    v53 = v28 >> 26;
    v54 = 1024;
    v55 = (v29 >> 15) & 0x3FF;
    v56 = 1024;
    v57 = v30;
    v58 = 1024;
    v59 = v30 >> 26;
    v60 = 1024;
    v61 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v50, 38, v43, __src[1], __src[3], __src[5]);
    v32 = (int *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v31);
    if (v32 != &v62)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        v62 = 67109120;
        v63 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", (uint8_t *)&v62, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(&v62, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v50 = 67109120;
      v51 = v13;
      _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v50);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != &v62)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v62) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", (uint8_t *)&v62, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v62, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v50, v42);
      v38 = (int *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v37);
      if (v38 != &v62)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_101759254(a2, (char *)__src))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v62) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", (uint8_t *)&v62, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(&v62, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v50, v42);
      v15 = (int *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v62) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", (uint8_t *)&v62, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v62, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v50) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v50, v42);
      v40 = (int *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v39);
      if (v40 != &v62)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018459EC;
  block[3] = &unk_1021D32E0;
  v21 = v46;
  sub_100270E34((uint64_t)v46, a1 + 40);
  v48 = v17;
  memcpy(v49, __src, sizeof(v49));
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v62 = 67240192;
      v63 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", (uint8_t *)&v62, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v62, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v50 = 67240192;
      v51 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v50, v42);
      v34 = (int *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v33);
      if (v34 != &v62)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v62 = 67109120;
      v63 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", (uint8_t *)&v62, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v62, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v50 = 67109120;
      v51 = v43;
      _os_log_send_and_compose_impl(2, 0, &v62, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v50);
      v36 = (int *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v35);
      if (v36 != &v62)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v47 == v46)
  {
    v25 = 4;
  }
  else
  {
    if (!v47)
      return;
    v25 = 5;
    v21 = v47;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1018459A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  if ((_QWORD *)STACK[0xD20] == v1)
  {
    v3 = 4;
  }
  else
  {
    if (!STACK[0xD20])
      goto LABEL_6;
    v3 = 5;
    v1 = (_QWORD *)STACK[0xD20];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v3))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1018459EC(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_101845A30(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101845A3C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101845A70(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101845A7C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101845AB0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = *(_DWORD *)(a1 + 64);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9[0] = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v4 + 48))(v4, v9, buf);
}

_QWORD *sub_101845C88(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021D3380;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101845CE4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021D3380;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_101845D50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_1021D3380;
  v2[1] = v3;
  sub_100270E34((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_101845D94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101845DA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = off_1021D3380;
  a2[1] = v2;
  return sub_100270E34((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *sub_101845DC8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101845DFC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_101845E4C(uint64_t a1, int *a2, int *a3)
{
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  __int16 v30;
  __int16 v31;
  int v32;
  int v33;
  __int16 v34;
  char v35;
  char v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  int v50;
  int *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  const char *v60;
  uint8_t *v61;
  int v62;
  const char *v63;
  uint8_t *v64;
  int v65;
  const char *v66;
  uint8_t *v67;
  NSObject *v68;
  int v69;
  NSObject *v70;
  int v71;
  NSObject *v72;
  int v73;
  int v74;
  const char *v75;
  uint8_t *v76;
  int v77;
  const char *v78;
  uint8_t *v79;
  int v80;
  const char *v81;
  uint8_t *v82;
  int v83;
  const char *v84;
  uint8_t *v85;
  int v86;
  const char *v87;
  uint8_t *v88;
  int v89;
  const char *v90;
  uint8_t *v91;
  uint64_t v92;
  char **v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  int v97;
  char v98;
  uint64_t v99;
  void *__p;
  char *v102;
  char *v103;
  int v104;
  __int128 v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  uint8_t buf[4];
  __int128 v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;

  v94 = a1;
  v3 = *a2;
  __p = 0;
  v102 = 0;
  v103 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v121) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,rsp", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v74 = *a3;
    v104 = 67109120;
    LODWORD(v105) = v74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#supl,#ecid,rsp", &v104);
    v76 = (uint8_t *)v75;
    sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v75);
    if (v76 != buf)
      free(v76);
  }
  if (*((unsigned __int8 *)a3 + 1744) >= 0x21u)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D33F0);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v7 = *((unsigned __int8 *)a3 + 1744);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&v121 = 32;
      WORD4(v121) = 1024;
      *(_DWORD *)((char *)&v121 + 10) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "LteCellListArraySize,%zu,is smaller than lteCellLength,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D33F0);
      v77 = *((unsigned __int8 *)a3 + 1744);
      v104 = 134218240;
      *(_QWORD *)&v105 = 32;
      WORD4(v105) = 1024;
      *(_DWORD *)((char *)&v105 + 10) = v77;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "LteCellListArraySize,%zu,is smaller than lteCellLength,%d", (size_t)&v104, 18);
      v79 = (uint8_t *)v78;
      sub_100512490("Generic", 1, 0, 0, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v78);
      if (v79 != buf)
        free(v79);
    }
    buf[0] = 0;
    v8 = *(_QWORD *)(v94 + 40);
    if (v8)
      goto LABEL_90;
LABEL_118:
    sub_10025FD1C();
  }
  if (v3 == 43)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D33F0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a3;
      *(_DWORD *)buf = 67109120;
      LODWORD(v121) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,valid kSingleShotRadioSignalReportingRsp", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D33F0);
      v80 = *a3;
      v104 = 67109120;
      LODWORD(v105) = v80;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#ecid,valid kSingleShotRadioSignalReportingRsp", &v104);
      v82 = (uint8_t *)v81;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v81);
      if (v82 != buf)
        free(v82);
    }
    if (*((_BYTE *)a3 + 1744))
    {
      v93 = &v103;
      *(_QWORD *)&v11 = 67109120;
      v96 = v11;
      *(_QWORD *)&v11 = 67111424;
      v95 = v11;
      v12 = 0;
      v13 = a3;
      do
      {
        v99 = v12;
        if (v13[12 * v12 + 437])
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D33F0);
          v14 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v15 = *a3;
            *(_DWORD *)buf = v96;
            LODWORD(v121) = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE NBR CEll", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021D33F0);
            v62 = *a3;
            v104 = v96;
            LODWORD(v105) = v62;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#ecid,LTE NBR CEll", &v104);
            v64 = (uint8_t *)v63;
            sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          v98 = 0;
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D33F0);
          v16 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *a3;
            *(_DWORD *)buf = v96;
            LODWORD(v121) = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE Serving CEll", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021D33F0);
            v65 = *a3;
            v104 = v96;
            LODWORD(v105) = v65;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#ecid,LTE Serving CEll", &v104);
            v67 = (uint8_t *)v66;
            sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v66);
            if (v67 != buf)
              free(v67);
          }
          v98 = 1;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D33F0);
        v18 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *a3;
          v20 = &a3[12 * v99];
          v21 = *((unsigned __int16 *)v20 + 876);
          v22 = *((unsigned __int16 *)v20 + 877);
          v23 = *((unsigned __int16 *)v20 + 880);
          v24 = v20[441];
          v25 = *((unsigned __int16 *)v20 + 888);
          v26 = *((unsigned __int8 *)v20 + 1778);
          v27 = *((unsigned __int8 *)v20 + 1779);
          v28 = v20[446];
          LODWORD(v20) = v20[442];
          *(_DWORD *)buf = v95;
          LODWORD(v121) = v19;
          WORD2(v121) = 1024;
          *(_DWORD *)((char *)&v121 + 6) = v21;
          WORD5(v121) = 1024;
          HIDWORD(v121) = v22;
          v122 = 1024;
          v123 = v23;
          v124 = 1024;
          v125 = v24;
          v126 = 1024;
          v127 = v25;
          v128 = 1024;
          v129 = v26;
          v130 = 1024;
          v131 = v27;
          v132 = 1024;
          v133 = v28;
          v134 = 1024;
          v135 = (int)v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE Cell Info,mcc,%hu,mnc,%d,tac,%u,ellid,%d,pci,%d,rsrp,%u,rsrq,%u,ta,%d,dlearfcn,%u", buf, 0x3Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021D33F0);
          v50 = *a3;
          v51 = &a3[12 * v99];
          v52 = *((unsigned __int16 *)v51 + 876);
          v53 = *((unsigned __int16 *)v51 + 877);
          v54 = *((unsigned __int16 *)v51 + 880);
          v55 = v51[441];
          v56 = *((unsigned __int16 *)v51 + 888);
          v57 = *((unsigned __int8 *)v51 + 1778);
          v58 = *((unsigned __int8 *)v51 + 1779);
          v59 = v51[446];
          LODWORD(v51) = v51[442];
          v104 = v95;
          LODWORD(v105) = v50;
          WORD2(v105) = 1024;
          *(_DWORD *)((char *)&v105 + 6) = v52;
          WORD5(v105) = 1024;
          HIDWORD(v105) = v53;
          v106 = 1024;
          v107 = v54;
          v108 = 1024;
          v109 = v55;
          v110 = 1024;
          v111 = v56;
          v112 = 1024;
          v113 = v57;
          v114 = 1024;
          v115 = v58;
          v116 = 1024;
          v117 = v59;
          v118 = 1024;
          v119 = (int)v51;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#ecid,LTE Cell Info,mcc,%hu,mnc,%d,tac,%u,ellid,%d,pci,%d,rsrp,%u,rsrq,%u,ta,%d,dlearfcn,%u", &v104, 62, (_DWORD)v93, v94, (_DWORD)v95, DWORD2(v95), (_DWORD)v96, DWORD2(v96), v97, v99);
          v61 = (uint8_t *)v60;
          sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v60);
          if (v61 != buf)
            free(v61);
        }
        v29 = &a3[12 * v99];
        v30 = *((_WORD *)v29 + 876);
        v31 = *((_WORD *)v29 + 877);
        v32 = *((unsigned __int16 *)v29 + 880);
        v33 = v29[441];
        v34 = *((_WORD *)v29 + 888);
        v35 = *((_BYTE *)v29 + 1778);
        v36 = *((_BYTE *)v29 + 1779);
        v37 = v29[446];
        v38 = v29[442];
        v39 = v102;
        if (v102 >= v103)
        {
          v41 = 0x6DB6DB6DB6DB6DB7 * ((v102 - (_BYTE *)__p) >> 2);
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) > 0x924924924924924)
            sub_100259694();
          if (0xDB6DB6DB6DB6DB6ELL * ((v103 - (_BYTE *)__p) >> 2) > v42)
            v42 = 0xDB6DB6DB6DB6DB6ELL * ((v103 - (_BYTE *)__p) >> 2);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v103 - (_BYTE *)__p) >> 2)) >= 0x492492492492492)
            v43 = 0x924924924924924;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)sub_100AAF154((uint64_t)v93, v43);
          else
            v44 = 0;
          v45 = &v44[4 * ((v102 - (_BYTE *)__p) >> 2)];
          *v45 = v98;
          *((_WORD *)v45 + 1) = v30;
          *((_WORD *)v45 + 2) = v31;
          *((_DWORD *)v45 + 2) = v32;
          *((_DWORD *)v45 + 3) = v33;
          *((_WORD *)v45 + 8) = v34;
          v45[18] = v35;
          v45[19] = v36;
          *((_DWORD *)v45 + 5) = v37;
          *((_DWORD *)v45 + 6) = v38;
          v47 = (char *)__p;
          v46 = v102;
          v48 = &v44[28 * v41];
          if (v102 != __p)
          {
            do
            {
              v49 = *(_OWORD *)(v46 - 28);
              *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
              *(_OWORD *)(v48 - 28) = v49;
              v48 -= 28;
              v46 -= 28;
            }
            while (v46 != v47);
            v46 = v47;
          }
          v40 = v45 + 28;
          __p = v48;
          v102 = v45 + 28;
          v103 = &v44[28 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v102 = v98;
          *((_WORD *)v39 + 1) = v30;
          *((_WORD *)v39 + 2) = v31;
          *((_DWORD *)v39 + 2) = v32;
          *((_DWORD *)v39 + 3) = v33;
          *((_WORD *)v39 + 8) = v34;
          v39[18] = v35;
          v39[19] = v36;
          v40 = v39 + 28;
          *((_DWORD *)v39 + 5) = v37;
          *((_DWORD *)v39 + 6) = v38;
        }
        v102 = v40;
        v13 = a3;
        v12 = v99 + 1;
      }
      while (v99 + 1 < (unint64_t)*((unsigned __int8 *)a3 + 1744));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D33F0);
      v70 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v71 = *a3;
        *(_DWORD *)buf = 67109376;
        LODWORD(v121) = v71;
        WORD2(v121) = 2048;
        *(_QWORD *)((char *)&v121 + 6) = 0x6DB6DB6DB6DB6DB7 * ((v102 - (_BYTE *)__p) >> 2);
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,lteCellListSize,%lu", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D33F0);
        v86 = *a3;
        v104 = 67109376;
        LODWORD(v105) = v86;
        WORD2(v105) = 2048;
        *(_QWORD *)((char *)&v105 + 6) = 0x6DB6DB6DB6DB6DB7 * ((v102 - (_BYTE *)__p) >> 2);
        LODWORD(v92) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#ecid,lteCellListSize,%lu", &v104, v92);
        v88 = (uint8_t *)v87;
        sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v87);
        if (v88 != buf)
          free(v88);
      }
      buf[0] = 1;
      v8 = *(_QWORD *)(v94 + 40);
      if (!v8)
        sub_10025FD1C();
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D33F0);
      v72 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v73 = *a3;
        *(_DWORD *)buf = 67109120;
        LODWORD(v121) = v73;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE is not the serving RAT", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021D33F0);
        v89 = *a3;
        v104 = 67109120;
        LODWORD(v105) = v89;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#ecid,LTE is not the serving RAT", &v104);
        v91 = (uint8_t *)v90;
        sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v90);
        if (v91 != buf)
          free(v91);
      }
      buf[0] = 0;
      v8 = *(_QWORD *)(v94 + 40);
      if (!v8)
        goto LABEL_118;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D33F0);
    v68 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v69 = *a3;
      *(_DWORD *)buf = 67109376;
      LODWORD(v121) = v69;
      WORD2(v121) = 1024;
      *(_DWORD *)((char *)&v121 + 6) = v3;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#Warning,#ins%d,#nilr,#supl,#ecid,Unexpected response for kNetSingleShotRadioSignalReportingReq,id,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D33F0);
      v83 = *a3;
      v104 = 67109376;
      LODWORD(v105) = v83;
      WORD2(v105) = 1024;
      *(_DWORD *)((char *)&v105 + 6) = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#ins%d,#nilr,#supl,#ecid,Unexpected response for kNetSingleShotRadioSignalReportingReq,id,%d", &v104, 14);
      v85 = (uint8_t *)v84;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v84);
      if (v85 != buf)
        free(v85);
    }
    buf[0] = 0;
    v8 = *(_QWORD *)(v94 + 40);
    if (!v8)
      goto LABEL_118;
  }
LABEL_90:
  (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v8 + 48))(v8, buf, &__p);
  if (__p)
  {
    v102 = (char *)__p;
    operator delete(__p);
  }
}

void sub_101846F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101846F90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101846FCC()
{
}

uint64_t sub_101846FD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_10184703C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101847068(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  _QWORD block[4];
  _BYTE v48[24];
  _BYTE *v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  int v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  __int16 v63;
  int v64;
  uint8_t buf[4];
  int v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  unsigned int v72;
  __int16 v73;
  unsigned int v74;
  __int16 v75;
  int v76;

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v66 = Gmid;
    v67 = 1024;
    v68 = v7;
    v69 = 1024;
    v70 = (v8 >> 15) & 0x3FF;
    v71 = 1024;
    v72 = v9;
    v73 = 1024;
    v74 = v9 >> 26;
    v75 = 1024;
    v76 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v53 = 67110400;
    v54 = v27;
    v55 = 1024;
    v56 = v28 >> 26;
    v57 = 1024;
    v58 = (v29 >> 15) & 0x3FF;
    v59 = 1024;
    v60 = v30;
    v61 = 1024;
    v62 = v30 >> 26;
    v63 = 1024;
    v64 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v53, 38, v43, (_DWORD)v45, DWORD2(v45), v46);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v66 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v53 = 67109120;
      v54 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v53);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v53) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v53, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_10175858C(a2, &v45))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v53) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v53, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v53) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v53, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101847B74;
  block[3] = &unk_1021D3420;
  v21 = v48;
  sub_100270E34((uint64_t)v48, a1 + 40);
  v50 = v17;
  v51 = v45;
  v52 = v46;
  dispatch_async(v20, block);
  v44 = 0;
  if (AriMsg::extractCtx(a2, &v44) || v44 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v66 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v53 = 67240192;
      v54 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v53, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v66 = v44;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v53 = 67109120;
      v54 = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v53);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v49 == v48)
  {
    v25 = 4;
  }
  else
  {
    if (!v49)
      return;
    v25 = 5;
    v21 = v49;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_101847B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101847B74(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_101847BB8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101847BC4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101847BF8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101847C04(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101847C38(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = *(_DWORD *)(a1 + 64);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9[0] = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v4 + 48))(v4, v9, buf);
}

void sub_101847E14()
{
  operator delete();
}

__n128 sub_101847E28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021D34C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101847E60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021D34C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101847E80(uint64_t a1, int *a2, int *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  _DWORD v33[2];
  int v34;
  int v35;
  int v36;
  int v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 8))
    v5 = 2;
  else
    v5 = 3;
  if (v3 == 42)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_DWORD *)(a1 + 8);
      v10 = a3[5];
      v11 = *a3;
      v12 = a3[1];
      v13 = a3[2];
      v14 = a3[3];
      v15 = *((__int16 *)a3 + 8);
      v16 = *((__int16 *)a3 + 9);
      *(_DWORD *)buf = 67110912;
      v39 = v9;
      v40 = 1024;
      v41 = v11;
      v42 = 1024;
      v43 = v10;
      v44 = 1024;
      v45 = v12;
      v46 = 1024;
      v47 = v13;
      v48 = 1024;
      v49 = v14;
      v50 = 1024;
      v51 = v15;
      v52 = 1024;
      v53 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "XccDbg,kXccClockCotrolRsp,timeout,%u,rsp_type,%d,peripheral,%d,ref_clk_status,%d,ref_clock_state,%d,modem_connected,%d,freq_error_ppb,%d,freq_qual,%d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v22 = a3[5];
      v23 = *a3;
      v24 = a3[1];
      v25 = a3[3];
      v26 = *((__int16 *)a3 + 8);
      v27 = *((__int16 *)a3 + 9);
      LOWORD(v34) = 1024;
      HIWORD(v34) = v23;
      LOWORD(v35) = HIWORD(v24);
      HIWORD(v35) = 1024;
      LOWORD(v36) = 1024;
      HIWORD(v36) = v25;
      HIWORD(v37) = HIWORD(v27);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "XccDbg,kXccClockCotrolRsp,timeout,%u,rsp_type,%d,peripheral,%d,ref_clk_status,%d,ref_clock_state,%d,modem_connected,%d,freq_error_ppb,%d,freq_qual,%d", v33, 50, 67110912, v34, v22, v35, v36, v26);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setXccEnableInternal(uint32_t)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccClockControlRspCbParams &) const", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    if (*a3 == 3)
    {
      if (*(_DWORD *)(a1 + 8))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D2D20);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "XccDbg, Received the successful kXccClockCotrolRsp, Wait for Indication", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D2D20);
          LOWORD(v33[0]) = 0;
          LODWORD(v32) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "XccDbg, Received the successful kXccClockCotrolRsp, Wait for Indication", v33, v32);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setXccEnableInternal(uint32_t)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccClockControlRspCbParams &) const", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
      }
      return;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v39 = v3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected response for kXccClockControlReq,resp,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v33[0] = 67109120;
      v33[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unexpected response for kXccClockControlReq,resp,%d", v33);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setXccEnableInternal(uint32_t)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccClockControlRspCbParams &) const", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  *(_DWORD *)buf = v5;
  v21 = *(_QWORD *)(v4 + 272);
  if (!v21)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v21 + 48))(v21, buf);
}

uint64_t sub_1018483A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1018483DC()
{
}

uint64_t sub_1018483E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_10184844C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021D3550;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1018484A8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021D3550;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_101848514(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_1021D3550;
  v2[1] = v3;
  sub_100270E34((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_101848558(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10184856C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = off_1021D3550;
  a2[1] = v2;
  return sub_100270E34((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *sub_10184858C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1018485C0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_101848610(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  _BYTE buf[12];
  char v16;
  int v17;
  _BYTE *v18;
  void *__p[2];
  char v20;
  _QWORD v21[3];
  _QWORD *v22;

  v3 = *a2;
  if (*a2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v21[0] = off_1021D3620;
    v21[1] = v4;
    v22 = v21;
    sub_10184892C(v4, 27, (uint64_t)v21);
    v5 = v22;
    if (v22 == v21)
    {
      v6 = 4;
      v5 = v21;
    }
    else
    {
      if (!v22)
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_7:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_1018408F8(v3, __p);
    v8 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "XccStatus(%s)", buf, 0xCu);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v11 = qword_1022A0078;
    sub_1018408F8(v3, buf);
    if (v16 >= 0)
      v12 = buf;
    else
      v12 = *(_BYTE **)buf;
    v17 = 136315138;
    v18 = v12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 2, "XccStatus(%s)", (const char *)&v17);
    v14 = v13;
    if (v16 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "auto CLIceController::setXccStatusCb(std::function<void (CLXccControllerProxy::XccStatus)>)::(anonymous class)::operator()(CLXccControllerProxy::XccStatus) const", "%s\n", v14);
    if (v14 != (char *)__p)
      free(v14);
  }
  LODWORD(__p[0]) = v3;
  v9 = *(_QWORD *)(a1 + 40);
  if (!v9)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v9 + 48))(v9, __p);
}

void sub_1018488A4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018488E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101848920()
{
}

_QWORD *sub_10184892C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  _QWORD v32[5];
  _BYTE v33[24];
  _BYTE *v34;

  v23 = a2;
  v3 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  if (!v4)
    goto LABEL_18;
  v7 = (uint64_t **)(a1 + 184);
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(_QWORD *)(a1 + 144))
  {
LABEL_18:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v24[0] = 67240192;
      v24[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Dont know how to map nilr,%{public}d", v24, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = IBIXccClockControlIndCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    }
    v19 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    }
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "false";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/ICE/CLIceController.h", 79, "regIndication");
    __break(1u);
  }
  *(_QWORD *)buf = &v23;
  v12 = *((_DWORD *)sub_100136FD4(v7, &v23, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_101848E44;
  v32[3] = &unk_1021D35E0;
  v32[4] = a1;
  v13 = v33;
  sub_100270E34((uint64_t)v33, a3);
  result = sub_10171382C(*(_QWORD **)(a1 + 144), v12, (uint64_t)v32);
  if (v34 == v33)
  {
    v15 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
    v13 = v34;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v15))(v13);
}

void sub_101848E00(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101848E44(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _QWORD block[4];
  _BYTE v13[24];
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  unsigned int v19;
  uint8_t buf[16];
  uint64_t v21;

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = AriMsg::getGmid(a2) >> 26;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v9 = qword_1022A0078;
    v17[0] = 67109376;
    v17[1] = AriMsg::getGmid(a2) >> 26;
    v18 = 1024;
    v19 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", v17, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = IBIXccClockControlIndCbParams]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_10175858C(a2, buf);
  v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018490E0;
  block[3] = &unk_1021D35B0;
  sub_100270E34((uint64_t)v13, a1 + 40);
  v15 = *(_OWORD *)buf;
  v16 = v21;
  dispatch_async(v6, block);
  result = v14;
  if (v14 == v13)
  {
    v8 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_1018490E0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

uint64_t sub_10184910C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101849118(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10184914C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101849158(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101849190()
{
  operator delete();
}

_QWORD *sub_1018491A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3620;
  result[1] = v3;
  return result;
}

uint64_t sub_1018491D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3620;
  a2[1] = v2;
  return result;
}

uint64_t sub_1018491F4(uint64_t a1, int *a2)
{
  return sub_10183E954(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1018491FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101849238()
{
}

void sub_101849244(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  void **block;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  _BYTE v50[24];
  _BYTE *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  int v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  int v77;

  v4 = *(NSObject ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v67 = Gmid;
    v68 = 1024;
    v69 = v7;
    v70 = 1024;
    v71 = (v8 >> 15) & 0x3FF;
    v72 = 1024;
    v73 = v9;
    v74 = 1024;
    v75 = v9 >> 26;
    v76 = 1024;
    v77 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v54 = 67110400;
    v55 = v27;
    v56 = 1024;
    v57 = v28 >> 26;
    v58 = 1024;
    v59 = (v29 >> 15) & 0x3FF;
    v60 = 1024;
    v61 = v30;
    v62 = 1024;
    v63 = v30 >> 26;
    v64 = 1024;
    v65 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v54, 38, v43, v45, (_DWORD)block, v47);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v67 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v54 = 67109120;
      v55 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v54);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v54) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v54, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_10175A77C(a2, &v45))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v54) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v54, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      LOWORD(v54) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v54, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block = _NSConcreteStackBlock;
  v47 = 3321888768;
  v48 = sub_101849D48;
  v49 = &unk_1021D36B0;
  v21 = v50;
  sub_100270E34((uint64_t)v50, a1 + 40);
  v52 = v17;
  v53 = v45;
  dispatch_async(v20, &block);
  v44 = 0;
  if (AriMsg::extractCtx(a2, &v44) || v44 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v67 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v54 = 67240192;
      v55 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v54, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v67 = v44;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      v54 = 67109120;
      v55 = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v54);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v51 == v50)
  {
    v25 = 4;
  }
  else
  {
    if (!v51)
      return;
    v25 = 5;
    v21 = v51;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_101849CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  _QWORD *v20;
  uint64_t v22;

  if (a20 == v20)
  {
    v22 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v22 = 5;
    v20 = a20;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101849D48(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_101849D8C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_101849D98(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101849DCC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101849DD8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_101849E0C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D2D20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v6 = *(_DWORD *)(a1 + 64);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9[0] = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v4 + 48))(v4, v9, buf);
}

void sub_101849FE8()
{
  operator delete();
}

_QWORD *sub_101849FFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3750;
  result[1] = v3;
  return result;
}

uint64_t sub_10184A030(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3750;
  a2[1] = v2;
  return result;
}

void sub_10184A04C(uint64_t a1, _DWORD *a2, int *a3)
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t *v9;
  int v10;
  uint8_t buf[4];
  int v12;

  if (*a2 == 45)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a3;
      *(_DWORD *)buf = 67109120;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#xocal,rsp,status_code,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#xocal,rsp,status_code,%d", &v10);
LABEL_21:
      v9 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "auto CLIceController::requestLtlInfo(const GnssHal::ExtensionsOlaf::LtlInfoType)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccLtlRspCb &) const", "%s\n", v6);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v7 + 304))
    {
      sub_1009FAA60(v7 + 280, 2, 0);
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D2D20);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#xocal,callback not set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D2D20);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#xocal,callback not set");
      goto LABEL_21;
    }
  }
}

uint64_t sub_10184A33C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10184A378()
{
}

#error "10184A3FC: call analysis failed (funcsize=73)"

#error "10184A568: call analysis failed (funcsize=71)"

#error "10184A6D4: call analysis failed (funcsize=73)"

#error "10184A840: call analysis failed (funcsize=71)"

#error "10184A9A8: call analysis failed (funcsize=71)"

#error "10184AB10: call analysis failed (funcsize=71)"

#error "10184AC78: call analysis failed (funcsize=71)"

#error "10184ADE0: call analysis failed (funcsize=71)"

#error "10184AF48: call analysis failed (funcsize=70)"

uint64_t sub_10184B034(uint64_t a1, char *a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  NSObject *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  int v14;
  _QWORD handler[5];
  _BYTE v16[24];
  _BYTE *v17;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a4);
  *(double *)(a1 + 16) = (double)*a3 / 1000.0;
  sub_1015A2E04((_QWORD *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v9 = *(NSObject **)(a1 + 8);
  if (!v9)
  {
    sub_10184C860(&v14);
    goto LABEL_15;
  }
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      goto LABEL_4;
LABEL_9:
    sub_10184CB00(&v14);
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_9;
LABEL_4:
  if (*(double *)(a1 + 16) <= 0.0)
  {
    sub_10184C9B0(&v14);
LABEL_15:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Eureka/CLQmiDiag.mm", v14, "DiagTimer");
    __break(1u);
  }
  dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  v10 = *(NSObject **)(a1 + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3321888768;
  handler[2] = sub_10184B224;
  handler[3] = &unk_1021D3858;
  handler[4] = a1;
  sub_100270E34((uint64_t)v16, a5);
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 8));
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_11;
  }
  if (v17)
  {
    v12 = 5;
LABEL_11:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

void sub_10184B200(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10184B224(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;
  void **v23;

  v2 = *(_QWORD *)(a1 + 32);
  sub_100263E50((uint64_t)v18);
  v3 = sub_100263F7C(&v19, (uint64_t)"#qmidiag,error,reason,", 22);
  v4 = (const char *)(v2 + 24);
  if (*(char *)(v2 + 47) < 0)
    v4 = *(const char **)v4;
  v5 = strlen(v4);
  v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
  v7 = sub_100263F7C(v6, (uint64_t)",started,", 9);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *(double *)(v2 + 48));
  v9 = sub_100263F7C(v8, (uint64_t)",delay,", 7);
  v10 = sub_1001FCBB4();
  v11 = (_QWORD *)std::ostream::operator<<(v9, v10 - *(double *)(v2 + 48));
  sub_100263F7C(v11, (uint64_t)" seconds", 8);
  std::stringbuf::str(__p, v20);
  if (v17 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v23 = v12;
  v13 = *(_QWORD *)(a1 + 64);
  if (!v13)
    sub_10025FD1C();
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v13 + 48))(v13, &v23);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v18
  v19 = v14;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  return std::ios::~ios(&v22);
}

void sub_10184B3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1018B38B4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10184B3E0(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10184B3EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10184B420(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  dispatch_time_t v5;
  _QWORD *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  _QWORD *v10;
  uint8_t buf[4];
  _QWORD *v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3888);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315138;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#qmidiag,start,%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v6 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v6 = (_QWORD *)*v6;
    v9 = 136315138;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#qmidiag,start,%s", (const char *)&v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::start()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_BYTE *)a1 = 1;
  *(double *)(a1 + 48) = sub_1001FCBB4();
  v4 = *(NSObject **)(a1 + 8);
  v5 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 16) * 1000000000.0));
  dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
}

void sub_10184B630(uint64_t a1)
{
  double v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;

  v2 = sub_1001FCBB4() - *(double *)(a1 + 48);
  if (v2 > *(double *)(a1 + 56))
  {
    *(double *)(a1 + 56) = v2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315394;
      v16 = v4;
      v17 = 2048;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#qmidiag,maxDelay,reason,%s,delay,%.2f seconds", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3888);
      v6 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v6 = (_QWORD *)*v6;
      v7 = *(_QWORD *)(a1 + 56);
      v11 = 136315394;
      v12 = v6;
      v13 = 2048;
      v14 = v7;
      LODWORD(v10) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#qmidiag,maxDelay,reason,%s,delay,%.2f seconds", (const char *)&v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::updateDelay()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10184B830(_BYTE *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v3 = a1 + 24;
      if ((char)a1[47] < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#qmidiag,update,%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3888);
      v4 = a1 + 24;
      if ((char)a1[47] < 0)
        v4 = (_QWORD *)*v4;
      v7 = 136315138;
      v8 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#qmidiag,update,%s", (const char *)&v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::update()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_10184B630((uint64_t)a1);
    sub_10184B420((uint64_t)a1);
  }
}

void sub_10184BA10(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*(_BYTE *)a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#qmidiag,cancel,%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3888);
      v4 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v7 = 136315138;
      v8 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#qmidiag,cancel,%s", (const char *)&v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::cancel()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *(_BYTE *)a1 = 0;
    sub_10184B630(a1);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  }
}

uint64_t sub_10184BC04(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;

  *(_QWORD *)a1 = a2;
  v3 = dispatch_queue_create("com.apple.locationd.qmidiag", 0);
  *(_QWORD *)(a1 + 8) = v3;
  v22[0] = off_1021D38B8;
  v22[1] = a1;
  v23 = v22;
  sub_10184B034(a1 + 16, "com.apple.locationd.qmiSilence", &qword_101CE7990, v3, (uint64_t)v22);
  v4 = v23;
  if (v23 == v22)
  {
    v5 = 4;
    v4 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(NSObject **)(a1 + 8);
  v20[0] = off_1021D3948;
  v20[1] = a1;
  v21 = v20;
  sub_10184B034(a1 + 80, "com.apple.locationd.processPds", &qword_101CE7998, v6, (uint64_t)v20);
  v7 = v21;
  if (v21 == v20)
  {
    v8 = 4;
    v7 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v9 = *(NSObject **)(a1 + 8);
  v18[0] = off_1021D39C8;
  v18[1] = a1;
  v19 = v18;
  sub_10184B034(a1 + 144, "com.apple.locationd.prepareToSleep", &qword_101CE79A0, v9, (uint64_t)v18);
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3888);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#qmidiag,created", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#qmidiag,created", v16, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLQmiDiag::CLQmiDiag(CLIntersiloUniverse *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return a1;
}

void sub_10184BED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 191) < 0)
    operator delete(*(void **)(v1 + 168));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10184BFB8(uint64_t a1)
{
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_10184C00C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10184C064;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10184C064(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10184B830((_BYTE *)(v1 + 16));
  sub_10184B420(v1 + 80);
}

void sub_10184C08C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10184C0E4;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10184C0E4(uint64_t a1)
{
  sub_10184BA10(*(_QWORD *)(a1 + 32) + 80);
}

void sub_10184C0F0(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10184C148;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10184C148(uint64_t a1)
{
  sub_10184B420(*(_QWORD *)(a1 + 32) + 144);
}

void sub_10184C154(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10184C1AC;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10184C1AC(uint64_t a1)
{
  sub_10184BA10(*(_QWORD *)(a1 + 32) + 144);
}

void sub_10184C1B8(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10184C210;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10184C210(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 208) = 0;
  sub_10184B420(v1 + 16);
}

void sub_10184C220(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10184C278;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10184C278(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 208) = 0;
  sub_10184BA10(v1 + 16);
}

void sub_10184C288(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3888);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#qmidiag,error,dumping logs with reason,%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v12 = 136315138;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#qmidiag,error,dumping logs with reason,%s", (const char *)&v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLQmiDiag::dumpLogs(const char *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 216) <= 600.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134217984;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#qmidiag,error,dumpingToFrequent,last,%.2f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3888);
      v9 = *(_QWORD *)(a1 + 216);
      v12 = 134217984;
      v13 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#qmidiag,error,dumpingToFrequent,last,%.2f", COERCE_DOUBLE(&v12));
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLQmiDiag::dumpLogs(const char *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    *(CFAbsoluteTime *)(a1 + 216) = CFAbsoluteTimeGetCurrent();
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "dumpLogWithReason:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    CLWriteStackshot(a2, 0);
  }
}

void sub_10184C5EC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10184C61C()
{
  operator delete();
}

_QWORD *sub_10184C630(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D38B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10184C664(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D38B8;
  a2[1] = v2;
  return result;
}

void sub_10184C680(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 208))
  {
    v3 = *a2;
    *(_BYTE *)(v2 + 208) = 1;
    sub_10184C288(v2, v3);
  }
}

uint64_t sub_10184C6A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10184C6DC()
{
}

void sub_10184C6EC()
{
  operator delete();
}

_QWORD *sub_10184C700(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3948;
  result[1] = v3;
  return result;
}

uint64_t sub_10184C734(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3948;
  a2[1] = v2;
  return result;
}

void sub_10184C750(uint64_t a1, uint64_t *a2)
{
  sub_10184C288(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10184C75C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10184C798()
{
}

void sub_10184C7A8()
{
  operator delete();
}

_QWORD *sub_10184C7BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D39C8;
  result[1] = v3;
  return result;
}

uint64_t sub_10184C7F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D39C8;
  a2[1] = v2;
  return result;
}

void sub_10184C80C(uint64_t a1, uint64_t *a2)
{
  sub_10184C288(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10184C818(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10184C854()
{
}

void sub_10184C860(_DWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20;

  sub_101256420();
  if (!v2)
    dispatch_once(&qword_1022A0070, &stru_1021D3888);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"fTimer should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v20);
    sub_101256420();
    if (!v2)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_1002B4544((void *)&_mh_execute_header, v9, v10, v11, "fTimer should not be null", "{\"msg%{public}.0s\":\"fTimer should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v20);
    sub_101256420();
    if (!v2)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"fTimer should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
  *a1 = 27;
  sub_100299FDC();
}

void sub_10184C9B0(_DWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20;

  sub_101256420();
  if (!v2)
    dispatch_once(&qword_1022A0070, &stru_1021D3888);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"fTimeout should be > 0\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v20);
    sub_101256420();
    if (!v2)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_1002B4544((void *)&_mh_execute_header, v9, v10, v11, "fTimeout should be > 0", "{\"msg%{public}.0s\":\"fTimeout should be > 0\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v20);
    sub_101256420();
    if (!v2)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"fTimeout should be > 0\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
  *a1 = 29;
  sub_100299FDC();
}

void sub_10184CB00(_DWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20;

  sub_101256420();
  if (!v2)
    dispatch_once(&qword_1022A0070, &stru_1021D3888);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"fName should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v20);
    sub_101256420();
    if (!v2)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_1002B4544((void *)&_mh_execute_header, v9, v10, v11, "fName should not be empty", "{\"msg%{public}.0s\":\"fName should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v20);
    sub_101256420();
    if (!v2)
      dispatch_once(&qword_1022A0070, &stru_1021D3888);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"fName should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
  *a1 = 28;
  sub_100299FDC();
}

void sub_10184CC50(_QWORD *a1, int a2, void *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  _QWORD v15[4];
  _BYTE v16[24];
  _BYTE v17[24];

  *a1 = a3;
  a1[1] = objc_msgSend(objc_msgSend(a3, "silo"), "queue");
  sub_100270E34((uint64_t)(a1 + 2), a5);
  a1[6] = *a6;
  v10 = a6[1];
  a1[7] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a1[1];
  sub_100270E34((uint64_t)v17, (uint64_t)(a1 + 2));
  sub_1017209CC(a1[6], (uint64_t)v16);
  v15[0] = off_1021D3AC8;
  v15[1] = a1;
  v15[3] = v15;
  v14[0] = off_1021D3B58;
  v14[1] = a1;
  v14[3] = v14;
  sub_1016C0A04(a1 + 8, a2, v13);
}

void sub_10184D4AC()
{
  __cxa_end_catch();
  JUMPOUT(0x10184D4B4);
}

void sub_10184D4C8(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x10184D7D8);
}

void sub_10184D4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,char *a44)
{
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v44 = a24;
  if (a24 == &a21)
  {
    v45 = 4;
    v44 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_6:
  v46 = a28;
  if (a28 == &a25)
  {
    v47 = 4;
    v46 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_11;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_11:
  v48 = a32;
  if (a32 == &a29)
  {
    v49 = 4;
    v48 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_16;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_16:
  v50 = a36;
  if (a36 == &a33)
  {
    v51 = 4;
    v50 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_21;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_21:
  v52 = a40;
  if (a40 == &a37)
  {
    v53 = 4;
    v52 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_26;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_26:
  v54 = a44;
  if (a44 == &a41)
  {
    v55 = 4;
    v54 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_31;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_31:
  JUMPOUT(0x10184D798);
}

void sub_10184D628(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  va_list va;

  va_start(va, a12);
  v17 = *(_QWORD **)(v14 - 200);
  if (v17 == v12)
  {
    v18 = 4;
    v17 = (_QWORD *)(v14 - 224);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  sub_10185F998(v13, (_QWORD *)(v14 - 192), (_QWORD *)(v14 - 160), a1, a2, (uint64_t)va);
  v19 = *(_QWORD **)(v14 - 104);
  if (v19 == (_QWORD *)(v14 - 128))
  {
    v20 = 4;
    v19 = (_QWORD *)(v14 - 128);
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  JUMPOUT(0x10184D7A0);
}

void sub_10184D6BC()
{
  JUMPOUT(0x10184D7A0);
}

void sub_10184D6CC()
{
  uint64_t v0;

  sub_1008484E0(v0);
  JUMPOUT(0x10184D6D8);
}

uint64_t **sub_10184D7E0(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *v20[2];
  char v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  void **v27;
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  _BYTE *v32;

  v22 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10185FA30(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021D3A38);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 3)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021D3F60)[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v27) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v29 = 1024;
    v30 = v7;
    v31 = 2080;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v27) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    sub_10185DCA8(v7, v20);
    if (v21 >= 0)
      v17 = v20;
    else
      v17 = (void **)v20[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v24 = 1024;
    v25 = v7;
    v26 = 2080;
    v27 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v20[0]);
    v19 = v18;
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrController>::setStateHandler(State, StateHandler) [T = CLNilrController]", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)buf = &v22;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_10184DAC8(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  NSObject *v5;
  uint64_t result;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  NSObject *v13;
  _BYTE *v14;
  int v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  int v20;
  char *v21;
  NSObject *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  NSObject *v27;
  _BYTE *v28;
  int v29;
  int v30;
  NSObject *v36;
  _BYTE *v37;
  int v38;
  int v39;
  NSObject *v41;
  _BYTE *v42;
  int v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  int v48;
  char *v49;
  NSObject *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  NSObject *v55;
  NSObject *v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  char *v60;
  NSObject *v61;
  _BYTE *v62;
  NSObject *v63;
  const char *v64;
  char *v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  int v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _BYTE *v75;
  int v76;
  int v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _BYTE *v81;
  char *v82;
  const char *v83;
  char *v84;
  uint64_t v85;
  _BYTE __p[12];
  char v87;
  _BYTE v88[12];
  __int16 v89;
  int v90;
  __int16 v91;
  const char *v92;
  _BYTE buf[40];
  uint64_t v94;
  int v95;
  uint64_t v96;
  char v97;
  int64x2_t v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD v104[2];
  int v105;
  char v106;
  unint64_t v107;
  int v108;
  int64x2_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  __int16 v113;
  int v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  int64x2_t v119;
  unint64_t v120;

  v4 = (unsigned __int8 *)(a1 + 6968);
  if (*(_BYTE *)(a1 + 6968))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "#nilr,#nict,We cannot be in Idle when in Conformance mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      *(_WORD *)v88 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,We cannot be in Idle when in Conformance mode", v88, 2);
      v65 = (char *)v64;
      sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
    if (*v4)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
      v63 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 388;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "!fIsConformanceMode";
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
        *(_DWORD *)v88 = 136315650;
        *(_QWORD *)&v88[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        v89 = 1024;
        v90 = 388;
        v91 = 2080;
        v92 = "!fIsConformanceMode";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", v88, 28, *(const char **)__p);
        v84 = (char *)v83;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v83);
        if (v84 != buf)
          free(v84);
      }
      sub_100512450();
    }
  }
  result = 0;
  switch(a2)
  {
    case 0:
      sub_101851F3C(a1, 0);
      return 0;
    case 2:
      return 1;
    case 3:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v50 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        sub_1015A2E04(buf, "EmergencyModeEnd");
        v51 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v88 = 136446210;
        *(_QWORD *)&v88[4] = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s", v88, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      result = sub_1001BFF7C(115, 0);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v52 = qword_1022A0078;
      sub_1015A2E04(v88, "EmergencyModeEnd");
      if (SBYTE3(v92) >= 0)
        v53 = v88;
      else
        v53 = *(_BYTE **)v88;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v53;
      LODWORD(v85) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 17, "#nilr,#nict,Unexpected,%{public}s", __p, v85);
      v12 = v54;
      if (SBYTE3(v92) < 0)
        operator delete(*(void **)v88);
      goto LABEL_190;
    case 4:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        sub_1015A2E04(v88, "BasebandCplaneStartInd");
        v42 = SBYTE3(v92) >= 0 ? v88 : *(_BYTE **)v88;
        v43 = *v4;
        v44 = v4[1];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v42;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v43;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v44;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d", buf, 0x18u);
        if (SBYTE3(v92) < 0)
          operator delete(*(void **)v88);
      }
      result = sub_1001BFF7C(115, 0);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v45 = qword_1022A0078;
      sub_1015A2E04(__p, "BasebandCplaneStartInd");
      if (v87 >= 0)
        v46 = __p;
      else
        v46 = *(_BYTE **)__p;
      v47 = *v4;
      v48 = v4[1];
      *(_DWORD *)v88 = 136446722;
      *(_QWORD *)&v88[4] = v46;
      v89 = 1026;
      v90 = v47;
      v91 = 1026;
      LODWORD(v92) = v48;
      LODWORD(v85) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 17, "#nilr,#nict,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d", v88, v85);
      v12 = v49;
      if (v87 < 0)
        operator delete(*(void **)__p);
      goto LABEL_190;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(v88, "BasebandCplaneEndInd");
        v14 = SBYTE3(v92) >= 0 ? v88 : *(_BYTE **)v88;
        v15 = *v4;
        v16 = v4[1];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v15;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Unexpected,%s,fIsConformanceMode,%d,fIsCellularEmergency,%d,did we abort previous control plane session due to emergency call termination?", buf, 0x18u);
        if (SBYTE3(v92) < 0)
          operator delete(*(void **)v88);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v17 = qword_1022A0078;
      sub_1015A2E04(__p, "BasebandCplaneEndInd");
      if (v87 >= 0)
        v18 = __p;
      else
        v18 = *(_BYTE **)__p;
      v19 = *v4;
      v20 = v4[1];
      *(_DWORD *)v88 = 136315650;
      *(_QWORD *)&v88[4] = v18;
      v89 = 1024;
      v90 = v19;
      v91 = 1024;
      LODWORD(v92) = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#Warning,#nilr,#nict,Unexpected,%s,fIsConformanceMode,%d,fIsCellularEmergency,%d,did we abort previous control plane session due to emergency call termination?", v88, 24, *(_DWORD *)__p);
      v12 = v21;
      if (v87 < 0)
        operator delete(*(void **)__p);
      goto LABEL_140;
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        sub_1015A2E04(v88, "CplaneRequest");
        v28 = SBYTE3(v92) >= 0 ? v88 : *(_BYTE **)v88;
        v29 = *v4;
        v30 = v4[1];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v29;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d,dropping control plane request", buf, 0x18u);
        if (SBYTE3(v92) < 0)
          operator delete(*(void **)v88);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v68 = qword_1022A0078;
        sub_1015A2E04(__p, "CplaneRequest");
        if (v87 >= 0)
          v69 = __p;
        else
          v69 = *(_BYTE **)__p;
        v70 = *v4;
        v71 = v4[1];
        *(_DWORD *)v88 = 136446722;
        *(_QWORD *)&v88[4] = v69;
        v89 = 1026;
        v90 = v70;
        v91 = 1026;
        LODWORD(v92) = v71;
        LODWORD(v85) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 17, "#nilr,#nict,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d,dropping control plane request", v88, v85);
        v73 = v72;
        if (v87 < 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v73);
        if (v73 != buf)
          free(v73);
      }
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&buf[8] = _Q0;
      *(_OWORD *)&buf[24] = _Q0;
      v94 = -1;
      v96 = 0;
      v97 = 0;
      v98 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v99 = xmmword_101BBE630;
      v100 = _Q0;
      v101 = 0xBFF0000000000000;
      v102 = 0;
      v103 = 2;
      v105 = 0;
      v106 = 0;
      v104[0] = 0;
      *(_QWORD *)((char *)v104 + 5) = 0;
      v107 = 0xFFFFFFFF00000000;
      v108 = -1;
      v109 = v98;
      v110 = 0xBFF0000000000000;
      v111 = 0xFFFFFFFF00000000;
      v112 = 0;
      v113 = 255;
      v114 = 1;
      v116 = 0;
      v115 = 0;
      v117 = 0;
      v118 = 0;
      v119 = v98;
      v120 = 0xBFF0000000000000;
      v95 = 0;
      *(_QWORD *)buf = 0x400000000;
      sub_101852180(a1, (uint64_t)buf);
      return 0;
    case 7:
      sub_1018524E4(a1, *(_QWORD *)(a1 + 6992));
      result = 0;
      v4[176] = 0;
      return result;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v55 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Starting non-emergency SUPL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        *(_WORD *)v88 = 0;
        LODWORD(v85) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Starting non-emergency SUPL", v88, v85);
        v67 = (char *)v66;
        sub_100512490("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v66);
        if (v67 != buf)
          free(v67);
      }
      return 3;
    case 9:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v61 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        sub_1015A2E04(buf, "SuplEnd");
        v62 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v88 = 136446210;
        *(_QWORD *)&v88[4] = v62;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s", v88, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      result = sub_1001BFF7C(115, 0);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v80 = qword_1022A0078;
      sub_1015A2E04(v88, "SuplEnd");
      if (SBYTE3(v92) >= 0)
        v81 = v88;
      else
        v81 = *(_BYTE **)v88;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v81;
      LODWORD(v85) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 17, "#nilr,#nict,Unexpected,%{public}s", __p, v85);
      v12 = v82;
      if (SBYTE3(v92) < 0)
        operator delete(*(void **)v88);
LABEL_190:
      sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v12);
      goto LABEL_191;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v56 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(buf, "NilrSessionTimeout");
        v57 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v88 = 136315138;
        *(_QWORD *)&v88[4] = v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", v88, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v58 = qword_1022A0078;
      sub_1015A2E04(v88, "NilrSessionTimeout");
      if (SBYTE3(v92) >= 0)
        v59 = v88;
      else
        v59 = *(_BYTE **)v88;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v59;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v58, 0, "#Warning,#nilr,#nict,Spurious event,%s", __p);
      v12 = v60;
      if (SBYTE3(v92) < 0)
        operator delete(*(void **)v88);
      goto LABEL_140;
    case 11:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(buf, "NetworkAssistanceReceived");
        v8 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v88 = 136315138;
        *(_QWORD *)&v88[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Unexpected network assistance received,%s", v88, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v9 = qword_1022A0078;
      sub_1015A2E04(v88, "NetworkAssistanceReceived");
      if (SBYTE3(v92) >= 0)
        v10 = v88;
      else
        v10 = *(_BYTE **)v88;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#Warning,#nilr,#nict,Unexpected network assistance received,%s", __p);
      v12 = v11;
      if (SBYTE3(v92) < 0)
        operator delete(*(void **)v88);
      goto LABEL_140;
    case 12:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v36 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        sub_1015A2E04(v88, "CplaneWlanRequest");
        v37 = SBYTE3(v92) >= 0 ? v88 : *(_BYTE **)v88;
        v38 = *v4;
        v39 = v4[1];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v37;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v38;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v39;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#Warning,#nilr,#nict,#wlan,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d,dropping wlan control plane request", buf, 0x18u);
        if (SBYTE3(v92) < 0)
          operator delete(*(void **)v88);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v74 = qword_1022A0078;
        sub_1015A2E04(__p, "CplaneWlanRequest");
        if (v87 >= 0)
          v75 = __p;
        else
          v75 = *(_BYTE **)__p;
        v76 = *v4;
        v77 = v4[1];
        *(_DWORD *)v88 = 136446722;
        *(_QWORD *)&v88[4] = v75;
        v89 = 1026;
        v90 = v76;
        v91 = 1026;
        LODWORD(v92) = v77;
        LODWORD(v85) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 16, "#Warning,#nilr,#nict,#wlan,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d,dropping wlan control plane request", v88, v85);
        v79 = v78;
        if (v87 < 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v79);
        if (v79 != buf)
          free(v79);
      }
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&buf[16] = _Q0;
      *(_WORD *)&buf[38] = 0;
      *(_DWORD *)&buf[32] = 0;
      buf[36] = 0;
      LODWORD(v94) = 1;
      *(_DWORD *)&buf[8] = 6;
      *(_QWORD *)buf = 0x500000000;
      sub_101852684(a1, (uint64_t)buf);
      return 0;
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(buf, "WlanResponse");
        v23 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v88 = 136315138;
        *(_QWORD *)&v88[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,#wlan,Spurious event,%s", v88, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v24 = qword_1022A0078;
      sub_1015A2E04(v88, "WlanResponse");
      if (SBYTE3(v92) >= 0)
        v25 = v88;
      else
        v25 = *(_BYTE **)v88;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#Warning,#nilr,#nict,#wlan,Spurious event,%s", __p);
      v12 = v26;
      if (SBYTE3(v92) < 0)
        operator delete(*(void **)v88);
LABEL_140:
      sub_100512490("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v12);
LABEL_191:
      if (v12 != buf)
        free(v12);
      return 0;
    default:
      return result;
  }
}

uint64_t sub_10184F0B4(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  NSObject *v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  NSObject *v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  _BYTE v27[12];
  _BYTE buf[12];
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  _BYTE __p[12];
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;

  result = 1;
  v4 = (unsigned __int8 *)(a1 + 6968);
  switch(a2)
  {
    case 0:
      sub_101851F3C(a1, 0);
      return 1;
    case 2:
      if (*v4)
        return result;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "#nilr,#nict,If we are in mission mode, why are we READY when we did not get EmergencyModeStart yet", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        *(_WORD *)buf = 0;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,If we are in mission mode, why are we READY when we did not get EmergencyModeStart yet", buf, 2);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Ready(CLNilrController::Event)", "%s\n", v23);
        if (v24 != __p)
          free(v24);
      }
      if (!*v4)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
        v17 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          v34 = 1024;
          v35 = 493;
          v36 = 2080;
          v37 = "fIsConformanceMode";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", __p, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          v29 = 1024;
          v30 = 493;
          v31 = 2080;
          v32 = "fIsConformanceMode";
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", buf, 28, *(const char **)v27);
          v26 = (char *)v25;
          sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Ready(CLNilrController::Event)", "%s\n", v25);
          if (v26 != __p)
            free(v26);
        }
        sub_100512450();
      }
      return 1;
    case 3:
      return *v4;
    case 4:
    case 6:
    case 12:
      return 2;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(__p, "BasebandCplaneEndInd");
        v19 = SBYTE3(v37) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Unexpected,%s,did we abort previous control plane session due to emergency call termination?", buf, 0xCu);
        if (SBYTE3(v37) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v20 = qword_1022A0078;
      sub_1015A2E04(buf, "BasebandCplaneEndInd");
      if (SBYTE3(v32) >= 0)
        v21 = buf;
      else
        v21 = *(_BYTE **)buf;
      *(_DWORD *)v27 = 136315138;
      *(_QWORD *)&v27[4] = v21;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 0, "#Warning,#nilr,#nict,Unexpected,%s,did we abort previous control plane session due to emergency call termination?", v27);
      v10 = v22;
      if (SBYTE3(v32) < 0)
        operator delete(*(void **)buf);
      goto LABEL_69;
    case 7:
      sub_1018524E4(a1, *(_QWORD *)(a1 + 6992));
      return 1;
    case 8:
      return 3;
    case 9:
      sub_101852B50(a1, *(_QWORD *)(a1 + 7072));
      return 1;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(__p, "NilrSessionTimeout");
        v6 = SBYTE3(v37) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", buf, 0xCu);
        if (SBYTE3(v37) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v7 = qword_1022A0078;
      sub_1015A2E04(buf, "NilrSessionTimeout");
      if (SBYTE3(v32) >= 0)
        v8 = buf;
      else
        v8 = *(_BYTE **)buf;
      *(_DWORD *)v27 = 136315138;
      *(_QWORD *)&v27[4] = v8;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 0, "#Warning,#nilr,#nict,Spurious event,%s", v27);
      v10 = v9;
      if (SBYTE3(v32) < 0)
        operator delete(*(void **)buf);
      goto LABEL_69;
    case 11:
      *(_BYTE *)(a1 + 7115) = 1;
      return 2;
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(__p, "WlanResponse");
        v12 = SBYTE3(v37) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,#wlan,Spurious event,%s", buf, 0xCu);
        if (SBYTE3(v37) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v13 = qword_1022A0078;
      sub_1015A2E04(buf, "WlanResponse");
      if (SBYTE3(v32) >= 0)
        v14 = buf;
      else
        v14 = *(_BYTE **)buf;
      *(_DWORD *)v27 = 136315138;
      *(_QWORD *)&v27[4] = v14;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 0, "#Warning,#nilr,#nict,#wlan,Spurious event,%s", v27);
      v10 = v15;
      if (SBYTE3(v32) < 0)
        operator delete(*(void **)buf);
LABEL_69:
      sub_100512490("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Ready(CLNilrController::Event)", "%s\n", v10);
      if (v10 != __p)
        free(v10);
      return 1;
    default:
      return result;
  }
}

uint64_t sub_10184F9AC(uint64_t a1, int a2)
{
  uint64_t result;
  _BYTE *v4;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  _DWORD *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  _BYTE v39[960];
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *__p;
  char v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  const char *v53;
  _BYTE buf[40];
  uint64_t v55;
  int v56;
  uint64_t v57;
  char v58;
  int64x2_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  _QWORD v65[2];
  int v66;
  char v67;
  unint64_t v68;
  int v69;
  int64x2_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  __int16 v74;
  int v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  int64x2_t v80;
  unint64_t v81;

  result = 2;
  v4 = (_BYTE *)(a1 + 6968);
  switch(a2)
  {
    case 0:
      __asm { FMOV            V0.2D, #-1.0; jumptable 000000010184FA0C case 0 }
      *(_OWORD *)(a1 + 7008) = _Q0;
      *(_QWORD *)(a1 + 7024) = 0;
      *(_QWORD *)(a1 + 7040) = 0;
      *(_QWORD *)(a1 + 7032) = 0;
      *(_QWORD *)(a1 + 7048) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 7056) = -1;
      *(_DWORD *)(a1 + 7064) = 0;
      *(_DWORD *)(a1 + 8504) = 0;
      v10 = (_QWORD *)(a1 + 8512);
      v11 = *(void **)(a1 + 8512);
      if (v11)
      {
        *(_QWORD *)(a1 + 8520) = v11;
        operator delete(v11);
        *v10 = 0;
        *(_QWORD *)(a1 + 8520) = 0;
        *(_QWORD *)(a1 + 8528) = 0;
      }
      *v10 = 0;
      *(_QWORD *)(a1 + 8520) = 0;
      *(_QWORD *)(a1 + 8528) = 0;
      if (*(_BYTE *)(a1 + 7115))
      {
        sub_101851F3C(a1, 1);
        v12 = a1 + 6840;
        v13 = 0x404E000000000000;
        goto LABEL_10;
      }
      sub_1016ACCF0(a1 + 3344, 0, *(unsigned __int8 *)(a1 + 10168), *(_DWORD *)(a1 + 10172));
      if (*(_QWORD *)(a1 + 6976))
      {
        sub_101851F3C(a1, 1);
        sub_1016C9EE4(a1 + 64, *(__int128 **)(a1 + 6976));
        return 2;
      }
      if (*(_QWORD *)(a1 + 8496))
        goto LABEL_20;
      goto LABEL_9;
    case 1:
      sub_1018537C0(a1 + 6840, 10);
      sub_1016ACCF0(a1 + 3344, 1, 0, 0);
      *(_BYTE *)(a1 + 7115) = 0;
      return 2;
    case 2:
      if (*v4)
        return result;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
      v16 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 585;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "fIsConformanceMode";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
        v48 = 136315650;
        v49 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        v50 = 1024;
        v51 = 585;
        v52 = 2080;
        v53 = "fIsConformanceMode";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v48, 28, v38);
        v34 = (char *)v33;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      sub_100512450();
      return 2;
    case 3:
      *(_BYTE *)(a1 + 7144) = 0;
      return 2 * *v4;
    case 4:
      if (*(_BYTE *)(a1 + 7115))
      {
        *(_BYTE *)(a1 + 7115) = 0;
        sub_1016ACCF0(a1 + 3344, 0, 0, 0);
LABEL_9:
        v12 = a1 + 6840;
        v13 = 0x405E000000000000;
LABEL_10:
        v14 = *(double *)&v13;
LABEL_11:
        sub_101852CF0(v12, 10, v14);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#nilr,#nict,Got out of sequence baseband indication and a control plane request", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3A38);
          LOWORD(v48) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,Got out of sequence baseband indication and a control plane request", &v48, 2);
          v21 = (char *)v20;
          sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v20);
          goto LABEL_66;
        }
      }
      return 2;
    case 5:
      v17 = *(_QWORD *)(a1 + 7000);
      if (v17)
      {
        if (*(_BYTE *)(a1 + 8608))
        {
          sub_1016CCC70(a1 + 64, buf);
          sub_1016E08B4((int *)buf, (uint64_t)"AWD-Summary-Report-DBH");
          sub_101703314((uint64_t)v39, a1 + 8616);
          sub_101853C50(a1, (uint64_t)v39, buf);
          if (v47 < 0)
            operator delete(__p);
          if (v45 < 0)
            operator delete(v44);
          if (v43 < 0)
            operator delete(v42);
          if (v41 < 0)
            operator delete(v40);
          v17 = *(_QWORD *)(a1 + 7000);
        }
        *(_BYTE *)(a1 + 8608) = 0;
        sub_1016CB844(a1 + 64, v17);
        return 1;
      }
      sub_10185FBA8(2);
      __break(1u);
LABEL_81:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
      v26 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 625;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "fMeasurementRequest";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
        v48 = 136315650;
        v49 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        v50 = 1024;
        v51 = 625;
        v52 = 2080;
        v53 = "fMeasurementRequest";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v48, 28, v38);
        v36 = (char *)v35;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      sub_100512450();
      if (*(_QWORD *)(a1 + 6976))
      {
LABEL_44:
        sub_1018537C0(a1 + 6840, 10);
        *(_BYTE *)(a1 + 7115) = 0;
        sub_101851F3C(a1, 1);
        sub_1016ACCF0(a1 + 3344, 0, 0, 0);
        sub_1016C9EE4(a1 + 64, *(__int128 **)(a1 + 6976));
        return 2;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "#nilr,#nict,fMeasurement request not set. Cannot start cplane", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        LOWORD(v48) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,fMeasurement request not set. Cannot start cplane", &v48, v37);
        v21 = (char *)v28;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v28);
        goto LABEL_66;
      }
      return 2;
    case 6:
      if (*(_QWORD *)(a1 + 6976))
        goto LABEL_44;
      goto LABEL_81;
    case 7:
      sub_1018524E4(a1, *(_QWORD *)(a1 + 6992));
      v18 = *(_DWORD **)(a1 + 6992);
      if (*v18 != 2 || v18[1] == 8)
        return 2;
      v12 = a1 + 6840;
      v14 = 30.0;
      goto LABEL_11;
    case 8:
      if (*(_BYTE *)(a1 + 7115))
        return 3;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "#nilr,#nict,SUPL started even though we disabled it. Aborting SUPL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        LOWORD(v48) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,SUPL started even though we disabled it. Aborting SUPL", &v48, 2);
        v32 = (char *)v31;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      sub_1016AC4E0(a1 + 3344);
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&buf[8] = _Q0;
      *(_OWORD *)&buf[24] = _Q0;
      v57 = 0;
      v60 = xmmword_101BBE630;
      v58 = 0;
      v59 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v61 = _Q0;
      v62 = 0xBFF0000000000000;
      v63 = 0;
      v64 = 2;
      v66 = 0;
      v67 = 0;
      v65[0] = 0;
      *(_QWORD *)((char *)v65 + 5) = 0;
      v68 = 0xFFFFFFFF00000000;
      v69 = -1;
      v70 = v59;
      v71 = 0xBFF0000000000000;
      v72 = 0xFFFFFFFF00000000;
      v73 = 0;
      v74 = 255;
      v75 = 1;
      v77 = 0;
      v76 = 0;
      v78 = 0;
      v79 = 0;
      v80 = v59;
      v81 = 0xBFF0000000000000;
      v56 = 1;
      v55 = -1;
      *(_QWORD *)buf = 0x1800000000;
      sub_101852180(a1, (uint64_t)buf);
      return 2;
    case 9:
      sub_101852B50(a1, *(_QWORD *)(a1 + 7072));
      return 2;
    case 10:
      return 1;
    case 12:
      if (*(_QWORD *)(a1 + 8496))
      {
        sub_1018537C0(a1 + 6840, 10);
        *(_BYTE *)(a1 + 7115) = 0;
        sub_1016ACCF0(a1 + 3344, 0, 0, 0);
LABEL_20:
        sub_101851F3C(a1, 1);
        sub_1016CCC80(a1 + 64, *(int **)(a1 + 8496));
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v22 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "#nilr,#nict,#wlan,fWlanRequest request not set. Cannot start cplane wlan session", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3A38);
          LOWORD(v48) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,#wlan,fWlanRequest request not set. Cannot start cplane wlan session", &v48, 2);
          v21 = (char *)v23;
          sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v23);
LABEL_66:
          if (v21 != buf)
            free(v21);
        }
      }
      return 2;
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#wlan response received", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        LOWORD(v48) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wlan response received", &v48, 2);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_1016CD028(a1 + 64, a1 + 8504);
      return 2;
    default:
      return result;
  }
}

void sub_101850728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1008484E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185077C(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  NSObject *v25;
  NSObject *v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  NSObject *v31;
  const char *v32;
  char *v33;
  const char *v34;
  const char *v35;
  char *v36;
  _BYTE v37[12];
  _BYTE v38[12];
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  _BYTE buf[12];
  __int16 v44;
  int v45;
  __int16 v46;
  const char *v47;

  result = 3;
  v4 = (unsigned __int8 *)(a1 + 6968);
  switch(a2)
  {
    case 0:
      sub_101851F3C(a1, 1);
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 7008) = _Q0;
      *(_QWORD *)(a1 + 7024) = 0;
      *(_QWORD *)(a1 + 7040) = 0;
      *(_QWORD *)(a1 + 7032) = 0;
      *(_QWORD *)(a1 + 7048) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 7056) = -1;
      *(_DWORD *)(a1 + 7064) = 0;
      *(_DWORD *)(a1 + 8504) = 0;
      v10 = *(void **)(a1 + 8512);
      if (v10)
      {
        *(_QWORD *)(a1 + 8520) = v10;
        operator delete(v10);
      }
      *(_QWORD *)(a1 + 8512) = 0;
      *(_QWORD *)(a1 + 8520) = 0;
      result = 3;
      *(_QWORD *)(a1 + 8528) = 0;
      return result;
    case 2:
      if (!*v4)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
        v25 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          v44 = 1024;
          v45 = 715;
          v46 = 2080;
          v47 = "fIsConformanceMode";
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021D3A78);
          *(_DWORD *)v38 = 136315650;
          *(_QWORD *)&v38[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          v39 = 1024;
          v40 = 715;
          v41 = 2080;
          v42 = "fIsConformanceMode";
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", v38, 28, *(const char **)v37);
          v36 = (char *)v35;
          sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        sub_100512450();
        goto LABEL_83;
      }
      return result;
    case 4:
      *(_BYTE *)(a1 + 10168) = 1;
      *(_DWORD *)(a1 + 10172) = 1;
      return 2;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        sub_1015A2E04(buf, "BasebandCplaneEndInd");
        v21 = SBYTE3(v47) >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v38 = 136446210;
        *(_QWORD *)&v38[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s", v38, 0xCu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_83;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v22 = qword_1022A0078;
      sub_1015A2E04(v38, "BasebandCplaneEndInd");
      if (SBYTE3(v42) >= 0)
        v23 = v38;
      else
        v23 = *(_BYTE **)v38;
      *(_DWORD *)v37 = 136446210;
      *(_QWORD *)&v37[4] = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 17, "#nilr,#nict,Unexpected,%{public}s", v37, 12);
      v19 = v24;
      if (SBYTE3(v42) < 0)
        operator delete(*(void **)v38);
      sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v19);
      goto LABEL_71;
    case 6:
      v12 = a1 + 3344;
      v13 = 1;
      goto LABEL_76;
    case 7:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(buf, "CplaneSessionStatus");
        v15 = SBYTE3(v47) >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)&v38[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", v38, 0xCu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_83;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v16 = qword_1022A0078;
      sub_1015A2E04(v38, "CplaneSessionStatus");
      if (SBYTE3(v42) >= 0)
        v17 = v38;
      else
        v17 = *(_BYTE **)v38;
      *(_DWORD *)v37 = 136315138;
      *(_QWORD *)&v37[4] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#Warning,#nilr,#nict,Spurious event,%s", v37);
      v19 = v18;
      if (SBYTE3(v42) < 0)
        operator delete(*(void **)v38);
      goto LABEL_70;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1015A2E04(buf, "SuplStart");
        v27 = SBYTE3(v47) >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)&v38[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", v38, 0xCu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_83;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v28 = qword_1022A0078;
      sub_1015A2E04(v38, "SuplStart");
      if (SBYTE3(v42) >= 0)
        v29 = v38;
      else
        v29 = *(_BYTE **)v38;
      *(_DWORD *)v37 = 136315138;
      *(_QWORD *)&v37[4] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#Warning,#nilr,#nict,Spurious event,%s", v37);
      v19 = v30;
      if (SBYTE3(v42) < 0)
        operator delete(*(void **)v38);
LABEL_70:
      sub_100512490("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v19);
LABEL_71:
      if (v19 != buf)
LABEL_93:
        free(v19);
      goto LABEL_83;
    case 9:
      sub_101852B50(a1, *(_QWORD *)(a1 + 7072));
      if (*(_BYTE *)(a1 + 6969))
        return 1;
      else
        return *v4;
    case 10:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v31 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "#nilr,#nict,Spurious message received", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        *(_WORD *)v38 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,Spurious message received", v38, 2);
        v19 = (char *)v34;
        sub_100512490("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v34);
        if (v19 != buf)
          goto LABEL_93;
      }
      goto LABEL_83;
    case 12:
      v12 = a1 + 3344;
      v13 = 6;
LABEL_76:
      sub_1016ACCF0(v12, 0, 1, v13);
      return 2;
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#wlan response received", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        *(_WORD *)v38 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wlan response received", v38, 2);
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      sub_1016AE804(a1 + 3344, a1 + 8504);
LABEL_83:
      result = 3;
      break;
    default:
      return result;
  }
  return result;
}

void sub_101851220(_QWORD *a1, int a2, void *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  sub_10184CC50(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10185122C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v10;

  *(_QWORD *)(a1 + 10200) = 0;
  if (*(char *)(a1 + 9815) < 0)
    operator delete(*(void **)(a1 + 9792));
  if (*(char *)(a1 + 9791) < 0)
    operator delete(*(void **)(a1 + 9768));
  if (*(char *)(a1 + 9623) < 0)
    operator delete(*(void **)(a1 + 9600));
  if (*(char *)(a1 + 9599) < 0)
    operator delete(*(void **)(a1 + 9576));
  v2 = *(_QWORD **)(a1 + 8560);
  if (v2 == (_QWORD *)(a1 + 8536))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8536);
  }
  else
  {
    if (!v2)
      goto LABEL_14;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_14:
  v4 = *(void **)(a1 + 8512);
  if (v4)
  {
    *(_QWORD *)(a1 + 8520) = v4;
    operator delete(v4);
  }
  sub_100857FD0(a1 + 7160);
  if (*(char *)(a1 + 7143) < 0)
    operator delete(*(void **)(a1 + 7120));
  v5 = *(_QWORD **)(a1 + 7104);
  if (v5 == (_QWORD *)(a1 + 7080))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 7080);
  }
  else
  {
    if (!v5)
      goto LABEL_23;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_23:
  sub_10185F15C(a1 + 6840);
  v10 = (void **)(a1 + 6816);
  sub_10087B4F8(&v10);
  sub_10087B6D0(a1 + 6112);
  sub_1016A9198(a1 + 3344);
  sub_1016C0DF4((_QWORD *)(a1 + 64));
  sub_100261F44(a1 + 48);
  v7 = *(_QWORD **)(a1 + 40);
  if (v7 == (_QWORD *)(a1 + 16))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 16);
    goto LABEL_27;
  }
  if (v7)
  {
    v8 = 5;
LABEL_27:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_1018513B8(uint64_t a1)
{
  int v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  __int128 __p;
  uint64_t v14;
  int v15;
  char v16[8];
  __int128 v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  __int128 v21;
  _BYTE v22[12];
  _BYTE v23[24];
  _BYTE *v24;

  v17 = 0uLL;
  v18 = 0;
  v20 = -1;
  *(_QWORD *)v22 = 0;
  v21 = 0uLL;
  *(_DWORD *)&v22[7] = 0;
  v22[11] = 1;
  v19 = *(_BYTE *)(a1 + 7165);
  v16[0] = *(_BYTE *)(a1 + 7164);
  std::string::operator=((std::string *)&v21, (const std::string *)(a1 + 8096));
  v20 = *(_WORD *)(a1 + 8144);
  v22[8] = *(_DWORD *)(a1 + 7224) != 0;
  v22[9] = *(_DWORD *)(a1 + 7248) != 0;
  v22[10] = *(_DWORD *)(a1 + 7256) != 0;
  sub_1016ADC14(a1 + 3344, (uint64_t)v16);
  v8 = v16[0];
  if (SHIBYTE(v18) < 0)
  {
    sub_100115CE4(&v9, (void *)v17, *((unint64_t *)&v17 + 1));
  }
  else
  {
    v9 = v17;
    v10 = v18;
  }
  v11 = v19;
  v12 = v20;
  if ((v22[7] & 0x80000000) != 0)
  {
    sub_100115CE4(&__p, (void *)v21, *((unint64_t *)&v21 + 1));
  }
  else
  {
    __p = v21;
    v14 = *(_QWORD *)v22;
  }
  v2 = *(_DWORD *)&v22[8];
  v15 = *(_DWORD *)&v22[8];
  v24 = 0;
  v3 = (char *)operator new(0x60uLL);
  *(_QWORD *)v3 = off_1021D3DC8;
  *((_QWORD *)v3 + 1) = a1;
  v3[16] = v8;
  *(_OWORD *)(v3 + 24) = v9;
  *((_QWORD *)v3 + 5) = v10;
  v9 = 0uLL;
  v10 = 0;
  v3[48] = v11;
  *((_WORD *)v3 + 28) = v12;
  v4 = __p;
  *((_QWORD *)v3 + 10) = v14;
  *((_OWORD *)v3 + 4) = v4;
  __p = 0uLL;
  v14 = 0;
  *((_DWORD *)v3 + 22) = v2;
  v24 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v23);
  v6 = v24;
  if (v24 == v23)
  {
    v7 = 4;
    v6 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if ((v22[7] & 0x80000000) != 0)
    operator delete((void *)v21);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
}

void sub_101851634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1017F52EC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1018516A8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1018516E8(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 *v2;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = (unsigned __int8 *)(a1 + 10208);
  *(_BYTE *)(a1 + 10208) = *a2;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021D3A58);
  v3 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v4 = *v2;
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#timingadvance onMobileAssetNotification IsTimingAdvanceSetInMobileAsset %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021D3A58);
    v5 = *v2;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#timingadvance onMobileAssetNotification IsTimingAdvanceSetInMobileAsset %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::setTimingAdvanceConfig(const BOOL &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

_QWORD *sub_1018518A4(uint64_t a1, char **a2)
{
  return sub_1016A6F8C(a1 + 3344, a2);
}

uint64_t sub_1018518AC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  int v7;
  void *p_p;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  const char *v26;
  int v27;
  void *v28;
  int v29;
  const char *v30;
  void *__p;
  _BYTE v32[10];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 8488);
    sub_100F790BC(a3, &__p);
    if (v34 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v9 = *(unsigned __int8 *)(a2 + 5);
    v10 = *(unsigned __int8 *)(a2 + 4);
    v11 = a2 + 936;
    v12 = *(unsigned __int16 *)(a2 + 984);
    if (*(char *)(a2 + 959) < 0)
      v11 = *(_QWORD *)(a2 + 936);
    v13 = *(_DWORD *)(a2 + 64);
    v14 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)buf = 67110914;
    v46 = v7;
    v47 = 2080;
    v48 = p_p;
    v49 = 1024;
    v50 = v9;
    v51 = 1024;
    v52 = v10;
    v53 = 1024;
    v54 = v12;
    v55 = 2080;
    v56 = v11;
    v57 = 1024;
    v58 = v13;
    v59 = 1024;
    v60 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#cb,LocationSettings,reason,%s,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSAUP,%d,enableMSACP,%d", buf, 0x3Au);
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v16 = qword_1022A0078;
    sub_100F790BC(a3, &v28);
    if (SHIBYTE(v30) >= 0)
      v17 = &v28;
    else
      v17 = v28;
    v18 = *(unsigned __int8 *)(a2 + 5);
    v19 = *(unsigned __int8 *)(a2 + 4);
    v20 = a2 + 936;
    v21 = *(unsigned __int16 *)(a2 + 984);
    if (*(char *)(a2 + 959) < 0)
      v20 = *(_QWORD *)(a2 + 936);
    v22 = *(_DWORD *)(a2 + 64);
    v23 = *(_DWORD *)(a2 + 16);
    *(_WORD *)v32 = 2080;
    *(_QWORD *)&v32[2] = v17;
    v33 = 1024;
    v34 = v18;
    v35 = 1024;
    v36 = v19;
    v37 = 1024;
    v38 = v21;
    v39 = 2080;
    v40 = v20;
    v41 = 1024;
    v42 = v22;
    v43 = 1024;
    v44 = v23;
    LODWORD(v26) = 58;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "#ins%d,#nilr,#nict,#cb,LocationSettings,reason,%s,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSAUP,%d,enableMSACP,%d", &__p, v26, v27, (_DWORD)v28, v29, v30, 67110914, *(_DWORD *)v32);
    v25 = v24;
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
  }
  sub_10084B628(a1 + 7160, (uint64_t *)a2);
  sub_1018513B8(a1);
  sub_1016ACA30(a1 + 3344, (uint64_t *)a2, a3);
  return sub_1016CCC0C((_DWORD *)(a1 + 64), (uint64_t *)a2);
}

void sub_101851BE0(uint64_t a1, int a2)
{
  char *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;

  if ((sub_100014ADC() & 1) == 0)
  {
    v4 = (char *)(a1 + 7114);
    *(_BYTE *)(a1 + 7114) = a2;
    if (a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_DWORD *)(a1 + 8488);
        *(_DWORD *)buf = 67109120;
        v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#Warning,locking out NILR", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v14 = *(_DWORD *)(a1 + 8488);
        v17 = 67109120;
        v18 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#Warning,locking out NILR", &v17);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNilrLockoutStatus(const BOOL)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a1 + 8488);
      v9 = *v4;
      *(_DWORD *)buf = 67109376;
      v22 = v8;
      v23 = 1024;
      v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,lockOutNILR,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v10 = *(_DWORD *)(a1 + 8488);
      v11 = *v4;
      v17 = 67109376;
      v18 = v10;
      v19 = 1024;
      v20 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,lockOutNILR,%d", &v17, 14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNilrLockoutStatus(const BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_1016ACE5C(a1 + 3344, *v4);
    sub_1016C0DF8(a1 + 64, *v4);
  }
}

void sub_101851F34(uint64_t a1, _DWORD *a2)
{
  sub_1016CBDB0(a1 + 64, a2);
}

void sub_101851F3C(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = *(unsigned __int8 *)(a1 + 8568);
    *(_DWORD *)buf = 67109632;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    v19 = 1024;
    v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,fIsNilrActive,%d,setNilrActive,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7 = *(unsigned __int8 *)(a1 + 8568);
    v11 = 1024;
    v12 = v7;
    v13 = 1024;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#nict,fIsNilrActive,%d,setNilrActive,%d", &v10, 20, 67109632);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::setNilrActive(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (*(unsigned __int8 *)(a1 + 8568) != a2)
  {
    *(_BYTE *)(a1 + 8568) = a2;
    sub_100853604(a1 + 8536, *(_DWORD *)(a1 + 8488), a2);
  }
}

_QWORD *sub_101852154@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xD)
    v2 = "EventUnknown";
  else
    v2 = (&off_1021D3EB8)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_101852180(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  std::string *v16;
  _BYTE v17[960];
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  _WORD v26[8];
  std::string buf[3];
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submitSessionStatsToAWD", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v26[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,#awd,submitSessionStatsToAWD", v26, 2);
    v16 = (std::string *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submitSessionStatsToAWD(const CLNilrTypes::SessionStatus &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*(_BYTE *)(a2 + 228))
  {
    memcpy((void *)(a1 + 9856), (const void *)a2, 0x110uLL);
    *(_BYTE *)(a1 + 8609) = 1;
    return;
  }
  v5 = sub_100856FE0((uint64_t)buf);
  v6 = sub_10185D580(v5, *(_DWORD *)(a2 + 136));
  v28 = v6;
  v7 = sub_10185D744(v6, *(_DWORD *)(a2 + 48));
  v29 = v7;
  v8 = sub_10185D910(v7, *(_DWORD *)(a2 + 44));
  v9 = *(_DWORD *)(a1 + 8488);
  v30 = v8;
  v32 = v9;
  v33 = *(_BYTE *)(a1 + 7144);
  v10 = *(_DWORD *)(a2 + 4);
  v11 = sub_10185CDCC(v8, v10);
  v12 = *(_DWORD *)(a1 + 8576);
  v31 = v11;
  v34 = v12;
  v35 = *(_BYTE *)(a1 + 6969);
  switch(v10)
  {
    case 0x13u:
      goto LABEL_11;
    case 8u:
      v37 = *(_QWORD *)(a2 + 220);
      v34 = *(_DWORD *)(a1 + 8572);
      break;
    case 5u:
LABEL_11:
      v13 = *(_DWORD *)(a2 + 216);
      if (v13 >= 8)
        v13 = 1;
      v36 = v13;
      break;
  }
  sub_10185CD18(a1, buf);
  sub_1017E1D24((uint64_t)buf);
  if (*(_QWORD *)(a1 + 7104))
  {
    sub_101703314((uint64_t)v17, (uint64_t)buf);
    v14 = *(_QWORD *)(a1 + 7104);
    if (!v14)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 48))(v14, v17);
    if (v25 < 0)
      operator delete(__p);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    sub_10185CDEC(a1);
  }
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
}

void sub_1018524B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1008484E0((uint64_t)va);
  sub_1008484E0((uint64_t)&STACK[0x500]);
  _Unwind_Resume(a1);
}

void sub_1018524E4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,cplaneSummaryReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,cplaneSummaryReport", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::cplaneSummaryReport(const CLNilrTypes::SessionStatus &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10185C470(a1, a2);
}

void sub_101852684(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE v18[960];
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __int16 v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  int v33;
  int v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  char v41;
  __int16 v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  _DWORD v47[4];
  uint8_t buf[4];
  int v49;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#wlan,#awd,submitWlanSessionStatsToAWD", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v27 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,#wlan,#awd,submitWlanSessionStatsToAWD", &v27, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submitWlanSessionStatsToAWD(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_100856FE0((uint64_t)&v27);
  v5 = *(_DWORD *)(a2 + 4);
  v31 = *(_DWORD *)(a2 + 8);
  v40 = *(_BYTE *)(a2 + 32);
  v41 = *(_BYTE *)(a2 + 33);
  v42 = *(_WORD *)(a2 + 34);
  LOWORD(v6) = *(_WORD *)(a2 + 38);
  v32 = (double)v6;
  switch(v5)
  {
    case 0:
      v7 = 35;
      goto LABEL_14;
    case 1:
      v33 = 0;
      break;
    case 2:
    case 5:
      v7 = 32;
      goto LABEL_14;
    case 3:
      v7 = 34;
      goto LABEL_14;
    case 4:
      v7 = 33;
      goto LABEL_14;
    case 6:
      v7 = 11;
      goto LABEL_14;
    case 7:
      v7 = 10;
LABEL_14:
      v33 = v7;
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)buf = 67240192;
        v49 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v12 = *(_DWORD *)(a2 + 4);
        v47[0] = 67240192;
        v47[1] = v12;
        LODWORD(v17) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v47, v17);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrController::submitWlanSessionStatsToAWD(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      break;
  }
  v8 = *(double *)(a2 + 24);
  v28 = *(double *)(a2 + 16);
  v29 = v8;
  v30 = v8 - v28;
  v34 = *(_DWORD *)(a1 + 8576);
  v35 = *(_BYTE *)(a1 + 6969);
  sub_1017E1D24((uint64_t)&v27);
  if (*(_QWORD *)(a1 + 7104))
  {
    sub_101703314((uint64_t)v18, (uint64_t)&v27);
    v9 = *(_QWORD *)(a1 + 7104);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, v18);
    if (v26 < 0)
      operator delete(__p);
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
    if (v20 < 0)
      operator delete(v19);
    sub_10185CDEC(a1);
  }
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
}

void sub_101852B00(_Unwind_Exception *a1)
{
  sub_1008484E0((uint64_t)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

void sub_101852B50(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,suplSummaryReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,suplSummaryReport", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::suplSummaryReport(const CLNilrTypes::SessionStatus &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10185C470(a1, a2);
}

void sub_101852CF0(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrController>::setTimeoutEvent(Event, double) [T = CLNilrController]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_101852154(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_101852154(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrController>::setTimeoutEvent(Event, double) [T = CLNilrController]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_101852154(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3A38);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_101852154(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrController>::setTimeoutEvent(Event, double) [T = CLNilrController]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10185F790;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_101852154(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_101852154(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_1018537C0(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_101852154(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_101852154(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrController>::cancelTimeoutEvent(Event) [T = CLNilrController]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_101852154(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_101852154(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

double sub_101853C50(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  NSObject *v6;
  _BYTE *v7;
  NSObject *v8;
  int v9;
  int v10;
  double result;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  _BYTE v19[960];
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  _DWORD v28[2];
  __int16 v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submit1xSessionStatsToAWD", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    LOWORD(v28[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,#awd,submit1xSessionStatsToAWD", v28, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submit1xSessionStatsToAWD(Emergency::CLEmergencySessionReport, const CLNilrTypes::SessionStatus &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v7 = (_BYTE *)(a1 + 8580);
  *(_DWORD *)(a2 + 208) = a3[212];
  *(_BYTE *)(a2 + 1018) = a3[213];
  *(_BYTE *)(a2 + 1090) = a3[211];
  if (*(_BYTE *)(a1 + 8580))
  {
    *(_BYTE *)(a2 + 1019) = 1;
    *(_OWORD *)(a2 + 1024) = *(_OWORD *)(a1 + 8584);
    *(_QWORD *)(a2 + 1040) = *(_QWORD *)(a1 + 8600);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *v7;
    v10 = *(unsigned __int8 *)(a2 + 40);
    *(_DWORD *)buf = 67109376;
    v32 = v9;
    v33 = 1024;
    v34 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submit1xSessionStatsToAWD,f1xNwFixValid,%d,emergencyReport.fPositionValid,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v15 = *v7;
    v16 = *(unsigned __int8 *)(a2 + 40);
    v28[0] = 67109376;
    v28[1] = v15;
    v29 = 1024;
    v30 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,#awd,submit1xSessionStatsToAWD,f1xNwFixValid,%d,emergencyReport.fPositionValid,%d", v28, 14);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submit1xSessionStatsToAWD(Emergency::CLEmergencySessionReport, const CLNilrTypes::SessionStatus &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*v7 && *(_BYTE *)(a2 + 40) && *(double *)(a1 + 8600) > 0.0 && *(double *)(a2 + 56) > 0.0)
    *(_DWORD *)(a2 + 1048) = (int)sub_10011E634((double *)(a1 + 10128), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a1 + 8584), *(double *)(a1 + 8592), 0.0);
  sub_10185CD18(a1, (std::string *)a2);
  sub_1017E1D24(a2);
  if (*(_QWORD *)(a1 + 7104))
  {
    sub_101703314((uint64_t)v19, a2);
    v12 = *(_QWORD *)(a1 + 7104);
    if (!v12)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, v19);
    if (v27 < 0)
      operator delete(__p);
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    return sub_10185CDEC(a1);
  }
  return result;
}

void sub_101854078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1008484E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101854094(uint64_t a1, int a2, unsigned int a3)
{
  char *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  char *v18;
  char *v19;
  const char *v20;
  uint8_t v21[8];
  __int16 v22;
  _BYTE v23[10];
  char v24;
  _DWORD v25[2];
  __int16 v26;
  uint8_t *v27;
  uint8_t buf[8];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  char v33;

  *(_DWORD *)(a1 + 8572) = *(_DWORD *)(a1 + 8576);
  *(_DWORD *)(a1 + 8576) = a3;
  v5 = (char *)(a1 + 6969);
  if (*(unsigned __int8 *)(a1 + 6969) == a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 8488);
      v8 = *v5;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v7;
      v29 = 1024;
      v30 = v8;
      v31 = 1024;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,noChangeInEmg,fIsCellularEmergency,%d,enable,%d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v9 = *v5;
      v22 = 1024;
      *(_DWORD *)v23 = v9;
      *(_WORD *)&v23[4] = 1024;
      *(_DWORD *)&v23[6] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,noChangeInEmg,fIsCellularEmergency,%d,enable,%d", v21, 20, 67109632);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_EmergencyMode(BOOL, Emergency::CommunicationType)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    *v5 = a2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      sub_1017E1CCC(a3, buf);
      v14 = v33 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v21 = 67109378;
      *(_DWORD *)&v21[4] = a2;
      v22 = 2080;
      *(_QWORD *)v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,process_EmergencyMode,%d,commType,%s", v21, 0x12u);
      if (v33 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v16 = qword_1022A0078;
      sub_1017E1CCC(a3, v21);
      if (v24 >= 0)
        v17 = v21;
      else
        v17 = *(uint8_t **)v21;
      v25[0] = 67109378;
      v25[1] = a2;
      v26 = 2080;
      v27 = v17;
      LODWORD(v20) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#nilr,#nict,process_EmergencyMode,%d,commType,%s", v25, v20);
      v19 = v18;
      if (v24 < 0)
        operator delete(*(void **)v21);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_EmergencyMode(BOOL, Emergency::CommunicationType)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    if (*v5)
      v15 = 2;
    else
      v15 = 3;
    sub_1018544B4(a1 + 6840, v15);
    sub_1016C8C64(a1 + 64, *v5, a3);
    sub_1016ACB84(a1 + 3344, *v5, a3);
  }
}

uint64_t sub_1018544B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t *v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  void **v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE *v95;
  _BYTE *v96;
  void **v97;
  char *v98;
  char *v99;
  const char *v100;
  const char *v101;
  int v102;
  void *v103[2];
  char v104;
  unsigned int v105;
  _BYTE __p[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  void **v110;
  _BYTE buf[12];
  __int16 v112;
  _BYTE *v113;
  __int16 v114;
  _BYTE *v115;
  _BYTE v116[12];
  __int16 v117;
  _BYTE *v118;
  char v119;

  ++*(_DWORD *)(a1 + 88);
  v105 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10185FD18();
    goto LABEL_169;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_10185FE88(qword_1022A0070 == -1);
    goto LABEL_169;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(int *)(a1 + 4);
    if (v8 > 3)
      v9 = "StateUnknown";
    else
      v9 = (&off_1021D3F60)[v8];
    sub_1015A2E04(__p, v9);
    v10 = SHIBYTE(v109);
    v11 = *(_BYTE **)__p;
    sub_101852154(a2, v116);
    v12 = __p;
    if (v10 < 0)
      v12 = v11;
    if (v119 >= 0)
      v13 = v116;
    else
      v13 = *(_BYTE **)v116;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v112 = 2080;
    v113 = v12;
    v114 = 2080;
    v115 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v119 < 0)
      operator delete(*(void **)v116);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v63 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v63 = (_QWORD *)*v63;
    v64 = qword_1022A0078;
    v65 = *(unsigned __int8 *)(a1 + 120);
    sub_10185DCA8(*(_DWORD *)(a1 + 4), v116);
    v66 = v119;
    v67 = *(_BYTE **)v116;
    sub_101852154(a2, v103);
    v68 = v116;
    if (v66 < 0)
      v68 = v67;
    if (v104 >= 0)
      v69 = v103;
    else
      v69 = (void **)v103[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v63;
    v107 = 2080;
    v108 = v68;
    v109 = 2080;
    v110 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, v65, "%scurrent_state,%s,event,%s", __p, 32, v101);
    v71 = v70;
    if (v104 < 0)
      operator delete(v103[0]);
    v3 = &qword_1022A0000;
    if (v119 < 0)
      operator delete(*(void **)v116);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (uint64_t **)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = a1 + 16;
  do
  {
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (!v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_101860000();
    goto LABEL_169;
  }
  v22 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v23 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v21 >> 1));
  if ((v21 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v22);
  v24 = v22(v23, a2);
  v25 = v24;
  v102 = v24;
  if (a2 <= 1 && (_DWORD)v24 != v105)
  {
    sub_101860450();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v78 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v78 = (_QWORD *)*v78;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v28 = qword_1022A0078;
  v29 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v29))
  {
    v30 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v30 = (_QWORD *)*v30;
    if (v25 > 3)
      v31 = "StateUnknown";
    else
      v31 = (&off_1021D3F60)[(int)v25];
    sub_1015A2E04(buf, v31);
    if (v114 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v107 = 2080;
    v108 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v114) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    sub_10185DCA8(v25, __p);
    if (v109 >= 0)
      v75 = __p;
    else
      v75 = *(_BYTE **)__p;
    *(_DWORD *)v116 = 136315394;
    *(_QWORD *)&v116[4] = v72;
    v117 = 2080;
    v118 = v75;
    LODWORD(v100) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v116, v100);
    v77 = v76;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  if ((_DWORD)v25 != v105)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v35 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v35 = (_QWORD *)*v35;
      if (v105 > 3)
        v36 = "StateUnknown";
      else
        v36 = (&off_1021D3F60)[v105];
      sub_1015A2E04(__p, v36);
      v37 = v3;
      v38 = SHIBYTE(v109);
      v39 = *(_BYTE **)__p;
      sub_1015A2E04(v116, "Exit");
      v40 = __p;
      if (v38 < 0)
        v40 = v39;
      if (v119 >= 0)
        v41 = v116;
      else
        v41 = *(_BYTE **)v116;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v35;
      v112 = 2080;
      v113 = v40;
      v114 = 2080;
      v115 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v119 < 0)
        operator delete(*(void **)v116);
      v3 = v37;
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v81 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v81 = (_QWORD *)*v81;
      v82 = qword_1022A0078;
      v83 = *(unsigned __int8 *)(a1 + 120);
      sub_10185DCA8(v105, v116);
      v84 = v3;
      v85 = v119;
      v86 = *(_BYTE **)v116;
      sub_1015A2E04(v103, "Exit");
      v87 = v116;
      if (v85 < 0)
        v87 = v86;
      if (v104 >= 0)
        v88 = v103;
      else
        v88 = (void **)v103[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v81;
      v107 = 2080;
      v108 = v87;
      v109 = 2080;
      v110 = v88;
      LODWORD(v100) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, v83, "%soldState,%s,event,%s", __p, v100, (const char *)(a1 + 8));
      v90 = v89;
      if (v104 < 0)
        operator delete(v103[0]);
      v3 = v84;
      v15 = (uint64_t **)v101;
      if (v119 < 0)
        operator delete(*(void **)v116);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v90);
      if (v90 != buf)
        free(v90);
    }
    v42 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v105;
    v43 = sub_1000610B4(v15, (int *)&v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v44 = v43[5];
    v45 = (uint64_t)v43[6];
    v46 = (_QWORD *)(v42 + (v45 >> 1));
    if ((v45 & 1) != 0)
      v44 = *(uint64_t **)(*v46 + v44);
    v47 = ((uint64_t (*)(_QWORD *, uint64_t))v44)(v46, 1);
    if (v47 == v105)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v48 = qword_1022A0078;
      v49 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v49))
      {
        v50 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v50 = (_QWORD *)*v50;
        if (v25 > 3)
          v51 = "StateUnknown";
        else
          v51 = (&off_1021D3F60)[(int)v25];
        sub_1015A2E04(__p, v51);
        v52 = v3;
        v53 = SHIBYTE(v109);
        v54 = *(_BYTE **)__p;
        sub_1015A2E04(v116, "Enter");
        v55 = __p;
        if (v53 < 0)
          v55 = v54;
        if (v119 >= 0)
          v56 = v116;
        else
          v56 = *(_BYTE **)v116;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v50;
        v112 = 2080;
        v113 = v55;
        v114 = 2080;
        v115 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v119 < 0)
          operator delete(*(void **)v116);
        v3 = v52;
        if (SHIBYTE(v109) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v91 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v91 = (_QWORD *)*v91;
        v92 = qword_1022A0078;
        v93 = *(unsigned __int8 *)(a1 + 120);
        sub_10185DCA8(v25, v116);
        v94 = v119;
        v95 = *(_BYTE **)v116;
        sub_1015A2E04(v103, "Enter");
        v96 = v116;
        if (v94 < 0)
          v96 = v95;
        if (v104 >= 0)
          v97 = v103;
        else
          v97 = (void **)v103[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v91;
        v107 = 2080;
        v108 = v96;
        v109 = 2080;
        v110 = v97;
        LODWORD(v100) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, v93, "%snewState,%s,event,%s", __p, v100, v101);
        v99 = v98;
        if (v104 < 0)
          operator delete(v103[0]);
        if (v119 < 0)
          operator delete(*(void **)v116);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v99);
        if (v99 != buf)
          free(v99);
      }
      v57 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v102;
      v58 = sub_1000610B4(v15, &v102, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v59 = v58[5];
      v60 = (uint64_t)v58[6];
      v61 = (_QWORD *)(v57 + (v60 >> 1));
      if ((v60 & 1) != 0)
        v59 = *(uint64_t **)(*v61 + v59);
      v25 = ((uint64_t (*)(_QWORD *, _QWORD))v59)(v61, 0);
      if ((_DWORD)v25 == v102)
        goto LABEL_101;
      sub_101860170();
    }
    else
    {
      sub_1018602E0();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_101855214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

void sub_101855274(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  int v23;
  void *v24[2];
  int v25;
  char v26;
  void *__p;
  int v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void **v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  void **v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[3];
    sub_10185557C(a2[4], &__p);
    v9 = (v31 & 0x8000) == 0 ? &__p : (void **)__p;
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[7];
    *(_DWORD *)buf = 67110914;
    v41 = v5;
    v42 = 1024;
    v43 = v7;
    v44 = 1024;
    v45 = v6;
    v46 = 1024;
    v47 = v8;
    v48 = 2080;
    v49 = v9;
    v50 = 1024;
    v51 = v10;
    v52 = 1024;
    v53 = v11;
    v54 = 1024;
    v55 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,DiscardedPosSessionIndParams,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", buf, 0x36u);
    if (SBYTE1(v31) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v13 = qword_1022A0078;
    v14 = a2[1];
    v15 = a2[2];
    v16 = a2[3];
    sub_10185557C(a2[4], v24);
    if (v26 >= 0)
      v17 = v24;
    else
      v17 = (void **)v24[0];
    v18 = a2[5];
    v19 = a2[6];
    v20 = a2[7];
    LOWORD(v28) = 1024;
    HIWORD(v28) = v15;
    v29 = v14;
    v30 = 1024;
    v31 = v16;
    v32 = 2080;
    v33 = v17;
    v34 = 1024;
    v35 = v18;
    v36 = 1024;
    v37 = v19;
    v38 = 1024;
    v39 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "#ins%d,#nilr,#nict,DiscardedPosSessionIndParams,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", &__p, 54, v23, LODWORD(v24[0]), (const char *)v24[1], v25, 67110914, v28);
    v22 = v21;
    if (v26 < 0)
      operator delete(v24[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::log_DiscardedSessionInd(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  if (sub_10075BD88())
  {
    sub_1018555A4(a1, a2);
    sub_101855A34(a1, a2);
  }
  if (a2[7] == 1 && a2[4] <= 2u)
    sub_101856120(a1, 0);
}

_QWORD *sub_10185557C@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 6)
    v2 = "DiscardedposMsgTypeUnknown";
  else
    v2 = (&off_1021D3F28)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_1018555A4(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  void **v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  char *v31;
  _DWORD v32[4];
  const char *v33;
  int v34;
  int v35;
  int v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45[2];
  char v46;
  void *__p;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  void **v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  unsigned int v89;
  void *v90;
  char v91;
  void *v92;
  char v93;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[3];
    sub_10185557C(a2[4], &__p);
    v9 = (v53 & 0x8000) == 0 ? &__p : (void **)__p;
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[7];
    *(_DWORD *)buf = 67110914;
    v63 = v5;
    v64 = 1024;
    v65 = v7;
    v66 = 1024;
    v67 = v6;
    v68 = 1024;
    v69 = v8;
    v70 = 2080;
    v71 = v9;
    v72 = 1024;
    v73 = v10;
    v74 = 1024;
    v75 = v11;
    v76 = 1024;
    v77 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#awd,submitDiscardedSessionStatsToAWD,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", buf, 0x36u);
    if (SBYTE1(v53) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v21 = qword_1022A0078;
    v22 = *(_DWORD *)(a1 + 8488);
    v23 = a2[1];
    v24 = a2[2];
    v25 = a2[3];
    sub_10185557C(a2[4], v45);
    if (v46 >= 0)
      v26 = v45;
    else
      v26 = (void **)v45[0];
    v27 = a2[5];
    v28 = a2[6];
    v29 = a2[7];
    LODWORD(__p) = 67110914;
    HIDWORD(__p) = v22;
    v48 = 1024;
    v49 = v24;
    v50 = 1024;
    v51 = v23;
    v52 = 1024;
    v53 = v25;
    v54 = 2080;
    v55 = v26;
    v56 = 1024;
    v57 = v27;
    v58 = 1024;
    v59 = v28;
    v60 = 1024;
    v61 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "#ins%d,#nilr,#nict,#awd,submitDiscardedSessionStatsToAWD,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", &__p, 54, v32[0], v32[2], v33, v34, v35, v36);
    v31 = v30;
    if (v46 < 0)
      operator delete(v45[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submitDiscardedSessionStatsToAWD(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
  }
  sub_100856FE0((uint64_t)buf);
  v13 = a2[5];
  if (v13 > 1)
  {
    if ((v13 & 0xFFFFFFEF) == 0)
    {
      v79 = 6;
      goto LABEL_22;
    }
    if ((v13 & 0xFFFFFFFB) != 0)
      goto LABEL_22;
    v15 = 7;
  }
  else
  {
    v79 = 1;
    v14 = a2[6];
    if (v14 == 2)
    {
      v15 = 3;
    }
    else if (v14 == 1)
    {
      v15 = 2;
    }
    else
    {
      if (v14)
        goto LABEL_22;
      v15 = 1;
    }
  }
  v78 = v15;
LABEL_22:
  v81 = *(_DWORD *)(a1 + 8488);
  v82 = *(_BYTE *)(a1 + 7144);
  v16 = a2[7];
  if (v16 == 1)
  {
    v17 = 27;
  }
  else
  {
    if (v16 != 2)
      goto LABEL_27;
    v17 = 7;
  }
  v80 = v17;
LABEL_27:
  v83 = *(_DWORD *)(a1 + 8576);
  v84 = *(_BYTE *)(a1 + 6969);
  v18 = a2[4];
  if (v18 < 7)
    v19 = v18 + 1;
  else
    v19 = 0;
  v89 = v19;
  sub_10185CD18(a1, (std::string *)buf);
  sub_1017E1D24((uint64_t)buf);
  if (*(_QWORD *)(a1 + 7104))
  {
    sub_101703314((uint64_t)v32, (uint64_t)buf);
    v20 = *(_QWORD *)(a1 + 7104);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v20 + 48))(v20, v32);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(v41);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
    sub_10185CDEC(a1);
  }
  if (v93 < 0)
    operator delete(v92);
  if (v91 < 0)
    operator delete(v90);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
}

void sub_101855A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1008484E0((uint64_t)va);
  sub_1008484E0((uint64_t)&STACK[0x540]);
  _Unwind_Resume(a1);
}

void sub_101855A34(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t i;
  NSObject *v25;
  int v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  void *v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  void *__dst[2];
  const char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  void *__p;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  _BYTE v62[10];
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  uint8_t buf[8];
  _BYTE v69[6];
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  _BYTE v75[10];
  _BYTE v76[6];
  int v77;
  _DWORD v78[48];
  uint64_t v79;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[3];
    sub_10185557C(a2[4], &__p);
    v9 = (v60 & 0x8000) == 0 ? &__p : (void **)__p;
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[7];
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v5;
    *(_WORD *)v69 = 1024;
    *(_DWORD *)&v69[2] = v7;
    v70 = 1024;
    v71 = v6;
    v72 = 1024;
    v73 = v8;
    v74 = 2080;
    *(_QWORD *)v75 = v9;
    *(_WORD *)&v75[8] = 1024;
    *(_DWORD *)v76 = v10;
    *(_WORD *)&v76[4] = 1024;
    v77 = v11;
    LOWORD(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 2) = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ca,submitDiscardedSessionStatsToCA,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", buf, 0x36u);
    if (SBYTE1(v60) < 0)
      operator delete(__p);
  }
  v13 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v30 = qword_1022A0078;
    v31 = *(_DWORD *)(a1 + 8488);
    v32 = a2[1];
    v33 = a2[2];
    v34 = a2[3];
    sub_10185557C(a2[4], &v51);
    if (SHIBYTE(v53) >= 0)
      v35 = &v51;
    else
      v35 = v51;
    v36 = a2[5];
    v37 = a2[6];
    v38 = a2[7];
    LODWORD(__p) = 67110914;
    HIDWORD(__p) = v31;
    v55 = 1024;
    v56 = v33;
    v57 = 1024;
    v58 = v32;
    v59 = 1024;
    v60 = v34;
    v61 = 2080;
    *(_QWORD *)v62 = v35;
    *(_WORD *)&v62[8] = 1024;
    v63 = v36;
    v64 = 1024;
    v65 = v37;
    v66 = 1024;
    v67 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "#ins%d,#nilr,#nict,#ca,submitDiscardedSessionStatsToCA,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", &__p, 54, LODWORD(__dst[0]), LODWORD(__dst[1]), v46, v47, v48, v49);
    v40 = v39;
    if (SHIBYTE(v53) < 0)
      operator delete(v51);
    v13 = sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submitDiscardedSessionStatsToCA(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  v14 = sub_10185DADC(v13, a2[2]);
  v15 = v14;
  v16 = a2[5];
  if (v16 > 1)
  {
    if ((v16 & 0xFFFFFFFB) != 0)
      v18 = 0;
    else
      v18 = 7;
  }
  else
  {
    v17 = a2[6];
    if (v17 < 3)
      v18 = v17 + 1;
    else
      v18 = 0;
  }
  v19 = a2[4];
  if (v19 < 7)
    v20 = v19 + 1;
  else
    v20 = 0;
  v21 = a2[7];
  *(_DWORD *)buf = 86;
  *(_DWORD *)v69 = v14;
  if (v21 == 1)
    v22 = 1;
  else
    v22 = 2 * (v21 == 2);
  *(_DWORD *)&v75[4] = 0;
  *(_DWORD *)&v76[2] = 51;
  v78[0] = 1;
  v78[6] = 0;
  v78[8] = 52;
  v78[10] = v18;
  v78[16] = 0;
  v78[18] = 84;
  v78[20] = v22;
  v78[26] = 0;
  v78[28] = 85;
  v78[30] = v20;
  v23 = *(_DWORD *)(a1 + 8488);
  v78[36] = 0;
  v78[38] = 79;
  v78[40] = v23;
  v78[46] = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  __p = &v51;
  LOBYTE(v55) = 0;
  v51 = operator new(0xF0uLL);
  v52 = (uint64_t)v51;
  v53 = (char *)v51 + 240;
  v52 = sub_1006AB40C((uint64_t)&v53, (uint64_t)buf, (uint64_t)&v79, (uint64_t)v51);
  for (i = 208; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v25 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_DWORD *)(a1 + 8488);
    v27 = a2[7];
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v26;
    *(_WORD *)v69 = 1024;
    *(_DWORD *)&v69[2] = v15;
    v70 = 1024;
    v71 = 1;
    v72 = 1024;
    v73 = v18;
    v74 = 1024;
    *(_DWORD *)v75 = v27;
    *(_WORD *)&v75[4] = 1024;
    *(_DWORD *)&v75[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ca,submitDiscardedSessionStatsToCA,posProtocol,%d,sessionType,%d,methodType,%d,discardReason,%d,discardMsgType,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v41 = *(_DWORD *)(a1 + 8488);
    v42 = a2[7];
    LODWORD(__p) = 67110400;
    HIDWORD(__p) = v41;
    v55 = 1024;
    v56 = v15;
    v57 = 1024;
    v58 = 1;
    v59 = 1024;
    v60 = v18;
    v61 = 1024;
    *(_DWORD *)v62 = v42;
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#ca,submitDiscardedSessionStatsToCA,posProtocol,%d,sessionType,%d,methodType,%d,discardReason,%d,discardMsgType,%d", &__p, 38, LODWORD(__dst[0]), LODWORD(__dst[1]), (_DWORD)v46, v47);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submitDiscardedSessionStatsToCA(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  v28 = *(void **)(a1 + 10200);
  v49 = 0;
  v50 = 0;
  v48 = 0;
  sub_1006AB68C(&v48, (uint64_t)v51, v52, 0xCCCCCCCCCCCCCCCDLL * ((v52 - (uint64_t)v51) >> 3));
  objc_msgSend(v28, "setMeasurements:", sub_1006A7590(&v48));
  *(_QWORD *)buf = &v48;
  sub_1006AB5A0((void ***)buf);
  v29 = *(void **)(a1 + 10200);
  if (byte_102311227 < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_102311210, *((unint64_t *)&xmmword_102311210 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_102311210;
    v46 = (const char *)unk_102311220;
  }
  objc_msgSend(v29, "submitEvent:", sub_1007FE6A8((__int128 *)__dst));
  if (SHIBYTE(v46) < 0)
    operator delete(__dst[0]);
  sub_10185CDEC(a1);
  *(_QWORD *)buf = &v51;
  sub_1006AB5A0((void ***)buf);
}

void sub_101856094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char *a32)
{
  a32 = &a21;
  sub_1006AB5A0((void ***)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_101856120(uint64_t a1, int a2)
{
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  int v9;
  double *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  const char *v29;
  uint8_t buf[8];
  std::__shared_weak_count *v31;
  double v32;

  sub_1001E4804(buf);
  v32 = 0.0;
  if (sub_1001FD98C(*(uint64_t *)buf, "AbcCooldownTime", &v32))
    v4 = v32;
  else
    v4 = 864000.0;
  v5 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_10185E224((_DWORD *)a1);
  if (!a2)
  {
    ++*(_DWORD *)(a1 + 10176);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_DWORD *)(a1 + 10176);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,non-emergency NILR Cplane request received,count,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v21 = *(_DWORD *)(a1 + 10176);
      LODWORD(v32) = 67109120;
      HIDWORD(v32) = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleNonEmergencyNilr,non-emergency NILR Cplane request received,count,%d", &v32);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v10 = (double *)(a1 + 10192);
    if (*(double *)(a1 + 10192) == 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,first non-emergency NILR Cplane request received,triggering non_emergency_NILR_CPlane ABC", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleNonEmergencyNilr,first non-emergency NILR Cplane request received,triggering non_emergency_NILR_CPlane ABC", &v32, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v26);
      if (v27 == buf)
        goto LABEL_47;
    }
    else
    {
      if (CFAbsoluteTimeGetCurrent() - *v10 <= v4)
        return sub_10185E684(a1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,non-emergency NILR Cplane request received after cooldown period,triggering non_emergency_NILR_CPlane ABC", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleNonEmergencyNilr,non-emergency NILR Cplane request received after cooldown period,triggering non_emergency_NILR_CPlane ABC", &v32, 2);
      v27 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v29);
      if (v27 == buf)
      {
LABEL_47:
        sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "queue"), (uint64_t)"Emergency", (uint64_t)"non_emergency_NILR_CPlane", 1);
        *(_DWORD *)(a1 + 10176) = 0;
        goto LABEL_48;
      }
    }
    free(v27);
    goto LABEL_47;
  }
  ++*(_DWORD *)(a1 + 10180);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(a1 + 10180);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,non-emergency NILR SUPL INIT received,count,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v18 = *(_DWORD *)(a1 + 10180);
    LODWORD(v32) = 67109120;
    HIDWORD(v32) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleNonEmergencyNilr,non-emergency NILR SUPL INIT received,count,%d", &v32);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v10 = (double *)(a1 + 10184);
  if (*(double *)(a1 + 10184) == 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,first SUPL INIT received outside emergency,triggering non_emergency_NILR_SUPL ABC", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_41;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    LOWORD(v32) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleNonEmergencyNilr,first SUPL INIT received outside emergency,triggering non_emergency_NILR_SUPL ABC", &v32, 2);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v24);
    if (v25 == buf)
      goto LABEL_41;
LABEL_61:
    free(v25);
LABEL_41:
    sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "queue"), (uint64_t)"Emergency", (uint64_t)"non_emergency_NILR_SUPL", 0);
    *(_DWORD *)(a1 + 10180) = 0;
LABEL_48:
    *v10 = CFAbsoluteTimeGetCurrent();
    return sub_10185E684(a1);
  }
  if (CFAbsoluteTimeGetCurrent() - *v10 > v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,SUPL INIT received outside emergency,triggering non_emergency_NILR_SUPL ABC", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_41;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    LOWORD(v32) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleNonEmergencyNilr,SUPL INIT received outside emergency,triggering non_emergency_NILR_SUPL ABC", &v32, 2);
    v25 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v28);
    if (v25 == buf)
      goto LABEL_41;
    goto LABEL_61;
  }
  return sub_10185E684(a1);
}

void sub_101856A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101856A78(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  double v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  const char *v57;
  uint8_t *v58;
  int v59;
  uint64_t v60;
  const char *v61;
  uint8_t *v62;
  double v63;
  int v64;
  int v65;
  __int16 v66;
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  uint8_t buf[4];
  int v107;
  __int16 v108;
  _BYTE v109[10];
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  int v145;
  __int16 v146;
  int v147;

  LODWORD(a3) = *(_DWORD *)(a2 + 20);
  LODWORD(a4) = *(_DWORD *)(a2 + 24);
  v6 = (double)*(unint64_t *)&a3;
  v7 = (double)*(unint64_t *)&a4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v8 = v6 * 0.00000536441803;
  v9 = v7 * 0.00000536441803 + -360.0;
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(a1 + 8488);
    v13 = *(_DWORD *)(a2 + 4);
    v12 = *(_DWORD *)(a2 + 8);
    v14 = *(_DWORD *)(a2 + 12);
    v15 = *(_DWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a2 + 20);
    v17 = *(_DWORD *)(a2 + 24);
    v18 = *(_DWORD *)(a2 + 32);
    v19 = *(unsigned __int8 *)(a2 + 28);
    v20 = *(unsigned __int8 *)(a2 + 30);
    v21 = *(unsigned __int8 *)(a2 + 36);
    v22 = *(unsigned __int16 *)(a2 + 38);
    v23 = *(unsigned __int16 *)(a2 + 40);
    v24 = *(unsigned __int8 *)(a2 + 42);
    v25 = *(unsigned __int8 *)(a2 + 44);
    v26 = *(_DWORD *)(a2 + 48);
    v27 = *(unsigned __int16 *)(a2 + 52);
    v28 = *(unsigned __int8 *)(a2 + 56);
    v29 = *(unsigned __int16 *)(a2 + 58);
    v30 = *(unsigned __int8 *)(a2 + 60);
    *(_DWORD *)buf = 67114497;
    v107 = v11;
    v108 = 1024;
    *(_DWORD *)v109 = v12;
    *(_WORD *)&v109[4] = 1024;
    *(_DWORD *)&v109[6] = v13;
    v110 = 1024;
    v111 = v14;
    v112 = 1024;
    v113 = v15;
    v114 = 1025;
    v115 = v16;
    v116 = 1025;
    v117 = v17;
    v118 = 2049;
    v119 = v6 * 0.00000536441803;
    v120 = 2049;
    v121 = v7 * 0.00000536441803 + -360.0;
    v122 = 1024;
    v123 = v18;
    v124 = 1024;
    v125 = v19;
    v126 = 1024;
    v127 = v20;
    v128 = 1024;
    v129 = v21;
    v130 = 1024;
    v131 = v22;
    v132 = 1024;
    v133 = v23;
    v134 = 1024;
    v135 = v24;
    v136 = 1024;
    v137 = v25;
    v138 = 1024;
    v139 = v26;
    v140 = 1024;
    v141 = v27;
    v142 = 1024;
    v143 = v28;
    v144 = 1024;
    v145 = v29;
    v146 = 1024;
    v147 = v30;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,PosIs801GpsLocationIndParams,posProtocol,%d,sessionProtocol,%d,sessionId,%u,status,%d,3ggp2lat,%{private}d,3gpp2lon,%{private}d,lat,%{private}.8f,lon,%{private}.8f,fixType,%d,locUncAng,%d,locUncP,%d,vel,%d,HorVelocity,%d,HeadingVelocity,%d,VerVelocity,%d,clockIncluded,%d,clockBias,%d,clockDrift,%d,heightIncluded,%d,height,%d,locUncV,%d", buf, 0x8Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v37 = *(_DWORD *)(a1 + 8488);
    v39 = *(_DWORD *)(a2 + 4);
    v38 = *(_DWORD *)(a2 + 8);
    v40 = *(_DWORD *)(a2 + 12);
    v41 = *(_DWORD *)(a2 + 16);
    v42 = *(_DWORD *)(a2 + 20);
    v43 = *(_DWORD *)(a2 + 24);
    v44 = *(_DWORD *)(a2 + 32);
    v45 = *(unsigned __int8 *)(a2 + 28);
    v46 = *(unsigned __int8 *)(a2 + 30);
    v47 = *(unsigned __int8 *)(a2 + 36);
    v48 = *(unsigned __int16 *)(a2 + 38);
    v49 = *(unsigned __int16 *)(a2 + 40);
    v50 = *(unsigned __int8 *)(a2 + 42);
    v51 = *(unsigned __int8 *)(a2 + 44);
    v52 = *(_DWORD *)(a2 + 48);
    v53 = *(unsigned __int16 *)(a2 + 52);
    v54 = *(unsigned __int8 *)(a2 + 56);
    v55 = *(unsigned __int16 *)(a2 + 58);
    v56 = *(unsigned __int8 *)(a2 + 60);
    v64 = 67114497;
    v65 = v37;
    v66 = 1024;
    *(_DWORD *)v67 = v38;
    *(_WORD *)&v67[4] = 1024;
    *(_DWORD *)&v67[6] = v39;
    v68 = 1024;
    v69 = v40;
    v70 = 1024;
    v71 = v41;
    v72 = 1025;
    v73 = v42;
    v74 = 1025;
    v75 = v43;
    v76 = 2049;
    v77 = v6 * 0.00000536441803;
    v78 = 2049;
    v79 = v7 * 0.00000536441803 + -360.0;
    v80 = 1024;
    v81 = v44;
    v82 = 1024;
    v83 = v45;
    v84 = 1024;
    v85 = v46;
    v86 = 1024;
    v87 = v47;
    v88 = 1024;
    v89 = v48;
    v90 = 1024;
    v91 = v49;
    v92 = 1024;
    v93 = v50;
    v94 = 1024;
    v95 = v51;
    v96 = 1024;
    v97 = v52;
    v98 = 1024;
    v99 = v53;
    v100 = 1024;
    v101 = v54;
    v102 = 1024;
    v103 = v55;
    v104 = 1024;
    v105 = v56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,PosIs801GpsLocationIndParams,posProtocol,%d,sessionProtocol,%d,sessionId,%u,status,%d,3ggp2lat,%{private}d,3gpp2lon,%{private}d,lat,%{private}.8f,lon,%{private}.8f,fixType,%d,locUncAng,%d,locUncP,%d,vel,%d,HorVelocity,%d,HeadingVelocity,%d,VerVelocity,%d,clockIncluded,%d,clockBias,%d,clockDrift,%d,heightIncluded,%d,height,%d,locUncV,%d", &v64, 142);
    v58 = (uint8_t *)v57;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::log_1xFinalFixFromNetwork(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &)", "%s\n", v57);
    if (v58 != buf)
      free(v58);
  }
  v31 = *(_DWORD *)(a1 + 7064);
  if (*(_DWORD *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 7064) = v31 | 0x18;
  }
  else
  {
    *(double *)(a1 + 7024) = v8;
    *(double *)(a1 + 7032) = v9;
    *(_DWORD *)(a1 + 7064) = v31 | 0x30;
    v32 = sub_1016E1454(*(unsigned __int8 *)(a2 + 29));
    v33 = sub_1016E1454(*(unsigned __int8 *)(a2 + 30));
    if (v32 > 0.0 && v33 > 0.0)
    {
      v33 = sqrt(v33 * v33 + v32 * v32) * 2.14;
      *(double *)(a1 + 7048) = v33;
    }
    if (*(_BYTE *)(a2 + 56))
    {
      LOWORD(v33) = *(_WORD *)(a2 + 58);
      *(double *)(a1 + 7040) = (double)*(unint64_t *)&v33;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v34 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v35 = *(_DWORD *)(a1 + 8488);
      v36 = *(_QWORD *)(a1 + 7048);
      *(_DWORD *)buf = 67109376;
      v107 = v35;
      v108 = 2048;
      *(_QWORD *)v109 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,Scaled hunc %f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v59 = *(_DWORD *)(a1 + 8488);
      v60 = *(_QWORD *)(a1 + 7048);
      v64 = 67109376;
      v65 = v59;
      v66 = 2048;
      *(_QWORD *)v67 = v60;
      LODWORD(v63) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,Scaled hunc %f", &v64, v63);
      v62 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::log_1xFinalFixFromNetwork(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &)", "%s\n", v61);
      if (v62 != buf)
        free(v62);
    }
    *(_BYTE *)(a1 + 8580) = 1;
    *(double *)(a1 + 8584) = v8;
    *(double *)(a1 + 8592) = v9;
    *(_QWORD *)(a1 + 8600) = *(_QWORD *)(a1 + 7048);
  }
}

void sub_101857068(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  uint8_t *v21;
  uint8_t *v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  double v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  _BYTE v37[6];
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[3];
    v9 = a2[4];
    v10 = a2[5];
    *(_DWORD *)buf = 67110400;
    v42 = v5;
    v43 = 1024;
    v44 = v6;
    v45 = 1024;
    v46 = v7;
    v47 = 1024;
    v48 = v8;
    v49 = 1024;
    v50 = v9;
    v51 = 1024;
    v52 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,PosLocationRequestStatusIndParams,sessionProtocol,%d,posProtocol,%d,sessionId,%u,positionMethodBitmap,0x%02x,locationRequestStatus,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v25 = a2[1];
    v26 = a2[2];
    v27 = a2[3];
    v28 = a2[5];
    *(_WORD *)v37 = 1024;
    *(_WORD *)&v37[2] = v25;
    LOWORD(v38) = HIWORD(v27);
    HIWORD(v38) = 1024;
    v39 = 1024;
    v40 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,PosLocationRequestStatusIndParams,sessionProtocol,%d,posProtocol,%d,sessionId,%u,positionMethodBitmap,0x%02x,locationRequestStatus,%d", &v35, 38, 67110400, *(_DWORD *)v37, v26, v38);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  if (!*(_BYTE *)(a1 + 7114))
  {
    *(_QWORD *)(a1 + 7000) = a2;
    v14 = a2[5];
    if (v14 == 1)
    {
      sub_1018544B4(a1 + 6840, 5);
    }
    else
    {
      if (v14)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v23 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          v24 = a2[5];
          *(_DWORD *)buf = 67240192;
          v42 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unrecognized indication type,%{public}d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_32;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v31 = a2[5];
        v35 = 67240192;
        v36 = v31;
        LODWORD(v34) = 8;
        v32 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#nilr,#nict,Unrecognized indication type,%{public}d", &v35, v34);
        v22 = v33;
        sub_100512490("Generic", 1, 0, 0, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v32);
      }
      else
      {
        sub_1018544B4(a1 + 6840, 4);
        *(_BYTE *)(a1 + 7144) = 1;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(_DWORD *)(a1 + 8488);
          v17 = *(unsigned __int8 *)(a1 + 7144);
          *(_DWORD *)buf = 67109376;
          v42 = v16;
          v43 = 1024;
          v44 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#awd,fWasNilrRequestReceived,%d", buf, 0xEu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_32;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v18 = *(_DWORD *)(a1 + 8488);
        v19 = *(unsigned __int8 *)(a1 + 7144);
        v35 = 67109376;
        v36 = v18;
        *(_WORD *)v37 = 1024;
        *(_DWORD *)&v37[2] = v19;
        v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#awd,fWasNilrRequestReceived,%d", &v35, 14);
        v22 = v21;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v20);
      }
      if (v22 != buf)
        free(v22);
    }
LABEL_32:
    *(_QWORD *)(a1 + 7000) = 0;
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,ignoring control plane indication due to NILR lock out", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    LOWORD(v35) = 0;
    LODWORD(v34) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,ignoring control plane indication due to NILR lock out", &v35, v34);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_1018576AC(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 7114))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,ignoring control plane request due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,ignoring control plane request due to NILR lock out", v6, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CplaneRequest(const gnss::Emergency::Cplane::PositionRequestFromModem &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 6976) = a2 + 4;
    *(_DWORD *)(a1 + 6984) = *(_DWORD *)(a2 + 48);
    sub_1018544B4(a1 + 6840, 6);
    *(_QWORD *)(a1 + 6976) = 0;
  }
}

void sub_101857864(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_ResetDataReq", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v10 = *(_DWORD *)(a1 + 8488);
    v15[0] = 67109120;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,process_ResetDataReq", v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_ResetDataReq(const gnss::Emergency::Cplane::ResetDataReqParams &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (!*(_BYTE *)(a1 + 7114))
  {
    v13[0] = off_1021D3E48;
    v14 = v13;
    v7 = *(_QWORD *)(a1 + 40);
    if (!v7)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v13);
    v8 = v14;
    if (v14 == v13)
    {
      v9 = 4;
      v8 = v13;
    }
    else
    {
      if (!v14)
      {
LABEL_22:
        sub_1016CB488(a1 + 64);
        return;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_22;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring ResetData request due to NILR lock out", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Ignoring ResetData request due to NILR lock out", v15, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_ResetDataReq(const gnss::Emergency::Cplane::ResetDataReqParams &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_101857BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101857C08(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceEph", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = *(_DWORD *)(a1 + 8488);
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,process_AssistanceEph", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 7114))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Nav Model assistance due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Ignoring Nav Model assistance due to NILR lock out", v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    sub_1018544B4(a1 + 6840, 11);
    sub_1016C971C(a1 + 64, a2 + 4);
  }
}

void sub_101857F14(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceAcquisition", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = *(_DWORD *)(a1 + 8488);
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,process_AssistanceAcquisition", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 7114))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Acquisition assistance due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Ignoring Acquisition assistance due to NILR lock out", v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    sub_1018544B4(a1 + 6840, 11);
    sub_1016C9384(a1 + 64, a2 + 4);
  }
}

void sub_101858220(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceLocation", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = *(_DWORD *)(a1 + 8488);
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,process_AssistanceLocation", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceLocation(const gnss::Emergency::Cplane::ReferenceLocationFromModem &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 7114))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Ref Location network assistance due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Ignoring Ref Location network assistance due to NILR lock out", v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceLocation(const gnss::Emergency::Cplane::ReferenceLocationFromModem &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    sub_1018544B4(a1 + 6840, 11);
    sub_1016C9D18(a1 + 64, a2 + 4);
  }
}

void sub_10185852C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceTime", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = *(_DWORD *)(a1 + 8488);
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,process_AssistanceTime", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 7114))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Ref Time network assistance due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Ignoring Ref Time network assistance due to NILR lock out", v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    sub_1018544B4(a1 + 6840, 11);
    sub_1016C98E8(a1 + 64, (void *)(a2 + 4));
  }
}

uint64_t sub_101858838(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[4];
    v6 = a2[5];
    v7 = a2[6];
    *(_DWORD *)buf = 67109632;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "process_SessionAbort,abortReason,%d,overRidingPositionMethod,%d,overRidingMethodType,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = a2[5];
    v10 = a2[6];
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "process_SessionAbort,abortReason,%d,overRidingPositionMethod,%d,overRidingMethodType,%d", &v13, 20, 67109632);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_SessionAbort(const gnss::Emergency::Cplane::GnssAbortReqParams &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return sub_1016CA2D4(a1 + 64, (uint64_t)a2);
}

uint64_t sub_101858A28(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_BasebandPowerStatus", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7 = *(_DWORD *)(a1 + 8488);
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,process_BasebandPowerStatus", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_BasebandPowerStatus(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return sub_1016CB644(a1 + 64, a2);
}

void sub_101858BE8(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,#wlan,process_CplaneWlanRequest", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v12 = *(_DWORD *)(a1 + 8488);
    v19 = 67109120;
    v20 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#nict,#wlan,process_CplaneWlanRequest", &v19);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*(_BYTE *)(a1 + 7114))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,#wlan,ignoring control plane wlan request due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,#wlan,ignoring control plane wlan request due to NILR lock out", &v19, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a2;
      v11 = *((unsigned __int16 *)a2 + 8);
      *(_DWORD *)buf = 67109376;
      v24 = v10;
      v25 = 1024;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#wlan,#nilr,#nict,wlanMeasRequest,nInstance,%d,responseTime,%d,", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v15 = *a2;
      v16 = *((unsigned __int16 *)a2 + 8);
      v19 = 67109376;
      v20 = v15;
      v21 = 1024;
      v22 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#wlan,#nilr,#nict,wlanMeasRequest,nInstance,%d,responseTime,%d,", &v19, 14);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *(_QWORD *)(a1 + 8496) = a2;
    sub_1018544B4(a1 + 6840, 12);
    *(_QWORD *)(a1 + 8496) = 0;
  }
}

void sub_101859050(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,AssistanceNeededReport", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = *(_DWORD *)(a1 + 8488);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,AssistanceNeededReport", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::nilrAssistanceRequestHandler(const gnss::Emergency::Cplane::AssistanceNeededReport *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1016CBA18(a1 + 64, a2);
}

void sub_101859210(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,PositionReport", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8 = *(_DWORD *)(a1 + 8488);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,PositionReport", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::nilrPositionHandler(const gnss::Emergency::Cplane::PositionReport *, const gnss::Fix &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_1016CC118(a1 + 64, a2, a3);
}

void sub_1018593E0(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,MeasurementReport", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = *(_DWORD *)(a1 + 8488);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,MeasurementReport", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::nilrMeasurementHandler(const gnss::Emergency::Cplane::MeasurementReport *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1016CC4DC(a1 + 64, a2);
}

void sub_1018595A0(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,MeasurementReportWithEstimate", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = *(_DWORD *)(a1 + 8488);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,MeasurementReportWithEstimate", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::nilrMeasurementReportWithEstimateHandler(const gnss::Emergency::Cplane::MeasurementReportWithEstimate *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1016CC874(a1 + 64, a2);
}

void sub_101859760(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,SummaryReport", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v10 = *(_DWORD *)(a1 + 8488);
    v13[0] = 67109120;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,SummaryReport", v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::nilrReportHandler(const gnss::Emergency::SummaryReport *, const std::string &, BOOL)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_10185994C(a1, a2, a3, a4);
  sub_10185A130(a1, a2, a3, a4);
}

void sub_10185994C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  std::string *v36;
  _BYTE v37[960];
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *__p;
  char v45;
  double __src[34];
  _OWORD __dst[17];
  std::string buf[40];
  std::string v49;
  std::string v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  std::string v59;
  std::string v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submitSessionStatsToAWD,CB", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    LOWORD(__dst[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,#awd,submitSessionStatsToAWD,CB", __dst, 2);
    v36 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::submitSessionStatsToAWD(const gnss::Emergency::SummaryReport *, const std::string &, BOOL)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  v9 = sub_100856FE0((uint64_t)buf);
  v10 = *(_DWORD *)(a2 + 92);
  if (v10 == 1)
  {
    v11 = *(double *)(a2 + 8);
    if (v11 >= -180.0 && v11 <= 180.0)
    {
      v12 = *(double *)a2;
      if (*(double *)a2 >= -90.0 && v12 <= 90.0)
      {
        v13 = *(double *)(a2 + 24);
        if (v13 > 0.0 && (fabs(v12) >= 0.0000001 || fabs(v11) >= 0.0000001))
        {
          buf[1].__r_.__value_.__s.__data_[16] = 1;
          *(double *)&buf[1].__r_.__value_.__l.__data_ = v12;
          *(double *)&buf[1].__r_.__value_.__l.__size_ = v11;
          *(double *)&buf[2].__r_.__value_.__l.__size_ = v13;
        }
      }
    }
    v14 = *(double *)(a2 + 16);
    if (v14 > -450.0 && v14 < 8850.0)
    {
      v15 = *(double *)(a2 + 32);
      if (v15 > 0.0)
      {
        buf[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 16);
        *(double *)&buf[2].__r_.__value_.__r.__words[2] = v15;
      }
    }
  }
  buf[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 40);
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = *(_OWORD *)(a1 + 7008);
  LODWORD(buf[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 120);
  if (v10 == 1)
    buf[1].__r_.__value_.__s.__data_[16] = 1;
  HIDWORD(buf[3].__r_.__value_.__r.__words[1]) = sub_10185C794(v9, *(_DWORD *)(a2 + 52));
  sub_100197040();
  v16 = sub_10075BE08();
  if ((_DWORD)v16 && (sub_100197040(), v16 = sub_100195F08(), (v16 & 1) == 0))
  {
    if (*(_DWORD *)(a1 + 6984) == 2)
      v17 = 2;
    else
      v17 = 1;
  }
  else
  {
    v17 = sub_10185C960(v16, *(unsigned int *)(a2 + 56));
  }
  LODWORD(buf[3].__r_.__value_.__r.__words[2]) = v17;
  v18 = sub_10185CB24(v17, *(_DWORD *)(a2 + 60));
  v19 = *(_DWORD *)(a2 + 48);
  HIDWORD(buf[3].__r_.__value_.__r.__words[2]) = v18;
  LODWORD(buf[3].__r_.__value_.__r.__words[1]) |= v19 & 3 | (8 * v19) & 0x20;
  *(_OWORD *)&buf[5].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
  v20 = *(_DWORD *)(a2 + 88) - 1;
  if (v20 > 5)
    v21 = 0;
  else
    v21 = dword_101CE8F3C[v20];
  LODWORD(buf[5].__r_.__value_.__r.__words[2]) = v21;
  HIDWORD(buf[6].__r_.__value_.__r.__words[0]) = sub_10185CCF4(v18, *(_DWORD *)(a2 + 92));
  buf[6].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a1 + 7112);
  buf[6].__r_.__value_.__s.__data_[9] = *(_BYTE *)(a2 + 97);
  if ((v19 & 2) != 0)
    v22 = 1;
  else
    v22 = 2;
  v23 = *(_DWORD *)(a1 + 8488);
  HIDWORD(buf[6].__r_.__value_.__r.__words[1]) = v22;
  LODWORD(buf[8].__r_.__value_.__l.__data_) = v23;
  buf[10].__r_.__value_.__s.__data_[4] = *(_BYTE *)(a1 + 7144);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)((char *)__dst + 8) = _Q1;
  *(_OWORD *)((char *)&__dst[1] + 8) = _Q1;
  *(_QWORD *)&__dst[0] = 0;
  *((_QWORD *)&__dst[2] + 1) = -1;
  LODWORD(__dst[3]) = -1;
  *((_QWORD *)&__dst[3] + 1) = 0;
  LOBYTE(__dst[4]) = 0;
  *(int64x2_t *)((char *)&__dst[4] + 8) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)((char *)&__dst[5] + 8) = xmmword_101BBE630;
  *(_OWORD *)((char *)&__dst[6] + 8) = _Q1;
  *((_QWORD *)&__dst[7] + 1) = 0xBFF0000000000000;
  *(_QWORD *)&__dst[8] = 0;
  DWORD2(__dst[8]) = 2;
  HIDWORD(__dst[9]) = 0;
  LOBYTE(__dst[10]) = 0;
  *(_QWORD *)((char *)&__dst[8] + 12) = 0;
  *(_QWORD *)((char *)&__dst[9] + 1) = 0;
  *(_QWORD *)((char *)&__dst[10] + 4) = 0xFFFFFFFF00000000;
  HIDWORD(__dst[10]) = -1;
  __dst[11] = *(_OWORD *)((char *)&__dst[4] + 8);
  *(_QWORD *)&__dst[12] = 0xBFF0000000000000;
  *((_QWORD *)&__dst[12] + 1) = 0xFFFFFFFF00000000;
  LODWORD(__dst[13]) = 0;
  WORD2(__dst[13]) = 255;
  DWORD2(__dst[13]) = 1;
  BYTE4(__dst[14]) = 0;
  *(_QWORD *)((char *)&__dst[13] + 12) = 0;
  *((_QWORD *)&__dst[14] + 1) = 0;
  LOBYTE(__dst[15]) = 0;
  *(_OWORD *)((char *)&__dst[15] + 8) = *(_OWORD *)((char *)&__dst[4] + 8);
  *((_QWORD *)&__dst[16] + 1) = 0xBFF0000000000000;
  if (LODWORD(buf[3].__r_.__value_.__r.__words[2]) == 2)
  {
    sub_1016ADBB4(a1 + 3344, __src);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1016E08B4((int *)__dst, (uint64_t)"AWD-Summary-Report-Supl");
    if (LOBYTE(__dst[15]) && *((double *)&__dst[16] + 1) > 0.0)
      DWORD1(v55) = sub_10011E634((double *)(a1 + 10128), *(double *)&buf[1].__r_.__value_.__l.__data_, *(double *)&buf[1].__r_.__value_.__l.__size_, *((double *)&__dst[15] + 1), *(double *)&__dst[16], 0.0);
    buf[10].__r_.__value_.__s.__data_[4] = 1;
  }
  else if (LODWORD(buf[3].__r_.__value_.__r.__words[2]) == 1)
  {
    sub_1016CCC70(a1 + 64, __src);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1016E08B4((int *)__dst, (uint64_t)"AWD-Summary-Report-Cplane");
  }
  LOBYTE(v56) = __dst[13];
  BYTE1(v56) = BYTE2(__dst[13]);
  buf[10].__r_.__value_.__s.__data_[5] = BYTE1(__dst[13]);
  if (BYTE1(__dst[13]))
  {
    *(_OWORD *)&buf[38].__r_.__value_.__l.__data_ = __dst[11];
    buf[10].__r_.__value_.__l.__size_ = *(_QWORD *)&__dst[12];
    *(double *)&buf[38].__r_.__value_.__r.__words[2] = (double)SDWORD2(__dst[12]);
  }
  __src[0] = 0.0;
  if (a4)
  {
    v29 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    if (sub_10000840C(v29, __src))
    {
      buf[7].__r_.__value_.__s.__data_[2] = 1;
      buf[7].__r_.__value_.__l.__size_ = (unint64_t)(CFAbsoluteTimeGetCurrent() - __src[0]);
    }
  }
  LODWORD(buf[39].__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 8576);
  buf[39].__r_.__value_.__s.__data_[4] = *(_BYTE *)(a1 + 6969);
  sub_10185CD18(a1, buf);
  sub_1017E1D24((uint64_t)buf);
  if (*(_BYTE *)(a1 + 8609) && *(_DWORD *)(a1 + 9896) == *(_DWORD *)(a2 + 120))
  {
    v31 = *(_DWORD *)(a1 + 9860);
    HIDWORD(buf[6].__r_.__value_.__r.__words[0]) = sub_10185CDCC(v30, v31);
    switch(v31)
    {
      case 0x13u:
        goto LABEL_53;
      case 8u:
        *(std::string::size_type *)((char *)&buf[39].__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)(a1 + 10076);
        LODWORD(buf[39].__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 8572);
        break;
      case 5u:
LABEL_53:
        v32 = *(_DWORD *)(a1 + 10072);
        if (v32 >= 8)
          v32 = 1;
        LODWORD(buf[39].__r_.__value_.__r.__words[1]) = v32;
        break;
    }
  }
  *(_BYTE *)(a1 + 8609) = 0;
  if (HIDWORD(buf[3].__r_.__value_.__r.__words[2]) == 5 && *(_BYTE *)(a1 + 7216))
  {
    memcpy((void *)(a1 + 8616), buf, 0x3C0uLL);
    std::string::operator=((std::string *)(a1 + 9576), &v49);
    std::string::operator=((std::string *)(a1 + 9600), &v50);
    *(_OWORD *)(a1 + 9704) = v56;
    *(_OWORD *)(a1 + 9720) = v57;
    *(_OWORD *)(a1 + 9736) = v58[0];
    *(_OWORD *)(a1 + 9656) = v53;
    *(_OWORD *)(a1 + 9672) = v54;
    *(_OWORD *)(a1 + 9688) = v55;
    v33 = v52;
    *(_OWORD *)(a1 + 9624) = v51;
    *(_OWORD *)(a1 + 9640) = v33;
    *(_OWORD *)(a1 + 9748) = *(_OWORD *)((char *)v58 + 12);
    std::string::operator=((std::string *)(a1 + 9768), &v59);
    std::string::operator=((std::string *)(a1 + 9792), &v60);
    *(_QWORD *)(a1 + 9848) = v63;
    *(_OWORD *)(a1 + 9816) = v61;
    *(_OWORD *)(a1 + 9832) = v62;
    *(_BYTE *)(a1 + 8608) = 1;
  }
  else if (*(_QWORD *)(a1 + 7104))
  {
    sub_101703314((uint64_t)v37, (uint64_t)buf);
    v34 = *(_QWORD *)(a1 + 7104);
    if (!v34)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v34 + 48))(v34, v37);
    if (v45 < 0)
      operator delete(__p);
    if (v43 < 0)
      operator delete(v42);
    if (v41 < 0)
      operator delete(v40);
    if (v39 < 0)
      operator delete(v38);
    sub_10185CDEC(a1);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_10185A0F4(_Unwind_Exception *a1)
{
  sub_1008484E0((uint64_t)&STACK[0x710]);
  _Unwind_Resume(a1);
}

void sub_10185A130(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t i;
  void *v13;
  double v14;
  double v15;
  float v16;
  uint64_t j;
  void *v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t k;
  void *v33;
  void *v34;
  uint64_t *v35;
  void *v36;
  const char *v42;
  int v43;
  int v44;
  int v45;
  uint64_t m;
  void *v47;
  float v48;
  float v49;
  uint64_t n;
  void *v51;
  const char *v52;
  CFAbsoluteTime Current;
  uint64_t ii;
  void *v55;
  void *v56;
  void *__p[2];
  uint64_t v58;
  uint64_t v59[3];
  double v60;
  uint64_t v61[3];
  void ****v62;
  uint64_t v63;
  void ****v64;
  uint64_t v65[3];
  void ***v66;
  uint64_t v67;
  void ***v68;
  uint64_t v69[3];
  uint64_t v70[3];
  uint64_t v71[3];
  void ***v72;
  uint64_t v73;
  void ***v74;
  uint64_t v75[3];
  uint64_t v76[3];
  uint64_t v77[3];
  void *****v78;
  char v79;
  void **__src[34];
  _OWORD __dst[17];
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  int v88;
  uint64_t v89;

  if (*(_DWORD *)(a2 + 92) == 1)
  {
    v8 = *(double *)(a2 + 8);
    if (v8 >= -180.0 && v8 <= 180.0)
    {
      v9 = *(double *)a2;
      if (*(double *)a2 >= -90.0 && v9 <= 90.0)
      {
        v10 = *(double *)(a2 + 24);
        if (v10 > 0.0 && (fabs(v9) >= 0.0000001 || fabs(v8) >= 0.0000001))
        {
          v11 = *(double *)(a2 + 40);
          LODWORD(__dst[0]) = 40;
          DWORD2(__dst[0]) = (int)v10;
          LODWORD(__dst[2]) = 0;
          DWORD2(__dst[2]) = 42;
          LODWORD(__dst[3]) = (int)v11;
          DWORD2(__dst[4]) = 0;
          memset(__src, 0, 24);
          v72 = __src;
          LOBYTE(v73) = 0;
          __src[0] = (void **)operator new(0x50uLL);
          __src[1] = __src[0];
          __src[2] = __src[0] + 10;
          __src[1] = (void **)sub_1006AB40C((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[5], (uint64_t)__src[0]);
          for (i = 48; i != -32; i -= 40)
            sub_1001F8644((uint64_t)__dst + i);
          v13 = *(void **)(a1 + 10200);
          memset(v77, 0, sizeof(v77));
          sub_1006AB68C(v77, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
          objc_msgSend(v13, "setMeasurements:", sub_1006A7590(v77));
          *(_QWORD *)&__dst[0] = v77;
          sub_1006AB5A0((void ***)__dst);
          *(_QWORD *)&__dst[0] = __src;
          sub_1006AB5A0((void ***)__dst);
        }
      }
    }
    v14 = *(double *)(a2 + 16);
    if (v14 > -450.0 && v14 < 8850.0)
    {
      v15 = *(double *)(a2 + 32);
      if (v15 > 0.0)
      {
        v16 = v14;
        LODWORD(__dst[0]) = 39;
        *((float *)__dst + 2) = v16;
        LODWORD(__dst[2]) = 4;
        DWORD2(__dst[2]) = 41;
        LODWORD(__dst[3]) = (int)v15;
        DWORD2(__dst[4]) = 0;
        memset(__src, 0, 24);
        v72 = __src;
        LOBYTE(v73) = 0;
        __src[0] = (void **)operator new(0x50uLL);
        __src[1] = __src[0];
        __src[2] = __src[0] + 10;
        __src[1] = (void **)sub_1006AB40C((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[5], (uint64_t)__src[0]);
        for (j = 48; j != -32; j -= 40)
          sub_1001F8644((uint64_t)__dst + j);
        v18 = *(void **)(a1 + 10200);
        memset(v76, 0, sizeof(v76));
        sub_1006AB68C(v76, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
        objc_msgSend(v18, "setMeasurements:", sub_1006A7590(v76));
        *(_QWORD *)&__dst[0] = v76;
        sub_1006AB5A0((void ***)__dst);
        *(_QWORD *)&__dst[0] = __src;
        sub_1006AB5A0((void ***)__dst);
      }
    }
    v19 = *(_DWORD *)(a2 + 48) & 3 | (32 * ((*(_DWORD *)(a2 + 48) >> 2) & 1));
    LODWORD(__dst[0]) = 43;
    DWORD2(__dst[0]) = v19;
    LODWORD(__dst[2]) = 0;
    memset(__src, 0, 24);
    v72 = __src;
    LOBYTE(v73) = 0;
    __src[0] = (void **)operator new(0x28uLL);
    __src[1] = __src[0];
    __src[2] = __src[0] + 5;
    __src[1] = (void **)sub_1006AB40C((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[2] + 8, (uint64_t)__src[0]);
    sub_1001F8644((uint64_t)__dst + 8);
    v20 = *(void **)(a1 + 10200);
    memset(v75, 0, sizeof(v75));
    sub_1006AB68C(v75, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
    objc_msgSend(v20, "setMeasurements:", sub_1006A7590(v75));
    *(_QWORD *)&__dst[0] = v75;
    sub_1006AB5A0((void ***)__dst);
    *(_QWORD *)&__dst[0] = __src;
    sub_1006AB5A0((void ***)__dst);
  }
  v21 = *(unsigned int *)(a2 + 56);
  sub_100197040();
  v22 = sub_10075BE08();
  if ((_DWORD)v22)
  {
    sub_100197040();
    v22 = sub_100195F08();
    if ((v22 & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 6984) == 2)
        v21 = 2;
      else
        v21 = 1;
    }
  }
  v23 = sub_10185C794(v22, *(_DWORD *)(a2 + 52));
  LODWORD(__dst[0]) = 52;
  DWORD2(__dst[0]) = v23;
  LODWORD(__dst[2]) = 0;
  v24 = sub_10185D1C8(v23, v21);
  DWORD2(__dst[2]) = 51;
  LODWORD(__dst[3]) = v24;
  DWORD2(__dst[4]) = 0;
  v25 = sub_10185D38C(v24, *(_DWORD *)(a2 + 60));
  v26 = 0;
  v27 = *(double *)(a2 + 64);
  v28 = *(double *)(a2 + 72);
  LODWORD(__dst[5]) = 49;
  DWORD2(__dst[5]) = v25;
  LODWORD(__dst[7]) = 0;
  DWORD2(__dst[7]) = 44;
  LODWORD(__dst[8]) = (int)v27;
  DWORD2(__dst[9]) = 0;
  LODWORD(__dst[10]) = 45;
  DWORD2(__dst[10]) = (int)v28;
  LODWORD(__dst[12]) = 0;
  v29 = *(_DWORD *)(a2 + 88) - 1;
  if (v29 <= 5)
    v26 = dword_101CE8F3C[v29];
  DWORD2(__dst[12]) = 46;
  LODWORD(__dst[13]) = v26;
  DWORD2(__dst[14]) = 0;
  v30 = sub_10185D55C(v25, *(_DWORD *)(a2 + 92));
  LODWORD(__dst[15]) = 47;
  DWORD2(__dst[15]) = v30;
  v82 = 0;
  v31 = *(_DWORD *)(a1 + 8488);
  v83 = 79;
  v84 = v31;
  LOBYTE(v31) = *(_BYTE *)(a1 + 6969);
  v85 = 0;
  v86 = 83;
  v87 = v31;
  v88 = 7;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  __src[0] = (void **)&v72;
  LOBYTE(__src[1]) = 0;
  v72 = (void ***)operator new(0x168uLL);
  v73 = (uint64_t)v72;
  v74 = v72 + 45;
  v73 = sub_1006AB40C((uint64_t)&v74, (uint64_t)__dst, (uint64_t)&v89, (uint64_t)v72);
  for (k = 328; k != -32; k -= 40)
    sub_1001F8644((uint64_t)__dst + k);
  v33 = *(void **)(a1 + 10200);
  memset(v71, 0, sizeof(v71));
  sub_1006AB68C(v71, (uint64_t)v72, v73, 0xCCCCCCCCCCCCCCCDLL * ((v73 - (uint64_t)v72) >> 3));
  objc_msgSend(v33, "setMeasurements:", sub_1006A7590(v71));
  *(_QWORD *)&__dst[0] = v71;
  sub_1006AB5A0((void ***)__dst);
  if (*(_DWORD *)(a2 + 92) == 1)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      LODWORD(__dst[0]) = 63;
      DWORD2(__dst[0]) = 1;
      LODWORD(__dst[2]) = 0;
      memset(__src, 0, 24);
      v66 = __src;
      LOBYTE(v67) = 0;
      __src[0] = (void **)operator new(0x28uLL);
      __src[1] = __src[0];
      __src[2] = __src[0] + 5;
      __src[1] = (void **)sub_1006AB40C((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[2] + 8, (uint64_t)__src[0]);
      sub_1001F8644((uint64_t)__dst + 8);
      v36 = *(void **)(a1 + 10200);
      memset(v70, 0, sizeof(v70));
      sub_1006AB68C(v70, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
      objc_msgSend(v36, "setMeasurements:", sub_1006A7590(v70));
      v35 = v70;
    }
    else
    {
      LODWORD(__dst[0]) = 63;
      DWORD2(__dst[0]) = 2;
      LODWORD(__dst[2]) = 0;
      memset(__src, 0, 24);
      v66 = __src;
      LOBYTE(v67) = 0;
      __src[0] = (void **)operator new(0x28uLL);
      __src[1] = __src[0];
      __src[2] = __src[0] + 5;
      __src[1] = (void **)sub_1006AB40C((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[2] + 8, (uint64_t)__src[0]);
      sub_1001F8644((uint64_t)__dst + 8);
      v34 = *(void **)(a1 + 10200);
      memset(v69, 0, sizeof(v69));
      sub_1006AB68C(v69, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
      objc_msgSend(v34, "setMeasurements:", sub_1006A7590(v69));
      v35 = v69;
    }
    *(_QWORD *)&__dst[0] = v35;
    sub_1006AB5A0((void ***)__dst);
    *(_QWORD *)&__dst[0] = __src;
    sub_1006AB5A0((void ***)__dst);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)__dst + 8) = _Q0;
  *(_OWORD *)((char *)&__dst[1] + 8) = _Q0;
  *(_QWORD *)&__dst[0] = 0;
  *((_QWORD *)&__dst[2] + 1) = -1;
  LODWORD(__dst[3]) = -1;
  *((_QWORD *)&__dst[3] + 1) = 0;
  LOBYTE(__dst[4]) = 0;
  *(int64x2_t *)((char *)&__dst[4] + 8) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)((char *)&__dst[5] + 8) = xmmword_101BBE630;
  *(_OWORD *)((char *)&__dst[6] + 8) = _Q0;
  *((_QWORD *)&__dst[7] + 1) = 0xBFF0000000000000;
  *(_QWORD *)&__dst[8] = 0;
  DWORD2(__dst[8]) = 2;
  HIDWORD(__dst[9]) = 0;
  LOBYTE(__dst[10]) = 0;
  *(_QWORD *)((char *)&__dst[8] + 12) = 0;
  *(_QWORD *)((char *)&__dst[9] + 1) = 0;
  *(_QWORD *)((char *)&__dst[10] + 4) = 0xFFFFFFFF00000000;
  HIDWORD(__dst[10]) = -1;
  __dst[11] = *(_OWORD *)((char *)&__dst[4] + 8);
  *(_QWORD *)&__dst[12] = 0xBFF0000000000000;
  *((_QWORD *)&__dst[12] + 1) = 0xFFFFFFFF00000000;
  LODWORD(__dst[13]) = 0;
  WORD2(__dst[13]) = 255;
  DWORD2(__dst[13]) = 1;
  BYTE4(__dst[14]) = 0;
  *(_QWORD *)((char *)&__dst[13] + 12) = 0;
  *((_QWORD *)&__dst[14] + 1) = 0;
  LOBYTE(__dst[15]) = 0;
  *(_OWORD *)((char *)&__dst[15] + 8) = *(_OWORD *)((char *)&__dst[4] + 8);
  *((_QWORD *)&__dst[16] + 1) = 0xBFF0000000000000;
  if ((_DWORD)v21 == 2)
  {
    sub_1016ADBB4(a1 + 3344, __src);
    memcpy(__dst, __src, sizeof(__dst));
    v42 = "Summary-Report-Supl";
  }
  else
  {
    if ((_DWORD)v21 != 1)
      goto LABEL_38;
    sub_1016CCC70(a1 + 64, __src);
    memcpy(__dst, __src, sizeof(__dst));
    v42 = "Summary-Report-Cplane";
  }
  sub_1016E08B4((int *)__dst, (uint64_t)v42);
LABEL_38:
  if (LOBYTE(__dst[13]))
    v43 = 1;
  else
    v43 = 2;
  LODWORD(__src[0]) = 74;
  LODWORD(__src[1]) = v43;
  if (BYTE1(__dst[13]))
    v44 = 1;
  else
    v44 = 2;
  LODWORD(__src[4]) = 0;
  LODWORD(__src[5]) = 67;
  LODWORD(__src[6]) = v44;
  LODWORD(__src[9]) = 0;
  if (BYTE2(__dst[13]))
    v45 = 1;
  else
    v45 = 2;
  LODWORD(__src[10]) = 75;
  LODWORD(__src[11]) = v45;
  LODWORD(__src[14]) = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v62 = &v66;
  LOBYTE(v63) = 0;
  v66 = (void ***)operator new(0x78uLL);
  v67 = (uint64_t)v66;
  v68 = v66 + 15;
  v67 = sub_1006AB40C((uint64_t)&v68, (uint64_t)__src, (uint64_t)&__src[15], (uint64_t)v66);
  for (m = 11; m != -4; m -= 5)
    sub_1001F8644((uint64_t)&__src[m]);
  v47 = *(void **)(a1 + 10200);
  memset(v65, 0, sizeof(v65));
  sub_1006AB68C(v65, (uint64_t)v66, v67, 0xCCCCCCCCCCCCCCCDLL * ((v67 - (uint64_t)v66) >> 3));
  objc_msgSend(v47, "setMeasurements:", sub_1006A7590(v65));
  __src[0] = (void **)v65;
  sub_1006AB5A0(__src);
  if (BYTE1(__dst[13]))
  {
    v48 = *(double *)&__dst[11];
    *(float *)&__src[1] = v48;
    LODWORD(__src[0]) = 68;
    v49 = *((double *)&__dst[11] + 1);
    LODWORD(__src[4]) = 4;
    LODWORD(__src[5]) = 69;
    *(float *)&__src[6] = v49;
    LODWORD(__src[9]) = 4;
    LODWORD(__src[10]) = 70;
    LODWORD(__src[11]) = (int)*(double *)&__dst[12];
    LODWORD(__src[14]) = 0;
    LODWORD(__src[15]) = 71;
    LODWORD(__src[16]) = DWORD2(__dst[12]);
    LODWORD(__src[19]) = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    v78 = &v62;
    v79 = 0;
    v62 = (void ****)operator new(0xA0uLL);
    v63 = (uint64_t)v62;
    v64 = v62 + 20;
    v63 = sub_1006AB40C((uint64_t)&v64, (uint64_t)__src, (uint64_t)&__src[20], (uint64_t)v62);
    for (n = 16; n != -4; n -= 5)
      sub_1001F8644((uint64_t)&__src[n]);
    v51 = *(void **)(a1 + 10200);
    memset(v61, 0, sizeof(v61));
    sub_1006AB68C(v61, (uint64_t)v62, v63, 0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 3));
    objc_msgSend(v51, "setMeasurements:", sub_1006A7590(v61));
    __src[0] = (void **)v61;
    sub_1006AB5A0(__src);
    __src[0] = (void **)&v62;
    sub_1006AB5A0(__src);
  }
  v60 = 0.0;
  if (a4)
  {
    v52 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    if (sub_10000840C(v52, &v60))
    {
      LODWORD(__src[0]) = 27;
      LODWORD(__src[1]) = 1;
      LODWORD(__src[4]) = 0;
      Current = CFAbsoluteTimeGetCurrent();
      LODWORD(__src[5]) = 28;
      __src[6] = (void **)(Current - v60);
      LODWORD(__src[9]) = 2;
      v63 = 0;
      v64 = 0;
      v62 = 0;
      v78 = &v62;
      v79 = 0;
      v62 = (void ****)operator new(0x50uLL);
      v63 = (uint64_t)v62;
      v64 = v62 + 10;
      v63 = sub_1006AB40C((uint64_t)&v64, (uint64_t)__src, (uint64_t)&__src[10], (uint64_t)v62);
      for (ii = 6; ii != -4; ii -= 5)
        sub_1001F8644((uint64_t)&__src[ii]);
      v55 = *(void **)(a1 + 10200);
      memset(v59, 0, sizeof(v59));
      sub_1006AB68C(v59, (uint64_t)v62, v63, 0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 3));
      objc_msgSend(v55, "setMeasurements:", sub_1006A7590(v59));
      __src[0] = (void **)v59;
      sub_1006AB5A0(__src);
      __src[0] = (void **)&v62;
      sub_1006AB5A0(__src);
    }
  }
  v56 = *(void **)(a1 + 10200);
  if (byte_1023111F7 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_1023111E0, *((unint64_t *)&xmmword_1023111E0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1023111E0;
    v58 = unk_1023111F0;
  }
  objc_msgSend(v56, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  __src[0] = (void **)&v66;
  sub_1006AB5A0(__src);
  *(_QWORD *)&__dst[0] = &v72;
  sub_1006AB5A0((void ***)__dst);
}

void sub_10185AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  STACK[0x260] = (unint64_t)&a51;
  sub_1006AB5A0((void ***)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void sub_10185B064(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,CellFTAssistance", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v6 = *(_DWORD *)(a1 + 8488);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,CellFTAssistance", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CellFT1xAssistance(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1016C9550(a1 + 64, a2 + 4);
}

id sub_10185B224(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,suplLocationIdRequestHandler", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v5 = *(_DWORD *)(a1 + 8488);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,suplLocationIdRequestHandler", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::suplLocationIdRequestHandler()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_1016A6A04(a1 + 3344);
}

double sub_10185B3DC(uint64_t a1, __int16 *a2)
{
  NSObject *v4;
  int v5;
  double result;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#wlan,suplWlanMeasRequestHandler", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v7 = *(_DWORD *)(a1 + 8488);
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#wlan,suplWlanMeasRequestHandler", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::suplWlanMeasRequestHandler(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_QWORD *)&result = sub_1016AE25C(a1 + 3344, a2).n128_u64[0];
  return result;
}

void sub_10185B59C(uint64_t a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109376;
    v15 = v7;
    v16 = 1024;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#supl,dispatch_decodedSuplInit,index,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8 = *(_DWORD *)(a1 + 8488);
    v11[0] = 67109376;
    v11[1] = v8;
    v12 = 1024;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#supl,dispatch_decodedSuplInit,index,%d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::dispatch_decodedSuplInit(gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_1016A55DC(a1 + 3344, a2, a3);
}

__n128 sub_10185B784(uint64_t a1, _OWORD *a2)
{
  NSObject *v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  int v11;
  const char *v12;
  uint8_t *v13;
  _OWORD v14[9];
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,updateSessionStatus", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v11 = *(_DWORD *)(a1 + 8488);
    v15[0] = 67109120;
    v15[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,updateSessionStatus", v15);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v6 = a2[7];
  v14[6] = a2[6];
  v14[7] = v6;
  v14[8] = a2[8];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  v9 = a2[1];
  v14[0] = *a2;
  v14[1] = v9;
  sub_1016ACFA8(a1 + 3344, (uint64_t)v14);
  return result;
}

void sub_10185B96C(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  uint8_t *v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[8];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = *a2;
    v7 = a2[1];
    v8 = *(unsigned __int8 *)(a1 + 6968);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,CplaneStatus,status,%d,result,%d,IsConformanceMode,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v11 = *a2;
    v12 = a2[1];
    v13 = *(unsigned __int8 *)(a1 + 6968);
    LOWORD(v17) = 1024;
    HIWORD(v17) = v11;
    v18 = v12;
    v19 = 1024;
    v20 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#nict,CplaneStatus,status,%d,result,%d,IsConformanceMode,%d", &v16, 26, 67109888, v17);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CplaneStatus(const CLNilrTypes::SessionStatus &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_100197040();
  if (sub_10075BE08())
  {
    if (*(_DWORD *)(a1 + 6984) == 2)
      v9 = "Supl";
    else
      v9 = "Cplane";
    sub_1015A2E04(buf, v9);
    if ((v27 & 0x8000) == 0)
      v10 = buf;
    else
      v10 = *(uint8_t **)buf;
    sub_1016E08B4(a2, (uint64_t)v10);
    if (SBYTE1(v27) < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    sub_1016E08B4(a2, (uint64_t)"Cplane");
  }
  switch(*a2)
  {
    case 0:
      sub_1018524E4(a1, (uint64_t)a2);
      break;
    case 1:
      *(_DWORD *)(a1 + 7064) |= 0x100u;
      break;
    case 2:
      if (a2[34])
        *(_DWORD *)(a1 + 7064) |= 0x10u;
      *(_QWORD *)(a1 + 6992) = a2;
      sub_1018544B4(a1 + 6840, 7);
      *(_QWORD *)(a1 + 6992) = 0;
      break;
    case 3:
      sub_101852180(a1, (uint64_t)a2);
      break;
    default:
      return;
  }
}

void sub_10185BC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10185BC94(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = *(_DWORD *)a2;
    v7 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)buf = 67109632;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    v21 = 1024;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,CplaneWlanStatus,status,%d,result,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8 = *(_DWORD *)a2;
    v9 = *(_DWORD *)(a2 + 4);
    v13 = 1024;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#nict,CplaneWlanStatus,status,%d,result,%d", &v12, 20, 67109632);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanStatus(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1016E0FAC((double *)a2, (uint64_t)"Cplane,AWD");
  if (*(_DWORD *)a2 == 3)
    sub_101852684(a1, a2);
}

void sub_10185BEA0(uint64_t a1, int *a2)
{
  unsigned __int8 *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v4 = (unsigned __int8 *)(a1 + 6968);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = *v4;
    *(_DWORD *)buf = 67109632;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,SuplStatus,status,%d,result,%d,IsConformanceMode,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v10 = a2[1];
    v11 = *v4;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,SuplStatus,status,%d,result,%d,IsConformanceMode,%d", &v17, 20, 67109632);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_SuplStatus(const CLNilrTypes::SessionStatus &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (v4[146])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Supl Status due to NILR lock out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      LOWORD(v17) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#nilr,#nict,Ignoring Supl Status due to NILR lock out", &v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_SuplStatus(const CLNilrTypes::SessionStatus &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  else
  {
    sub_1016E08B4(a2, (uint64_t)"Supl");
    switch(*a2)
    {
      case 0:
        sub_101852B50(a1, (uint64_t)a2);
        break;
      case 1:
        sub_1018544B4(a1 + 6840, 8);
        break;
      case 2:
        *(_DWORD *)(a1 + 7064) |= 0x10u;
        *(_QWORD *)(a1 + 7072) = a2;
        sub_1018544B4(a1 + 6840, 9);
        *(_QWORD *)(a1 + 7072) = 0;
        break;
      case 3:
        sub_101852180(a1, (uint64_t)a2);
        break;
      default:
        return;
    }
  }
}

void sub_10185C264(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = *(_DWORD *)a2;
    v7 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)buf = 67109632;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    v21 = 1024;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,SuplWlanStatus,status,%d,result,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8 = *(_DWORD *)a2;
    v9 = *(_DWORD *)(a2 + 4);
    v13 = 1024;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#nict,SuplWlanStatus,status,%d,result,%d", &v12, 20, 67109632);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::process_SuplWlanStatus(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1016E0FAC((double *)a2, (uint64_t)"Supl,AWD");
  if (*(_DWORD *)a2 == 3)
    sub_101852684(a1, a2);
}

void sub_10185C470(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,convertSessionStatusToNiReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nict,convertSessionStatusToNiReport", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::convertSessionStatusToNiReport(const CLNilrTypes::SessionStatus &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_OWORD *)(a1 + 7008) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 7024) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 7040) = *(_QWORD *)(a2 + 88);
  v5 = sqrt(*(double *)(a2 + 112) * *(double *)(a2 + 112) + *(double *)(a2 + 104) * *(double *)(a2 + 104));
  if (*(_DWORD *)(a2 + 128) != 68)
    v5 = v5 * 0.408163265;
  if (*(unsigned __int8 *)(a2 + 152) >= 0x28u)
    v5 = v5 + v5;
  *(double *)(a1 + 7048) = v5;
  if (*(_BYTE *)(a2 + 208))
    *(_DWORD *)(a1 + 7064) |= 1u;
  if (*(_BYTE *)(a2 + 209))
    *(_DWORD *)(a1 + 7064) |= 2u;
  if (*(_BYTE *)(a2 + 210))
    *(_DWORD *)(a1 + 7064) |= 4u;
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 5)
  {
    v7 = 128;
  }
  else if (v6 == 3)
  {
    v7 = 8;
  }
  else
  {
    if (v6 != 1 || v5 > *(double *)(a2 + 56))
      goto LABEL_24;
    v7 = 32;
  }
  *(_DWORD *)(a1 + 7064) |= v7;
LABEL_24:
  if (!*(_BYTE *)(a1 + 6808))
    return;
  v8 = *(_DWORD *)(a1 + 6120);
  if (v8 < 3)
    goto LABEL_28;
  if (v8 == 9)
  {
    *(_DWORD *)(a1 + 7056) = *(_DWORD *)sub_100706590(a1 + 6112);
    v9 = sub_100706590(a1 + 6112);
    goto LABEL_29;
  }
  if (v8 == 7)
  {
LABEL_28:
    *(_DWORD *)(a1 + 7056) = *(_DWORD *)sub_1007057DC(a1 + 6112);
    v9 = sub_1007057DC(a1 + 6112);
LABEL_29:
    v10 = (_DWORD *)(v9 + 4);
LABEL_30:
    *(_DWORD *)(a1 + 7060) = *v10;
    return;
  }
  if (v8 - 3 <= 2)
  {
    *(_DWORD *)(a1 + 7056) = *(_DWORD *)(sub_100704A28(a1 + 6112) + 32);
    v10 = (_DWORD *)(sub_100704A28(a1 + 6112) + 36);
    goto LABEL_30;
  }
  if (v8 == 6)
  {
    *(_DWORD *)(a1 + 7056) = *(_DWORD *)sub_1001E3CA4(a1 + 6112);
    v9 = sub_1001E3CA4(a1 + 6112);
    goto LABEL_29;
  }
}

uint64_t sub_10185C794(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a2 < 0xF)
    return *(unsigned int *)&asc_101CE8F00[4 * a2];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionMethod CLNilrController::convertEmergencySessionMethod(gnss::Emergency::PositionMethod)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185C960(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = a2;
  if (a2 < 3)
    return a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionSession CLNilrController::convertEmergencySessionType(gnss::Emergency::PositionSession)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185CB24(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if ((a2 - 1) < 4)
    return dword_101CE7B90[a2 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PositionProtocol,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value PositionProtocol,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionProtocol CLNilrController::convertEmergencyProtocol(gnss::Emergency::PositionProtocol)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185CCF4(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xF)
    return 26;
  else
    return dword_101CE8F54[a2 - 1];
}

std::string *sub_10185CD18(uint64_t a1, std::string *a2)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;

  a2[42].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a1 + 7167);
  a2[42].__r_.__value_.__s.__data_[9] = *(_BYTE *)(a1 + 7216);
  if (*(_DWORD *)(a1 + 7200))
    v4 = 1;
  else
    v4 = *(_DWORD *)(a1 + 7248) != 0;
  a2[44].__r_.__value_.__s.__data_[12] = v4;
  if (*(_DWORD *)(a1 + 7212))
    v5 = 1;
  else
    v5 = *(_DWORD *)(a1 + 7260) != 0;
  a2[44].__r_.__value_.__s.__data_[13] = v5;
  if (*(_DWORD *)(a1 + 7208))
    v6 = 1;
  else
    v6 = *(_DWORD *)(a1 + 7256) != 0;
  a2[44].__r_.__value_.__s.__data_[14] = v6;
  std::string::operator=(a2 + 40, (const std::string *)(a1 + 8392));
  return std::string::operator=(a2 + 41, (const std::string *)(a1 + 8416));
}

uint64_t sub_10185CDCC(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x19)
    return 26;
  else
    return dword_101CE8F94[a2];
}

double sub_10185CDEC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void **v4;
  void **v5;
  __int128 v6;
  void **v7;
  _OWORD *v8;
  int v9;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[960];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  __int128 __p;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,resetStateData", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v11 = *(_DWORD *)(a1 + 8488);
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#nict,resetStateData", v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::resetStateData()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  *(_DWORD *)(a1 + 8576) = 0;
  bzero(buf, 0x4D8uLL);
  sub_100856FE0((uint64_t)buf);
  memcpy((void *)(a1 + 8616), buf, 0x3C0uLL);
  v4 = (void **)(a1 + 9576);
  if (*(char *)(a1 + 9599) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v16;
  *(_QWORD *)(a1 + 9592) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  v5 = (void **)(a1 + 9600);
  if (*(char *)(a1 + 9623) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v18;
  *(_QWORD *)(a1 + 9616) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(v18) = 0;
  *(_OWORD *)(a1 + 9704) = v25;
  *(_OWORD *)(a1 + 9720) = v26;
  *(_OWORD *)(a1 + 9736) = v27[0];
  *(_OWORD *)(a1 + 9656) = v22;
  *(_OWORD *)(a1 + 9672) = v23;
  *(_OWORD *)(a1 + 9688) = v24;
  v6 = v21;
  *(_OWORD *)(a1 + 9624) = v20;
  *(_OWORD *)(a1 + 9640) = v6;
  *(_OWORD *)(a1 + 9748) = *(_OWORD *)((char *)v27 + 12);
  v7 = (void **)(a1 + 9768);
  if (*(char *)(a1 + 9791) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = __p;
  *(_QWORD *)(a1 + 9784) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__p) = 0;
  v8 = (_OWORD *)(a1 + 9792);
  if (*(char *)(a1 + 9815) < 0)
  {
    operator delete(*(void **)(a1 + 9792));
    v9 = SHIBYTE(v29);
    *v8 = v30;
    *(_QWORD *)(a1 + 9808) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    *(_OWORD *)(a1 + 9816) = v32;
    *(_OWORD *)(a1 + 9832) = v33;
    *(_QWORD *)(a1 + 9848) = v34;
    if (v9 < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_QWORD *)(a1 + 9808) = v31;
    *v8 = v30;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    *(_QWORD *)(a1 + 9848) = v34;
    *(_OWORD *)(a1 + 9816) = v32;
    *(_OWORD *)(a1 + 9832) = v33;
  }
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  *(_BYTE *)(a1 + 8580) = 0;
  *(_QWORD *)(a1 + 8584) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 8592) = xmmword_101BBE630;
  *(_WORD *)(a1 + 8608) = 0;
  *(_BYTE *)(a1 + 10168) = 0;
  *(_DWORD *)(a1 + 10172) = 0;
  return sub_1016A9088(a1 + 9856);
}

uint64_t sub_10185D1C8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = a2;
  if (a2 < 3)
    return a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::NILRSessionType CLNilrController::convertNILRSessionType(gnss::Emergency::PositionSession)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185D38C(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if ((a2 - 1) < 5)
    return dword_101CE9050[a2 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PositionProtocol,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value PositionProtocol,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::NILRPositionProtocol CLNilrController::convertNILRProtocol(gnss::Emergency::PositionProtocol)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185D55C(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xF)
    return 0;
  else
    return dword_101CE8FFC[a2 - 1];
}

uint64_t sub_10185D580(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a2 < 3)
    return a2 + 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionMethod CLNilrController::convertEmergencySessionMethod(gnss::Emergency::Cplane::MethodType)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185D744(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a2 < 4)
    return dword_101CE7BA0[a2];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionSession CLNilrController::convertEmergencySessionType(gnss::Emergency::Cplane::SessionProtocol)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185D910(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a2 < 5)
    return dword_101CE903C[a2];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PosProtocol,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value PosProtocol,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::PositionProtocol CLNilrController::convertEmergencyProtocol(gnss::Emergency::Cplane::PosProtocol)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10185DADC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (a2 < 5)
    return dword_101CE9050[a2];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PosProtocol,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Unhandled enum value PosProtocol,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "Emergency::NILRPositionProtocol CLNilrController::convertEmergencyProtocolToNilrPosProtocol(gnss::Emergency::Cplane::PosProtocol)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

_QWORD *sub_10185DCA8@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StateUnknown";
  else
    v2 = (&off_1021D3F60)[a1];
  return sub_1015A2E04(a2, v2);
}

double sub_10185DCD4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  double result;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,Resetting control plane status records", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v10 = *(_DWORD *)(a1 + 8488);
    v13[0] = 67109120;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,Resetting control plane status records", v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::resetControlPlaneStatus()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 7008) = _Q0;
  *(_QWORD *)(a1 + 7024) = 0;
  *(_QWORD *)(a1 + 7040) = 0;
  *(_QWORD *)(a1 + 7032) = 0;
  *(_QWORD *)(a1 + 7048) = 0xBFF0000000000000;
  result = NAN;
  *(_QWORD *)(a1 + 7056) = -1;
  *(_DWORD *)(a1 + 7064) = 0;
  return result;
}

__n128 sub_10185DEAC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  _DWORD v27[2];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8488);
    v6 = *(_QWORD *)(a1 + 7008);
    v7 = *(_QWORD *)(a1 + 7016);
    v8 = *(_QWORD *)(a1 + 7024);
    v9 = *(_QWORD *)(a1 + 7032);
    v10 = *(_QWORD *)(a1 + 7040);
    v11 = *(_QWORD *)(a1 + 7048);
    v12 = *(_DWORD *)(a1 + 7064);
    *(_DWORD *)buf = 67110913;
    v43 = v5;
    v44 = 2050;
    v45 = v6;
    v46 = 2050;
    v47 = v7;
    v48 = 2049;
    v49 = v8;
    v50 = 2049;
    v51 = v9;
    v52 = 2049;
    v53 = v10;
    v54 = 2050;
    v55 = v11;
    v56 = 1026;
    v57 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,getControlPlaneStatusReport,%{public}0.2f,end,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{private}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v17 = *(_DWORD *)(a1 + 8488);
    v18 = *(_QWORD *)(a1 + 7008);
    v19 = *(_QWORD *)(a1 + 7016);
    v20 = *(_QWORD *)(a1 + 7024);
    v21 = *(_QWORD *)(a1 + 7032);
    v22 = *(_QWORD *)(a1 + 7040);
    v23 = *(_QWORD *)(a1 + 7048);
    v24 = *(_DWORD *)(a1 + 7064);
    v27[0] = 67110913;
    v27[1] = v17;
    v28 = 2050;
    v29 = v18;
    v30 = 2050;
    v31 = v19;
    v32 = 2049;
    v33 = v20;
    v34 = 2049;
    v35 = v21;
    v36 = 2049;
    v37 = v22;
    v38 = 2050;
    v39 = v23;
    v40 = 1026;
    v41 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,getControlPlaneStatusReport,%{public}0.2f,end,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{private}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", v27, 74);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  result = *(__n128 *)(a1 + 7052);
  v14 = *(_OWORD *)(a1 + 7008);
  v15 = *(_OWORD *)(a1 + 7024);
  v16 = *(_OWORD *)(a1 + 7040);
  *(__n128 *)(a2 + 44) = result;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)a2 = v14;
  return result;
}

_DWORD *sub_10185E148(_DWORD *result, int *a2)
{
  int v2;

  *a2 = 0;
  if (result[1795] && result[1807])
  {
    v2 = 0;
  }
  else
  {
    v2 = 2;
    *a2 = 2;
  }
  if (!result[1797] || !result[1809])
  {
    v2 |= 0x10u;
    *a2 = v2;
  }
  if (!result[1796] || !result[1808])
  {
    v2 |= 8u;
    *a2 = v2;
  }
  if (!result[1799] || !result[1811])
    *a2 = v2 | 4;
  return result;
}

uint64_t sub_10185E1BC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8504) = *(_DWORD *)a2;
  if (a1 + 8504 != a2)
    sub_10185EA2C((char *)(a1 + 8512), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  return sub_1018544B4(a1 + 6840, 13);
}

uint64_t sub_10185E224(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t *v6;
  const char *v7;
  int *v8;
  const char *v9;
  uint64_t *v10;
  const char *v11;
  int *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  const char *v26;
  double v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;

  v2 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
  sub_100119F3C();
  v3 = sub_1001FD94C();
  if (byte_10230FB47 >= 0)
    v4 = (const char *)&qword_10230FB30;
  else
    v4 = (const char *)qword_10230FB30;
  if (sub_100006BB4(v3, v4, &v27))
  {
    if (byte_10230FB5F >= 0)
      v5 = (const char *)&qword_10230FB48;
    else
      v5 = (const char *)qword_10230FB48;
    v6 = (uint64_t *)(a1 + 2546);
    sub_1001FD98C((uint64_t)&v27, v5, a1 + 2546);
    if (byte_10230FB77 >= 0)
      v7 = (const char *)&qword_10230FB60;
    else
      v7 = (const char *)qword_10230FB60;
    v8 = a1 + 2545;
    sub_1001E4B84((uint64_t)&v27, v7, a1 + 2545);
    if (byte_10230FB8F >= 0)
      v9 = (const char *)&qword_10230FB78;
    else
      v9 = (const char *)qword_10230FB78;
    v10 = (uint64_t *)(a1 + 2548);
    sub_1001FD98C((uint64_t)&v27, v9, a1 + 2548);
    if (byte_10230FBA7 >= 0)
      v11 = (const char *)&qword_10230FB90;
    else
      v11 = (const char *)qword_10230FB90;
    v12 = a1 + 2544;
    sub_1001E4B84((uint64_t)&v27, v11, v12);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *v6;
      v15 = *v8;
      v16 = *v10;
      v17 = *v12;
      *(_DWORD *)buf = 134218752;
      v38 = v14;
      v39 = 1024;
      v40 = v15;
      v41 = 2048;
      v42 = v16;
      v43 = 1024;
      v44 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#abc,loadCachedAbcInfo,supl ABC trigger time,%f,non-emergnecy NILR supl request count,%d,cplane ABC trigger time,%f,non-emergnecy NILR cplane request count,%d", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v18 = *v6;
      v19 = *v8;
      v20 = *v10;
      v21 = *v12;
      v29 = 134218752;
      v30 = v18;
      v31 = 1024;
      v32 = v19;
      v33 = 2048;
      v34 = v20;
      v35 = 1024;
      v36 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#abc,loadCachedAbcInfo,supl ABC trigger time,%f,non-emergnecy NILR supl request count,%d,cplane ABC trigger time,%f,non-emergnecy NILR cplane request count,%d", COERCE_DOUBLE(&v29), 34, v27, v28);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::loadCachedAbcInfo()", "%s\n", v22);
LABEL_34:
      if (v23 != buf)
        free(v23);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D3A98);
    v24 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#abc,loadCachedAbcSuplInfo,no cached ABC info available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021D3A98);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#abc,loadCachedAbcSuplInfo,no cached ABC info available", &v29, 2);
      v23 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrController::loadCachedAbcInfo()", "%s\n", v26);
      goto LABEL_34;
    }
  }
  return sub_10011A5A8(&v27);
}

void sub_10185E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185E684(uint64_t a1)
{
  const char *v2;
  uint64_t *v3;
  const char *v4;
  int *v5;
  const char *v6;
  uint64_t *v7;
  const char *v8;
  int *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  int v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;

  sub_100119F3C();
  if (byte_10230FB5F >= 0)
    v2 = (const char *)&qword_10230FB48;
  else
    v2 = (const char *)qword_10230FB48;
  v3 = (uint64_t *)(a1 + 10184);
  sub_10018A4CC((uint64_t)&v25, v2, (const void *)(a1 + 10184));
  if (byte_10230FB77 >= 0)
    v4 = (const char *)&qword_10230FB60;
  else
    v4 = (const char *)qword_10230FB60;
  v5 = (int *)(a1 + 10180);
  sub_10011B4E4((uint64_t)&v25, v4, (const void *)(a1 + 10180));
  if (byte_10230FB8F >= 0)
    v6 = (const char *)&qword_10230FB78;
  else
    v6 = (const char *)qword_10230FB78;
  v7 = (uint64_t *)(a1 + 10192);
  sub_10018A4CC((uint64_t)&v25, v6, (const void *)(a1 + 10192));
  if (byte_10230FBA7 >= 0)
    v8 = (const char *)&qword_10230FB90;
  else
    v8 = (const char *)qword_10230FB90;
  v9 = (int *)(a1 + 10176);
  sub_10011B4E4((uint64_t)&v25, v8, v9);
  v10 = sub_1001FD94C();
  if (byte_10230FB47 >= 0)
    v11 = (const char *)&qword_10230FB30;
  else
    v11 = (const char *)qword_10230FB30;
  sub_1000CADE4(v10, v11, (uint64_t)&v25);
  v12 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *v3;
    v15 = *v5;
    v16 = *v7;
    v17 = *v9;
    *(_DWORD *)buf = 134218752;
    v36 = v14;
    v37 = 1024;
    v38 = v15;
    v39 = 2048;
    v40 = v16;
    v41 = 1024;
    v42 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#abc,writeCachedAbcInfo,supl ABC trigger time,%f,non-emergnecy NILR supl request count,%d,cplane ABC trigger time,%f,non-emergnecy NILR cplane request count,%d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v19 = *v3;
    v20 = *v5;
    v21 = *v7;
    v22 = *v9;
    v27 = 134218752;
    v28 = v19;
    v29 = 1024;
    v30 = v20;
    v31 = 2048;
    v32 = v21;
    v33 = 1024;
    v34 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#abc,writeCachedAbcInfo,supl ABC trigger time,%f,non-emergnecy NILR supl request count,%d,cplane ABC trigger time,%f,non-emergnecy NILR cplane request count,%d", COERCE_DOUBLE(&v27), 34, v25, v26);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::writeCachedAbcInfo()", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  return sub_10011A5A8(&v25);
}

void sub_10185E988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_10185E9A8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10185E9D4(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10185EA00(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

char *sub_10185EA2C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = sub_100C559E8(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void sub_10185EB64(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10185EB94()
{
  operator delete();
}

_QWORD *sub_10185EBA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3AC8;
  result[1] = v3;
  return result;
}

uint64_t sub_10185EBDC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3AC8;
  a2[1] = v2;
  return result;
}

void sub_10185EBF8(uint64_t a1, int *a2)
{
  sub_10185B96C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10185EC00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10185EC3C()
{
}

void sub_10185EC4C()
{
  operator delete();
}

_QWORD *sub_10185EC60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3B58;
  result[1] = v3;
  return result;
}

uint64_t sub_10185EC94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3B58;
  a2[1] = v2;
  return result;
}

void sub_10185ECB0(uint64_t a1, uint64_t a2)
{
  sub_10185BC94(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10185ECB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10185ECF4()
{
}

void sub_10185ED04()
{
  operator delete();
}

_QWORD *sub_10185ED18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3BE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10185ED4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3BE8;
  a2[1] = v2;
  return result;
}

void sub_10185ED68(uint64_t a1, int *a2)
{
  sub_10185BEA0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10185ED70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10185EDAC()
{
}

void sub_10185EDBC()
{
  operator delete();
}

_QWORD *sub_10185EDD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3C68;
  result[1] = v3;
  return result;
}

uint64_t sub_10185EE04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3C68;
  a2[1] = v2;
  return result;
}

void sub_10185EE20(uint64_t a1, uint64_t a2)
{
  sub_10185C264(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10185EE28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10185EE64()
{
}

void sub_10185EE74()
{
  operator delete();
}

_QWORD *sub_10185EE88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021D3CE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10185EEBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021D3CE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10185EED8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_101856120(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10185EEE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10185EF20()
{
}

void sub_10185EF30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10185EF58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10185EF98(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_1018605C0();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_10185F11C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_10185F15C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10185F1C4(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_10185F1C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1018537C0(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10185F240(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D3DC8;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_10185F28C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D3DC8;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  operator delete();
}

_QWORD *sub_10185F2E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = off_1021D3DC8;
  sub_10185F680((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10185F328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10185F33C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D3DC8;
  return sub_10185F680((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10185F358(uint64_t a1)
{
  sub_10185F74C(a1 + 8);
}

void sub_10185F360(void *a1)
{
  sub_10185F74C((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10185F388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  int v24;
  _BYTE v25[12];
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_DWORD *)(v4 + 8488);
    v8 = *(unsigned __int8 *)(a1 + 48);
    v9 = *(unsigned __int8 *)(a1 + 16);
    v10 = *(unsigned __int16 *)(a1 + 56);
    if (*(char *)(a1 + 87) >= 0)
      v6 = a1 + 64;
    v11 = *(unsigned __int8 *)(a1 + 88);
    v12 = *(unsigned __int8 *)(a1 + 89);
    v13 = *(unsigned __int8 *)(a1 + 90);
    *(_DWORD *)buf = 67110914;
    v30 = v7;
    v31 = 1024;
    v32 = v8;
    v33 = 1024;
    v34 = v9;
    v35 = 1024;
    v36 = v10;
    v37 = 2080;
    v38 = v6;
    v39 = 1024;
    v40 = v11;
    v41 = 1024;
    v42 = v12;
    v43 = 1024;
    v44 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSA,%d,enableLPPRel13,%d,enableRssi,%d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(unsigned __int8 *)(a1 + 48);
    v17 = *(unsigned __int8 *)(a1 + 16);
    v18 = *(unsigned __int16 *)(a1 + 56);
    if (*(char *)(a1 + 87) >= 0)
      v15 = a1 + 64;
    v19 = *(unsigned __int8 *)(a1 + 88);
    v20 = *(unsigned __int8 *)(a1 + 90);
    LOWORD(v24) = 1024;
    HIWORD(v24) = v16;
    *(_DWORD *)v25 = v17;
    *(_WORD *)&v25[4] = 1024;
    *(_DWORD *)&v25[6] = v18;
    *(_WORD *)&v25[10] = 2080;
    LOWORD(v26) = HIWORD(v19);
    HIWORD(v26) = 1024;
    v27 = 1024;
    v28 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSA,%d,enableLPPRel13,%d,enableRssi,%d", &v23, 54, 67110914, v24, *(const char **)v25, *(_DWORD *)&v25[8], HIDWORD(v15), v26);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrController::sendEmergencyConfig()::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  result = sub_1017FABAC(a2, a1 + 16);
  *(_BYTE *)(v4 + 7112) = *(_BYTE *)(a1 + 16);
  return result;
}

uint64_t sub_10185F638(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10185F674()
{
}

uint64_t sub_10185F680(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v5 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4(v5, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v5 = v6;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_10185F730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10185F74C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

uint64_t sub_10185F790(uint64_t a1)
{
  return sub_1018544B4(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10185F7A4()
{
  operator delete();
}

_QWORD *sub_10185F7B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021D3E48;
  return result;
}

void sub_10185F7DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021D3E48;
}

uint64_t *sub_10185F7F4(uint64_t a1, uint64_t a2)
{
  return sub_1018085C4(a2);
}

uint64_t sub_10185F7FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10185F838()
{
}

void sub_10185F844()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_10085FC2C();
  if (!v1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#nilr,#nict,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "#nilr,#nict,Assertion failed", "{\"msg%{public}.0s\":\"#nilr,#nict,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"#nilr,#nict,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

_QWORD *sub_10185F998(_QWORD *result, _QWORD *a2, _QWORD *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)*result == a2)
  {
    v10 = 4;
  }
  else
  {
    if (!*result)
      goto LABEL_6;
    v10 = 5;
    a2 = (_QWORD *)*result;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 8 * v10))(a2);
LABEL_6:
  v11 = (_QWORD *)a3[3];
  if (v11 == a3)
  {
    v12 = 4;
    goto LABEL_10;
  }
  if (v11)
  {
    v12 = 5;
    a3 = (_QWORD *)a3[3];
LABEL_10:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a3 + 8 * v12))(a3);
  }
  *(_QWORD *)a6 = a4;
  *(_DWORD *)(a6 + 8) = a5;
  return result;
}

#error "10185FAA8: call analysis failed (funcsize=75)"

#error "10185FC1C: call analysis failed (funcsize=73)"

#error "10185FD8C: call analysis failed (funcsize=73)"

#error "10185FF00: call analysis failed (funcsize=75)"

#error "101860074: call analysis failed (funcsize=73)"

#error "1018601E4: call analysis failed (funcsize=73)"

#error "101860354: call analysis failed (funcsize=73)"

#error "1018604C4: call analysis failed (funcsize=73)"

void sub_1018605C0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_10085FC2C();
  if (!v1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

uint64_t sub_101860714()
{
  sub_1015A2E04(&qword_10230FB30, "CacheAbcInfo");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FB30, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FB48, "SuplAbcTriggerTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FB48, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FB60, "NumOfNonEmergencyNilrSupl");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FB60, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FB78, "CplaneAbcTriggerTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FB78, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FB90, "NumOfNonEmergencyNilrCplane");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FB90, (void *)&_mh_execute_header);
}

void sub_101860A04(uint64_t a1, void *a2)
{
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  int v21;

  if ((sub_10076287C() & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLPG,onVisit for ProactiveGnss is not handled on this platform", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLPG,onVisit for ProactiveGnss is not handled on this platform", v11, 2, v11[0]);
LABEL_25:
    v10 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLProactiveGnss::onVisit(const CLVisit *)", "%s\n", v8);
    if (v10 != buf)
      free(v10);
    return;
  }
  if (a2)
  {
    v4 = objc_msgSend(a2, "hasDepartureDate");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 208);
      *(_DWORD *)buf = 68289795;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v4;
      v18 = 2113;
      v19 = a2;
      v20 = 1026;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPG,ProactiveGnss,received leeched visit notification\", \"isVisitExit\":%{public}d, \"visit\":%{private, location:escape_only}@, \"Previous visit state\":%{public}d}", buf, 0x28u);
    }
    *(_BYTE *)(a1 + 210) = v4;
    sub_101861A78(a1, v4);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3F80);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLPG,onVisit is nil", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLPG,onVisit is nil", v11, 2, v11[0]);
    goto LABEL_25;
  }
}

uint64_t *sub_101860D54(uint64_t *a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3F80);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLPG,deconstructor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLPG,deconstructor", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLProactiveGnss::~CLProactiveGnss()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*a1)
    objc_msgSend(*(id *)(*a1 + 16), "unregister:forNotification:", *(_QWORD *)(*a1 + 8), 13);
  v3 = (void *)a1[18];
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    a1[18] = 0;
  }
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *a1;
  *a1 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_101860F8C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101860F9C()
{
  NSObject *v0;
  double v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  char *v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  _BYTE v11[12];
  _OWORD buf[102];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3F80);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "CLPG,getMinSessionDurationBetween2Sessions", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    *(_WORD *)v11 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLPG,getMinSessionDurationBetween2Sessions", v11, 2);
    v7 = (char *)v6;
    sub_100512490("Generic", 1, 0, 2, "double CLProactiveGnss::getDurationBetween2Sessions(const double)", "%s\n", v6);
    if (v7 != (char *)buf)
      free(v7);
  }
  sub_1001E4804(buf);
  *(_QWORD *)v11 = 0;
  if (sub_1001FD98C(*(uint64_t *)&buf[0], "CLProactiveGnssMinDurBetween2Sessions_s", v11))
    v1 = *(double *)v11;
  else
    v1 = 30.0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3F80);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134349056;
    *(double *)((char *)buf + 4) = v1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLPG,getMinSessionDurationBetween2Sessions,durBetween2Sessions,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    *(_DWORD *)v11 = 134349056;
    *(double *)&v11[4] = v1;
    LODWORD(v10) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLPG,getMinSessionDurationBetween2Sessions,durBetween2Sessions,%{public}.3lf", v11, v10);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "double CLProactiveGnss::getDurationBetween2Sessions(const double)", "%s\n", v8);
    if (v9 != (char *)buf)
      free(v9);
  }
}

void sub_1018612E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101861304(_BYTE *a1, unsigned __int8 *a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BOOL4 v10;
  char v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  _DWORD v31[2];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  int v61;
  __int16 v62;
  _BOOL4 v63;
  __int16 v64;
  int v65;

  if (!a1[203])
  {
    if (a1[197] && !a1[196])
      goto LABEL_7;
LABEL_6:
    v4 = *((_DWORD *)a2 + 1) > 3;
    goto LABEL_8;
  }
  if (a1[202])
    goto LABEL_6;
LABEL_7:
  v4 = 0;
LABEL_8:
  if (a1[205])
  {
    if (!a1[204])
      goto LABEL_15;
  }
  else if (a1[199] && !a1[198])
  {
    goto LABEL_15;
  }
  if (a2[8])
  {
    v5 = 1;
    goto LABEL_22;
  }
LABEL_15:
  if (!a1[207])
  {
    if (a1[201] && !a1[200])
      goto LABEL_21;
LABEL_20:
    v5 = a2[2] != 0;
    goto LABEL_22;
  }
  if (a1[206])
    goto LABEL_20;
LABEL_21:
  v5 = 0;
LABEL_22:
  if ((sub_10076287C() & 1) == 0)
  {
    v6 = !v5;
    v9 = *a2;
LABEL_34:
    v13 = 0;
    v15 = v9 != 0;
    v16 = v6 | v4;
    v11 = v16 & v15;
    if ((v16 & v15) != 0)
      v14 = 0;
    else
      v14 = 2;
    goto LABEL_37;
  }
  v6 = !v5;
  if (a1[209])
    v7 = !v5;
  else
    v7 = 1;
  v8 = v7 | v4;
  v9 = *a2;
  if (v8 == 1)
    goto LABEL_34;
  v10 = *a2 != 0;
  v11 = v4 && v10;
  if (v4 && v10)
    v12 = 0;
  else
    v12 = 2;
  v13 = *a2 == 0;
  if (*a2)
    v14 = v12;
  else
    v14 = 1;
LABEL_37:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3F80);
  v17 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *((_DWORD *)a2 + 1);
    v19 = *((_DWORD *)a2 + 3);
    v20 = a2[8];
    v21 = a2[2];
    v22 = *a2;
    *(_DWORD *)buf = 67176705;
    v49 = v18;
    v50 = 1025;
    v51 = v19;
    v52 = 1025;
    v53 = v20;
    v54 = 1025;
    v55 = v21;
    v56 = 1025;
    v57 = v22;
    v58 = 1025;
    v59 = v5;
    v60 = 1025;
    v61 = v14;
    v62 = 1025;
    v63 = v13;
    v64 = 1025;
    v65 = v11 & 1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLPG,determineProactiveGnssNextAction,thermalState,%{private}d,motionActivityState,%{private}d,isDriving,%{private}d, isOutsideVisit,%{private}d,proactiveGnssState,%{private}d,allowProactiveBasedOnDeviceState,%{private}d,proactiveGnssDerivedState,%{private}d,start,%{private}d,stop,%{private}d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v24 = *((_DWORD *)a2 + 1);
    v25 = *((_DWORD *)a2 + 3);
    v26 = a2[8];
    v27 = a2[2];
    v28 = *a2;
    v31[0] = 67176705;
    v31[1] = v24;
    v32 = 1025;
    v33 = v25;
    v34 = 1025;
    v35 = v26;
    v36 = 1025;
    v37 = v27;
    v38 = 1025;
    v39 = v28;
    v40 = 1025;
    v41 = v5;
    v42 = 1025;
    v43 = v14;
    v44 = 1025;
    v45 = v13;
    v46 = 1025;
    v47 = v11 & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLPG,determineProactiveGnssNextAction,thermalState,%{private}d,motionActivityState,%{private}d,isDriving,%{private}d, isOutsideVisit,%{private}d,proactiveGnssState,%{private}d,allowProactiveBasedOnDeviceState,%{private}d,proactiveGnssDerivedState,%{private}d,start,%{private}d,stop,%{private}d", v31, 56);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "CLProactiveGnss::CLProactiveGnssNextAction CLProactiveGnss::determineProactiveGnssNextAction(const CLProactiveGnssStateVariables &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  return v14;
}

void sub_101861690(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint8_t *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint8_t v11;
  NSObject *v12;
  uint8_t *v13;
  _QWORD v14[2];
  uint8_t buf[16];
  int v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int128 v20;
  __int16 v21;
  __int128 v22;
  char v23;

  if (*(_BYTE *)(a1 + 208))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLPG,proactiveGnss already active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3F80);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLPG,proactiveGnss already active", v14, 2, v14[0]);
LABEL_24:
      v13 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveGnss::startProactiveGnss()", "%s\n", v2);
      if (v13 != buf)
        free(v13);
    }
  }
  else if (sub_10076287C() && *(_BYTE *)(a1 + 209))
  {
    *(_OWORD *)buf = xmmword_101BBE5E0;
    v16 = -1;
    v17 = 0x7FEFFFFFFFFFFFFFLL;
    v18 = 0;
    v19 = 0;
    v20 = xmmword_101BBE610;
    v21 = 1;
    v22 = xmmword_101CE0790;
    v23 = 0;
    sub_1018619DC(a1);
    v4 = *(_QWORD *)(a1 + 40);
    LODWORD(v14[0]) = 2;
    sub_101814364(v4, v14, (uint64_t)buf);
    sub_101860F9C();
    v17 = v5;
    v6 = sub_1018190BC(*(_QWORD *)(a1 + 40), (uint64_t *)buf);
    *(_BYTE *)(a1 + 208) = v6;
    v7 = (uint8_t *)(a1 + 56);
    if (v6)
      v7 = buf;
    v8 = *((_OWORD *)v7 + 1);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 72) = v8;
    v10 = *((_OWORD *)v7 + 3);
    v9 = *((_OWORD *)v7 + 4);
    v11 = v7[80];
    *(_OWORD *)(a1 + 88) = *((_OWORD *)v7 + 2);
    *(_BYTE *)(a1 + 136) = v11;
    *(_OWORD *)(a1 + 120) = v9;
    *(_OWORD *)(a1 + 104) = v10;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLPG,#warning,start,isProactiveGnssAllowed not allowed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3F80);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLPG,#warning,start,isProactiveGnssAllowed not allowed", v14, 2, v14[0]);
      goto LABEL_24;
    }
  }
}

void sub_1018619DC(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  double v5;
  double v6;
  double v7;

  if (*(_BYTE *)(a1 + 216))
  {
    v2 = sub_100762784();
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 210);
    v2 = sub_100762784();
    if (!v3)
    {
      v7 = 280.0;
      goto LABEL_11;
    }
  }
  v4 = v2;
  if (*(_QWORD *)(a1 + 40))
  {
    sub_1018144F8();
    v6 = v5;
    if (*(_QWORD *)(a1 + 40))
      sub_1018144F8();
    else
      v7 = 120.0;
  }
  else
  {
    v6 = 120.0;
    v7 = 120.0;
  }
  if (v4)
    v7 = v6;
LABEL_11:
  *(double *)(a1 + 184) = v7;
}

void sub_101861A78(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  uint8_t *v22;
  _QWORD v23[2];
  int v24[4];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 40))
  {
    v24[0] = 2;
    v4 = (unsigned __int8 *)(a1 + 208);
    if (!*(_BYTE *)(a1 + 208) || sub_10076287C() && *(_BYTE *)(a1 + 209))
    {
      if (sub_10076287C() && *(_BYTE *)(a1 + 209))
      {
        v5 = sub_101861304((_BYTE *)a1, v4);
        v6 = v5;
        if (a2)
        {
          if (*(_BYTE *)(a1 + 208))
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3F80);
            v7 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLPG,visit exit proactive rhythmic active", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3F80);
              v8 = qword_1022A0078;
              LOWORD(v23[0]) = 0;
              v9 = "CLPG,visit exit proactive rhythmic active";
LABEL_50:
              v18 = 1;
LABEL_58:
              v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, v18, v9, v23, 2, v23[0]);
              v13 = v22;
              sub_100512490("Generic", 1, 0, 2, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n", v21);
LABEL_59:
              if (v13 != buf)
                free(v13);
            }
          }
          else
          {
            *(double *)(a1 + 176) = sub_1001FCBB4();
            if (v6 == 1)
              sub_101861690(a1);
          }
        }
        else if (*(_BYTE *)(a1 + 208))
        {
          if (!v5)
          {
            v16 = sub_1001FCBB4();
            *(double *)(a1 + 176) = v16;
            LODWORD(v16) = *(_DWORD *)(a1 + 192);
            objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", (double)*(unint64_t *)&v16);
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3F80);
          v17 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLPG,visit entry proactive rhythmic not-active", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3F80);
            v8 = qword_1022A0078;
            LOWORD(v23[0]) = 0;
            v9 = "CLPG,visit entry proactive rhythmic not-active";
            goto LABEL_50;
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3F80);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLPG,onVisit MA feature is dis-allowed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3F80);
          v8 = qword_1022A0078;
          LOWORD(v23[0]) = 0;
          v9 = "CLPG,onVisit MA feature is dis-allowed";
          v18 = 2;
          goto LABEL_58;
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3F80);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLPG,onVisit MA feature is dis-allowed, stop proactive", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3F80);
        LOWORD(v23[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLPG,onVisit MA feature is dis-allowed, stop proactive", v23, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      sub_1018147E0(*(_QWORD *)(a1 + 40), v24);
      *(_BYTE *)(a1 + 208) = 0;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3F80);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLPG,RhythmicGnssManager is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3F80);
      LOWORD(v24[0]) = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLPG,RhythmicGnssManager is not available", v24, 2);
      v13 = v12;
      sub_100512490("Generic", 1, 0, 0, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n", v11);
      goto LABEL_59;
    }
  }
}

void sub_1018620C4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018620F0()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CE9090;
      v1[3] = unk_101CE90A0;
      v1[4] = xmmword_101CE90B0;
      v1[0] = xmmword_101CE9070;
      v1[1] = unk_101CE9080;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1018621C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_1018621DC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_101862278(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_101862290()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10186231C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_101862334()
{
  sub_1015A2E04(qword_10230FBA8, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230FBA8, (void *)&_mh_execute_header);
}

void sub_10186237C(int a1@<W0>, uint64_t a2@<X8>)
{
  void **v4;
  uint64_t i;
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];

  sub_1015A2E04(v6, "gps");
  sub_1015A2E04(v7, "glo");
  sub_1015A2E04(v8, "qzs");
  sub_1015A2E04(v9, "bds");
  sub_1015A2E04(v10, "gal");
  v4 = (void **)&v6[3 * a1];
  if (*((char *)v4 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)a2, *v4, (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = v4[2];
  }
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0)
      operator delete((void *)v10[i]);
  }
}

void sub_10186249C(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;

  v10 = 0;
  while (1)
  {
    if (*((char *)&a9 + v10 + 119) < 0)
      operator delete(*(void **)((char *)&a9 + v10 + 96));
    v10 -= 24;
    if (v10 == -120)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_101862500(int a1)
{
  return word_101CE90DC[a1];
}

_OWORD *sub_101862510(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    sub_1018626E0((uint64_t)a1, dword_101CE90C8[v4], a2 + 24 * dword_101CE90C8[v4]);
    ++v4;
  }
  while (v4 != 5);
  return a1;
}

void sub_101862598(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_101877FC4(v1 + 240, v2, v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_1018625B4(_OWORD *a1)
{
  uint64_t i;
  void *v3;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];

  v9 = 0;
  sub_100B8FCC8(v10, 0x20uLL, &v9);
  v8 = 0;
  sub_100B8FCC8(v11, 0x18uLL, &v8);
  v7 = 0;
  sub_100B8FCC8(v12, 5uLL, &v7);
  v6 = 0;
  sub_100B8FCC8(v13, 0x3FuLL, &v6);
  v5 = 0;
  sub_100B8FCC8(v14, 0x24uLL, &v5);
  sub_101862510(a1, (uint64_t)v10);
  for (i = 12; i != -3; i -= 3)
  {
    v3 = (void *)v10[i];
    if (v3)
      operator delete(v3);
  }
  return a1;
}

void sub_10186268C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;
  void *v13;

  v12 = 96;
  while (1)
  {
    v13 = *(void **)(v10 + v12);
    if (v13)
      operator delete(v13);
    v12 -= 24;
    if (v12 == -24)
      _Unwind_Resume(exception_object);
  }
}

void sub_1018626E0(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  _WORD *v11;
  _WORD *v12;
  _WORD *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  _WORD *v33;
  void *__src;
  _WORD *v37;
  unint64_t v38;
  void *__p;
  _WORD *v40;
  unint64_t v41;

  __p = 0;
  v40 = 0;
  v41 = 0;
  __src = 0;
  v37 = 0;
  v38 = 0;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = v3 & 0x3F;
  if (v3 > 0x3F || v4 != 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD **)a3;
    v9 = *(_QWORD *)a3 + 8 * (v3 >> 6);
    v10 = word_101CE90E6[a2];
    do
    {
      if (((*v8 >> v7) & 1) != 0)
      {
        v11 = v40;
        if ((unint64_t)v40 >= v41)
        {
          v15 = __p;
          v16 = (char *)v40 - (_BYTE *)__p;
          if ((char *)v40 - (_BYTE *)__p <= -3)
            goto LABEL_57;
          v17 = v16 >> 1;
          if (v41 - (unint64_t)__p <= (v16 >> 1) + 1)
            v18 = v17 + 1;
          else
            v18 = v41 - (_QWORD)__p;
          if (v41 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v20 = (char *)sub_100BFCCD8((uint64_t)&v41, v19);
            v15 = __p;
            v11 = v40;
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[2 * v17];
          *(_WORD *)v27 = v10;
          v12 = v27 + 2;
          while (v11 != v15)
          {
            v28 = *--v11;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          __p = v27;
          v40 = v12;
          v41 = (unint64_t)&v20[2 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v40 = v10;
          v12 = v11 + 1;
        }
        v40 = v12;
      }
      else
      {
        v13 = v37;
        if ((unint64_t)v37 >= v38)
        {
          v21 = __src;
          v22 = (char *)v37 - (_BYTE *)__src;
          if ((char *)v37 - (_BYTE *)__src < -2)
LABEL_57:
            sub_100259694();
          v23 = v22 >> 1;
          if (v38 - (unint64_t)__src <= (v22 >> 1) + 1)
            v24 = v23 + 1;
          else
            v24 = v38 - (_QWORD)__src;
          if (v38 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFFELL)
            v25 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v26 = (char *)sub_100BFCCD8((uint64_t)&v38, v25);
            v21 = __src;
            v13 = v37;
          }
          else
          {
            v26 = 0;
          }
          v29 = &v26[2 * v23];
          *(_WORD *)v29 = v10;
          v14 = v29 + 2;
          while (v13 != v21)
          {
            v30 = *--v13;
            *((_WORD *)v29 - 1) = v30;
            v29 -= 2;
          }
          __src = v29;
          v37 = v14;
          v38 = (unint64_t)&v26[2 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v37 = v10;
          v14 = v13 + 1;
        }
        v37 = v14;
      }
      ++v10;
      v8 += v6 == 63;
      if (v6 == 63)
        v7 = 0;
      else
        ++v7;
      v6 = v7;
    }
    while (v8 != (_QWORD *)v9 || v4 != v7);
  }
  v31 = (char *)(a1 + 24 * a2);
  if (v31 != (char *)&__p)
    sub_10186ADDC(v31, (char *)__p, (uint64_t)v40, ((char *)v40 - (_BYTE *)__p) >> 1);
  v32 = (char *)(a1 + 24 * a2 + 120);
  v33 = __src;
  if (v32 != (char *)&__src)
  {
    sub_10186ADDC(v32, (char *)__src, (uint64_t)v37, ((char *)v37 - (_BYTE *)__src) >> 1);
    v33 = __src;
  }
  if (v33)
  {
    v37 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
}

void sub_10186298C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018629C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int16 **v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _QWORD *v12;
  unsigned __int16 **v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  _QWORD *v16;
  NSObject *v17;
  void **v18;
  uint64_t result;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD v30[10];
  char v31;
  uint64_t v32;
  _BYTE buf[12];
  char v34;
  int v35;
  _BYTE *v36;
  void *__p[2];
  unsigned __int8 v38;

  v1 = 0;
  v24 = a1 + 120;
  do
  {
    v3 = dword_101CE90C8[v1];
    sub_100263E50((uint64_t)v28);
    sub_10186237C(v3, (uint64_t)__p);
    if ((v38 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v38 & 0x80u) == 0)
      v5 = v38;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(&v29, (uint64_t)v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)",", 1);
    v8 = (_QWORD *)std::ostream::operator<<(v7, v3);
    sub_100263F7C(v8, (uint64_t)",deny,", 6);
    if ((char)v38 < 0)
      operator delete(__p[0]);
    v9 = (unsigned __int16 **)(a1 + 24 * v3);
    v10 = *v9;
    v11 = v9[1];
    while (v10 != v11)
    {
      v12 = (_QWORD *)std::ostream::operator<<(&v29, *v10);
      sub_100263F7C(v12, (uint64_t)",", 1);
      ++v10;
    }
    sub_100263F7C(&v29, (uint64_t)"clear,", 6);
    v13 = (unsigned __int16 **)(v24 + 24 * v3);
    v14 = *v13;
    v15 = v13[1];
    while (v14 != v15)
    {
      v16 = (_QWORD *)std::ostream::operator<<(&v29, *v14);
      sub_100263F7C(v16, (uint64_t)",", 1);
      ++v14;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(__p, v30);
      v18 = __p;
      if ((v38 & 0x80u) != 0)
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#rti,%s", buf, 0xCu);
      if ((char)v38 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v20 = qword_1022A0078;
      std::stringbuf::str(buf, v30);
      if (v34 >= 0)
        v21 = buf;
      else
        v21 = *(_BYTE **)buf;
      v35 = 136315138;
      v36 = v21;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 2, "#rti,%s", (const char *)&v35);
      v23 = v22;
      if (v34 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "auto qmi::pds::BlockListSv::log()::(anonymous class)::operator()(GnssConstellation) const", "%s\n", v23);
      if (v23 != (char *)__p)
        free(v23);
    }
    v28[0] = v2;
    *(_QWORD *)((char *)v28 + *(_QWORD *)(v2 - 24)) = v26;
    v29 = v27;
    if (v31 < 0)
      operator delete((void *)v30[8]);
    std::streambuf::~streambuf(v30);
    result = std::ios::~ios(&v32);
    ++v1;
  }
  while (v1 != 5);
  return result;
}

void sub_101862D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  *(uint64_t *)((char *)&a18 + *(_QWORD *)(v35 - 24)) = a15;
  a20 = a16;
  if (a34 < 0)
    operator delete(__p);
  std::streambuf::~streambuf(v34);
  std::ios::~ios(a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_101862E2C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v5;
  _QWORD *result;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 0:
      v4 = "EarlyStart";
      goto LABEL_20;
    case 1:
      v4 = "CpGsmStart";
      goto LABEL_20;
    case 2:
      v4 = "CpWcdmaStart";
      goto LABEL_20;
    case 3:
      v4 = "SuplWcdmaStart";
      goto LABEL_20;
    case 4:
      v4 = "CpLteStart";
      goto LABEL_20;
    case 5:
      v4 = "SuplLteStart";
      goto LABEL_20;
    case 6:
      v4 = "UnknownEmergencyEvent";
      goto LABEL_20;
    case 7:
      v4 = "Cp1xStart";
      goto LABEL_20;
    case 8:
      v4 = "Supl1xStart";
      goto LABEL_20;
    case 9:
      v4 = "Done";
      goto LABEL_20;
    case 10:
      v4 = "CpNrStart";
      goto LABEL_20;
    case 11:
      v4 = "SuplNrStart";
LABEL_20:
      result = sub_1015A2E04(a2, v4);
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid emergency event value,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v9[0] = 67109120;
        v9[1] = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid emergency event value,%d", v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::EmergencyEvent)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      result = sub_1015A2E04(a2, "UnknownEvent");
      break;
  }
  return result;
}

_QWORD *sub_101863204@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v5;
  _QWORD *result;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 0:
      v4 = "Success";
      goto LABEL_18;
    case 1:
      v4 = "InProgress";
      goto LABEL_18;
    case 2:
      v4 = "Failure";
      goto LABEL_18;
    case 3:
      v4 = "Timeout";
      goto LABEL_18;
    case 4:
      v4 = "UserEnded";
      goto LABEL_18;
    case 5:
      v4 = "BadParam";
      goto LABEL_18;
    case 6:
      v4 = "Offline";
      goto LABEL_18;
    case 7:
      v4 = "Locked";
      goto LABEL_18;
    case 8:
      v4 = "E911InProgress";
      goto LABEL_18;
    case 9:
      v4 = "Max";
LABEL_18:
      result = sub_1015A2E04(a2, v4);
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid SessionFixStatus value,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v9[0] = 67109120;
        v9[1] = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid SessionFixStatus value,%d", v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "std::string qmi::pds::to_string(SessionFixStatus)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      result = sub_1015A2E04(a2, "UnknownSessionStatus");
      break;
  }
  return result;
}

_QWORD *sub_10186358C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 2:
      v4 = "kCpiTimeTypeAge";
      return sub_1015A2E04(a2, v4);
    case 1:
      v4 = "kCpiTimeTypeGps";
      return sub_1015A2E04(a2, v4);
    case 0:
      v4 = "kCpiTimeTypeUtc";
      return sub_1015A2E04(a2, v4);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid CpiTimeType value,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid CpiTimeType value,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::CpiTimeType)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1015A2E04(a2, "UnknownCpiTimeType");
}

_QWORD *sub_1018637E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  char *v4;
  NSObject *v5;
  _QWORD *result;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = a1;
  switch(a1)
  {
    case 1:
      v4 = "kNILRRequestMSB";
      goto LABEL_12;
    case 2:
      v4 = "kNILRRequestMSA";
      goto LABEL_12;
    case 4:
      v4 = "kNILRRequestOTDOA_MSA";
      goto LABEL_12;
    case 8:
      v4 = "kNILRRequestECID";
LABEL_12:
      result = sub_1015A2E04(a2, v4);
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v11 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid NILRRequestType value,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v9[0] = 67109120;
        v9[1] = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid NILRRequestType value,%d", v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::NILRRequestType)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      result = sub_1015A2E04(a2, "UnknownNILRRequestType");
      break;
  }
  return result;
}

_QWORD *sub_101863A88@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 0:
      v4 = "kPdsModemSubscriptionId0";
      return sub_1015A2E04(a2, v4);
    case 1:
      v4 = "kPdsModemSubscriptionId1";
      return sub_1015A2E04(a2, v4);
    case 2:
      v4 = "kPdsModemSubscriptionId2";
      return sub_1015A2E04(a2, v4);
    case 3:
      v4 = "kPdsModemSubscriptionId3";
      return sub_1015A2E04(a2, v4);
    default:
      if (a1 == 255)
      {
        v4 = "kPdsModemSubscriptionIdInvalid";
        return sub_1015A2E04(a2, v4);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v6 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v11 = a1;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid SubscriptionId value,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v9[0] = 67109120;
          v9[1] = a1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid SubscriptionId value,%d", v9);
          v8 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::SubscriptionId)", "%s\n", v7);
          if (v8 != buf)
            free(v8);
        }
        return sub_1015A2E04(a2, "UnknownSubscriptionId");
      }
  }
}

_QWORD *sub_101863D4C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v5;
  _QWORD *result;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 0:
      v4 = "QMI_RELIABILITY_NOT_SET";
      goto LABEL_13;
    case 1:
      v4 = "QMI_RELIABILITY_VERY_LOW";
      goto LABEL_13;
    case 2:
      v4 = "QMI_RELIABILITY_LOW";
      goto LABEL_13;
    case 3:
      v4 = "QMI_RELIABILITY_MED";
      goto LABEL_13;
    case 4:
      v4 = "QMI_RELIABILITY_HIGH";
LABEL_13:
      result = sub_1015A2E04(a2, v4);
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid  QmiReliabilityIndication value,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v9[0] = 67109120;
        v9[1] = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid  QmiReliabilityIndication value,%d", v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::QmiReliabilityIndication)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      result = sub_1015A2E04(a2, "UnknownQmiReliabilityIndication");
      break;
  }
  return result;
}

char *sub_10186400C@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x21u);
  result = sub_10186AEDC((uint64_t)a2, 1);
  *result = a1 != 0;
  if (a1)
  {
    result = sub_10186B0BC((uint64_t)a2, 16);
    *(_QWORD *)result = a1;
  }
  return result;
}

void sub_101864064(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186407C(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, qmi::MutableMessageBase *a8@<X8>, int a9)
{
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;

  qmi::MutableMessageBase::MutableMessageBase(a8, 0x34u);
  if (a2 | a1 | a3 | a4 | a5 | a6 | a7)
  {
    if (a2)
      *(_DWORD *)sub_10186B2A4((uint64_t)a8, 19) = a2;
    if (a3)
      *(_DWORD *)sub_10186B48C((uint64_t)a8, 20) = a3;
    if (a4)
      *(_DWORD *)sub_10186B674((uint64_t)a8, 21) = a4;
    if (a5)
      *(_DWORD *)sub_10186B85C((uint64_t)a8, 22) = a5;
    if (a6)
      *(_DWORD *)sub_10186BA44((uint64_t)a8, 23) = a6;
    if (a7)
      *(_DWORD *)sub_10186BC2C((uint64_t)a8, 24) = a7;
    if (a9 && sub_10075FA90())
      *(_DWORD *)sub_10186BE14((uint64_t)a8, 25) = a9;
    if (a1)
      *(_DWORD *)sub_10186BFFC((uint64_t)a8, 17) = a1;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v19 = 68289026;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,invalid params for reset GPS service data\"}", (uint8_t *)&v19, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    }
    v18 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v19 = 68289026;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,invalid params for reset GPS service data", "{\"msg%{public}.0s\":\"#bb.e,invalid params for reset GPS service data\"}", (uint8_t *)&v19, 0x12u);
    }
  }
}

void sub_1018642E4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864318@<X0>(char a1@<W0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, qmi::MutableMessageBase *a5@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a5, 0x2Au);
  result = sub_10186C1E4((uint64_t)a5, 1);
  *result = a1;
  result[1] = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  return result;
}

void sub_101864378(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186438C@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x31u);
  result = sub_10186C46C((uint64_t)a2, 1);
  *result = a1;
  return result;
}

void sub_1018643C8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1018643DC@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, qmi::MutableMessageBase *a5@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a5, 0x3Du);
  result = sub_10186C64C((uint64_t)a5, 1);
  *(_QWORD *)result = a1;
  *((_DWORD *)result + 2) = a2;
  result[12] = a3;
  result[13] = a4;
  return result;
}

void sub_101864440(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864454@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, qmi::MutableMessageBase *a4@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a4, 0x53u);
  result = sub_10186C8C4((uint64_t)a4, 1);
  *(_DWORD *)result = a1;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  return result;
}

void sub_1018644A4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1018644B8@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x85u);
  result = sub_10186CB38((uint64_t)a2, 1);
  *result = a1;
  return result;
}

void sub_1018644F4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864508@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x87u);
  result = sub_10186CD18((uint64_t)a2, 1);
  *(_QWORD *)result = a1;
  return result;
}

void sub_101864544(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864558@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x57u);
  *(_DWORD *)sub_10186CF00((uint64_t)a2, 16) = *(_DWORD *)a1;
  *(_DWORD *)sub_10186D0E8((uint64_t)a2, 17) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)sub_10186D2D0((uint64_t)a2, 18) = *(_DWORD *)(a1 + 8);
  *sub_10186D4B8((uint64_t)a2, 19) = *(_BYTE *)(a1 + 12);
  *(_DWORD *)sub_10186D698((uint64_t)a2, 20) = *(_DWORD *)(a1 + 16);
  result = sub_10186D880((uint64_t)a2, 21);
  *(_DWORD *)result = *(_DWORD *)(a1 + 20);
  if (*(_BYTE *)(a1 + 24))
  {
    *(_DWORD *)sub_10186DA68((uint64_t)a2, 22) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)sub_10186DC50((uint64_t)a2, 23) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)sub_10186DE38((uint64_t)a2, 24) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)sub_10186E020((uint64_t)a2, 25) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)sub_10186E208((uint64_t)a2, 26) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)sub_10186E3F0((uint64_t)a2, 27) = *(_DWORD *)(a1 + 48);
    *sub_10186E5D8((uint64_t)a2, 28) = *(_BYTE *)(a1 + 52);
    result = sub_10186E7B8((uint64_t)a2, 29);
    *result = *(_BYTE *)(a1 + 53);
    if (*(_BYTE *)(a1 + 54))
    {
      result = sub_10186E998((uint64_t)a2, 37);
      *(_DWORD *)result = *(_DWORD *)(a1 + 56);
    }
  }
  return result;
}

void sub_1018646C0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

float *sub_10186470C@<X0>(int a1@<W0>, uint64_t a2@<X1>, qmi::MutableMessageBase *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  char *v10;
  float *result;

  qmi::MutableMessageBase::MutableMessageBase(a3, 0x8Eu);
  v10 = sub_10186EB80((uint64_t)a3, 1);
  *(_DWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  result = (float *)sub_10186EDD0((uint64_t)a3, 2);
  *result = a4;
  result[1] = a5;
  return result;
}

void sub_101864778(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864790@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, qmi::MutableMessageBase *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char *v12;
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a4, 0x97u);
  v12 = sub_10186F020((uint64_t)a4, 1);
  *(_DWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  result = sub_10186F20C((uint64_t)a4, 2);
  *(_DWORD *)result = a3;
  *((float *)result + 1) = a5;
  *((float *)result + 2) = a6;
  return result;
}

void sub_101864804(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186481C@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x96u);
  result = sub_10186F400((uint64_t)a2, 1);
  *(_DWORD *)result = a1;
  return result;
}

void sub_101864858(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186486C@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, qmi::MutableMessageBase *a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, float a13@<S3>, float a14@<S4>, float a15@<S5>, float a16@<S6>, float a17@<S7>, char a18, char a19)
{
  char *v36;
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a9, 0x38u);
  *(_QWORD *)sub_10186F5E8((uint64_t)a9, 16) = a2;
  *(double *)sub_10186F7D0((uint64_t)a9, 17) = a10;
  *(double *)sub_10186F9B8((uint64_t)a9, 18) = a11;
  *(float *)sub_10186FBA0((uint64_t)a9, 19) = a12;
  if (a13 > 0.0)
    *(float *)sub_10186FD88((uint64_t)a9, 21) = a13;
  *(float *)sub_10186FF70((uint64_t)a9, 22) = a14;
  *sub_101870158((uint64_t)a9, 23) = a18;
  *sub_101870338((uint64_t)a9, 24) = a19;
  *sub_101870518((uint64_t)a9, 25) = a5;
  *sub_1018706F8((uint64_t)a9, 26) = a1;
  v36 = sub_1018708D8((uint64_t)a9, 27);
  *v36 = a3;
  v36[1] = a4;
  result = sub_101870B10((uint64_t)a9, 28);
  *result = a6;
  result[1] = a7;
  result[2] = a8;
  if (a15 > 0.0 && a16 > 0.0)
  {
    result = sub_101870D70((uint64_t)a9, 29);
    *(float *)result = a15;
    *((float *)result + 1) = a16;
    *((float *)result + 2) = a17;
  }
  return result;
}

void sub_101864A14(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864A58@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x5557u);
  result = sub_101870F64((uint64_t)a2, 1);
  *result = a1;
  return result;
}

void sub_101864A94(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864AA8@<X0>(char a1@<W0>, __int16 a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, qmi::MutableMessageBase *a5@<X8>)
{
  char *v10;
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a5, 0x27u);
  v10 = sub_101871144((uint64_t)a5, 1);
  *v10 = a1;
  v10[1] = 0;
  *((_DWORD *)v10 + 1) = 0;
  *(_WORD *)sub_1018713A8((uint64_t)a5, 16) = a2;
  *sub_101871590((uint64_t)a5, 17) = a3;
  result = sub_101871770((uint64_t)a5, 18);
  *(_QWORD *)result = a4;
  return result;
}

void sub_101864B38(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864B58@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x40u);
  result = sub_101871958((uint64_t)a2, 16);
  *result = a1;
  return result;
}

void sub_101864B94(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864BA8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, __int16 a4@<W3>, __int16 a5@<W4>, qmi::MutableMessageBase *a6@<X8>, float a7@<S0>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a6, 0x61u);
  result = sub_101871B38((uint64_t)a6, 1);
  *(_DWORD *)result = a1;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  *((float *)result + 3) = a7;
  *((_WORD *)result + 8) = a4;
  *((_WORD *)result + 9) = a5;
  return result;
}

void sub_101864C20(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101864C34(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, qmi::MutableMessageBase *a9@<X8>, int *a10, int *a11, int *a12, int *a13, uint64_t a14, char *a15, char *a16, char *a17, char *a18, char *a19, char *a20,char *a21,char *a22,char *a23,char *a24,char *a25,_DWORD *a26,_DWORD *a27,char *a28,_BYTE *a29,_QWORD *a30)
{
  char *v33;
  NSObject *v34;
  int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  NSObject *v39;
  int v40;
  unint64_t v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  NSObject *v45;
  int v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  char *v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  int v57;
  NSObject *v58;
  int v59;
  NSObject *v60;
  int v61;
  NSObject *v62;
  int v63;
  char *v64;
  char *v65;
  unint64_t v66;
  NSObject *v67;
  int v68;
  unint64_t v69;
  int v70;
  const char *v71;
  uint8_t *v72;
  _QWORD *v73;
  NSObject *v74;
  int v75;
  unint64_t v76;
  NSObject *v77;
  int v78;
  int v79;
  const char *v80;
  uint8_t *v81;
  NSObject *v82;
  int v83;
  NSObject *v84;
  int v85;
  NSObject *v86;
  int v87;
  NSObject *v88;
  int v89;
  NSObject *v90;
  int v91;
  NSObject *v92;
  int v93;
  NSObject *v94;
  int v95;
  NSObject *v96;
  int v97;
  NSObject *v98;
  int v99;
  NSObject *v100;
  int v101;
  NSObject *v102;
  uint64_t i;
  NSObject *v104;
  int v105;
  int v106;
  const char *v107;
  uint8_t *v108;
  uint64_t v109;
  unint64_t *v110;
  _BYTE *v111;
  char *v112;
  __int16 v113;
  unint64_t v114;
  _BYTE *v115;
  unint64_t v116;
  _BYTE *v117;
  unint64_t v118;
  unint64_t v119;
  size_t v120;
  char *v121;
  char *v122;
  _BYTE *v123;
  _BYTE *v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  unint64_t v129;
  unint64_t v130;
  size_t v131;
  void *v132;
  char *v133;
  char *v134;
  _BYTE *v135;
  _BYTE *v136;
  char v137;
  NSObject *v138;
  int v139;
  unint64_t v140;
  NSObject *v141;
  int v142;
  int v143;
  const char *v144;
  uint8_t *v145;
  NSObject *v146;
  int v147;
  char *v148;
  char *v149;
  unint64_t v150;
  NSObject *v151;
  int v152;
  unint64_t v153;
  int v154;
  const char *v155;
  uint8_t *v156;
  _QWORD *v157;
  NSObject *v158;
  int v159;
  unint64_t v160;
  NSObject *v161;
  int v162;
  int v163;
  const char *v164;
  uint8_t *v165;
  NSObject *v166;
  int v167;
  NSObject *v168;
  int v169;
  NSObject *v170;
  int v171;
  NSObject *v172;
  int v173;
  NSObject *v174;
  int v175;
  char *v176;
  char *v177;
  unint64_t v178;
  NSObject *v179;
  int v180;
  unint64_t v181;
  int v182;
  const char *v183;
  uint8_t *v184;
  _QWORD *v185;
  NSObject *v186;
  int v187;
  unint64_t v188;
  NSObject *v189;
  int v190;
  int v191;
  const char *v192;
  uint8_t *v193;
  NSObject *v194;
  int v195;
  NSObject *v196;
  int v197;
  NSObject *v198;
  int v199;
  char *v200;
  char *v201;
  unint64_t v202;
  NSObject *v203;
  int v204;
  unint64_t v205;
  int v206;
  const char *v207;
  uint8_t *v208;
  _QWORD *v209;
  NSObject *v210;
  int v211;
  unint64_t v212;
  NSObject *v213;
  int v214;
  int v215;
  const char *v216;
  uint8_t *v217;
  NSObject *v218;
  int v219;
  NSObject *v220;
  int v221;
  NSObject *v222;
  int v223;
  NSObject *v224;
  int v225;
  NSObject *v226;
  int v227;
  NSObject *v228;
  int v229;
  NSObject *v230;
  int v231;
  NSObject *v232;
  int v233;
  int v234;
  const char *v235;
  uint8_t *v236;
  int v237;
  const char *v238;
  uint8_t *v239;
  int v240;
  const char *v241;
  uint8_t *v242;
  int v243;
  const char *v244;
  uint8_t *v245;
  int v246;
  const char *v247;
  uint8_t *v248;
  int v249;
  const char *v250;
  uint8_t *v251;
  int v252;
  const char *v253;
  uint8_t *v254;
  int v255;
  const char *v256;
  uint8_t *v257;
  int v258;
  const char *v259;
  uint8_t *v260;
  int v261;
  const char *v262;
  uint8_t *v263;
  int v264;
  const char *v265;
  uint8_t *v266;
  int v267;
  const char *v268;
  uint8_t *v269;
  int v270;
  const char *v271;
  uint8_t *v272;
  int v273;
  const char *v274;
  uint8_t *v275;
  int v276;
  const char *v277;
  uint8_t *v278;
  int v279;
  const char *v280;
  uint8_t *v281;
  int v282;
  const char *v283;
  uint8_t *v284;
  int v285;
  const char *v286;
  uint8_t *v287;
  const char *v288;
  uint8_t *v289;
  int v290;
  const char *v291;
  uint8_t *v292;
  int v293;
  const char *v294;
  uint8_t *v295;
  int v296;
  const char *v297;
  uint8_t *v298;
  int v299;
  const char *v300;
  uint8_t *v301;
  int v302;
  const char *v303;
  uint8_t *v304;
  int v305;
  const char *v306;
  uint8_t *v307;
  int v308;
  const char *v309;
  uint8_t *v310;
  int v311;
  const char *v312;
  uint8_t *v313;
  int v314;
  const char *v315;
  uint8_t *v316;
  int v317;
  const char *v318;
  uint8_t *v319;
  int v320;
  const char *v321;
  uint8_t *v322;
  int v323;
  const char *v324;
  uint8_t *v325;
  int v326;
  const char *v327;
  uint8_t *v328;
  int v329;
  const char *v330;
  uint8_t *v331;
  int v332;
  const char *v333;
  uint8_t *v334;
  int v335;
  const char *v336;
  uint8_t *v337;
  int v338;
  const char *v339;
  uint8_t *v340;
  int v341;
  const char *v342;
  uint8_t *v343;
  int v344;
  const char *v345;
  uint8_t *v346;
  int v347;
  const char *v348;
  uint8_t *v349;
  int v350;
  const char *v351;
  uint8_t *v352;
  int v356;
  uint64_t v357;
  int v360;
  int v361;
  __int16 v362;
  int v363;
  uint8_t buf[4];
  int v365;
  __int16 v366;
  int v367;

  v357 = qmi::MutableMessageBase::MutableMessageBase(a9, 0x3Cu);
  *sub_101871E80(v357, 1) = a1;
  v356 = a1;
  if (a1 && a3)
  {
    v33 = sub_101872060(v357, 20);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v34 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v35 = *((_DWORD *)a25 + 2) - *(_DWORD *)a25;
      *(_DWORD *)buf = 67109120;
      v365 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Supl,suplUrl.size,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v234 = *((_DWORD *)a25 + 2) - *(_DWORD *)a25;
      v360 = 67109120;
      v361 = v234;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplUrl.size,%d", &v360);
      v236 = (uint8_t *)v235;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v235);
      if (v236 != buf)
        free(v236);
    }
    v36 = *(char **)a25;
    v37 = (char *)*((_QWORD *)a25 + 1);
    if (v37 == *(char **)a25)
    {
      v41 = 0;
    }
    else
    {
      v38 = 0;
      do
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v39 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v40 = *(unsigned __int8 *)(*(_QWORD *)a25 + v38);
          *(_DWORD *)buf = 67109376;
          v365 = v38;
          v366 = 1024;
          v367 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "suplUrl[%d],%x", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v42 = *(unsigned __int8 *)(*(_QWORD *)a25 + v38);
          v360 = 67109376;
          v361 = v38;
          v362 = 1024;
          v363 = v42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "suplUrl[%d],%x", &v360, 14);
          v44 = (uint8_t *)v43;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
        ++v38;
        v36 = *(char **)a25;
        v37 = (char *)*((_QWORD *)a25 + 1);
        v41 = (unint64_t)&v37[-*(_QWORD *)a25];
      }
      while (v41 > v38);
    }
    if (v33 != a25)
      sub_100A38C94(v33, v36, v37, v41);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v45 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v46 = *((_DWORD *)v33 + 2) - *(_DWORD *)v33;
      *(_DWORD *)buf = 67109120;
      v365 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplUrl.size,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v237 = *((_DWORD *)v33 + 2) - *(_DWORD *)v33;
      v360 = 67109120;
      v361 = v237;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplUrl.size,%d", &v360);
      v239 = (uint8_t *)v238;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v238);
      if (v239 != buf)
        free(v239);
    }
    if (*((_QWORD *)v33 + 1) != *(_QWORD *)v33)
    {
      v47 = 0;
      do
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v48 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v49 = *(unsigned __int8 *)(*(_QWORD *)v33 + v47);
          *(_DWORD *)buf = 67109376;
          v365 = v47;
          v366 = 1024;
          v367 = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "tlv.suplUrl[%d],%x", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v50 = *(unsigned __int8 *)(*(_QWORD *)v33 + v47);
          v360 = 67109376;
          v361 = v47;
          v362 = 1024;
          v363 = v50;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "tlv.suplUrl[%d],%x", &v360, 14);
          v52 = (uint8_t *)v51;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v51);
          if (v52 != buf)
            free(v52);
        }
        ++v47;
      }
      while (*((_QWORD *)v33 + 1) - *(_QWORD *)v33 > v47);
    }
  }
  if (a1 && a2)
  {
    v53 = sub_1018723D8(v357, 17);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v54 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v55 = *a5;
      *(_DWORD *)buf = 67109120;
      v365 = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "Supl,validMask,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v240 = *a5;
      v360 = 67109120;
      v361 = v240;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,validMask,%d", &v360);
      v242 = (uint8_t *)v241;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v241);
      if (v242 != buf)
        free(v242);
    }
    *(_DWORD *)v53 = *a5;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v56 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v57 = *(_DWORD *)v53;
      *(_DWORD *)buf = 67109120;
      v365 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "Supl,tlv.validMask,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v243 = *(_DWORD *)v53;
      v360 = 67109120;
      v361 = v243;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.validMask,%d", &v360);
      v245 = (uint8_t *)v244;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v244);
      if (v245 != buf)
        free(v245);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v58 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v59 = *a6;
      *(_DWORD *)buf = 67109120;
      v365 = v59;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Supl,suplPrivacy,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v246 = *a6;
      v360 = 67109120;
      v361 = v246;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplPrivacy,%d", &v360);
      v248 = (uint8_t *)v247;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v247);
      if (v248 != buf)
        free(v248);
    }
    v53[4] = *a6;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v60 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v61 = v53[4];
      *(_DWORD *)buf = 67109120;
      v365 = v61;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplPrivacy,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v249 = v53[4];
      v360 = 67109120;
      v361 = v249;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplPrivacy,%d", &v360);
      v251 = (uint8_t *)v250;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v250);
      if (v251 != buf)
        free(v251);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v62 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v63 = *((_DWORD *)a7 + 2) - *(_DWORD *)a7;
      *(_DWORD *)buf = 67109120;
      v365 = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "Supl,suplHash.size,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v252 = *((_DWORD *)a7 + 2) - *(_DWORD *)a7;
      v360 = 67109120;
      v361 = v252;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplHash.size,%d", &v360);
      v254 = (uint8_t *)v253;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v253);
      if (v254 != buf)
        free(v254);
    }
    v64 = *(char **)a7;
    v65 = (char *)*((_QWORD *)a7 + 1);
    if (v65 == *(char **)a7)
    {
      v69 = 0;
    }
    else
    {
      v66 = 0;
      do
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v67 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v68 = *(unsigned __int8 *)(*(_QWORD *)a7 + v66);
          *(_DWORD *)buf = 67109376;
          v365 = v66;
          v366 = 1024;
          v367 = v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "suplHash[%d],%x", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v70 = *(unsigned __int8 *)(*(_QWORD *)a7 + v66);
          v360 = 67109376;
          v361 = v66;
          v362 = 1024;
          v363 = v70;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "suplHash[%d],%x", &v360, 14);
          v72 = (uint8_t *)v71;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v71);
          if (v72 != buf)
            free(v72);
        }
        ++v66;
        v64 = *(char **)a7;
        v65 = (char *)*((_QWORD *)a7 + 1);
        v69 = (unint64_t)&v65[-*(_QWORD *)a7];
      }
      while (v69 > v66);
    }
    v73 = v53 + 8;
    if (v53 + 8 != a7)
      sub_100A38C94((_QWORD *)v53 + 1, v64, v65, v69);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v74 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v75 = *((_DWORD *)v53 + 4) - *((_DWORD *)v53 + 2);
      *(_DWORD *)buf = 67109120;
      v365 = v75;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplHash.size,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v255 = *((_DWORD *)v53 + 4) - *((_DWORD *)v53 + 2);
      v360 = 67109120;
      v361 = v255;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplHash.size,%d", &v360);
      v257 = (uint8_t *)v256;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v256);
      if (v257 != buf)
        free(v257);
    }
    if (*((_QWORD *)v53 + 2) != *((_QWORD *)v53 + 1))
    {
      v76 = 0;
      do
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v77 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v78 = *(unsigned __int8 *)(*v73 + v76);
          *(_DWORD *)buf = 67109376;
          v365 = v76;
          v366 = 1024;
          v367 = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "tlv.suplHash[%d],%x", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v79 = *(unsigned __int8 *)(*v73 + v76);
          v360 = 67109376;
          v361 = v76;
          v362 = 1024;
          v363 = v79;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "tlv.suplHash[%d],%x", &v360, 14);
          v81 = (uint8_t *)v80;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v80);
          if (v81 != buf)
            free(v81);
        }
        ++v76;
      }
      while (*((_QWORD *)v53 + 2) - *((_QWORD *)v53 + 1) > v76);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v82 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v83 = *a8;
      *(_DWORD *)buf = 67109120;
      v365 = v83;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "Supl,suplMode,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v258 = *a8;
      v360 = 67109120;
      v361 = v258;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplMode,%d", &v360);
      v260 = (uint8_t *)v259;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v259);
      if (v260 != buf)
        free(v260);
    }
    v53[32] = *a8;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v84 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v85 = v53[32];
      *(_DWORD *)buf = 67109120;
      v365 = v85;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplMode,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v261 = v53[32];
      v360 = 67109120;
      v361 = v261;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplMode,%d", &v360);
      v263 = (uint8_t *)v262;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v262);
      if (v263 != buf)
        free(v263);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v86 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v87 = *a10;
      *(_DWORD *)buf = 67109120;
      v365 = v87;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "Supl,suplSessionId,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v264 = *a10;
      v360 = 67109120;
      v361 = v264;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplSessionId,%d", &v360);
      v266 = (uint8_t *)v265;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v265);
      if (v266 != buf)
        free(v266);
    }
    *((_DWORD *)v53 + 9) = *a10;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v88 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v89 = *((_DWORD *)v53 + 9);
      *(_DWORD *)buf = 67109120;
      v365 = v89;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSessionId,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v267 = *((_DWORD *)v53 + 9);
      v360 = 67109120;
      v361 = v267;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplSessionId,%d", &v360);
      v269 = (uint8_t *)v268;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v268);
      if (v269 != buf)
        free(v269);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v90 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v91 = *a11;
      *(_DWORD *)buf = 67109120;
      v365 = v91;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv4Port,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v270 = *a11;
      v360 = 67109120;
      v361 = v270;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplSlpServerIpv4Port,%d", &v360);
      v272 = (uint8_t *)v271;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v271);
      if (v272 != buf)
        free(v272);
    }
    *((_DWORD *)v53 + 10) = *a11;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v92 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v93 = *((_DWORD *)v53 + 10);
      *(_DWORD *)buf = 67109120;
      v365 = v93;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv4Port,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v273 = *((_DWORD *)v53 + 10);
      v360 = 67109120;
      v361 = v273;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplSlpServerIpv4Port,%d", &v360);
      v275 = (uint8_t *)v274;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v274);
      if (v275 != buf)
        free(v275);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v94 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v95 = *a12;
      *(_DWORD *)buf = 67109120;
      v365 = v95;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv4Addr,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v276 = *a12;
      v360 = 67109120;
      v361 = v276;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplSlpServerIpv4Addr,%d", &v360);
      v278 = (uint8_t *)v277;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v277);
      if (v278 != buf)
        free(v278);
    }
    *((_DWORD *)v53 + 11) = *a12;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v96 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v97 = *((_DWORD *)v53 + 11);
      *(_DWORD *)buf = 67109120;
      v365 = v97;
      _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv4Addr,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v279 = *((_DWORD *)v53 + 11);
      v360 = 67109120;
      v361 = v279;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplSlpServerIpv4Addr,%d", &v360);
      v281 = (uint8_t *)v280;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v280);
      if (v281 != buf)
        free(v281);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v98 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v99 = *a13;
      *(_DWORD *)buf = 67109120;
      v365 = v99;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv6Port,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v282 = *a13;
      v360 = 67109120;
      v361 = v282;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplSlpServerIpv6Port,%d", &v360);
      v284 = (uint8_t *)v283;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v283);
      if (v284 != buf)
        free(v284);
    }
    *((_DWORD *)v53 + 12) = *a13;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v100 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v101 = *((_DWORD *)v53 + 12);
      *(_DWORD *)buf = 67109120;
      v365 = v101;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv6Port,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v285 = *((_DWORD *)v53 + 12);
      v360 = 67109120;
      v361 = v285;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplSlpServerIpv6Port,%d", &v360);
      v287 = (uint8_t *)v286;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v286);
      if (v287 != buf)
        free(v287);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v102 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v365 = 8;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv6Addr.size,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v360 = 67109120;
      v361 = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplSlpServerIpv6Addr.size,%d", &v360);
      v289 = (uint8_t *)v288;
      sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v288);
      if (v289 != buf)
        free(v289);
    }
    for (i = 0; i != 8; ++i)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v104 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v105 = *(unsigned __int16 *)(a14 + 2 * i);
        *(_DWORD *)buf = 67109376;
        v365 = i;
        v366 = 1024;
        v367 = v105;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "suplSlpServerIpv6Addr[%d],%x", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v106 = *(unsigned __int16 *)(a14 + 2 * i);
        v360 = 67109376;
        v361 = i;
        v362 = 1024;
        v363 = v106;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "suplSlpServerIpv6Addr[%d],%x", &v360, 14);
        v108 = (uint8_t *)v107;
        sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v107);
        if (v108 != buf)
          free(v108);
      }
    }
    v109 = 0;
    v110 = (unint64_t *)(v53 + 56);
    v111 = (_BYTE *)*((_QWORD *)v53 + 8);
    v112 = v53;
    while (1)
    {
      v113 = *(_WORD *)(a14 + 2 * v109);
      v114 = *((_QWORD *)v53 + 9);
      if ((unint64_t)v111 >= v114)
      {
        v116 = *v110;
        v117 = &v111[-*v110];
        v118 = (unint64_t)(v117 + 1);
        if ((uint64_t)(v117 + 1) < 0)
          sub_100259694();
        v119 = v114 - v116;
        if (2 * v119 > v118)
          v118 = 2 * v119;
        if (v119 >= 0x3FFFFFFFFFFFFFFFLL)
          v120 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v120 = v118;
        if (v120)
          v121 = (char *)operator new(v120);
        else
          v121 = 0;
        v122 = &v117[(_QWORD)v121];
        v123 = &v117[(_QWORD)v121];
        *v123 = v113;
        v115 = v123 + 1;
        if (v111 != (_BYTE *)v116)
        {
          v124 = &v111[~v116];
          do
          {
            v125 = *--v111;
            (v124--)[(_QWORD)v121] = v125;
          }
          while (v111 != (_BYTE *)v116);
          v111 = (_BYTE *)*v110;
          v122 = v121;
        }
        v53 = v112;
        *((_QWORD *)v112 + 7) = v122;
        *((_QWORD *)v112 + 8) = v115;
        *((_QWORD *)v112 + 9) = &v121[v120];
        if (v111)
          operator delete(v111);
      }
      else
      {
        *v111 = v113;
        v115 = v111 + 1;
      }
      *((_QWORD *)v53 + 8) = v115;
      v126 = *((_QWORD *)v53 + 9);
      if ((unint64_t)v115 >= v126)
      {
        v127 = *v110;
        v128 = &v115[-*v110];
        v129 = (unint64_t)(v128 + 1);
        if ((uint64_t)(v128 + 1) < 0)
          sub_100259694();
        v130 = v126 - v127;
        if (2 * v130 > v129)
          v129 = 2 * v130;
        if (v130 >= 0x3FFFFFFFFFFFFFFFLL)
          v131 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v131 = v129;
        if (v131)
          v132 = operator new(v131);
        else
          v132 = 0;
        v133 = &v128[(_QWORD)v132];
        v134 = (char *)v132 + v131;
        v135 = &v128[(_QWORD)v132];
        *v135 = HIBYTE(v113);
        v111 = v135 + 1;
        if (v115 == (_BYTE *)v127)
        {
          v53 = v112;
          *((_QWORD *)v112 + 7) = v133;
          *((_QWORD *)v112 + 8) = v111;
          *((_QWORD *)v112 + 9) = v134;
        }
        else
        {
          v136 = &v115[~v127];
          do
          {
            v137 = *--v115;
            (v136--)[(_QWORD)v132] = v137;
          }
          while (v115 != (_BYTE *)v127);
          v53 = v112;
          v115 = (_BYTE *)*((_QWORD *)v112 + 7);
          *((_QWORD *)v112 + 7) = v132;
          *((_QWORD *)v112 + 8) = v111;
          *((_QWORD *)v112 + 9) = v134;
          if (!v115)
            goto LABEL_205;
        }
        operator delete(v115);
      }
      else
      {
        *v115 = HIBYTE(v113);
        v111 = v115 + 1;
      }
LABEL_205:
      *((_QWORD *)v53 + 8) = v111;
      if (++v109 == 8)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v138 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v139 = *((_DWORD *)v53 + 16) - *((_DWORD *)v53 + 14);
          *(_DWORD *)buf = 67109120;
          v365 = v139;
          _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv6Addr.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v290 = *((_DWORD *)v53 + 16) - *((_DWORD *)v53 + 14);
          v360 = 67109120;
          v361 = v290;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplSlpServerIpv6Addr.size,%d", &v360);
          v292 = (uint8_t *)v291;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v291);
          if (v292 != buf)
            free(v292);
        }
        if (*((_QWORD *)v53 + 8) != *((_QWORD *)v53 + 7))
        {
          v140 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v141 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v142 = *(unsigned __int8 *)(*v110 + v140);
              *(_DWORD *)buf = 67109376;
              v365 = v140;
              v366 = 1024;
              v367 = v142;
              _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEBUG, "tlv.suplSlpServerIpv6Addr[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v143 = *(unsigned __int8 *)(*v110 + v140);
              v360 = 67109376;
              v361 = v140;
              v362 = 1024;
              v363 = v143;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "tlv.suplSlpServerIpv6Addr[%d],%x", &v360, 14);
              v145 = (uint8_t *)v144;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v144);
              if (v145 != buf)
                free(v145);
            }
            ++v140;
          }
          while (*((_QWORD *)v53 + 8) - *((_QWORD *)v53 + 7) > v140);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v146 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v147 = *((_DWORD *)a15 + 2) - *(_DWORD *)a15;
          *(_DWORD *)buf = 67109120;
          v365 = v147;
          _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerUrl.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v293 = *((_DWORD *)a15 + 2) - *(_DWORD *)a15;
          v360 = 67109120;
          v361 = v293;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplSlpServerUrl.size,%d", &v360);
          v295 = (uint8_t *)v294;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v294);
          if (v295 != buf)
            free(v295);
        }
        v148 = *(char **)a15;
        v149 = (char *)*((_QWORD *)a15 + 1);
        if (v149 == *(char **)a15)
        {
          v153 = 0;
        }
        else
        {
          v150 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v151 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v152 = *(unsigned __int8 *)(*(_QWORD *)a15 + v150);
              *(_DWORD *)buf = 67109376;
              v365 = v150;
              v366 = 1024;
              v367 = v152;
              _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "suplSlpServerUrl[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v154 = *(unsigned __int8 *)(*(_QWORD *)a15 + v150);
              v360 = 67109376;
              v361 = v150;
              v362 = 1024;
              v363 = v154;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "suplSlpServerUrl[%d],%x", &v360, 14);
              v156 = (uint8_t *)v155;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v155);
              if (v156 != buf)
                free(v156);
            }
            ++v150;
            v148 = *(char **)a15;
            v149 = (char *)*((_QWORD *)a15 + 1);
            v153 = (unint64_t)&v149[-*(_QWORD *)a15];
          }
          while (v153 > v150);
        }
        v157 = v53 + 80;
        if (v53 + 80 != a15)
          sub_100A38C94((_QWORD *)v53 + 10, v148, v149, v153);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v158 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v159 = *((_DWORD *)v53 + 22) - *((_DWORD *)v53 + 20);
          *(_DWORD *)buf = 67109120;
          v365 = v159;
          _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerUrl.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v296 = *((_DWORD *)v53 + 22) - *((_DWORD *)v53 + 20);
          v360 = 67109120;
          v361 = v296;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplSlpServerUrl.size,%d", &v360);
          v298 = (uint8_t *)v297;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v297);
          if (v298 != buf)
            free(v298);
        }
        if (*((_QWORD *)v53 + 11) != *((_QWORD *)v53 + 10))
        {
          v160 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v161 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v162 = *(unsigned __int8 *)(*v157 + v160);
              *(_DWORD *)buf = 67109376;
              v365 = v160;
              v366 = 1024;
              v367 = v162;
              _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_DEBUG, "tlv.suplSlpServerUrl[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v163 = *(unsigned __int8 *)(*v157 + v160);
              v360 = 67109376;
              v361 = v160;
              v362 = 1024;
              v363 = v163;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "tlv.suplSlpServerUrl[%d],%x", &v360, 14);
              v165 = (uint8_t *)v164;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v164);
              if (v165 != buf)
                free(v165);
            }
            ++v160;
          }
          while (*((_QWORD *)v53 + 11) - *((_QWORD *)v53 + 10) > v160);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v166 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v167 = *a16;
          *(_DWORD *)buf = 67109120;
          v365 = v167;
          _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEBUG, "Supl,suplDcs,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v299 = *a16;
          v360 = 67109120;
          v361 = v299;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplDcs,%d", &v360);
          v301 = (uint8_t *)v300;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v300);
          if (v301 != buf)
            free(v301);
        }
        v53[104] = *a16;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v168 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v169 = v53[104];
          *(_DWORD *)buf = 67109120;
          v365 = v169;
          _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplDcs,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v302 = v53[104];
          v360 = 67109120;
          v361 = v302;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplDcs,%d", &v360);
          v304 = (uint8_t *)v303;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v303);
          if (v304 != buf)
            free(v304);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v170 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v171 = *a17;
          *(_DWORD *)buf = 67109120;
          v365 = v171;
          _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEBUG, "Supl,suplRequestorIdDcs,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v305 = *a17;
          v360 = 67109120;
          v361 = v305;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplRequestorIdDcs,%d", &v360);
          v307 = (uint8_t *)v306;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v306);
          if (v307 != buf)
            free(v307);
        }
        v53[105] = *a17;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v172 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v173 = v53[105];
          *(_DWORD *)buf = 67109120;
          v365 = v173;
          _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplRequestorIdDcs,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v308 = v53[105];
          v360 = 67109120;
          v361 = v308;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplRequestorIdDcs,%d", &v360);
          v310 = (uint8_t *)v309;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v309);
          if (v310 != buf)
            free(v310);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v174 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v175 = *((_DWORD *)a18 + 2) - *(_DWORD *)a18;
          *(_DWORD *)buf = 67109120;
          v365 = v175;
          _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEBUG, "Supl,suplRequestorId.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v311 = *((_DWORD *)a18 + 2) - *(_DWORD *)a18;
          v360 = 67109120;
          v361 = v311;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplRequestorId.size,%d", &v360);
          v313 = (uint8_t *)v312;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v312);
          if (v313 != buf)
            free(v313);
        }
        v176 = *(char **)a18;
        v177 = (char *)*((_QWORD *)a18 + 1);
        if (v177 == *(char **)a18)
        {
          v181 = 0;
        }
        else
        {
          v178 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v179 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v180 = *(unsigned __int8 *)(*(_QWORD *)a18 + v178);
              *(_DWORD *)buf = 67109376;
              v365 = v178;
              v366 = 1024;
              v367 = v180;
              _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_DEBUG, "suplRequestorId[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v182 = *(unsigned __int8 *)(*(_QWORD *)a18 + v178);
              v360 = 67109376;
              v361 = v178;
              v362 = 1024;
              v363 = v182;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "suplRequestorId[%d],%x", &v360, 14);
              v184 = (uint8_t *)v183;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v183);
              if (v184 != buf)
                free(v184);
            }
            ++v178;
            v176 = *(char **)a18;
            v177 = (char *)*((_QWORD *)a18 + 1);
            v181 = (unint64_t)&v177[-*(_QWORD *)a18];
          }
          while (v181 > v178);
        }
        v185 = v53 + 112;
        if (v53 + 112 != a18)
          sub_100A38C94((_QWORD *)v53 + 14, v176, v177, v181);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v186 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v187 = *((_DWORD *)v53 + 30) - *((_DWORD *)v53 + 28);
          *(_DWORD *)buf = 67109120;
          v365 = v187;
          _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplRequestorId.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v314 = *((_DWORD *)v53 + 30) - *((_DWORD *)v53 + 28);
          v360 = 67109120;
          v361 = v314;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplRequestorId.size,%d", &v360);
          v316 = (uint8_t *)v315;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v315);
          if (v316 != buf)
            free(v316);
        }
        if (*((_QWORD *)v53 + 15) != *((_QWORD *)v53 + 14))
        {
          v188 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v189 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v190 = *(unsigned __int8 *)(*v185 + v188);
              *(_DWORD *)buf = 67109376;
              v365 = v188;
              v366 = 1024;
              v367 = v190;
              _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_DEBUG, "tlv.suplRequestorId[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v191 = *(unsigned __int8 *)(*v185 + v188);
              v360 = 67109376;
              v361 = v188;
              v362 = 1024;
              v363 = v191;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "tlv.suplRequestorId[%d],%x", &v360, 14);
              v193 = (uint8_t *)v192;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v192);
              if (v193 != buf)
                free(v193);
            }
            ++v188;
          }
          while (*((_QWORD *)v53 + 15) - *((_QWORD *)v53 + 14) > v188);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v194 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v195 = *a19;
          *(_DWORD *)buf = 67109120;
          v365 = v195;
          _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEBUG, "Supl,suplClientNameDcs,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v317 = *a19;
          v360 = 67109120;
          v361 = v317;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplClientNameDcs,%d", &v360);
          v319 = (uint8_t *)v318;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v318);
          if (v319 != buf)
            free(v319);
        }
        v53[136] = *a19;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v196 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v197 = v53[136];
          *(_DWORD *)buf = 67109120;
          v365 = v197;
          _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplClientNameDcs,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v320 = v53[136];
          v360 = 67109120;
          v361 = v320;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplClientNameDcs,%d", &v360);
          v322 = (uint8_t *)v321;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v321);
          if (v322 != buf)
            free(v322);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v198 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v199 = *((_DWORD *)a20 + 2) - *(_DWORD *)a20;
          *(_DWORD *)buf = 67109120;
          v365 = v199;
          _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEBUG, "Supl,suplClientName.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v323 = *((_DWORD *)a20 + 2) - *(_DWORD *)a20;
          v360 = 67109120;
          v361 = v323;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplClientName.size,%d", &v360);
          v325 = (uint8_t *)v324;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v324);
          if (v325 != buf)
            free(v325);
        }
        v200 = *(char **)a20;
        v201 = (char *)*((_QWORD *)a20 + 1);
        if (v201 == *(char **)a20)
        {
          v205 = 0;
        }
        else
        {
          v202 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v203 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v204 = *(unsigned __int8 *)(*(_QWORD *)a20 + v202);
              *(_DWORD *)buf = 67109376;
              v365 = v202;
              v366 = 1024;
              v367 = v204;
              _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEBUG, "suplClientName[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v206 = *(unsigned __int8 *)(*(_QWORD *)a20 + v202);
              v360 = 67109376;
              v361 = v202;
              v362 = 1024;
              v363 = v206;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "suplClientName[%d],%x", &v360, 14);
              v208 = (uint8_t *)v207;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v207);
              if (v208 != buf)
                free(v208);
            }
            ++v202;
            v200 = *(char **)a20;
            v201 = (char *)*((_QWORD *)a20 + 1);
            v205 = (unint64_t)&v201[-*(_QWORD *)a20];
          }
          while (v205 > v202);
        }
        v209 = v53 + 144;
        if (v53 + 144 != a20)
          sub_100A38C94((_QWORD *)v53 + 18, v200, v201, v205);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v210 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v211 = *((_DWORD *)v53 + 38) - *((_DWORD *)v53 + 36);
          *(_DWORD *)buf = 67109120;
          v365 = v211;
          _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplClientName.size,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v326 = *((_DWORD *)v53 + 38) - *((_DWORD *)v53 + 36);
          v360 = 67109120;
          v361 = v326;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplClientName.size,%d", &v360);
          v328 = (uint8_t *)v327;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v327);
          if (v328 != buf)
            free(v328);
        }
        if (*((_QWORD *)v53 + 19) != *((_QWORD *)v53 + 18))
        {
          v212 = 0;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
            v213 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v214 = *(unsigned __int8 *)(*v209 + v212);
              *(_DWORD *)buf = 67109376;
              v365 = v212;
              v366 = 1024;
              v367 = v214;
              _os_log_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_DEBUG, "tlv.suplClientName[%d],%x", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
              v215 = *(unsigned __int8 *)(*v209 + v212);
              v360 = 67109376;
              v361 = v212;
              v362 = 1024;
              v363 = v215;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "tlv.suplClientName[%d],%x", &v360, 14);
              v217 = (uint8_t *)v216;
              sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v216);
              if (v217 != buf)
                free(v217);
            }
            ++v212;
          }
          while (*((_QWORD *)v53 + 19) - *((_QWORD *)v53 + 18) > v212);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v218 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v219 = *a21;
          *(_DWORD *)buf = 67109120;
          v365 = v219;
          _os_log_impl((void *)&_mh_execute_header, v218, OS_LOG_TYPE_DEBUG, "Supl,suplQopHorizAcc,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v329 = *a21;
          v360 = 67109120;
          v361 = v329;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplQopHorizAcc,%d", &v360);
          v331 = (uint8_t *)v330;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v330);
          if (v331 != buf)
            free(v331);
        }
        v53[168] = *a21;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v220 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v221 = v53[168];
          *(_DWORD *)buf = 67109120;
          v365 = v221;
          _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopHorizAcc,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v332 = v53[168];
          v360 = 67109120;
          v361 = v332;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplQopHorizAcc,%d", &v360);
          v334 = (uint8_t *)v333;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v333);
          if (v334 != buf)
            free(v334);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v222 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v223 = *a22;
          *(_DWORD *)buf = 67109120;
          v365 = v223;
          _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_DEBUG, "Supl,suplQopVertzAcc,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v335 = *a22;
          v360 = 67109120;
          v361 = v335;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplQopVertzAcc,%d", &v360);
          v337 = (uint8_t *)v336;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v336);
          if (v337 != buf)
            free(v337);
        }
        v53[169] = *a22;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v224 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v225 = v53[169];
          *(_DWORD *)buf = 67109120;
          v365 = v225;
          _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopVertzAcc,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v338 = v53[169];
          v360 = 67109120;
          v361 = v338;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplQopVertzAcc,%d", &v360);
          v340 = (uint8_t *)v339;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v339);
          if (v340 != buf)
            free(v340);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v226 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v227 = *a23;
          *(_DWORD *)buf = 67109120;
          v365 = v227;
          _os_log_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_DEBUG, "Supl,suplQopMaxLocAge,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v341 = *a23;
          v360 = 67109120;
          v361 = v341;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplQopMaxLocAge,%d", &v360);
          v343 = (uint8_t *)v342;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v342);
          if (v343 != buf)
            free(v343);
        }
        v53[170] = *a23;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v228 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v229 = v53[170];
          *(_DWORD *)buf = 67109120;
          v365 = v229;
          _os_log_impl((void *)&_mh_execute_header, v228, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopMaxLocAge,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v344 = v53[170];
          v360 = 67109120;
          v361 = v344;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplQopMaxLocAge,%d", &v360);
          v346 = (uint8_t *)v345;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v345);
          if (v346 != buf)
            free(v346);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v230 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v231 = *a24;
          *(_DWORD *)buf = 67109120;
          v365 = v231;
          _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEBUG, "Supl,suplQopDelay,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v347 = *a24;
          v360 = 67109120;
          v361 = v347;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,suplQopDelay,%d", &v360);
          v349 = (uint8_t *)v348;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v348);
          if (v349 != buf)
            free(v349);
        }
        v53[171] = *a24;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
        v232 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v233 = v53[171];
          *(_DWORD *)buf = 67109120;
          v365 = v233;
          _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopDelay,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
          v350 = v53[171];
          v360 = 67109120;
          v361 = v350;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Supl,tlv.suplQopDelay,%d", &v360);
          v352 = (uint8_t *)v351;
          sub_100512490("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v351);
          if (v352 != buf)
            free(v352);
        }
        break;
      }
    }
  }
  if (v356 && a4)
    *(_DWORD *)sub_101872C44(v357, 19) = *a26;
  if (v356 && *a28 != 255)
    *sub_101872E2C(v357, 21) = *a28;
  if (v356 && *a29)
    *(_QWORD *)sub_10187300C(v357, 23) = *a30;
  if (v356)
  {
    if (*a27 != 255)
      *(_DWORD *)sub_1018731F4(v357, 24) = *a27;
  }
}

void sub_101869AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, qmi::MutableMessageBase *a20)
{
  qmi::MutableMessageBase::~MutableMessageBase(a20);
  _Unwind_Resume(a1);
}

void sub_101869C34(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, qmi::MutableMessageBase *a4@<X8>)
{
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v14;
  uint64_t *v15;

  qmi::MutableMessageBase::MutableMessageBase(a4, 0x78u);
  *(_DWORD *)sub_1018733DC((uint64_t)a4, 1) = a1;
  v8 = sub_1018735C4((uint64_t)a4, 16);
  *(_DWORD *)v8 = a2;
  v9 = v8 + 8;
  if (*((char *)a3 + 23) < 0)
    v10 = a3[1];
  else
    v10 = *((unsigned __int8 *)a3 + 23);
  v11 = *((_QWORD *)v8 + 1);
  v12 = *((_QWORD *)v8 + 2) - v11;
  if (v10 <= v12)
  {
    if (v10 < v12)
      *((_QWORD *)v8 + 2) = v11 + v10;
  }
  else
  {
    sub_1005176A0((unint64_t *)v8 + 1, v10 - v12);
  }
  for (i = 0; ; ++i)
  {
    v14 = *((char *)a3 + 23) < 0 ? a3[1] : *((unsigned __int8 *)a3 + 23);
    if (v14 <= i)
      break;
    v15 = a3;
    if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
      v15 = (uint64_t *)*a3;
    *(_BYTE *)(*v9 + i) = *((_BYTE *)v15 + i);
  }
}

void sub_101869D14(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101869D2C(unsigned int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, qmi::MutableMessageBase *a5@<X8>)
{
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v16;
  uint64_t *v17;

  qmi::MutableMessageBase::MutableMessageBase(a5, 0x78u);
  *(_DWORD *)sub_1018733DC((uint64_t)a5, 1) = a2;
  v10 = sub_1018735C4((uint64_t)a5, 16);
  *(_DWORD *)v10 = a3;
  v11 = v10 + 8;
  if (*((char *)a4 + 23) < 0)
    v12 = a4[1];
  else
    v12 = *((unsigned __int8 *)a4 + 23);
  v13 = *((_QWORD *)v10 + 1);
  v14 = *((_QWORD *)v10 + 2) - v13;
  if (v12 <= v14)
  {
    if (v12 < v14)
      *((_QWORD *)v10 + 2) = v13 + v12;
  }
  else
  {
    sub_1005176A0((unint64_t *)v10 + 1, v12 - v14);
  }
  for (i = 0; ; ++i)
  {
    v16 = *((char *)a4 + 23) < 0 ? a4[1] : *((unsigned __int8 *)a4 + 23);
    if (v16 <= i)
      break;
    v17 = a4;
    if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
      v17 = (uint64_t *)*a4;
    *(_BYTE *)(*v11 + i) = *((_BYTE *)v17 + i);
  }
  if (a1 < 2)
    *(_DWORD *)sub_1018731F4((uint64_t)a5, 19) = a1 != 0;
}

void sub_101869E38(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101869E54@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x83u);
  result = sub_101873958((uint64_t)a2, 1);
  *(_DWORD *)result = a1;
  return result;
}

void sub_101869E90(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101869EA4@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x7Eu);
  result = sub_101873B40((uint64_t)a2, 1);
  *(_DWORD *)result = a1;
  return result;
}

void sub_101869EE0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101869EF4@<X0>(char a1@<W0>, char a2@<W1>, qmi::MutableMessageBase *a3@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a3, 0x8Au);
  *sub_101873D28((uint64_t)a3, 16) = a1;
  result = sub_101873F08((uint64_t)a3, 17);
  *result = a2;
  return result;
}

void sub_101869F4C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101869F64@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x93u);
  result = sub_1018740E8((uint64_t)a2, 1);
  *result = a1;
  return result;
}

void sub_101869FA0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101869FB4@<X0>(qmi::MutableMessageBase *a1@<X8>)
{
  return qmi::MutableMessageBase::MutableMessageBase(a1, 0x84u);
}

char *sub_101869FC0@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, qmi::MutableMessageBase *a5@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a5, 0x74u);
  result = sub_1018742C8((uint64_t)a5, 1);
  *(_DWORD *)result = a1;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  result[12] = a4;
  return result;
}

void sub_10186A020(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186A034@<X0>(int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, qmi::MutableMessageBase *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a4, 0x66u);
  result = sub_101874540((uint64_t)a4, 1);
  *(_DWORD *)result = a1;
  *((_QWORD *)result + 1) = a2;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  result[24] = a3;
  return result;
}

void sub_10186A09C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186A0B0@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x5Fu);
  result = sub_101874858((uint64_t)a2, 16);
  *(_DWORD *)result = a1;
  return result;
}

void sub_10186A0EC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186A100@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0xA1u);
  result = sub_101874A40((uint64_t)a2, 1);
  *result = a1;
  return result;
}

void sub_10186A13C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186A150@<X0>(char a1@<W0>, uint64_t a2@<X1>, qmi::MutableMessageBase *a3@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a3, 0xA9u);
  *sub_101874C20((uint64_t)a3, 1) = a1;
  result = sub_101874E00((uint64_t)a3, 16);
  *(_QWORD *)result = a2;
  return result;
}

void sub_10186A1A8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186A1C0@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x8Bu);
  v4 = sub_101874FE8((uint64_t)a2, 16);
  if (v4 != (char *)a1)
    sub_10186ADDC(v4, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1);
  v5 = sub_101875354((uint64_t)a2, 17);
  if (v5 != (char *)(a1 + 120))
    sub_10186ADDC(v5, *(char **)(a1 + 120), *(_QWORD *)(a1 + 128), (uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 1);
  v6 = sub_10187560C((uint64_t)a2, 18);
  if (v6 != (char *)(a1 + 24))
    sub_10186ADDC(v6, *(char **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 1);
  v7 = sub_1018758C4((uint64_t)a2, 19);
  if (v7 != (char *)(a1 + 144))
    sub_10186ADDC(v7, *(char **)(a1 + 144), *(_QWORD *)(a1 + 152), (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 1);
  v8 = sub_101875B7C((uint64_t)a2, 22);
  if (v8 != (char *)(a1 + 48))
    sub_10186ADDC(v8, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1);
  v9 = sub_101875E34((uint64_t)a2, 23);
  if (v9 != (char *)(a1 + 168))
    sub_10186ADDC(v9, *(char **)(a1 + 168), *(_QWORD *)(a1 + 176), (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 1);
  v10 = sub_1018760EC((uint64_t)a2, 24);
  if (v10 != (char *)(a1 + 96))
    sub_10186ADDC(v10, *(char **)(a1 + 96), *(_QWORD *)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 1);
  v11 = sub_1018763A4((uint64_t)a2, 25);
  if (v11 != (char *)(a1 + 216))
    sub_10186ADDC(v11, *(char **)(a1 + 216), *(_QWORD *)(a1 + 224), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 1);
  v12 = sub_10187665C((uint64_t)a2, 26);
  if (v12 != (char *)(a1 + 72))
    sub_10186ADDC(v12, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 1);
  result = sub_101876914((uint64_t)a2, 27);
  if (result != (char *)(a1 + 192))
    return sub_10186ADDC(result, *(char **)(a1 + 192), *(_QWORD *)(a1 + 200), (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 1);
  return result;
}

void sub_10186A378(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10186A3B0@<X0>(char a1@<W0>, uint64_t a2@<X1>, qmi::MutableMessageBase *a3@<X8>)
{
  unint64_t *v6;
  _QWORD v8[5];

  qmi::MutableMessageBase::MutableMessageBase(a3, 0x67u);
  *sub_101872E2C((uint64_t)a3, 1) = a1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10186A45C;
  v8[3] = &unk_10214C498;
  v8[4] = a2;
  v6 = (unint64_t *)sub_101876BCC((uint64_t)a3, 2);
  return sub_10186A45C((uint64_t)v8, v6);
}

void sub_10186A448(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10186A45C(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32);
  v5 = a2[1] - *a2;
  if (v4 <= v5)
  {
    if (v4 < v5)
      a2[1] = *a2 + v4;
  }
  else
  {
    sub_1005176A0(a2, v4 - v5);
  }
  return sub_10114FE54(a2, **(char ***)(a1 + 32), *(char **)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32));
}

char *sub_10186A4C0@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x68u);
  result = sub_101872E2C((uint64_t)a2, 16);
  *result = a1;
  return result;
}

void sub_10186A4FC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186A510@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x98u);
  result = sub_101876EF8((uint64_t)a2, 1);
  *result = a1;
  return result;
}

void sub_10186A54C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

signed int sub_10186A560(signed int a1, signed int a2, int a3, float a4)
{
  signed int result;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  __int16 v15;
  signed int v16;
  __int16 v17;
  signed int v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  signed int v22;
  __int16 v23;
  signed int v24;

  result = llroundf(a4 * 10.0);
  if (result < a1 || result > a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      v20 = a4;
      v21 = 1026;
      v22 = a1;
      v23 = 1026;
      v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "tenth dB value is out of range,input,%{public}.3f,range,%{public}d,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v13 = 134349568;
      v14 = a4;
      v15 = 1026;
      v16 = a1;
      v17 = 1026;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "tenth dB value is out of range,input,%{public}.3f,range,%{public}d,%{public}d", &v13, 24);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "int convertToTenthDbAndValidateRange(float, int, int, int)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return a3;
  }
  return result;
}

uint64_t sub_10186A770@<X0>(float *a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  _QWORD v8[5];

  qmi::MutableMessageBase::MutableMessageBase(a2, 0x65u);
  v4 = sub_101735F08((uint64_t)a2, 1);
  *(_WORD *)v4 = sub_10186A560(-70, 50, -40, *a1);
  v5 = sub_101736140((uint64_t)a2, 16);
  *(_WORD *)v5 = sub_10186A560(1, 100, 35, a1[1]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10186A85C;
  v8[3] = &unk_1021D3FA0;
  v8[4] = a1;
  v6 = sub_101735C94((uint64_t)a2, 17);
  return sub_10186A85C((uint64_t)v8, v6);
}

void sub_10186A844(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10186A85C(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  *a2 = sub_10186A560(1, 100, 35, *(float *)(*(_QWORD *)(a1 + 32) + 12));
  a2[1] = sub_10186A560(1, 100, 35, *(float *)(*(_QWORD *)(a1 + 32) + 8));
  result = sub_10186A560(1, 100, 35, *(float *)(*(_QWORD *)(a1 + 32) + 16));
  a2[2] = result;
  return result;
}

uint64_t sub_10186A8D0(char a1, int a2, char **a3, uint64_t a4)
{
  char *v8;
  char **v9;
  uint64_t result;
  NSObject *v11;
  _BOOL4 v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (!a2 || a3[1] == *a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid xtra data,xtraLen,%{public}u", buf, 8u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
      v15[0] = 67240192;
      v15[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid xtra data,xtraLen,%{public}u", v15, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "BOOL pds::stuffXtraData(uint8_t, uint32_t, const std::vector<uint8_t> &, pds::injectXTRAData::Request &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
      return 0;
    }
  }
  else
  {
    v8 = sub_1018770D8(a4, 1);
    *v8 = a1;
    *((_WORD *)v8 + 1) = 0;
    v9 = (char **)(v8 + 8);
    if (v9 != a3)
      sub_100A38C94(v9, *a3, a3[1], a3[1] - *a3);
    *(_DWORD *)sub_101877474(a4, 16) = a2;
    return 1;
  }
  return result;
}

char *sub_10186AAE4@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0xB7u);
  result = sub_10187765C((uint64_t)a2, 16);
  *result = a1;
  return result;
}

void sub_10186AB20(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186AB34@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  char *result;

  qmi::MutableMessageBase::MutableMessageBase(a2, 0xC0u);
  *sub_10187783C((uint64_t)a2, 1) = 0;
  result = sub_101877A1C((uint64_t)a2, 16);
  *(_DWORD *)result = a1;
  return result;
}

void sub_10186AB80(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186AB98(int a1@<W0>, int a2@<W1>, qmi::MutableMessageBase *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  v6 = qmi::MutableMessageBase::MutableMessageBase(a3, 0xE0u);
  v7 = sub_101877C04(v6, 1);
  v8 = sub_101877DE4((uint64_t)a3, 2);
  *v7 = a1;
  *v8 = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v16 = a1;
    v17 = 1026;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "stuffMsgGetTimingAdvance,requested rat,%{public}d,sub_id,%{public}d,for this platforms", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3FC0);
    v12[0] = 67240448;
    v12[1] = a1;
    v13 = 1026;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "stuffMsgGetTimingAdvance,requested rat,%{public}d,sub_id,%{public}d,for this platforms", v12, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "pds::getTimingAdvance::Request pds::stuffMsgGetTimingAdvance(uint8_t, uint8_t)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_10186AD94(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186ADB0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

char *sub_10186ADDC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_100259694();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100BFCC9C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

char *sub_10186AEDC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186AF50();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10186AF50()
{
  operator new();
}

void sub_10186B070()
{
  operator new();
}

char *sub_10186B0BC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186B130();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186B130()
{
  operator new();
}

void sub_10186B250()
{
  operator new();
}

char *sub_10186B2A4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186B318();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186B318()
{
  operator new();
}

void sub_10186B438()
{
  operator new();
}

char *sub_10186B48C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186B500();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186B500()
{
  operator new();
}

void sub_10186B620()
{
  operator new();
}

char *sub_10186B674(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186B6E8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186B6E8()
{
  operator new();
}

void sub_10186B808()
{
  operator new();
}

char *sub_10186B85C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186B8D0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186B8D0()
{
  operator new();
}

void sub_10186B9F0()
{
  operator new();
}

char *sub_10186BA44(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186BAB8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186BAB8()
{
  operator new();
}

void sub_10186BBD8()
{
  operator new();
}

char *sub_10186BC2C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186BCA0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186BCA0()
{
  operator new();
}

void sub_10186BDC0()
{
  operator new();
}

char *sub_10186BE14(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186BE88();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186BE88()
{
  operator new();
}

void sub_10186BFA8()
{
  operator new();
}

char *sub_10186BFFC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186C070();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186C070()
{
  operator new();
}

void sub_10186C190()
{
  operator new();
}

char *sub_10186C1E4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186C258();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186C258()
{
  operator new();
}

void sub_10186C37C()
{
  operator delete();
}

uint64_t sub_10186C390()
{
  return 13;
}

uint64_t sub_10186C398(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 12);
  v4 = (*a2)++;
  *(_BYTE *)(v4 + 1) = *(_BYTE *)(result + 13);
  v5 = (*a2)++;
  *(_DWORD *)(v5 + 1) = *(_DWORD *)(result + 16);
  v6 = *a2;
  *a2 += 4;
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(result + 20);
  v7 = *a2 + 4;
  *a2 = v7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v7 - (v3 + 3);
  return result;
}

void sub_10186C410()
{
  operator new();
}

char *sub_10186C46C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186C4E0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10186C4E0()
{
  operator new();
}

void sub_10186C600()
{
  operator new();
}

char *sub_10186C64C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186C6C0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186C6C0()
{
  operator new();
}

void sub_10186C7E4()
{
  operator delete();
}

uint64_t sub_10186C7F8(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_QWORD *)(v3 + 3) = *(_QWORD *)(result + 16);
  v4 = *a2;
  *a2 += 8;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 24);
  v5 = *a2;
  *a2 += 4;
  *(_BYTE *)(v5 + 4) = *(_BYTE *)(result + 28);
  v6 = (*a2)++;
  *(_BYTE *)(v6 + 1) = *(_BYTE *)(result + 29);
  v7 = *a2 + 1;
  *a2 = v7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v7 - (v3 + 3);
  return result;
}

void sub_10186C870()
{
  operator new();
}

char *sub_10186C8C4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186C938();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186C938()
{
  operator new();
}

void sub_10186CA5C()
{
  operator delete();
}

uint64_t sub_10186CA70()
{
  return 15;
}

uint64_t sub_10186CA78(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  v4 = *a2;
  *a2 += 4;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(result + 16);
  v5 = *a2;
  *a2 += 4;
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(result + 20);
  v6 = *a2 + 4;
  *a2 = v6;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_10186CADC()
{
  operator new();
}

char *sub_10186CB38(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186CBAC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10186CBAC()
{
  operator new();
}

void sub_10186CCCC()
{
  operator new();
}

char *sub_10186CD18(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186CD8C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186CD8C()
{
  operator new();
}

void sub_10186CEAC()
{
  operator new();
}

char *sub_10186CF00(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186CF74();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186CF74()
{
  operator new();
}

void sub_10186D094()
{
  operator new();
}

char *sub_10186D0E8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186D15C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186D15C()
{
  operator new();
}

void sub_10186D27C()
{
  operator new();
}

char *sub_10186D2D0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186D344();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186D344()
{
  operator new();
}

void sub_10186D464()
{
  operator new();
}

char *sub_10186D4B8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186D52C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10186D52C()
{
  operator new();
}

void sub_10186D64C()
{
  operator new();
}

char *sub_10186D698(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186D70C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186D70C()
{
  operator new();
}

void sub_10186D82C()
{
  operator new();
}

char *sub_10186D880(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186D8F4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186D8F4()
{
  operator new();
}

void sub_10186DA14()
{
  operator new();
}

char *sub_10186DA68(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186DADC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186DADC()
{
  operator new();
}

void sub_10186DBFC()
{
  operator new();
}

char *sub_10186DC50(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186DCC4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186DCC4()
{
  operator new();
}

void sub_10186DDE4()
{
  operator new();
}

char *sub_10186DE38(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186DEAC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186DEAC()
{
  operator new();
}

void sub_10186DFCC()
{
  operator new();
}

char *sub_10186E020(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186E094();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186E094()
{
  operator new();
}

void sub_10186E1B4()
{
  operator new();
}

char *sub_10186E208(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186E27C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186E27C()
{
  operator new();
}

void sub_10186E39C()
{
  operator new();
}

char *sub_10186E3F0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186E464();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186E464()
{
  operator new();
}

void sub_10186E584()
{
  operator new();
}

char *sub_10186E5D8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186E64C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10186E64C()
{
  operator new();
}

void sub_10186E76C()
{
  operator new();
}

char *sub_10186E7B8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186E82C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10186E82C()
{
  operator new();
}

void sub_10186E94C()
{
  operator new();
}

char *sub_10186E998(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186EA0C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186EA0C()
{
  operator new();
}

void sub_10186EB2C()
{
  operator new();
}

char *sub_10186EB80(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186EBF4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186EBF4()
{
  operator new();
}

void sub_10186ED18()
{
  operator delete();
}

uint64_t sub_10186ED2C(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 16);
  v4 = *a2;
  *a2 += 4;
  *(_QWORD *)(v4 + 4) = *(_QWORD *)(result + 24);
  v5 = *a2 + 8;
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - (v3 + 3);
  return result;
}

void sub_10186ED7C()
{
  operator new();
}

char *sub_10186EDD0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186EE44();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186EE44()
{
  operator new();
}

void sub_10186EF68()
{
  operator delete();
}

uint64_t sub_10186EF7C(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  v4 = *a2;
  *a2 += 4;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(result + 16);
  v5 = *a2 + 4;
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - (v3 + 3);
  return result;
}

void sub_10186EFCC()
{
  operator new();
}

char *sub_10186F020(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186F094();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186F094()
{
  operator new();
}

void sub_10186F1B8()
{
  operator new();
}

char *sub_10186F20C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186F280();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186F280()
{
  operator new();
}

void sub_10186F3A4()
{
  operator new();
}

char *sub_10186F400(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186F474();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186F474()
{
  operator new();
}

void sub_10186F594()
{
  operator new();
}

char *sub_10186F5E8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186F65C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186F65C()
{
  operator new();
}

void sub_10186F77C()
{
  operator new();
}

char *sub_10186F7D0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186F844();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186F844()
{
  operator new();
}

void sub_10186F964()
{
  operator new();
}

char *sub_10186F9B8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186FA2C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10186FA2C()
{
  operator new();
}

void sub_10186FB4C()
{
  operator new();
}

char *sub_10186FBA0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186FC14();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186FC14()
{
  operator new();
}

void sub_10186FD34()
{
  operator new();
}

char *sub_10186FD88(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186FDFC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186FDFC()
{
  operator new();
}

void sub_10186FF1C()
{
  operator new();
}

char *sub_10186FF70(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10186FFE4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10186FFE4()
{
  operator new();
}

void sub_101870104()
{
  operator new();
}

char *sub_101870158(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018701CC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1018701CC()
{
  operator new();
}

void sub_1018702EC()
{
  operator new();
}

char *sub_101870338(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018703AC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1018703AC()
{
  operator new();
}

void sub_1018704CC()
{
  operator new();
}

char *sub_101870518(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187058C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10187058C()
{
  operator new();
}

void sub_1018706AC()
{
  operator new();
}

char *sub_1018706F8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187076C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10187076C()
{
  operator new();
}

void sub_10187088C()
{
  operator new();
}

char *sub_1018708D8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187094C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10187094C()
{
  operator new();
}

_BYTE *sub_101870A6C(_BYTE *result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[8];
  v3 = *a2;
  *a2 += 3;
  *(_BYTE *)(v3 + 3) = result[9];
  v4 = (*a2)++;
  *(_BYTE *)(v4 + 1) = result[10];
  v5 = *a2 + 1;
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - (v3 + 3);
  return result;
}

void sub_101870ABC()
{
  operator new();
}

char *sub_101870B10(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101870B84();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101870B84()
{
  operator new();
}

uint64_t sub_101870CA8()
{
  return 6;
}

_BYTE *sub_101870CB0(_BYTE *result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[8];
  v3 = *a2;
  *a2 += 3;
  *(_BYTE *)(v3 + 3) = result[9];
  v4 = (*a2)++;
  *(_BYTE *)(v4 + 1) = result[10];
  v5 = (*a2)++;
  *(_BYTE *)(v5 + 1) = result[11];
  v6 = *a2 + 1;
  *a2 = v6;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_101870D14()
{
  operator new();
}

char *sub_101870D70(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101870DE4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101870DE4()
{
  operator new();
}

void sub_101870F08()
{
  operator new();
}

char *sub_101870F64(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101870FD8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101870FD8()
{
  operator new();
}

void sub_1018710F8()
{
  operator new();
}

char *sub_101871144(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018711B8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1018711B8()
{
  operator new();
}

void sub_1018712DC()
{
  operator delete();
}

uint64_t sub_1018712F0(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 12);
  v4 = (*a2)++;
  *(_BYTE *)(v4 + 1) = *(_BYTE *)(result + 13);
  v5 = (*a2)++;
  *(_BYTE *)(v5 + 1) = *(_DWORD *)(result + 16);
  v6 = *a2 + 1;
  *a2 = v6;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_101871354()
{
  operator new();
}

char *sub_1018713A8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187141C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 10;
}

void sub_10187141C()
{
  operator new();
}

void sub_10187153C()
{
  operator new();
}

char *sub_101871590(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101871604();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101871604()
{
  operator new();
}

void sub_101871724()
{
  operator new();
}

char *sub_101871770(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018717E4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_1018717E4()
{
  operator new();
}

void sub_101871904()
{
  operator new();
}

char *sub_101871958(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018719CC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1018719CC()
{
  operator new();
}

void sub_101871AEC()
{
  operator new();
}

char *sub_101871B38(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101871BAC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101871BAC()
{
  operator new();
}

void sub_101871CD4()
{
  operator delete();
}

uint64_t sub_101871CE8()
{
  return 14;
}

uint64_t sub_101871CF0(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v8 = a2;
  v9 = a1 + 12;
  result = sub_101871DB4((uint64_t)&v9, &v8);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_101871D58()
{
  operator new();
}

uint64_t sub_101871DB4(uint64_t result, _QWORD **a2)
{
  _DWORD *v2;

  *(_BYTE *)(**a2)++ = **(_DWORD **)result;
  v2 = *(_DWORD **)result;
  *(_BYTE *)(**a2)++ = *(_DWORD *)(*(_QWORD *)result + 4);
  *(_BYTE *)(**a2)++ = v2[2];
  *(_DWORD *)**a2 = v2[3];
  **a2 += 4;
  *(_WORD *)**a2 = *((_WORD *)v2 + 8);
  **a2 += 2;
  *(_WORD *)**a2 = *((_WORD *)v2 + 9);
  **a2 += 2;
  return result;
}

char *sub_101871E80(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101871EF4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101871EF4()
{
  operator new();
}

void sub_101872014()
{
  operator new();
}

char *sub_101872060(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018720D4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_1018720D4()
{
  operator new();
}

_QWORD *sub_1018721F8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D51D8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101872238(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D51D8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_101872288(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 4;
}

uint64_t sub_101872298(uint64_t result, _QWORD *a2)
{
  char v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  char v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_BYTE *)(v3 + 3) = *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  v4 = (_BYTE *)(*a2 + 1);
  *a2 = v4;
  v5 = *(char **)(result + 16);
  v6 = *(char **)(result + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    *v4 = v7;
    v4 = (_BYTE *)(*a2 + 1);
    *a2 = v4;
  }
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v4 - (v3 + 3);
  return result;
}

void sub_101872300()
{
  operator new();
}

void sub_101872368()
{
  operator delete();
}

_QWORD **sub_10187238C(_QWORD **result, _DWORD *a2)
{
  _QWORD *v2;
  _BYTE *v3;
  char *v4;
  char *v5;
  char v6;

  v2 = *result;
  *(_BYTE *)**result = a2[2] - *a2;
  v3 = (_BYTE *)(*v2 + 1);
  *v2 = v3;
  v4 = *(char **)a2;
  v5 = (char *)*((_QWORD *)a2 + 1);
  while (v4 != v5)
  {
    v6 = *v4++;
    *v3 = v6;
    v3 = (_BYTE *)(*v2 + 1);
    *v2 = v3;
  }
  return result;
}

char *sub_1018723D8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187244C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10187244C()
{
  operator new();
}

_QWORD *sub_1018725B0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = off_1021D5228;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_101872630(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = off_1021D5228;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  operator delete();
}

double sub_1018726C0(uint64_t a1)
{
  int64x2_t v1;
  double result;

  v1 = vaddq_s64((int64x2_t)(*(_OWORD *)(a1 + 24) + __PAIR128__(35, 0)), vaddq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)(a1 + 72), *(int64x2_t *)(a1 + 96)), *(int64x2_t *)(a1 + 128)), *(int64x2_t *)(a1 + 160)));
  *(_QWORD *)&result = vsubq_s64(vdupq_laneq_s64(v1, 1), v1).u64[0];
  return result;
}

_QWORD **sub_101872700(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **result;
  uint64_t v7;
  uint64_t *v8;
  _DWORD *v9;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v8 = a2;
  v9 = (_DWORD *)(a1 + 16);
  result = sub_1018727E8(&v9, &v8);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_101872768()
{
  operator new();
}

void sub_1018727C4()
{
  operator delete();
}

_QWORD **sub_1018727E8(_DWORD **a1, _QWORD **a2)
{
  _DWORD *v2;
  _DWORD **v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  char v7;
  _DWORD *v9;

  *(_DWORD *)**a2 = **a1;
  **a2 += 4;
  v2 = *a1;
  *(_BYTE *)(**a2)++ = *((_BYTE *)*a1 + 4);
  v3 = (_DWORD **)*a2;
  v4 = (char *)*((_QWORD *)v2 + 1);
  v5 = (char *)*((_QWORD *)v2 + 2);
  if (v4 != v5)
  {
    v6 = *v3;
    do
    {
      v7 = *v4++;
      *v6 = v7;
      v6 = (char *)*v3 + 1;
      *v3 = v6;
    }
    while (v4 != v5);
    v3 = (_DWORD **)*a2;
  }
  *(_BYTE *)*v3 = *((_BYTE *)v2 + 32);
  ++**a2;
  v9 = v2;
  return sub_1018728A4((uint64_t *)&v9, a2);
}

_QWORD **sub_1018728A4(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)**a2 = *(_DWORD *)(*a1 + 36);
  **a2 += 4;
  v2 = *a1;
  *(_DWORD *)**a2 = *(_DWORD *)(*a1 + 40);
  **a2 += 4;
  *(_DWORD *)**a2 = *(_DWORD *)(v2 + 44);
  **a2 += 4;
  *(_DWORD *)**a2 = *(_DWORD *)(v2 + 48);
  **a2 += 4;
  v4 = v2;
  return sub_101872950(&v4, a2);
}

_QWORD **sub_101872950(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  _BYTE *v7;
  char v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *(char **)(*a1 + 56);
  v5 = *(char **)(*a1 + 64);
  if (v4 != v5)
  {
    v6 = *a2;
    v7 = (_BYTE *)**a2;
    do
    {
      v8 = *v4++;
      *v7 = v8;
      v7 = (_BYTE *)(*v6 + 1);
      *v6 = v7;
    }
    while (v4 != v5);
    v3 = *a1;
  }
  sub_10187238C(a2, (_DWORD *)(v3 + 80));
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v3 + 104);
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v3 + 105);
  v10 = v3;
  return sub_101872A08(&v10, a2);
}

_QWORD **sub_101872A08(uint64_t *a1, _QWORD **a2)
{
  uint64_t v4;
  _QWORD **result;

  sub_10187238C(a2, (_DWORD *)(*a1 + 112));
  v4 = *a1;
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v4 + 136);
  result = sub_10187238C(a2, (_DWORD *)(v4 + 144));
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v4 + 168);
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v4 + 169);
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v4 + 170);
  *(_BYTE *)(**a2)++ = *(_BYTE *)(v4 + 171);
  return result;
}

uint64_t sub_101872AE8(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;
  int v6;
  __int16 v7;
  char v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1007855D8((_QWORD *)(a1 + 8), *((const void **)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1));
  v5 = *((_OWORD *)a2 + 2);
  v6 = a2[12];
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1007855D8((_QWORD *)(a1 + 56), *((const void **)a2 + 7), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1007855D8((_QWORD *)(a1 + 80), *((const void **)a2 + 10), *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10));
  v7 = *((_WORD *)a2 + 52);
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_1007855D8((_QWORD *)(a1 + 112), *((const void **)a2 + 14), *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14));
  v8 = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_1007855D8((_QWORD *)(a1 + 144), *((const void **)a2 + 18), *((_QWORD *)a2 + 19), *((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18));
  *(_DWORD *)(a1 + 168) = a2[42];
  return a1;
}

void sub_101872BE0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v1[8] = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    v1[2] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_101872C44(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101872CB8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101872CB8()
{
  operator new();
}

void sub_101872DD8()
{
  operator new();
}

char *sub_101872E2C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101872EA0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101872EA0()
{
  operator new();
}

void sub_101872FC0()
{
  operator new();
}

char *sub_10187300C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873080();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101873080()
{
  operator new();
}

void sub_1018731A0()
{
  operator new();
}

char *sub_1018731F4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873268();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101873268()
{
  operator new();
}

void sub_101873388()
{
  operator new();
}

char *sub_1018733DC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873450();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101873450()
{
  operator new();
}

void sub_101873570()
{
  operator new();
}

char *sub_1018735C4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873638();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101873638()
{
  operator new();
}

_QWORD *sub_101873760(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5408;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018737A0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5408;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1018737F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 8;
}

_QWORD **sub_101873800(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **result;
  uint64_t v7;
  uint64_t *v8;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v8 = a2;
  result = sub_1018738F8(&v8, (_DWORD *)(a1 + 16));
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_101873864()
{
  operator new();
}

void sub_1018738D4()
{
  operator delete();
}

_QWORD **sub_1018738F8(_QWORD **result, _DWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  char v7;

  v2 = *result;
  *(_DWORD *)**result = *a2;
  v3 = *v2;
  *v2 += 4;
  *(_BYTE *)(v3 + 4) = a2[4] - a2[2];
  v4 = (_BYTE *)(*v2 + 1);
  *v2 = v4;
  v5 = (char *)*((_QWORD *)a2 + 1);
  v6 = (char *)*((_QWORD *)a2 + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    *v4 = v7;
    v4 = (_BYTE *)(*v2 + 1);
    *v2 = v4;
  }
  return result;
}

char *sub_101873958(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018739CC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1018739CC()
{
  operator new();
}

void sub_101873AEC()
{
  operator new();
}

char *sub_101873B40(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873BB4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101873BB4()
{
  operator new();
}

void sub_101873CD4()
{
  operator new();
}

char *sub_101873D28(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873D9C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101873D9C()
{
  operator new();
}

void sub_101873EBC()
{
  operator new();
}

char *sub_101873F08(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101873F7C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101873F7C()
{
  operator new();
}

void sub_10187409C()
{
  operator new();
}

char *sub_1018740E8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187415C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10187415C()
{
  operator new();
}

void sub_10187427C()
{
  operator new();
}

char *sub_1018742C8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187433C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_10187433C()
{
  operator new();
}

void sub_101874460()
{
  operator delete();
}

uint64_t sub_101874474(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  v4 = *a2;
  *a2 += 4;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(result + 16);
  v5 = *a2;
  *a2 += 4;
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(result + 20);
  v6 = *a2;
  *a2 += 4;
  *(_BYTE *)(v6 + 4) = *(_BYTE *)(result + 24);
  v7 = *a2 + 1;
  *a2 = v7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v7 - (v3 + 3);
  return result;
}

void sub_1018744EC()
{
  operator new();
}

char *sub_101874540(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018745B4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_1018745B4()
{
  operator new();
}

void sub_1018746DC()
{
  operator delete();
}

_DWORD **sub_1018746F0(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;
  uint64_t *v8;
  _DWORD *v9;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v8 = a2;
  v9 = (_DWORD *)(a1 + 16);
  result = sub_1018747AC(&v9, (_DWORD ***)&v8);
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_101874758()
{
  operator new();
}

_DWORD **sub_1018747AC(_DWORD **result, _DWORD ***a2)
{
  _DWORD *v2;

  *(**a2)++ = **result;
  v2 = *result;
  *(_QWORD *)**a2 = *((_QWORD *)*result + 1);
  **a2 += 2;
  *(**a2)++ = v2[4];
  *(**a2)++ = v2[5];
  *(_BYTE *)**a2 = *((_BYTE *)v2 + 24);
  **a2 = (_DWORD *)((char *)**a2 + 1);
  return result;
}

char *sub_101874858(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018748CC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1018748CC()
{
  operator new();
}

void sub_1018749EC()
{
  operator new();
}

char *sub_101874A40(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101874AB4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101874AB4()
{
  operator new();
}

void sub_101874BD4()
{
  operator new();
}

char *sub_101874C20(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101874C94();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101874C94()
{
  operator new();
}

void sub_101874DB4()
{
  operator new();
}

char *sub_101874E00(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101874E74();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101874E74()
{
  operator new();
}

void sub_101874F94()
{
  operator new();
}

char *sub_101874FE8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187505C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10187505C()
{
  operator new();
}

_QWORD *sub_101875180(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D57C8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018751C0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D57C8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

_QWORD **sub_101875210(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **result;
  uint64_t v7;
  uint64_t *v8;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v8 = a2;
  result = sub_101875304(&v8, (_DWORD *)(a1 + 16));
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_101875274()
{
  operator new();
}

void sub_1018752E0()
{
  operator delete();
}

_QWORD **sub_101875304(_QWORD **result, _DWORD *a2)
{
  _QWORD *v2;
  _WORD *v3;
  __int16 *v4;
  __int16 *v5;
  __int16 v6;

  v2 = *result;
  *(_BYTE *)**result = (a2[2] - *a2) >> 1;
  v3 = (_WORD *)(*v2 + 1);
  *v2 = v3;
  v4 = *(__int16 **)a2;
  v5 = (__int16 *)*((_QWORD *)a2 + 1);
  while (v4 != v5)
  {
    v6 = *v4++;
    *v3 = v6;
    v3 = (_WORD *)(*v2 + 2);
    *v2 = v3;
  }
  return result;
}

char *sub_101875354(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018753C8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_1018753C8()
{
  operator new();
}

_QWORD *sub_1018754EC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5818;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10187552C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5818;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_10187557C()
{
  operator new();
}

void sub_1018755E8()
{
  operator delete();
}

char *sub_10187560C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101875680();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101875680()
{
  operator new();
}

_QWORD *sub_1018757A4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5868;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018757E4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5868;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101875834()
{
  operator new();
}

void sub_1018758A0()
{
  operator delete();
}

char *sub_1018758C4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101875938();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101875938()
{
  operator new();
}

_QWORD *sub_101875A5C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D58B8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101875A9C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D58B8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101875AEC()
{
  operator new();
}

void sub_101875B58()
{
  operator delete();
}

char *sub_101875B7C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101875BF0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101875BF0()
{
  operator new();
}

_QWORD *sub_101875D14(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5908;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101875D54(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5908;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101875DA4()
{
  operator new();
}

void sub_101875E10()
{
  operator delete();
}

char *sub_101875E34(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101875EA8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101875EA8()
{
  operator new();
}

_QWORD *sub_101875FCC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5958;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10187600C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5958;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_10187605C()
{
  operator new();
}

void sub_1018760C8()
{
  operator delete();
}

char *sub_1018760EC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101876160();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101876160()
{
  operator new();
}

_QWORD *sub_101876284(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D59A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018762C4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D59A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101876314()
{
  operator new();
}

void sub_101876380()
{
  operator delete();
}

char *sub_1018763A4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101876418();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101876418()
{
  operator new();
}

_QWORD *sub_10187653C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D59F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10187657C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D59F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1018765CC()
{
  operator new();
}

void sub_101876638()
{
  operator delete();
}

char *sub_10187665C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018766D0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_1018766D0()
{
  operator new();
}

_QWORD *sub_1018767F4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5A48;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101876834(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5A48;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101876884()
{
  operator new();
}

void sub_1018768F0()
{
  operator delete();
}

char *sub_101876914(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101876988();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101876988()
{
  operator new();
}

_QWORD *sub_101876AAC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5A98;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101876AEC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5A98;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_101876B3C()
{
  operator new();
}

void sub_101876BA8()
{
  operator delete();
}

char *sub_101876BCC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101876C40();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_101876C40()
{
  operator new();
}

_QWORD *sub_101876D64(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5AE8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101876DA4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5AE8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_101876DF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 5;
}

uint64_t sub_101876E04(uint64_t result, _QWORD *a2)
{
  char v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  char v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  v4 = (_BYTE *)(*a2 + 2);
  *a2 = v4;
  v5 = *(char **)(result + 16);
  v6 = *(char **)(result + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    *v4 = v7;
    v4 = (_BYTE *)(*a2 + 1);
    *a2 = v4;
  }
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v4 - (v3 + 3);
  return result;
}

