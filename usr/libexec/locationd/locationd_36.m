uint64_t sub_1016376DC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1016376F8(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_10163775C(_QWORD *result)
{
  *result = off_1021C3000;
  result[1] = 0;
  return result;
}

void sub_10163776C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1016377AC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101637800(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3000;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163787C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016378CC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101637A94(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101637AB0(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_101637B14(_QWORD *result)
{
  *result = off_1021C3038;
  result[1] = 0;
  return result;
}

void sub_101637B24(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3038;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101637B64(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3038;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101637BB8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3038;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101637C34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101637C84(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101637E4C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101637E68(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

uint64_t sub_101637ECC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3070;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101637EE4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101637F08(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  double result;

  *(_QWORD *)a1 = &off_1021C3070;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_101637F78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "walkingHeartRateAverage", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 28) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "restingHeartRate", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "workoutActivityType", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101638008(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 28) |= 4u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v25) = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }
LABEL_52:
          *(_DWORD *)(a1 + 24) = v25;
        }
        else
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
        }
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_1016382D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  return result;
}

_QWORD *sub_10163834C(_QWORD *result)
{
  *result = off_1021C30A8;
  result[1] = 0;
  return result;
}

void sub_10163835C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C30A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163839C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C30A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1016383F0(_QWORD *result, uint64_t a2)
{
  *result = off_1021C30A8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163846C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016384BC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101638684(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_1016386A0(_QWORD *result)
{
  *result = off_1021C30E0;
  result[1] = 0;
  return result;
}

void sub_1016386B0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C30E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1016386F0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C30E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101638744(_QWORD *result, uint64_t a2)
{
  *result = off_1021C30E0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1016387C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101638810(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016389D8(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_1016389F4(_QWORD *result)
{
  *result = off_1021C3118;
  result[1] = 0;
  return result;
}

void sub_101638A04(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3118;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101638A44(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3118;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101638A98(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3118;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101638B14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101638B64(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101638D2C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101638D48(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_101638DAC(_QWORD *result)
{
  *result = off_1021C3150;
  result[1] = 0;
  return result;
}

void sub_101638DBC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3150;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101638DFC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3150;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101638E50(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3150;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101638ECC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101638F1C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016390E4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101639100(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_101639164(_QWORD *result)
{
  *result = off_1021C3188;
  result[1] = 0;
  return result;
}

void sub_101639174(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3188;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1016391B4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3188;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101639208(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3188;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101639284(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016392D4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163949C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1016394B8(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_10163951C(_QWORD *result)
{
  *result = off_1021C31C0;
  result[1] = 0;
  return result;
}

void sub_10163952C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C31C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163956C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C31C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1016395C0(_QWORD *result, uint64_t a2)
{
  *result = off_1021C31C0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163963C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163968C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101639860(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10163987C(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_1016398EC(_QWORD *result)
{
  *result = off_1021C31F8;
  result[1] = 0;
  return result;
}

void sub_1016398FC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C31F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163993C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C31F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101639990(_QWORD *result, uint64_t a2)
{
  *result = off_1021C31F8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101639A50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101639AA0(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101639C74(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101639C90(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_101639D00(_QWORD *result)
{
  *result = off_1021C3230;
  result[1] = 0;
  return result;
}

void sub_101639D10(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3230;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101639D50(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3230;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101639DA4(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3230;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101639E20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101639E70(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163A044(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10163A060(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_10163A0D0(_QWORD *result)
{
  *result = off_1021C3268;
  result[1] = 0;
  return result;
}

void sub_10163A0E0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3268;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163A120(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3268;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10163A174(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3268;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163A1F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163A240(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163A414(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10163A430(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_10163A4A0(_QWORD *result)
{
  *result = off_1021C32A0;
  result[1] = 0;
  return result;
}

void sub_10163A4B0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C32A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163A4F0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C32A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10163A544(_QWORD *result, uint64_t a2)
{
  *result = off_1021C32A0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163A5C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163A614(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

_QWORD *sub_10163A7E8(_QWORD *result)
{
  *result = off_1021C32D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_10163A7FC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10163A818(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

void sub_10163A888(void **a1)
{
  void **v2;

  *a1 = off_1021C32D8;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10163A8D0(void **a1)
{
  void **v2;

  *a1 = off_1021C32D8;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_10163A92C(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C32D8;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_10163A990();
  return result;
}

void sub_10163A990()
{
  operator new();
}

void sub_10163AAC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10163AAE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "workoutPriors");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163AB4C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2)
        sub_10163ACEC();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_10163ACEC()
{
  operator new();
}

void sub_10163AE24(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10163AE40(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 2u))
    v5 = *v2++;
  return result;
}

_QWORD *sub_10163AE88(_QWORD *result)
{
  *result = off_1021C3310;
  result[1] = 0;
  return result;
}

void sub_10163AE98(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3310;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163AED8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3310;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10163AF2C(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3310;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163AFA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163AFF8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163B1C0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

void sub_10163B1DC()
{
  operator new();
}

void sub_10163B35C()
{
  operator new();
}

double sub_10163B424@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;

  v3 = *(_DWORD *)(a1 + 36);
  v4 = sub_101677FE0(a2);
  v5 = v4[28];
  *(_OWORD *)(v4 + 7) = *(_OWORD *)a1;
  v6 = *(_QWORD *)(a1 + 24);
  v4[2] = *(_QWORD *)(a1 + 16);
  v4[20] = v6;
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  *((_BYTE *)v4 + 220) = (v7 & 0xFFFFFFBF) == 0;
  v9 = 1;
  if (v8 && v8 != 64)
    v9 = v8 == 256;
  *((_BYTE *)v4 + 217) = v9;
  v10 = *(_DWORD *)(a1 + 40);
  *((_BYTE *)v4 + 221) = (v10 & 0xFFFFFFBF) == 0;
  *((_BYTE *)v4 + 218) = (v3 & 4) == 0;
  v11 = *(_QWORD *)(a1 + 56);
  v4[19] = *(_QWORD *)(a1 + 48);
  v4[15] = v11;
  *((_DWORD *)v4 + 51) = v8;
  *((_DWORD *)v4 + 52) = v7;
  *((_DWORD *)v4 + 53) = v10;
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 72);
  v14 = *(_DWORD *)(a1 + 76);
  v15 = *(_DWORD *)(a1 + 80);
  *((_DWORD *)v4 + 49) = *(_DWORD *)(a1 + 84);
  *((_DWORD *)v4 + 50) = v13;
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  v4[3] = *(_QWORD *)(a1 + 136);
  v4[4] = v17;
  LOBYTE(v13) = *(_BYTE *)(a1 + 120);
  *(int8x16_t *)(v4 + 17) = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v19 = *(_QWORD *)(a1 + 176);
  v20 = *(_QWORD *)(a1 + 184);
  v4[5] = v16;
  v4[6] = v19;
  v22 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 152);
  v23 = *(_QWORD *)(a1 + 192);
  v4[13] = v12;
  v4[14] = v23;
  v24 = *(_QWORD *)(a1 + 112);
  v4[9] = v21;
  v4[10] = v24;
  v4[21] = v18;
  *((double *)v4 + 22) = (double)v14;
  v4[23] = v20;
  result = (double)v15;
  *((_BYTE *)v4 + 219) = v13;
  v4[28] = v5 | 0x7DF7F7FFELL;
  *((double *)v4 + 11) = (double)v15;
  v4[12] = v22;
  return result;
}

double sub_10163B538@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  __int16 v6;
  double result;
  int v8;

  v3 = sub_101551324(a2);
  *(_BYTE *)(v3 + 84) = *(_BYTE *)(a1 + 68);
  *(_WORD *)(v3 + 85) = *(_WORD *)(a1 + 69);
  v5 = *(_DWORD *)(a1 + 72);
  v4 = *(_DWORD *)(a1 + 76);
  v6 = *(_WORD *)(v3 + 88);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a1 + 16);
  *(int8x16_t *)(v3 + 56) = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 24);
  result = *(double *)(a1 + 56);
  *(double *)(v3 + 24) = result;
  v8 = *(_DWORD *)(a1 + 64);
  *(_WORD *)(v3 + 88) = v6 | 0x3FFF;
  *(_DWORD *)(v3 + 76) = v8;
  *(_DWORD *)(v3 + 80) = v5;
  *(_DWORD *)(v3 + 72) = v4;
  return result;
}

__n128 sub_10163B5B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v3 = sub_101551F6C(a2);
  v4 = *(_BYTE *)(v3 + 48);
  *(_BYTE *)(v3 + 44) = *(_BYTE *)(a1 + 36);
  result = *(__n128 *)a1;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v3 + 48) = v4 | 0x3F;
  *(_OWORD *)(v3 + 24) = v6;
  return result;
}

uint64_t sub_10163B600@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int16 v4;
  __int128 v5;
  int8x16_t v6;

  result = sub_101550B44(a2);
  v4 = *(_WORD *)(result + 76);
  *(_QWORD *)(result + 48) = *((_QWORD *)a1 + 4);
  *(int8x16_t *)(result + 56) = vextq_s8(*(int8x16_t *)((char *)a1 + 40), *(int8x16_t *)((char *)a1 + 40), 8uLL);
  v5 = *a1;
  v6 = vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL);
  *(_BYTE *)(result + 73) = *((_DWORD *)a1 + 14) == 0;
  *(_WORD *)(result + 76) = v4 | 0x2FE;
  *(_OWORD *)(result + 16) = v5;
  *(int8x16_t *)(result + 32) = v6;
  return result;
}

double sub_10163B664@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  double result;
  uint64_t v8;
  int v9;

  v3 = sub_10161AD60(a2);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 24);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  v4 = *(_QWORD *)(a1 + 72);
  *(int32x2_t *)(v3 + 84) = vrev64_s32(*(int32x2_t *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_WORD *)(v3 + 92);
  *(_QWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 72) = v5;
  result = *(double *)(a1 + 80);
  LODWORD(v4) = *(_DWORD *)(a1 + 88);
  *(double *)(v3 + 24) = (double)v4;
  v8 = *(_QWORD *)(a1 + 104);
  *(double *)(v3 + 48) = result;
  *(_QWORD *)(v3 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 112);
  *(_WORD *)(v3 + 92) = v6 | 0xFFF;
  *(_DWORD *)(v3 + 80) = v9;
  return result;
}

float sub_10163B6DC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  int v6;
  float result;
  char v8;

  v3 = sub_1015DB940(a2);
  v4 = *(_WORD *)(v3 + 60);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 48);
  v6 = *(unsigned __int16 *)(a1 + 54);
  *(_DWORD *)(v3 + 48) = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(v3 + 52) = v5;
  *(_DWORD *)(v3 + 44) = v6;
  result = *(float *)(a1 + 56);
  *(float *)(v3 + 24) = result;
  v8 = *(_BYTE *)(a1 + 60);
  *(_WORD *)(v3 + 60) = v4 | 0x7FF;
  *(_BYTE *)(v3 + 56) = v8;
  return result;
}

uint64_t sub_10163B750(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v11;
  char v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  v12 = 0;
  if ((objc_msgSend(v2, "fileExistsAtPath:isDirectory:", v4, &v12) & 1) != 0)
  {
    if (!v12)
    {
LABEL_15:
      v8 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    v5 = objc_msgSend(v2, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v4, 1, 0, &v11);
    v6 = v11;
    v7 = v6;
    if ((v5 & 1) == 0)
    {
      if (qword_10230F968 != -1)
        dispatch_once(&qword_10230F968, &stru_1021C3D88);
      v9 = qword_10230F960;
      if (os_log_type_enabled((os_log_t)qword_10230F960, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        v14 = v4;
        v15 = 2114;
        v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Unable to create directory at path: %{public}@, error, %{public}@", buf, 0x16u);
      }

      goto LABEL_15;
    }

  }
  v8 = 1;
LABEL_16:

  return v8;
}

void sub_10163B8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10163B8FC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  _BOOL4 v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  const void **v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  char v34;
  _BYTE v35[128];
  _BYTE buf[12];
  __int16 v37;
  id v38;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if (*((char *)a1 + 23) >= 0)
    v7 = a1;
  else
    v7 = (uint64_t *)*a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v8));
  v33 = 0;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v9, 0, 4, &v33));
  v10 = v33;

  if (v10)
  {
    if (qword_10230F968 != -1)
      dispatch_once(&qword_10230F968, &stru_1021C3D88);
    v11 = qword_10230F960;
    if (os_log_type_enabled((os_log_t)qword_10230F960, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0)
        v12 = a1;
      else
        v12 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v12;
      v37 = 2114;
      v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
  else
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v15 = v28;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v30 != v17)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "pathExtension"));
          v21 = objc_msgSend(v20, "compare:options:", v14, 1) == 0;

          if (v21)
          {
            v22 = (char *)objc_msgSend(objc_retainAutorelease(v19), "fileSystemRepresentation");
            *(_QWORD *)buf = v22;
            v23 = a3[1];
            if (v23 >= a3[2])
            {
              v24 = sub_10163BE48(a3, (char **)buf);
            }
            else
            {
              sub_1015A2E04((_QWORD *)a3[1], v22);
              v24 = v23 + 24;
              a3[1] = v23 + 24;
            }
            a3[1] = v24;
          }
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
      }
      while (v16);
    }

    v25 = (const void **)a3[1];
    v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *a3) >> 3));
    if (v25 == (const void **)*a3)
      v27 = 0;
    else
      v27 = v26;
    sub_10163BF4C(*a3, v25, (uint64_t)&v34, v27, 1);

  }
}

void sub_10163BC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 128) = v10;
  sub_100259608((void ***)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_10163BC98(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  NSObject *v7;
  uint64_t *v8;
  id v9;
  uint8_t buf[4];
  uint64_t *v11;
  __int16 v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  v9 = 0;
  v5 = objc_msgSend(v2, "removeItemAtPath:error:", v4, &v9);
  v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_10230F968 != -1)
      dispatch_once(&qword_10230F968, &stru_1021C3D88);
    v7 = qword_10230F960;
    if (os_log_type_enabled((os_log_t)qword_10230F960, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446466;
      v11 = v8;
      v12 = 2114;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Unable to delete file %{public}s, error, %{public}@", buf, 0x16u);
    }
  }

}

void sub_10163BDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10163BE18(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v2 = (void *)qword_10230F960;
  qword_10230F960 = (uint64_t)v1;

}

uint64_t sub_10163BE48(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  sub_1015A2E04(v14, *a2);
  v15 = v14 + 24;
  sub_100074D44(a1, &v13);
  v11 = a1[1];
  sub_100074DB8((uint64_t)&v13);
  return v11;
}

void sub_10163BF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10163BF4C(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

void sub_10163C2F0(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (sub_100279008(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_100279008(a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_10163C410(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (sub_100279008(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_100279008(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_10163C514(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_100279008(a4, a2, a1);
  result = sub_100279008(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_100279008(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_100279008(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_10163C65C(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_100279008(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_100279008(a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_100279008(a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_100279008(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_100279008(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_100279008(a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t sub_10163C7EC(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_100279008(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_100279008(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_100279008(a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (sub_100279008(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_100279008(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL sub_10163C978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (sub_100279008(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_10163C514((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_10163CBA8(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_10163CC90(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_10163C514((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_100279008(a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_100279008(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_10163CBA8(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_10163C514((const void **)a1, a2, a3, a5);
  if (sub_100279008(a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (sub_100279008(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_100279008(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_10163CC90(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_10163CBA8(a1, a2, a3, a4, a6);
  if (sub_100279008(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (sub_100279008(a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (sub_100279008(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_100279008(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *sub_10163CDB0(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10163CFF8(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_100279008(a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_10163CFF8(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_10163D18C(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_10163D264(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_10163CFE0(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_10163CFF8(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_100279008(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_100279008(a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_100279008(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_100279008(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10163D18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_100279008(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_10163D264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_100279008(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_100279008(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t sub_10163D360(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3DB8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10163D378(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10163D39C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)a1 = &off_1021C3DB8;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_10163D40C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163D49C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_10163D768(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  return result;
}

uint64_t sub_10163D7E0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3DF0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_10163D7F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10163D81C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)result = &off_1021C3DF0;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 64) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 60);
    v3 |= 0x800u;
    *(_WORD *)(result + 64) = v3;
    *(_BYTE *)(result + 60) = v5;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 16) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_BYTE *)(a2 + 61);
  v3 |= 0x1000u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 61) = v8;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 44) = v10;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 28) = v12;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 32) = v13;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 36) = v14;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(result + 64) = v3 | 0x200;
    *(_DWORD *)(result + 52) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 24) = v15;
  if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_10163D9A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "classificationType", *(_DWORD *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intervalSleepBeginToSleepDetected", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intervalSleepDetectedToGazeDetected", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intervalSleepDetectedToWakeDetected", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intervalWakeBeginToWakeDetected", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "intervalWakeDetectedToGazeDetected", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "intervalWakeDetectedToSleepDetected", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "shouldNotify", *(_BYTE *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "shouldNotifyStats", *(_BYTE *)(a1 + 61));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "sleepType", *(_DWORD *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 64) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163DB74(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 60) = v22;
              goto LABEL_117;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v45 = v23++;
                  v46 = *(_BYTE *)(v24 + v45);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_105;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_106;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 56) = v27;
              goto LABEL_117;
            case 4u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 61) = v30;
              goto LABEL_117;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 9u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_100:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_101:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 4u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v49 = v31++;
                  v50 = *(_BYTE *)(v32 + v49);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_110;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_111;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 24) = v35;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_115;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_116;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 52) = v41;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10163E204(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 61), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0xDu);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0xCu);
  if ((*(_WORD *)(v3 + 64) & 0x200) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0xDu);
  return result;
}

uint64_t sub_10163E394(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3E28;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_10163E3AC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10163E3D0(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  *(_QWORD *)result = &off_1021C3E28;
  *(_DWORD *)(result + 100) = 0;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_WORD *)(result + 100) = 256;
    *(_QWORD *)(result + 72) = v4;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 96);
    v3 |= 0x1000u;
    *(_WORD *)(result + 100) = v3;
    *(_DWORD *)(result + 96) = v5;
    v2 = *(_WORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *(_QWORD *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 100) = v3;
    *(_QWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 48) = v9;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 32) = v10;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 8) = v11;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 80) = v12;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 16) = v13;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 24) = v14;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(result + 100) = v3 | 0x800;
    *(_DWORD *)(result + 92) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v15;
  if ((*(_WORD *)(a2 + 100) & 0x800) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_10163E558(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "locationLoggingEnabled", *(_DWORD *)(a1 + 92));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 96));
    if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x1000) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x200) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163E728(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 96) = v25;
              goto LABEL_113;
            case 3u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 100) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 100) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_60:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_113;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_106;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_107;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_113;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_112;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_111;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_112;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *(_DWORD *)(a1 + 92) = v37;
LABEL_113:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_113;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10163ED98(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72), 1u);
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 2u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 9u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xDu);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xCu);
  if ((*(_WORD *)(v3 + 100) & 0x800) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xDu);
  return result;
}

uint64_t sub_10163EF28(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3E60;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10163EF40(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10163EF64(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021C3E60;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10163EF90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "lockScreen", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163EFDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163F168(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

_QWORD *sub_10163F188(_QWORD *result)
{
  *result = off_1021C3E98;
  result[1] = 0;
  return result;
}

void sub_10163F198(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3E98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163F1D8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C3E98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10163F22C(_QWORD *result, uint64_t a2)
{
  *result = off_1021C3E98;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163F2A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163F2F8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163F4C0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10163F4DC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3ED0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10163F4F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10163F518(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C3ED0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10163F568(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163F5D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163F8F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10163F950(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3F08;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10163F964(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021C3F08;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_10163F9A4(PB::Base *a1)
{
  sub_10163F964(a1);
  operator delete();
}

uint64_t sub_10163F9C8(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  char v4;

  *(_QWORD *)result = &off_1021C3F08;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) |= 1u;
    *(_DWORD *)(result + 16) = v3;
    v2 = *(_BYTE *)(a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *(_BYTE *)(a2 + 20);
    *(_BYTE *)(result + 24) |= 2u;
    *(_BYTE *)(result + 20) = v4;
  }
  return result;
}

uint64_t sub_10163FAB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accessoryType", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "isAttached", *(_BYTE *)(a1 + 20));
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "uuid");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163FB30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v21 = *((_QWORD *)this + 1);
        if (v21 >= *((_QWORD *)this + 2))
        {
          v24 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) = v22;
          v24 = v23 != 0;
        }
        *(_BYTE *)(a1 + 20) = v24;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v25 = *((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
        {
          v34 = 0;
          v35 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v36 = v25 + 1;
            v37 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)this + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v25 = v36;
            v14 = v35++ > 8;
            if (v14)
            {
LABEL_44:
              LODWORD(v30) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v31 = v25 + 1;
            *((_QWORD *)this + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              break;
            v28 += 7;
            v25 = v31;
            v14 = v29++ > 8;
            if (v14)
              goto LABEL_44;
          }
        }
LABEL_48:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163FE18(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    result = PB::Writer::write(this, v4, 1);
  v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
    v5 = *(_BYTE *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 20), 3u);
  return result;
}

uint64_t sub_10163FE84(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3F40;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10163FE9C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10163FEC0(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021C3F40;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10163FEEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isCharging", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163FF38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016400C4(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

uint64_t sub_1016400E4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3F78;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1016400FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101640120(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)result = &off_1021C3F78;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v6;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 36) = v3 | 2;
    *(_DWORD *)(result + 16) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 20) = v8;
  if ((*(_BYTE *)(a2 + 36) & 2) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_1016401E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016402D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_55;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_54:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_55:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_61;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_59;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_60;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_61:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10164065C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 5u);
  if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  return result;
}

double sub_101640728(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C3FB0;
  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_101640758(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1021C3FB0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_1016407C8(PB::Base *a1)
{
  sub_101640758(a1);
  operator delete();
}

uint64_t sub_1016407EC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1021C3FB0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if ((*(_BYTE *)(a2 + 112) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = 1;
    *(_QWORD *)(a1 + 104) = v6;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_1016408C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 32);
  v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "biasEst", v7);
  }
  v8 = *(float **)(a1 + 8);
  v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "biasEstVar", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "residual", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "temperature", v16);
  }
  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1016409D0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  _DWORD *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  char *v120;
  int v121;
  char *v122;
  int v123;
  char *v124;
  int v125;
  unint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 80);
    v130 = a1 + 96;
    v131 = a1 + 72;
    v12 = (void **)(a1 + 8);
    v13 = (void **)(a1 + 32);
    v128 = a1 + 48;
    v129 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 112) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_196;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_198;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v86 = *(char **)(a1 + 40);
            v85 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v86 >= v85)
            {
              v94 = (char *)*v13;
              v95 = (v86 - (_BYTE *)*v13) >> 2;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62)
LABEL_207:
                sub_100259694();
              v97 = v85 - (_QWORD)v94;
              if (v97 >> 1 > v96)
                v96 = v97 >> 1;
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                v98 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v98 = v96;
              if (v98)
              {
                v99 = (char *)sub_100260634(v128, v98);
                v94 = *(char **)(a1 + 32);
                v86 = *(char **)(a1 + 40);
              }
              else
              {
                v99 = 0;
              }
              v118 = &v99[4 * v95];
              *(_DWORD *)v118 = 0;
              v87 = v118 + 4;
              while (v86 != v94)
              {
                v119 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v118;
              *(_QWORD *)(a1 + 40) = v87;
              *(_QWORD *)(a1 + 48) = &v99[4 * v98];
              if (v94)
                operator delete(v94);
            }
            else
            {
              *(_DWORD *)v86 = 0;
              v87 = v86 + 4;
            }
            *(_QWORD *)(a1 + 40) = v87;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 40);
            v31 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v13;
              v35 = (v32 - (_BYTE *)*v13) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_207;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v128, v38);
                v34 = *(char **)(a1 + 32);
                v32 = *(char **)(a1 + 40);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v40;
              *(_QWORD *)(a1 + 40) = v33;
              *(_QWORD *)(a1 + 48) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 40) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_125;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v89 = *(char **)(a1 + 16);
            v88 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v89 >= v88)
            {
              v100 = (char *)*v12;
              v101 = (v89 - (_BYTE *)*v12) >> 2;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62)
LABEL_208:
                sub_100259694();
              v103 = v88 - (_QWORD)v100;
              if (v103 >> 1 > v102)
                v102 = v103 >> 1;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
              {
                v105 = (char *)sub_100260634(v129, v104);
                v100 = *(char **)(a1 + 8);
                v89 = *(char **)(a1 + 16);
              }
              else
              {
                v105 = 0;
              }
              v120 = &v105[4 * v101];
              *(_DWORD *)v120 = 0;
              v87 = v120 + 4;
              while (v89 != v100)
              {
                v121 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v120;
              *(_QWORD *)(a1 + 16) = v87;
              *(_QWORD *)(a1 + 24) = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *(_DWORD *)v89 = 0;
              v87 = v89 + 4;
            }
            *(_QWORD *)(a1 + 16) = v87;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_208;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100260634(v129, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_125;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v91 = *(char **)(a1 + 88);
            v90 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v91 >= v90)
            {
              v106 = (char *)*v11;
              v107 = (v91 - (_BYTE *)*v11) >> 2;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62)
LABEL_209:
                sub_100259694();
              v109 = v90 - (_QWORD)v106;
              if (v109 >> 1 > v108)
                v108 = v109 >> 1;
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                v110 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v110 = v108;
              if (v110)
              {
                v111 = (char *)sub_100260634(v130, v110);
                v106 = *(char **)(a1 + 80);
                v91 = *(char **)(a1 + 88);
              }
              else
              {
                v111 = 0;
              }
              v122 = &v111[4 * v107];
              *(_DWORD *)v122 = 0;
              v87 = v122 + 4;
              while (v91 != v106)
              {
                v123 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v122;
              *(_QWORD *)(a1 + 88) = v87;
              *(_QWORD *)(a1 + 96) = &v111[4 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_DWORD *)v91 = 0;
              v87 = v91 + 4;
            }
            *(_QWORD *)(a1 + 88) = v87;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0)
            return 0;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            v60 = *(char **)(a1 + 88);
            v59 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v60 >= v59)
            {
              v62 = (char *)*v11;
              v63 = (v60 - (_BYTE *)*v11) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                goto LABEL_209;
              v65 = v59 - (_QWORD)v62;
              if (v65 >> 1 > v64)
                v64 = v65 >> 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                v66 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)sub_100260634(v130, v66);
                v62 = *(char **)(a1 + 80);
                v60 = *(char **)(a1 + 88);
              }
              else
              {
                v67 = 0;
              }
              v68 = &v67[4 * v63];
              *(_DWORD *)v68 = 0;
              v61 = v68 + 4;
              while (v60 != v62)
              {
                v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v68;
              *(_QWORD *)(a1 + 88) = v61;
              *(_QWORD *)(a1 + 96) = &v67[4 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_DWORD *)v60 = 0;
              v61 = v60 + 4;
            }
            *(_QWORD *)(a1 + 88) = v61;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
            v58 = *((_QWORD *)this + 2);
            v57 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v57;
          }
          goto LABEL_125;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0)
              return 0;
            v71 = *((_QWORD *)this + 1);
            v72 = *((_QWORD *)this + 2);
            while (v71 < v72 && !*((_BYTE *)this + 24))
            {
              v74 = *(char **)(a1 + 64);
              v73 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v74 >= v73)
              {
                v76 = (char *)*v10;
                v77 = (v74 - (_BYTE *)*v10) >> 2;
                v78 = v77 + 1;
                if ((unint64_t)(v77 + 1) >> 62)
                  goto LABEL_210;
                v79 = v73 - (_QWORD)v76;
                if (v79 >> 1 > v78)
                  v78 = v79 >> 1;
                if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
                  v80 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v80 = v78;
                if (v80)
                {
                  v81 = (char *)sub_100260634(v131, v80);
                  v76 = *(char **)(a1 + 56);
                  v74 = *(char **)(a1 + 64);
                }
                else
                {
                  v81 = 0;
                }
                v82 = &v81[4 * v77];
                *(_DWORD *)v82 = 0;
                v75 = v82 + 4;
                while (v74 != v76)
                {
                  v83 = *((_DWORD *)v74 - 1);
                  v74 -= 4;
                  *((_DWORD *)v82 - 1) = v83;
                  v82 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v82;
                *(_QWORD *)(a1 + 64) = v75;
                *(_QWORD *)(a1 + 72) = &v81[4 * v80];
                if (v76)
                  operator delete(v76);
              }
              else
              {
                *(_DWORD *)v74 = 0;
                v75 = v74 + 4;
              }
              *(_QWORD *)(a1 + 64) = v75;
              v84 = *((_QWORD *)this + 1);
              if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v75 - 1) = *(_DWORD *)(*(_QWORD *)this + v84);
              v72 = *((_QWORD *)this + 2);
              v71 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v71;
            }
LABEL_125:
            PB::Reader::recallMark(this, v132);
          }
          else
          {
            v93 = *(char **)(a1 + 64);
            v92 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v93 >= v92)
            {
              v112 = (char *)*v10;
              v113 = (v93 - (_BYTE *)*v10) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
LABEL_210:
                sub_100259694();
              v115 = v92 - (_QWORD)v112;
              if (v115 >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)sub_100260634(v131, v116);
                v112 = *(char **)(a1 + 56);
                v93 = *(char **)(a1 + 64);
              }
              else
              {
                v117 = 0;
              }
              v124 = &v117[4 * v113];
              *(_DWORD *)v124 = 0;
              v87 = v124 + 4;
              while (v93 != v112)
              {
                v125 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v124;
              *(_QWORD *)(a1 + 64) = v87;
              *(_QWORD *)(a1 + 72) = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *(_DWORD *)v93 = 0;
              v87 = v93 + 4;
            }
            *(_QWORD *)(a1 + 64) = v87;
LABEL_194:
            v126 = *((_QWORD *)this + 1);
            if (v126 <= 0xFFFFFFFFFFFFFFFBLL && v126 + 4 <= *((_QWORD *)this + 2))
            {
              *(v87 - 1) = *(_DWORD *)(*(_QWORD *)this + v126);
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_198:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_196:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_199:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_199;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1016412C0(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 112) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 104), 1u);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = (float *)v3[1];
  v8 = (float *)v3[2];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = (float *)v3[10];
  v11 = (float *)v3[11];
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v14 = (float *)v3[7];
  v13 = (float *)v3[8];
  while (v14 != v13)
  {
    v15 = *v14++;
    result = PB::Writer::write(this, v15, 5u);
  }
  return result;
}

uint64_t sub_101641380(uint64_t result)
{
  *(_QWORD *)result = &off_1021C3FE8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101641398(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016413BC(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)result = &off_1021C3FE8;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 44) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_BYTE *)(a2 + 42);
  v3 |= 0x40u;
  *(_BYTE *)(result + 44) = v3;
  *(_BYTE *)(result + 42) = v8;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_16:
    v10 = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_BYTE *)(result + 41) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_BYTE *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_BYTE *)(result + 40) = v9;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_10164149C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "exitingSaturation", *(_BYTE *)(a1 + 40));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extendedSaturation", *(_BYTE *)(a1 + 41));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "shiftInSaturation", *(_BYTE *)(a1 + 42));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timeSinceLastRemag", *(_QWORD *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeSinceLastRemagTrigger", *(_QWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 8) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "triggerCount", *(_QWORD *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016415AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_97;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_85:
                    v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_86:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_90:
                    v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_91:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_95:
                    v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_96:
              *(_QWORD *)(a1 + 32) = v37;
LABEL_97:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 42) = v40;
              goto LABEL_97;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 40) = v42;
              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 41) = v44;
              goto LABEL_97;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101641AF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 42), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 41), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 6u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 41), 7u);
  return result;
}

uint64_t sub_101641BD8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4020;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101641BF0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101641C14(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)result = &off_1021C4020;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_BYTE *)(a2 + 15);
    v3 = 128;
    *(_WORD *)(result + 20) = 128;
    *(_BYTE *)(result + 15) = v4;
    v2 = *(_WORD *)(a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 9);
    v3 |= 2u;
    *(_WORD *)(result + 20) = v3;
    *(_BYTE *)(result + 9) = v5;
    v2 = *(_WORD *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_BYTE *)(a2 + 11);
    v3 |= 8u;
    *(_WORD *)(result + 20) = v3;
    *(_BYTE *)(result + 11) = v6;
    v2 = *(_WORD *)(a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 13);
  v3 |= 0x20u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 13) = v7;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_BYTE *)(a2 + 14);
  v3 |= 0x40u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 14) = v8;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_BYTE *)(a2 + 12);
  v3 |= 0x10u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 12) = v9;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 16);
  v3 |= 0x100u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 16) = v10;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      return result;
LABEL_20:
    v12 = *(_BYTE *)(a2 + 8);
    *(_WORD *)(result + 20) = v3 | 1;
    *(_BYTE *)(result + 8) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_BYTE *)(a2 + 10);
  v3 |= 4u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 10) = v11;
  if ((*(_WORD *)(a2 + 20) & 1) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_101641D2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "isAppleMapsRoutingActive", *(_BYTE *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBicycleRouting", *(_BYTE *)(a1 + 9));
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isBicycleRoutingActive", *(_BYTE *)(a1 + 10));
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isPedestrianRouting", *(_BYTE *)(a1 + 11));
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isPedestrianRoutingActive", *(_BYTE *)(a1 + 12));
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isStepTypeBicycle", *(_BYTE *)(a1 + 13));
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "isVehicularRouting", *(_BYTE *)(a1 + 15));
    if ((*(_WORD *)(a1 + 20) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isStepTypePedestrian", *(_BYTE *)(a1 + 14));
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "isVehicularRoutingActive", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101641E7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 20) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_60;
            case 2u:
              *(_WORD *)(a1 + 20) |= 2u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 9) = v24;
              goto LABEL_60;
            case 3u:
              *(_WORD *)(a1 + 20) |= 8u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 11) = v26;
              goto LABEL_60;
            case 4u:
              *(_WORD *)(a1 + 20) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 13) = v28;
              goto LABEL_60;
            case 5u:
              *(_WORD *)(a1 + 20) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 14) = v30;
              goto LABEL_60;
            case 6u:
              *(_WORD *)(a1 + 20) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 12) = v32;
              goto LABEL_60;
            case 7u:
              *(_WORD *)(a1 + 20) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 16) = v34;
              goto LABEL_60;
            case 8u:
              *(_WORD *)(a1 + 20) |= 4u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 10) = v36;
              goto LABEL_60;
            case 9u:
              *(_WORD *)(a1 + 20) |= 1u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 8) = v38;
              goto LABEL_60;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
LABEL_60:
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101642244(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 20);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(result + 15), 1u);
    v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 9), 2u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 11), 3u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 13), 4u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 14), 5u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 12), 6u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 16), 7u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 8), 9u);
  }
LABEL_18:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 10), 8u);
  if ((*(_WORD *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 8), 9u);
  return result;
}

uint64_t sub_101642364(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4058;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10164237C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1016423A0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;
  int v5;

  *(_QWORD *)a1 = &off_1021C4058;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(float *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *(float *)(a2 + 12);
      *(_BYTE *)(a1 + 28) = v3 | 2;
      *(float *)(a1 + 12) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 28) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_101642448(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "mets", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "metsDiff", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "metsWR", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "metsHR", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101642518(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_42:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101642860(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  return result;
}

_QWORD *sub_101642910(_QWORD *result)
{
  *result = &off_1021C4090;
  result[23] = 0;
  return result;
}

void sub_101642928(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10164294C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  int v27;

  *(_QWORD *)a1 = &off_1021C4090;
  *(_QWORD *)(a1 + 184) = 0;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_QWORD *)(a1 + 184) = 4;
    *(_QWORD *)(a1 + 24) = v4;
    v2 = *(_QWORD *)(a2 + 184);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    v3 |= 1uLL;
    *(_QWORD *)(a1 + 184) = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_QWORD *)(a2 + 184);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x200000uLL;
    *(_QWORD *)(a1 + 184) = v3;
    *(_DWORD *)(a1 + 104) = v5;
    v2 = *(_QWORD *)(a2 + 184);
    if ((v2 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000000000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 164);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 164) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v6 = *(_BYTE *)(a2 + 181);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 181) = v6;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *(_BYTE *)(a2 + 177);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 177) = v7;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v8 = *(_BYTE *)(a2 + 180);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 180) = v8;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 76) = v9;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v4 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v10 = *(_BYTE *)(a2 + 176);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 176) = v10;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v11 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 72) = v11;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v12 = *(_DWORD *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 152) = v12;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v13 = *(_DWORD *)(a2 + 172);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 172) = v13;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x100000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v14 = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 100) = v14;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v15 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 88) = v15;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v16 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 84) = v16;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v17 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 92) = v17;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v18 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 96) = v18;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v19 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 80) = v19;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v20 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 60) = v20;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v21 = *(_DWORD *)(a2 + 168);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 168) = v21;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x1000) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v22 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 68) = v22;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v23 = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 136) = v23;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v24 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 36) = v24;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *(_DWORD *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 156) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v25 = *(_BYTE *)(a2 + 178);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 178) = v25;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *(_DWORD *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 160) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v26 = *(_BYTE *)(a2 + 179);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 179) = v26;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20) == 0)
  {
LABEL_36:
    if ((v2 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v27 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 40) = v27;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80) == 0)
  {
LABEL_37:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x40) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40) == 0)
  {
LABEL_41:
    if ((v2 & 0x100) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x100) == 0)
  {
LABEL_42:
    if ((v2 & 0x200) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x200) == 0)
  {
LABEL_43:
    if ((v2 & 0x400000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x400000) == 0)
  {
LABEL_44:
    if ((v2 & 0x800000) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x800000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_92;
  }
LABEL_91:
  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  if ((*(_QWORD *)(a2 + 184) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_92:
  LODWORD(v4) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 184) = v3 | (unint64_t)&_mh_execute_header;
  *(_DWORD *)(a1 + 148) = v4;
  return *(float *)&v4;
}

uint64_t sub_101642E54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentage", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 184);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageIsValid", *(_BYTE *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "asymmetryPercentageRejectionStatus", *(_DWORD *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "boundaryType", *(_DWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "cycleTimeEntropy", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "cycleTimeMean", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "cycleTimePoincareSD1", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "cycleTimePoincareSD2", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "deviceSide", *(_DWORD *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "doubleSupportPercentageIsValid", *(_BYTE *)(a1 + 177));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "doubleSupportPercentageRejectionStatus", *(_DWORD *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "invalidGradePercentage", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "isHeightSet", *(_BYTE *)(a1 + 178));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "isWeightSet", *(_BYTE *)(a1 + 179));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "numGaitMetrics", *(_DWORD *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rejectionStatus", *(_DWORD *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant", *(_DWORD *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed", *(_DWORD *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning", *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular", *(_DWORD *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist", *(_DWORD *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle", *(_DWORD *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "stepLengthEntropy", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "stepLengthIsValid", *(_BYTE *)(a1 + 180));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "stepLengthPoincareSD1", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "stepLengthPoincareSD2", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "stepLengthRejectionStatus", *(_DWORD *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "terminationReason", *(_DWORD *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(this, "walkingSpeedRejectionStatus", *(_DWORD *)(a1 + 168));
    if ((*(_QWORD *)(a1 + 184) & 0x4000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(this, "walkingSpeedIsValid", *(_BYTE *)(a1 + 181));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v5 & 0x4000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 172));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101643424(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  BOOL v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  unint64_t v214;
  char v215;
  char v216;
  unsigned int v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 184) |= 4uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_62;
        case 2u:
          *(_QWORD *)(a1 + 184) |= 1uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_62;
        case 3u:
          *(_QWORD *)(a1 + 184) |= 0x200000uLL;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_364;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }
          v204 = 0;
          v205 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v206 = v23 + 1;
              v207 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                v23 = v206;
                v14 = v205++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_364:
          *(_DWORD *)(a1 + 104) = v28;
          goto LABEL_356;
        case 4u:
          *(_QWORD *)(a1 + 184) |= 0x1000000000uLL;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_354;
        case 5u:
          *(_QWORD *)(a1 + 184) |= 0x100000000000uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 >= *((_QWORD *)this + 2))
          {
            v35 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v33 = v32 + 1;
            v34 = *(unsigned __int8 *)(*(_QWORD *)this + v32);
            *((_QWORD *)this + 1) = v33;
            v35 = v34 != 0;
          }
          *(_BYTE *)(a1 + 181) = v35;
          goto LABEL_356;
        case 6u:
          *(_QWORD *)(a1 + 184) |= 0x800uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_354;
        case 7u:
          *(_QWORD *)(a1 + 184) |= 0x10000000000uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 >= *((_QWORD *)this + 2))
          {
            v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)this + v37);
            *((_QWORD *)this + 1) = v38;
            v40 = v39 != 0;
          }
          *(_BYTE *)(a1 + 177) = v40;
          goto LABEL_356;
        case 8u:
          *(_QWORD *)(a1 + 184) |= 0x2000000uLL;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_354;
        case 9u:
          *(_QWORD *)(a1 + 184) |= 0x80000000000uLL;
          v42 = *((_QWORD *)this + 1);
          if (v42 >= *((_QWORD *)this + 2))
          {
            v45 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v43 = v42 + 1;
            v44 = *(unsigned __int8 *)(*(_QWORD *)this + v42);
            *((_QWORD *)this + 1) = v43;
            v45 = v44 != 0;
          }
          *(_BYTE *)(a1 + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *(_QWORD *)(a1 + 184) |= 0x4000uLL;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_368;
              v49 += 7;
              v46 = v52;
              v14 = v50++ > 8;
            }
            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }
          v208 = 0;
          v209 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v210 = v46 + 1;
              v211 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                v46 = v210;
                v14 = v209++ > 8;
                if (v14)
                  goto LABEL_241;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v51) = 0;
            }
            break;
          }
LABEL_368:
          *(_DWORD *)(a1 + 76) = v51;
          goto LABEL_356;
        case 0xBu:
          *(_QWORD *)(a1 + 184) |= 2uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v54);
LABEL_62:
          v55 = *((_QWORD *)this + 1) + 8;
          goto LABEL_355;
        case 0xCu:
          *(_QWORD *)(a1 + 184) |= 8uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_354;
        case 0xDu:
          *(_QWORD *)(a1 + 184) |= 0x8000000000uLL;
          v57 = *((_QWORD *)this + 1);
          if (v57 >= *((_QWORD *)this + 2))
          {
            v60 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v58 = v57 + 1;
            v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
            *((_QWORD *)this + 1) = v58;
            v60 = v59 != 0;
          }
          *(_BYTE *)(a1 + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *(_QWORD *)(a1 + 184) |= 0x2000uLL;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_372;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }
          v212 = 0;
          v213 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v214 = v61 + 1;
              v215 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                v61 = v214;
                v14 = v213++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_372:
          *(_DWORD *)(a1 + 72) = v66;
          goto LABEL_356;
        case 0xFu:
          *(_QWORD *)(a1 + 184) |= 0x200000000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_376;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }
          v216 = 0;
          v217 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v218 = v69 + 1;
              v219 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                v69 = v218;
                v14 = v217++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 152) = v74;
          goto LABEL_356;
        case 0x10u:
          *(_QWORD *)(a1 + 184) |= 0x4000000000uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_380;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v82) = 0;
            goto LABEL_380;
          }
          v220 = 0;
          v221 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v222 = v77 + 1;
              v223 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v222;
              v82 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                v77 = v222;
                v14 = v221++ > 8;
                if (v14)
                  goto LABEL_264;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 172) = v82;
          goto LABEL_356;
        case 0x11u:
          *(_QWORD *)(a1 + 184) |= 0x100000uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_384;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }
          v224 = 0;
          v225 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v226 = v85 + 1;
              v227 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v85 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 100) = v90;
          goto LABEL_356;
        case 0x12u:
          *(_QWORD *)(a1 + 184) |= 0x20000uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_388;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_278:
            LODWORD(v98) = 0;
            goto LABEL_388;
          }
          v228 = 0;
          v229 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v230 = v93 + 1;
              v231 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v230;
              v98 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v93 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_278;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 88) = v98;
          goto LABEL_356;
        case 0x13u:
          *(_QWORD *)(a1 + 184) |= 0x10000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_392;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }
          v232 = 0;
          v233 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v234 = v101 + 1;
              v235 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v101 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_285;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 84) = v106;
          goto LABEL_356;
        case 0x14u:
          *(_QWORD *)(a1 + 184) |= 0x40000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_396;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }
          v236 = 0;
          v237 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v238 = v109 + 1;
              v239 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v109 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_292;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 92) = v114;
          goto LABEL_356;
        case 0x15u:
          *(_QWORD *)(a1 + 184) |= 0x80000uLL;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_400;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }
          v240 = 0;
          v241 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v242 = v117 + 1;
              v243 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v117 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 96) = v122;
          goto LABEL_356;
        case 0x16u:
          *(_QWORD *)(a1 + 184) |= 0x8000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_404;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }
          v244 = 0;
          v245 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v246 = v125 + 1;
              v247 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v125 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 80) = v130;
          goto LABEL_356;
        case 0x17u:
          *(_QWORD *)(a1 + 184) |= 0x400uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_408;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v138) = 0;
            goto LABEL_408;
          }
          v248 = 0;
          v249 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v250 = v133 + 1;
              v251 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v133 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 60) = v138;
          goto LABEL_356;
        case 0x18u:
          *(_QWORD *)(a1 + 184) |= 0x2000000000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_412;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }
          v252 = 0;
          v253 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v254 = v141 + 1;
              v255 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v141 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 168) = v146;
          goto LABEL_356;
        case 0x19u:
          *(_QWORD *)(a1 + 184) |= 0x1000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_416;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }
          v256 = 0;
          v257 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v258 = v149 + 1;
              v259 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v149 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v154;
          goto LABEL_356;
        case 0x1Au:
          *(_QWORD *)(a1 + 184) |= 0x20000000uLL;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_420;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }
          v260 = 0;
          v261 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v262 = v157 + 1;
              v263 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v157 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 136) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *(_QWORD *)(a1 + 184) |= 0x10uLL;
          v165 = *((_QWORD *)this + 1);
          v166 = *((_QWORD *)this + 2);
          v167 = *(_QWORD *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              v171 = v165 + 1;
              *((_QWORD *)this + 1) = v165 + 1;
              v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0)
                goto LABEL_424;
              v168 += 7;
              v165 = v171;
              v14 = v169++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }
          v264 = 0;
          v265 = 0;
          v170 = 0;
          if (v166 <= v165)
            v166 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v266 = v165 + 1;
              v267 = *(_BYTE *)(v167 + v165);
              *((_QWORD *)this + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v165 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v170) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 36) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *(_QWORD *)(a1 + 184) |= 0x400000000uLL;
          v173 = *((_QWORD *)this + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v173);
          goto LABEL_354;
        case 0x1Du:
          *(_QWORD *)(a1 + 184) |= 0x20000000000uLL;
          v174 = *((_QWORD *)this + 1);
          if (v174 >= *((_QWORD *)this + 2))
          {
            v177 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v175 = v174 + 1;
            v176 = *(unsigned __int8 *)(*(_QWORD *)this + v174);
            *((_QWORD *)this + 1) = v175;
            v177 = v176 != 0;
          }
          *(_BYTE *)(a1 + 178) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *(_QWORD *)(a1 + 184) |= 0x800000000uLL;
          v178 = *((_QWORD *)this + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v178);
          goto LABEL_354;
        case 0x1Fu:
          *(_QWORD *)(a1 + 184) |= 0x40000000000uLL;
          v179 = *((_QWORD *)this + 1);
          if (v179 >= *((_QWORD *)this + 2))
          {
            v182 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v180 = v179 + 1;
            v181 = *(unsigned __int8 *)(*(_QWORD *)this + v179);
            *((_QWORD *)this + 1) = v180;
            v182 = v181 != 0;
          }
          *(_BYTE *)(a1 + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *(_QWORD *)(a1 + 184) |= 0x20uLL;
          v183 = *((_QWORD *)this + 1);
          v184 = *((_QWORD *)this + 2);
          v185 = *(_QWORD *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)this + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_428;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_352:
            LODWORD(v188) = 0;
            goto LABEL_428;
          }
          v268 = 0;
          v269 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)this + 1);
          break;
        case 0x21u:
          *(_QWORD *)(a1 + 184) |= 0x80uLL;
          v191 = *((_QWORD *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v191);
          goto LABEL_354;
        case 0x22u:
          *(_QWORD *)(a1 + 184) |= 0x4000000uLL;
          v192 = *((_QWORD *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v192);
          goto LABEL_354;
        case 0x23u:
          *(_QWORD *)(a1 + 184) |= 0x8000000uLL;
          v193 = *((_QWORD *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v193);
          goto LABEL_354;
        case 0x24u:
          *(_QWORD *)(a1 + 184) |= 0x10000000uLL;
          v194 = *((_QWORD *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v194);
          goto LABEL_354;
        case 0x25u:
          *(_QWORD *)(a1 + 184) |= 0x40uLL;
          v195 = *((_QWORD *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v195);
          goto LABEL_354;
        case 0x26u:
          *(_QWORD *)(a1 + 184) |= 0x100uLL;
          v196 = *((_QWORD *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v196);
          goto LABEL_354;
        case 0x27u:
          *(_QWORD *)(a1 + 184) |= 0x200uLL;
          v197 = *((_QWORD *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v197);
          goto LABEL_354;
        case 0x28u:
          *(_QWORD *)(a1 + 184) |= 0x400000uLL;
          v198 = *((_QWORD *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v198);
          goto LABEL_354;
        case 0x29u:
          *(_QWORD *)(a1 + 184) |= 0x800000uLL;
          v199 = *((_QWORD *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v199);
          goto LABEL_354;
        case 0x2Au:
          *(_QWORD *)(a1 + 184) |= 0x1000000uLL;
          v200 = *((_QWORD *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v200);
          goto LABEL_354;
        case 0x2Bu:
          *(_QWORD *)(a1 + 184) |= 0x40000000uLL;
          v201 = *((_QWORD *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v201);
          goto LABEL_354;
        case 0x2Cu:
          *(_QWORD *)(a1 + 184) |= 0x80000000uLL;
          v202 = *((_QWORD *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v202);
          goto LABEL_354;
        case 0x2Du:
          *(_QWORD *)(a1 + 184) |= (unint64_t)&_mh_execute_header;
          v203 = *((_QWORD *)this + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v203);
LABEL_354:
            v55 = *((_QWORD *)this + 1) + 4;
LABEL_355:
            *((_QWORD *)this + 1) = v55;
          }
          else
          {
LABEL_221:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_356;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_356;
      }
      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v188) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_428;
        }
        v270 = v183 + 1;
        v271 = *(_BYTE *)(v185 + v183);
        *((_QWORD *)this + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0)
          break;
        v268 += 7;
        v183 = v270;
        v14 = v269++ > 8;
        if (v14)
          goto LABEL_352;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v188) = 0;
LABEL_428:
      *(_DWORD *)(a1 + 40) = v188;
LABEL_356:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101644B8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 184);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_QWORD *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 3u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 164), 4u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 181), 5u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 6u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 177), 7u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 8u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 9u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xAu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 176), 0xDu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xEu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0xFu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x10u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x11u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x12u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x13u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x14u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x15u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x16u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x17u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0x18u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0x19u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x1Au);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 178), 0x1Du);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 160), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 179), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x20u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0x21u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0x22u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0x23u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x24u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x25u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x26u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x27u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x28u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 0x29u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x2Au);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x2Bu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x2Du);
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x2Cu);
  if ((*(_QWORD *)(v3 + 184) & 0x100000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x2Du);
  return result;
}

uint64_t sub_10164509C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C40C8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1016450B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1016450D8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C40C8;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 36) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = v3 | 2;
  *(_DWORD *)(a1 + 16) = v4;
  return *(float *)&v4;
}

uint64_t sub_1016451B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbability", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016452C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016455D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 7u);
  return result;
}

_QWORD *sub_1016456BC(_QWORD *result)
{
  *result = off_1021C4100;
  result[1] = 0;
  return result;
}

void sub_1016456CC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4100;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10164570C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4100;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101645760(_QWORD *result, uint64_t a2)
{
  *result = off_1021C4100;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1016457DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164582C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016459F4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101645A10(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4138;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_101645A28(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101645A4C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  *(_QWORD *)result = &off_1021C4138;
  *(_DWORD *)(result + 116) = 0;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) != 0)
  {
    v4 = *(_DWORD *)(a2 + 92);
    v3 = 0x10000;
    *(_DWORD *)(result + 116) = 0x10000;
    *(_DWORD *)(result + 92) = v4;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 64);
    v3 |= 0x200u;
    *(_DWORD *)(result + 116) = v3;
    *(_DWORD *)(result + 64) = v5;
    v2 = *(_DWORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 116) = v3;
    *(_DWORD *)(result + 48) = v6;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 68) = v7;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  v8 = *(_BYTE *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 108) = v8;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  v9 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 88) = v9;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v10 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 24) = v10;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v11 = *(_BYTE *)(a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 109) = v11;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 60) = v12;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  v13 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 8) = v13;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  v14 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 16) = v14;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v15 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 76) = v15;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  v16 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 72) = v16;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  v17 = *(_BYTE *)(a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 113) = v17;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  v18 = *(_BYTE *)(a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v18;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  v19 = *(_BYTE *)(a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 110) = v19;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v20 = *(_BYTE *)(a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 114) = v20;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  v21 = *(_BYTE *)(a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 111) = v21;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  v22 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 100) = v22;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  v23 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 56) = v23;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  v24 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 52) = v24;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v25 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 84) = v25;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  v26 = *(_DWORD *)(a2 + 104);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 104) = v26;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  v27 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 32) = v27;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  v28 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 40) = v28;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0)
      return result;
LABEL_56:
    v30 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(result + 116) = v3 | 0x2000;
    *(_DWORD *)(result + 80) = v30;
    return result;
  }
LABEL_55:
  v29 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 96) = v29;
  if ((*(_DWORD *)(a2 + 116) & 0x2000) != 0)
    goto LABEL_56;
  return result;
}

uint64_t sub_101645D5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "estExitTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "exitState", *(_DWORD *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isStanding", *(_BYTE *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isVehicleConnected", *(_BYTE *)(a1 + 109));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "mountedConfidence", *(_DWORD *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "mountedState", *(_DWORD *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rawConfidence", *(_DWORD *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "rawType", *(_DWORD *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "typeYouth", *(_DWORD *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "vehicularBasebandHint", *(_BYTE *)(a1 + 110));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "vehicularBtHint", *(_BYTE *)(a1 + 111));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "vehicularConfidence", *(_DWORD *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "vehicularGpsHint", *(_BYTE *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "vehicularMotionHint", *(_BYTE *)(a1 + 113));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "vehicularWifiHint", *(_BYTE *)(a1 + 114));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(this, "workoutDetectionType", *(_DWORD *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 116) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(this, "workoutDetectionTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 0x10) != 0)
LABEL_28:
    PB::TextFormatter::format(this, "workoutEscalationTime", *(_QWORD *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016460EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 116) |= 0x10000u;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v154 = 0;
            v155 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_251;
              }
              v156 = v20 + 1;
              v157 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_251;
              }
              v154 += 7;
              v20 = v156;
              v14 = v155++ > 8;
            }
            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_153;
            }
          }
LABEL_251:
          *(_DWORD *)(a1 + 92) = v25;
          goto LABEL_296;
        case 2u:
          *(_DWORD *)(a1 + 116) |= 0x200u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_255;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }
          v158 = 0;
          v159 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v160 = v29 + 1;
              v161 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                v29 = v160;
                v14 = v159++ > 8;
                if (v14)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 64) = v34;
          goto LABEL_296;
        case 3u:
          *(_DWORD *)(a1 + 116) |= 0x20u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_259;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_167:
            LODWORD(v42) = 0;
            goto LABEL_259;
          }
          v162 = 0;
          v163 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v164 = v37 + 1;
              v165 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v164;
              v42 |= (unint64_t)(v165 & 0x7F) << v162;
              if (v165 < 0)
              {
                v162 += 7;
                v37 = v164;
                v14 = v163++ > 8;
                if (v14)
                  goto LABEL_167;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_259:
          *(_DWORD *)(a1 + 48) = v42;
          goto LABEL_296;
        case 4u:
          *(_DWORD *)(a1 + 116) |= 0x400u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_263;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_174:
            LODWORD(v50) = 0;
            goto LABEL_263;
          }
          v166 = 0;
          v167 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v168 = v45 + 1;
              v169 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v168;
              v50 |= (unint64_t)(v169 & 0x7F) << v166;
              if (v169 < 0)
              {
                v166 += 7;
                v45 = v168;
                v14 = v167++ > 8;
                if (v14)
                  goto LABEL_174;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_263:
          *(_DWORD *)(a1 + 68) = v50;
          goto LABEL_296;
        case 5u:
          *(_DWORD *)(a1 + 116) |= 0x100000u;
          v53 = *((_QWORD *)this + 1);
          if (v53 >= *((_QWORD *)this + 2))
          {
            v56 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
            *((_QWORD *)this + 1) = v54;
            v56 = v55 != 0;
          }
          *(_BYTE *)(a1 + 108) = v56;
          goto LABEL_296;
        case 6u:
          *(_DWORD *)(a1 + 116) |= 0x8000u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 116) |= 4u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v58);
          goto LABEL_246;
        case 8u:
          *(_DWORD *)(a1 + 116) |= 0x200000u;
          v59 = *((_QWORD *)this + 1);
          if (v59 >= *((_QWORD *)this + 2))
          {
            v62 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v60 = v59 + 1;
            v61 = *(unsigned __int8 *)(*(_QWORD *)this + v59);
            *((_QWORD *)this + 1) = v60;
            v62 = v61 != 0;
          }
          *(_BYTE *)(a1 + 109) = v62;
          goto LABEL_296;
        case 9u:
          *(_DWORD *)(a1 + 116) |= 0x100u;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          v65 = *(_QWORD *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_267;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v68) = 0;
            goto LABEL_267;
          }
          v170 = 0;
          v171 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v172 = v63 + 1;
              v173 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)this + 1) = v172;
              v68 |= (unint64_t)(v173 & 0x7F) << v170;
              if (v173 < 0)
              {
                v170 += 7;
                v63 = v172;
                v14 = v171++ > 8;
                if (v14)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v68) = 0;
            }
            break;
          }
LABEL_267:
          *(_DWORD *)(a1 + 60) = v68;
          goto LABEL_296;
        case 0xAu:
          *(_DWORD *)(a1 + 116) |= 1u;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v71);
          goto LABEL_246;
        case 0xBu:
          *(_DWORD *)(a1 + 116) |= 2u;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v72);
          goto LABEL_246;
        case 0xCu:
          *(_DWORD *)(a1 + 116) |= 0x1000u;
          v73 = *((_QWORD *)this + 1);
          v74 = *((_QWORD *)this + 2);
          v75 = *(_QWORD *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)this + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_271;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_192:
            LODWORD(v78) = 0;
            goto LABEL_271;
          }
          v174 = 0;
          v175 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v176 = v73 + 1;
              v177 = *(_BYTE *)(v75 + v73);
              *((_QWORD *)this + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                v73 = v176;
                v14 = v175++ > 8;
                if (v14)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v78) = 0;
            }
            break;
          }
LABEL_271:
          *(_DWORD *)(a1 + 76) = v78;
          goto LABEL_296;
        case 0xDu:
          *(_DWORD *)(a1 + 116) |= 0x800u;
          v81 = *((_QWORD *)this + 1);
          v82 = *((_QWORD *)this + 2);
          v83 = *(_QWORD *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            do
            {
              v87 = v81 + 1;
              *((_QWORD *)this + 1) = v81 + 1;
              v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0)
                goto LABEL_275;
              v84 += 7;
              v81 = v87;
              v14 = v85++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }
          v178 = 0;
          v179 = 0;
          v86 = 0;
          if (v82 <= v81)
            v82 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v180 = v81 + 1;
              v181 = *(_BYTE *)(v83 + v81);
              *((_QWORD *)this + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                v81 = v180;
                v14 = v179++ > 8;
                if (v14)
                  goto LABEL_199;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v86) = 0;
            }
            break;
          }
LABEL_275:
          *(_DWORD *)(a1 + 72) = v86;
          goto LABEL_296;
        case 0xEu:
          *(_DWORD *)(a1 + 116) |= 0x2000000u;
          v89 = *((_QWORD *)this + 1);
          if (v89 >= *((_QWORD *)this + 2))
          {
            v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) = v90;
            v92 = v91 != 0;
          }
          *(_BYTE *)(a1 + 113) = v92;
          goto LABEL_296;
        case 0xFu:
          *(_DWORD *)(a1 + 116) |= 0x1000000u;
          v93 = *((_QWORD *)this + 1);
          if (v93 >= *((_QWORD *)this + 2))
          {
            v96 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v94 = v93 + 1;
            v95 = *(unsigned __int8 *)(*(_QWORD *)this + v93);
            *((_QWORD *)this + 1) = v94;
            v96 = v95 != 0;
          }
          *(_BYTE *)(a1 + 112) = v96;
          goto LABEL_296;
        case 0x10u:
          *(_DWORD *)(a1 + 116) |= 0x400000u;
          v97 = *((_QWORD *)this + 1);
          if (v97 >= *((_QWORD *)this + 2))
          {
            v100 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v98 = v97 + 1;
            v99 = *(unsigned __int8 *)(*(_QWORD *)this + v97);
            *((_QWORD *)this + 1) = v98;
            v100 = v99 != 0;
          }
          *(_BYTE *)(a1 + 110) = v100;
          goto LABEL_296;
        case 0x11u:
          *(_DWORD *)(a1 + 116) |= 0x4000000u;
          v101 = *((_QWORD *)this + 1);
          if (v101 >= *((_QWORD *)this + 2))
          {
            v104 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v102 = v101 + 1;
            v103 = *(unsigned __int8 *)(*(_QWORD *)this + v101);
            *((_QWORD *)this + 1) = v102;
            v104 = v103 != 0;
          }
          *(_BYTE *)(a1 + 114) = v104;
          goto LABEL_296;
        case 0x12u:
          *(_DWORD *)(a1 + 116) |= 0x800000u;
          v105 = *((_QWORD *)this + 1);
          if (v105 >= *((_QWORD *)this + 2))
          {
            v108 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v106 = v105 + 1;
            v107 = *(unsigned __int8 *)(*(_QWORD *)this + v105);
            *((_QWORD *)this + 1) = v106;
            v108 = v107 != 0;
          }
          *(_BYTE *)(a1 + 111) = v108;
          goto LABEL_296;
        case 0x13u:
          *(_DWORD *)(a1 + 116) |= 0x40000u;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_279;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_216:
            LODWORD(v114) = 0;
            goto LABEL_279;
          }
          v182 = 0;
          v183 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v184 = v109 + 1;
              v185 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v184;
              v114 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                v109 = v184;
                v14 = v183++ > 8;
                if (v14)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_279:
          *(_DWORD *)(a1 + 100) = v114;
          goto LABEL_296;
        case 0x14u:
          *(_DWORD *)(a1 + 116) |= 0x80u;
          v117 = *((_QWORD *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v117);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 116) |= 0x40u;
          v118 = *((_QWORD *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v118);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 116) |= 0x4000u;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v119);
LABEL_115:
          v120 = *((_QWORD *)this + 1) + 4;
          goto LABEL_247;
        case 0x17u:
          *(_DWORD *)(a1 + 116) |= 0x80000u;
          v121 = *((_QWORD *)this + 1);
          v122 = *((_QWORD *)this + 2);
          v123 = *(_QWORD *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            v124 = 0;
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = v121 + 1;
              *((_QWORD *)this + 1) = v121 + 1;
              v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0)
                goto LABEL_283;
              v124 += 7;
              v121 = v127;
              v14 = v125++ > 8;
            }
            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }
          v186 = 0;
          v187 = 0;
          v126 = 0;
          if (v122 <= v121)
            v122 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v188 = v121 + 1;
              v189 = *(_BYTE *)(v123 + v121);
              *((_QWORD *)this + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                v121 = v188;
                v14 = v187++ > 8;
                if (v14)
                  goto LABEL_223;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v126) = 0;
            }
            break;
          }
LABEL_283:
          *(_DWORD *)(a1 + 104) = v126;
          goto LABEL_296;
        case 0x18u:
          *(_DWORD *)(a1 + 116) |= 8u;
          v129 = *((_QWORD *)this + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v129);
LABEL_246:
            v120 = *((_QWORD *)this + 1) + 8;
LABEL_247:
            *((_QWORD *)this + 1) = v120;
          }
          else
          {
LABEL_125:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_296;
        case 0x19u:
          *(_DWORD *)(a1 + 116) |= 0x10u;
          v130 = *((_QWORD *)this + 1);
          v131 = *((_QWORD *)this + 2);
          v132 = *(_QWORD *)this;
          if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            do
            {
              v136 = v130 + 1;
              *((_QWORD *)this + 1) = v130 + 1;
              v137 = *(_BYTE *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0)
                goto LABEL_287;
              v133 += 7;
              v130 = v136;
              v14 = v134++ > 8;
            }
            while (!v14);
LABEL_230:
            v135 = 0;
            goto LABEL_287;
          }
          v190 = 0;
          v191 = 0;
          v135 = 0;
          if (v131 <= v130)
            v131 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v131 == v130)
            {
              v135 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v192 = v130 + 1;
              v193 = *(_BYTE *)(v132 + v130);
              *((_QWORD *)this + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                v130 = v192;
                v14 = v191++ > 8;
                if (v14)
                  goto LABEL_230;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v135 = 0;
            }
            break;
          }
LABEL_287:
          *(_QWORD *)(a1 + 40) = v135;
          goto LABEL_296;
        case 0x1Au:
          *(_DWORD *)(a1 + 116) |= 0x20000u;
          v138 = *((_QWORD *)this + 1);
          v139 = *((_QWORD *)this + 2);
          v140 = *(_QWORD *)this;
          if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
          {
            v141 = 0;
            v142 = 0;
            v143 = 0;
            do
            {
              v144 = v138 + 1;
              *((_QWORD *)this + 1) = v138 + 1;
              v145 = *(_BYTE *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0)
                goto LABEL_291;
              v141 += 7;
              v138 = v144;
              v14 = v142++ > 8;
            }
            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }
          v194 = 0;
          v195 = 0;
          v143 = 0;
          if (v139 <= v138)
            v139 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v196 = v138 + 1;
              v197 = *(_BYTE *)(v140 + v138);
              *((_QWORD *)this + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                v138 = v196;
                v14 = v195++ > 8;
                if (v14)
                  goto LABEL_237;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v143) = 0;
            }
            break;
          }
LABEL_291:
          *(_DWORD *)(a1 + 96) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *(_DWORD *)(a1 + 116) |= 0x2000u;
          v146 = *((_QWORD *)this + 1);
          v147 = *((_QWORD *)this + 2);
          v148 = *(_QWORD *)this;
          if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
          {
            v149 = 0;
            v150 = 0;
            v151 = 0;
            do
            {
              v152 = v146 + 1;
              *((_QWORD *)this + 1) = v146 + 1;
              v153 = *(_BYTE *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0)
                goto LABEL_295;
              v149 += 7;
              v146 = v152;
              v14 = v150++ > 8;
            }
            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }
          v198 = 0;
          v199 = 0;
          v151 = 0;
          if (v147 <= v146)
            v147 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_296;
      }
      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_295;
        }
        v200 = v146 + 1;
        v201 = *(_BYTE *)(v148 + v146);
        *((_QWORD *)this + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0)
          break;
        v198 += 7;
        v146 = v200;
        v14 = v199++ > 8;
        if (v14)
          goto LABEL_244;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v151) = 0;
LABEL_295:
      *(_DWORD *)(a1 + 80) = v151;
LABEL_296:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101647104(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x10000) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 92), 1u);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 2u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 108), 5u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 6u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 7u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 109), 8u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 9u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xAu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xCu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xDu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 113), 0xEu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 0xFu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 110), 0x10u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 114), 0x11u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 111), 0x12u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x13u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x14u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x15u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x16u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x17u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x18u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0x19u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_27:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x1Bu);
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x1Au);
  if ((*(_DWORD *)(v3 + 116) & 0x2000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x1Bu);
  return result;
}

uint64_t sub_10164741C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4170;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_101647434(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101647458(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;

  *(_QWORD *)result = &off_1021C4170;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 36) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 36);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_WORD *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 36);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 34) = v7;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_BYTE *)(a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 35) = v8;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_BYTE *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 32) = v9;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 33) = v10;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 36) = v3 | 4;
    *(_DWORD *)(result + 20) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 36) = v3;
  *(_DWORD *)(result + 16) = v11;
  if ((*(_WORD *)(a2 + 36) & 4) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_101647570(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineFrom", *(_DWORD *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineTo", *(_DWORD *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "workoutLocationType", *(_DWORD *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "workoutPause", *(_BYTE *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "workoutResume", *(_BYTE *)(a1 + 33));
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "workoutStop", *(_BYTE *)(a1 + 35));
    if ((*(_WORD *)(a1 + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "workoutStart", *(_BYTE *)(a1 + 34));
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x10) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016476C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_120;
            case 2u:
              *(_WORD *)(a1 + 36) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
                goto LABEL_103;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_104;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_120;
            case 3u:
              *(_WORD *)(a1 + 36) |= 8u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v59 = v26++;
                  v60 = *(_BYTE *)(v27 + v59);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v30) = 0;
                goto LABEL_108;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_109;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 24) = v30;
              goto LABEL_120;
            case 0xAu:
              *(_WORD *)(a1 + 36) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *(_WORD *)(a1 + 36) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *(_WORD *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *(_WORD *)(a1 + 36) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *(_WORD *)(a1 + 36) |= 2u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_113;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_114;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_120;
            case 0x16u:
              *(_WORD *)(a1 + 36) |= 4u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v67 = v47++;
                  v68 = *(_BYTE *)(v48 + v67);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_118;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_119;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 20) = v51;
LABEL_120:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_120;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101647D34(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 34), 0xAu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 35), 0xBu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 32), 0xCu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 33), 0xDu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0x16u);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x15u);
  if ((*(_WORD *)(v3 + 36) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0x16u);
  return result;
}

_QWORD *sub_101647E54(_QWORD *result)
{
  *result = off_1021C41A8;
  result[1] = 0;
  result[3] = 0;
  return result;
}

void sub_101647E68(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C41A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101647EA8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C41A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_101647EFC(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C41A8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = 2;
    *(_DWORD *)(result + 24) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 28) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 28) = v2;
    *(_QWORD *)(result + 16) = v4;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

double sub_101647FF8(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4870;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_10164804C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "impulse");
  v6 = *(_BYTE *)(a1 + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 24));
    v6 = *(_BYTE *)(a1 + 28);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016480D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v29 = *((_QWORD *)this + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v29);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v31 = 0;
          v32 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v33 = v21 + 1;
            v34 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v21 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_48:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016483F4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4870;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_101648408(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5, 3u);
  return result;
}

uint64_t sub_101648474(uint64_t result)
{
  *(_QWORD *)result = off_1021C41E0;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 180) = 0;
  return result;
}

void sub_10164848C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C41E0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1016484D0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C41E0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_101648528(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;

  *(_QWORD *)result = off_1021C41E0;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 180) = 0;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    v3 = 2048;
    *(_DWORD *)(result + 180) = 2048;
    *(_QWORD *)(result + 96) = v4;
    v2 = *(_DWORD *)(a2 + 180);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 56);
    v3 |= 0x40u;
    *(_DWORD *)(result + 180) = v3;
    *(_QWORD *)(result + 56) = v5;
    v2 = *(_DWORD *)(a2 + 180);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v3 |= 0x80u;
    *(_DWORD *)(result + 180) = v3;
    *(_QWORD *)(result + 64) = v10;
    v2 = *(_DWORD *)(a2 + 180);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 80) = v11;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v12 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 88) = v12;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v13 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 48) = v13;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v14 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 16) = v14;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v15 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 24) = v15;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v16 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 8) = v16;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v17 = *(_QWORD *)(a2 + 120);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 120) = v17;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800000) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v18 = *(_DWORD *)(a2 + 164);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 164) = v18;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v19 = *(_QWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 104) = v19;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v20 = *(_DWORD *)(a2 + 168);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 168) = v20;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v21 = *(_DWORD *)(a2 + 172);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 172) = v21;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v22 = *(_DWORD *)(a2 + 140);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 140) = v22;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x80000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v23 = *(_DWORD *)(a2 + 148);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 148) = v23;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *(_DWORD *)(a2 + 144);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 144) = v24;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 72) = v25;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 32) = v26;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 180) = v3;
  *(_QWORD *)(result + 40) = v27;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v28 = *(_DWORD *)(a2 + 156);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 156) = v28;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(result + 180) = v3;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *(_DWORD *)(a2 + 160);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 160) = v29;
  v2 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_58:
  v30 = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 180) = v3;
  *(_DWORD *)(result + 136) = v30;
  if ((*(_DWORD *)(a2 + 180) & 0x100000) != 0)
  {
LABEL_29:
    v6 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(result + 180) = v3 | 0x100000;
    *(_DWORD *)(result + 152) = v6;
  }
LABEL_30:
  if (*(_QWORD *)(a2 + 112))
    operator new();
  v7 = *(_DWORD *)(a2 + 180);
  if ((v7 & 0x8000) != 0)
  {
    v8 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(result + 180) |= 0x8000u;
    *(_DWORD *)(result + 132) = v8;
    v7 = *(_DWORD *)(a2 + 180);
  }
  if ((v7 & 0x4000) != 0)
  {
    v9 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(result + 180) |= 0x4000u;
    *(_DWORD *)(result + 128) = v9;
  }
  return result;
}

uint64_t sub_1016488A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 180);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "demConfidence", *(float *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "demNumContiguousFlatPoints", *(_DWORD *)(a1 + 132));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gnssModesOfOperation", *(_DWORD *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 140));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 148));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "notificationType", *(_DWORD *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 156));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "roadClass", *(_DWORD *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_53:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 180) & 0x1000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 104));
LABEL_24:
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "trackRunData");
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 164));
    v7 = *(_DWORD *)(a1 + 180);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_29;
      goto LABEL_57;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 168));
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0)
      goto LABEL_30;
LABEL_58:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 180) & 0x4000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_57:
  PB::TextFormatter::format(this, "undulationModel", *(_DWORD *)(a1 + 172));
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000) != 0)
    goto LABEL_58;
LABEL_30:
  if ((v7 & 0x4000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "wayForm", *(_DWORD *)(a1 + 176));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101648C50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 180) |= 0x800u;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_92;
        case 2u:
          *(_DWORD *)(a1 + 180) |= 0x40u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_92;
        case 3u:
          *(_DWORD *)(a1 + 180) |= 0x80u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v23);
          goto LABEL_92;
        case 4u:
          *(_DWORD *)(a1 + 180) |= 0x200u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v24);
          goto LABEL_92;
        case 5u:
          *(_DWORD *)(a1 + 180) |= 0x400u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_92;
        case 6u:
          *(_DWORD *)(a1 + 180) |= 0x20u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v26);
          goto LABEL_92;
        case 7u:
          *(_DWORD *)(a1 + 180) |= 2u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_92;
        case 8u:
          *(_DWORD *)(a1 + 180) |= 4u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v28);
          goto LABEL_92;
        case 9u:
          *(_DWORD *)(a1 + 180) |= 1u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v29);
          goto LABEL_92;
        case 0xAu:
          *(_DWORD *)(a1 + 180) |= 0x2000u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v30);
          goto LABEL_92;
        case 0xBu:
          *(_DWORD *)(a1 + 180) |= 0x800000u;
          v31 = *((_QWORD *)this + 1);
          v32 = *((_QWORD *)this + 2);
          v33 = *(_QWORD *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)this + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_213;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_145:
            LODWORD(v36) = 0;
            goto LABEL_213;
          }
          v105 = 0;
          v106 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v107 = v31 + 1;
              v108 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)this + 1) = v107;
              v36 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                v31 = v107;
                v14 = v106++ > 8;
                if (v14)
                  goto LABEL_145;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_213:
          *(_DWORD *)(a1 + 164) = v36;
          goto LABEL_198;
        case 0xCu:
          *(_DWORD *)(a1 + 180) |= 0x1000u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v39);
          goto LABEL_92;
        case 0xDu:
          *(_DWORD *)(a1 + 180) |= 0x1000000u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_196;
        case 0xEu:
          *(_DWORD *)(a1 + 180) |= 0x2000000u;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_216;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v46) = 0;
            goto LABEL_216;
          }
          v109 = 0;
          v110 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v111 = v41 + 1;
              v112 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v111;
              v46 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                v41 = v111;
                v14 = v110++ > 8;
                if (v14)
                  goto LABEL_152;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_216:
          *(_DWORD *)(a1 + 172) = v46;
          goto LABEL_198;
        case 0xFu:
          *(_DWORD *)(a1 + 180) |= 0x20000u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_196;
        case 0x10u:
          *(_DWORD *)(a1 + 180) |= 0x80000u;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_196;
        case 0x11u:
          *(_DWORD *)(a1 + 180) |= 0x40000u;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_196;
        case 0x12u:
          *(_DWORD *)(a1 + 180) |= 0x100u;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v52);
          goto LABEL_92;
        case 0x13u:
          *(_DWORD *)(a1 + 180) |= 8u;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v53);
          goto LABEL_92;
        case 0x14u:
          *(_DWORD *)(a1 + 180) |= 0x10u;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_138;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v54);
LABEL_92:
          v55 = *((_QWORD *)this + 1) + 8;
          goto LABEL_197;
        case 0x15u:
          *(_DWORD *)(a1 + 180) |= 0x200000u;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          v58 = *(_QWORD *)this;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v62 = v56 + 1;
              *((_QWORD *)this + 1) = v56 + 1;
              v63 = *(_BYTE *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0)
                goto LABEL_219;
              v59 += 7;
              v56 = v62;
              v14 = v60++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v61) = 0;
            goto LABEL_219;
          }
          v113 = 0;
          v114 = 0;
          v61 = 0;
          if (v57 <= v56)
            v57 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v57 == v56)
            {
              LODWORD(v61) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v115 = v56 + 1;
              v116 = *(_BYTE *)(v58 + v56);
              *((_QWORD *)this + 1) = v115;
              v61 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v56 = v115;
                v14 = v114++ > 8;
                if (v14)
                  goto LABEL_159;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v61) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 156) = v61;
          goto LABEL_198;
        case 0x16u:
          *(_DWORD *)(a1 + 180) |= 0x4000000u;
          v64 = *((_QWORD *)this + 1);
          v65 = *((_QWORD *)this + 2);
          v66 = *(_QWORD *)this;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            v67 = 0;
            v68 = 0;
            v69 = 0;
            do
            {
              v70 = v64 + 1;
              *((_QWORD *)this + 1) = v64 + 1;
              v71 = *(_BYTE *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0)
                goto LABEL_222;
              v67 += 7;
              v64 = v70;
              v14 = v68++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v69) = 0;
            goto LABEL_222;
          }
          v117 = 0;
          v118 = 0;
          v69 = 0;
          if (v65 <= v64)
            v65 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v119 = v64 + 1;
              v120 = *(_BYTE *)(v66 + v64);
              *((_QWORD *)this + 1) = v119;
              v69 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v64 = v119;
                v14 = v118++ > 8;
                if (v14)
                  goto LABEL_166;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v69) = 0;
            }
            break;
          }
LABEL_222:
          *(_DWORD *)(a1 + 176) = v69;
          goto LABEL_198;
        case 0x17u:
          *(_DWORD *)(a1 + 180) |= 0x400000u;
          v72 = *((_QWORD *)this + 1);
          v73 = *((_QWORD *)this + 2);
          v74 = *(_QWORD *)this;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v72 + 1;
              *((_QWORD *)this + 1) = v72 + 1;
              v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0)
                goto LABEL_225;
              v75 += 7;
              v72 = v78;
              v14 = v76++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v77) = 0;
            goto LABEL_225;
          }
          v121 = 0;
          v122 = 0;
          v77 = 0;
          if (v73 <= v72)
            v73 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v123 = v72 + 1;
              v124 = *(_BYTE *)(v74 + v72);
              *((_QWORD *)this + 1) = v123;
              v77 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v72 = v123;
                v14 = v122++ > 8;
                if (v14)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v77) = 0;
            }
            break;
          }
LABEL_225:
          *(_DWORD *)(a1 + 160) = v77;
          goto LABEL_198;
        case 0x18u:
          *(_DWORD *)(a1 + 180) |= 0x10000u;
          v80 = *((_QWORD *)this + 1);
          v81 = *((_QWORD *)this + 2);
          v82 = *(_QWORD *)this;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v86 = v80 + 1;
              *((_QWORD *)this + 1) = v80 + 1;
              v87 = *(_BYTE *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0)
                goto LABEL_228;
              v83 += 7;
              v80 = v86;
              v14 = v84++ > 8;
            }
            while (!v14);
LABEL_180:
            LODWORD(v85) = 0;
            goto LABEL_228;
          }
          v125 = 0;
          v126 = 0;
          v85 = 0;
          if (v81 <= v80)
            v81 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v127 = v80 + 1;
              v128 = *(_BYTE *)(v82 + v80);
              *((_QWORD *)this + 1) = v127;
              v85 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v80 = v127;
                v14 = v126++ > 8;
                if (v14)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v85) = 0;
            }
            break;
          }
LABEL_228:
          *(_DWORD *)(a1 + 136) = v85;
          goto LABEL_198;
        case 0x19u:
          *(_DWORD *)(a1 + 180) |= 0x100000u;
          v88 = *((_QWORD *)this + 1);
          v89 = *((_QWORD *)this + 2);
          v90 = *(_QWORD *)this;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            v91 = 0;
            v92 = 0;
            v93 = 0;
            do
            {
              v94 = v88 + 1;
              *((_QWORD *)this + 1) = v88 + 1;
              v95 = *(_BYTE *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0)
                goto LABEL_231;
              v91 += 7;
              v88 = v94;
              v14 = v92++ > 8;
            }
            while (!v14);
LABEL_187:
            LODWORD(v93) = 0;
            goto LABEL_231;
          }
          v129 = 0;
          v130 = 0;
          v93 = 0;
          if (v89 <= v88)
            v89 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v89 == v88)
            {
              LODWORD(v93) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v88 + 1;
              v132 = *(_BYTE *)(v90 + v88);
              *((_QWORD *)this + 1) = v131;
              v93 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v88 = v131;
                v14 = v130++ > 8;
                if (v14)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v93) = 0;
            }
            break;
          }
LABEL_231:
          *(_DWORD *)(a1 + 152) = v93;
          goto LABEL_198;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *(_DWORD *)(a1 + 180) |= 0x8000u;
          v96 = *((_QWORD *)this + 1);
          v97 = *((_QWORD *)this + 2);
          v98 = *(_QWORD *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)this + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_234;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_194:
            LODWORD(v101) = 0;
            goto LABEL_234;
          }
          v133 = 0;
          v134 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)this + 1);
          break;
        case 0x1Cu:
          *(_DWORD *)(a1 + 180) |= 0x4000u;
          v104 = *((_QWORD *)this + 1);
          if (v104 <= 0xFFFFFFFFFFFFFFFBLL && v104 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v104);
LABEL_196:
            v55 = *((_QWORD *)this + 1) + 4;
LABEL_197:
            *((_QWORD *)this + 1) = v55;
          }
          else
          {
LABEL_138:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_198;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_198;
      }
      while (1)
      {
        if (v97 == v96)
        {
          LODWORD(v101) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_234;
        }
        v135 = v96 + 1;
        v136 = *(_BYTE *)(v98 + v96);
        *((_QWORD *)this + 1) = v135;
        v101 |= (unint64_t)(v136 & 0x7F) << v133;
        if ((v136 & 0x80) == 0)
          break;
        v133 += 7;
        v96 = v135;
        v14 = v134++ > 8;
        if (v14)
          goto LABEL_194;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v101) = 0;
LABEL_234:
      *(_DWORD *)(a1 + 132) = v101;
LABEL_198:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016499BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;

  v3 = result;
  v4 = *(_DWORD *)(result + 180);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 96), 1u);
    v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 3u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 4u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 5u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 9u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0xAu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0xBu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0xCu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 168), 0xDu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0xEu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0xFu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 0x10u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x11u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x12u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x13u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0x14u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0x15u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x16u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0x17u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x18u);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0)
LABEL_26:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0x19u);
LABEL_27:
  v5 = *(const PB::Base **)(v3 + 112);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5, 0x1Au);
  v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x1Bu);
    v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 128), 0x1Cu);
  return result;
}

uint64_t sub_101649CE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4218;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101649CFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101649D20(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_1021C4218;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(result + 24) = v3 | 4;
    *(_DWORD *)(result + 20) = v6;
  }
  return result;
}

uint64_t sub_101649D90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "event", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "value", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101649E20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 20) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164A1A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  return result;
}

uint64_t sub_10164A218(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4250;
  *(_DWORD *)(result + 220) = 0;
  return result;
}

void sub_10164A230(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10164A254(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  *(_QWORD *)result = &off_1021C4250;
  *(_DWORD *)(result + 220) = 0;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *(_QWORD *)(a2 + 152);
    v3 = 0x40000;
    *(_DWORD *)(result + 220) = 0x40000;
    *(_QWORD *)(result + 152) = v4;
    v2 = *(_DWORD *)(a2 + 220);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 72);
    v3 |= 0x100u;
    *(_DWORD *)(result + 220) = v3;
    *(_QWORD *)(result + 72) = v5;
    v2 = *(_DWORD *)(a2 + 220);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_QWORD *)(a2 + 80);
    v3 |= 0x200u;
    *(_DWORD *)(result + 220) = v3;
    *(_QWORD *)(result + 80) = v6;
    v2 = *(_DWORD *)(a2 + 220);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 136) = v7;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *(_QWORD *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 144) = v8;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 64) = v9;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 16) = v10;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 24) = v11;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 8) = v12;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *(_QWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 168) = v13;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *(_DWORD *)(a2 + 204);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 204) = v14;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *(_QWORD *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 160) = v15;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *(_DWORD *)(a2 + 208);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 208) = v16;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *(_DWORD *)(a2 + 212);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 212) = v17;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *(_DWORD *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 176) = v18;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *(_DWORD *)(a2 + 184);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 184) = v19;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *(_DWORD *)(a2 + 180);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 180) = v20;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 96) = v21;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 32) = v22;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 40) = v23;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *(_DWORD *)(a2 + 192);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 192) = v24;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *(_DWORD *)(a2 + 200);
  v3 |= 0x8000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 200) = v25;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *(_DWORD *)(a2 + 188);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 188) = v26;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 48) = v27;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 56) = v28;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *(_QWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 128) = v29;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 88) = v30;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *(_BYTE *)(a2 + 216);
  v3 |= 0x80000000;
  *(_DWORD *)(result + 220) = v3;
  *(_BYTE *)(result + 216) = v31;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x1000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *(_QWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 104) = v32;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *(_QWORD *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 120) = v33;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0)
      return result;
LABEL_66:
    v35 = *(_DWORD *)(a2 + 196);
    *(_DWORD *)(result + 220) = v3 | 0x4000000;
    *(_DWORD *)(result + 196) = v35;
    return result;
  }
LABEL_65:
  v34 = *(_QWORD *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 112) = v34;
  if ((*(_DWORD *)(a2 + 220) & 0x4000000) != 0)
    goto LABEL_66;
  return result;
}

uint64_t sub_10164A5F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 220);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 180));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isPrefilteredLocation", *(_BYTE *)(a1 + 216));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "matchQuality", *(_DWORD *)(a1 + 188));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "rawAltitude", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rawUndulation", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawUndulationModel", *(_DWORD *)(a1 + 196));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rawVerticalAccuracy", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "signalEnvironment", *(_DWORD *)(a1 + 200));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 204));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(this, "undulationModel", *(_DWORD *)(a1 + 212));
    if ((*(_DWORD *)(a1 + 220) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 0x100000) != 0)
LABEL_33:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164AA20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 220) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 2u:
              *(_DWORD *)(a1 + 220) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 3u:
              *(_DWORD *)(a1 + 220) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 4u:
              *(_DWORD *)(a1 + 220) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 5u:
              *(_DWORD *)(a1 + 220) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 6u:
              *(_DWORD *)(a1 + 220) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 7u:
              *(_DWORD *)(a1 + 220) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 8u:
              *(_DWORD *)(a1 + 220) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 9u:
              *(_DWORD *)(a1 + 220) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xAu:
              *(_DWORD *)(a1 + 220) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xBu:
              *(_DWORD *)(a1 + 220) |= 0x10000000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_200;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_199;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_200;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *(_DWORD *)(a1 + 204) = v25;
              goto LABEL_191;
            case 0xCu:
              *(_DWORD *)(a1 + 220) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xDu:
              *(_DWORD *)(a1 + 220) |= 0x20000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xEu:
              *(_DWORD *)(a1 + 220) |= 0x40000000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_205;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_204;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_205;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *(_DWORD *)(a1 + 212) = v31;
              goto LABEL_191;
            case 0xFu:
              *(_DWORD *)(a1 + 220) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0x10u:
              *(_DWORD *)(a1 + 220) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0x11u:
              *(_DWORD *)(a1 + 220) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_83:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_190;
            case 0x12u:
              *(_DWORD *)(a1 + 220) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x13u:
              *(_DWORD *)(a1 + 220) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x14u:
              *(_DWORD *)(a1 + 220) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x15u:
              *(_DWORD *)(a1 + 220) |= 0x2000000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_210;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_209;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_210;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *(_DWORD *)(a1 + 192) = v37;
              goto LABEL_191;
            case 0x16u:
              *(_DWORD *)(a1 + 220) |= 0x8000000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_215;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_214;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_215;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *(_DWORD *)(a1 + 200) = v43;
              goto LABEL_191;
            case 0x17u:
              *(_DWORD *)(a1 + 220) |= 0x1000000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_220;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_219;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_220;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *(_DWORD *)(a1 + 188) = v49;
              goto LABEL_191;
            case 0x18u:
              *(_DWORD *)(a1 + 220) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x19u:
              *(_DWORD *)(a1 + 220) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Au:
              *(_DWORD *)(a1 + 220) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Bu:
              *(_DWORD *)(a1 + 220) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Cu:
              *(_DWORD *)(a1 + 220) |= 0x80000000;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *(_DWORD *)(a1 + 220) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Eu:
              *(_DWORD *)(a1 + 220) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Fu:
              *(_DWORD *)(a1 + 220) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_189:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_190:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_191;
            case 0x20u:
              *(_DWORD *)(a1 + 220) |= 0x4000000u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_225;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_224;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_225;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *(_DWORD *)(a1 + 196) = v57;
LABEL_191:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_191;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10164B704(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 220);
  if ((v4 & 0x40000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 152), 1u);
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72), 2u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 4u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 5u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 9u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 0xAu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 204), 0xBu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 160), 0xCu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 208), 0xDu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0xEu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 176), 0xFu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 184), 0x10u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 180), 0x11u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0x12u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x13u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0x14u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x15u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 200), 0x16u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x17u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0x18u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0x19u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0x1Au);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 216), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0x1Du);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0x1Eu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x4000000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x20u);
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x1Fu);
  if ((*(_DWORD *)(v3 + 220) & 0x4000000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x20u);
  return result;
}

double sub_10164BAA8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4288;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10164BAC8(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C4288;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10164BB18(PB::Base *a1)
{
  sub_10164BAC8(a1);
  operator delete();
}

uint64_t sub_10164BB3C(uint64_t a1, uint64_t a2)
{
  char *v3;

  *(_QWORD *)a1 = &off_1021C4288;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (a1 != a2)
  {
    sub_10034F2B0(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_10164BBB4(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (double *)a1[1];
  v6 = (double *)a1[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "loiAltitude", v7);
  }
  v8 = (double *)a1[4];
  v9 = (double *)a1[5];
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "loiVerticalUncertainty", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10164BC4C(_QWORD *a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE v79[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 4);
    v11 = (uint64_t)(a1 + 6);
    v12 = (void **)(a1 + 1);
    v13 = (uint64_t)(a1 + 3);
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v21 = 0;
        v22 = 0;
        v17 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v23 = v4 + 1;
          v24 = *(_BYTE *)(v14 + v4);
          *((_QWORD *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_21;
          v21 += 7;
          v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            v17 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v27 = v17 >> 3;
      if ((v17 >> 3) == 2)
        break;
      if ((_DWORD)v27 == 1)
      {
        if ((_DWORD)v26 != 2)
        {
          v57 = (char *)a1[2];
          v56 = a1[3];
          if ((unint64_t)v57 >= v56)
          {
            v61 = (char *)*v12;
            v62 = (v57 - (_BYTE *)*v12) >> 3;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 61)
LABEL_122:
              sub_100259694();
            v64 = v56 - (_QWORD)v61;
            if (v64 >> 2 > v63)
              v63 = v64 >> 2;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65)
            {
              v66 = (char *)sub_10025E6A0(v13, v65);
              v61 = (char *)a1[1];
              v57 = (char *)a1[2];
            }
            else
            {
              v66 = 0;
            }
            v73 = &v66[8 * v62];
            *(_QWORD *)v73 = 0;
            v58 = v73 + 8;
            while (v57 != v61)
            {
              v74 = *((_QWORD *)v57 - 1);
              v57 -= 8;
              *((_QWORD *)v73 - 1) = v74;
              v73 -= 8;
            }
            a1[1] = v73;
            a1[2] = v58;
            a1[3] = &v66[8 * v65];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_QWORD *)v57 = 0;
            v58 = v57 + 8;
          }
          a1[2] = v58;
LABEL_110:
          v77 = *((_QWORD *)this + 1);
          if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *((_QWORD *)this + 2))
          {
            *(v58 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_114;
        }
        if ((PB::Reader::placeMark(this, v79, v26, a4) & 1) != 0)
          return 0;
        v28 = *((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        while (v28 < v29 && !*((_BYTE *)this + 24))
        {
          v31 = (char *)a1[2];
          v30 = a1[3];
          if ((unint64_t)v31 >= v30)
          {
            v33 = (char *)*v12;
            v34 = (v31 - (_BYTE *)*v12) >> 3;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61)
              goto LABEL_122;
            v36 = v30 - (_QWORD)v33;
            if (v36 >> 2 > v35)
              v35 = v36 >> 2;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)sub_10025E6A0(v13, v37);
              v33 = (char *)a1[1];
              v31 = (char *)a1[2];
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[8 * v34];
            *(_QWORD *)v39 = 0;
            v32 = v39 + 8;
            while (v31 != v33)
            {
              v40 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *((_QWORD *)v39 - 1) = v40;
              v39 -= 8;
            }
            a1[1] = v39;
            a1[2] = v32;
            a1[3] = &v38[8 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_QWORD *)v31 = 0;
            v32 = v31 + 8;
          }
          a1[2] = v32;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_78;
          *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
          v29 = *((_QWORD *)this + 2);
          v28 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v28;
        }
LABEL_79:
        PB::Reader::recallMark(this, v79);
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0)
        return 0;
LABEL_114:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    if ((_DWORD)v26 != 2)
    {
      v60 = (char *)a1[5];
      v59 = a1[6];
      if ((unint64_t)v60 >= v59)
      {
        v67 = (char *)*v10;
        v68 = (v60 - (_BYTE *)*v10) >> 3;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61)
LABEL_123:
          sub_100259694();
        v70 = v59 - (_QWORD)v67;
        if (v70 >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          v72 = (char *)sub_10025E6A0(v11, v71);
          v67 = (char *)a1[4];
          v60 = (char *)a1[5];
        }
        else
        {
          v72 = 0;
        }
        v75 = &v72[8 * v68];
        *(_QWORD *)v75 = 0;
        v58 = v75 + 8;
        while (v60 != v67)
        {
          v76 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v75 - 1) = v76;
          v75 -= 8;
        }
        a1[4] = v75;
        a1[5] = v58;
        a1[6] = &v72[8 * v71];
        if (v67)
          operator delete(v67);
      }
      else
      {
        *(_QWORD *)v60 = 0;
        v58 = v60 + 8;
      }
      a1[5] = v58;
      goto LABEL_110;
    }
    if ((PB::Reader::placeMark(this, v79, v26, a4) & 1) != 0)
      return 0;
    v42 = *((_QWORD *)this + 1);
    v43 = *((_QWORD *)this + 2);
    while (v42 < v43 && !*((_BYTE *)this + 24))
    {
      v45 = (char *)a1[5];
      v44 = a1[6];
      if ((unint64_t)v45 >= v44)
      {
        v47 = (char *)*v10;
        v48 = (v45 - (_BYTE *)*v10) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          goto LABEL_123;
        v50 = v44 - (_QWORD)v47;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)sub_10025E6A0(v11, v51);
          v47 = (char *)a1[4];
          v45 = (char *)a1[5];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[8 * v48];
        *(_QWORD *)v53 = 0;
        v46 = v53 + 8;
        while (v45 != v47)
        {
          v54 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *((_QWORD *)v53 - 1) = v54;
          v53 -= 8;
        }
        a1[4] = v53;
        a1[5] = v46;
        a1[6] = &v52[8 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_QWORD *)v45 = 0;
        v46 = v45 + 8;
      }
      a1[5] = v46;
      v55 = *((_QWORD *)this + 1);
      if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
      {
LABEL_78:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_79;
      }
      *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
      v43 = *((_QWORD *)this + 2);
      v42 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v42;
    }
    goto LABEL_79;
  }
  return v6 == 0;
}

uint64_t sub_10164C17C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 1u);
  }
  v8 = *(double **)(v3 + 32);
  v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9, 2u);
  }
  return result;
}

uint64_t sub_10164C1E4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C42C0;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_10164C204(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10164C228(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)result = &off_1021C42C0;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v3 = 64;
    *(_WORD *)(result + 92) = 64;
    *(_QWORD *)(result + 56) = v4;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 80) = v9;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 72) = v10;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 64) = v11;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v13;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_26:
    v15 = *(_BYTE *)(a2 + 88);
    *(_WORD *)(result + 92) = v3 | 0x800;
    *(_BYTE *)(result + 88) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 32) = v14;
  if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_10164C39C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "arrivalDate", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a1 + 92) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "confidenceOfGeoLocation", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "departureDate", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "distanceToLoi", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "hashedLatLong", *(_BYTE *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "uncertaintyOfGeoLocation", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x100) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "withinDistance", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164C54C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *(_DWORD *)(a1 + 80) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 84) = v31;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_84:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 88) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10164CADC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 6u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 7u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 88), 0xCu);
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 92) & 0x800) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 88), 0xCu);
  return result;
}

_QWORD *sub_10164CC50(_QWORD *result)
{
  *result = off_1021C42F8;
  result[4] = 0;
  result[24] = 0;
  return result;
}

void sub_10164CC68(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C42F8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10164CCAC(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C42F8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_10164CD04(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  *(_QWORD *)result = off_1021C42F8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 192) = 0;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x8000) != 0)
  {
    v4 = *(_DWORD *)(a2 + 100);
    v3 = 0x8000;
    *(_QWORD *)(result + 192) = 0x8000;
    *(_DWORD *)(result + 100) = v4;
    v2 = *(_QWORD *)(a2 + 192);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 72);
    v3 |= 0x100uLL;
    *(_QWORD *)(result + 192) = v3;
    *(_DWORD *)(result + 72) = v5;
    v2 = *(_QWORD *)(a2 + 192);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v9 = *(_DWORD *)(a2 + 104);
    v3 |= 0x10000uLL;
    *(_QWORD *)(result + 192) = v3;
    *(_DWORD *)(result + 104) = v9;
    v2 = *(_QWORD *)(a2 + 192);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_49;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  v10 = *(_DWORD *)(a2 + 108);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 108) = v10;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_50;
  }
LABEL_49:
  v11 = *(_DWORD *)(a2 + 84);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 84) = v11;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_51;
  }
LABEL_50:
  v12 = *(_DWORD *)(a2 + 148);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 148) = v12;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_52;
  }
LABEL_51:
  v13 = *(_DWORD *)(a2 + 92);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 92) = v13;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_53;
  }
LABEL_52:
  v14 = *(_DWORD *)(a2 + 88);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 88) = v14;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_54;
  }
LABEL_53:
  v15 = *(_DWORD *)(a2 + 136);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 136) = v15;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_55;
  }
LABEL_54:
  v16 = *(_QWORD *)(a2 + 40);
  v3 |= 8uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_QWORD *)(result + 40) = v16;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      goto LABEL_16;
    goto LABEL_56;
  }
LABEL_55:
  v17 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_QWORD *)(result + 8) = v17;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_57;
  }
LABEL_56:
  v18 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_QWORD *)(result + 24) = v18;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_58;
  }
LABEL_57:
  v19 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_QWORD *)(result + 16) = v19;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_19;
    goto LABEL_59;
  }
LABEL_58:
  v20 = *(_DWORD *)(a2 + 68);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 68) = v20;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_20;
    goto LABEL_60;
  }
LABEL_59:
  v21 = *(_DWORD *)(a2 + 156);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 156) = v21;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_61;
  }
LABEL_60:
  v22 = *(_DWORD *)(a2 + 144);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 144) = v22;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_62;
  }
LABEL_61:
  v23 = *(_DWORD *)(a2 + 96);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 96) = v23;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x400000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_63;
  }
LABEL_62:
  v24 = *(_DWORD *)(a2 + 128);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 128) = v24;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_64;
  }
LABEL_63:
  v25 = *(_DWORD *)(a2 + 124);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 124) = v25;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_65;
  }
LABEL_64:
  v26 = *(_DWORD *)(a2 + 132);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 132) = v26;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x10) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_66;
  }
LABEL_65:
  v27 = *(_QWORD *)(a2 + 48);
  v3 |= 0x10uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_QWORD *)(result + 48) = v27;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_27;
    goto LABEL_67;
  }
LABEL_66:
  v28 = *(_DWORD *)(a2 + 180);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 180) = v28;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_68;
  }
LABEL_67:
  v29 = *(_DWORD *)(a2 + 160);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 160) = v29;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x100000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_69;
  }
LABEL_68:
  v30 = *(_DWORD *)(a2 + 120);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 120) = v30;
  v2 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_69:
  v31 = *(_DWORD *)(a2 + 116);
  v3 |= 0x80000uLL;
  *(_QWORD *)(result + 192) = v3;
  *(_DWORD *)(result + 116) = v31;
  if ((*(_QWORD *)(a2 + 192) & 0x40000) != 0)
  {
LABEL_30:
    v6 = *(_DWORD *)(a2 + 112);
    *(_QWORD *)(result + 192) = v3 | 0x40000;
    *(_DWORD *)(result + 112) = v6;
  }
LABEL_31:
  if (*(_QWORD *)(a2 + 32))
    operator new();
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x400) != 0)
  {
    v32 = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(result + 192) |= 0x400uLL;
    *(_DWORD *)(result + 80) = v32;
    v7 = *(_QWORD *)(a2 + 192);
    if ((v7 & 0x200) == 0)
    {
LABEL_35:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_36;
      goto LABEL_73;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  v33 = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(result + 192) |= 0x200uLL;
  *(_DWORD *)(result + 76) = v33;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  v34 = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(result + 192) |= 0x2000000uLL;
  *(_DWORD *)(result + 140) = v34;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v7 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_75;
  }
LABEL_74:
  v35 = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(result + 192) |= 0x1000000000uLL;
  *(_DWORD *)(result + 184) = v35;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x20) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_76;
  }
LABEL_75:
  v36 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 192) |= 0x20uLL;
  *(_QWORD *)(result + 56) = v36;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_77;
  }
LABEL_76:
  v37 = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(result + 192) |= 0x10000000uLL;
  *(_DWORD *)(result + 152) = v37;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x40) == 0)
      goto LABEL_41;
    goto LABEL_78;
  }
LABEL_77:
  v38 = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(result + 192) |= 0x2000000000uLL;
  *(_DWORD *)(result + 188) = v38;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x40) == 0)
  {
LABEL_41:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_79;
  }
LABEL_78:
  v39 = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(result + 192) |= 0x40uLL;
  *(_DWORD *)(result + 64) = v39;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_80;
  }
LABEL_79:
  v40 = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(result + 192) |= 0x80000000uLL;
  *(_DWORD *)(result + 164) = v40;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_81;
  }
LABEL_80:
  v41 = *(_DWORD *)(a2 + 168);
  *(_QWORD *)(result + 192) |= (unint64_t)&_mh_execute_header;
  *(_DWORD *)(result + 168) = v41;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0)
      return result;
    goto LABEL_45;
  }
LABEL_81:
  v42 = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(result + 192) |= 0x200000000uLL;
  *(_DWORD *)(result + 172) = v42;
  if ((*(_QWORD *)(a2 + 192) & 0x400000000) == 0)
    return result;
LABEL_45:
  v8 = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(result + 192) |= 0x400000000uLL;
  *(_DWORD *)(result + 176) = v8;
  return result;
}

uint64_t sub_10164D1E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "alsLux", *(_DWORD *)(a1 + 64));
    v5 = *(_QWORD *)(a1 + 192);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "caltype", *(_DWORD *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "exitState", *(_DWORD *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "hidTimestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isMoving", *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "isVehicular", *(_DWORD *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "machineFrequency", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "mounted", *(_DWORD *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "mountedConfidence", *(_DWORD *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "now", *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rawConfidence", *(_DWORD *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rawIsVehicular", *(_DWORD *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rawMotionType", *(_DWORD *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rowStrokeAmplitude", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rowStrokeFrequency", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rowStrokePower", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "seq", *(_DWORD *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_24;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0)
      goto LABEL_25;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "standing", *(_DWORD *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "startTime", *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "turn", *(_DWORD *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "typeYouth", *(_DWORD *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "vectorMagnitude", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "vehicleExitState", *(_DWORD *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_31;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_75:
  PB::TextFormatter::format(this, "vehicleType", *(_DWORD *)(a1 + 176));
  if ((*(_QWORD *)(a1 + 192) & 0x800000000) != 0)
LABEL_34:
    PB::TextFormatter::format(this, "vehicularConfidence", *(_DWORD *)(a1 + 180));
LABEL_35:
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "vehicularFlags");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(this, "wallStartTime", *(double *)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 192);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0)
        goto LABEL_40;
      goto LABEL_79;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(this, "workoutDetectionTime", *(_QWORD *)(a1 + 48));
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0)
      goto LABEL_41;
LABEL_80:
    PB::TextFormatter::format(this, "workoutEscalationTime", *(_QWORD *)(a1 + 56));
    if ((*(_QWORD *)(a1 + 192) & 0x2000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_42;
  }
LABEL_79:
  PB::TextFormatter::format(this, "workoutDetectionType", *(_DWORD *)(a1 + 184));
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 0x20) != 0)
    goto LABEL_80;
LABEL_41:
  if ((v7 & 0x2000000000) != 0)
LABEL_42:
    PB::TextFormatter::format(this, "youthClassificationReason", *(_DWORD *)(a1 + 188));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164D6F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  unint64_t v273;
  char v274;
  char v275;
  unsigned int v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  char v282;
  char v283;
  unsigned int v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  unint64_t v289;
  char v290;
  char v291;
  unsigned int v292;
  unint64_t v293;
  char v294;
  char v295;
  unsigned int v296;
  unint64_t v297;
  char v298;
  char v299;
  unsigned int v300;
  unint64_t v301;
  char v302;
  char v303;
  unsigned int v304;
  unint64_t v305;
  char v306;
  char v307;
  unsigned int v308;
  unint64_t v309;
  char v310;
  char v311;
  unsigned int v312;
  unint64_t v313;
  char v314;
  char v315;
  unsigned int v316;
  unint64_t v317;
  char v318;
  char v319;
  unsigned int v320;
  unint64_t v321;
  char v322;
  char v323;
  unsigned int v324;
  unint64_t v325;
  char v326;
  char v327;
  unsigned int v328;
  unint64_t v329;
  char v330;
  char v331;
  unsigned int v332;
  unint64_t v333;
  char v334;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 192) |= 0x8000uLL;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_445;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_246:
            LODWORD(v25) = 0;
            goto LABEL_445;
          }
          v235 = 0;
          v236 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v237 = v20 + 1;
              v238 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v237;
              v25 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                v20 = v237;
                v14 = v236++ > 8;
                if (v14)
                  goto LABEL_246;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_445:
          *(_DWORD *)(a1 + 100) = v25;
          goto LABEL_518;
        case 2u:
          *(_QWORD *)(a1 + 192) |= 0x100uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_448;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_253:
            LODWORD(v34) = 0;
            goto LABEL_448;
          }
          v239 = 0;
          v240 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v241 = v29 + 1;
              v242 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v241;
              v34 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                v29 = v241;
                v14 = v240++ > 8;
                if (v14)
                  goto LABEL_253;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_448:
          *(_DWORD *)(a1 + 72) = v34;
          goto LABEL_518;
        case 3u:
          *(_QWORD *)(a1 + 192) |= 0x10000uLL;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_451;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_260:
            LODWORD(v42) = 0;
            goto LABEL_451;
          }
          v243 = 0;
          v244 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v245 = v37 + 1;
              v246 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v245;
              v42 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                v37 = v245;
                v14 = v244++ > 8;
                if (v14)
                  goto LABEL_260;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_451:
          *(_DWORD *)(a1 + 104) = v42;
          goto LABEL_518;
        case 4u:
          *(_QWORD *)(a1 + 192) |= 0x20000uLL;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_454;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_267:
            LODWORD(v50) = 0;
            goto LABEL_454;
          }
          v247 = 0;
          v248 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v249 = v45 + 1;
              v250 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v249;
              v50 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                v45 = v249;
                v14 = v248++ > 8;
                if (v14)
                  goto LABEL_267;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_454:
          *(_DWORD *)(a1 + 108) = v50;
          goto LABEL_518;
        case 5u:
          *(_QWORD *)(a1 + 192) |= 0x800uLL;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          v55 = *(_QWORD *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)this + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_457;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v58) = 0;
            goto LABEL_457;
          }
          v251 = 0;
          v252 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v253 = v53 + 1;
              v254 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)this + 1) = v253;
              v58 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                v53 = v253;
                v14 = v252++ > 8;
                if (v14)
                  goto LABEL_274;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_457:
          *(_DWORD *)(a1 + 84) = v58;
          goto LABEL_518;
        case 6u:
          *(_QWORD *)(a1 + 192) |= 0x8000000uLL;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_460;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v66) = 0;
            goto LABEL_460;
          }
          v255 = 0;
          v256 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v257 = v61 + 1;
              v258 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v257;
              v66 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                v61 = v257;
                v14 = v256++ > 8;
                if (v14)
                  goto LABEL_281;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_460:
          *(_DWORD *)(a1 + 148) = v66;
          goto LABEL_518;
        case 7u:
          *(_QWORD *)(a1 + 192) |= 0x2000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_463;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v74) = 0;
            goto LABEL_463;
          }
          v259 = 0;
          v260 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v261 = v69 + 1;
              v262 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v261;
              v74 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                v69 = v261;
                v14 = v260++ > 8;
                if (v14)
                  goto LABEL_288;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_463:
          *(_DWORD *)(a1 + 92) = v74;
          goto LABEL_518;
        case 8u:
          *(_QWORD *)(a1 + 192) |= 0x1000uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_466;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_295:
            LODWORD(v82) = 0;
            goto LABEL_466;
          }
          v263 = 0;
          v264 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v265 = v77 + 1;
              v266 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v265;
              v82 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                v77 = v265;
                v14 = v264++ > 8;
                if (v14)
                  goto LABEL_295;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_466:
          *(_DWORD *)(a1 + 88) = v82;
          goto LABEL_518;
        case 9u:
          *(_QWORD *)(a1 + 192) |= 0x1000000uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_469;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_302:
            LODWORD(v90) = 0;
            goto LABEL_469;
          }
          v267 = 0;
          v268 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v269 = v85 + 1;
              v270 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v269;
              v90 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                v85 = v269;
                v14 = v268++ > 8;
                if (v14)
                  goto LABEL_302;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_469:
          *(_DWORD *)(a1 + 136) = v90;
          goto LABEL_518;
        case 0xAu:
          *(_QWORD *)(a1 + 192) |= 8uLL;
          v93 = *((_QWORD *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v93);
          goto LABEL_93;
        case 0xBu:
          *(_QWORD *)(a1 + 192) |= 1uLL;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v94);
LABEL_93:
          v95 = *((_QWORD *)this + 1) + 8;
          goto LABEL_417;
        case 0xCu:
          *(_QWORD *)(a1 + 192) |= 4uLL;
          v96 = *((_QWORD *)this + 1);
          v97 = *((_QWORD *)this + 2);
          v98 = *(_QWORD *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)this + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_472;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_309:
            v101 = 0;
            goto LABEL_472;
          }
          v271 = 0;
          v272 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v97 == v96)
            {
              v101 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v273 = v96 + 1;
              v274 = *(_BYTE *)(v98 + v96);
              *((_QWORD *)this + 1) = v273;
              v101 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                v96 = v273;
                v14 = v272++ > 8;
                if (v14)
                  goto LABEL_309;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v101 = 0;
            }
            break;
          }
LABEL_472:
          *(_QWORD *)(a1 + 24) = v101;
          goto LABEL_518;
        case 0xDu:
          *(_QWORD *)(a1 + 192) |= 2uLL;
          v104 = *((_QWORD *)this + 1);
          v105 = *((_QWORD *)this + 2);
          v106 = *(_QWORD *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)this + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_475;
              v107 += 7;
              v104 = v110;
              v14 = v108++ > 8;
            }
            while (!v14);
LABEL_316:
            v109 = 0;
            goto LABEL_475;
          }
          v275 = 0;
          v276 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v105 == v104)
            {
              v109 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v277 = v104 + 1;
              v278 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)this + 1) = v277;
              v109 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                v104 = v277;
                v14 = v276++ > 8;
                if (v14)
                  goto LABEL_316;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v109 = 0;
            }
            break;
          }
LABEL_475:
          *(_QWORD *)(a1 + 16) = v109;
          goto LABEL_518;
        case 0xEu:
          *(_QWORD *)(a1 + 192) |= 0x80uLL;
          v112 = *((_QWORD *)this + 1);
          v113 = *((_QWORD *)this + 2);
          v114 = *(_QWORD *)this;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            v115 = 0;
            v116 = 0;
            v117 = 0;
            do
            {
              v118 = v112 + 1;
              *((_QWORD *)this + 1) = v112 + 1;
              v119 = *(_BYTE *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0)
                goto LABEL_478;
              v115 += 7;
              v112 = v118;
              v14 = v116++ > 8;
            }
            while (!v14);
LABEL_323:
            LODWORD(v117) = 0;
            goto LABEL_478;
          }
          v279 = 0;
          v280 = 0;
          v117 = 0;
          if (v113 <= v112)
            v113 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v113 == v112)
            {
              LODWORD(v117) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v281 = v112 + 1;
              v282 = *(_BYTE *)(v114 + v112);
              *((_QWORD *)this + 1) = v281;
              v117 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                v112 = v281;
                v14 = v280++ > 8;
                if (v14)
                  goto LABEL_323;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v117) = 0;
            }
            break;
          }
LABEL_478:
          *(_DWORD *)(a1 + 68) = v117;
          goto LABEL_518;
        case 0xFu:
          *(_QWORD *)(a1 + 192) |= 0x20000000uLL;
          v120 = *((_QWORD *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v120);
          goto LABEL_416;
        case 0x10u:
          *(_QWORD *)(a1 + 192) |= 0x4000000uLL;
          v121 = *((_QWORD *)this + 1);
          v122 = *((_QWORD *)this + 2);
          v123 = *(_QWORD *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            v124 = 0;
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = v121 + 1;
              *((_QWORD *)this + 1) = v121 + 1;
              v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0)
                goto LABEL_481;
              v124 += 7;
              v121 = v127;
              v14 = v125++ > 8;
            }
            while (!v14);
LABEL_330:
            LODWORD(v126) = 0;
            goto LABEL_481;
          }
          v283 = 0;
          v284 = 0;
          v126 = 0;
          if (v122 <= v121)
            v122 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v285 = v121 + 1;
              v286 = *(_BYTE *)(v123 + v121);
              *((_QWORD *)this + 1) = v285;
              v126 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                v121 = v285;
                v14 = v284++ > 8;
                if (v14)
                  goto LABEL_330;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v126) = 0;
            }
            break;
          }
LABEL_481:
          *(_DWORD *)(a1 + 144) = v126;
          goto LABEL_518;
        case 0x11u:
          *(_QWORD *)(a1 + 192) |= 0x4000uLL;
          v129 = *((_QWORD *)this + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v129);
          goto LABEL_416;
        case 0x12u:
          *(_QWORD *)(a1 + 192) |= 0x400000uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_416;
        case 0x13u:
          *(_QWORD *)(a1 + 192) |= 0x200000uLL;
          v131 = *((_QWORD *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v131);
          goto LABEL_416;
        case 0x14u:
          *(_QWORD *)(a1 + 192) |= 0x800000uLL;
          v132 = *((_QWORD *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v132);
          goto LABEL_416;
        case 0x15u:
          *(_QWORD *)(a1 + 192) |= 0x10uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_484;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_337:
            v138 = 0;
            goto LABEL_484;
          }
          v287 = 0;
          v288 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              v138 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v289 = v133 + 1;
              v290 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v289;
              v138 |= (unint64_t)(v290 & 0x7F) << v287;
              if (v290 < 0)
              {
                v287 += 7;
                v133 = v289;
                v14 = v288++ > 8;
                if (v14)
                  goto LABEL_337;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v138 = 0;
            }
            break;
          }
LABEL_484:
          *(_QWORD *)(a1 + 48) = v138;
          goto LABEL_518;
        case 0x16u:
          *(_QWORD *)(a1 + 192) |= 0x800000000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_487;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_344:
            LODWORD(v146) = 0;
            goto LABEL_487;
          }
          v291 = 0;
          v292 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v293 = v141 + 1;
              v294 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v293;
              v146 |= (unint64_t)(v294 & 0x7F) << v291;
              if (v294 < 0)
              {
                v291 += 7;
                v141 = v293;
                v14 = v292++ > 8;
                if (v14)
                  goto LABEL_344;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_487:
          *(_DWORD *)(a1 + 180) = v146;
          goto LABEL_518;
        case 0x17u:
          *(_QWORD *)(a1 + 192) |= 0x40000000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_490;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_351:
            LODWORD(v154) = 0;
            goto LABEL_490;
          }
          v295 = 0;
          v296 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v297 = v149 + 1;
              v298 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v297;
              v154 |= (unint64_t)(v298 & 0x7F) << v295;
              if (v298 < 0)
              {
                v295 += 7;
                v149 = v297;
                v14 = v296++ > 8;
                if (v14)
                  goto LABEL_351;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_490:
          *(_DWORD *)(a1 + 160) = v154;
          goto LABEL_518;
        case 0x18u:
          *(_QWORD *)(a1 + 192) |= 0x100000uLL;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_493;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_358:
            LODWORD(v162) = 0;
            goto LABEL_493;
          }
          v299 = 0;
          v300 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v301 = v157 + 1;
              v302 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v301;
              v162 |= (unint64_t)(v302 & 0x7F) << v299;
              if (v302 < 0)
              {
                v299 += 7;
                v157 = v301;
                v14 = v300++ > 8;
                if (v14)
                  goto LABEL_358;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_493:
          *(_DWORD *)(a1 + 120) = v162;
          goto LABEL_518;
        case 0x19u:
          *(_QWORD *)(a1 + 192) |= 0x80000uLL;
          v165 = *((_QWORD *)this + 1);
          v166 = *((_QWORD *)this + 2);
          v167 = *(_QWORD *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              v171 = v165 + 1;
              *((_QWORD *)this + 1) = v165 + 1;
              v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0)
                goto LABEL_496;
              v168 += 7;
              v165 = v171;
              v14 = v169++ > 8;
            }
            while (!v14);
LABEL_365:
            LODWORD(v170) = 0;
            goto LABEL_496;
          }
          v303 = 0;
          v304 = 0;
          v170 = 0;
          if (v166 <= v165)
            v166 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v305 = v165 + 1;
              v306 = *(_BYTE *)(v167 + v165);
              *((_QWORD *)this + 1) = v305;
              v170 |= (unint64_t)(v306 & 0x7F) << v303;
              if (v306 < 0)
              {
                v303 += 7;
                v165 = v305;
                v14 = v304++ > 8;
                if (v14)
                  goto LABEL_365;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v170) = 0;
            }
            break;
          }
LABEL_496:
          *(_DWORD *)(a1 + 116) = v170;
          goto LABEL_518;
        case 0x1Au:
          *(_QWORD *)(a1 + 192) |= 0x40000uLL;
          v173 = *((_QWORD *)this + 1);
          v174 = *((_QWORD *)this + 2);
          v175 = *(_QWORD *)this;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            v176 = 0;
            v177 = 0;
            v178 = 0;
            do
            {
              v179 = v173 + 1;
              *((_QWORD *)this + 1) = v173 + 1;
              v180 = *(_BYTE *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0)
                goto LABEL_499;
              v176 += 7;
              v173 = v179;
              v14 = v177++ > 8;
            }
            while (!v14);
LABEL_372:
            LODWORD(v178) = 0;
            goto LABEL_499;
          }
          v307 = 0;
          v308 = 0;
          v178 = 0;
          if (v174 <= v173)
            v174 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v174 == v173)
            {
              LODWORD(v178) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v309 = v173 + 1;
              v310 = *(_BYTE *)(v175 + v173);
              *((_QWORD *)this + 1) = v309;
              v178 |= (unint64_t)(v310 & 0x7F) << v307;
              if (v310 < 0)
              {
                v307 += 7;
                v173 = v309;
                v14 = v308++ > 8;
                if (v14)
                  goto LABEL_372;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v178) = 0;
            }
            break;
          }
LABEL_499:
          *(_DWORD *)(a1 + 112) = v178;
          goto LABEL_518;
        case 0x1Bu:
          operator new();
        case 0x1Cu:
          *(_QWORD *)(a1 + 192) |= 0x400uLL;
          v181 = *((_QWORD *)this + 1);
          if (v181 > 0xFFFFFFFFFFFFFFFBLL || v181 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v181);
          goto LABEL_416;
        case 0x1Du:
          *(_QWORD *)(a1 + 192) |= 0x200uLL;
          v182 = *((_QWORD *)this + 1);
          if (v182 > 0xFFFFFFFFFFFFFFFBLL || v182 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v182);
          goto LABEL_416;
        case 0x1Eu:
          *(_QWORD *)(a1 + 192) |= 0x2000000uLL;
          v183 = *((_QWORD *)this + 1);
          if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v183);
          goto LABEL_416;
        case 0x1Fu:
          *(_QWORD *)(a1 + 192) |= 0x1000000000uLL;
          v184 = *((_QWORD *)this + 1);
          v185 = *((_QWORD *)this + 2);
          v186 = *(_QWORD *)this;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            v187 = 0;
            v188 = 0;
            v189 = 0;
            do
            {
              v190 = v184 + 1;
              *((_QWORD *)this + 1) = v184 + 1;
              v191 = *(_BYTE *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0)
                goto LABEL_502;
              v187 += 7;
              v184 = v190;
              v14 = v188++ > 8;
            }
            while (!v14);
LABEL_379:
            LODWORD(v189) = 0;
            goto LABEL_502;
          }
          v311 = 0;
          v312 = 0;
          v189 = 0;
          if (v185 <= v184)
            v185 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v185 == v184)
            {
              LODWORD(v189) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v313 = v184 + 1;
              v314 = *(_BYTE *)(v186 + v184);
              *((_QWORD *)this + 1) = v313;
              v189 |= (unint64_t)(v314 & 0x7F) << v311;
              if (v314 < 0)
              {
                v311 += 7;
                v184 = v313;
                v14 = v312++ > 8;
                if (v14)
                  goto LABEL_379;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v189) = 0;
            }
            break;
          }
LABEL_502:
          *(_DWORD *)(a1 + 184) = v189;
          goto LABEL_518;
        case 0x20u:
          *(_QWORD *)(a1 + 192) |= 0x20uLL;
          v192 = *((_QWORD *)this + 1);
          v193 = *((_QWORD *)this + 2);
          v194 = *(_QWORD *)this;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            v195 = 0;
            v196 = 0;
            v197 = 0;
            do
            {
              v198 = v192 + 1;
              *((_QWORD *)this + 1) = v192 + 1;
              v199 = *(_BYTE *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0)
                goto LABEL_505;
              v195 += 7;
              v192 = v198;
              v14 = v196++ > 8;
            }
            while (!v14);
LABEL_386:
            v197 = 0;
            goto LABEL_505;
          }
          v315 = 0;
          v316 = 0;
          v197 = 0;
          if (v193 <= v192)
            v193 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v193 == v192)
            {
              v197 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v317 = v192 + 1;
              v318 = *(_BYTE *)(v194 + v192);
              *((_QWORD *)this + 1) = v317;
              v197 |= (unint64_t)(v318 & 0x7F) << v315;
              if (v318 < 0)
              {
                v315 += 7;
                v192 = v317;
                v14 = v316++ > 8;
                if (v14)
                  goto LABEL_386;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v197 = 0;
            }
            break;
          }
LABEL_505:
          *(_QWORD *)(a1 + 56) = v197;
          goto LABEL_518;
        case 0x21u:
          *(_QWORD *)(a1 + 192) |= 0x10000000uLL;
          v200 = *((_QWORD *)this + 1);
          v201 = *((_QWORD *)this + 2);
          v202 = *(_QWORD *)this;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            v203 = 0;
            v204 = 0;
            v205 = 0;
            do
            {
              v206 = v200 + 1;
              *((_QWORD *)this + 1) = v200 + 1;
              v207 = *(_BYTE *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0)
                goto LABEL_508;
              v203 += 7;
              v200 = v206;
              v14 = v204++ > 8;
            }
            while (!v14);
LABEL_393:
            LODWORD(v205) = 0;
            goto LABEL_508;
          }
          v319 = 0;
          v320 = 0;
          v205 = 0;
          if (v201 <= v200)
            v201 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v201 == v200)
            {
              LODWORD(v205) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v321 = v200 + 1;
              v322 = *(_BYTE *)(v202 + v200);
              *((_QWORD *)this + 1) = v321;
              v205 |= (unint64_t)(v322 & 0x7F) << v319;
              if (v322 < 0)
              {
                v319 += 7;
                v200 = v321;
                v14 = v320++ > 8;
                if (v14)
                  goto LABEL_393;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v205) = 0;
            }
            break;
          }
LABEL_508:
          *(_DWORD *)(a1 + 152) = v205;
          goto LABEL_518;
        case 0x22u:
          *(_QWORD *)(a1 + 192) |= 0x2000000000uLL;
          v208 = *((_QWORD *)this + 1);
          v209 = *((_QWORD *)this + 2);
          v210 = *(_QWORD *)this;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            v211 = 0;
            v212 = 0;
            v213 = 0;
            do
            {
              v214 = v208 + 1;
              *((_QWORD *)this + 1) = v208 + 1;
              v215 = *(_BYTE *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0)
                goto LABEL_511;
              v211 += 7;
              v208 = v214;
              v14 = v212++ > 8;
            }
            while (!v14);
LABEL_400:
            LODWORD(v213) = 0;
            goto LABEL_511;
          }
          v323 = 0;
          v324 = 0;
          v213 = 0;
          if (v209 <= v208)
            v209 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v209 == v208)
            {
              LODWORD(v213) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v325 = v208 + 1;
              v326 = *(_BYTE *)(v210 + v208);
              *((_QWORD *)this + 1) = v325;
              v213 |= (unint64_t)(v326 & 0x7F) << v323;
              if (v326 < 0)
              {
                v323 += 7;
                v208 = v325;
                v14 = v324++ > 8;
                if (v14)
                  goto LABEL_400;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v213) = 0;
            }
            break;
          }
LABEL_511:
          *(_DWORD *)(a1 + 188) = v213;
          goto LABEL_518;
        case 0x23u:
          *(_QWORD *)(a1 + 192) |= 0x40uLL;
          v216 = *((_QWORD *)this + 1);
          v217 = *((_QWORD *)this + 2);
          v218 = *(_QWORD *)this;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            v219 = 0;
            v220 = 0;
            v221 = 0;
            do
            {
              v222 = v216 + 1;
              *((_QWORD *)this + 1) = v216 + 1;
              v223 = *(_BYTE *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0)
                goto LABEL_514;
              v219 += 7;
              v216 = v222;
              v14 = v220++ > 8;
            }
            while (!v14);
LABEL_407:
            LODWORD(v221) = 0;
            goto LABEL_514;
          }
          v327 = 0;
          v328 = 0;
          v221 = 0;
          if (v217 <= v216)
            v217 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v217 == v216)
            {
              LODWORD(v221) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v329 = v216 + 1;
              v330 = *(_BYTE *)(v218 + v216);
              *((_QWORD *)this + 1) = v329;
              v221 |= (unint64_t)(v330 & 0x7F) << v327;
              if (v330 < 0)
              {
                v327 += 7;
                v216 = v329;
                v14 = v328++ > 8;
                if (v14)
                  goto LABEL_407;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v221) = 0;
            }
            break;
          }
LABEL_514:
          *(_DWORD *)(a1 + 64) = v221;
          goto LABEL_518;
        case 0x24u:
          *(_QWORD *)(a1 + 192) |= 0x80000000uLL;
          v224 = *((_QWORD *)this + 1);
          if (v224 > 0xFFFFFFFFFFFFFFFBLL || v224 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v224);
          goto LABEL_416;
        case 0x25u:
          *(_QWORD *)(a1 + 192) |= (unint64_t)&_mh_execute_header;
          v225 = *((_QWORD *)this + 1);
          if (v225 > 0xFFFFFFFFFFFFFFFBLL || v225 + 4 > *((_QWORD *)this + 2))
            goto LABEL_232;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v225);
          goto LABEL_416;
        case 0x26u:
          *(_QWORD *)(a1 + 192) |= 0x200000000uLL;
          v226 = *((_QWORD *)this + 1);
          if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v226);
LABEL_416:
            v95 = *((_QWORD *)this + 1) + 4;
LABEL_417:
            *((_QWORD *)this + 1) = v95;
          }
          else
          {
LABEL_232:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_518;
        case 0x27u:
          *(_QWORD *)(a1 + 192) |= 0x400000000uLL;
          v227 = *((_QWORD *)this + 1);
          v228 = *((_QWORD *)this + 2);
          v229 = *(_QWORD *)this;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            v230 = 0;
            v231 = 0;
            v232 = 0;
            do
            {
              v233 = v227 + 1;
              *((_QWORD *)this + 1) = v227 + 1;
              v234 = *(_BYTE *)(v229 + v227);
              v232 |= (unint64_t)(v234 & 0x7F) << v230;
              if ((v234 & 0x80) == 0)
                goto LABEL_517;
              v230 += 7;
              v227 = v233;
              v14 = v231++ > 8;
            }
            while (!v14);
LABEL_414:
            LODWORD(v232) = 0;
            goto LABEL_517;
          }
          v331 = 0;
          v332 = 0;
          v232 = 0;
          if (v228 <= v227)
            v228 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_518;
      }
      while (1)
      {
        if (v228 == v227)
        {
          LODWORD(v232) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_517;
        }
        v333 = v227 + 1;
        v334 = *(_BYTE *)(v229 + v227);
        *((_QWORD *)this + 1) = v333;
        v232 |= (unint64_t)(v334 & 0x7F) << v331;
        if ((v334 & 0x80) == 0)
          break;
        v331 += 7;
        v227 = v333;
        v14 = v332++ > 8;
        if (v14)
          goto LABEL_414;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v232) = 0;
LABEL_517:
      *(_DWORD *)(a1 + 176) = v232;
LABEL_518:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164F278(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  const PB::Base *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(result + 192);
  if ((v4 & 0x8000) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 100), 1u);
    v4 = *(_QWORD *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 2u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 3u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 4u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 5u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 6u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 7u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 8u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 9u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xAu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xBu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0xCu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xDu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0xEu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 0xFu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 0x10u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0x11u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0x12u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0x13u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x14u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 48), 0x15u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 0x16u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0x17u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x18u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x19u);
  if ((*(_QWORD *)(v3 + 192) & 0x40000) != 0)
LABEL_27:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x1Au);
LABEL_28:
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5, 0x1Bu);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 80), 0x1Cu);
    v6 = *(_QWORD *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0)
        goto LABEL_33;
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x1Du);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x1Eu);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 0x1Fu);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 0x20u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0x21u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x22u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0x23u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(float *)(v3 + 164), 0x24u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this, *(float *)(v3 + 168), 0x25u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x400000000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x27u);
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 172), 0x26u);
  if ((*(_QWORD *)(v3 + 192) & 0x400000000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x27u);
  return result;
}

uint64_t sub_10164F6D8(uint64_t result)
{
  if (!*(_QWORD *)(result + 32))
    operator new();
  return result;
}

uint64_t sub_10164F73C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4330;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10164F754(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10164F778(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021C4330;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10164F7A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isWifiAssociated", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164F7F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164F97C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

_QWORD *sub_10164F99C(_QWORD *result)
{
  *result = off_1021C4368;
  result[1] = 0;
  return result;
}

void sub_10164F9AC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4368;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10164F9EC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4368;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10164FA40(_QWORD *result, uint64_t a2)
{
  *result = off_1021C4368;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10164FABC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164FB0C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164FCE4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10164FD00(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

uint64_t sub_10164FD74(uint64_t result)
{
  *(_QWORD *)result = &off_1021C43A0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10164FD8C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10164FDB0(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1021C43A0;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_10164FDDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "walkingVariable01", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164FE28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164FFC0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8), 1u);
  return result;
}

double sub_10164FFDC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C43D8;
  *(_DWORD *)(a1 + 76) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101650000(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C43D8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_101650050(PB::Base *a1)
{
  sub_101650000(a1);
  operator delete();
}

uint64_t sub_101650074(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)a1 = &off_1021C43D8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_BYTE *)(a2 + 76);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 64);
    v6 = 2;
    *(_BYTE *)(a1 + 76) = 2;
    *(_QWORD *)(a1 + 64) = v7;
    v5 = *(_BYTE *)(a2 + 76);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 56);
    v6 |= 1u;
    *(_BYTE *)(a1 + 76) = v6;
    *(_QWORD *)(a1 + 56) = v8;
    v5 = *(_BYTE *)(a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v9 = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 76) = v6 | 4;
    *(_DWORD *)(a1 + 72) = v9;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_101650150(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  if ((*(_BYTE *)(a1 + 76) & 1) != 0)
    PB::TextFormatter::format(this, "adjustedTimestamp", *(double *)(a1 + 56));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "gravity", v10);
  }
  v11 = *(_BYTE *)(a1 + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "rawProjectedSignal", *(float *)(a1 + 72));
    v11 = *(_BYTE *)(a1 + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10165023C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int v88;
  char *v89;
  int v90;
  unint64_t v91;
  _BYTE v94[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    v12 = (void **)(a1 + 32);
    v13 = a1 + 48;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 76) |= 2u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_118;
              v30 += 7;
              v27 = v33;
              v20 = v31++ > 8;
            }
            while (!v20);
LABEL_92:
            v32 = 0;
            goto LABEL_118;
          }
          v66 = 0;
          v67 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v68 = v27 + 1;
              v69 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v68;
              v32 |= (unint64_t)(v69 & 0x7F) << v66;
              if (v69 < 0)
              {
                v66 += 7;
                v27 = v68;
                v20 = v67++ > 8;
                if (v20)
                  goto LABEL_92;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v32 = 0;
            }
            break;
          }
LABEL_118:
          *(_QWORD *)(a1 + 64) = v32;
          goto LABEL_139;
        case 2u:
          *(_BYTE *)(a1 + 76) |= 1u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)this + 2))
            goto LABEL_135;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v35);
          v36 = *((_QWORD *)this + 1) + 8;
          goto LABEL_138;
        case 3u:
          *(_BYTE *)(a1 + 76) |= 4u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_135;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_137;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v71 = *(char **)(a1 + 40);
            v70 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v71 >= v70)
            {
              v75 = (char *)*v12;
              v76 = (v71 - (_BYTE *)*v12) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
LABEL_149:
                sub_100259694();
              v78 = v70 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_100260634(v13, v79);
                v75 = *(char **)(a1 + 32);
                v71 = *(char **)(a1 + 40);
              }
              else
              {
                v80 = 0;
              }
              v87 = &v80[4 * v76];
              *(_DWORD *)v87 = 0;
              v72 = v87 + 4;
              while (v71 != v75)
              {
                v88 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v87;
              *(_QWORD *)(a1 + 40) = v72;
              *(_QWORD *)(a1 + 48) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v72 = v71 + 4;
            }
            *(_QWORD *)(a1 + 40) = v72;
            goto LABEL_133;
          }
          if ((PB::Reader::placeMark(this, v94, v26, a4) & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 40);
            v40 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v12;
              v44 = (v41 - (_BYTE *)*v12) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_149;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_100260634(v13, v47);
                v43 = *(char **)(a1 + 32);
                v41 = *(char **)(a1 + 40);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v49;
              *(_QWORD *)(a1 + 40) = v42;
              *(_QWORD *)(a1 + 48) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *(_QWORD *)(a1 + 40) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
              goto LABEL_97;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_98;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v94, v26, a4) & 1) != 0)
              return 0;
            v52 = *((_QWORD *)this + 1);
            v53 = *((_QWORD *)this + 2);
            while (v52 < v53 && !*((_BYTE *)this + 24))
            {
              v55 = *(char **)(a1 + 16);
              v54 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v55 >= v54)
              {
                v57 = (char *)*v10;
                v58 = (v55 - (_BYTE *)*v10) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  goto LABEL_150;
                v60 = v54 - (_QWORD)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)sub_100260634(v11, v61);
                  v57 = *(char **)(a1 + 8);
                  v55 = *(char **)(a1 + 16);
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[4 * v58];
                *(_DWORD *)v63 = 0;
                v56 = v63 + 4;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v63;
                *(_QWORD *)(a1 + 16) = v56;
                *(_QWORD *)(a1 + 24) = &v62[4 * v61];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v55 = 0;
                v56 = v55 + 4;
              }
              *(_QWORD *)(a1 + 16) = v56;
              v65 = *((_QWORD *)this + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
              {
LABEL_97:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
              v53 = *((_QWORD *)this + 2);
              v52 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v52;
            }
LABEL_98:
            PB::Reader::recallMark(this, v94);
          }
          else
          {
            v74 = *(char **)(a1 + 16);
            v73 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              v81 = (char *)*v10;
              v82 = (v74 - (_BYTE *)*v10) >> 2;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 62)
LABEL_150:
                sub_100259694();
              v84 = v73 - (_QWORD)v81;
              if (v84 >> 1 > v83)
                v83 = v84 >> 1;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
                v85 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)sub_100260634(v11, v85);
                v81 = *(char **)(a1 + 8);
                v74 = *(char **)(a1 + 16);
              }
              else
              {
                v86 = 0;
              }
              v89 = &v86[4 * v82];
              *(_DWORD *)v89 = 0;
              v72 = v89 + 4;
              while (v74 != v81)
              {
                v90 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v89 - 1) = v90;
                v89 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v89;
              *(_QWORD *)(a1 + 16) = v72;
              *(_QWORD *)(a1 + 24) = &v86[4 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v72 = v74 + 4;
            }
            *(_QWORD *)(a1 + 16) = v72;
LABEL_133:
            v91 = *((_QWORD *)this + 1);
            if (v91 <= 0xFFFFFFFFFFFFFFFBLL && v91 + 4 <= *((_QWORD *)this + 2))
            {
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)this + v91);
LABEL_137:
              v36 = *((_QWORD *)this + 1) + 4;
LABEL_138:
              *((_QWORD *)this + 1) = v36;
            }
            else
            {
LABEL_135:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_139:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_139;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1016508E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(_BYTE *)(result + 76) & 1) == 0)
      goto LABEL_3;
LABEL_13:
    result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
    if ((*(_BYTE *)(v3 + 76) & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 64), 1u);
  v4 = *(_BYTE *)(v3 + 76);
  if ((v4 & 1) != 0)
    goto LABEL_13;
LABEL_3:
  if ((v4 & 4) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(float *)(v3 + 72), 3u);
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 4u);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10, 5u);
  }
  return result;
}

uint64_t sub_1016509A0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4410;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1016509B8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1016509DC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C4410;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 36) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(_BYTE *)(a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 40) = v3 | 0x10;
  *(_DWORD *)(a1 + 28) = v4;
  return *(float *)&v4;
}

uint64_t sub_101650ABC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalRotationRateFiltered", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "sample", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "verticalUserAcceleration", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "verticalRotationRateFiltered", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "walkSpeedFilteredSample", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101650BCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101650ED8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 28), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 28), 7u);
  return result;
}

uint64_t sub_101650FC0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4448;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_101650FD8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101650FFC(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)result = &off_1021C4448;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_WORD *)(result + 68) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 48) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_BYTE *)(a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_BYTE *)(result + 65) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 16) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 52) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 24) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 32) = v12;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 64);
    *(_WORD *)(result + 68) = v3 | 0x200;
    *(_BYTE *)(result + 64) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 8) = v13;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_10165114C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 48));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "fGpsAvailability", *(_BYTE *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "fractionalGrade", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "hrmin", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isStanding", *(_BYTE *)(a1 + 65));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "metSource", *(_DWORD *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "rawGradeType", *(_DWORD *)(a1 + 60));
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x10) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016512DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_125;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 65) = v28;
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v55 = v29++;
                  v56 = *(_BYTE *)(v30 + v55);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_113;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_114;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 52) = v33;
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v59 = v35++;
                  v60 = *(_BYTE *)(v36 + v59);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_118;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_119;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_125;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_123;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_124;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 56) = v45;
LABEL_125:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_68:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_125;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 64) = v48;
              goto LABEL_125;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_125;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016519A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 65), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xAu);
  if ((*(_WORD *)(v3 + 68) & 0x200) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0xBu);
  return result;
}

double sub_101651B00(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4480;
  *(_DWORD *)(a1 + 180) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

void sub_101651B44(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1021C4480;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
  PB::Base::~Base(this);
}

void sub_101651BE4(PB::Base *a1)
{
  sub_101651B44(a1);
  operator delete();
}

uint64_t sub_101651C08(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;

  *(_QWORD *)a1 = &off_1021C4480;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
    sub_1002A3054(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    sub_1002A3054(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 180) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 180) |= 1u;
    *(_DWORD *)(a1 + 176) = v8;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_101651D4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;
  float *v24;
  float v25;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(unsigned int **)(a1 + 80);
  v6 = *(unsigned int **)(a1 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "error", v7);
  }
  v8 = *(unsigned int **)(a1 + 8);
  v9 = *(unsigned int **)(a1 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "errorX", v10);
  }
  v11 = *(unsigned int **)(a1 + 32);
  v12 = *(unsigned int **)(a1 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "errorY", v13);
  }
  v14 = *(unsigned int **)(a1 + 56);
  v15 = *(unsigned int **)(a1 + 64);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "errorZ", v16);
  }
  v17 = *(float **)(a1 + 104);
  v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(this, "intercept", v19);
  }
  if ((*(_BYTE *)(a1 + 180) & 1) != 0)
    PB::TextFormatter::format(this, "overlap", *(float *)(a1 + 176));
  v20 = *(float **)(a1 + 128);
  v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    PB::TextFormatter::format(this, "slope", v22);
  }
  v23 = *(float **)(a1 + 152);
  v24 = *(float **)(a1 + 160);
  while (v23 != v24)
  {
    v25 = *v23++;
    PB::TextFormatter::format(this, "temperature", v25);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101651EDC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  BOOL v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char *v163;
  _DWORD *v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  _DWORD *v171;
  unint64_t v172;
  char *v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  int v221;
  char *v222;
  int v223;
  char *v224;
  int v225;
  unint64_t v226;
  char *v227;
  int v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  unint64_t v235;
  char v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  char *v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  char v245;
  unsigned int v246;
  unint64_t v248;
  char v249;
  unint64_t v250;
  char v251;
  char *v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  unint64_t v260;
  char v261;
  unint64_t v262;
  char v263;
  char *v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  char v269;
  unsigned int v270;
  unint64_t v272;
  char v273;
  unint64_t v274;
  char v275;
  void **v278;
  void **v279;
  void **v280;
  void **v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void **v285;
  void **v286;
  void **v287;
  _BYTE v288[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (_QWORD *)(a1 + 72);
    v279 = (void **)(a1 + 32);
    v280 = (void **)(a1 + 56);
    v11 = (_QWORD *)(a1 + 48);
    v278 = (void **)(a1 + 8);
    v12 = (_QWORD *)(a1 + 24);
    v13 = (_QWORD *)(a1 + 96);
    v287 = (void **)(a1 + 152);
    v284 = a1 + 168;
    v286 = (void **)(a1 + 104);
    v283 = a1 + 120;
    v285 = (void **)(a1 + 128);
    v281 = (void **)(a1 + 80);
    v282 = a1 + 144;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v82 = v16++ > 8;
        if (v82)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v17 & 7;
      if ((_DWORD)v25 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          if ((_DWORD)v25 != 2)
          {
            v163 = *(char **)(a1 + 136);
            v162 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v163 >= v162)
            {
              v178 = (char *)*v285;
              v179 = (v163 - (_BYTE *)*v285) >> 2;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62)
LABEL_482:
                sub_100259694();
              v181 = v162 - (_QWORD)v178;
              if (v181 >> 1 > v180)
                v180 = v181 >> 1;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
                v182 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v182 = v180;
              if (v182)
              {
                v183 = (char *)sub_100260634(v282, v182);
                v178 = *(char **)(a1 + 128);
                v163 = *(char **)(a1 + 136);
              }
              else
              {
                v183 = 0;
              }
              v220 = &v183[4 * v179];
              *(_DWORD *)v220 = 0;
              v164 = v220 + 4;
              while (v163 != v178)
              {
                v221 = *((_DWORD *)v163 - 1);
                v163 -= 4;
                *((_DWORD *)v220 - 1) = v221;
                v220 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v220;
              *(_QWORD *)(a1 + 136) = v164;
              *(_QWORD *)(a1 + 144) = &v183[4 * v182];
              if (v178)
                operator delete(v178);
            }
            else
            {
              *(_DWORD *)v163 = 0;
              v164 = v163 + 4;
            }
            *(_QWORD *)(a1 + 136) = v164;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 136);
            v28 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v285;
              v32 = (v29 - (_BYTE *)*v285) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_482;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_100260634(v282, v35);
                v31 = *(char **)(a1 + 128);
                v29 = *(char **)(a1 + 136);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v37;
              *(_QWORD *)(a1 + 136) = v30;
              *(_QWORD *)(a1 + 144) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *(_QWORD *)(a1 + 136) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
              goto LABEL_295;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_296;
        case 2u:
          if ((_DWORD)v25 != 2)
          {
            v166 = *(char **)(a1 + 112);
            v165 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v166 >= v165)
            {
              v184 = (char *)*v286;
              v185 = (v166 - (_BYTE *)*v286) >> 2;
              v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 62)
LABEL_483:
                sub_100259694();
              v187 = v165 - (_QWORD)v184;
              if (v187 >> 1 > v186)
                v186 = v187 >> 1;
              if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
                v188 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v188 = v186;
              if (v188)
              {
                v189 = (char *)sub_100260634(v283, v188);
                v184 = *(char **)(a1 + 104);
                v166 = *(char **)(a1 + 112);
              }
              else
              {
                v189 = 0;
              }
              v222 = &v189[4 * v185];
              *(_DWORD *)v222 = 0;
              v164 = v222 + 4;
              while (v166 != v184)
              {
                v223 = *((_DWORD *)v166 - 1);
                v166 -= 4;
                *((_DWORD *)v222 - 1) = v223;
                v222 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v222;
              *(_QWORD *)(a1 + 112) = v164;
              *(_QWORD *)(a1 + 120) = &v189[4 * v188];
              if (v184)
                operator delete(v184);
            }
            else
            {
              *(_DWORD *)v166 = 0;
              v164 = v166 + 4;
            }
            *(_QWORD *)(a1 + 112) = v164;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
            return 0;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            v43 = *(char **)(a1 + 112);
            v42 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v286;
              v46 = (v43 - (_BYTE *)*v286) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                goto LABEL_483;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_100260634(v283, v49);
                v45 = *(char **)(a1 + 104);
                v43 = *(char **)(a1 + 112);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = 0;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v51;
              *(_QWORD *)(a1 + 112) = v44;
              *(_QWORD *)(a1 + 120) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = 0;
              v44 = v43 + 4;
            }
            *(_QWORD *)(a1 + 112) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
              goto LABEL_295;
            *(v44 - 1) = *(_DWORD *)(*(_QWORD *)this + v53);
            v41 = *((_QWORD *)this + 2);
            v40 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v40;
          }
          goto LABEL_296;
        case 3u:
          if ((_DWORD)v25 != 2)
          {
            v168 = *(char **)(a1 + 160);
            v167 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v168 >= v167)
            {
              v190 = (char *)*v287;
              v191 = (v168 - (_BYTE *)*v287) >> 2;
              v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62)
LABEL_484:
                sub_100259694();
              v193 = v167 - (_QWORD)v190;
              if (v193 >> 1 > v192)
                v192 = v193 >> 1;
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                v194 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v194 = v192;
              if (v194)
              {
                v195 = (char *)sub_100260634(v284, v194);
                v190 = *(char **)(a1 + 152);
                v168 = *(char **)(a1 + 160);
              }
              else
              {
                v195 = 0;
              }
              v224 = &v195[4 * v191];
              *(_DWORD *)v224 = 0;
              v164 = v224 + 4;
              while (v168 != v190)
              {
                v225 = *((_DWORD *)v168 - 1);
                v168 -= 4;
                *((_DWORD *)v224 - 1) = v225;
                v224 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v224;
              *(_QWORD *)(a1 + 160) = v164;
              *(_QWORD *)(a1 + 168) = &v195[4 * v194];
              if (v190)
                operator delete(v190);
            }
            else
            {
              *(_DWORD *)v168 = 0;
              v164 = v168 + 4;
            }
            *(_QWORD *)(a1 + 160) = v164;
LABEL_374:
            v226 = *((_QWORD *)this + 1);
            if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((_QWORD *)this + 2))
            {
              *(v164 - 1) = *(_DWORD *)(*(_QWORD *)this + v226);
LABEL_378:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_376:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_472;
          }
          if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
            return 0;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          while (v54 < v55 && !*((_BYTE *)this + 24))
          {
            v57 = *(char **)(a1 + 160);
            v56 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v287;
              v60 = (v57 - (_BYTE *)*v287) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_484;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_100260634(v284, v63);
                v59 = *(char **)(a1 + 152);
                v57 = *(char **)(a1 + 160);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *(_DWORD *)v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v65;
              *(_QWORD *)(a1 + 160) = v58;
              *(_QWORD *)(a1 + 168) = &v64[4 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = 0;
              v58 = v57 + 4;
            }
            *(_QWORD *)(a1 + 160) = v58;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            {
LABEL_295:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_296;
            }
            *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v67);
            v55 = *((_QWORD *)this + 2);
            v54 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v54;
          }
          goto LABEL_296;
        case 4u:
          *(_BYTE *)(a1 + 180) |= 1u;
          v68 = *((_QWORD *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
            goto LABEL_376;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v68);
          goto LABEL_378;
        case 5u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v69 >= *v13)
                {
                  v70 = (char *)*v281;
                  v71 = (v69 - (_BYTE *)*v281) >> 2;
                  v72 = v71 + 1;
                  if ((unint64_t)(v71 + 1) >> 62)
                    goto LABEL_485;
                  v73 = *v13 - (_QWORD)v70;
                  if (v73 >> 1 > v72)
                    v72 = v73 >> 1;
                  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                    v74 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v74 = v72;
                  if (v74)
                  {
                    v75 = (char *)sub_100260634((uint64_t)v13, v74);
                    v70 = *(char **)(a1 + 80);
                    v69 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v75 = 0;
                  }
                  v76 = &v75[4 * v71];
                  *(_DWORD *)v76 = 0;
                  v77 = v76 + 4;
                  while (v69 != v70)
                  {
                    v78 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v76 - 1) = v78;
                    v76 -= 4;
                  }
                  *(_QWORD *)(a1 + 80) = v76;
                  *(_QWORD *)(a1 + 88) = v77;
                  *(_QWORD *)(a1 + 96) = &v75[4 * v74];
                  if (v70)
                    operator delete(v70);
                  v69 = v77;
                }
                else
                {
                  *(_DWORD *)v69 = 0;
                  v69 += 4;
                }
                *(_QWORD *)(a1 + 88) = v69;
                v80 = *((_QWORD *)this + 1);
                v79 = *((_QWORD *)this + 2);
                v81 = *(_QWORD *)this;
                v82 = v80 > 0xFFFFFFFFFFFFFFF5 || v80 + 10 > v79;
                if (v82)
                {
                  v83 = 0;
                  v84 = 0;
                  v90 = 0;
                  if (v79 <= v80)
                    v85 = *((_QWORD *)this + 1);
                  else
                    v85 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v85 == v80)
                      goto LABEL_280;
                    v86 = v80++;
                    v87 = *(_BYTE *)(v81 + v86);
                    *((_QWORD *)this + 1) = v80;
                    v90 |= (unint64_t)(v87 & 0x7F) << v83;
                    if ((v87 & 0x80) == 0)
                      break;
                    v83 += 7;
                    v82 = v84++ > 8;
                    if (v82)
                    {
                      LODWORD(v90) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v90) = 0;
LABEL_141:
                  v91 = v86 + 1;
                }
                else
                {
                  v88 = 0;
                  v89 = 0;
                  v90 = 0;
                  while (1)
                  {
                    v91 = v80 + 1;
                    *((_QWORD *)this + 1) = v80 + 1;
                    v92 = *(_BYTE *)(v81 + v80);
                    v90 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v80 = v91;
                    v82 = v89++ > 8;
                    if (v82)
                    {
                      LODWORD(v90) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v69 - 1) = v90;
              }
              while (v91 < v79 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v170 = *(char **)(a1 + 88);
          v169 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v170 >= v169)
          {
            v196 = (char *)*v281;
            v197 = (v170 - (_BYTE *)*v281) >> 2;
            v198 = v197 + 1;
            if ((unint64_t)(v197 + 1) >> 62)
LABEL_485:
              sub_100259694();
            v199 = v169 - (_QWORD)v196;
            if (v199 >> 1 > v198)
              v198 = v199 >> 1;
            if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL)
              v200 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v200 = v198;
            if (v200)
            {
              v201 = (char *)sub_100260634((uint64_t)v13, v200);
              v196 = *(char **)(a1 + 80);
              v170 = *(char **)(a1 + 88);
            }
            else
            {
              v201 = 0;
            }
            v227 = &v201[4 * v197];
            *(_DWORD *)v227 = 0;
            v171 = v227 + 4;
            while (v170 != v196)
            {
              v228 = *((_DWORD *)v170 - 1);
              v170 -= 4;
              *((_DWORD *)v227 - 1) = v228;
              v227 -= 4;
            }
            *(_QWORD *)(a1 + 80) = v227;
            *(_QWORD *)(a1 + 88) = v171;
            *(_QWORD *)(a1 + 96) = &v201[4 * v200];
            if (v196)
              operator delete(v196);
          }
          else
          {
            *(_DWORD *)v170 = 0;
            v171 = v170 + 4;
          }
          *(_QWORD *)(a1 + 88) = v171;
          v229 = *((_QWORD *)this + 1);
          v230 = *((_QWORD *)this + 2);
          v231 = *(_QWORD *)this;
          v232 = 0;
          v233 = 0;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            v237 = 0;
            while (1)
            {
              v238 = v229 + 1;
              *((_QWORD *)this + 1) = v229 + 1;
              v239 = *(_BYTE *)(v231 + v229);
              v237 |= (unint64_t)(v239 & 0x7F) << v232;
              if ((v239 & 0x80) == 0)
                goto LABEL_471;
              v232 += 7;
              v229 = v238;
              v82 = v233++ > 8;
              if (v82)
                goto LABEL_470;
            }
          }
          v237 = 0;
          if (v230 <= v229)
            v230 = *((_QWORD *)this + 1);
          while (v230 != v229)
          {
            v235 = v229 + 1;
            v236 = *(_BYTE *)(v231 + v229);
            *((_QWORD *)this + 1) = v235;
            v237 |= (unint64_t)(v236 & 0x7F) << v232;
            if ((v236 & 0x80) == 0)
              goto LABEL_464;
            v232 += 7;
            v229 = v235;
            v82 = v233++ > 8;
            if (v82)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 6u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v69 >= *v12)
                {
                  v93 = (char *)*v278;
                  v94 = (v69 - (_BYTE *)*v278) >> 2;
                  v95 = v94 + 1;
                  if ((unint64_t)(v94 + 1) >> 62)
                    goto LABEL_486;
                  v96 = *v12 - (_QWORD)v93;
                  if (v96 >> 1 > v95)
                    v95 = v96 >> 1;
                  if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
                    v97 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v97 = v95;
                  if (v97)
                  {
                    v98 = (char *)sub_100260634((uint64_t)v12, v97);
                    v93 = *(char **)(a1 + 8);
                    v69 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v98 = 0;
                  }
                  v99 = &v98[4 * v94];
                  *(_DWORD *)v99 = 0;
                  v100 = v99 + 4;
                  while (v69 != v93)
                  {
                    v101 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v99 - 1) = v101;
                    v99 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v99;
                  *(_QWORD *)(a1 + 16) = v100;
                  *(_QWORD *)(a1 + 24) = &v98[4 * v97];
                  if (v93)
                    operator delete(v93);
                  v69 = v100;
                }
                else
                {
                  *(_DWORD *)v69 = 0;
                  v69 += 4;
                }
                *(_QWORD *)(a1 + 16) = v69;
                v103 = *((_QWORD *)this + 1);
                v102 = *((_QWORD *)this + 2);
                v104 = *(_QWORD *)this;
                if (v103 > 0xFFFFFFFFFFFFFFF5 || v103 + 10 > v102)
                {
                  v106 = 0;
                  v107 = 0;
                  v113 = 0;
                  if (v102 <= v103)
                    v108 = *((_QWORD *)this + 1);
                  else
                    v108 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v108 == v103)
                      goto LABEL_280;
                    v109 = v103++;
                    v110 = *(_BYTE *)(v104 + v109);
                    *((_QWORD *)this + 1) = v103;
                    v113 |= (unint64_t)(v110 & 0x7F) << v106;
                    if ((v110 & 0x80) == 0)
                      break;
                    v106 += 7;
                    v82 = v107++ > 8;
                    if (v82)
                    {
                      LODWORD(v113) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v113) = 0;
LABEL_186:
                  v114 = v109 + 1;
                }
                else
                {
                  v111 = 0;
                  v112 = 0;
                  v113 = 0;
                  while (1)
                  {
                    v114 = v103 + 1;
                    *((_QWORD *)this + 1) = v103 + 1;
                    v115 = *(_BYTE *)(v104 + v103);
                    v113 |= (unint64_t)(v115 & 0x7F) << v111;
                    if ((v115 & 0x80) == 0)
                      break;
                    v111 += 7;
                    v103 = v114;
                    v82 = v112++ > 8;
                    if (v82)
                    {
                      LODWORD(v113) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v69 - 1) = v113;
              }
              while (v114 < v102 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v173 = *(char **)(a1 + 16);
          v172 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v173 >= v172)
          {
            v202 = (char *)*v278;
            v203 = (v173 - (_BYTE *)*v278) >> 2;
            v204 = v203 + 1;
            if ((unint64_t)(v203 + 1) >> 62)
LABEL_486:
              sub_100259694();
            v205 = v172 - (_QWORD)v202;
            if (v205 >> 1 > v204)
              v204 = v205 >> 1;
            if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL)
              v206 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v206 = v204;
            if (v206)
            {
              v207 = (char *)sub_100260634((uint64_t)v12, v206);
              v202 = *(char **)(a1 + 8);
              v173 = *(char **)(a1 + 16);
            }
            else
            {
              v207 = 0;
            }
            v240 = &v207[4 * v203];
            *(_DWORD *)v240 = 0;
            v171 = v240 + 4;
            while (v173 != v202)
            {
              v241 = *((_DWORD *)v173 - 1);
              v173 -= 4;
              *((_DWORD *)v240 - 1) = v241;
              v240 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v240;
            *(_QWORD *)(a1 + 16) = v171;
            *(_QWORD *)(a1 + 24) = &v207[4 * v206];
            if (v202)
              operator delete(v202);
          }
          else
          {
            *(_DWORD *)v173 = 0;
            v171 = v173 + 4;
          }
          *(_QWORD *)(a1 + 16) = v171;
          v242 = *((_QWORD *)this + 1);
          v243 = *((_QWORD *)this + 2);
          v244 = *(_QWORD *)this;
          v245 = 0;
          v246 = 0;
          if (v242 <= 0xFFFFFFFFFFFFFFF5 && v242 + 10 <= v243)
          {
            v237 = 0;
            while (1)
            {
              v250 = v242 + 1;
              *((_QWORD *)this + 1) = v242 + 1;
              v251 = *(_BYTE *)(v244 + v242);
              v237 |= (unint64_t)(v251 & 0x7F) << v245;
              if ((v251 & 0x80) == 0)
                goto LABEL_471;
              v245 += 7;
              v242 = v250;
              v82 = v246++ > 8;
              if (v82)
                goto LABEL_470;
            }
          }
          v237 = 0;
          if (v243 <= v242)
            v243 = *((_QWORD *)this + 1);
          while (v243 != v242)
          {
            v248 = v242 + 1;
            v249 = *(_BYTE *)(v244 + v242);
            *((_QWORD *)this + 1) = v248;
            v237 |= (unint64_t)(v249 & 0x7F) << v245;
            if ((v249 & 0x80) == 0)
              goto LABEL_464;
            v245 += 7;
            v242 = v248;
            v82 = v246++ > 8;
            if (v82)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 7u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v69 >= *v11)
                {
                  v116 = (char *)*v279;
                  v117 = (v69 - (_BYTE *)*v279) >> 2;
                  v118 = v117 + 1;
                  if ((unint64_t)(v117 + 1) >> 62)
                    goto LABEL_487;
                  v119 = *v11 - (_QWORD)v116;
                  if (v119 >> 1 > v118)
                    v118 = v119 >> 1;
                  if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
                    v120 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v120 = v118;
                  if (v120)
                  {
                    v121 = (char *)sub_100260634((uint64_t)v11, v120);
                    v116 = *(char **)(a1 + 32);
                    v69 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v121 = 0;
                  }
                  v122 = &v121[4 * v117];
                  *(_DWORD *)v122 = 0;
                  v123 = v122 + 4;
                  while (v69 != v116)
                  {
                    v124 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v122 - 1) = v124;
                    v122 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v122;
                  *(_QWORD *)(a1 + 40) = v123;
                  *(_QWORD *)(a1 + 48) = &v121[4 * v120];
                  if (v116)
                    operator delete(v116);
                  v69 = v123;
                }
                else
                {
                  *(_DWORD *)v69 = 0;
                  v69 += 4;
                }
                *(_QWORD *)(a1 + 40) = v69;
                v126 = *((_QWORD *)this + 1);
                v125 = *((_QWORD *)this + 2);
                v127 = *(_QWORD *)this;
                if (v126 > 0xFFFFFFFFFFFFFFF5 || v126 + 10 > v125)
                {
                  v129 = 0;
                  v130 = 0;
                  v136 = 0;
                  if (v125 <= v126)
                    v131 = *((_QWORD *)this + 1);
                  else
                    v131 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v131 == v126)
                      goto LABEL_280;
                    v132 = v126++;
                    v133 = *(_BYTE *)(v127 + v132);
                    *((_QWORD *)this + 1) = v126;
                    v136 |= (unint64_t)(v133 & 0x7F) << v129;
                    if ((v133 & 0x80) == 0)
                      break;
                    v129 += 7;
                    v82 = v130++ > 8;
                    if (v82)
                    {
                      LODWORD(v136) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v136) = 0;
LABEL_231:
                  v137 = v132 + 1;
                }
                else
                {
                  v134 = 0;
                  v135 = 0;
                  v136 = 0;
                  while (1)
                  {
                    v137 = v126 + 1;
                    *((_QWORD *)this + 1) = v126 + 1;
                    v138 = *(_BYTE *)(v127 + v126);
                    v136 |= (unint64_t)(v138 & 0x7F) << v134;
                    if ((v138 & 0x80) == 0)
                      break;
                    v134 += 7;
                    v126 = v137;
                    v82 = v135++ > 8;
                    if (v82)
                    {
                      LODWORD(v136) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v69 - 1) = v136;
              }
              while (v137 < v125 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v175 = *(char **)(a1 + 40);
          v174 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v175 >= v174)
          {
            v208 = (char *)*v279;
            v209 = (v175 - (_BYTE *)*v279) >> 2;
            v210 = v209 + 1;
            if ((unint64_t)(v209 + 1) >> 62)
LABEL_487:
              sub_100259694();
            v211 = v174 - (_QWORD)v208;
            if (v211 >> 1 > v210)
              v210 = v211 >> 1;
            if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL)
              v212 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v212 = v210;
            if (v212)
            {
              v213 = (char *)sub_100260634((uint64_t)v11, v212);
              v208 = *(char **)(a1 + 32);
              v175 = *(char **)(a1 + 40);
            }
            else
            {
              v213 = 0;
            }
            v252 = &v213[4 * v209];
            *(_DWORD *)v252 = 0;
            v171 = v252 + 4;
            while (v175 != v208)
            {
              v253 = *((_DWORD *)v175 - 1);
              v175 -= 4;
              *((_DWORD *)v252 - 1) = v253;
              v252 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v252;
            *(_QWORD *)(a1 + 40) = v171;
            *(_QWORD *)(a1 + 48) = &v213[4 * v212];
            if (v208)
              operator delete(v208);
          }
          else
          {
            *(_DWORD *)v175 = 0;
            v171 = v175 + 4;
          }
          *(_QWORD *)(a1 + 40) = v171;
          v254 = *((_QWORD *)this + 1);
          v255 = *((_QWORD *)this + 2);
          v256 = *(_QWORD *)this;
          v257 = 0;
          v258 = 0;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            v237 = 0;
            while (1)
            {
              v262 = v254 + 1;
              *((_QWORD *)this + 1) = v254 + 1;
              v263 = *(_BYTE *)(v256 + v254);
              v237 |= (unint64_t)(v263 & 0x7F) << v257;
              if ((v263 & 0x80) == 0)
                goto LABEL_471;
              v257 += 7;
              v254 = v262;
              v82 = v258++ > 8;
              if (v82)
                goto LABEL_470;
            }
          }
          v237 = 0;
          if (v255 <= v254)
            v255 = *((_QWORD *)this + 1);
          while (v255 != v254)
          {
            v260 = v254 + 1;
            v261 = *(_BYTE *)(v256 + v254);
            *((_QWORD *)this + 1) = v260;
            v237 |= (unint64_t)(v261 & 0x7F) << v257;
            if ((v261 & 0x80) == 0)
              goto LABEL_464;
            v257 += 7;
            v254 = v260;
            v82 = v258++ > 8;
            if (v82)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 8u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v69 >= *v10)
                {
                  v139 = (char *)*v280;
                  v140 = (v69 - (_BYTE *)*v280) >> 2;
                  v141 = v140 + 1;
                  if ((unint64_t)(v140 + 1) >> 62)
                    goto LABEL_488;
                  v142 = *v10 - (_QWORD)v139;
                  if (v142 >> 1 > v141)
                    v141 = v142 >> 1;
                  if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
                    v143 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v143 = v141;
                  if (v143)
                  {
                    v144 = (char *)sub_100260634((uint64_t)v10, v143);
                    v139 = *(char **)(a1 + 56);
                    v69 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v144 = 0;
                  }
                  v145 = &v144[4 * v140];
                  *(_DWORD *)v145 = 0;
                  v146 = v145 + 4;
                  while (v69 != v139)
                  {
                    v147 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v145 - 1) = v147;
                    v145 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v145;
                  *(_QWORD *)(a1 + 64) = v146;
                  *(_QWORD *)(a1 + 72) = &v144[4 * v143];
                  if (v139)
                    operator delete(v139);
                  v69 = v146;
                }
                else
                {
                  *(_DWORD *)v69 = 0;
                  v69 += 4;
                }
                *(_QWORD *)(a1 + 64) = v69;
                v149 = *((_QWORD *)this + 1);
                v148 = *((_QWORD *)this + 2);
                v150 = *(_QWORD *)this;
                if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v148)
                {
                  v157 = 0;
                  v158 = 0;
                  v159 = 0;
                  while (1)
                  {
                    v160 = v149 + 1;
                    *((_QWORD *)this + 1) = v149 + 1;
                    v161 = *(_BYTE *)(v150 + v149);
                    v159 |= (unint64_t)(v161 & 0x7F) << v157;
                    if ((v161 & 0x80) == 0)
                      goto LABEL_277;
                    v157 += 7;
                    v149 = v160;
                    v82 = v158++ > 8;
                    if (v82)
                    {
                      LODWORD(v159) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                v152 = 0;
                v153 = 0;
                v159 = 0;
                if (v148 <= v149)
                  v154 = *((_QWORD *)this + 1);
                else
                  v154 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v154 == v149)
                  {
LABEL_280:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v69 - 1) = 0;
                    goto LABEL_296;
                  }
                  v155 = v149++;
                  v156 = *(_BYTE *)(v150 + v155);
                  *((_QWORD *)this + 1) = v149;
                  v159 |= (unint64_t)(v156 & 0x7F) << v152;
                  if ((v156 & 0x80) == 0)
                    break;
                  v152 += 7;
                  v82 = v153++ > 8;
                  if (v82)
                  {
                    LODWORD(v159) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v159) = 0;
LABEL_276:
                v160 = v155 + 1;
LABEL_277:
                *((_DWORD *)v69 - 1) = v159;
              }
              while (v160 < v148 && !*((_BYTE *)this + 24));
            }
LABEL_296:
            PB::Reader::recallMark(this, v288);
          }
          else
          {
            v177 = *(char **)(a1 + 64);
            v176 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v177 >= v176)
            {
              v214 = (char *)*v280;
              v215 = (v177 - (_BYTE *)*v280) >> 2;
              v216 = v215 + 1;
              if ((unint64_t)(v215 + 1) >> 62)
LABEL_488:
                sub_100259694();
              v217 = v176 - (_QWORD)v214;
              if (v217 >> 1 > v216)
                v216 = v217 >> 1;
              if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
                v218 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v218 = v216;
              if (v218)
              {
                v219 = (char *)sub_100260634((uint64_t)v10, v218);
                v214 = *(char **)(a1 + 56);
                v177 = *(char **)(a1 + 64);
              }
              else
              {
                v219 = 0;
              }
              v264 = &v219[4 * v215];
              *(_DWORD *)v264 = 0;
              v171 = v264 + 4;
              while (v177 != v214)
              {
                v265 = *((_DWORD *)v177 - 1);
                v177 -= 4;
                *((_DWORD *)v264 - 1) = v265;
                v264 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v264;
              *(_QWORD *)(a1 + 64) = v171;
              *(_QWORD *)(a1 + 72) = &v219[4 * v218];
              if (v214)
                operator delete(v214);
            }
            else
            {
              *(_DWORD *)v177 = 0;
              v171 = v177 + 4;
            }
            *(_QWORD *)(a1 + 64) = v171;
            v266 = *((_QWORD *)this + 1);
            v267 = *((_QWORD *)this + 2);
            v268 = *(_QWORD *)this;
            v269 = 0;
            v270 = 0;
            if (v266 > 0xFFFFFFFFFFFFFFF5 || v266 + 10 > v267)
            {
              v237 = 0;
              if (v267 <= v266)
                v267 = *((_QWORD *)this + 1);
              while (v267 != v266)
              {
                v272 = v266 + 1;
                v273 = *(_BYTE *)(v268 + v266);
                *((_QWORD *)this + 1) = v272;
                v237 |= (unint64_t)(v273 & 0x7F) << v269;
                if ((v273 & 0x80) == 0)
                {
LABEL_464:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v237) = 0;
                  goto LABEL_471;
                }
                v269 += 7;
                v266 = v272;
                v82 = v270++ > 8;
                if (v82)
                {
LABEL_470:
                  LODWORD(v237) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v237) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v237 = 0;
              while (1)
              {
                v274 = v266 + 1;
                *((_QWORD *)this + 1) = v266 + 1;
                v275 = *(_BYTE *)(v268 + v266);
                v237 |= (unint64_t)(v275 & 0x7F) << v269;
                if ((v275 & 0x80) == 0)
                  break;
                v269 += 7;
                v266 = v274;
                v82 = v270++ > 8;
                if (v82)
                  goto LABEL_470;
              }
            }
LABEL_471:
            *(v171 - 1) = v237;
          }
LABEL_472:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_472;
      }
    }
    v20 = 0;
    v21 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v22 = v4 + 1;
      v23 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10165329C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;

  v3 = result;
  v4 = *(float **)(result + 128);
  v5 = *(float **)(result + 136);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 1u);
  }
  v7 = *(float **)(v3 + 104);
  v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 2u);
  }
  v10 = *(float **)(v3 + 152);
  v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 3u);
  }
  if ((*(_BYTE *)(v3 + 180) & 1) != 0)
    result = PB::Writer::write(this, *(float *)(v3 + 176), 4u);
  v13 = *(unsigned int **)(v3 + 80);
  v14 = *(unsigned int **)(v3 + 88);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::writeVarInt(this, v15, 5u);
  }
  v16 = *(unsigned int **)(v3 + 8);
  v17 = *(unsigned int **)(v3 + 16);
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::writeVarInt(this, v18, 6u);
  }
  v19 = *(unsigned int **)(v3 + 32);
  v20 = *(unsigned int **)(v3 + 40);
  while (v19 != v20)
  {
    v21 = *v19++;
    result = PB::Writer::writeVarInt(this, v21, 7u);
  }
  v23 = *(unsigned int **)(v3 + 56);
  v22 = *(unsigned int **)(v3 + 64);
  while (v23 != v22)
  {
    v24 = *v23++;
    result = PB::Writer::writeVarInt(this, v24, 8u);
  }
  return result;
}

uint64_t sub_1016533BC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C44B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1016533D4(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C44B8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_101653414(PB::Base *a1)
{
  sub_1016533D4(a1);
  operator delete();
}

uint64_t sub_101653438(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C44B8;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2)
    sub_10034F2B0(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_1016534AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "pose", v7);
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101653534(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE v54[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    do
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v21 = v4 + 1;
          v22 = *(_BYTE *)(v12 + v4);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
      {
        if ((_DWORD)v24 != 2)
        {
          v42 = *(char **)(a1 + 16);
          v41 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v42 >= v41)
          {
            v44 = (char *)*v10;
            v45 = (v42 - (_BYTE *)*v10) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
LABEL_84:
              sub_100259694();
            v47 = v41 - (_QWORD)v44;
            if (v47 >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_10025E6A0(v11, v48);
              v44 = *(char **)(a1 + 8);
              v42 = *(char **)(a1 + 16);
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[8 * v45];
            *(_QWORD *)v50 = 0;
            v43 = v50 + 8;
            while (v42 != v44)
            {
              v51 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *((_QWORD *)v50 - 1) = v51;
              v50 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v50;
            *(_QWORD *)(a1 + 16) = v43;
            *(_QWORD *)(a1 + 24) = &v49[8 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_QWORD *)v42 = 0;
            v43 = v42 + 8;
          }
          *(_QWORD *)(a1 + 16) = v43;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark(this, v54, v24, a4) & 1) != 0)
          return 0;
        v27 = *((_QWORD *)this + 1);
        v28 = *((_QWORD *)this + 2);
        while (v27 < v28 && !*((_BYTE *)this + 24))
        {
          v30 = *(char **)(a1 + 16);
          v29 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v30 >= v29)
          {
            v32 = (char *)*v10;
            v33 = (v30 - (_BYTE *)*v10) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_84;
            v35 = v29 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_10025E6A0(v11, v36);
              v32 = *(char **)(a1 + 8);
              v30 = *(char **)(a1 + 16);
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = 0;
            v31 = v38 + 8;
            while (v30 != v32)
            {
              v39 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v38 - 1) = v39;
              v38 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v38;
            *(_QWORD *)(a1 + 16) = v31;
            *(_QWORD *)(a1 + 24) = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v30 = 0;
            v31 = v30 + 8;
          }
          *(_QWORD *)(a1 + 16) = v31;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
          v28 = *((_QWORD *)this + 2);
          v27 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v27;
        }
        PB::Reader::recallMark(this, v54);
      }
      else
      {
        if ((_DWORD)v25 == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_73;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_75:
          *((_QWORD *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0)
          return 0;
      }
LABEL_76:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
    }
    while (v4 < v5 && !*((_BYTE *)this + 24));
  }
  return v6 == 0;
}

uint64_t sub_1016538E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6, 2u);
  }
  return result;
}

uint64_t sub_101653944(uint64_t result)
{
  *(_QWORD *)result = &off_1021C44F0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_10165395C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101653980(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)result = &off_1021C44F0;
  *(_DWORD *)(result + 100) = 0;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64);
    v3 = 128;
    *(_WORD *)(result + 100) = 128;
    *(_QWORD *)(result + 64) = v4;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 100) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 100) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 24) = v7;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 56) = v8;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 48) = v9;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 40) = v10;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 32) = v11;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 72) = v12;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 84) = v13;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v14;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *(_DWORD *)(a2 + 92);
  v3 |= 0x1000u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 92) = v15;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return result;
LABEL_30:
    v17 = *(_BYTE *)(a2 + 96);
    *(_WORD *)(result + 100) = v3 | 0x2000;
    *(_BYTE *)(result + 96) = v17;
    return result;
  }
LABEL_29:
  v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 80) = v16;
  if ((*(_WORD *)(a2 + 100) & 0x2000) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_101653B24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "gpsAltitude", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "gpsSpeedAccuracy", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quality", *(_DWORD *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "rawSpeed", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "trackRunOdometerHasBeenCorrected", *(_BYTE *)(a1 + 96));
    if ((*(_WORD *)(a1 + 100) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x2000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 92));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101653D14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 2u:
              *(_WORD *)(a1 + 100) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 3u:
              *(_WORD *)(a1 + 100) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 4u:
              *(_WORD *)(a1 + 100) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 7u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 8u:
              *(_WORD *)(a1 + 100) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_112:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_117;
                  }
                  v49 = v21++;
                  v50 = *(_BYTE *)(v22 + v49);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_116;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_117;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_133;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_122;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_121;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_122;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_133;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v57 = v33++;
                  v58 = *(_BYTE *)(v34 + v57);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_126;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_127;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 92) = v37;
              goto LABEL_133;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x200u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v39++;
                  v62 = *(_BYTE *)(v40 + v61);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_131;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_132;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 80) = v43;
LABEL_133:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 96) = v46;
              goto LABEL_133;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_133;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165447C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 9u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xBu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xCu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0xEu);
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xDu);
  if ((*(_WORD *)(v3 + 100) & 0x2000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0xEu);
  return result;
}

uint64_t sub_101654628(uint64_t result)
{
  *(_QWORD *)result = off_1021C4528;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_101654640(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C4528;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101654684(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C4528;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1016546DC(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = off_1021C4528;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  if (*(_QWORD *)(a2 + 72))
    operator new();
  v2 = *(_BYTE *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(result + 80) |= 4u;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_5:
      if ((v2 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else if ((*(_BYTE *)(a2 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(result + 80) |= 8u;
  *(_QWORD *)(result + 32) = v5;
  v2 = *(_BYTE *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_6:
    if ((v2 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(result + 80) |= 0x40u;
  *(_QWORD *)(result + 56) = v6;
  v2 = *(_BYTE *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_7:
    if ((v2 & 2) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v7 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(result + 80) |= 0x80u;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_BYTE *)(a2 + 80);
  if ((v2 & 2) == 0)
  {
LABEL_8:
    if ((v2 & 1) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(result + 80) |= 2u;
  *(_QWORD *)(result + 16) = v8;
  v2 = *(_BYTE *)(a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 80) |= 1u;
  *(_QWORD *)(result + 8) = v9;
  v2 = *(_BYTE *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      return result;
    goto LABEL_11;
  }
LABEL_19:
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 80) |= 0x20u;
  *(_QWORD *)(result + 48) = v10;
  if ((*(_BYTE *)(a2 + 80) & 0x10) == 0)
    return result;
LABEL_11:
  v3 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 80) |= 0x10u;
  *(_QWORD *)(result + 40) = v3;
  return result;
}

uint64_t sub_101654860(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsCourseAccuracy", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsCourseRadians", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_18:
    PB::TextFormatter::format(this, "smoothedGPSAltitude", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 80) & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 48));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x40) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v5 & 0x80) == 0)
    goto LABEL_9;
LABEL_19:
  PB::TextFormatter::format(this, "smoothedGPSAltitudeUncertainty", *(double *)(a1 + 64));
LABEL_9:
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016549B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              *(_BYTE *)(a1 + 80) |= 4u;
              v21 = *((_QWORD *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v21);
              goto LABEL_50;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 8u;
              v22 = *((_QWORD *)this + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
              goto LABEL_50;
            case 4u:
              *(_BYTE *)(a1 + 80) |= 0x40u;
              v23 = *((_QWORD *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v23);
              goto LABEL_50;
            case 5u:
              *(_BYTE *)(a1 + 80) |= 0x80u;
              v24 = *((_QWORD *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v24);
              goto LABEL_50;
            case 6u:
              *(_BYTE *)(a1 + 80) |= 2u;
              v25 = *((_QWORD *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v25);
              goto LABEL_50;
            case 7u:
              *(_BYTE *)(a1 + 80) |= 1u;
              v26 = *((_QWORD *)this + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v26);
              goto LABEL_50;
            case 8u:
              *(_BYTE *)(a1 + 80) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v27);
              goto LABEL_50;
            case 9u:
              *(_BYTE *)(a1 + 80) |= 0x10u;
              v28 = *((_QWORD *)this + 1);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v28);
LABEL_50:
                *((_QWORD *)this + 1) += 8;
              }
              else
              {
LABEL_48:
                *((_BYTE *)this + 24) = 1;
              }
LABEL_51:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_51;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101654D80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 72);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 5u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  if ((*(_BYTE *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  return result;
}

uint64_t sub_101654E98(uint64_t result)
{
  if (!*(_QWORD *)(result + 72))
    operator new();
  return result;
}

uint64_t sub_101654F08(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4560;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_101654F20(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101654F44(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  *(_QWORD *)result = &off_1021C4560;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_DWORD *)(a2 + 52);
    v3 = 64;
    *(_WORD *)(result + 68) = 64;
    *(_DWORD *)(result + 52) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 56);
    v3 |= 0x80u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 68) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_BYTE *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 32) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 24) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    v13 = *(_DWORD *)(a2 + 48);
    *(_WORD *)(result + 68) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v12;
  if ((*(_WORD *)(a2 + 68) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_101655078(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "context", *(_DWORD *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "dataSource", *(_DWORD *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "error", *(_BYTE *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "interpolation", *(_DWORD *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "sinceLastGood", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016551E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_104:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_105;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *(_DWORD *)(a1 + 52) = v24;
              goto LABEL_121;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_109;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_110;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_121;
            case 3u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 4u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_100:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_54:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_114;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_115;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_121;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_119;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_120;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 48) = v45;
LABEL_121:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_121;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101655870(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 52), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 64), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xAu);
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 9u);
  if ((*(_WORD *)(v3 + 68) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xAu);
  return result;
}

uint64_t sub_1016559AC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4598;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1016559C4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016559E8(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C4598;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_101655A38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101655AA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101655D2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

_QWORD *sub_101655D84(_QWORD *result)
{
  *result = &off_1021C45D0;
  result[1] = 0;
  return result;
}

void sub_101655D98(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101655DBC(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_1021C45D0;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_101655DE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101655E30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101656064(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  return result;
}

uint64_t sub_101656084(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4608;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165609C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016560C0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4608;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_10165614C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016561FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101656460(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_1016564F4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4640;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165650C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101656530(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4640;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1016565BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165666C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016568D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_101656964(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4678;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165697C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016569A0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4678;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101656A2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101656ADC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101656D40(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

double sub_101656DD4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C46B0;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101656DF8(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C46B0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_101656E48(PB::Base *a1)
{
  sub_101656DF8(a1);
  operator delete();
}

uint64_t sub_101656E6C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v9;
  char v10;

  *(_QWORD *)a1 = &off_1021C46B0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v6 = *(_BYTE *)(a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0)
      goto LABEL_7;
LABEL_11:
    v10 = *(_BYTE *)(a2 + 69);
    *(_BYTE *)(a1 + 72) |= 8u;
    *(_BYTE *)(a1 + 69) = v10;
    if ((*(_BYTE *)(a2 + 72) & 4) == 0)
      return a1;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 64) = v9;
  v6 = *(_BYTE *)(a2 + 72);
  if ((v6 & 8) != 0)
    goto LABEL_11;
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    v7 = *(_BYTE *)(a2 + 68);
    *(_BYTE *)(a1 + 72) |= 4u;
    *(_BYTE *)(a1 + 68) = v7;
  }
  return a1;
}

uint64_t sub_101656F5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dotVector", v7);
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
    PB::TextFormatter::format(this, "hasValidTNBFrame", *(_BYTE *)(a1 + 68));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "headingVector", v10);
  }
  v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 8) == 0)
  {
    if ((*(_BYTE *)(a1 + 72) & 1) == 0)
      goto LABEL_9;
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 72) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "isPedestrian", *(_BYTE *)(a1 + 69));
  v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 1) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v11 & 2) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "uncertainty", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101657070(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  char *v85;
  int v86;
  unint64_t v87;
  _BYTE v89[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_128;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v67 = *(char **)(a1 + 16);
            v66 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v67 >= v66)
            {
              v71 = (char *)*v12;
              v72 = (v67 - (_BYTE *)*v12) >> 2;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
LABEL_137:
                sub_100259694();
              v74 = v66 - (_QWORD)v71;
              if (v74 >> 1 > v73)
                v73 = v74 >> 1;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                v75 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75)
              {
                v76 = (char *)sub_100260634(v13, v75);
                v71 = *(char **)(a1 + 8);
                v67 = *(char **)(a1 + 16);
              }
              else
              {
                v76 = 0;
              }
              v83 = &v76[4 * v72];
              *(_DWORD *)v83 = 0;
              v68 = v83 + 4;
              while (v67 != v71)
              {
                v84 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v83;
              *(_QWORD *)(a1 + 16) = v68;
              *(_QWORD *)(a1 + 24) = &v76[4 * v75];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *(_DWORD *)v67 = 0;
              v68 = v67 + 4;
            }
            *(_QWORD *)(a1 + 16) = v68;
            goto LABEL_123;
          }
          if ((PB::Reader::placeMark(this, v89, v26, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 16);
            v31 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v12;
              v35 = (v32 - (_BYTE *)*v12) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_137;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v13, v38);
                v34 = *(char **)(a1 + 8);
                v32 = *(char **)(a1 + 16);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v40;
              *(_QWORD *)(a1 + 16) = v33;
              *(_QWORD *)(a1 + 24) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 16) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_91;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_92;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v89, v26, a4) & 1) != 0)
              return 0;
            v43 = *((_QWORD *)this + 1);
            v44 = *((_QWORD *)this + 2);
            while (v43 < v44 && !*((_BYTE *)this + 24))
            {
              v46 = *(char **)(a1 + 40);
              v45 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v46 >= v45)
              {
                v48 = (char *)*v10;
                v49 = (v46 - (_BYTE *)*v10) >> 2;
                v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62)
                  goto LABEL_138;
                v51 = v45 - (_QWORD)v48;
                if (v51 >> 1 > v50)
                  v50 = v51 >> 1;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                  v52 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v52 = v50;
                if (v52)
                {
                  v53 = (char *)sub_100260634(v11, v52);
                  v48 = *(char **)(a1 + 32);
                  v46 = *(char **)(a1 + 40);
                }
                else
                {
                  v53 = 0;
                }
                v54 = &v53[4 * v49];
                *(_DWORD *)v54 = 0;
                v47 = v54 + 4;
                while (v46 != v48)
                {
                  v55 = *((_DWORD *)v46 - 1);
                  v46 -= 4;
                  *((_DWORD *)v54 - 1) = v55;
                  v54 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v54;
                *(_QWORD *)(a1 + 40) = v47;
                *(_QWORD *)(a1 + 48) = &v53[4 * v52];
                if (v48)
                  operator delete(v48);
              }
              else
              {
                *(_DWORD *)v46 = 0;
                v47 = v46 + 4;
              }
              *(_QWORD *)(a1 + 40) = v47;
              v56 = *((_QWORD *)this + 1);
              if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              {
LABEL_91:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
              v44 = *((_QWORD *)this + 2);
              v43 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v43;
            }
LABEL_92:
            PB::Reader::recallMark(this, v89);
          }
          else
          {
            v70 = *(char **)(a1 + 40);
            v69 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v70 >= v69)
            {
              v77 = (char *)*v10;
              v78 = (v70 - (_BYTE *)*v10) >> 2;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 62)
LABEL_138:
                sub_100259694();
              v80 = v69 - (_QWORD)v77;
              if (v80 >> 1 > v79)
                v79 = v80 >> 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                v81 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_100260634(v11, v81);
                v77 = *(char **)(a1 + 32);
                v70 = *(char **)(a1 + 40);
              }
              else
              {
                v82 = 0;
              }
              v85 = &v82[4 * v78];
              *(_DWORD *)v85 = 0;
              v68 = v85 + 4;
              while (v70 != v77)
              {
                v86 = *((_DWORD *)v70 - 1);
                v70 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v85;
              *(_QWORD *)(a1 + 40) = v68;
              *(_QWORD *)(a1 + 48) = &v82[4 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_DWORD *)v70 = 0;
              v68 = v70 + 4;
            }
            *(_QWORD *)(a1 + 40) = v68;
LABEL_123:
            v87 = *((_QWORD *)this + 1);
            if (v87 <= 0xFFFFFFFFFFFFFFFBLL && v87 + 4 <= *((_QWORD *)this + 2))
            {
              *(v68 - 1) = *(_DWORD *)(*(_QWORD *)this + v87);
LABEL_127:
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_128:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_125:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_129:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_127;
        case 5u:
          *(_BYTE *)(a1 + 72) |= 8u;
          v58 = *((_QWORD *)this + 1);
          if (v58 >= *((_QWORD *)this + 2))
          {
            v61 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v59 = v58 + 1;
            v60 = *(unsigned __int8 *)(*(_QWORD *)this + v58);
            *((_QWORD *)this + 1) = v59;
            v61 = v60 != 0;
          }
          *(_BYTE *)(a1 + 69) = v61;
          goto LABEL_129;
        case 6u:
          *(_BYTE *)(a1 + 72) |= 4u;
          v62 = *((_QWORD *)this + 1);
          if (v62 >= *((_QWORD *)this + 2))
          {
            v65 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v63 = v62 + 1;
            v64 = *(unsigned __int8 *)(*(_QWORD *)this + v62);
            *((_QWORD *)this + 1) = v63;
            v65 = v64 != 0;
          }
          *(_BYTE *)(a1 + 68) = v65;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_129;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1016576C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 72) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(_BYTE *)(v3 + 72);
  if ((v10 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 64), 4u);
    v10 = *(_BYTE *)(v3 + 72);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 6u);
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 8) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 69), 5u);
  if ((*(_BYTE *)(v3 + 72) & 4) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 6u);
  return result;
}

uint64_t sub_10165779C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C46E8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1016577B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016577D8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C46E8;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101657864(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dotMeasurement", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotMeasurementUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101657914(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101657B78(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_101657C0C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4720;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101657C24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101657C48(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4720;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101657CD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101657D84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101657FE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_10165807C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4758;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101658094(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1016580B8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C4758;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(_BYTE *)(a2 + 40) & 8) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_101658198(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dotDeltaBufferMaxAbs", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotDeltaBufferVar", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "dotErrorEstimate", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "dotRelativeChangeOverBuffer", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "headingRelativeChangeOverBuffer", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "headingDeltaBufferVar", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016582A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016585B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 7u);
  return result;
}

uint64_t sub_10165869C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4790;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1016586B4(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C4790;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_1016586F4(PB::Base *a1)
{
  sub_1016586B4(a1);
  operator delete();
}

uint64_t sub_101658718(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1021C4790;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_1016587CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "placementFiltered", *(_DWORD *)(a1 + 48));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbabilityFiltered", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10165888C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  _BYTE v68[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_84;
              v29 += 7;
              v26 = v32;
              v18 = v30++ > 8;
            }
            while (!v18);
LABEL_70:
            LODWORD(v31) = 0;
            goto LABEL_84;
          }
          v50 = 0;
          v51 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v52 = v26 + 1;
              v53 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v52;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v26 = v52;
                v18 = v51++ > 8;
                if (v18)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v31;
          goto LABEL_96;
        case 3u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v68, v24, a4) & 1) != 0)
              return 0;
            v34 = *((_QWORD *)this + 1);
            v35 = *((_QWORD *)this + 2);
            while (v34 < v35 && !*((_BYTE *)this + 24))
            {
              v37 = *(char **)(a1 + 16);
              v36 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v37 >= v36)
              {
                v39 = (char *)*v10;
                v40 = (v37 - (_BYTE *)*v10) >> 2;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
                  goto LABEL_107;
                v42 = v36 - (_QWORD)v39;
                if (v42 >> 1 > v41)
                  v41 = v42 >> 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v43 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v44 = (char *)sub_100260634(v11, v43);
                  v39 = *(char **)(a1 + 8);
                  v37 = *(char **)(a1 + 16);
                }
                else
                {
                  v44 = 0;
                }
                v45 = &v44[4 * v40];
                *(_DWORD *)v45 = 0;
                v38 = v45 + 4;
                while (v37 != v39)
                {
                  v46 = *((_DWORD *)v37 - 1);
                  v37 -= 4;
                  *((_DWORD *)v45 - 1) = v46;
                  v45 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v45;
                *(_QWORD *)(a1 + 16) = v38;
                *(_QWORD *)(a1 + 24) = &v44[4 * v43];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *(_DWORD *)v37 = 0;
                v38 = v37 + 4;
              }
              *(_QWORD *)(a1 + 16) = v38;
              v47 = *((_QWORD *)this + 1);
              if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v38 - 1) = *(_DWORD *)(*(_QWORD *)this + v47);
              v35 = *((_QWORD *)this + 2);
              v34 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v34;
            }
            PB::Reader::recallMark(this, v68);
          }
          else
          {
            v55 = *(char **)(a1 + 16);
            v54 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v10;
              v58 = (v55 - (_BYTE *)*v10) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
LABEL_107:
                sub_100259694();
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_100260634(v11, v61);
                v57 = *(char **)(a1 + 8);
                v55 = *(char **)(a1 + 16);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v63;
              *(_QWORD *)(a1 + 16) = v56;
              *(_QWORD *)(a1 + 24) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *(_QWORD *)(a1 + 16) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *((_QWORD *)this + 2))
            {
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
              v49 = *((_QWORD *)this + 1) + 4;
LABEL_61:
              *((_QWORD *)this + 1) = v49;
            }
            else
            {
LABEL_95:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_96:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v48);
LABEL_60:
          v49 = *((_QWORD *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_101658D7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 3u);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  return result;
}

uint64_t sub_101658E18(uint64_t result)
{
  *(_QWORD *)result = &off_1021C47C8;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_101658E30(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101658E54(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C47C8;
  *(_DWORD *)(a1 + 108) = 0;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 108) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 88);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 88) = LODWORD(result);
    v2 = *(_DWORD *)(a2 + 108);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 96);
    v3 |= 0x100000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 96) = LODWORD(result);
    v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 92) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 100) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *(_DWORD *)(a2 + 104);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 104) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 76) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 84) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      return result;
LABEL_48:
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 108) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  if ((*(_DWORD *)(a2 + 108) & 2) != 0)
    goto LABEL_48;
  return result;
}

uint64_t sub_1016590F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pitchMean", *(float *)(a1 + 24));
    v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pitchStd", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rollMeanAbs", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rollStd", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYHigh", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYPed", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZHigh", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZPed", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "rotRateInerXYMean", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotRateInerXYStd", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotRateInerZMean", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotRateInerZStd", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYHigh", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYPed", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZHigh", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZPed", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userAccelInerXYMean", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelInerXYStd", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(this, "userAccelInerZStd", *(float *)(a1 + 100));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelInerZMean", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "yawStd", *(float *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101659404(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 108) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 108) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 3u:
          *(_DWORD *)(a1 + 108) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 4u:
          *(_DWORD *)(a1 + 108) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 5u:
          *(_DWORD *)(a1 + 108) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 6u:
          *(_DWORD *)(a1 + 108) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 7u:
          *(_DWORD *)(a1 + 108) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 8u:
          *(_DWORD *)(a1 + 108) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 9u:
          *(_DWORD *)(a1 + 108) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xAu:
          *(_DWORD *)(a1 + 108) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xBu:
          *(_DWORD *)(a1 + 108) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xCu:
          *(_DWORD *)(a1 + 108) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xDu:
          *(_DWORD *)(a1 + 108) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xEu:
          *(_DWORD *)(a1 + 108) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xFu:
          *(_DWORD *)(a1 + 108) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x10u:
          *(_DWORD *)(a1 + 108) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x11u:
          *(_DWORD *)(a1 + 108) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x12u:
          *(_DWORD *)(a1 + 108) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x13u:
          *(_DWORD *)(a1 + 108) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x14u:
          *(_DWORD *)(a1 + 108) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x15u:
          *(_DWORD *)(a1 + 108) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x16u:
          *(_DWORD *)(a1 + 108) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_95:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *(_DWORD *)(a1 + 108) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_93:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_96:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101659A90(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 108);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 4u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 5u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 6u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 9u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xCu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0xEu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0xFu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x11u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x13u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x14u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x15u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x17u);
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
  if ((*(_DWORD *)(v3 + 108) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x17u);
  return result;
}

uint64_t sub_101659D38(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4800;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101659D50(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101659D74(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1021C4800;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

uint64_t sub_101659DC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101659E2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_10165A00C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10165A064(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4838;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_10165A07C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10165A0A0(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)result = &off_1021C4838;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 68) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 52) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_BYTE *)(a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v13;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v14;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 68) = v3 | 4;
    *(_DWORD *)(result + 24) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v15;
  if ((*(_WORD *)(a2 + 68) & 4) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_10165A228(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "didExceedRadius", *(_BYTE *)(a1 + 64));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fenceID", *(_DWORD *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "positionRefX", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "positionRefY", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionRefZ", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionUncX", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionUncY", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionUncZ", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionX", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionY", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionZ", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165A3F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_50;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 64) = v22;
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_50:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_78:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 4u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_84:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165A914(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 52), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 64), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0xDu);
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xCu);
  if ((*(_WORD *)(v3 + 68) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0xDu);
  return result;
}

void sub_10165AAA8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10165AACC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165AB34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165ADC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_10165AE18(uint64_t result)
{
  *(_QWORD *)result = &off_1021C48A8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10165AE30(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C48A8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10165AE70(PB::Base *a1)
{
  sub_10165AE30(a1);
  operator delete();
}

uint64_t sub_10165AE94(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1021C48A8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_BYTE *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_10165AF48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "isPedestrian", *(_BYTE *)(a1 + 48));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "pedestrianClassProbability", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10165B008(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  _BYTE v59[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_81;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_55;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v26 = *((_QWORD *)this + 1);
          if (v26 >= *((_QWORD *)this + 2))
          {
            v29 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v27 = v26 + 1;
            v28 = *(unsigned __int8 *)(*(_QWORD *)this + v26);
            *((_QWORD *)this + 1) = v27;
            v29 = v28 != 0;
          }
          *(_BYTE *)(a1 + 48) = v29;
          goto LABEL_82;
        case 3u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v59, v24, a4) & 1) != 0)
              return 0;
            v30 = *((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              v33 = *(char **)(a1 + 16);
              v32 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*v10;
                v36 = (v33 - (_BYTE *)*v10) >> 2;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 62)
                  goto LABEL_91;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 1 > v37)
                  v37 = v38 >> 1;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                  v39 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v40 = (char *)sub_100260634(v11, v39);
                  v35 = *(char **)(a1 + 8);
                  v33 = *(char **)(a1 + 16);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[4 * v36];
                *(_DWORD *)v41 = 0;
                v34 = v41 + 4;
                while (v33 != v35)
                {
                  v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v41;
                *(_QWORD *)(a1 + 16) = v34;
                *(_QWORD *)(a1 + 24) = &v40[4 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_DWORD *)v33 = 0;
                v34 = v33 + 4;
              }
              *(_QWORD *)(a1 + 16) = v34;
              v43 = *((_QWORD *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v34 - 1) = *(_DWORD *)(*(_QWORD *)this + v43);
              v31 = *((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v30;
            }
            PB::Reader::recallMark(this, v59);
          }
          else
          {
            v47 = *(char **)(a1 + 16);
            v46 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v47 >= v46)
            {
              v49 = (char *)*v10;
              v50 = (v47 - (_BYTE *)*v10) >> 2;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62)
LABEL_91:
                sub_100259694();
              v52 = v46 - (_QWORD)v49;
              if (v52 >> 1 > v51)
                v51 = v52 >> 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                v53 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (char *)sub_100260634(v11, v53);
                v49 = *(char **)(a1 + 8);
                v47 = *(char **)(a1 + 16);
              }
              else
              {
                v54 = 0;
              }
              v55 = &v54[4 * v50];
              *(_DWORD *)v55 = 0;
              v48 = v55 + 4;
              while (v47 != v49)
              {
                v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v55;
              *(_QWORD *)(a1 + 16) = v48;
              *(_QWORD *)(a1 + 24) = &v54[4 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(_DWORD *)v47 = 0;
              v48 = v47 + 4;
            }
            *(_QWORD *)(a1 + 16) = v48;
            v57 = *((_QWORD *)this + 1);
            if (v57 <= 0xFFFFFFFFFFFFFFFBLL && v57 + 4 <= *((_QWORD *)this + 2))
            {
              *(v48 - 1) = *(_DWORD *)(*(_QWORD *)this + v57);
              v45 = *((_QWORD *)this + 1) + 4;
LABEL_56:
              *((_QWORD *)this + 1) = v45;
            }
            else
            {
LABEL_81:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_82:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((_QWORD *)this + 2))
            goto LABEL_81;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v44);
LABEL_55:
          v45 = *((_QWORD *)this + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_82;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10165B458(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 48), 2u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 3u);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  return result;
}

uint64_t sub_10165B4F4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C48E0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10165B50C(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C48E0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10165B54C(PB::Base *a1)
{
  sub_10165B50C(a1);
  operator delete();
}

uint64_t sub_10165B570(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1021C48E0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_10165B624(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "placement", *(_DWORD *)(a1 + 48));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbability", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10165B6E4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  _BYTE v68[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_84;
              v29 += 7;
              v26 = v32;
              v18 = v30++ > 8;
            }
            while (!v18);
LABEL_70:
            LODWORD(v31) = 0;
            goto LABEL_84;
          }
          v50 = 0;
          v51 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v52 = v26 + 1;
              v53 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v52;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v26 = v52;
                v18 = v51++ > 8;
                if (v18)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v31;
          goto LABEL_96;
        case 3u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v68, v24, a4) & 1) != 0)
              return 0;
            v34 = *((_QWORD *)this + 1);
            v35 = *((_QWORD *)this + 2);
            while (v34 < v35 && !*((_BYTE *)this + 24))
            {
              v37 = *(char **)(a1 + 16);
              v36 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v37 >= v36)
              {
                v39 = (char *)*v10;
                v40 = (v37 - (_BYTE *)*v10) >> 2;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
                  goto LABEL_107;
                v42 = v36 - (_QWORD)v39;
                if (v42 >> 1 > v41)
                  v41 = v42 >> 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v43 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v44 = (char *)sub_100260634(v11, v43);
                  v39 = *(char **)(a1 + 8);
                  v37 = *(char **)(a1 + 16);
                }
                else
                {
                  v44 = 0;
                }
                v45 = &v44[4 * v40];
                *(_DWORD *)v45 = 0;
                v38 = v45 + 4;
                while (v37 != v39)
                {
                  v46 = *((_DWORD *)v37 - 1);
                  v37 -= 4;
                  *((_DWORD *)v45 - 1) = v46;
                  v45 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v45;
                *(_QWORD *)(a1 + 16) = v38;
                *(_QWORD *)(a1 + 24) = &v44[4 * v43];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *(_DWORD *)v37 = 0;
                v38 = v37 + 4;
              }
              *(_QWORD *)(a1 + 16) = v38;
              v47 = *((_QWORD *)this + 1);
              if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v38 - 1) = *(_DWORD *)(*(_QWORD *)this + v47);
              v35 = *((_QWORD *)this + 2);
              v34 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v34;
            }
            PB::Reader::recallMark(this, v68);
          }
          else
          {
            v55 = *(char **)(a1 + 16);
            v54 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v10;
              v58 = (v55 - (_BYTE *)*v10) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
LABEL_107:
                sub_100259694();
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_100260634(v11, v61);
                v57 = *(char **)(a1 + 8);
                v55 = *(char **)(a1 + 16);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v63;
              *(_QWORD *)(a1 + 16) = v56;
              *(_QWORD *)(a1 + 24) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *(_QWORD *)(a1 + 16) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *((_QWORD *)this + 2))
            {
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
              v49 = *((_QWORD *)this + 1) + 4;
LABEL_61:
              *((_QWORD *)this + 1) = v49;
            }
            else
            {
LABEL_95:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_96:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v48);
LABEL_60:
          v49 = *((_QWORD *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10165BBD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 3u);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  return result;
}

uint64_t sub_10165BC70(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4918;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165BC88(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10165BCAC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4918;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_10165BD38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165BDE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165C04C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_10165C0E0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4950;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165C0F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10165C11C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4950;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_10165C1A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165C258(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165C4BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_10165C550(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4988;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10165C568(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10165C58C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4988;
  *(_DWORD *)(a1 + 48) = 0;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 48) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return result;
LABEL_18:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 48) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_10165C688(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 48) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165C7B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_50:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_51;
        case 8u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_48:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_51:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165CAFC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 4u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 8u);
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  if ((*(_BYTE *)(v3 + 48) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 8u);
  return result;
}

_QWORD *sub_10165CC00(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_1021C49C0;
  return result;
}

void sub_10165CC14(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1021C49C0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_10165CC74(PB::Base *a1)
{
  sub_10165CC14(a1);
  operator delete();
}

_QWORD *sub_10165CC98(_QWORD *result, uint64_t a2)
{
  *result = &off_1021C49C0;
  result[1] = 0;
  result[2] = 0;
  if (*(_QWORD *)(a2 + 16))
    operator new();
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10165CD6C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "signalEnvironment");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165CDDC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v10 >> 3;
      if ((v10 >> 3) == 2)
        operator new();
      if ((_DWORD)v19 == 1)
        operator new();
      result = PB::Reader::skip(this, v19, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165CFF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5, 2u);
  return result;
}

uint64_t sub_10165D048(uint64_t result)
{
  *(_QWORD *)result = off_1021C49F8;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_10165D060(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C49F8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10165D0A4(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C49F8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_10165D0FC(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = off_1021C49F8;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v3 = 32;
    *(_BYTE *)(result + 64) = 32;
    *(_QWORD *)(result + 56) = v4;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 64) = v3;
    *(_QWORD *)(result + 32) = v5;
    v2 = *(_BYTE *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(result + 64) = v3;
    *(_QWORD *)(result + 40) = v7;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 24) = v8;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_16:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 64) & 2) != 0)
  {
LABEL_10:
    v6 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 64) = v3 | 2;
    *(_QWORD *)(result + 16) = v6;
  }
LABEL_11:
  if (*(_QWORD *)(a2 + 48))
    operator new();
  return result;
}

uint64_t sub_10165D22C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "course", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 40));
LABEL_7:
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "signalEnvironment");
  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165D338(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 64) |= 0x20u;
              v20 = *((_QWORD *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v20);
              goto LABEL_44;
            case 2u:
              *(_BYTE *)(a1 + 64) |= 8u;
              v22 = *((_QWORD *)this + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
              goto LABEL_44;
            case 3u:
              *(_BYTE *)(a1 + 64) |= 0x10u;
              v23 = *((_QWORD *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v23);
              goto LABEL_44;
            case 4u:
              *(_BYTE *)(a1 + 64) |= 4u;
              v24 = *((_QWORD *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v24);
              goto LABEL_44;
            case 5u:
              *(_BYTE *)(a1 + 64) |= 1u;
              v25 = *((_QWORD *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v25);
              goto LABEL_44;
            case 6u:
              *(_BYTE *)(a1 + 64) |= 2u;
              v26 = *((_QWORD *)this + 1);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_44:
                *((_QWORD *)this + 1) += 8;
              }
              else
              {
LABEL_41:
                *((_BYTE *)this + 24) = 1;
              }
LABEL_45:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            case 7u:
              operator new();
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_45;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165D68C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  if ((*(_BYTE *)(v3 + 64) & 2) != 0)
LABEL_7:
    result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5, 7u);
  return result;
}

_QWORD *sub_10165D770(_QWORD *result)
{
  *result = off_1021C4A30;
  result[1] = 0;
  return result;
}

void sub_10165D780(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4A30;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10165D7C0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4A30;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10165D814(_QWORD *result, uint64_t a2)
{
  *result = off_1021C4A30;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10165D890(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165D8E0(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165DAB8(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_10165DAD4(_QWORD *result)
{
  *result = off_1021C4A68;
  result[1] = 0;
  return result;
}

void sub_10165DAE4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4A68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10165DB24(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C4A68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10165DB78(_QWORD *result, uint64_t a2)
{
  *result = off_1021C4A68;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10165DBF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165DC44(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165DE1C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10165DE38(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4AA0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10165DE50(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C4AA0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10165DE90(PB::Base *a1)
{
  sub_10165DE50(a1);
  operator delete();
}

uint64_t sub_10165DEB4(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C4AA0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2)
    sub_10034F2B0(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_10165DF28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "velocity", v7);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10165DFA8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE v54[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    do
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v21 = v4 + 1;
          v22 = *(_BYTE *)(v12 + v4);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
      {
        if ((_DWORD)v24 != 2)
        {
          v42 = *(char **)(a1 + 16);
          v41 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v42 >= v41)
          {
            v44 = (char *)*v10;
            v45 = (v42 - (_BYTE *)*v10) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
LABEL_84:
              sub_100259694();
            v47 = v41 - (_QWORD)v44;
            if (v47 >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_10025E6A0(v11, v48);
              v44 = *(char **)(a1 + 8);
              v42 = *(char **)(a1 + 16);
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[8 * v45];
            *(_QWORD *)v50 = 0;
            v43 = v50 + 8;
            while (v42 != v44)
            {
              v51 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *((_QWORD *)v50 - 1) = v51;
              v50 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v50;
            *(_QWORD *)(a1 + 16) = v43;
            *(_QWORD *)(a1 + 24) = &v49[8 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_QWORD *)v42 = 0;
            v43 = v42 + 8;
          }
          *(_QWORD *)(a1 + 16) = v43;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark(this, v54, v24, a4) & 1) != 0)
          return 0;
        v27 = *((_QWORD *)this + 1);
        v28 = *((_QWORD *)this + 2);
        while (v27 < v28 && !*((_BYTE *)this + 24))
        {
          v30 = *(char **)(a1 + 16);
          v29 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v30 >= v29)
          {
            v32 = (char *)*v10;
            v33 = (v30 - (_BYTE *)*v10) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_84;
            v35 = v29 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_10025E6A0(v11, v36);
              v32 = *(char **)(a1 + 8);
              v30 = *(char **)(a1 + 16);
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = 0;
            v31 = v38 + 8;
            while (v30 != v32)
            {
              v39 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v38 - 1) = v39;
              v38 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v38;
            *(_QWORD *)(a1 + 16) = v31;
            *(_QWORD *)(a1 + 24) = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v30 = 0;
            v31 = v30 + 8;
          }
          *(_QWORD *)(a1 + 16) = v31;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
          v28 = *((_QWORD *)this + 2);
          v27 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v27;
        }
        PB::Reader::recallMark(this, v54);
      }
      else
      {
        if ((_DWORD)v25 == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_73;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_75:
          *((_QWORD *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0)
          return 0;
      }
LABEL_76:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
    }
    while (v4 < v5 && !*((_BYTE *)this + 24));
  }
  return v6 == 0;
}

uint64_t sub_10165E358(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6, 2u);
  }
  return result;
}

double sub_10165E3B8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4AD8;
  *(_DWORD *)(a1 + 124) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_10165E3E4(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021C4AD8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_10165E444(PB::Base *a1)
{
  sub_10165E3E4(a1);
  operator delete();
}

uint64_t sub_10165E468(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1021C4AD8;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 80);
    v6 = 1;
    *(_WORD *)(a1 + 124) = 1;
    *(_QWORD *)(a1 + 80) = v7;
    v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x40u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    v5 = *(_WORD *)(a2 + 124);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    v13 = *(_DWORD *)(a2 + 104);
    v6 |= 0x20u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 104) = v13;
    v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 120);
  v6 |= 0x200u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 120) = v14;
  v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v15 = *(_DWORD *)(a2 + 88);
  v6 |= 2u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 88) = v15;
  v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_24:
  v16 = *(_DWORD *)(a2 + 112);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 112) = v16;
  if ((*(_WORD *)(a2 + 124) & 0x10) != 0)
  {
LABEL_11:
    v9 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 124) = v6 | 0x10;
    *(_DWORD *)(a1 + 100) = v9;
  }
LABEL_12:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = *(_WORD *)(a2 + 124);
  if ((v10 & 8) != 0)
  {
    v17 = *(_DWORD *)(a2 + 96);
    *(_WORD *)(a1 + 124) |= 8u;
    *(_DWORD *)(a1 + 96) = v17;
    v10 = *(_WORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a2 + 124) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  v18 = *(_DWORD *)(a2 + 116);
  *(_WORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 116) = v18;
  if ((*(_WORD *)(a2 + 124) & 4) != 0)
  {
LABEL_17:
    v11 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 124) |= 4u;
    *(_DWORD *)(a1 + 92) = v11;
  }
LABEL_18:
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_10165E638(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(float *)(a1 + 88));
    v5 = *(_WORD *)(a1 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "focalLength", *(float *)(a1 + 92));
  v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_25:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 124) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 100));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "origin", v8);
  }
  if ((*(_WORD *)(a1 + 124) & 0x20) != 0)
    PB::TextFormatter::format(this, "pitch", *(float *)(a1 + 104));
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "principlePoint", v11);
  }
  v12 = *(_WORD *)(a1 + 124);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "roll", *(float *)(a1 + 108));
    v12 = *(_WORD *)(a1 + 124);
  }
  if ((v12 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "transform", v15);
  }
  v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x80) == 0)
  {
    if ((*(_WORD *)(a1 + 124) & 0x100) == 0)
      goto LABEL_20;
LABEL_28:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 116));
    if ((*(_WORD *)(a1 + 124) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 112));
  v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x100) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v16 & 0x200) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10165E830(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  unint64_t v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  char *v104;
  _DWORD *v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  char *v132;
  int v133;
  unint64_t v134;
  uint64_t v137;
  _BYTE v138[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 56);
    v137 = a1 + 72;
    v11 = (void **)(a1 + 32);
    v12 = a1 + 48;
    v13 = (void **)(a1 + 8);
    v14 = a1 + 24;
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 124) |= 1u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v28);
          v29 = *((_QWORD *)this + 1) + 8;
          goto LABEL_215;
        case 2u:
          *(_WORD *)(a1 + 124) |= 0x40u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_214;
        case 3u:
          *(_WORD *)(a1 + 124) |= 0x20u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_214;
        case 4u:
          *(_WORD *)(a1 + 124) |= 0x200u;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_214;
        case 5u:
          *(_WORD *)(a1 + 124) |= 2u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_214;
        case 6u:
          *(_WORD *)(a1 + 124) |= 0x80u;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          v36 = *(_QWORD *)this;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)this + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_185;
              v37 += 7;
              v34 = v40;
              v21 = v38++ > 8;
            }
            while (!v21);
LABEL_141:
            LODWORD(v39) = 0;
            goto LABEL_185;
          }
          v95 = 0;
          v96 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v97 = v34 + 1;
              v98 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)this + 1) = v97;
              v39 |= (unint64_t)(v98 & 0x7F) << v95;
              if (v98 < 0)
              {
                v95 += 7;
                v34 = v97;
                v21 = v96++ > 8;
                if (v21)
                  goto LABEL_141;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v39) = 0;
            }
            break;
          }
LABEL_185:
          *(_DWORD *)(a1 + 112) = v39;
          goto LABEL_216;
        case 7u:
          *(_WORD *)(a1 + 124) |= 0x10u;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          v44 = *(_QWORD *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v42 + 1;
              *((_QWORD *)this + 1) = v42 + 1;
              v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0)
                goto LABEL_188;
              v45 += 7;
              v42 = v48;
              v21 = v46++ > 8;
            }
            while (!v21);
LABEL_148:
            LODWORD(v47) = 0;
            goto LABEL_188;
          }
          v99 = 0;
          v100 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v101 = v42 + 1;
              v102 = *(_BYTE *)(v44 + v42);
              *((_QWORD *)this + 1) = v101;
              v47 |= (unint64_t)(v102 & 0x7F) << v99;
              if (v102 < 0)
              {
                v99 += 7;
                v42 = v101;
                v21 = v100++ > 8;
                if (v21)
                  goto LABEL_148;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v47) = 0;
            }
            break;
          }
LABEL_188:
          *(_DWORD *)(a1 + 100) = v47;
          goto LABEL_216;
        case 8u:
          if ((_DWORD)v27 != 2)
          {
            v104 = *(char **)(a1 + 16);
            v103 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v104 >= v103)
            {
              v110 = (char *)*v13;
              v111 = (v104 - (_BYTE *)*v13) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
LABEL_226:
                sub_100259694();
              v113 = v103 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_100260634(v14, v114);
                v110 = *(char **)(a1 + 8);
                v104 = *(char **)(a1 + 16);
              }
              else
              {
                v115 = 0;
              }
              v128 = &v115[4 * v111];
              *(_DWORD *)v128 = 0;
              v105 = v128 + 4;
              while (v104 != v110)
              {
                v129 = *((_DWORD *)v104 - 1);
                v104 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v128;
              *(_QWORD *)(a1 + 16) = v105;
              *(_QWORD *)(a1 + 24) = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v104 = 0;
              v105 = v104 + 4;
            }
            *(_QWORD *)(a1 + 16) = v105;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark(this, v138, v27, a4) & 1) != 0)
            return 0;
          v50 = *((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          while (v50 < v51 && !*((_BYTE *)this + 24))
          {
            v53 = *(char **)(a1 + 16);
            v52 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v13;
              v56 = (v53 - (_BYTE *)*v13) >> 2;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62)
                goto LABEL_226;
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_100260634(v14, v59);
                v55 = *(char **)(a1 + 8);
                v53 = *(char **)(a1 + 16);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v56];
              *(_DWORD *)v61 = 0;
              v54 = v61 + 4;
              while (v53 != v55)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v61;
              *(_QWORD *)(a1 + 16) = v54;
              *(_QWORD *)(a1 + 24) = &v60[4 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_DWORD *)v53 = 0;
              v54 = v53 + 4;
            }
            *(_QWORD *)(a1 + 16) = v54;
            v63 = *((_QWORD *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
              goto LABEL_155;
            *(v54 - 1) = *(_DWORD *)(*(_QWORD *)this + v63);
            v51 = *((_QWORD *)this + 2);
            v50 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v50;
          }
          goto LABEL_156;
        case 9u:
          *(_WORD *)(a1 + 124) |= 8u;
          v64 = *((_QWORD *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v64);
          goto LABEL_214;
        case 0xAu:
          *(_WORD *)(a1 + 124) |= 0x100u;
          v65 = *((_QWORD *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v65);
          goto LABEL_214;
        case 0xBu:
          *(_WORD *)(a1 + 124) |= 4u;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_214;
        case 0xCu:
          if ((_DWORD)v27 != 2)
          {
            v107 = *(char **)(a1 + 40);
            v106 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v107 >= v106)
            {
              v116 = (char *)*v11;
              v117 = (v107 - (_BYTE *)*v11) >> 2;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 62)
LABEL_227:
                sub_100259694();
              v119 = v106 - (_QWORD)v116;
              if (v119 >> 1 > v118)
                v118 = v119 >> 1;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
                v120 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_100260634(v12, v120);
                v116 = *(char **)(a1 + 32);
                v107 = *(char **)(a1 + 40);
              }
              else
              {
                v121 = 0;
              }
              v130 = &v121[4 * v117];
              *(_DWORD *)v130 = 0;
              v105 = v130 + 4;
              while (v107 != v116)
              {
                v131 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v130;
              *(_QWORD *)(a1 + 40) = v105;
              *(_QWORD *)(a1 + 48) = &v121[4 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_DWORD *)v107 = 0;
              v105 = v107 + 4;
            }
            *(_QWORD *)(a1 + 40) = v105;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark(this, v138, v27, a4) & 1) != 0)
            return 0;
          v67 = *((_QWORD *)this + 1);
          v68 = *((_QWORD *)this + 2);
          while (v67 < v68 && !*((_BYTE *)this + 24))
          {
            v70 = *(char **)(a1 + 40);
            v69 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v70 >= v69)
            {
              v72 = (char *)*v11;
              v73 = (v70 - (_BYTE *)*v11) >> 2;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62)
                goto LABEL_227;
              v75 = v69 - (_QWORD)v72;
              if (v75 >> 1 > v74)
                v74 = v75 >> 1;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                v76 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                v77 = (char *)sub_100260634(v12, v76);
                v72 = *(char **)(a1 + 32);
                v70 = *(char **)(a1 + 40);
              }
              else
              {
                v77 = 0;
              }
              v78 = &v77[4 * v73];
              *(_DWORD *)v78 = 0;
              v71 = v78 + 4;
              while (v70 != v72)
              {
                v79 = *((_DWORD *)v70 - 1);
                v70 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v78;
              *(_QWORD *)(a1 + 40) = v71;
              *(_QWORD *)(a1 + 48) = &v77[4 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_DWORD *)v70 = 0;
              v71 = v70 + 4;
            }
            *(_QWORD *)(a1 + 40) = v71;
            v80 = *((_QWORD *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
              goto LABEL_155;
            *(v71 - 1) = *(_DWORD *)(*(_QWORD *)this + v80);
            v68 = *((_QWORD *)this + 2);
            v67 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v67;
          }
          goto LABEL_156;
        case 0xDu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v138, v27, a4) & 1) != 0)
              return 0;
            v81 = *((_QWORD *)this + 1);
            v82 = *((_QWORD *)this + 2);
            while (v81 < v82 && !*((_BYTE *)this + 24))
            {
              v84 = *(char **)(a1 + 64);
              v83 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v84 >= v83)
              {
                v86 = (char *)*v10;
                v87 = (v84 - (_BYTE *)*v10) >> 2;
                v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 62)
                  goto LABEL_228;
                v89 = v83 - (_QWORD)v86;
                if (v89 >> 1 > v88)
                  v88 = v89 >> 1;
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                  v90 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v90 = v88;
                if (v90)
                {
                  v91 = (char *)sub_100260634(v137, v90);
                  v86 = *(char **)(a1 + 56);
                  v84 = *(char **)(a1 + 64);
                }
                else
                {
                  v91 = 0;
                }
                v92 = &v91[4 * v87];
                *(_DWORD *)v92 = 0;
                v85 = v92 + 4;
                while (v84 != v86)
                {
                  v93 = *((_DWORD *)v84 - 1);
                  v84 -= 4;
                  *((_DWORD *)v92 - 1) = v93;
                  v92 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v92;
                *(_QWORD *)(a1 + 64) = v85;
                *(_QWORD *)(a1 + 72) = &v91[4 * v90];
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *(_DWORD *)v84 = 0;
                v85 = v84 + 4;
              }
              *(_QWORD *)(a1 + 64) = v85;
              v94 = *((_QWORD *)this + 1);
              if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
              {
LABEL_155:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v85 - 1) = *(_DWORD *)(*(_QWORD *)this + v94);
              v82 = *((_QWORD *)this + 2);
              v81 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v81;
            }
LABEL_156:
            PB::Reader::recallMark(this, v138);
          }
          else
          {
            v109 = *(char **)(a1 + 64);
            v108 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v109 >= v108)
            {
              v122 = (char *)*v10;
              v123 = (v109 - (_BYTE *)*v10) >> 2;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 62)
LABEL_228:
                sub_100259694();
              v125 = v108 - (_QWORD)v122;
              if (v125 >> 1 > v124)
                v124 = v125 >> 1;
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
                v126 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v126 = v124;
              if (v126)
              {
                v127 = (char *)sub_100260634(v137, v126);
                v122 = *(char **)(a1 + 56);
                v109 = *(char **)(a1 + 64);
              }
              else
              {
                v127 = 0;
              }
              v132 = &v127[4 * v123];
              *(_DWORD *)v132 = 0;
              v105 = v132 + 4;
              while (v109 != v122)
              {
                v133 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v132 - 1) = v133;
                v132 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v132;
              *(_QWORD *)(a1 + 64) = v105;
              *(_QWORD *)(a1 + 72) = &v127[4 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_DWORD *)v109 = 0;
              v105 = v109 + 4;
            }
            *(_QWORD *)(a1 + 64) = v105;
LABEL_210:
            v134 = *((_QWORD *)this + 1);
            if (v134 <= 0xFFFFFFFFFFFFFFFBLL && v134 + 4 <= *((_QWORD *)this + 2))
            {
              *(v105 - 1) = *(_DWORD *)(*(_QWORD *)this + v134);
LABEL_214:
              v29 = *((_QWORD *)this + 1) + 4;
LABEL_215:
              *((_QWORD *)this + 1) = v29;
            }
            else
            {
LABEL_212:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_216:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v18 >> 3, v18 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_216;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10165F2E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;

  v3 = result;
  v4 = *(_WORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 3u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 4u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
LABEL_28:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 6u);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0)
    goto LABEL_28;
LABEL_7:
  if ((v4 & 0x10) != 0)
LABEL_8:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 7u);
LABEL_9:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 8u);
  }
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0)
      goto LABEL_14;
LABEL_31:
    result = PB::Writer::write(this, *(float *)(v3 + 116), 0xAu);
    if ((*(_WORD *)(v3 + 124) & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v8 & 4) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    result = PB::Writer::write(this, v11, 0xCu);
  }
  v13 = *(float **)(v3 + 56);
  v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    v14 = *v13++;
    result = PB::Writer::write(this, v14, 0xDu);
  }
  return result;
}

uint64_t sub_10165F480(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4B10;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_10165F498(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10165F4BC(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;

  *(_QWORD *)result = &off_1021C4B10;
  *(_DWORD *)(result + 56) = 0;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 56) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 56) = v3;
    *(_QWORD *)(result + 32) = v5;
    v2 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 56) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 56) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 56) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_16:
    v10 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(result + 56) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_BYTE *)(a2 + 52);
  v3 |= 0x40u;
  *(_BYTE *)(result + 56) = v3;
  *(_BYTE *)(result + 52) = v9;
  if ((*(_BYTE *)(a2 + 56) & 0x20) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_10165F59C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 48));
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "distOdom", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distPed", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 52));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "uncOdom", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165F6AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_58:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 52) = v22;
              goto LABEL_64;
            case 7u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_62;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_63;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 48) = v27;
LABEL_64:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165FA70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 52), 6u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 7u);
  return result;
}

uint64_t sub_10165FB58(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4B48;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_10165FB70(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10165FB94(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;

  *(_QWORD *)result = &off_1021C4B48;
  *(_DWORD *)(result + 116) = 0;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64);
    v3 = 128;
    *(_WORD *)(result + 116) = 128;
    *(_QWORD *)(result + 64) = v4;
    v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 116) & 0x2000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 108);
    v3 |= 0x2000u;
    *(_WORD *)(result + 116) = v3;
    *(_DWORD *)(result + 108) = v5;
    v2 = *(_WORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 116) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 56) = v7;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 8) = v9;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 16) = v10;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 96) = v11;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 32) = v12;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 72) = v13;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 48) = v14;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 88) = v15;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 80) = v16;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *(_BYTE *)(a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(result + 116) = v3;
  *(_BYTE *)(result + 113) = v17;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_34:
    v19 = *(_DWORD *)(a2 + 104);
    *(_WORD *)(result + 116) = v3 | 0x1000;
    *(_DWORD *)(result + 104) = v19;
    return result;
  }
LABEL_33:
  v18 = *(_BYTE *)(a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v18;
  if ((*(_WORD *)(a2 + 116) & 0x1000) != 0)
    goto LABEL_34;
  return result;
}

uint64_t sub_10165FD70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 104));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isIndoor", *(_BYTE *)(a1 + 112));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "isMotionOverrideSet", *(_BYTE *)(a1 + 113));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "metsWR", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "steps", *(_DWORD *)(a1 + 108));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "stepsDuration", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(this, "truthMetsStrollerCorrected", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 116) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(this, "truthMetsGradeCorrected", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x400) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x800) != 0)
LABEL_17:
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165FFA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 116) |= 0x2000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 108) = v25;
              goto LABEL_108;
            case 3u:
              *(_WORD *)(a1 + 116) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 116) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 116) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 116) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 116) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 116) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 116) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xCu:
              *(_WORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xDu:
              *(_WORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *(_WORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *(_WORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *(_WORD *)(a1 + 116) |= 0x1000u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_106;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_107;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v35;
LABEL_108:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_108;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10166061C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 2u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0xAu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 0xCu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0xDu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 113), 0xEu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x10u);
  }
LABEL_32:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 0xFu);
  if ((*(_WORD *)(v3 + 116) & 0x1000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x10u);
  return result;
}

double sub_101660800(_QWORD *a1)
{
  double result;

  *a1 = &off_1021C4B80;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

void sub_10166081C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101660840(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)result = &off_1021C4B80;
  *(_QWORD *)(result + 28) = 0xFFFFFFFFLL;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 32) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 32) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_DWORD *)(result + 28) = v7;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1016608D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestampSet", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampExit", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "userResponse", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101660980(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_33;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_33;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_49;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_49:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_33:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_53;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_54;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_55:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101660C98(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  return result;
}

uint64_t sub_101660D2C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4BB8;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_101660D44(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101660D68(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C4BB8;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 40) = result;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 56) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_13:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 48) = result;
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_101660E2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "complexHandMotionPercentage", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "straightnessMetric", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "walkPercentage", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101660F1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 56) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016611E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 5u);
  if ((*(_BYTE *)(v3 + 56) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  return result;
}

uint64_t sub_1016612B4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4BF0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1016612CC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016612F0(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C4BF0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_101661340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "motionState", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016613A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101661634(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

double sub_10166168C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4C28;
  *(_DWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_1016616AC(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021C4C28;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_101661704(PB::Base *a1)
{
  sub_1016616AC(a1);
  operator delete();
}

uint64_t sub_101661728(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;

  *(_QWORD *)a1 = &off_1021C4C28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(_QWORD *)(a2 + 32))
    operator new();
  if (a1 != a2)
    sub_1002A3054((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v4 = *(_BYTE *)(a2 + 48);
  if ((v4 & 2) != 0)
  {
    v5 = *(_DWORD *)(a2 + 44);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 44) = v5;
    v4 = *(_BYTE *)(a2 + 48);
  }
  if ((v4 & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t sub_101661814(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "gyroBias", v7);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "super");
  v9 = *(_BYTE *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperatureGyro", *(float *)(a1 + 40));
    v9 = *(_BYTE *)(a1 + 48);
  }
  if ((v9 & 2) != 0)
    PB::TextFormatter::format(this, "temperatureGyroBias", *(float *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1016618D8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;
  _BYTE v54[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v54, v24, a4) & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v10;
                v31 = (v28 - (_BYTE *)*v10) >> 2;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_87;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_100260634(v11, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[4 * v31];
                *(_DWORD *)v36 = 0;
                v29 = v36 + 4;
                while (v28 != v30)
                {
                  v37 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[4 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_DWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v25;
            }
            PB::Reader::recallMark(this, v54);
          }
          else
          {
            v42 = *(char **)(a1 + 16);
            v41 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v10;
              v45 = (v42 - (_BYTE *)*v10) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
LABEL_87:
                sub_100259694();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_100260634(v11, v48);
                v44 = *(char **)(a1 + 8);
                v42 = *(char **)(a1 + 16);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = 0;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v50;
              *(_QWORD *)(a1 + 16) = v43;
              *(_QWORD *)(a1 + 24) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *(_QWORD *)(a1 + 16) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *((_QWORD *)this + 2))
            {
              *(v43 - 1) = *(_DWORD *)(*(_QWORD *)this + v52);
LABEL_78:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_76:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_79:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_76;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_78;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_76;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_78;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_79;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_101661D44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 2u);
  }
  v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 44), 3u);
    v8 = *(_BYTE *)(v3 + 48);
  }
  if ((v8 & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  return result;
}

uint64_t sub_101661DDC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4C60;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101661DF4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101661E18(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)result = &off_1021C4C60;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v3 = 32;
    *(_BYTE *)(result + 64) = 32;
    *(_QWORD *)(result + 48) = v4;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 64) = v3;
    *(_QWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 64) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_BYTE *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v7;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v9;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_18:
    v11 = *(_DWORD *)(a2 + 60);
    *(_BYTE *)(result + 64) = v3 | 0x80;
    *(_DWORD *)(result + 60) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 16) = v10;
  if ((*(_BYTE *)(a2 + 64) & 0x80) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_101661F14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "firstRingSensorTimeStampMicroSeconds", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds", *(_QWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "medianBufferNumSamples", *(_DWORD *)(a1 + 56));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "medianNorthAlignmentEstimateRad", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "newNorthAlignmentEstimateRad", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "timeElapsedSinceLastUpdateMicroSeconds", *(_QWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 64) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "numRingSensorSamples", *(_DWORD *)(a1 + 60));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x20) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101662044(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 64) |= 0x40u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 64) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_114:
              *(_QWORD *)(a1 + 40) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 64) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_119:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 64) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_124:
              *(_QWORD *)(a1 + 16) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 64) |= 0x80u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 60) = v49;
LABEL_130:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101662704(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 4u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 5u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 6u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 8u);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 7u);
  if ((*(_BYTE *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 8u);
  return result;
}

uint64_t sub_101662808(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4C98;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101662824(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021C4C98;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10166287C(PB::Base *a1)
{
  sub_101662824(a1);
  operator delete();
}

uint64_t sub_1016628A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1021C4C98;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a2 + 48))
    operator new();
  if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) |= 4u;
    *(_QWORD *)(a1 + 56) = v4;
  }
  if (a1 != a2)
    sub_10034F2B0((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_BYTE *)(a2 + 64);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 64) |= 1u;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = *(_BYTE *)(a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 64) |= 2u;
    *(_QWORD *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t sub_1016629AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastAuxTimeStampMicroSeconds", *(_QWORD *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 64);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds", *(_QWORD *)(a1 + 40));
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "qSP", v8);
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "super");
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
    PB::TextFormatter::format(this, "timeStampMicroSeconds", *(_QWORD *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101662A8C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  char *v68;
  _QWORD *v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE v89[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *(_BYTE *)(a1 + 64) |= 4u;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          v27 = *(_QWORD *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)this + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_108;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_78:
            v30 = 0;
            goto LABEL_108;
          }
          v63 = 0;
          v64 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v65 = v25 + 1;
              v66 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)this + 1) = v65;
              v30 |= (unint64_t)(v66 & 0x7F) << v63;
              if (v66 < 0)
              {
                v63 += 7;
                v25 = v65;
                v18 = v64++ > 8;
                if (v18)
                  goto LABEL_78;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v30 = 0;
            }
            break;
          }
LABEL_108:
          *(_QWORD *)(a1 + 56) = v30;
          goto LABEL_126;
        case 3u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v89, v24, a4) & 1) != 0)
              return 0;
            v33 = *((_QWORD *)this + 1);
            v34 = *((_QWORD *)this + 2);
            while (v33 < v34 && !*((_BYTE *)this + 24))
            {
              v36 = *(char **)(a1 + 16);
              v35 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v36 >= v35)
              {
                v38 = (char *)*v10;
                v39 = (v36 - (_BYTE *)*v10) >> 3;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 61)
                  goto LABEL_136;
                v41 = v35 - (_QWORD)v38;
                if (v41 >> 2 > v40)
                  v40 = v41 >> 2;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v43 = (char *)sub_10025E6A0(v11, v42);
                  v38 = *(char **)(a1 + 8);
                  v36 = *(char **)(a1 + 16);
                }
                else
                {
                  v43 = 0;
                }
                v44 = &v43[8 * v39];
                *(_QWORD *)v44 = 0;
                v37 = v44 + 8;
                while (v36 != v38)
                {
                  v45 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *((_QWORD *)v44 - 1) = v45;
                  v44 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v44;
                *(_QWORD *)(a1 + 16) = v37;
                *(_QWORD *)(a1 + 24) = &v43[8 * v42];
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *(_QWORD *)v36 = 0;
                v37 = v36 + 8;
              }
              *(_QWORD *)(a1 + 16) = v37;
              v46 = *((_QWORD *)this + 1);
              if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v37 - 1) = *(_QWORD *)(*(_QWORD *)this + v46);
              v34 = *((_QWORD *)this + 2);
              v33 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v33;
            }
            PB::Reader::recallMark(this, v89);
          }
          else
          {
            v68 = *(char **)(a1 + 16);
            v67 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v68 >= v67)
            {
              v78 = (char *)*v10;
              v79 = (v68 - (_BYTE *)*v10) >> 3;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61)
LABEL_136:
                sub_100259694();
              v81 = v67 - (_QWORD)v78;
              if (v81 >> 2 > v80)
                v80 = v81 >> 2;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v80;
              if (v82)
              {
                v83 = (char *)sub_10025E6A0(v11, v82);
                v78 = *(char **)(a1 + 8);
                v68 = *(char **)(a1 + 16);
              }
              else
              {
                v83 = 0;
              }
              v84 = &v83[8 * v79];
              *(_QWORD *)v84 = 0;
              v69 = v84 + 8;
              while (v68 != v78)
              {
                v85 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v84 - 1) = v85;
                v84 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v84;
              *(_QWORD *)(a1 + 16) = v69;
              *(_QWORD *)(a1 + 24) = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_QWORD *)v68 = 0;
              v69 = v68 + 8;
            }
            *(_QWORD *)(a1 + 16) = v69;
            v86 = *((_QWORD *)this + 1);
            if (v86 <= 0xFFFFFFFFFFFFFFF7 && v86 + 8 <= *((_QWORD *)this + 2))
            {
              *(v69 - 1) = *(_QWORD *)(*(_QWORD *)this + v86);
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_126:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v47 = *((_QWORD *)this + 1);
          v48 = *((_QWORD *)this + 2);
          v49 = *(_QWORD *)this;
          if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
          {
            v50 = 0;
            v51 = 0;
            v52 = 0;
            do
            {
              v53 = v47 + 1;
              *((_QWORD *)this + 1) = v47 + 1;
              v54 = *(_BYTE *)(v49 + v47);
              v52 |= (unint64_t)(v54 & 0x7F) << v50;
              if ((v54 & 0x80) == 0)
                goto LABEL_111;
              v50 += 7;
              v47 = v53;
              v18 = v51++ > 8;
            }
            while (!v18);
LABEL_87:
            v52 = 0;
            goto LABEL_111;
          }
          v70 = 0;
          v71 = 0;
          v52 = 0;
          if (v48 <= v47)
            v48 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v48 == v47)
            {
              v52 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v72 = v47 + 1;
              v73 = *(_BYTE *)(v49 + v47);
              *((_QWORD *)this + 1) = v72;
              v52 |= (unint64_t)(v73 & 0x7F) << v70;
              if (v73 < 0)
              {
                v70 += 7;
                v47 = v72;
                v18 = v71++ > 8;
                if (v18)
                  goto LABEL_87;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v52 = 0;
            }
            break;
          }
LABEL_111:
          *(_QWORD *)(a1 + 32) = v52;
          goto LABEL_126;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          v57 = *(_QWORD *)this;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = v55 + 1;
              *((_QWORD *)this + 1) = v55 + 1;
              v62 = *(_BYTE *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0)
                goto LABEL_114;
              v58 += 7;
              v55 = v61;
              v18 = v59++ > 8;
            }
            while (!v18);
LABEL_94:
            v60 = 0;
            goto LABEL_114;
          }
          v74 = 0;
          v75 = 0;
          v60 = 0;
          if (v56 <= v55)
            v56 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v56 == v55)
            {
              v60 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v76 = v55 + 1;
              v77 = *(_BYTE *)(v57 + v55);
              *((_QWORD *)this + 1) = v76;
              v60 |= (unint64_t)(v77 & 0x7F) << v74;
              if (v77 < 0)
              {
                v74 += 7;
                v55 = v76;
                v18 = v75++ > 8;
                if (v18)
                  goto LABEL_94;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v60 = 0;
            }
            break;
          }
LABEL_114:
          *(_QWORD *)(a1 + 40) = v60;
          goto LABEL_126;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_126;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_101663140(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4CD0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_101663154(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 48);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 64) & 4) != 0)
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 2u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 3u);
  }
  v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 4u);
    v8 = *(_BYTE *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 5u);
  return result;
}

void sub_101663208(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10166322C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)result = &off_1021C4CD0;
  *(_DWORD *)(result + 76) = 0;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_WORD *)(result + 76) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 76) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *(_QWORD *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 76) = v3;
    *(_QWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 16) = v9;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 32) = v10;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      return result;
LABEL_20:
    v12 = *(_BYTE *)(a2 + 72);
    *(_WORD *)(result + 76) = v3 | 0x100;
    *(_BYTE *)(result + 72) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_101663340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "estimated", *(_BYTE *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "estimationUpdateIndex", *(_QWORD *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "rollAngle", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x80) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101663490(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 76) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 2u:
              *(_WORD *)(a1 + 76) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 3u:
              *(_WORD *)(a1 + 76) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 4u:
              *(_WORD *)(a1 + 76) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 5u:
              *(_WORD *)(a1 + 76) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 6u:
              *(_WORD *)(a1 + 76) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 7u:
              *(_WORD *)(a1 + 76) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_64:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 76) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_68:
                    v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_68;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_69;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_69:
              *(_QWORD *)(a1 + 24) = v25;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 76) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 72) = v28;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016638C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 72), 9u);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 76) & 0x100) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 72), 9u);
  return result;
}

uint64_t sub_1016639E4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4D08;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101663A00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101663A24(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  char v5;
  int v6;

  *(_QWORD *)a1 = &off_1021C4D08;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_BYTE *)(a1 + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101663AB4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgRelOmegaRps", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ringSensorTrustModelMode", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "trustPencilRingSensorBool", *(_BYTE *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101663B64(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_49;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 28) = v22;
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_53;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_54;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_55:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_49:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_55;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101663E80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  return result;
}

uint64_t sub_101663F14(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4D40;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101663F2C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101663F50(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = &off_1021C4D40;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(double *)(a1 + 8) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_101663FA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tipForce", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101664008(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1016641E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_101664238(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4D78;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_101664250(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101664274(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)a1 = &off_1021C4D78;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    result = *(double *)(a2 + 48);
    v3 = 32;
    *(_WORD *)(a1 + 88) = 32;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 64) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 84) = v5;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v6;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_23:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_1016643C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeAngleConfidence", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "azimuthAngleConfidence", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pathFlags", *(_DWORD *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pathStage", *(_DWORD *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionConfidence", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x100) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101664554(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_85;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_84;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_85;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_91;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_90;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_89;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_90;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *(_DWORD *)(a1 + 80) = v31;
LABEL_91:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_80:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_91;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_91;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101664AA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  return result;
}

uint64_t sub_101664BF8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4DB0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101664C10(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101664C34(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)result = &off_1021C4DB0;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_DWORD *)(result + 24) = v6;
  }
  return result;
}

uint64_t sub_101664CA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "sampleTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "wrMets", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101664D34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 4u;
      v21 = *((_QWORD *)this + 1);
      v2 = *((_QWORD *)this + 2);
      v22 = *(_QWORD *)this;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        v28 = 0;
        v29 = 0;
        v25 = 0;
        if (v2 <= v21)
          v2 = *((_QWORD *)this + 1);
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_52;
          }
          v30 = v21++;
          v31 = *(_BYTE *)(v22 + v30);
          *((_QWORD *)this + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            break;
          v28 += 7;
          v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v25) = 0;
LABEL_51:
        v2 = v30 + 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v2 = v21 + 1;
          *((_QWORD *)this + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            break;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *(_DWORD *)(a1 + 24) = v25;
      goto LABEL_53;
    }
    if ((_DWORD)v20 == 2)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_101665000(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  return result;
}

uint64_t sub_101665078(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4DE8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101665090(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016650B4(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)result = &off_1021C4DE8;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 44) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v8;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_101665178(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "algorithmVersion", *(_DWORD *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sampleStopReason", *(_DWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101665268(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_76;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_76;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_76:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_80;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_81;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_92;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_85;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_86;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_92;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_90;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_91;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_92:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101665750(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 6u);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 6u);
  return result;
}

uint64_t sub_10166581C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4E20;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_101665834(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101665858(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  double result;
  char v6;

  *(_QWORD *)a1 = &off_1021C4E20;
  *(_DWORD *)(a1 + 84) = 0;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    v4 = *(_DWORD *)(a2 + 76);
    v3 = 512;
    *(_WORD *)(a1 + 84) = 512;
    *(_DWORD *)(a1 + 76) = v4;
    v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 64) = result;
    v2 = *(_WORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *(_BYTE *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 84) = v3;
  *(_BYTE *)(a1 + 80) = v6;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 56);
    *(_WORD *)(a1 + 84) = v3 | 0x40;
    *(double *)(a1 + 56) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 84) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  if ((*(_WORD *)(a2 + 84) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_1016659A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 84);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineAccuracy", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "flags", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "header", *(_DWORD *)(a1 + 76));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intensity", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intensityCalDelta", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pocketFlag", *(_BYTE *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 84) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "pocketProbability", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "ts", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101665B38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 84) |= 0x200u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_76;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_75:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_76;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *(_DWORD *)(a1 + 76) = v24;
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 84) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 3u:
              *(_WORD *)(a1 + 84) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 4u:
              *(_WORD *)(a1 + 84) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 5u:
              *(_WORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 6u:
              *(_WORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 7u:
              *(_WORD *)(a1 + 84) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 84) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 0xAu:
              *(_WORD *)(a1 + 84) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *(_WORD *)(a1 + 84) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_70:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_71:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_77;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_77:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101665FE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 84);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 76), 1u);
    v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 80), 8u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0xAu);
  if ((*(_WORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  return result;
}

double sub_10166613C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4E58;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101666160(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C4E58;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1016661B0(PB::Base *a1)
{
  sub_101666160(a1);
  operator delete();
}

uint64_t sub_1016661D4(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1021C4E58;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_101666264(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "position", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101666318(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v80[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v21 = 0;
        v22 = 0;
        v17 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v23 = v4 + 1;
          v24 = *(_BYTE *)(v14 + v4);
          *((_QWORD *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_21;
          v21 += 7;
          v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            v17 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v27 = v17 >> 3;
      if ((v17 >> 3) == 3)
        break;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 3;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_128;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 2 > v50)
                v50 = v51 >> 2;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_10025E6A0(v13, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[8 * v49];
              *(_QWORD *)v54 = 0;
              v47 = v54 + 8;
              while (v46 != v48)
              {
                v55 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *((_QWORD *)v54 - 1) = v55;
                v54 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_QWORD *)v46 = 0;
              v47 = v46 + 8;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v47 - 1) = *(_QWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_83;
        }
        v61 = *(char **)(a1 + 16);
        v60 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v61 >= v60)
        {
          v68 = (char *)*v12;
          v69 = (v61 - (_BYTE *)*v12) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
LABEL_128:
            sub_100259694();
          v71 = v60 - (_QWORD)v68;
          if (v71 >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)sub_10025E6A0(v13, v72);
            v68 = *(char **)(a1 + 8);
            v61 = *(char **)(a1 + 16);
          }
          else
          {
            v73 = 0;
          }
          v76 = &v73[8 * v69];
          *(_QWORD *)v76 = 0;
          v59 = v76 + 8;
          while (v61 != v68)
          {
            v77 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v76 - 1) = v77;
            v76 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v76;
          *(_QWORD *)(a1 + 16) = v59;
          *(_QWORD *)(a1 + 24) = &v73[8 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *(_QWORD *)v61 = 0;
          v59 = v61 + 8;
        }
        *(_QWORD *)(a1 + 16) = v59;
LABEL_114:
        v78 = *((_QWORD *)this + 1);
        if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v59 - 1) = *(_QWORD *)(*(_QWORD *)this + v78);
        goto LABEL_118;
      }
      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v28);
LABEL_118:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0)
        return 0;
LABEL_119:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0)
        return 0;
      v29 = *((_QWORD *)this + 1);
      v30 = *((_QWORD *)this + 2);
      while (v29 < v30 && !*((_BYTE *)this + 24))
      {
        v32 = *(char **)(a1 + 40);
        v31 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v32 >= v31)
        {
          v34 = (char *)*v10;
          v35 = (v32 - (_BYTE *)*v10) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            goto LABEL_127;
          v37 = v31 - (_QWORD)v34;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_10025E6A0(v11, v38);
            v34 = *(char **)(a1 + 32);
            v32 = *(char **)(a1 + 40);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = 0;
          v33 = v40 + 8;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          *(_QWORD *)(a1 + 32) = v40;
          *(_QWORD *)(a1 + 40) = v33;
          *(_QWORD *)(a1 + 48) = &v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v32 = 0;
          v33 = v32 + 8;
        }
        *(_QWORD *)(a1 + 40) = v33;
        v42 = *((_QWORD *)this + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v33 - 1) = *(_QWORD *)(*(_QWORD *)this + v42);
        v30 = *((_QWORD *)this + 2);
        v29 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v29;
      }
LABEL_83:
      PB::Reader::recallMark(this, v80);
      goto LABEL_119;
    }
    v58 = *(char **)(a1 + 40);
    v57 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v58 >= v57)
    {
      v62 = (char *)*v10;
      v63 = (v58 - (_BYTE *)*v10) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
LABEL_127:
        sub_100259694();
      v65 = v57 - (_QWORD)v62;
      if (v65 >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        v67 = (char *)sub_10025E6A0(v11, v66);
        v62 = *(char **)(a1 + 32);
        v58 = *(char **)(a1 + 40);
      }
      else
      {
        v67 = 0;
      }
      v74 = &v67[8 * v63];
      *(_QWORD *)v74 = 0;
      v59 = v74 + 8;
      while (v58 != v62)
      {
        v75 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *((_QWORD *)v74 - 1) = v75;
        v74 -= 8;
      }
      *(_QWORD *)(a1 + 32) = v74;
      *(_QWORD *)(a1 + 40) = v59;
      *(_QWORD *)(a1 + 48) = &v67[8 * v66];
      if (v62)
        operator delete(v62);
    }
    else
    {
      *(_QWORD *)v58 = 0;
      v59 = v58 + 8;
    }
    *(_QWORD *)(a1 + 40) = v59;
    goto LABEL_114;
  }
  return v6 == 0;
}

uint64_t sub_101666888(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9, 3u);
  }
  return result;
}

double sub_101666908(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4E90;
  *(_DWORD *)(a1 + 44) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_101666928(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021C4E90;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_101666980(PB::Base *a1)
{
  sub_101666928(a1);
  operator delete();
}

uint64_t sub_1016669A4(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_QWORD *)a1 = &off_1021C4E90;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(_QWORD *)(a2 + 32))
    operator new();
  if (a1 != a2)
    sub_10034F2B0((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v4 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_BYTE *)(a1 + 40) = v4;
  }
  return a1;
}

uint64_t sub_101666A74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "wasCorrected", *(_BYTE *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101666B1C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE v57[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 >= *((_QWORD *)this + 2))
        {
          v29 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v27 = v26 + 1;
          v28 = *(unsigned __int8 *)(*(_QWORD *)this + v26);
          *((_QWORD *)this + 1) = v27;
          v29 = v28 != 0;
        }
        *(_BYTE *)(a1 + 40) = v29;
      }
      else if ((_DWORD)v25 == 2)
      {
        if ((_DWORD)v24 == 2)
        {
          if ((PB::Reader::placeMark(this, v57, v24, a4) & 1) != 0)
            return 0;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          while (v30 < v31 && !*((_BYTE *)this + 24))
          {
            v33 = *(char **)(a1 + 16);
            v32 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v33 >= v32)
            {
              v35 = (char *)*v10;
              v36 = (v33 - (_BYTE *)*v10) >> 3;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 61)
                goto LABEL_86;
              v38 = v32 - (_QWORD)v35;
              if (v38 >> 2 > v37)
                v37 = v38 >> 2;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)sub_10025E6A0(v11, v39);
                v35 = *(char **)(a1 + 8);
                v33 = *(char **)(a1 + 16);
              }
              else
              {
                v40 = 0;
              }
              v41 = &v40[8 * v36];
              *(_QWORD *)v41 = 0;
              v34 = v41 + 8;
              while (v33 != v35)
              {
                v42 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *((_QWORD *)v41 - 1) = v42;
                v41 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v41;
              *(_QWORD *)(a1 + 16) = v34;
              *(_QWORD *)(a1 + 24) = &v40[8 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *(_QWORD *)v33 = 0;
              v34 = v33 + 8;
            }
            *(_QWORD *)(a1 + 16) = v34;
            v43 = *((_QWORD *)this + 1);
            if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }
            *(v34 - 1) = *(_QWORD *)(*(_QWORD *)this + v43);
            v31 = *((_QWORD *)this + 2);
            v30 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v30;
          }
          PB::Reader::recallMark(this, v57);
        }
        else
        {
          v45 = *(char **)(a1 + 16);
          v44 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v45 >= v44)
          {
            v47 = (char *)*v10;
            v48 = (v45 - (_BYTE *)*v10) >> 3;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61)
LABEL_86:
              sub_100259694();
            v50 = v44 - (_QWORD)v47;
            if (v50 >> 2 > v49)
              v49 = v50 >> 2;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)sub_10025E6A0(v11, v51);
              v47 = *(char **)(a1 + 8);
              v45 = *(char **)(a1 + 16);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[8 * v48];
            *(_QWORD *)v53 = 0;
            v46 = v53 + 8;
            while (v45 != v47)
            {
              v54 = *((_QWORD *)v45 - 1);
              v45 -= 8;
              *((_QWORD *)v53 - 1) = v54;
              v53 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v53;
            *(_QWORD *)(a1 + 16) = v46;
            *(_QWORD *)(a1 + 24) = &v52[8 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *(_QWORD *)v45 = 0;
            v46 = v45 + 8;
          }
          *(_QWORD *)(a1 + 16) = v46;
          v55 = *((_QWORD *)this + 1);
          if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *((_QWORD *)this + 2))
          {
            *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
        }
      }
      else
      {
        if ((_DWORD)v25 == 1)
          operator new();
        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0)
          return 0;
      }
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_101666F6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 2u);
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 40), 3u);
  return result;
}

double sub_101666FEC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C4EC8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

void sub_101667010(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C4EC8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_101667060(PB::Base *a1)
{
  sub_101667010(a1);
  operator delete();
}

uint64_t sub_101667084(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;

  *(_QWORD *)a1 = &off_1021C4EC8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 56) = v5;
  }
  return a1;
}

uint64_t sub_101667118(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "jointName", *(_DWORD *)(a1 + 56));
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotation", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1016671CC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE v92[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v21 = 0;
        v22 = 0;
        v17 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v23 = v4 + 1;
          v24 = *(_BYTE *)(v14 + v4);
          *((_QWORD *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_21;
          v21 += 7;
          v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            v17 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v27 = v17 >> 3;
      if ((v17 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        v42 = *((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        v44 = *(_QWORD *)this;
        if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v43)
        {
          v67 = 0;
          v68 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }
            v69 = v42 + 1;
            v70 = *(_BYTE *)(v44 + v42);
            *((_QWORD *)this + 1) = v69;
            v47 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v42 = v69;
            v20 = v68++ > 8;
            if (v20)
            {
LABEL_90:
              LODWORD(v47) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v47) = 0;
        }
        else
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (1)
          {
            v48 = v42 + 1;
            *((_QWORD *)this + 1) = v42 + 1;
            v49 = *(_BYTE *)(v44 + v42);
            v47 |= (unint64_t)(v49 & 0x7F) << v45;
            if ((v49 & 0x80) == 0)
              break;
            v45 += 7;
            v42 = v48;
            v20 = v46++ > 8;
            if (v20)
              goto LABEL_90;
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v47;
        goto LABEL_133;
      }
      if ((_DWORD)v27 == 2)
        break;
      if ((_DWORD)v27 == 1)
      {
        if ((_DWORD)v26 != 2)
        {
          v65 = *(char **)(a1 + 16);
          v64 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v65 >= v64)
          {
            v73 = (char *)*v12;
            v74 = (v65 - (_BYTE *)*v12) >> 3;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61)
LABEL_143:
              sub_100259694();
            v76 = v64 - (_QWORD)v73;
            if (v76 >> 2 > v75)
              v75 = v76 >> 2;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
              v77 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              v78 = (char *)sub_10025E6A0(v13, v77);
              v73 = *(char **)(a1 + 8);
              v65 = *(char **)(a1 + 16);
            }
            else
            {
              v78 = 0;
            }
            v85 = &v78[8 * v74];
            *(_QWORD *)v85 = 0;
            v66 = v85 + 8;
            while (v65 != v73)
            {
              v86 = *((_QWORD *)v65 - 1);
              v65 -= 8;
              *((_QWORD *)v85 - 1) = v86;
              v85 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v85;
            *(_QWORD *)(a1 + 16) = v66;
            *(_QWORD *)(a1 + 24) = &v78[8 * v77];
            if (v73)
              operator delete(v73);
          }
          else
          {
            *(_QWORD *)v65 = 0;
            v66 = v65 + 8;
          }
          *(_QWORD *)(a1 + 16) = v66;
LABEL_129:
          v89 = *((_QWORD *)this + 1);
          if (v89 <= 0xFFFFFFFFFFFFFFF7 && v89 + 8 <= *((_QWORD *)this + 2))
          {
            *(v66 - 1) = *(_QWORD *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0)
          return 0;
        v28 = *((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        while (v28 < v29 && !*((_BYTE *)this + 24))
        {
          v31 = *(char **)(a1 + 16);
          v30 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v31 >= v30)
          {
            v33 = (char *)*v12;
            v34 = (v31 - (_BYTE *)*v12) >> 3;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61)
              goto LABEL_143;
            v36 = v30 - (_QWORD)v33;
            if (v36 >> 2 > v35)
              v35 = v36 >> 2;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)sub_10025E6A0(v13, v37);
              v33 = *(char **)(a1 + 8);
              v31 = *(char **)(a1 + 16);
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[8 * v34];
            *(_QWORD *)v39 = 0;
            v32 = v39 + 8;
            while (v31 != v33)
            {
              v40 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *((_QWORD *)v39 - 1) = v40;
              v39 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v39;
            *(_QWORD *)(a1 + 16) = v32;
            *(_QWORD *)(a1 + 24) = &v38[8 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_QWORD *)v31 = 0;
            v32 = v31 + 8;
          }
          *(_QWORD *)(a1 + 16) = v32;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
          v29 = *((_QWORD *)this + 2);
          v28 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v28;
        }
LABEL_94:
        PB::Reader::recallMark(this, v92);
        goto LABEL_133;
      }
      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0)
        return 0;
LABEL_133:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0)
        return v6 == 0;
    }
    if ((_DWORD)v26 != 2)
    {
      v72 = *(char **)(a1 + 40);
      v71 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v72 >= v71)
      {
        v79 = (char *)*v10;
        v80 = (v72 - (_BYTE *)*v10) >> 3;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61)
LABEL_144:
          sub_100259694();
        v82 = v71 - (_QWORD)v79;
        if (v82 >> 2 > v81)
          v81 = v82 >> 2;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83)
        {
          v84 = (char *)sub_10025E6A0(v11, v83);
          v79 = *(char **)(a1 + 32);
          v72 = *(char **)(a1 + 40);
        }
        else
        {
          v84 = 0;
        }
        v87 = &v84[8 * v80];
        *(_QWORD *)v87 = 0;
        v66 = v87 + 8;
        while (v72 != v79)
        {
          v88 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          *((_QWORD *)v87 - 1) = v88;
          v87 -= 8;
        }
        *(_QWORD *)(a1 + 32) = v87;
        *(_QWORD *)(a1 + 40) = v66;
        *(_QWORD *)(a1 + 48) = &v84[8 * v83];
        if (v79)
          operator delete(v79);
      }
      else
      {
        *(_QWORD *)v72 = 0;
        v66 = v72 + 8;
      }
      *(_QWORD *)(a1 + 40) = v66;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0)
      return 0;
    v50 = *((_QWORD *)this + 1);
    v51 = *((_QWORD *)this + 2);
    while (v50 < v51 && !*((_BYTE *)this + 24))
    {
      v53 = *(char **)(a1 + 40);
      v52 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v53 >= v52)
      {
        v55 = (char *)*v10;
        v56 = (v53 - (_BYTE *)*v10) >> 3;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          goto LABEL_144;
        v58 = v52 - (_QWORD)v55;
        if (v58 >> 2 > v57)
          v57 = v58 >> 2;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)sub_10025E6A0(v11, v59);
          v55 = *(char **)(a1 + 32);
          v53 = *(char **)(a1 + 40);
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[8 * v56];
        *(_QWORD *)v61 = 0;
        v54 = v61 + 8;
        while (v53 != v55)
        {
          v62 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v61 - 1) = v62;
          v61 -= 8;
        }
        *(_QWORD *)(a1 + 32) = v61;
        *(_QWORD *)(a1 + 40) = v54;
        *(_QWORD *)(a1 + 48) = &v60[8 * v59];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_QWORD *)v53 = 0;
        v54 = v53 + 8;
      }
      *(_QWORD *)(a1 + 40) = v54;
      v63 = *((_QWORD *)this + 1);
      if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v54 - 1) = *(_QWORD *)(*(_QWORD *)this + v63);
      v51 = *((_QWORD *)this + 2);
      v50 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v50;
    }
    goto LABEL_94;
  }
  return v6 == 0;
}

uint64_t sub_1016677E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 1u);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 2u);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 3u);
  return result;
}

_QWORD *sub_101667874(_QWORD *result)
{
  *result = off_1021C4F00;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_101667888(void **a1)
{
  void **v2;

  *a1 = off_1021C4F00;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1016678D0(void **a1)
{
  void **v2;

  *a1 = off_1021C4F00;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_10166792C(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C4F00;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_101667990();
  return result;
}

void sub_101667990()
{
  operator new();
}

void sub_101667AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101667AE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101667B50(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_101667CF0();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_101667CF0()
{
  operator new();
}

void sub_101667E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101667E54(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 1u))
    v5 = *v2++;
  return result;
}

uint64_t sub_101667E9C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4F38;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_101667EB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101667ED8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_1021C4F38;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_101667F04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    PB::TextFormatter::format(this, "userActivity", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101667F50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101668184(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
  return result;
}

uint64_t sub_1016681A4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4F70;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1016681BC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016681E0(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = &off_1021C4F70;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 2;
    *(double *)(a1 + 16) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_101668230(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101668298(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_101668470(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_1016684C8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4FA8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1016684E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101668504(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)result = &off_1021C4FA8;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 40) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 40) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_16:
    v10 = *(_BYTE *)(a2 + 37);
    *(_BYTE *)(result + 40) = v3 | 0x40;
    *(_BYTE *)(result + 37) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_BYTE *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 36) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_1016685E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "inlierCount", *(_DWORD *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isOutlierCurrentSample", *(_BYTE *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "isValidMeasurement", *(_BYTE *)(a1 + 37));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "range", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "rangeShift", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "rangeFrequency", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016686F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_61;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_66;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_65;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_66;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_67:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_60:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_61:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 36) = v28;
              goto LABEL_67;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 37) = v30;
              goto LABEL_67;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_67;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101668ACC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 37), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 36), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 37), 7u);
  return result;
}

uint64_t sub_101668BB4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C4FE0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101668BCC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101668BF0(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021C4FE0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_101668C40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isStart", *(_BYTE *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101668CA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101668E8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_101668EE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5018;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_101668EFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101668F20(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  int v6;
  char v7;

  *(_QWORD *)a1 = &off_1021C5018;
  *(_DWORD *)(a1 + 92) = 0;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    result = *(double *)(a2 + 56);
    v3 = 64;
    *(_WORD *)(a1 + 92) = 64;
    *(double *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v5 = *(_BYTE *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 92) = v3;
  *(_BYTE *)(a1 + 88) = v5;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 84) = v6;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_28:
    result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 92) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_27:
  v7 = *(_BYTE *)(a2 + 89);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 92) = v3;
  *(_BYTE *)(a1 + 89) = v7;
  if ((*(_WORD *)(a2 + 92) & 0x20) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_1016690A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "distanceFromParticleFilter", *(float *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalAngle", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "horizontalAngleUncertainty", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "horizontalAngleUncertaintyUnfiltered", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isConverged", *(_BYTE *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isDistanceValid", *(_BYTE *)(a1 + 89));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "revokeReason", *(_DWORD *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "velocityX", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "velocityY", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101669278(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  v33 = v23++;
                  v34 = *(_BYTE *)(v24 + v33);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 84) = v27;
LABEL_84:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_78:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_84;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016697A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 8u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 88), 9u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xDu);
  }
LABEL_26:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0xCu);
  if ((*(_WORD *)(v3 + 92) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xDu);
  return result;
}

uint64_t sub_101669930(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5050;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101669948(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10166996C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C5050;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(_BYTE *)(a2 + 44) & 8) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 44) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_101669A68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "noiseVelocityX", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "noiseVelocityY", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "speedUncertainty", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101669B98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_49:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_50:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101669EDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 7u);
  if ((*(_BYTE *)(v3 + 44) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  return result;
}

uint64_t sub_101669FE0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5088;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_101669FF8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10166A01C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)result = &off_1021C5088;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_WORD *)(result + 60) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 60) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(_QWORD *)(result + 48) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 24) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 58) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_20:
    v12 = *(_BYTE *)(a2 + 57);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(_BYTE *)(result + 57) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_BYTE *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 56) = v11;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_10166A134(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "fractionAboveThreshold", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalDistance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isAboveBelow", *(_BYTE *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isAboveBelowMessageShowing", *(_BYTE *)(a1 + 57));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isConverged", *(_BYTE *)(a1 + 58));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "likelihoodAboveThreshold", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
    if ((*(_WORD *)(a1 + 60) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x20) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "verticalDistance", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166A284(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 60) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 60) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 60) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_43:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 60) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 58) = v24;
          break;
        case 8u:
          *(_WORD *)(a1 + 60) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 56) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 60) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 57) = v26;
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166A61C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 58), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 57), 9u);
  }
LABEL_18:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 8u);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 57), 9u);
  return result;
}

uint64_t sub_10166A73C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C50C0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_10166A754(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10166A778(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;

  *(_QWORD *)a1 = &off_1021C50C0;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 80) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 80) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_WORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      return result;
LABEL_32:
    result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 80) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_31:
  v5 = *(_BYTE *)(a2 + 76);
  v3 |= 0x4000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v5;
  if ((*(_WORD *)(a2 + 80) & 2) != 0)
    goto LABEL_32;
  return result;
}

uint64_t sub_10166A938(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "qStartW", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "qStartX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "qStartY", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "qStartZ", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "qStopW", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "qStopX", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "qStopY", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "qStopZ", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "rBoresightX", *(float *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rBoresightY", *(float *)(a1 + 68));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rBoresightZ", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 24));
    if ((*(_WORD *)(a1 + 80) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 0x4000) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "useForwardPrediction", *(_BYTE *)(a1 + 76));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166AB48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 80) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_65;
        case 2u:
          *(_WORD *)(a1 + 80) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_65;
        case 3u:
          *(_WORD *)(a1 + 80) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 4u:
          *(_WORD *)(a1 + 80) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 5u:
          *(_WORD *)(a1 + 80) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 6u:
          *(_WORD *)(a1 + 80) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 7u:
          *(_WORD *)(a1 + 80) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 8u:
          *(_WORD *)(a1 + 80) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 9u:
          *(_WORD *)(a1 + 80) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xAu:
          *(_WORD *)(a1 + 80) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xBu:
          *(_WORD *)(a1 + 80) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xCu:
          *(_WORD *)(a1 + 80) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xDu:
          *(_WORD *)(a1 + 80) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_72:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *(_WORD *)(a1 + 80) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 76) = v22;
          break;
        case 0xFu:
          *(_WORD *)(a1 + 80) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_68:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_65:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_73:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166B020(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 3u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 9u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0xAu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xBu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xCu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0xDu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xFu);
  }
LABEL_30:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 0xEu);
  if ((*(_WORD *)(v3 + 80) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xFu);
  return result;
}

uint64_t sub_10166B1E8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C50F8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10166B200(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10166B224(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C50F8;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 4;
    *(_DWORD *)(a1 + 20) = v4;
  }
  return *(float *)&v4;
}

uint64_t sub_10166B294(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166B324(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 4;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 24) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 8;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 24) |= 4u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_10166B544(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 20), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  return result;
}

uint64_t sub_10166B5BC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5130;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10166B5D4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10166B5F8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)a1 = &off_1021C5130;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 = 32;
    *(_BYTE *)(a1 + 32) = 32;
    *(float *)(a1 + 28) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(float *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 32) = v3;
  *(float *)(a1 + 8) = result;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      return result;
LABEL_14:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 4;
    *(float *)(a1 + 16) = result;
    return result;
  }
LABEL_13:
  result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(a1 + 32) = v3;
  *(float *)(a1 + 12) = result;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_10166B6BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inertialX", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialY", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "inertialZ", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "medTocFactoryTemp", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "maxTemp", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "medianToc", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166B7AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166BA78(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 8), 4u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 6u);
  return result;
}

_QWORD *sub_10166BB44(_QWORD *result)
{
  *result = off_1021C5168;
  result[1] = 0;
  return result;
}

void sub_10166BB54(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5168;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10166BB94(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5168;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10166BBE8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C5168;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10166BC64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166BCB4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166BE88(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10166BEA4(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_10166BF14(_QWORD *result)
{
  *result = off_1021C51A0;
  result[1] = 0;
  return result;
}

void sub_10166BF24(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C51A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10166BF64(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C51A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10166BFB8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C51A0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10166C034(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166C084(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166C258(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10166C274(uint64_t result)
{
  *(_QWORD *)result = off_1021C51D8;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10166C28C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C51D8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10166C2D0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C51D8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_10166C328(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = off_1021C51D8;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  if (*(_QWORD *)(a2 + 16))
    operator new();
  return result;
}

float sub_10166C404(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)a1 = &off_1021C5210;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_10166C458(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166C4C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166C6F8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5210;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10166C70C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(this, v4, 2u);
  return result;
}

void sub_10166C764(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10166C788(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166C7F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166CA7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  return result;
}

_QWORD *sub_10166CAD4(_QWORD *result)
{
  *result = off_1021C5248;
  result[1] = 0;
  return result;
}

void sub_10166CAE4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5248;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10166CB24(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5248;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10166CB78(_QWORD *result, uint64_t a2)
{
  *result = off_1021C5248;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10166CBF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166CC44(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166CE18(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_10166CE34(_QWORD *result)
{
  *result = off_1021C5280;
  result[1] = 0;
  return result;
}

void sub_10166CE44(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5280;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10166CE84(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5280;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10166CED8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C5280;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10166CF54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166CFA4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166D178(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10166D194(uint64_t result)
{
  *(_QWORD *)result = &off_1021C52B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10166D1B0(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021C52B8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10166D208(PB::Base *a1)
{
  sub_10166D1B0(a1);
  operator delete();
}

uint64_t sub_10166D22C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1021C52B8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a2 + 40))
    operator new();
  if (a1 != a2)
    sub_10034F2B0((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_10166D2FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "originalTimestamp", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10166D39C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE v54[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v21 = v4 + 1;
          v22 = *(_BYTE *)(v12 + v4);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if ((_DWORD)v24 != 2)
        {
          v42 = *(char **)(a1 + 16);
          v41 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v42 >= v41)
          {
            v44 = (char *)*v10;
            v45 = (v42 - (_BYTE *)*v10) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
LABEL_86:
              sub_100259694();
            v47 = v41 - (_QWORD)v44;
            if (v47 >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_10025E6A0(v11, v48);
              v44 = *(char **)(a1 + 8);
              v42 = *(char **)(a1 + 16);
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[8 * v45];
            *(_QWORD *)v50 = 0;
            v43 = v50 + 8;
            while (v42 != v44)
            {
              v51 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *((_QWORD *)v50 - 1) = v51;
              v50 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v50;
            *(_QWORD *)(a1 + 16) = v43;
            *(_QWORD *)(a1 + 24) = &v49[8 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_QWORD *)v42 = 0;
            v43 = v42 + 8;
          }
          *(_QWORD *)(a1 + 16) = v43;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
          {
LABEL_75:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_78;
          }
          *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
          goto LABEL_77;
        }
        if ((PB::Reader::placeMark(this, v54, v24, a4) & 1) != 0)
          return 0;
        v27 = *((_QWORD *)this + 1);
        v28 = *((_QWORD *)this + 2);
        while (v27 < v28 && !*((_BYTE *)this + 24))
        {
          v30 = *(char **)(a1 + 16);
          v29 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v30 >= v29)
          {
            v32 = (char *)*v10;
            v33 = (v30 - (_BYTE *)*v10) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_86;
            v35 = v29 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_10025E6A0(v11, v36);
              v32 = *(char **)(a1 + 8);
              v30 = *(char **)(a1 + 16);
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = 0;
            v31 = v38 + 8;
            while (v30 != v32)
            {
              v39 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v38 - 1) = v39;
              v38 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v38;
            *(_QWORD *)(a1 + 16) = v31;
            *(_QWORD *)(a1 + 24) = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v30 = 0;
            v31 = v30 + 8;
          }
          *(_QWORD *)(a1 + 16) = v31;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
          v28 = *((_QWORD *)this + 2);
          v27 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v27;
        }
        PB::Reader::recallMark(this, v54);
      }
      else
      {
        if ((_DWORD)v25 == 1)
          operator new();
        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0)
          return 0;
      }
LABEL_78:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v26 = *((_QWORD *)this + 1);
    if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
      goto LABEL_75;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_77:
    *((_QWORD *)this + 1) += 8;
    goto LABEL_78;
  }
  return v6 == 0;
}

uint64_t sub_10166D7E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 40);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 2u);
  }
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  return result;
}

uint64_t sub_10166D860(uint64_t result)
{
  *(_QWORD *)result = &off_1021C52F0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10166D878(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10166D89C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C52F0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10166D8EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectionMask", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166D954(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10166DBE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10166DC38(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5328;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_10166DC50(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10166DC74(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  char v6;

  *(_QWORD *)a1 = &off_1021C5328;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 88) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 44);
    v3 |= 0x100u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 44) = result;
    v2 = *(_DWORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *(float *)(a2 + 52);
    v3 |= 0x400u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 52) = result;
    v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v6 = *(_BYTE *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 84) = v6;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_40:
    result = *(float *)(a2 + 48);
    *(_DWORD *)(a1 + 88) = v3 | 0x200;
    *(float *)(a1 + 48) = result;
    return result;
  }
LABEL_39:
  result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 88) & 0x200) != 0)
    goto LABEL_40;
  return result;
}

uint64_t sub_10166DEA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "baselineError", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "covariancePostMeasurement00", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "covariancePostMeasurement01", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "covariancePostMeasurement11", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "covariancePreMeasurement00", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "covariancePreMeasurement01", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "covariancePreMeasurement11", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "estimate", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "factoryXTalk", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "gain", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "measurement", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "possibleObstructed", *(_BYTE *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "proxBufferMax", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "proxBufferVariance", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "sensitivityCal", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "temperatureCalError", *(float *)(a1 + 80));
    if ((*(_DWORD *)(a1 + 88) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166E134(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 88) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_103:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_104;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_104:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_95;
            case 2u:
              *(_DWORD *)(a1 + 88) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_DWORD *)(a1 + 88) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_DWORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_DWORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_DWORD *)(a1 + 88) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 7u:
              *(_DWORD *)(a1 + 88) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 8u:
              *(_DWORD *)(a1 + 88) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 84) = v28;
              goto LABEL_95;
            case 9u:
              *(_DWORD *)(a1 + 88) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_DWORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_DWORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xCu:
              *(_DWORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xDu:
              *(_DWORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xEu:
              *(_DWORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xFu:
              *(_DWORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x11u:
              *(_DWORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x12u:
              *(_DWORD *)(a1 + 88) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x13u:
              *(_DWORD *)(a1 + 88) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_94:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10166E798(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44), 2u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 5u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 84), 8u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 9u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 0xBu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0xFu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0x10u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0x11u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x13u);
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x12u);
  if ((*(_DWORD *)(v3 + 88) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x13u);
  return result;
}

double sub_10166E9D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C5360;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10166E9F4(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C5360;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10166EA44(PB::Base *a1)
{
  sub_10166E9F4(a1);
  operator delete();
}

uint64_t sub_10166EA68(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v11;

  *(_QWORD *)a1 = &off_1021C5360;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_BYTE *)(a2 + 72);
  if ((v5 & 2) != 0)
  {
    v7 = *(_DWORD *)(a2 + 60);
    v6 = 2;
    *(_BYTE *)(a1 + 72) = 2;
    *(_DWORD *)(a1 + 60) = v7;
    v5 = *(_BYTE *)(a2 + 72);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 56);
    v6 |= 1u;
    *(_BYTE *)(a1 + 72) = v6;
    *(_DWORD *)(a1 + 56) = v8;
    v5 = *(_BYTE *)(a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *(_DWORD *)(a2 + 64);
  v6 |= 4u;
  *(_BYTE *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 64) = v11;
  if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = v6 | 8;
    *(_DWORD *)(a1 + 68) = v9;
  }
LABEL_9:
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_10166EB54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bC150RXAVE", *(float *)(a1 + 56));
    v5 = *(_BYTE *)(a1 + 72);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "gC0RXAVE", *(float *)(a1 + 60));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "ntcRamp", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "rxXT", v11);
  }
  v12 = *(_BYTE *)(a1 + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(this, "versionPxCL", *(_DWORD *)(a1 + 64));
    v12 = *(_BYTE *)(a1 + 72);
  }
  if ((v12 & 8) != 0)
    PB::TextFormatter::format(this, "versionPxTC", *(_DWORD *)(a1 + 68));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10166EC5C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  unint64_t v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  int v99;
  char *v100;
  int v101;
  unint64_t v102;
  _BYTE v105[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_154;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_154;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v28);
LABEL_31:
          *((_QWORD *)this + 1) += 4;
          goto LABEL_156;
        case 3u:
          *(_BYTE *)(a1 + 72) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_134;
              v32 += 7;
              v29 = v35;
              v20 = v33++ > 8;
            }
            while (!v20);
LABEL_100:
            LODWORD(v34) = 0;
            goto LABEL_134;
          }
          v73 = 0;
          v74 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v75 = v29 + 1;
              v76 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v75;
              v34 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                v29 = v75;
                v20 = v74++ > 8;
                if (v20)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_134:
          *(_DWORD *)(a1 + 64) = v34;
          goto LABEL_156;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 8u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_137;
              v40 += 7;
              v37 = v43;
              v20 = v41++ > 8;
            }
            while (!v20);
LABEL_107:
            LODWORD(v42) = 0;
            goto LABEL_137;
          }
          v77 = 0;
          v78 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v79 = v37 + 1;
              v80 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v79;
              v42 |= (unint64_t)(v80 & 0x7F) << v77;
              if (v80 < 0)
              {
                v77 += 7;
                v37 = v79;
                v20 = v78++ > 8;
                if (v20)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_137:
          *(_DWORD *)(a1 + 68) = v42;
          goto LABEL_156;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v82 = *(char **)(a1 + 16);
            v81 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v82 >= v81)
            {
              v86 = (char *)*v12;
              v87 = (v82 - (_BYTE *)*v12) >> 2;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62)
LABEL_166:
                sub_100259694();
              v89 = v81 - (_QWORD)v86;
              if (v89 >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)sub_100260634(v13, v90);
                v86 = *(char **)(a1 + 8);
                v82 = *(char **)(a1 + 16);
              }
              else
              {
                v91 = 0;
              }
              v98 = &v91[4 * v87];
              *(_DWORD *)v98 = 0;
              v83 = v98 + 4;
              while (v82 != v86)
              {
                v99 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v98;
              *(_QWORD *)(a1 + 16) = v83;
              *(_QWORD *)(a1 + 24) = &v91[4 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_DWORD *)v82 = 0;
              v83 = v82 + 4;
            }
            *(_QWORD *)(a1 + 16) = v83;
            goto LABEL_152;
          }
          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
            return 0;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          while (v45 < v46 && !*((_BYTE *)this + 24))
          {
            v48 = *(char **)(a1 + 16);
            v47 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v48 >= v47)
            {
              v50 = (char *)*v12;
              v51 = (v48 - (_BYTE *)*v12) >> 2;
              v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 62)
                goto LABEL_166;
              v53 = v47 - (_QWORD)v50;
              if (v53 >> 1 > v52)
                v52 = v53 >> 1;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                v54 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                v55 = (char *)sub_100260634(v13, v54);
                v50 = *(char **)(a1 + 8);
                v48 = *(char **)(a1 + 16);
              }
              else
              {
                v55 = 0;
              }
              v56 = &v55[4 * v51];
              *(_DWORD *)v56 = 0;
              v49 = v56 + 4;
              while (v48 != v50)
              {
                v57 = *((_DWORD *)v48 - 1);
                v48 -= 4;
                *((_DWORD *)v56 - 1) = v57;
                v56 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v56;
              *(_QWORD *)(a1 + 16) = v49;
              *(_QWORD *)(a1 + 24) = &v55[4 * v54];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *(_DWORD *)v48 = 0;
              v49 = v48 + 4;
            }
            *(_QWORD *)(a1 + 16) = v49;
            v58 = *((_QWORD *)this + 1);
            if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
              goto LABEL_112;
            *(v49 - 1) = *(_DWORD *)(*(_QWORD *)this + v58);
            v46 = *((_QWORD *)this + 2);
            v45 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v45;
          }
          goto LABEL_113;
        case 6u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
              return 0;
            v59 = *((_QWORD *)this + 1);
            v60 = *((_QWORD *)this + 2);
            while (v59 < v60 && !*((_BYTE *)this + 24))
            {
              v62 = *(char **)(a1 + 40);
              v61 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v62 >= v61)
              {
                v64 = (char *)*v10;
                v65 = (v62 - (_BYTE *)*v10) >> 2;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 62)
                  goto LABEL_167;
                v67 = v61 - (_QWORD)v64;
                if (v67 >> 1 > v66)
                  v66 = v67 >> 1;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
                  v68 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v68 = v66;
                if (v68)
                {
                  v69 = (char *)sub_100260634(v11, v68);
                  v64 = *(char **)(a1 + 32);
                  v62 = *(char **)(a1 + 40);
                }
                else
                {
                  v69 = 0;
                }
                v70 = &v69[4 * v65];
                *(_DWORD *)v70 = 0;
                v63 = v70 + 4;
                while (v62 != v64)
                {
                  v71 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *((_DWORD *)v70 - 1) = v71;
                  v70 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v70;
                *(_QWORD *)(a1 + 40) = v63;
                *(_QWORD *)(a1 + 48) = &v69[4 * v68];
                if (v64)
                  operator delete(v64);
              }
              else
              {
                *(_DWORD *)v62 = 0;
                v63 = v62 + 4;
              }
              *(_QWORD *)(a1 + 40) = v63;
              v72 = *((_QWORD *)this + 1);
              if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v63 - 1) = *(_DWORD *)(*(_QWORD *)this + v72);
              v60 = *((_QWORD *)this + 2);
              v59 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v59;
            }
LABEL_113:
            PB::Reader::recallMark(this, v105);
          }
          else
          {
            v85 = *(char **)(a1 + 40);
            v84 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v85 >= v84)
            {
              v92 = (char *)*v10;
              v93 = (v85 - (_BYTE *)*v10) >> 2;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62)
LABEL_167:
                sub_100259694();
              v95 = v84 - (_QWORD)v92;
              if (v95 >> 1 > v94)
                v94 = v95 >> 1;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                v96 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (v96)
              {
                v97 = (char *)sub_100260634(v11, v96);
                v92 = *(char **)(a1 + 32);
                v85 = *(char **)(a1 + 40);
              }
              else
              {
                v97 = 0;
              }
              v100 = &v97[4 * v93];
              *(_DWORD *)v100 = 0;
              v83 = v100 + 4;
              while (v85 != v92)
              {
                v101 = *((_DWORD *)v85 - 1);
                v85 -= 4;
                *((_DWORD *)v100 - 1) = v101;
                v100 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v100;
              *(_QWORD *)(a1 + 40) = v83;
              *(_QWORD *)(a1 + 48) = &v97[4 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_DWORD *)v85 = 0;
              v83 = v85 + 4;
            }
            *(_QWORD *)(a1 + 40) = v83;
LABEL_152:
            v102 = *((_QWORD *)this + 1);
            if (v102 <= 0xFFFFFFFFFFFFFFFBLL && v102 + 4 <= *((_QWORD *)this + 2))
            {
              *(v83 - 1) = *(_DWORD *)(*(_QWORD *)this + v102);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_154:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_156:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10166F3F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 72);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 60), 1u);
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_15:
      result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 3u);
      if ((*(_BYTE *)(v3 + 72) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
    goto LABEL_15;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 5u);
  }
  v9 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10, 6u);
  }
  return result;
}

uint64_t sub_10166F4C8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5398;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10166F4E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10166F504(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;

  *(_QWORD *)result = &off_1021C5398;
  *(_DWORD *)(result + 48) = 0;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v8;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v9;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 20) = v10;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v11;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      return result;
LABEL_22:
    v13 = *(_BYTE *)(a2 + 44);
    *(_WORD *)(result + 48) = v3 | 0x100;
    *(_BYTE *)(result + 44) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_BYTE *)(a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(result + 48) = v3;
  *(_BYTE *)(result + 45) = v12;
  if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_10166F638(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineConfidence", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intensityCalDelta", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pocketFlag", *(_BYTE *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "scanFlags", *(_BYTE *)(a1 + 45));
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rxNtcC", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 1) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10166F7A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_72:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_73;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_73:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 4u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 5u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 7u:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_68:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 44) = v30;
              goto LABEL_74;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_74:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10166FC20(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xAu);
  }
LABEL_20:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 45), 9u);
  if ((*(_WORD *)(v3 + 48) & 0x100) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xAu);
  return result;
}

_QWORD *sub_10166FD5C(_QWORD *result)
{
  *result = &off_1021C53D0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_10166FD70(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C53D0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10166FDB0(PB::Base *a1)
{
  sub_10166FD70(a1);
  operator delete();
}

_QWORD *sub_10166FDD4(_QWORD *a1, uint64_t a2)
{
  char *v3;

  *a1 = &off_1021C53D0;
  a1[1] = 0;
  v3 = (char *)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  if (a1 != (_QWORD *)a2)
    sub_1002A3054(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_10166FE2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int *v5;
  int *v6;
  int v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(int **)(a1 + 8);
  v6 = *(int **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "volts", v7);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10166FE90(_QWORD *a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  _BYTE v72[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 1);
    v11 = a1 + 3;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v37 = v14++ > 8;
        if (v37)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if ((_DWORD)v23 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      if ((v15 >> 3) == 1)
      {
        if ((_DWORD)v23 == 2)
        {
          if ((PB::Reader::placeMark(this, v72, v23, a4) & 1) != 0)
            return 0;
          if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
          {
            v24 = (char *)a1[2];
            do
            {
              if ((unint64_t)v24 >= *v11)
              {
                v25 = (char *)*v10;
                v26 = (v24 - (_BYTE *)*v10) >> 2;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62)
                  goto LABEL_118;
                v28 = *v11 - (_QWORD)v25;
                if (v28 >> 1 > v27)
                  v27 = v28 >> 1;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                  v29 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v30 = (char *)sub_100260634((uint64_t)v11, v29);
                  v25 = (char *)a1[1];
                  v24 = (char *)a1[2];
                }
                else
                {
                  v30 = 0;
                }
                v31 = &v30[4 * v26];
                *(_DWORD *)v31 = 0;
                v32 = v31 + 4;
                while (v24 != v25)
                {
                  v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *((_DWORD *)v31 - 1) = v33;
                  v31 -= 4;
                }
                a1[1] = v31;
                a1[2] = v32;
                a1[3] = &v30[4 * v29];
                if (v25)
                  operator delete(v25);
                v24 = v32;
              }
              else
              {
                *(_DWORD *)v24 = 0;
                v24 += 4;
              }
              a1[2] = v24;
              v35 = *((_QWORD *)this + 1);
              v34 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              v37 = v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v34;
              if (!v37)
              {
                v43 = 0;
                v44 = 0;
                v45 = 0;
                while (1)
                {
                  v46 = v35 + 1;
                  *((_QWORD *)this + 1) = v35 + 1;
                  v47 = *(_BYTE *)(v36 + v35);
                  v45 |= (unint64_t)(v47 & 0x7F) << v43;
                  if ((v47 & 0x80) == 0)
                    goto LABEL_65;
                  v43 += 7;
                  v35 = v46;
                  v37 = v44++ > 8;
                  if (v37)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_65;
                  }
                }
              }
              v38 = 0;
              v39 = 0;
              v45 = 0;
              if (v34 <= v35)
                v40 = *((_QWORD *)this + 1);
              else
                v40 = *((_QWORD *)this + 2);
              while (1)
              {
                if (v40 == v35)
                {
                  *((_BYTE *)this + 24) = 1;
                  *((_DWORD *)v24 - 1) = 0;
                  goto LABEL_81;
                }
                v41 = v35++;
                v42 = *(_BYTE *)(v36 + v41);
                *((_QWORD *)this + 1) = v35;
                v45 |= (unint64_t)(v42 & 0x7F) << v38;
                if ((v42 & 0x80) == 0)
                  break;
                v38 += 7;
                v37 = v39++ > 8;
                if (v37)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_64;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v45) = 0;
LABEL_64:
              v46 = v41 + 1;
LABEL_65:
              *((_DWORD *)v24 - 1) = v45;
            }
            while (v46 < v34 && !*((_BYTE *)this + 24));
          }
LABEL_81:
          PB::Reader::recallMark(this, v72);
        }
        else
        {
          v49 = (char *)a1[2];
          v48 = a1[3];
          if ((unint64_t)v49 >= v48)
          {
            v51 = (char *)*v10;
            v52 = (v49 - (_BYTE *)*v10) >> 2;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62)
LABEL_118:
              sub_100259694();
            v54 = v48 - (_QWORD)v51;
            if (v54 >> 1 > v53)
              v53 = v54 >> 1;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              v56 = (char *)sub_100260634((uint64_t)v11, v55);
              v51 = (char *)a1[1];
              v49 = (char *)a1[2];
            }
            else
            {
              v56 = 0;
            }
            v57 = &v56[4 * v52];
            *(_DWORD *)v57 = 0;
            v50 = v57 + 4;
            while (v49 != v51)
            {
              v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v57 - 1) = v58;
              v57 -= 4;
            }
            a1[1] = v57;
            a1[2] = v50;
            a1[3] = &v56[4 * v55];
            if (v51)
              operator delete(v51);
          }
          else
          {
            *(_DWORD *)v49 = 0;
            v50 = v49 + 4;
          }
          a1[2] = v50;
          v59 = *((_QWORD *)this + 1);
          v60 = *((_QWORD *)this + 2);
          v61 = *(_QWORD *)this;
          v62 = 0;
          v63 = 0;
          if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v60)
          {
            v67 = 0;
            if (v60 <= v59)
              v60 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v60 == v59)
              {
                LODWORD(v67) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_107;
              }
              v65 = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)this + 1) = v65;
              v67 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                break;
              v62 += 7;
              v59 = v65;
              v37 = v63++ > 8;
              if (v37)
              {
LABEL_103:
                LODWORD(v67) = 0;
                goto LABEL_107;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v67) = 0;
          }
          else
          {
            v67 = 0;
            while (1)
            {
              v68 = v59 + 1;
              *((_QWORD *)this + 1) = v59 + 1;
              v69 = *(_BYTE *)(v61 + v59);
              v67 |= (unint64_t)(v69 & 0x7F) << v62;
              if ((v69 & 0x80) == 0)
                break;
              v62 += 7;
              v59 = v68;
              v37 = v63++ > 8;
              if (v37)
                goto LABEL_103;
            }
          }
LABEL_107:
          *(v50 - 1) = v67;
        }
      }
      else if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
      {
        return 0;
      }
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0)
        return v6 == 0;
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v20 = v4 + 1;
      v21 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v4 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10167033C(uint64_t result, PB::Writer *this)
{
  int *v2;
  int *i;
  int v5;

  v2 = *(int **)(result + 8);
  for (i = *(int **)(result + 16); v2 != i; result = PB::Writer::writeVarInt(this, v5, 1u))
    v5 = *v2++;
  return result;
}

uint64_t sub_101670384(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5408;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101670398(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021C5408;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_1016703D8(PB::Base *a1)
{
  sub_101670398(a1);
  operator delete();
}

uint64_t sub_1016703FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_1021C5408;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) |= 1u;
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1016704C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "name");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "value", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167052C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101670730(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    result = PB::Writer::write(this, v4, 1);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  return result;
}

_QWORD *sub_101670784(_QWORD *result)
{
  *result = &off_1021C5440;
  *(_QWORD *)((char *)result + 188) = 0;
  return result;
}

void sub_10167079C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016707C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;

  *(_QWORD *)result = &off_1021C5440;
  *(_QWORD *)(result + 188) = 0;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_QWORD *)(result + 188) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x800000uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_DWORD *)(result + 104) = v5;
    v2 = *(_QWORD *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_DWORD *)(result + 108) = v6;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 112) = v7;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_58;
  }
LABEL_57:
  v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 24) = v8;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_59;
  }
LABEL_58:
  v9 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 28) = v9;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_60;
  }
LABEL_59:
  v10 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 32) = v10;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_61;
  }
LABEL_60:
  v11 = *(_DWORD *)(a2 + 132);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 132) = v11;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_62;
  }
LABEL_61:
  v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 48) = v12;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_63;
  }
LABEL_62:
  v13 = *(_DWORD *)(a2 + 96);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 96) = v13;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_64;
  }
LABEL_63:
  v14 = *(_DWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 16) = v14;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_65;
  }
LABEL_64:
  v15 = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 116) = v15;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_66;
  }
LABEL_65:
  v16 = *(_DWORD *)(a2 + 120);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 120) = v16;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_67;
  }
LABEL_66:
  v17 = *(_DWORD *)(a2 + 124);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 124) = v17;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_68;
  }
LABEL_67:
  v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 36) = v18;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_69;
  }
LABEL_68:
  v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 40) = v19;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_70;
  }
LABEL_69:
  v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 44) = v20;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_71;
  }
LABEL_70:
  v21 = *(_DWORD *)(a2 + 136);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 136) = v21;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_72;
  }
LABEL_71:
  v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 52) = v22;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_73;
  }
LABEL_72:
  v23 = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 100) = v23;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_74;
  }
LABEL_73:
  v24 = *(_DWORD *)(a2 + 20);
  v3 |= 4uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 20) = v24;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0)
      goto LABEL_27;
    goto LABEL_75;
  }
LABEL_74:
  v25 = *(_DWORD *)(a2 + 148);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 148) = v25;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_76;
  }
LABEL_75:
  v26 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 68) = v26;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_77;
  }
LABEL_76:
  v27 = *(_DWORD *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 160) = v27;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_30;
    goto LABEL_78;
  }
LABEL_77:
  v28 = *(_DWORD *)(a2 + 80);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 80) = v28;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_79;
  }
LABEL_78:
  v29 = *(_DWORD *)(a2 + 152);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 152) = v29;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_32;
    goto LABEL_80;
  }
LABEL_79:
  v30 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 72) = v30;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_81;
  }
LABEL_80:
  v31 = *(_DWORD *)(a2 + 164);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 164) = v31;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *(_DWORD *)(a2 + 84);
  v3 |= 0x40000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 84) = v32;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_83;
  }
LABEL_82:
  v33 = *(_DWORD *)(a2 + 156);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 156) = v33;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_84;
  }
LABEL_83:
  v34 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 76) = v34;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_85;
  }
LABEL_84:
  v35 = *(_DWORD *)(a2 + 168);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v35;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_38;
    goto LABEL_86;
  }
LABEL_85:
  v36 = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 88) = v36;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_87;
  }
LABEL_86:
  v37 = *(_BYTE *)(a2 + 183);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 183) = v37;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0)
      goto LABEL_40;
    goto LABEL_88;
  }
LABEL_87:
  v38 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 56) = v38;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_41;
    goto LABEL_89;
  }
LABEL_88:
  v39 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 60) = v39;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_42;
    goto LABEL_90;
  }
LABEL_89:
  v40 = *(_BYTE *)(a2 + 182);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 182) = v40;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0)
      goto LABEL_43;
    goto LABEL_91;
  }
LABEL_90:
  v41 = *(_BYTE *)(a2 + 184);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 184) = v41;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_44;
    goto LABEL_92;
  }
LABEL_91:
  v42 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 64) = v42;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_93;
  }
LABEL_92:
  v43 = *(_DWORD *)(a2 + 140);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 140) = v43;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  v44 = *(_DWORD *)(a2 + 144);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 144) = v44;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  v45 = *(_BYTE *)(a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 186) = v45;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  v46 = *(_BYTE *)(a2 + 181);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 181) = v46;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  v47 = *(_BYTE *)(a2 + 180);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 180) = v47;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  v48 = *(_DWORD *)(a2 + 128);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 128) = v48;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  v49 = *(_DWORD *)(a2 + 176);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v49;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  v50 = *(_DWORD *)(a2 + 172);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v50;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  v51 = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 92) = v51;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0)
      return result;
LABEL_102:
    v53 = *(_BYTE *)(a2 + 187);
    *(_QWORD *)(result + 188) = v3 | 0x2000000000000;
    *(_BYTE *)(result + 187) = v53;
    return result;
  }
LABEL_101:
  v52 = *(_BYTE *)(a2 + 185);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 185) = v52;
  if ((*(_QWORD *)(a2 + 188) & 0x2000000000000) != 0)
    goto LABEL_102;
  return result;
}

uint64_t sub_101670D54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "auxHorizontalRotation", *(float *)(a1 + 16));
    v5 = *(_QWORD *)(a1 + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_55;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxHorizontalTranslation", *(float *)(a1 + 20));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "auxOmegaInertial_X", *(float *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "auxOmegaInertial_Y", *(float *)(a1 + 28));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "auxOmegaInertial_Z", *(float *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "auxUserAccelInertial_X", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Y", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Z", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "auxVerticalRotation", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "auxVerticalTranslation", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "blockHeadTurnFalsePositive", *(_BYTE *)(a1 + 180));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "bodyTurnDetectionVerticalRotationSrc", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "bodyTurnMaximaBaseline", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_16;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "counterBodyTurnAboveBaseline", *(_DWORD *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "hasRecentHeadTurn", *(_BYTE *)(a1 + 181));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "horizontalRotationSimilarity", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityBaseline", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityThreshold", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarity", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityBaseline", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_23;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityThreshold", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "inBodyTurn", *(_BYTE *)(a1 + 182));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_25;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "inComplexTransitionState", *(_BYTE *)(a1 + 183));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "inStrongBodyTurn", *(_BYTE *)(a1 + 184));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_27;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "longBodyTurnCounter", *(_DWORD *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_28;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "longBodyTurnState", *(_BYTE *)(a1 + 185));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "overrideHeadTurn", *(_BYTE *)(a1 + 186));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "srcHorizontalRotation", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "srcHorizontalTranslation", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "srcOmegaInertial_X", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "srcOmegaInertial_Y", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "srcOmegaInertial_Z", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_35;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "srcUserAccelInertial_X", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Y", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Z", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_38;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "srcVertToHrzRotRatio", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "srcVerticalRotation", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "srcVerticalTranslation", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "srcYawRotationExtremaBuffer", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0)
      goto LABEL_42;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "srcYawRotationMaximaBaseline", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "verticalRotationSimilarity", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "verticalRotationSimilarityBaseline", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "verticalRotationSimilarityThreshold", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "verticalTranslationSimilarity", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityBaseline", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityThreshold", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_50;
LABEL_101:
    PB::TextFormatter::format(this, "yawRateSimilarity200ms", *(float *)(a1 + 176));
    if ((*(_QWORD *)(a1 + 188) & 0x2000000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_51;
  }
LABEL_100:
  PB::TextFormatter::format(this, "yawRateSimilarity1000ms", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000000) != 0)
    goto LABEL_101;
LABEL_50:
  if ((v5 & 0x2000000000000) != 0)
LABEL_51:
    PB::TextFormatter::format(this, "yawRateSimilarityState", *(_BYTE *)(a1 + 187));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016713C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 188) |= 1uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v20);
          v21 = *((_QWORD *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(_QWORD *)(a1 + 188) |= 0x800000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_205;
        case 3u:
          *(_QWORD *)(a1 + 188) |= 0x1000000uLL;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_205;
        case 4u:
          *(_QWORD *)(a1 + 188) |= 0x2000000uLL;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_205;
        case 5u:
          *(_QWORD *)(a1 + 188) |= 8uLL;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_205;
        case 6u:
          *(_QWORD *)(a1 + 188) |= 0x10uLL;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_205;
        case 7u:
          *(_QWORD *)(a1 + 188) |= 0x20uLL;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_205;
        case 8u:
          *(_QWORD *)(a1 + 188) |= 0x40000000uLL;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_205;
        case 9u:
          *(_QWORD *)(a1 + 188) |= 0x200uLL;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_205;
        case 0xAu:
          *(_QWORD *)(a1 + 188) |= 0x200000uLL;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_205;
        case 0xBu:
          *(_QWORD *)(a1 + 188) |= 2uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_205;
        case 0xCu:
          *(_QWORD *)(a1 + 188) |= 0x4000000uLL;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_205;
        case 0xDu:
          *(_QWORD *)(a1 + 188) |= 0x8000000uLL;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_205;
        case 0xEu:
          *(_QWORD *)(a1 + 188) |= 0x10000000uLL;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_205;
        case 0xFu:
          *(_QWORD *)(a1 + 188) |= 0x40uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_205;
        case 0x10u:
          *(_QWORD *)(a1 + 188) |= 0x80uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_205;
        case 0x11u:
          *(_QWORD *)(a1 + 188) |= 0x100uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_205;
        case 0x12u:
          *(_QWORD *)(a1 + 188) |= 0x80000000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_205;
        case 0x13u:
          *(_QWORD *)(a1 + 188) |= 0x400uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_205;
        case 0x14u:
          *(_QWORD *)(a1 + 188) |= 0x400000uLL;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_205;
        case 0x15u:
          *(_QWORD *)(a1 + 188) |= 4uLL;
          v42 = *((_QWORD *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v42);
          goto LABEL_205;
        case 0x16u:
          *(_QWORD *)(a1 + 188) |= 0x400000000uLL;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v43);
          goto LABEL_205;
        case 0x17u:
          *(_QWORD *)(a1 + 188) |= 0x4000uLL;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_205;
        case 0x18u:
          *(_QWORD *)(a1 + 188) |= 0x2000000000uLL;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_205;
        case 0x19u:
          *(_QWORD *)(a1 + 188) |= 0x20000uLL;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v46);
          goto LABEL_205;
        case 0x1Au:
          *(_QWORD *)(a1 + 188) |= 0x800000000uLL;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(_QWORD *)(a1 + 188) |= 0x8000uLL;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(_QWORD *)(a1 + 188) |= 0x4000000000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_205;
        case 0x1Du:
          *(_QWORD *)(a1 + 188) |= 0x40000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(_QWORD *)(a1 + 188) |= 0x1000000000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(_QWORD *)(a1 + 188) |= 0x10000uLL;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_205;
        case 0x20u:
          *(_QWORD *)(a1 + 188) |= 0x8000000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_205;
        case 0x21u:
          *(_QWORD *)(a1 + 188) |= 0x80000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_205;
        case 0x22u:
          *(_QWORD *)(a1 + 188) |= 0x200000000000uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 >= *((_QWORD *)this + 2))
          {
            v58 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)this + v55);
            *((_QWORD *)this + 1) = v56;
            v58 = v57 != 0;
          }
          *(_BYTE *)(a1 + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(_QWORD *)(a1 + 188) |= 0x800uLL;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v59);
          goto LABEL_205;
        case 0x24u:
          *(_QWORD *)(a1 + 188) |= 0x1000uLL;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_205;
        case 0x25u:
          *(_QWORD *)(a1 + 188) |= 0x100000000000uLL;
          v61 = *((_QWORD *)this + 1);
          if (v61 >= *((_QWORD *)this + 2))
          {
            v64 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
            *((_QWORD *)this + 1) = v62;
            v64 = v63 != 0;
          }
          *(_BYTE *)(a1 + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(_QWORD *)(a1 + 188) |= 0x400000000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 >= *((_QWORD *)this + 2))
          {
            v68 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
            *((_QWORD *)this + 1) = v66;
            v68 = v67 != 0;
          }
          *(_BYTE *)(a1 + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(_QWORD *)(a1 + 188) |= 0x2000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_219;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          v110 = 0;
          v111 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v112 = v69 + 1;
              v113 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                v69 = v112;
                v14 = v111++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 64) = v74;
          goto LABEL_207;
        case 0x28u:
          *(_QWORD *)(a1 + 188) |= (unint64_t)&_mh_execute_header;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_205;
        case 0x29u:
          *(_QWORD *)(a1 + 188) |= 0x200000000uLL;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v78);
          goto LABEL_205;
        case 0x2Au:
          *(_QWORD *)(a1 + 188) |= 0x1000000000000uLL;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(_QWORD *)(a1 + 188) |= 0x80000000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(_QWORD *)(a1 + 188) |= 0x40000000000uLL;
          v87 = *((_QWORD *)this + 1);
          if (v87 >= *((_QWORD *)this + 2))
          {
            v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) = v88;
            v90 = v89 != 0;
          }
          *(_BYTE *)(a1 + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(_QWORD *)(a1 + 188) |= 0x20000000uLL;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(_QWORD *)(a1 + 188) |= 0x20000000000uLL;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(_QWORD *)(a1 + 188) |= 0x10000000000uLL;
          v93 = *((_QWORD *)this + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v93);
LABEL_205:
            v21 = *((_QWORD *)this + 1) + 4;
LABEL_206:
            *((_QWORD *)this + 1) = v21;
          }
          else
          {
LABEL_162:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(_QWORD *)(a1 + 188) |= 0x100000uLL;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          v96 = *(_QWORD *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)this + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_216;
              v97 += 7;
              v94 = v100;
              v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          v114 = 0;
          v115 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)this + 1);
          break;
        case 0x31u:
          *(_QWORD *)(a1 + 188) |= 0x800000000000uLL;
          v102 = *((_QWORD *)this + 1);
          if (v102 >= *((_QWORD *)this + 2))
          {
            v105 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)this + v102);
            *((_QWORD *)this + 1) = v103;
            v105 = v104 != 0;
          }
          *(_BYTE *)(a1 + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(_QWORD *)(a1 + 188) |= 0x2000000000000uLL;
          v106 = *((_QWORD *)this + 1);
          if (v106 >= *((_QWORD *)this + 2))
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)this + v106);
            *((_QWORD *)this + 1) = v107;
            v109 = v108 != 0;
          }
          *(_BYTE *)(a1 + 187) = v109;
          goto LABEL_207;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_216;
        }
        v116 = v94 + 1;
        v117 = *(_BYTE *)(v96 + v94);
        *((_QWORD *)this + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0)
          break;
        v114 += 7;
        v94 = v116;
        v14 = v115++ > 8;
        if (v14)
          goto LABEL_199;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v99) = 0;
LABEL_216:
      *(_DWORD *)(a1 + 92) = v99;
LABEL_207:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101672214(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 188);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104), 2u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 3u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 4u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 8u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 9u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0xAu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 0xBu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0xCu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 0xDu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0xEu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xFu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x11u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 0x12u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0x14u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0x15u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 0x16u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0x17u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(float *)(v3 + 160), 0x18u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x19u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(float *)(v3 + 152), 0x1Au);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 164), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Du);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 168), 0x20u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x21u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 183), 0x22u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x23u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0x24u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 182), 0x25u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 0x26u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0x27u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x28u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x29u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 186), 0x2Au);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x2Bu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 0x2Cu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0x2Du);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 176), 0x2Eu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0)
      goto LABEL_49;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 172), 0x2Fu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_50;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x30u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x2000000000000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 187), 0x32u);
  }
LABEL_100:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 185), 0x31u);
  if ((*(_QWORD *)(v3 + 188) & 0x2000000000000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 187), 0x32u);
  return result;
}

uint64_t sub_1016727B0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5478;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_1016727C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016727EC(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;

  *(_QWORD *)result = &off_1021C5478;
  *(_DWORD *)(result + 128) = 0;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_DWORD *)(result + 128) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 100);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 100) = v5;
    v2 = *(_DWORD *)(a2 + 128);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x80u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 48) = v6;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 96) = v7;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 44) = v8;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 76) = v9;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 72) = v10;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 68) = v11;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 112) = v12;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *(_BYTE *)(a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 124) = v13;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *(_BYTE *)(a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 120) = v14;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 60) = v15;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *(_BYTE *)(a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 123) = v16;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *(_BYTE *)(a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 125) = v17;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 92) = v18;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 40) = v19;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 88) = v20;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 36) = v21;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 52) = v22;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 108) = v23;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *(_BYTE *)(a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 126) = v24;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 84) = v25;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 32) = v26;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 56) = v27;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v28;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *(_BYTE *)(a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 121) = v29;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 64) = v30;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 8) = v31;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 16) = v32;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v33;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0)
      return result;
LABEL_66:
    v35 = *(_BYTE *)(a2 + 122);
    *(_DWORD *)(result + 128) = v3 | 0x8000000;
    *(_BYTE *)(result + 122) = v35;
    return result;
  }
LABEL_65:
  v34 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 80) = v34;
  if ((*(_DWORD *)(a2 + 128) & 0x8000000) != 0)
    goto LABEL_66;
  return result;
}

uint64_t sub_101672B88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "auxAvgOmegaAroundGrav2s", *(float *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravLong", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravShort", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "auxAvgOmegaLong", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "auxAvgOmegaShort", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "auxHistoricalOmegaStdMax", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "auxOverSrcYawDiffSum", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "dotRotGrav", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "hasUnCorrelatedSrcMotion", *(_BYTE *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "inHeadTurnState", *(_BYTE *)(a1 + 121));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "inLikelySlowBodyTurnPed", *(_BYTE *)(a1 + 122));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isInCorrelatedActivity", *(_BYTE *)(a1 + 123));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isInCorrelatedMotion", *(_BYTE *)(a1 + 124));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "lastHeadTurnStartTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lastHeadTurnStopTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "lastHeadTurnYawRadians", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "likelyOnGymMachine", *(_BYTE *)(a1 + 125));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "relOmegaMeanLong", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "relOmegaVarLong", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "relOmegaVarShort", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "srcAccumulatedYaw4s", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGrav2s", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravLong", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravShort", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "srcAvgOmegaLong", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "srcAvgOmegaShort", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "srcAvgYawBufferSum", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "srcHistoricalOmegaStdMax", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "srcRotationAxisAlignment", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(this, "steadyStatePedestrian", *(_BYTE *)(a1 + 126));
    if ((*(_DWORD *)(a1 + 128) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(this, "srcYawBufferLongStd", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 128);
  if (v5 < 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 4) != 0)
LABEL_33:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101672FB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 128) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_102;
        case 2u:
          *(_DWORD *)(a1 + 128) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 3u:
          *(_DWORD *)(a1 + 128) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 4u:
          *(_DWORD *)(a1 + 128) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 5u:
          *(_DWORD *)(a1 + 128) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 6u:
          *(_DWORD *)(a1 + 128) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 7u:
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 8u:
          *(_DWORD *)(a1 + 128) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 9u:
          *(_DWORD *)(a1 + 128) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0xAu:
          *(_DWORD *)(a1 + 128) |= 0x20000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 124) = v22;
          break;
        case 0xBu:
          *(_DWORD *)(a1 + 128) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 120) = v24;
          break;
        case 0xCu:
          *(_DWORD *)(a1 + 128) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0xDu:
          *(_DWORD *)(a1 + 128) |= 0x10000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 123) = v26;
          break;
        case 0xEu:
          *(_DWORD *)(a1 + 128) |= 0x40000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v28 = v27 != 0;
          }
          *(_BYTE *)(a1 + 125) = v28;
          break;
        case 0xFu:
          *(_DWORD *)(a1 + 128) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x10u:
          *(_DWORD *)(a1 + 128) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x11u:
          *(_DWORD *)(a1 + 128) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x12u:
          *(_DWORD *)(a1 + 128) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x13u:
          *(_DWORD *)(a1 + 128) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x14u:
          *(_DWORD *)(a1 + 128) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x15u:
          *(_DWORD *)(a1 + 128) |= 0x80000000;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 126) = v30;
          break;
        case 0x16u:
          *(_DWORD *)(a1 + 128) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x17u:
          *(_DWORD *)(a1 + 128) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x18u:
          *(_DWORD *)(a1 + 128) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x19u:
          *(_DWORD *)(a1 + 128) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Au:
          *(_DWORD *)(a1 + 128) |= 0x4000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v32 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v32 = v31 != 0;
          }
          *(_BYTE *)(a1 + 121) = v32;
          break;
        case 0x1Bu:
          *(_DWORD *)(a1 + 128) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Cu:
          *(_DWORD *)(a1 + 128) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_102;
        case 0x1Du:
          *(_DWORD *)(a1 + 128) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_102:
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *(_DWORD *)(a1 + 128) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Fu:
          *(_DWORD *)(a1 + 128) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_129:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_130:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        case 0x20u:
          *(_DWORD *)(a1 + 128) |= 0x8000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v34 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v34 = v33 != 0;
          }
          *(_BYTE *)(a1 + 122) = v34;
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016738AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 128);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 100), 2u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 8u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 9u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 124), 0xAu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0xBu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 123), 0xDu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 125), 0xEu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 0xFu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x11u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0x12u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x14u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 126), 0x15u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x16u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0x17u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x18u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x19u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 121), 0x1Au);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0x1Du);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x1Eu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 122), 0x20u);
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x1Fu);
  if ((*(_DWORD *)(v3 + 128) & 0x8000000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 122), 0x20u);
  return result;
}

double sub_101673C50(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C54B0;
  *(_DWORD *)(a1 + 164) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101673C74(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C54B0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_101673CC4(PB::Base *a1)
{
  sub_101673C74(a1);
  operator delete();
}

uint64_t sub_101673CE8(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  char v26;
  int v27;
  int v28;
  int v29;
  char v30;
  char v31;
  char v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;

  *(_QWORD *)a1 = &off_1021C54B0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 64);
    v6 = 2;
    *(_DWORD *)(a1 + 164) = 2;
    *(_QWORD *)(a1 + 64) = v7;
    v5 = *(_DWORD *)(a2 + 164);
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x800u;
    *(_DWORD *)(a1 + 164) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    v5 = *(_DWORD *)(a2 + 164);
  }
LABEL_6:
  if ((v5 & 0x1000) != 0)
  {
    v13 = *(_DWORD *)(a2 + 112);
    v6 |= 0x1000u;
    *(_DWORD *)(a1 + 164) = v6;
    *(_DWORD *)(a1 + 112) = v13;
    v5 = *(_DWORD *)(a2 + 164);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 116);
  v6 |= 0x2000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 116) = v14;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *(_DWORD *)(a2 + 120);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 120) = v15;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *(_DWORD *)(a2 + 124);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 124) = v16;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *(_DWORD *)(a2 + 128);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 128) = v17;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *(_DWORD *)(a2 + 140);
  v6 |= 0x80000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 140) = v18;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *(_DWORD *)(a2 + 144);
  v6 |= 0x100000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 144) = v19;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *(_DWORD *)(a2 + 148);
  v6 |= 0x200000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 148) = v20;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *(_DWORD *)(a2 + 96);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 96) = v21;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *(_DWORD *)(a2 + 100);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 100) = v22;
  v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_51:
  v23 = *(_DWORD *)(a2 + 104);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 104) = v23;
  if ((*(_DWORD *)(a2 + 164) & 0x80) != 0)
  {
LABEL_18:
    v9 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a1 + 164) = v6 | 0x80;
    *(_DWORD *)(a1 + 92) = v9;
  }
LABEL_19:
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x8000000) != 0)
  {
    v24 = *(_BYTE *)(a2 + 157);
    *(_DWORD *)(a1 + 164) |= 0x8000000u;
    *(_BYTE *)(a1 + 157) = v24;
    v10 = *(_DWORD *)(a2 + 164);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0)
        goto LABEL_24;
      goto LABEL_55;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }
  v25 = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 164) |= 0x400000u;
  *(_BYTE *)(a1 + 152) = v25;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v26 = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 164) |= 0x1000000u;
  *(_BYTE *)(a1 + 154) = v26;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v27 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 164) |= 0x10u;
  *(_DWORD *)(a1 + 80) = v27;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 4) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v28 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 164) |= 8u;
  *(_DWORD *)(a1 + 76) = v28;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  v29 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) |= 4u;
  *(_DWORD *)(a1 + 72) = v29;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  v30 = *(_BYTE *)(a2 + 159);
  *(_DWORD *)(a1 + 164) |= 0x20000000u;
  *(_BYTE *)(a1 + 159) = v30;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  v31 = *(_BYTE *)(a2 + 161);
  *(_DWORD *)(a1 + 164) |= 0x80000000;
  *(_BYTE *)(a1 + 161) = v31;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x800000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  v32 = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 164) |= 0x800000u;
  *(_BYTE *)(a1 + 153) = v32;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  v33 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 164) |= 0x20u;
  *(_DWORD *)(a1 + 84) = v33;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40000) == 0)
  {
LABEL_32:
    if ((v10 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  v34 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 164) |= 0x40000u;
  *(_DWORD *)(a1 + 136) = v34;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  v35 = *(_BYTE *)(a2 + 158);
  *(_DWORD *)(a1 + 164) |= 0x10000000u;
  *(_BYTE *)(a1 + 158) = v35;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  v36 = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 164) |= 0x4000000u;
  *(_BYTE *)(a1 + 156) = v36;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v10 & 1) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  v37 = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 164) |= 0x40000000u;
  *(_BYTE *)(a1 + 160) = v37;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_68;
  }
LABEL_67:
  v38 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 164) |= 1u;
  *(_QWORD *)(a1 + 56) = v38;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_38;
LABEL_69:
    v40 = *(_BYTE *)(a2 + 155);
    *(_DWORD *)(a1 + 164) |= 0x2000000u;
    *(_BYTE *)(a1 + 155) = v40;
    if ((*(_DWORD *)(a2 + 164) & 0x20000) == 0)
      return a1;
    goto LABEL_39;
  }
LABEL_68:
  v39 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 164) |= 0x40u;
  *(_DWORD *)(a1 + 88) = v39;
  v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x2000000) != 0)
    goto LABEL_69;
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    v11 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 164) |= 0x20000u;
    *(_DWORD *)(a1 + 132) = v11;
  }
  return a1;
}

uint64_t sub_10167413C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(this, "btz", *(_BYTE *)(a1 + 152));
    v5 = *(_DWORD *)(a1 + 164);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btzDisturbanceDuration", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "btzIsCurrentlyQuiescent", *(_BYTE *)(a1 + 153));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "btzQuiescentDurationLoose", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "btzQuiescentDurationStrict", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "btzStaticPoseDuration", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "centeredBoresight", *(_BYTE *)(a1 + 154));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "centeredBoresightInHighDynamics", *(_BYTE *)(a1 + 155));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_49:
  PB::TextFormatter::format(this, "clientMode", *(_DWORD *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 164) & 0x4000000) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "inComplexTransitionState", *(_BYTE *)(a1 + 156));
LABEL_12:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "noiseVariance", v8);
  }
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(this, "pinnedBoresight", *(_BYTE *)(a1 + 157));
    v9 = *(_DWORD *)(a1 + 164);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_53;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "qHat_W", *(float *)(a1 + 92));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "qHat_X", *(float *)(a1 + 96));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "qHat_Y", *(float *)(a1 + 100));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "qHat_Z", *(float *)(a1 + 104));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rBoresight_X", *(float *)(a1 + 108));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "rBoresight_Y", *(float *)(a1 + 112));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rBoresight_Z", *(float *)(a1 + 116));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rHat_X", *(float *)(a1 + 120));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rHat_Y", *(float *)(a1 + 124));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rHat_Z", *(float *)(a1 + 128));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_62:
  PB::TextFormatter::format(this, "requestingCamera", *(_BYTE *)(a1 + 158));
  if ((*(_DWORD *)(a1 + 164) & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
LABEL_28:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "stateVariance", v12);
  }
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
    v13 = *(_DWORD *)(a1 + 164);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0)
        goto LABEL_33;
      goto LABEL_66;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(this, "tracking1IMU", *(_BYTE *)(a1 + 159));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "trackingBehavior", *(_DWORD *)(a1 + 132));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "trackingDisabled", *(_BYTE *)(a1 + 160));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "trackingScheme", *(_DWORD *)(a1 + 136));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "useRelaxedQuiescenceBounds", *(_BYTE *)(a1 + 161));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0)
      goto LABEL_38;
LABEL_71:
    PB::TextFormatter::format(this, "vHat_Y", *(float *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 164) & 0x200000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_39;
  }
LABEL_70:
  PB::TextFormatter::format(this, "vHat_X", *(float *)(a1 + 140));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x100000) != 0)
    goto LABEL_71;
LABEL_38:
  if ((v13 & 0x200000) != 0)
LABEL_39:
    PB::TextFormatter::format(this, "vHat_Z", *(float *)(a1 + 148));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1016745D4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  unint64_t v142;
  char *v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  int v169;
  char *v170;
  int v171;
  unint64_t v172;
  _BYTE v175[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    v12 = (void **)(a1 + 32);
    v13 = a1 + 48;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 164) |= 2u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_153;
        case 2u:
          *(_DWORD *)(a1 + 164) |= 0x800u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_265;
        case 3u:
          *(_DWORD *)(a1 + 164) |= 0x1000u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_265;
        case 4u:
          *(_DWORD *)(a1 + 164) |= 0x2000u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_265;
        case 5u:
          *(_DWORD *)(a1 + 164) |= 0x4000u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_265;
        case 6u:
          *(_DWORD *)(a1 + 164) |= 0x8000u;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_265;
        case 7u:
          *(_DWORD *)(a1 + 164) |= 0x10000u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_265;
        case 8u:
          *(_DWORD *)(a1 + 164) |= 0x80000u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_265;
        case 9u:
          *(_DWORD *)(a1 + 164) |= 0x100000u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_265;
        case 0xAu:
          *(_DWORD *)(a1 + 164) |= 0x200000u;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_265;
        case 0xBu:
          *(_DWORD *)(a1 + 164) |= 0x100u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_265;
        case 0xCu:
          *(_DWORD *)(a1 + 164) |= 0x200u;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_265;
        case 0xDu:
          *(_DWORD *)(a1 + 164) |= 0x400u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_265;
        case 0xEu:
          *(_DWORD *)(a1 + 164) |= 0x80u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_265;
        case 0xFu:
          if ((_DWORD)v26 != 2)
          {
            v140 = *(char **)(a1 + 40);
            v139 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v140 >= v139)
            {
              v156 = (char *)*v12;
              v157 = (v140 - (_BYTE *)*v12) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_277:
                sub_100259694();
              v159 = v139 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)sub_100260634(v13, v160);
                v156 = *(char **)(a1 + 32);
                v140 = *(char **)(a1 + 40);
              }
              else
              {
                v161 = 0;
              }
              v168 = &v161[4 * v157];
              *(_DWORD *)v168 = 0;
              v141 = v168 + 4;
              while (v140 != v156)
              {
                v169 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v168;
              *(_QWORD *)(a1 + 40) = v141;
              *(_QWORD *)(a1 + 48) = &v161[4 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v140 = 0;
              v141 = v140 + 4;
            }
            *(_QWORD *)(a1 + 40) = v141;
            goto LABEL_261;
          }
          if ((PB::Reader::placeMark(this, v175, v26, a4) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 40);
            v43 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v12;
              v47 = (v44 - (_BYTE *)*v12) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_277;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100260634(v13, v50);
                v46 = *(char **)(a1 + 32);
                v44 = *(char **)(a1 + 40);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v52;
              *(_QWORD *)(a1 + 40) = v45;
              *(_QWORD *)(a1 + 48) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 40) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_217;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_218;
        case 0x10u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v175, v26, a4) & 1) != 0)
              return 0;
            v55 = *((_QWORD *)this + 1);
            v56 = *((_QWORD *)this + 2);
            while (v55 < v56 && !*((_BYTE *)this + 24))
            {
              v58 = *(char **)(a1 + 16);
              v57 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v58 >= v57)
              {
                v60 = (char *)*v10;
                v61 = (v58 - (_BYTE *)*v10) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  goto LABEL_278;
                v63 = v57 - (_QWORD)v60;
                if (v63 >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)sub_100260634(v11, v64);
                  v60 = *(char **)(a1 + 8);
                  v58 = *(char **)(a1 + 16);
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(_DWORD *)v66 = 0;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v66;
                *(_QWORD *)(a1 + 16) = v59;
                *(_QWORD *)(a1 + 24) = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_DWORD *)v58 = 0;
                v59 = v58 + 4;
              }
              *(_QWORD *)(a1 + 16) = v59;
              v68 = *((_QWORD *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              {
LABEL_217:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
              v56 = *((_QWORD *)this + 2);
              v55 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v55;
            }
LABEL_218:
            PB::Reader::recallMark(this, v175);
          }
          else
          {
            v143 = *(char **)(a1 + 16);
            v142 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v143 >= v142)
            {
              v162 = (char *)*v10;
              v163 = (v143 - (_BYTE *)*v10) >> 2;
              v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62)
LABEL_278:
                sub_100259694();
              v165 = v142 - (_QWORD)v162;
              if (v165 >> 1 > v164)
                v164 = v165 >> 1;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                v166 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (v166)
              {
                v167 = (char *)sub_100260634(v11, v166);
                v162 = *(char **)(a1 + 8);
                v143 = *(char **)(a1 + 16);
              }
              else
              {
                v167 = 0;
              }
              v170 = &v167[4 * v163];
              *(_DWORD *)v170 = 0;
              v141 = v170 + 4;
              while (v143 != v162)
              {
                v171 = *((_DWORD *)v143 - 1);
                v143 -= 4;
                *((_DWORD *)v170 - 1) = v171;
                v170 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v170;
              *(_QWORD *)(a1 + 16) = v141;
              *(_QWORD *)(a1 + 24) = &v167[4 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_DWORD *)v143 = 0;
              v141 = v143 + 4;
            }
            *(_QWORD *)(a1 + 16) = v141;
LABEL_261:
            v172 = *((_QWORD *)this + 1);
            if (v172 <= 0xFFFFFFFFFFFFFFFBLL && v172 + 4 <= *((_QWORD *)this + 2))
            {
              *(v141 - 1) = *(_DWORD *)(*(_QWORD *)this + v172);
LABEL_265:
              v118 = *((_QWORD *)this + 1) + 4;
LABEL_266:
              *((_QWORD *)this + 1) = v118;
            }
            else
            {
LABEL_263:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_267:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 0x11u:
          *(_DWORD *)(a1 + 164) |= 0x8000000u;
          v69 = *((_QWORD *)this + 1);
          if (v69 >= *((_QWORD *)this + 2))
          {
            v72 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v70 = v69 + 1;
            v71 = *(unsigned __int8 *)(*(_QWORD *)this + v69);
            *((_QWORD *)this + 1) = v70;
            v72 = v71 != 0;
          }
          *(_BYTE *)(a1 + 157) = v72;
          goto LABEL_267;
        case 0x12u:
          *(_DWORD *)(a1 + 164) |= 0x400000u;
          v73 = *((_QWORD *)this + 1);
          if (v73 >= *((_QWORD *)this + 2))
          {
            v76 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v74 = v73 + 1;
            v75 = *(unsigned __int8 *)(*(_QWORD *)this + v73);
            *((_QWORD *)this + 1) = v74;
            v76 = v75 != 0;
          }
          *(_BYTE *)(a1 + 152) = v76;
          goto LABEL_267;
        case 0x13u:
          *(_DWORD *)(a1 + 164) |= 0x1000000u;
          v77 = *((_QWORD *)this + 1);
          if (v77 >= *((_QWORD *)this + 2))
          {
            v80 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v78 = v77 + 1;
            v79 = *(unsigned __int8 *)(*(_QWORD *)this + v77);
            *((_QWORD *)this + 1) = v78;
            v80 = v79 != 0;
          }
          *(_BYTE *)(a1 + 154) = v80;
          goto LABEL_267;
        case 0x14u:
          *(_DWORD *)(a1 + 164) |= 0x10u;
          v81 = *((_QWORD *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v81);
          goto LABEL_265;
        case 0x15u:
          *(_DWORD *)(a1 + 164) |= 8u;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v82);
          goto LABEL_265;
        case 0x16u:
          *(_DWORD *)(a1 + 164) |= 4u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_265;
        case 0x17u:
          *(_DWORD *)(a1 + 164) |= 0x20000000u;
          v84 = *((_QWORD *)this + 1);
          if (v84 >= *((_QWORD *)this + 2))
          {
            v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v85 = v84 + 1;
            v86 = *(unsigned __int8 *)(*(_QWORD *)this + v84);
            *((_QWORD *)this + 1) = v85;
            v87 = v86 != 0;
          }
          *(_BYTE *)(a1 + 159) = v87;
          goto LABEL_267;
        case 0x18u:
          *(_DWORD *)(a1 + 164) |= 0x80000000;
          v88 = *((_QWORD *)this + 1);
          if (v88 >= *((_QWORD *)this + 2))
          {
            v91 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v89 = v88 + 1;
            v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
            *((_QWORD *)this + 1) = v89;
            v91 = v90 != 0;
          }
          *(_BYTE *)(a1 + 161) = v91;
          goto LABEL_267;
        case 0x19u:
          *(_DWORD *)(a1 + 164) |= 0x800000u;
          v92 = *((_QWORD *)this + 1);
          if (v92 >= *((_QWORD *)this + 2))
          {
            v95 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v93 = v92 + 1;
            v94 = *(unsigned __int8 *)(*(_QWORD *)this + v92);
            *((_QWORD *)this + 1) = v93;
            v95 = v94 != 0;
          }
          *(_BYTE *)(a1 + 153) = v95;
          goto LABEL_267;
        case 0x1Au:
          *(_DWORD *)(a1 + 164) |= 0x20u;
          v96 = *((_QWORD *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v96);
          goto LABEL_265;
        case 0x1Bu:
          *(_DWORD *)(a1 + 164) |= 0x40000u;
          v97 = *((_QWORD *)this + 1);
          v98 = *((_QWORD *)this + 2);
          v99 = *(_QWORD *)this;
          if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
          {
            v100 = 0;
            v101 = 0;
            v102 = 0;
            do
            {
              v103 = v97 + 1;
              *((_QWORD *)this + 1) = v97 + 1;
              v104 = *(_BYTE *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0)
                goto LABEL_240;
              v100 += 7;
              v97 = v103;
              v20 = v101++ > 8;
            }
            while (!v20);
LABEL_194:
            LODWORD(v102) = 0;
            goto LABEL_240;
          }
          v144 = 0;
          v145 = 0;
          v102 = 0;
          if (v98 <= v97)
            v98 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v146 = v97 + 1;
              v147 = *(_BYTE *)(v99 + v97);
              *((_QWORD *)this + 1) = v146;
              v102 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                v97 = v146;
                v20 = v145++ > 8;
                if (v20)
                  goto LABEL_194;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v102) = 0;
            }
            break;
          }
LABEL_240:
          *(_DWORD *)(a1 + 136) = v102;
          goto LABEL_267;
        case 0x1Cu:
          *(_DWORD *)(a1 + 164) |= 0x10000000u;
          v105 = *((_QWORD *)this + 1);
          if (v105 >= *((_QWORD *)this + 2))
          {
            v108 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v106 = v105 + 1;
            v107 = *(unsigned __int8 *)(*(_QWORD *)this + v105);
            *((_QWORD *)this + 1) = v106;
            v108 = v107 != 0;
          }
          *(_BYTE *)(a1 + 158) = v108;
          goto LABEL_267;
        case 0x1Du:
          *(_DWORD *)(a1 + 164) |= 0x4000000u;
          v109 = *((_QWORD *)this + 1);
          if (v109 >= *((_QWORD *)this + 2))
          {
            v112 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v110 = v109 + 1;
            v111 = *(unsigned __int8 *)(*(_QWORD *)this + v109);
            *((_QWORD *)this + 1) = v110;
            v112 = v111 != 0;
          }
          *(_BYTE *)(a1 + 156) = v112;
          goto LABEL_267;
        case 0x1Eu:
          *(_DWORD *)(a1 + 164) |= 0x40000000u;
          v113 = *((_QWORD *)this + 1);
          if (v113 >= *((_QWORD *)this + 2))
          {
            v116 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v114 = v113 + 1;
            v115 = *(unsigned __int8 *)(*(_QWORD *)this + v113);
            *((_QWORD *)this + 1) = v114;
            v116 = v115 != 0;
          }
          *(_BYTE *)(a1 + 160) = v116;
          goto LABEL_267;
        case 0x1Fu:
          *(_DWORD *)(a1 + 164) |= 1u;
          v117 = *((_QWORD *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFF7 || v117 + 8 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v117);
LABEL_153:
          v118 = *((_QWORD *)this + 1) + 8;
          goto LABEL_266;
        case 0x20u:
          *(_DWORD *)(a1 + 164) |= 0x40u;
          v119 = *((_QWORD *)this + 1);
          v120 = *((_QWORD *)this + 2);
          v121 = *(_QWORD *)this;
          if (v119 <= 0xFFFFFFFFFFFFFFF5 && v119 + 10 <= v120)
          {
            v122 = 0;
            v123 = 0;
            v124 = 0;
            do
            {
              v125 = v119 + 1;
              *((_QWORD *)this + 1) = v119 + 1;
              v126 = *(_BYTE *)(v121 + v119);
              v124 |= (unint64_t)(v126 & 0x7F) << v122;
              if ((v126 & 0x80) == 0)
                goto LABEL_243;
              v122 += 7;
              v119 = v125;
              v20 = v123++ > 8;
            }
            while (!v20);
LABEL_207:
            LODWORD(v124) = 0;
            goto LABEL_243;
          }
          v148 = 0;
          v149 = 0;
          v124 = 0;
          if (v120 <= v119)
            v120 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v120 == v119)
            {
              LODWORD(v124) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v150 = v119 + 1;
              v151 = *(_BYTE *)(v121 + v119);
              *((_QWORD *)this + 1) = v150;
              v124 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v119 = v150;
                v20 = v149++ > 8;
                if (v20)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v124) = 0;
            }
            break;
          }
LABEL_243:
          *(_DWORD *)(a1 + 88) = v124;
          goto LABEL_267;
        case 0x21u:
          *(_DWORD *)(a1 + 164) |= 0x2000000u;
          v127 = *((_QWORD *)this + 1);
          if (v127 >= *((_QWORD *)this + 2))
          {
            v130 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v128 = v127 + 1;
            v129 = *(unsigned __int8 *)(*(_QWORD *)this + v127);
            *((_QWORD *)this + 1) = v128;
            v130 = v129 != 0;
          }
          *(_BYTE *)(a1 + 155) = v130;
          goto LABEL_267;
        case 0x22u:
          *(_DWORD *)(a1 + 164) |= 0x20000u;
          v131 = *((_QWORD *)this + 1);
          v132 = *((_QWORD *)this + 2);
          v133 = *(_QWORD *)this;
          if (v131 <= 0xFFFFFFFFFFFFFFF5 && v131 + 10 <= v132)
          {
            v134 = 0;
            v135 = 0;
            v136 = 0;
            do
            {
              v137 = v131 + 1;
              *((_QWORD *)this + 1) = v131 + 1;
              v138 = *(_BYTE *)(v133 + v131);
              v136 |= (unint64_t)(v138 & 0x7F) << v134;
              if ((v138 & 0x80) == 0)
                goto LABEL_246;
              v134 += 7;
              v131 = v137;
              v20 = v135++ > 8;
            }
            while (!v20);
LABEL_216:
            LODWORD(v136) = 0;
            goto LABEL_246;
          }
          v152 = 0;
          v153 = 0;
          v136 = 0;
          if (v132 <= v131)
            v132 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v132 == v131)
            {
              LODWORD(v136) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v154 = v131 + 1;
              v155 = *(_BYTE *)(v133 + v131);
              *((_QWORD *)this + 1) = v154;
              v136 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v131 = v154;
                v20 = v153++ > 8;
                if (v20)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v136) = 0;
            }
            break;
          }
LABEL_246:
          *(_DWORD *)(a1 + 132) = v136;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_267;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1016754E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 164);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 3u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 4u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 5u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 6u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 7u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 8u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 9u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 0xAu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0xBu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
LABEL_53:
    result = PB::Writer::write(this, *(float *)(v3 + 104), 0xDu);
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xCu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0)
    goto LABEL_53;
LABEL_14:
  if ((v4 & 0x80) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 92), 0xEu);
LABEL_16:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 0xFu);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 0x10u);
  }
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 157), 0x11u);
    v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_25;
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 152), 0x12u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 154), 0x13u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x14u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x15u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x16u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 159), 0x17u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 161), 0x18u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 153), 0x19u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Au);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x1Bu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 158), 0x1Cu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 156), 0x1Du);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x1Eu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0x1Fu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x20u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_39:
    if ((v11 & 0x20000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x22u);
  }
LABEL_71:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 155), 0x21u);
  if ((*(_DWORD *)(v3 + 164) & 0x20000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x22u);
  return result;
}

uint64_t sub_1016758D4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C54E8;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1016758EC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101675910(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = &off_1021C54E8;
  *(_DWORD *)(a1 + 48) = 0;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v5 = *(_BYTE *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 44) = v5;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return *(float *)&v4;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  if ((*(_WORD *)(a2 + 48) & 4) == 0)
    return *(float *)&v4;
LABEL_20:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 48) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

uint64_t sub_101675A28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "avgRotationMax", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "historicalDisturbanceDuration", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "historicalQuiescenceDuration", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "instAccelMagDiff", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "instRotationMax", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isAvgGrav", *(_BYTE *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "measNoiseVar", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "lpfAccelMagDiff", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101675B78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_54;
        case 2u:
          *(_WORD *)(a1 + 48) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 3u:
          *(_WORD *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 4u:
          *(_WORD *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 5u:
          *(_WORD *)(a1 + 48) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 6u:
          *(_WORD *)(a1 + 48) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 7u:
          *(_WORD *)(a1 + 48) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 44) = v21;
          break;
        case 8u:
          *(_WORD *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 9u:
          *(_WORD *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_53:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_54:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101675F00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20), 9u);
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20), 9u);
  return result;
}

uint64_t sub_101676020(uint64_t result)
{
  *(_QWORD *)result = off_1021C5520;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101676034(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5520;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101676074(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C5520;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1016760C8(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = off_1021C5520;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) |= 1u;
    *(_BYTE *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_101676164(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "isAvgGrav", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016761D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 >= *((_QWORD *)this + 2))
        {
          v24 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) = v22;
          v24 = v23 != 0;
        }
        *(_BYTE *)(a1 + 16) = v24;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016763E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10167643C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5558;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101676454(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101676478(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  char v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)result = &off_1021C5558;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 12);
    v3 = 2;
    *(_BYTE *)(result + 24) = 2;
    *(_DWORD *)(result + 12) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 24) = v3;
    *(_BYTE *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return result;
LABEL_12:
      v8 = *(_BYTE *)(a2 + 21);
      *(_BYTE *)(result + 24) = v3 | 0x10;
      *(_BYTE *)(result + 21) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 24) = v3;
  *(_DWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 24) & 0x10) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_101676520(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activeGnssSession", *(_BYTE *)(a1 + 20));
    v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentModesOfOperation", *(_DWORD *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "hasSubscribedRhythmicClient", *(_BYTE *)(a1 + 21));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "gnssModeOfOperation", *(_DWORD *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "rhythmicMode", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016765F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 24) |= 2u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_80:
                v3 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_81;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_81:
              *(_DWORD *)(a1 + 12) = v24;
              goto LABEL_92;
            case 2u:
              *(_BYTE *)(a1 + 24) |= 8u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 20) = v28;
              goto LABEL_92;
            case 3u:
              *(_BYTE *)(a1 + 24) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_85;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v3 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_86;
                v31 += 7;
                v29 = v3;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 24) |= 1u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_90;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v3 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_91;
                v37 += 7;
                v35 = v3;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 8) = v39;
LABEL_92:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 24) |= 0x10u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 21) = v42;
              goto LABEL_92;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101676AA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 21), 5u);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 24) & 0x10) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 21), 5u);
  return result;
}

uint64_t sub_101676B50(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5590;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101676B68(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101676B8C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C5590;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_101676C18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101676CC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101676F2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  return result;
}

uint64_t sub_101676FC0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C55C8;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101676FD8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101676FFC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C55C8;
  *(_DWORD *)(a1 + 64) = 0;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 64) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 64) = v3;
    *(double *)(a1 + 56) = result;
    v2 = *(_BYTE *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 64) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 64) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 64) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return result;
LABEL_16:
    result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 64) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
LABEL_15:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 64) = v3;
  *(double *)(a1 + 48) = result;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_1016770DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "swingAccelX", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "swingAccelXStandardized", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "swingAccelZ", *(double *)(a1 + 48));
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "swingAccelY", *(double *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016771EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 64) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 64) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 8u:
          *(_BYTE *)(a1 + 64) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016774F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 7u);
  if ((*(_BYTE *)(v3 + 64) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  return result;
}

uint64_t sub_1016775D8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5600;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_1016775F0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101677614(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)a1 = &off_1021C5600;
  *(_DWORD *)(a1 + 120) = 0;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x200) != 0)
  {
    result = *(double *)(a2 + 80);
    v3 = 512;
    *(_WORD *)(a1 + 120) = 512;
    *(double *)(a1 + 80) = result;
    v2 = *(_WORD *)(a2 + 120);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 120) & 0x2000) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 112);
    v3 |= 0x2000u;
    *(_WORD *)(a1 + 120) = v3;
    *(double *)(a1 + 112) = result;
    v2 = *(_WORD *)(a2 + 120);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *(double *)(a2 + 88);
    v3 |= 0x400u;
    *(_WORD *)(a1 + 120) = v3;
    *(double *)(a1 + 88) = result;
    v2 = *(_WORD *)(a2 + 120);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      return result;
LABEL_30:
    result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 120) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }
LABEL_29:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 120) & 4) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_1016777B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centerOfMassPrefiltAccelX", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelY", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelZ", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "centripetalAccelX", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "centripetalAccelY", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "centripetalAccelZ", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "centripetalRotationRateX", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "centripetalRotationRateY", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "centripetalRotationRateZ", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "swingVelocityX", *(double *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "swingVelocityZ", *(double *)(a1 + 104));
    if ((*(_WORD *)(a1 + 120) & 0x2000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "swingVelocityY", *(double *)(a1 + 96));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 112));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016779A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 3u:
          *(_WORD *)(a1 + 120) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 4u:
          *(_WORD *)(a1 + 120) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 5u:
          *(_WORD *)(a1 + 120) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 6u:
          *(_WORD *)(a1 + 120) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 9u:
          *(_WORD *)(a1 + 120) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xEu:
          *(_WORD *)(a1 + 120) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_65:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_67:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101677E34(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 120);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 112), 2u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 3u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 4u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 5u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 6u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 8u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xAu);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xDu);
  if ((*(_WORD *)(v3 + 120) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  return result;
}

_QWORD *sub_101677FE0(_QWORD *result)
{
  *result = &off_1021C5638;
  result[28] = 0;
  return result;
}

void sub_101677FF8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10167801C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;

  *(_QWORD *)a1 = &off_1021C5638;
  *(_QWORD *)(a1 + 224) = 0;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x40) != 0)
  {
    result = *(double *)(a2 + 56);
    v3 = 64;
    *(_QWORD *)(a1 + 224) = 64;
    *(double *)(a1 + 56) = result;
    v2 = *(_QWORD *)(a2 + 224);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 64);
    v3 |= 0x80uLL;
    *(_QWORD *)(a1 + 224) = v3;
    *(double *)(a1 + 64) = result;
    v2 = *(_QWORD *)(a2 + 224);
  }
LABEL_6:
  if ((v2 & 0x200000000) != 0)
  {
    v5 = *(_BYTE *)(a2 + 220);
    v3 |= 0x200000000uLL;
    *(_QWORD *)(a1 + 224) = v3;
    *(_BYTE *)(a1 + 220) = v5;
    v2 = *(_QWORD *)(a2 + 224);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v6 = *(_BYTE *)(a2 + 217);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 217) = v6;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v7 = *(_BYTE *)(a2 + 221);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 221) = v7;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v8 = *(_BYTE *)(a2 + 216);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 216) = v8;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v9 = *(_BYTE *)(a2 + 218);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 218) = v9;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v10 = *(_DWORD *)(a2 + 208);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 208) = v10;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v11 = *(_DWORD *)(a2 + 204);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 204) = v11;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v12 = *(_DWORD *)(a2 + 212);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 212) = v12;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v13 = *(_DWORD *)(a2 + 192);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 192) = v13;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *(_DWORD *)(a2 + 200);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 200) = v14;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *(_DWORD *)(a2 + 196);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 196) = v15;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  result = *(double *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  result = *(double *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  result = *(double *)(a2 + 40);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v16 = *(_BYTE *)(a2 + 219);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 219) = v16;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  result = *(double *)(a2 + 72);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x10000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  result = *(double *)(a2 + 96);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 136) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x400000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  result = *(double *)(a2 + 48);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  result = *(double *)(a2 + 80);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_72:
    result = *(double *)(a2 + 88);
    *(_QWORD *)(a1 + 224) = v3 | 0x400;
    *(double *)(a1 + 88) = result;
    return result;
  }
LABEL_71:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 224) = v3;
  *(double *)(a1 + 176) = result;
  if ((*(_QWORD *)(a2 + 224) & 0x400) != 0)
    goto LABEL_72;
  return result;
}

uint64_t sub_10167840C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "emptyField0", *(double *)(a1 + 8));
    v5 = *(_QWORD *)(a1 + 224);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField1", *(_BYTE *)(a1 + 216));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "emptyField2", *(_DWORD *)(a1 + 192));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "groundContactTimeCadence", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "groundContactTimeGrade", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "groundContactTimeGradeSource", *(_DWORD *)(a1 + 196));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "groundContactTimeGradeType", *(_DWORD *)(a1 + 200));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "groundContactTimeIsValid", *(_BYTE *)(a1 + 217));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "groundContactTimePace", *(double *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "groundContactTimeReportingStatus", *(_DWORD *)(a1 + 204));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "groundContactTimeUnsmoothed", *(double *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "groundContactTimeWindowEndTime", *(double *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isFlat", *(_BYTE *)(a1 + 218));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "isFormBasedStrideLength", *(_BYTE *)(a1 + 219));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "strideLengthGrade", *(double *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "strideLengthGradeType", *(double *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "strideLengthIsValid", *(_BYTE *)(a1 + 220));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "strideLengthPace", *(double *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "strideLengthReportingStatus", *(_DWORD *)(a1 + 208));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "strideLengthUncalibrated", *(double *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "strideLengthUnsmoothed", *(double *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "strideLengthWindowEndTime", *(double *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "verticalOscCadence", *(double *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "verticalOscPace", *(double *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "verticalOscWindowEndTime", *(double *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "verticalOscillation", *(double *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "verticalOscillationGrade", *(double *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "verticalOscillationGradeType", *(double *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
LABEL_71:
    PB::TextFormatter::format(this, "verticalOscillationReportingStatus", *(_DWORD *)(a1 + 212));
    if ((*(_QWORD *)(a1 + 224) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_36;
  }
LABEL_70:
  PB::TextFormatter::format(this, "verticalOscillationIsValid", *(_BYTE *)(a1 + 221));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_71;
LABEL_35:
  if ((v5 & 0x400000) != 0)
LABEL_36:
    PB::TextFormatter::format(this, "verticalOscillationUnsmoothed", *(double *)(a1 + 184));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167889C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)(a1 + 224) |= 0x40uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 2u:
              *(_QWORD *)(a1 + 224) |= 0x80uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 3u:
              *(_QWORD *)(a1 + 224) |= 0x200000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 220) = v22;
              goto LABEL_203;
            case 4u:
              *(_QWORD *)(a1 + 224) |= 2uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 5u:
              *(_QWORD *)(a1 + 224) |= 0x40000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 217) = v24;
              goto LABEL_203;
            case 6u:
              *(_QWORD *)(a1 + 224) |= 0x80000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 7u:
              *(_QWORD *)(a1 + 224) |= 0x400000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 221) = v26;
              goto LABEL_203;
            case 8u:
              *(_QWORD *)(a1 + 224) |= 1uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 9u:
              *(_QWORD *)(a1 + 224) |= 0x20000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *(_QWORD *)(a1 + 224) |= 0x80000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *(_QWORD *)(a1 + 224) |= 0x8000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0xCu:
              *(_QWORD *)(a1 + 224) |= 0x40000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0xDu:
              *(_QWORD *)(a1 + 224) |= 0x4000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0xEu:
              *(_QWORD *)(a1 + 224) |= 0x8000000uLL;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_212;
                  }
                  v71 = v31++;
                  v72 = *(_BYTE *)(v32 + v71);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_211;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_212;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *(_DWORD *)(a1 + 208) = v35;
              goto LABEL_203;
            case 0xFu:
              *(_QWORD *)(a1 + 224) |= 0x4000000uLL;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_217;
                  }
                  v75 = v37++;
                  v76 = *(_BYTE *)(v38 + v75);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_216;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_217;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *(_DWORD *)(a1 + 204) = v41;
              goto LABEL_203;
            case 0x10u:
              *(_QWORD *)(a1 + 224) |= 0x10000000uLL;
              v43 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v44 = *(_QWORD *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v47 = 0;
                if (v2 <= v43)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_222;
                  }
                  v79 = v43++;
                  v80 = *(_BYTE *)(v44 + v79);
                  *((_QWORD *)this + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v47) = 0;
                goto LABEL_221;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              do
              {
                v2 = v43 + 1;
                *((_QWORD *)this + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0)
                  goto LABEL_222;
                v45 += 7;
                v43 = v2;
                v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *(_DWORD *)(a1 + 212) = v47;
              goto LABEL_203;
            case 0x11u:
              *(_QWORD *)(a1 + 224) |= 0x800000uLL;
              v49 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v50 = *(_QWORD *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v53 = 0;
                if (v2 <= v49)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_227;
                  }
                  v83 = v49++;
                  v84 = *(_BYTE *)(v50 + v83);
                  *((_QWORD *)this + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v53) = 0;
                goto LABEL_226;
              }
              v51 = 0;
              v52 = 0;
              v53 = 0;
              do
              {
                v2 = v49 + 1;
                *((_QWORD *)this + 1) = v49 + 1;
                v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0)
                  goto LABEL_227;
                v51 += 7;
                v49 = v2;
                v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *(_DWORD *)(a1 + 192) = v53;
              goto LABEL_203;
            case 0x12u:
              *(_QWORD *)(a1 + 224) |= 0x1000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x13u:
              *(_QWORD *)(a1 + 224) |= 0x2000000uLL;
              v55 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v56 = *(_QWORD *)this;
              if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
              {
                v85 = 0;
                v86 = 0;
                v59 = 0;
                if (v2 <= v55)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_232;
                  }
                  v87 = v55++;
                  v88 = *(_BYTE *)(v56 + v87);
                  *((_QWORD *)this + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v59) = 0;
                goto LABEL_231;
              }
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v2 = v55 + 1;
                *((_QWORD *)this + 1) = v55 + 1;
                v60 = *(_BYTE *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0)
                  goto LABEL_232;
                v57 += 7;
                v55 = v2;
                v14 = v58++ > 8;
              }
              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *(_DWORD *)(a1 + 200) = v59;
              goto LABEL_203;
            case 0x14u:
              *(_QWORD *)(a1 + 224) |= 0x1000000uLL;
              v61 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v62 = *(_QWORD *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                v89 = 0;
                v90 = 0;
                v65 = 0;
                if (v2 <= v61)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_237;
                  }
                  v91 = v61++;
                  v92 = *(_BYTE *)(v62 + v91);
                  *((_QWORD *)this + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0)
                    break;
                  v89 += 7;
                  v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v65) = 0;
                goto LABEL_236;
              }
              v63 = 0;
              v64 = 0;
              v65 = 0;
              do
              {
                v2 = v61 + 1;
                *((_QWORD *)this + 1) = v61 + 1;
                v66 = *(_BYTE *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0)
                  goto LABEL_237;
                v63 += 7;
                v61 = v2;
                v14 = v64++ > 8;
              }
              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *(_DWORD *)(a1 + 196) = v65;
LABEL_203:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x15u:
              *(_QWORD *)(a1 + 224) |= 8uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x16u:
              *(_QWORD *)(a1 + 224) |= 4uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x17u:
              *(_QWORD *)(a1 + 224) |= 0x10uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x18u:
              *(_QWORD *)(a1 + 224) |= (unint64_t)&_mh_execute_header;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v68 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v67 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v68 = v67 != 0;
              }
              *(_BYTE *)(a1 + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *(_QWORD *)(a1 + 224) |= 0x100uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Au:
              *(_QWORD *)(a1 + 224) |= 0x800uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Bu:
              *(_QWORD *)(a1 + 224) |= 0x10000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Cu:
              *(_QWORD *)(a1 + 224) |= 0x20000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Du:
              *(_QWORD *)(a1 + 224) |= 0x20uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Eu:
              *(_QWORD *)(a1 + 224) |= 0x400000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Fu:
              *(_QWORD *)(a1 + 224) |= 0x2000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x20u:
              *(_QWORD *)(a1 + 224) |= 0x100000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x21u:
              *(_QWORD *)(a1 + 224) |= 0x200uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x22u:
              *(_QWORD *)(a1 + 224) |= 0x200000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x23u:
              *(_QWORD *)(a1 + 224) |= 0x400uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_202:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_146:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_203;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_203;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101679670(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 224);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_QWORD *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 220), 3u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 217), 5u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 160), 6u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 221), 7u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 216), 9u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 218), 0xAu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0xBu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 152), 0xCu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0xEu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 204), 0xFu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0x10u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x11u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0x12u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 200), 0x13u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x14u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x15u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0x16u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0x17u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 219), 0x18u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x19u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0x1Au);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0x1Du);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(double *)(v3 + 184), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 0x20u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0x21u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 88), 0x23u);
  }
LABEL_70:
  result = PB::Writer::write(this, *(double *)(v3 + 176), 0x22u);
  if ((*(_QWORD *)(v3 + 224) & 0x400) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 88), 0x23u);
  return result;
}

uint64_t sub_101679A68(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5670;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_101679A80(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101679AA4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;

  *(_QWORD *)result = &off_1021C5670;
  *(_DWORD *)(result + 128) = 0;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v3 = 64;
    *(_DWORD *)(result + 128) = 64;
    *(_QWORD *)(result + 56) = v4;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 128) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_DWORD *)(a2 + 128);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *(_QWORD *)(a2 + 72);
    v3 |= 0x100u;
    *(_DWORD *)(result + 128) = v3;
    *(_QWORD *)(result + 72) = v6;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 124) = v7;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 96) = v8;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 88) = v9;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *(_DWORD *)(a2 + 108);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 108) = v10;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *(_DWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v11;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v13 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 32) = v13;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v14 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 24) = v14;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v15 = *(_BYTE *)(a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 123) = v15;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v16 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 40) = v16;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v17 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 80) = v17;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 64) = v18;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 8) = v19;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *(_BYTE *)(a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 125) = v20;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *(_BYTE *)(a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 121) = v21;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  v22 = *(_DWORD *)(a2 + 116);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v22;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  v23 = *(_BYTE *)(a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 120) = v23;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      return result;
LABEL_46:
    v25 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(result + 128) = v3 | 0x4000;
    *(_DWORD *)(result + 112) = v25;
    return result;
  }
LABEL_45:
  v24 = *(_BYTE *)(a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 122) = v24;
  if ((*(_DWORD *)(a2 + 128) & 0x4000) != 0)
    goto LABEL_46;
  return result;
}

uint64_t sub_101679D28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 104));
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "activityTypeWithoutOverride", *(_DWORD *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "elevationSource", *(_DWORD *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "eta", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "gradeOnsetCounter", *(_DWORD *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "horizSpeed", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "isArmConstrainedStateValid", *(_BYTE *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isGradeOnsetEscalated", *(_BYTE *)(a1 + 121));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isRunning", *(_BYTE *)(a1 + 122));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 123));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isWeightSet", *(_BYTE *)(a1 + 124));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isWorkoutSelected", *(_BYTE *)(a1 + 125));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "powerWattage", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userHeight", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userWeight", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(this, "wLoad", *(double *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 128) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x800) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "workrateMETs", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167A018(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 124) = v22;
              goto LABEL_162;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v59 = v23++;
                  v60 = *(_BYTE *)(v24 + v59);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_145;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_146;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 108) = v27;
              goto LABEL_162;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  v63 = v29++;
                  v64 = *(_BYTE *)(v30 + v63);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_150;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_151;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 104) = v33;
              goto LABEL_162;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_141:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_162;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  v67 = v41++;
                  v68 = *(_BYTE *)(v42 + v67);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_155;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_156;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 116) = v45;
              goto LABEL_162;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v71 = v51++;
                  v72 = *(_BYTE *)(v52 + v71);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_160;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_161;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 112) = v55;
LABEL_162:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_162;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10167A97C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 128);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 3u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 124), 4u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 5u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 6u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 7u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 8u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 123), 0xCu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xDu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0xEu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 0xFu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0x10u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 125), 0x11u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 121), 0x12u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x13u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0x14u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x16u);
  }
LABEL_44:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 122), 0x15u);
  if ((*(_DWORD *)(v3 + 128) & 0x4000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x16u);
  return result;
}

uint64_t sub_10167AC08(uint64_t result)
{
  *(_QWORD *)result = &off_1021C56A8;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10167AC20(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10167AC44(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C56A8;
  *(_DWORD *)(a1 + 48) = 0;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 48) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 40) = result;
    v2 = *(_BYTE *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 48) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 48) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 48) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_10167ACEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "primaryAxisX", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "primaryAxisY", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "primaryAxisZ", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167ADBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_40:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10167B050(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  return result;
}

uint64_t sub_10167B100(uint64_t result)
{
  *(_QWORD *)result = &off_1021C56E0;
  *(_DWORD *)(result + 188) = 0;
  return result;
}

void sub_10167B118(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10167B13C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  *(_QWORD *)result = &off_1021C56E0;
  *(_DWORD *)(result + 188) = 0;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x80000) != 0)
  {
    v4 = *(_QWORD *)(a2 + 160);
    v3 = 0x80000;
    *(_DWORD *)(result + 188) = 0x80000;
    *(_QWORD *)(result + 160) = v4;
    v2 = *(_DWORD *)(a2 + 188);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 64);
    v3 |= 0x80u;
    *(_DWORD *)(result + 188) = v3;
    *(_QWORD *)(result + 64) = v5;
    v2 = *(_DWORD *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x40000) != 0)
  {
    v6 = *(_QWORD *)(a2 + 152);
    v3 |= 0x40000u;
    *(_DWORD *)(result + 188) = v3;
    *(_QWORD *)(result + 152) = v6;
    v2 = *(_DWORD *)(a2 + 188);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 184) = v7;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  v8 = *(_QWORD *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 144) = v8;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  v9 = *(_QWORD *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 136) = v9;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  v10 = *(_BYTE *)(a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 182) = v10;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  v11 = *(_BYTE *)(a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 183) = v11;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  v12 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 56) = v12;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  v13 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 32) = v13;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  v14 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 48) = v14;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  v15 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 40) = v15;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  v16 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 8) = v16;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  v17 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 16) = v17;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  v18 = *(_QWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 128) = v18;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  v19 = *(_QWORD *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 120) = v19;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  v20 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 72) = v20;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  v21 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 80) = v21;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  v22 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 24) = v22;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  v23 = *(_DWORD *)(a2 + 176);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v23;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *(_DWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v24;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *(_DWORD *)(a2 + 172);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v25;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *(_BYTE *)(a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 180) = v26;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *(_QWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 104) = v27;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_56;
  }
LABEL_55:
  v28 = *(_QWORD *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 112) = v28;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_57;
  }
LABEL_56:
  v29 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 88) = v29;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      return result;
LABEL_58:
    v31 = *(_BYTE *)(a2 + 181);
    *(_DWORD *)(result + 188) = v3 | 0x1000000;
    *(_BYTE *)(result + 181) = v31;
    return result;
  }
LABEL_57:
  v30 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 96) = v30;
  if ((*(_DWORD *)(a2 + 188) & 0x1000000) != 0)
    goto LABEL_58;
  return result;
}

uint64_t sub_10167B468(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "algDelay", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 188);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasFactor", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "deltaCalibratedPedometerDistance", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "deltaOdometerDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "deltaOdometerTime", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaPedometerTime", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaRawPedometerDistance", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gestureState", *(_DWORD *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gestureType", *(_DWORD *)(a1 + 172));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "interruptFlag", *(_BYTE *)(a1 + 180));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isTrackRunOdometer", *(_BYTE *)(a1 + 181));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "isValidOdometerSpeed", *(_BYTE *)(a1 + 182));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isValidPedometerSpeed", *(_BYTE *)(a1 + 183));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isValidRunningSpeed", *(_BYTE *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "kalmanEpsOdometer", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "kalmanEpsPedometer", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "kalmanGainOdometer", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "kalmanGainPedometer", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "kalmanMeasurementNoiseOdometer", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "kalmanMeasurementNoisePedometer", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "kalmanProcessNoise", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "kalmanStateCovariance", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "odometerQuality", *(_DWORD *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(this, "runningSpeed", *(double *)(a1 + 152));
    if ((*(_DWORD *)(a1 + 188) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(this, "pedometerSpeed", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x80000) != 0)
LABEL_29:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167B818(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 188) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 188) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 188) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 188) |= 0x8000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 184) = v22;
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 188) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 6u:
              *(_DWORD *)(a1 + 188) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 7u:
              *(_DWORD *)(a1 + 188) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 182) = v24;
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 188) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 183) = v26;
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 188) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xAu:
              *(_DWORD *)(a1 + 188) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 188) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 188) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 188) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xEu:
              *(_DWORD *)(a1 + 188) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 188) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x10u:
              *(_DWORD *)(a1 + 188) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 188) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 188) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x13u:
              *(_DWORD *)(a1 + 188) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x14u:
              *(_DWORD *)(a1 + 188) |= 0x400000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_156;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_157;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 176) = v31;
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 188) |= 0x100000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_161;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_162;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 168) = v37;
              goto LABEL_148;
            case 0x16u:
              *(_DWORD *)(a1 + 188) |= 0x200000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_166;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_167;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 172) = v43;
LABEL_148:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 188) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *(_DWORD *)(a1 + 188) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x19u:
              *(_DWORD *)(a1 + 188) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x1Au:
              *(_DWORD *)(a1 + 188) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x1Bu:
              *(_DWORD *)(a1 + 188) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_147:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_148;
            case 0x1Cu:
              *(_DWORD *)(a1 + 188) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 181) = v48;
              goto LABEL_148;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_148;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10167C22C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 188);
  if ((v4 & 0x80000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 160), 1u);
    v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 152), 3u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 4u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 5u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 6u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 182), 7u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 183), 8u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xEu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0xFu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0x10u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x11u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0x12u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0x13u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x14u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0x15u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x16u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 0x17u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0x18u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x19u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 0x1Au);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x1Cu);
  }
LABEL_56:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0x1Bu);
  if ((*(_DWORD *)(v3 + 188) & 0x1000000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x1Cu);
  return result;
}

uint64_t sub_10167C560(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5718;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_10167C578(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10167C59C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;
  int v5;
  char v6;

  *(_QWORD *)a1 = &off_1021C5718;
  *(_DWORD *)(a1 + 136) = 0;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 = 4;
    *(_DWORD *)(a1 + 136) = 4;
    *(double *)(a1 + 24) = result;
    v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 80);
    v3 |= 0x200u;
    *(_DWORD *)(a1 + 136) = v3;
    *(double *)(a1 + 80) = result;
    v2 = *(_DWORD *)(a2 + 136);
  }
LABEL_6:
  if ((v2 & 0x4000) != 0)
  {
    result = *(double *)(a2 + 120);
    v3 |= 0x4000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(double *)(a1 + 120) = result;
    v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v5 = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 128) = v5;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v6 = *(_BYTE *)(a2 + 132);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 132) = v6;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0)
      return result;
LABEL_36:
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 136) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_35:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 136) & 2) != 0)
    goto LABEL_36;
  return result;
}

uint64_t sub_10167C794(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "algorithmType", *(_DWORD *)(a1 + 128));
    v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alpha", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "formBasedStartTime", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "heightCM", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "horizontalAccelMagnitudeMeanSqrt", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 132));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rotationRateGravityProjectionMax", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rotationRateMagnitudeMin", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "speedBasedStartTime", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "strideLengthFormBasedCalibrated", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "strideLengthSpeedBased", *(double *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 136) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "strideLengthFormBasedUncalibrated", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167C9E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_92;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_93;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 128) = v25;
LABEL_94:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_94;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_94;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10167CFD8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 136);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 3u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0xAu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0xBu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0xCu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0xEu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 132), 0xFu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x11u);
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x10u);
  if ((*(_DWORD *)(v3 + 136) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x11u);
  return result;
}

uint64_t sub_10167D1D8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5750;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10167D1F0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10167D214(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C5750;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 40) = 4;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 40) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_10167D2A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "displacement", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167D350(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10167D5AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_10167D640(uint64_t result)
{
  *(_QWORD *)result = &off_1021C5788;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_10167D658(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10167D67C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  *(_QWORD *)result = &off_1021C5788;
  *(_DWORD *)(result + 212) = 0;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *(_QWORD *)(a2 + 152);
    v3 = 0x40000;
    *(_DWORD *)(result + 212) = 0x40000;
    *(_QWORD *)(result + 152) = v4;
    v2 = *(_DWORD *)(a2 + 212);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 120);
    v3 |= 0x4000u;
    *(_DWORD *)(result + 212) = v3;
    *(_QWORD *)(result + 120) = v5;
    v2 = *(_DWORD *)(a2 + 212);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_QWORD *)(a2 + 88);
    v3 |= 0x400u;
    *(_DWORD *)(result + 212) = v3;
    *(_QWORD *)(result + 88) = v6;
    v2 = *(_DWORD *)(a2 + 212);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 96) = v7;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  v8 = *(_QWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 104) = v8;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  v9 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 16) = v9;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  v10 = *(_QWORD *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 200) = v10;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  v11 = *(_QWORD *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 176) = v11;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  v12 = *(_QWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 168) = v12;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  v13 = *(_QWORD *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 144) = v13;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  v14 = *(_QWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 128) = v14;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  v15 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 80) = v15;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v16 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 56) = v16;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 48) = v17;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 32) = v18;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *(_QWORD *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 192) = v19;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 40) = v20;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  v21 = *(_QWORD *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 112) = v21;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  v22 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 72) = v22;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  v23 = *(_QWORD *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 136) = v23;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  v24 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 64) = v24;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  v25 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 24) = v25;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  v26 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 8) = v26;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  v27 = *(_QWORD *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 184) = v27;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0)
      return result;
LABEL_54:
    v29 = *(_BYTE *)(a2 + 208);
    *(_DWORD *)(result + 212) = v3 | 0x2000000;
    *(_BYTE *)(result + 208) = v29;
    return result;
  }
LABEL_53:
  v28 = *(_QWORD *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 212) = v3;
  *(_QWORD *)(result + 160) = v28;
  if ((*(_DWORD *)(a2 + 212) & 0x2000000) != 0)
    goto LABEL_54;
  return result;
}

uint64_t sub_10167D970(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centerOfMassAccelZAmplitudeBackwards", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "integratedAngleYg", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "integratedAngleYgBackwards", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "integratedCenterOfAccelZMaxBackwards", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "integratedRotationAxisWZ", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "integratedRotationAxisWZForwards", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "integratedRotationRateYBackwards", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "integratedUserAccelTForwards", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "integratedUserAccelY", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "integratedVelocityZ", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "integratedVelocityZBackwards", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "integratedVelocityZForwards", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isValidPeak", *(_BYTE *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "medianCadence", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "rotationAxisWTAmplitudeXForwards", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "rotationRateMaxZForwards", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rotationTMaxZForwards", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "swingAccelAmplitudeYBackwards", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "swingAccelMeanXBackwards", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "userAccelTMeanXBackards", *(double *)(a1 + 192));
    if ((*(_DWORD *)(a1 + 212) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "swingAccelTZMean", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x1000000) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10167DCE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 4u:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 5u:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 6u:
          *(_DWORD *)(a1 + 212) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_100:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 208) = v21;
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10167E41C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 212);
  if ((v4 & 0x40000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 152), 1u);
    v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 120), 2u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 3u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 5u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 200), 7u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 176), 8u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 9u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0xAu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0xBu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0xCu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0xDu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xEu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xFu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 192), 0x10u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0x11u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x12u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x13u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 0x14u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 0x15u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0x16u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0x17u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 184), 0x18u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 208), 0x1Au);
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 160), 0x19u);
  if ((*(_DWORD *)(v3 + 212) & 0x2000000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 208), 0x1Au);
  return result;
}

void sub_10167E718(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1021C62E8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x4122750000000000;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = "clPressureavl.avl";
  *(_QWORD *)(a1 + 208) = "clPressureavl.avl.gz";
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 256), "clPressureavl.avl");
  *(_BYTE *)(a1 + 280) = 0;
  sub_10055D44C(a1 + 288, "clPressure", 1, 1);
  sub_100602438(a1 + 304, a2, (uint64_t)sub_10167F24C, a1);
}

void sub_10167F0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(v13 + 712);
  *(_QWORD *)(v13 + 712) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD **)(v13 + 672);
  if (v21 == (_QWORD *)(v13 + 648))
  {
    v22 = 4;
    v21 = (_QWORD *)(v13 + 648);
  }
  else
  {
    if (!v21)
      goto LABEL_8;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_8:
  if (*(char *)(v13 + 647) < 0)
    operator delete(*(void **)(v13 + 624));
  if (*(char *)(v13 + 623) < 0)
    operator delete(*a11);
  if (*(char *)(v13 + 599) < 0)
    operator delete(*a12);
  sub_100602508(v16);
  sub_10055D4D0(a13);
  sub_10058D200(v14);
  sub_101680338(v15 - 128);
  if (*(char *)(v13 + 103) < 0)
    operator delete(*v18);
  if (*(_BYTE *)(v13 + 56) && *(char *)(v13 + 55) < 0)
    operator delete(*v17);
  v23 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  _Unwind_Resume(a1);
}

void sub_10167F24C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLPressureDataManager::onAvlFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 552), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021C6328);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureDataManager::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021C6328);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureDataManager::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1016855B4(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10167F404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10167F424(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPressureDataManager::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 552), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021C6328);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureDataManager::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021C6328);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureDataManager::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101687158(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10167F5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10167F5FC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPressureDataManager::onManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 552), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021C6328);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureDataManager::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021C6328);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureDataManager::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101686CF4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10167F7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10167F7D4(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15[2];
  char v16;
  std::string __p;
  void *v18[2];
  unsigned __int8 v19;

  sub_1001E4804(v15);
  v2 = v15[0];
  if (byte_10230F978[23] < 0)
    sub_100115CE4(&__p, *(void **)byte_10230F978, *(unint64_t *)&byte_10230F978[8]);
  else
    __p = *(std::string *)byte_10230F978;
  sub_1005F0F40((uint64_t)v2, "CLBaroAltReferencePressureUrl", &__p, (uint64_t)v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = (std::__shared_weak_count *)v15[1];
  if (v15[1])
  {
    v4 = (unint64_t *)((char *)v15[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v19;
  v7 = v19;
  if ((v19 & 0x80u) != 0)
    v6 = (unint64_t)v18[1];
  if (v6)
  {
    sub_1001E4804(&v13);
    v8 = v13;
    if (byte_10230F978[23] < 0)
      sub_100115CE4(&v12, *(void **)byte_10230F978, *(unint64_t *)&byte_10230F978[8]);
    else
      v12 = *(std::string *)byte_10230F978;
    sub_1005F0F40(v8, "CLBaroAltReferencePressureUrl", &v12, (uint64_t)v15);
    sub_100E4C5E8(a1 + 32, (__int128 *)v15);
    if (v16 < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 = v19;
  }
  if ((v7 & 0x80) != 0)
    operator delete(v18[0]);
}

void sub_10167F978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_100261F44((uint64_t)&a15);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(a1);
}

void sub_10167F9FC(uint64_t a1, _QWORD *a2)
{
  std::string::size_type size;
  void **v5;
  std::string::size_type v6;
  char *v7;
  void **v8;
  std::string::size_type v9;
  NSObject *v10;
  std::string *v11;
  std::string *v12;
  double *v13;
  std::string *v14;
  std::string *v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  NSObject *v21;
  std::string *v22;
  std::string *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  std::string v32;
  std::string v33;
  void *__p[2];
  uint64_t v35;
  int v36;
  std::string *v37;
  __int16 v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  _BYTE buf[12];
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;

  if (*(char *)(a1 + 623) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 600), *(_QWORD *)(a1 + 608));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 600);
    v35 = *(_QWORD *)(a1 + 616);
  }
  sub_101682940(a1, (uint64_t)&v33);
  size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (size)
  {
    if (v35 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (v35 >= 0)
      v6 = HIBYTE(v35);
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(&v33, (const std::string::value_type *)v5, v6);
    v7 = (char *)sub_1001FD94C();
    sub_1000B7884(v7, (uint64_t)&v32);
    if (v35 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (v35 >= 0)
      v9 = HIBYTE(v35);
    else
      v9 = (std::string::size_type)__p[1];
    std::string::append(&v32, (const std::string::value_type *)v8, v9);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v11 = &v33;
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
      v12 = &v32;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v32.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v11;
      v43 = 2082;
      v44 = *(double *)&v12;
      v45 = 2050;
      v46 = 0x40AC200000000000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v22 = &v33;
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
      v23 = &v32;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v32.__r_.__value_.__r.__words[0];
      v36 = 136446722;
      v37 = v22;
      v38 = 2082;
      v39 = *(double *)&v23;
      v40 = 2050;
      v41 = 0x40AC200000000000;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,Pressure,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", &v36, 32);
      sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v24);
      if (v24 != buf)
        free(v24);
    }
    *(_QWORD *)(a1 + 704) = *a2;
    v31 = 0x404E000000000000;
    v13 = (double *)(a1 + 304);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v33;
    else
      v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v32;
    else
      v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (sub_100604D40(a1 + 304, (const std::string::value_type *)v14, (const std::string::value_type *)v15, (double *)&v31))
    {
      v30 = sub_101686690(a1);
      v29 = 0.0;
      v16 = sub_1016869D0(a1);
      if (v16 > 604800.0)
        v16 = 604800.0;
      v29 = v16;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v29;
        v43 = 2050;
        v44 = v30;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#CLPDM,AVL file update rate over cellular,%{public}.1lf,wifi,%{public}.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v36 = 134349312;
        v37 = *(std::string **)&v29;
        v38 = 2050;
        v39 = v30;
        LODWORD(v28) = 22;
        v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,AVL file update rate over cellular,%{public}.1lf,wifi,%{public}.1lf", &v36, v28);
        sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v27);
        if (v27 != buf)
          free(v27);
      }
      if ((sub_10060538C((uint64_t)v13, &v29, &v30) & 1) != 0)
      {
        *(double *)buf = *(double *)a2 + 3600.0 + -0.5;
        sub_100605798(v13, (double *)buf);
LABEL_63:
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        goto LABEL_65;
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v20 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#CLPDM,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateSource AVL file updater", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v36) = 0;
        LODWORD(v28) = 2;
        v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateSource AVL file updater", &v36, v28);
        sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v26);
        if (v26 != buf)
          free(v26);
      }
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#CLPDM,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateRate AVl file updater", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(v36) = 0;
      LODWORD(v28) = 2;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateRate AVl file updater", &v36, v28);
      sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v25);
      if (v25 != buf)
        free(v25);
    }
    goto LABEL_63;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v18 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#CLPDM,invalid URL path", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v36) = 0;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,invalid URL path", &v36, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
LABEL_65:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
}

void sub_1016802B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101680338(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_10168037C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1021C62E8;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 2);

  *(_QWORD *)(a1 + 568) = 0;
  sub_1016804DC(a1);
  v3 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD **)(a1 + 672);
  if (v4 == (_QWORD *)(a1 + 648))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 648);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  if (*(char *)(a1 + 647) < 0)
    operator delete(*(void **)(a1 + 624));
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  if (*(char *)(a1 + 599) < 0)
    operator delete(*(void **)(a1 + 576));
  sub_100602508(a1 + 304);
  sub_10055D4D0(a1 + 288);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  v6 = *(void **)(a1 + 160);
  if (v6)
  {
    *(_QWORD *)(a1 + 168) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sub_1016804DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;

  v2 = a1 + 288;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 288) + 16))(a1 + 288);
  HIBYTE(v4) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 681) = v4;
  sub_100605848(a1 + 304);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_10168057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1016805A4(uint64_t a1)
{
  sub_10168037C(a1);
  operator delete();
}

uint64_t sub_1016805C8(double *a1, long double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t result;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  NSObject *v11;
  double v12;
  _BOOL4 v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  uint8_t buf[4];
  _QWORD v19[204];

  v4 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v8 = (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v9 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(_DWORD *)buf = 67109376;
      LODWORD(v19[0]) = v8;
      WORD2(v19[0]) = 1024;
      *(_DWORD *)((char *)v19 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,is latitude finite,%d,is longitude finite,%d", buf, 0xEu);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v15 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Error,Pressure,is latitude finite,%d,is longitude finite,%d", &v17);
      goto LABEL_23;
    }
  }
  else
  {
    if (v4 >= -90.0 && v4 <= 90.0)
    {
      sub_100080DCC(*a2);
      *(_QWORD *)a2 = v5;
      return 1;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v12 = *a1;
      *(_DWORD *)buf = 134283521;
      *(double *)v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,latitude is beyond the valid range,lat,%{private}.7lf", buf, 0xCu);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v14 = *a1;
      LODWORD(v17) = 134283521;
      *(double *)((char *)&v17 + 4) = v14;
      v15 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Error,Pressure,latitude is beyond the valid range,lat,%{private}.7lf", &v17, 12, v17);
LABEL_23:
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLPressureDataManager::isLatLonValid(const double &, double &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10168093C(uint64_t a1, double a2, double a3)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  double v16;
  int8x16_t v17;
  double v18;
  double v19;
  unsigned int v20;
  NSObject *v21;
  char *v22;
  NSObject *v23;
  char *v25;
  char *v26;
  double v27;
  int v28;
  int8x16_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double v63[5];
  int v64;
  double v65;
  __int16 v66;
  double v67;
  uint8_t buf[4];
  double v69;
  __int16 v70;
  double v71;

  sub_1002433B8((uint64_t)v63);
  v48 = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  v49 = _Q1;
  v50 = _Q1;
  v51 = _Q1;
  v45 = 0xFFFF;
  v52 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0xBFF0000000000000;
  v57 = 0xBFF0000000000000;
  v56 = 0;
  v58 = 0x7FFFFFFF;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v62 = 0;
  v28 = 0xFFFF;
  v29 = 0uLL;
  v30 = xmmword_101BAFC90;
  v31 = _Q1;
  v32 = _Q1;
  v33 = _Q1;
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0xBFF0000000000000;
  v38 = 0;
  v39 = 0xBFF0000000000000;
  v40 = 0x7FFFFFFF;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v44 = 0;
  v46 = a2;
  v47 = a3;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#CLPDM,findBestPressureDataIndexFromTile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v64) = 0;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,findBestPressureDataIndexFromTile", &v64, 2);
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLPressureDataManager::findBestPressureDataIndexFromTile(double, double)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
  }
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = 0.0;
    do
    {
      v17 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v12 + 20));
      v29 = vextq_s8(v17, v17, 8uLL);
      sub_10011E258(v63, (uint64_t)&v45, (uint64_t)&v28);
      v19 = v18;
      if (v15)
      {
        v20 = v14;
      }
      else
      {
        v16 = v18;
        v20 = 0;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v21 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        v69 = v19;
        v70 = 2048;
        v71 = v16;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#CLPDM,distance,%f,lastShortDist,%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v64 = 134218240;
        v65 = v19;
        v66 = 2048;
        v67 = v16;
        LODWORD(v27) = 22;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,distance,%f,lastShortDist,%f", COERCE_DOUBLE(&v64), v27);
        sub_100512490("Generic", 1, 0, 2, "uint32_t CLPressureDataManager::findBestPressureDataIndexFromTile(double, double)", "%s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
      if (v19 >= v16)
      {
        v14 = v20;
      }
      else
      {
        v16 = v19;
        v14 = v15;
      }
      ++v15;
      v12 += 28;
    }
    while (v12 != v13);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v23 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v69) = v14;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#CLPDM,pressure grid index,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v64 = 67109120;
    LODWORD(v65) = v14;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,pressure grid index,%d", &v64);
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLPressureDataManager::findBestPressureDataIndexFromTile(double, double)", "%s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
  return v14;
}

uint64_t sub_101680EA0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10;
  NSObject *v11;
  double Current;
  double v13;
  float v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  NSObject *v24;
  float v25;
  float v26;
  NSObject *v27;
  double v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  char *v36;
  NSObject *v37;
  double v38;
  char v39;
  NSObject *v40;
  NSObject *v41;
  int v42;
  _QWORD *v43;
  NSObject *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  double v54;
  char *v55;
  double v56;
  double v57;
  double v58;
  int v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  _BYTE buf[24];
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;

  v57 = a5;
  v58 = a4;
  v10 = a1 + 288;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 288) + 16))(a1 + 288);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#CLPDM,GetPressure,lat,%f,lon,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v59 = 134218240;
    v60 = a4;
    v61 = 2048;
    v62 = a5;
    LODWORD(v56) = 22;
    v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,GetPressure,lat,%f,lon,%f", COERCE_DOUBLE(&v59), v56);
    sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v48);
    if (v48 != buf)
      free(v48);
  }
  if ((sub_1016805C8(&v58, &v57) & 1) != 0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (*(double *)(a1 + 192) >= 7200.0 || (v13 = *(double *)(a1 + 112), v13 == 0.0) || Current - v13 >= 60.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v31 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_QWORD *)(a1 + 112);
        v33 = *(_QWORD *)(a1 + 192);
        *(_DWORD *)buf = 134283777;
        *(_QWORD *)&buf[4] = v32;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#CLPDM,#Warning,GetPressure,downloadTime,%{private}.2lf,tileAge,%{private}.2lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_45;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v34 = *(double *)(a1 + 112);
      v35 = *(double *)(a1 + 192);
      v59 = 134283777;
      v60 = v34;
      v61 = 2049;
      v62 = v35;
      LODWORD(v56) = 22;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,#Warning,GetPressure,downloadTime,%{private}.2lf,tileAge,%{private}.2lf", &v59, *(_QWORD *)&v56);
      sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v36);
    }
    else
    {
      v14 = *(float *)(a1 + 156);
      v15 = *(float *)(a1 + 152);
      sub_100080DCC(v15);
      v17 = v16;
      sub_100080DCC(v15 + 0.05);
      v19 = v18;
      v20 = v14;
      v21 = v14 + 0.05;
      if (v20 <= a4 && v21 > a4)
      {
        v22 = v57;
        if (v57 >= v17 && v57 < v18)
        {
          v23 = sub_10168093C(a1, a4, v57);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v24 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,grid index,%u", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            v59 = 67109120;
            LODWORD(v60) = v23;
            v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,GetPressure,grid index,%u", &v59);
            sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v53);
            if (v53 != buf)
              free(v53);
          }
          if (v23 < *(_DWORD *)(a1 + 184))
          {
            v25 = a4;
            v26 = v22;
            *(float *)(a2 + 40) = v26;
            *(float *)(a2 + 44) = v25;
            *(_OWORD *)(a2 + 24) = *(_OWORD *)(*(_QWORD *)(a1 + 160) + 28 * v23);
            *(_QWORD *)a2 = *(_QWORD *)(a1 + 104);
            *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 192);
            *(double *)(a2 + 8) = sub_1001FCBB4();
            *(_DWORD *)(a2 + 48) = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 28 * v23 + 16);
            *(_BYTE *)(a1 + 680) = 0;
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            v27 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              v28 = *(float *)(a2 + 24);
              *(_DWORD *)buf = 134284033;
              *(double *)&buf[4] = a4;
              *(_WORD *)&buf[12] = 2049;
              *(double *)&buf[14] = v22;
              *(_WORD *)&buf[22] = 2049;
              v72 = v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,lat,%{private}.7lf,lon,%{private}.7lf,Pressure,%{private}f", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021C6348);
              v54 = *(float *)(a2 + 24);
              v59 = 134284033;
              v60 = a4;
              v61 = 2049;
              v62 = v22;
              v63 = 2049;
              v64 = v54;
              LODWORD(v56) = 32;
              v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,GetPressure,lat,%{private}.7lf,lon,%{private}.7lf,Pressure,%{private}f", &v59, *(_QWORD *)&v56);
              sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v55);
              if (v55 != buf)
                free(v55);
            }
            v29 = 0;
            goto LABEL_71;
          }
        }
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v37 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284801;
        *(double *)&buf[4] = a4;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2049;
        v72 = v20;
        v73 = 2049;
        v74 = v21;
        v75 = 2049;
        v76 = v17;
        v77 = 2049;
        v78 = v19;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,pressure not retrived in past for,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", buf, 0x3Eu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_45:
        v38 = v57;
        v39 = sub_1000B78D8(a1 + 216, a4, v57);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v40 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283777;
          *(double *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v38;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v59 = 134283777;
          v60 = a4;
          v61 = 2049;
          v62 = v38;
          LODWORD(v56) = 22;
          v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,GetPressure,lat,%{private}.7lf,lon,%{private}.7lf", &v59, *(_QWORD *)&v56);
          sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v50);
          if (v50 != buf)
            free(v50);
        }
        if ((v39 & 1) != 0)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v41 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "#CLPDM,GetPressure,tile available", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            LOWORD(v59) = 0;
            LODWORD(v56) = 2;
            v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,GetPressure,tile available", &v59, *(_QWORD *)&v56);
            sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v51);
            if (v51 != buf)
              free(v51);
          }
          *(_BYTE *)(a1 + 680) = 1;
          *(double *)(a1 + 688) = a4;
          *(double *)(a1 + 696) = v38;
          v42 = sub_101681DDC(a1, a4, v38);
          v43 = (_QWORD *)(a1 + 648);
          if (v42)
          {
            sub_1016828A8(v43, a3);
            v29 = 3;
            goto LABEL_71;
          }
          v45 = *(_QWORD **)(a1 + 672);
          *(_QWORD *)(a1 + 672) = 0;
          if (v45 == v43)
          {
            v46 = 4;
            goto LABEL_69;
          }
          if (v45)
          {
            v46 = 5;
            v43 = v45;
LABEL_69:
            (*(void (**)(void))(*v43 + 8 * v46))();
          }
        }
        else
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v44 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,tile not available", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            LOWORD(v59) = 0;
            LODWORD(v56) = 2;
            v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,GetPressure,tile not available", &v59, *(_QWORD *)&v56);
            sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v52);
            if (v52 != buf)
              free(v52);
          }
          *(_QWORD *)&buf[15] = 0;
          *(_QWORD *)&buf[7] = 0;
          *(_BYTE *)(a1 + 680) = 0;
          *(_QWORD *)(a1 + 696) = 0;
          *(_OWORD *)(a1 + 681) = *(_OWORD *)buf;
          if (sub_100203764(a1 + 216))
          {
            *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
            sub_10167F9FC(a1, buf);
            v29 = 4;
            goto LABEL_71;
          }
        }
        v29 = 1;
        goto LABEL_71;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v59 = 134284801;
      v60 = a4;
      v61 = 2049;
      v62 = v57;
      v63 = 2049;
      v64 = v20;
      v65 = 2049;
      v66 = v21;
      v67 = 2049;
      v68 = v17;
      v69 = 2049;
      v70 = v19;
      LODWORD(v56) = 62;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,GetPressure,pressure not retrived in past for,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", &v59, *(_QWORD *)&v56);
      sub_100512490("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v36);
    }
    if (v36 != buf)
      free(v36);
    goto LABEL_45;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v30 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    *(double *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = v57;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#CLPDM,GetPressure,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v59 = 134283777;
    v60 = a4;
    v61 = 2049;
    v62 = v57;
    LODWORD(v56) = 22;
    v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,GetPressure,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", &v59, *(_QWORD *)&v56);
    sub_100512490("Generic", 1, 0, 0, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v49);
    if (v49 != buf)
      free(v49);
  }
  v29 = 2;
LABEL_71:
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  return v29;
}

void sub_101681D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101681DDC(uint64_t a1, double a2, double a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  void **v8;
  void **v9;
  NSURL *v10;
  id v11;
  void *v12;
  NSURLSessionDataTask *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  NSObject *v22;
  void **v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[5];
  void *__p[2];
  unsigned __int8 v30;
  void *v31[2];
  unsigned __int8 v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void **v37;
  uint8_t buf[4];
  void **v39;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  if ((sub_1016846E0((uint64_t)&v33, 0, a2, a3, 0.05) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLPDM,#RefPressureDataDownload,invalid tile path to download", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v31[0]) = 0;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#RefPressureDataDownload,invalid tile path to download", v31, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v16);
    goto LABEL_77;
  }
  v4 = HIBYTE(v35);
  if (v35 < 0)
    v4 = v34;
  if (!v4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v17 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLPDM,#RefPressureDataDownload,invalid path", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v31[0]) = 0;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#RefPressureDataDownload,invalid path", v31, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v16);
LABEL_77:
    if (v16 != (char *)buf)
      free(v16);
LABEL_38:
    v14 = 0;
    goto LABEL_71;
  }
  sub_101682940(a1, (uint64_t)v31);
  v5 = v32;
  if ((v32 & 0x80u) != 0)
    v5 = (unint64_t)v31[1];
  if (!v5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,invalid URL path", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(__p[0]) = 0;
      v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,invalid URL path", __p, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
    v14 = 0;
    goto LABEL_69;
  }
  sub_1003625F4((const void **)v31, (const void **)&v33, (uint64_t)__p);
  if ((v30 & 0x80u) == 0)
    v6 = v30;
  else
    v6 = (unint64_t)__p[1];
  if (!v6)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLPDM,#Warning,#RefPressureDataDownload,invalid server", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_66;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v36) = 0;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Warning,#RefPressureDataDownload,invalid server", &v36, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v20);
    goto LABEL_92;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = __p;
    if ((v30 & 0x80u) != 0)
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#CLPDM,#RefPressureDataDownload,urlString,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v24 = __p;
    if ((v30 & 0x80u) != 0)
      v24 = (void **)__p[0];
    v36 = 136380675;
    v37 = v24;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#RefPressureDataDownload,urlString,%{private}s", &v36, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
  }
  if ((v30 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  if (!v10)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#CLPDM,#RefPressureDataDownload,Invalid NSurl", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_66;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v36) = 0;
    LODWORD(v27) = 2;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#RefPressureDataDownload,Invalid NSurl", &v36, v27);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v20);
    goto LABEL_92;
  }
  v11 = objc_msgSend(objc_alloc((Class)NSMutableURLRequest), "initWithURL:", v10);
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "setHTTPMethod:", CFSTR("GET"));
    objc_msgSend(v12, "setAllowsCellularAccess:", 1);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_101684798;
    v28[3] = &unk_1021C62F8;
    v28[4] = a1;
    v13 = -[NSURLSession dataTaskWithRequest:completionHandler:](+[NSURLSession sharedSession](NSURLSession, "sharedSession"), "dataTaskWithRequest:completionHandler:", v12, v28);
    -[NSURLSessionDataTask setTaskDescription:](v13, "setTaskDescription:", CFSTR("ReferencePressureDownload"));
    -[NSURLSessionDataTask resume](v13, "resume");
    v14 = 1;
    goto LABEL_67;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v22 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLPDM,#Warning,#RefPressureDataDownload,failed to form request", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v36) = 0;
    LODWORD(v27) = 2;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Warning,#RefPressureDataDownload,failed to form request", &v36, v27);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v20);
LABEL_92:
    if (v20 != (char *)buf)
      free(v20);
  }
LABEL_66:
  v14 = 0;
LABEL_67:
  if ((char)v30 < 0)
    operator delete(__p[0]);
LABEL_69:
  if ((char)v32 < 0)
    operator delete(v31[0]);
LABEL_71:
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  return v14;
}

void sub_10168282C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016828A8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_101687954(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_101682940(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;

  sub_10167F7D4(a1);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = "Not set";
    if (*(_BYTE *)(a1 + 56))
    {
      v6 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v6 = *(const char **)v6;
    }
    else
    {
      v6 = "Not set";
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (*(_QWORD *)(a1 + 88))
        v5 = *(const char **)(a1 + 80);
      else
        v5 = "Not set";
    }
    else if (*(_BYTE *)(a1 + 103))
    {
      v5 = (const char *)(a1 + 80);
    }
    *(_DWORD *)buf = 136315394;
    v18 = v6;
    v19 = 2080;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure data URL,default,%s,MA-OTA,%s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v10 = "Not set";
    if (*(_BYTE *)(a1 + 56))
    {
      v11 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "Not set";
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (*(_QWORD *)(a1 + 88))
        v10 = *(const char **)(a1 + 80);
      else
        v10 = "Not set";
    }
    else if (*(_BYTE *)(a1 + 103))
    {
      v10 = (const char *)(a1 + 80);
    }
    v13 = 136315394;
    v14 = v11;
    v15 = 2080;
    v16 = v10;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,Pressure data URL,default,%s,MA-OTA,%s", (const char *)&v13, 22);
    sub_100512490("Generic", 1, 0, 2, "std::string CLPressureDataManager::getPressureDataServerUrl()", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      v7 = a1 + 32;
LABEL_22:
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v7 + 16);
      return;
    }
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      v7 = a1 + 80;
      goto LABEL_22;
    }
    v8 = *(void **)(a1 + 80);
    v9 = *(_QWORD *)(a1 + 88);
  }
  sub_100115CE4((_BYTE *)a2, v8, v9);
}

void sub_101682C04(uint64_t a1, int a2, uint64_t a3, double a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  NSObject *v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 *v16;
  int v17;
  __int128 v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint8_t *v37;
  uint64_t v38;
  _OWORD v39[3];
  uint64_t v40;
  int v41;
  _BYTE v42[10];
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  uint8_t buf[4];
  _BYTE v53[10];
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  double v60;
  __int16 v61;
  uint64_t v62;

  LODWORD(v40) = 0;
  memset(v39, 0, sizeof(v39));
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v9 = "FAIL";
    if (a2)
      v9 = "SUCCESS";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v53 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#CLPDM,sendPressureDataToRequester,status,%s", buf, 0xCu);
  }
  v10 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v30 = "FAIL";
    if (a2)
      v30 = "SUCCESS";
    v41 = 136315138;
    *(_QWORD *)v42 = v30;
    v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,sendPressureDataToRequester,status,%s", (const char *)&v41);
    v10 = sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
  }
  if (*(_QWORD *)(a1 + 672))
  {
    if ((a2 & 1) != 0)
    {
      if (sub_101683684(v10, a3, (uint64_t *)(a1 + 104)))
      {
        *(double *)(a1 + 192) = vabdd_f64(a4, *(double *)(a1 + 104));
        v11 = sub_10168093C(a1, *(double *)(a1 + 688), *(double *)(a1 + 696));
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v13 = *(unsigned __int8 *)(a1 + 680);
          v14 = *(_DWORD *)(a1 + 184);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v53 = v13;
          *(_WORD *)&v53[4] = 1024;
          *(_DWORD *)&v53[6] = v11;
          LOWORD(v54) = 1024;
          *(_DWORD *)((char *)&v54 + 2) = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#CLPDM,sendPressureDataToRequester,send to Baro,isNeeded,%d,index,%d,size,%u", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v32 = *(unsigned __int8 *)(a1 + 680);
          v33 = *(_DWORD *)(a1 + 184);
          v41 = 67109632;
          *(_DWORD *)v42 = v32;
          *(_WORD *)&v42[4] = 1024;
          *(_DWORD *)&v42[6] = v11;
          LOWORD(v43) = 1024;
          *(_DWORD *)((char *)&v43 + 2) = v33;
          v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,sendPressureDataToRequester,send to Baro,isNeeded,%d,index,%d,size,%u", &v41, 20, LODWORD(v39[0]));
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v34);
          if (v34 != (char *)buf)
            free(v34);
        }
        if (v11 < *(_DWORD *)(a1 + 184))
        {
          v15 = *(_QWORD *)(a1 + 160);
          if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 168) - v15) >> 2) <= (unint64_t)v11)
            sub_1002EAEB0();
          v16 = (__int128 *)(v15 + 28 * v11);
          v17 = *((_DWORD *)v16 + 4);
          v18 = *v16;
          *((int32x2_t *)&v39[2] + 1) = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 688)));
          *(_OWORD *)((char *)&v39[1] + 8) = v18;
          *(_QWORD *)&v39[0] = *(_QWORD *)(a1 + 104);
          v19 = sub_1001FCBB4();
          v20 = *(_QWORD *)(a1 + 192);
          *((double *)v39 + 1) = v19;
          *(_QWORD *)&v39[1] = v20;
          LODWORD(v40) = v17;
          *(_BYTE *)(a1 + 680) = 0;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v21 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v22 = *(_QWORD *)(a1 + 192);
            *(_DWORD *)buf = 134284801;
            *(double *)v53 = *((float *)&v39[2] + 3);
            *(_WORD *)&v53[8] = 2049;
            v54 = *((float *)&v39[2] + 2);
            v55 = 2049;
            v56 = *((float *)&v39[1] + 2);
            v57 = 2049;
            v58 = *(_QWORD *)&v39[0];
            v59 = 2049;
            v60 = a4;
            v61 = 2049;
            v62 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#CLPDM,sendPressureDataToRequester,lat,%{private}.7lf,lon,%{private}.7lf,Pressure,%{private}.3lf,CreationTime,%{private}.3lf,tileDownloadHttpHeaderTime_s,%{private}.3lf,tileAge,%{private}.3lf", buf, 0x3Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            v35 = *(_QWORD *)(a1 + 192);
            v41 = 134284801;
            *(double *)v42 = *((float *)&v39[2] + 3);
            *(_WORD *)&v42[8] = 2049;
            v43 = *((float *)&v39[2] + 2);
            v44 = 2049;
            v45 = *((float *)&v39[1] + 2);
            v46 = 2049;
            v47 = *(_QWORD *)&v39[0];
            v48 = 2049;
            v49 = a4;
            v50 = 2049;
            v51 = v35;
            LODWORD(v38) = 62;
            v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,sendPressureDataToRequester,lat,%{private}.7lf,lon,%{private}.7lf,Pressure,%{private}.3lf,CreationTime,%{private}.3lf,tileDownloadHttpHeaderTime_s,%{private}.3lf,tileAge,%{private}.3lf", &v41, v38);
            sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v36);
            if (v36 != (char *)buf)
              free(v36);
          }
          if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || a4 <= 0.0
            || (*(_QWORD *)&v39[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
            || *(double *)v39 <= 0.0
            || a4 - *(double *)v39 < 7200.0)
          {
            buf[0] = 1;
LABEL_60:
            v29 = *(_QWORD *)(a1 + 672);
            if (!v29)
              sub_10025FD1C();
            (*(void (**)(uint64_t, _OWORD *, uint8_t *))(*(_QWORD *)v29 + 48))(v29, v39, buf);
            return;
          }
LABEL_59:
          buf[0] = 0;
          goto LABEL_60;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v28 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,send to Baro,Invalid Data", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_59;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,sendPressureDataToRequester,send to Baro,Invalid Data", &v41, v38);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v27 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,ProtoParse fails", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_59;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v41) = 0;
        v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,sendPressureDataToRequester,ProtoParse fails", &v41, 2);
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v25 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,DataDownload fails", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_59;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(v41) = 0;
      v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,sendPressureDataToRequester,DataDownload fails", &v41, 2);
    }
    v37 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 0, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v26);
    if (v37 != buf)
      free(v37);
    goto LABEL_59;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v23 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,callback invalid", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v41) = 0;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,sendPressureDataToRequester,callback invalid", &v41, 2, v39[0], v39[1], v39[2], v40);
    sub_100512490("Generic", 1, 0, 0, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
}

BOOL sub_101683684(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  int v11;
  NSObject *v12;
  _BOOL8 result;
  char *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  char *v20;
  float v21;
  NSObject *v22;
  char *v23;
  float v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  float *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  float *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  char *v48;
  NSObject *v49;
  uint64_t v50;
  int v51;
  int v52;
  const char *v53;
  const char *v54;
  double v55;
  double v56;
  int v57;
  char *v58;
  uint64_t v59;
  int v60;
  int v61;
  const char *v62;
  const char *v63;
  double v64;
  double v65;
  int v66;
  char *v67;
  uint64_t v68;
  int v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  int v83;
  int v84;
  float64x2_t v85;
  _BYTE v86[32];
  int v87;
  uint8_t buf[4];
  _BYTE v89[20];
  _BYTE v90[10];
  _BYTE v91[10];
  __int128 v92;
  double v93;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#CLPDM,readProtobufMessageToData,readProtobuf", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v83) = 0;
    v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,readProtobufMessageToData,readProtobuf", &v83, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v58);
    if (v58 != (char *)buf)
      free(v58);
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102314110 + 8);
  if ((*(_BYTE *)(v6 + 20) & 1) != 0)
  {
    *a3 = *(_QWORD *)(v6 + 8);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail has_cf_absolute_time_s", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(v83) = 0;
      LODWORD(v68) = 2;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,fail has_cf_absolute_time_s", &v83, v68);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if ((*(_BYTE *)(a2 + 76) & 2) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail status", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(v83) = 0;
      LODWORD(v68) = 2;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,fail status", &v83, v68);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    goto LABEL_41;
  }
  v11 = *(_DWORD *)(a2 + 16);
  if (!v11)
  {
    *((_DWORD *)a3 + 4) = 0;
LABEL_41:
    if ((*(_BYTE *)(a2 + 76) & 4) != 0)
    {
      *((_DWORD *)a3 + 5) = *(_DWORD *)(a2 + 20);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v15 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail version", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v83) = 0;
        LODWORD(v68) = 2;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,fail version", &v83, v68);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
    }
    if ((*(_BYTE *)(a2 + 76) & 8) != 0)
    {
      std::string::operator=((std::string *)a3 + 1, *(const std::string **)(a2 + 24));
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail tile_id", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v83) = 0;
        LODWORD(v68) = 2;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,fail tile_id", &v83, v68);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
    }
    if ((*(_BYTE *)(a2 + 76) & 0x10) != 0)
    {
      v21 = *(double *)(a2 + 32);
      *((float *)a3 + 12) = v21;
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v19 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,invalid swLongitude", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v83) = 0;
        LODWORD(v68) = 2;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,invalid swLongitude", &v83, v68);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
    }
    if ((*(_BYTE *)(a2 + 76) & 0x20) != 0)
    {
      v24 = *(double *)(a2 + 40);
      *((float *)a3 + 13) = v24;
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,invalid swLatitude", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        LOWORD(v83) = 0;
        LODWORD(v68) = 2;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,invalid swLatitude", &v83, v68);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
    }
    v25 = *(unsigned int *)(a2 + 56);
    *((_DWORD *)a3 + 20) = v25;
    v26 = a3 + 7;
    sub_101685570((uint64_t)(a3 + 7), v25);
    if (*((_DWORD *)a3 + 20))
    {
      v27 = 0;
      v28 = 24;
      do
      {
        if (*(_DWORD *)(a2 + 56) <= (signed int)v27)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
          v29 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v69, v29);
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        }
        sub_10168D980(&v83, *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (int)v27));
        v30 = *v26 + v28;
        *(float32x4_t *)(v30 - 24) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v85), *(float64x2_t *)v86);
        *(_DWORD *)(v30 - 8) = v87;
        *(float32x2_t *)(v30 - 4) = vcvt_f32_f64(*(float64x2_t *)&v86[16]);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v31 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v32 = (float *)(*v26 + v28);
          v33 = *(v32 - 6);
          v34 = *(v32 - 5);
          v35 = *(v32 - 4);
          v36 = *(v32 - 3);
          v37 = *((_DWORD *)v32 - 2);
          v38 = *(v32 - 1);
          v39 = *v32;
          *(_DWORD *)buf = 134219521;
          *(double *)v89 = v33;
          *(_WORD *)&v89[8] = 2048;
          *(double *)&v89[10] = v34;
          *(_WORD *)&v89[18] = 2048;
          *(double *)v90 = v35;
          *(_WORD *)&v90[8] = 2048;
          *(double *)v91 = v36;
          *(_WORD *)&v91[8] = 1024;
          LODWORD(v92) = v37;
          WORD2(v92) = 2049;
          *(double *)((char *)&v92 + 6) = v38;
          HIWORD(v92) = 2049;
          v93 = v39;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#CLPDM,readProtobuf,TileGrid,pressurePa,%.7lf,pressureUnc,%.7lf,PressureRate,%.7lf,PressureRateUnc,%.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf", buf, 0x44u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v40 = (float *)(*v26 + v28);
          v41 = *(v40 - 6);
          v42 = *(v40 - 5);
          v43 = *(v40 - 4);
          v44 = *(v40 - 3);
          v45 = *((_DWORD *)v40 - 2);
          v46 = *(v40 - 1);
          v47 = *v40;
          v69 = 134219521;
          v70 = v41;
          v71 = 2048;
          v72 = v42;
          v73 = 2048;
          v74 = v43;
          v75 = 2048;
          v76 = v44;
          v77 = 1024;
          v78 = v45;
          v79 = 2049;
          v80 = v46;
          v81 = 2049;
          v82 = v47;
          LODWORD(v68) = 68;
          v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,readProtobuf,TileGrid,pressurePa,%.7lf,pressureUnc,%.7lf,PressureRate,%.7lf,PressureRateUnc,%.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf", &v69, v68);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v48);
          if (v48 != (char *)buf)
            free(v48);
        }
        sub_10168D984((wireless_diagnostics::google::protobuf::MessageLite *)&v83);
        ++v27;
        v28 += 28;
      }
      while (v27 < *((_DWORD *)a3 + 20));
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v49 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v50 = *a3;
      v52 = *((_DWORD *)a3 + 4);
      v51 = *((_DWORD *)a3 + 5);
      v53 = (const char *)(a3 + 3);
      v54 = (const char *)a3[3];
      if (!v54)
        v54 = "FAIL TILEID";
      if (*((char *)a3 + 47) < 0)
        v53 = v54;
      v55 = *((float *)a3 + 13);
      v56 = *((float *)a3 + 12);
      v57 = *((_DWORD *)a3 + 20);
      *(_DWORD *)buf = 67110659;
      *(_DWORD *)v89 = v51;
      *(_WORD *)&v89[4] = 2048;
      *(_QWORD *)&v89[6] = v50;
      *(_WORD *)&v89[14] = 1024;
      *(_DWORD *)&v89[16] = v52;
      *(_WORD *)v90 = 2080;
      *(_QWORD *)&v90[2] = v53;
      *(_WORD *)v91 = 2049;
      *(double *)&v91[2] = v55;
      LOWORD(v92) = 2049;
      *(double *)((char *)&v92 + 2) = v56;
      WORD5(v92) = 1024;
      HIDWORD(v92) = v57;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#CLPDM,readProtobuf,TileData,version,%d,dataCreation,%f,status,%d,tileId,%s,SwLat,%{private}.7lf,SwLong,%{private}.7lf,Size,%u", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v59 = *a3;
      v61 = *((_DWORD *)a3 + 4);
      v60 = *((_DWORD *)a3 + 5);
      v62 = (const char *)(a3 + 3);
      v63 = (const char *)a3[3];
      if (!v63)
        v63 = "FAIL TILEID";
      if (*((char *)a3 + 47) < 0)
        v62 = v63;
      v64 = *((float *)a3 + 13);
      v65 = *((float *)a3 + 12);
      v66 = *((_DWORD *)a3 + 20);
      v83 = 67110659;
      v84 = v60;
      LOWORD(v85.f64[0]) = 2048;
      *(_QWORD *)((char *)v85.f64 + 2) = v59;
      WORD1(v85.f64[1]) = 1024;
      HIDWORD(v85.f64[1]) = v61;
      *(_WORD *)v86 = 2080;
      *(_QWORD *)&v86[2] = v62;
      *(_WORD *)&v86[10] = 2049;
      *(double *)&v86[12] = v64;
      *(_WORD *)&v86[20] = 2049;
      *(double *)&v86[22] = v65;
      *(_WORD *)&v86[30] = 1024;
      v87 = v66;
      LODWORD(v68) = 60;
      v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,readProtobuf,TileData,version,%d,dataCreation,%f,status,%d,tileId,%s,SwLat,%{private}.7lf,SwLong,%{private}.7lf,Size,%u", &v83, v68);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v67);
      if (v67 != (char *)buf)
        free(v67);
    }
    *((CFAbsoluteTime *)a3 + 1) = CFAbsoluteTimeGetCurrent();
    return 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v89 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail,status,%u", buf, 8u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v83 = 67109120;
    v84 = v11;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,readProtobuf,fail,status,%u", &v83);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
    return 0;
  }
  return result;
}

void sub_1016846AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10168D984((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016846E0(uint64_t a1, int a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v8;
  char __str[64];

  v8 = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    **(_BYTE **)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
  }
  v6 = sub_101685198((int *)&v8, (int *)&v8 + 1, a2, a3, a4, a5);
  if ((_DWORD)v6)
  {
    snprintf(__str, 0x40uLL, "%d_%d", v8, HIDWORD(v8));
    std::string::assign((std::string *)a1, __str);
  }
  return v6;
}

uint64_t sub_101684798(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSObject *v8;
  double v9;
  uint64_t v10;
  double v11;
  char *v12;
  NSObject *v13;
  double v14;
  void *v15;
  NSObject *v16;
  double v17;
  id v18;
  double v19;
  double v20;
  NSObject *v21;
  char *v22;
  NSObject *v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  double v30;
  char *v31;
  uint64_t v32;
  _BYTE v33[80];
  int v34;
  double v35;
  int v36;
  double v37;

  v7 = *(_QWORD *)(a1 + 32);
  sub_10168CF58((uint64_t)v33);
  if (a4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v9 = COERCE_DOUBLE(objc_msgSend(objc_msgSend(a4, "localizedDescription"), "UTF8String"));
      v36 = 136380675;
      v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,#RefPressureDataDownload,server error,%{private}s", (uint8_t *)&v36, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_35;
    bzero(&v36, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v10 = qword_1022A0028;
    v11 = COERCE_DOUBLE(objc_msgSend(objc_msgSend(a4, "localizedDescription"), "UTF8String"));
    v34 = 136380675;
    v35 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, v10, 1, "#CLPDM,#Warning,#RefPressureDataDownload,server error,%{private}s", &v34, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v12);
    if (v12 == (char *)&v36)
      goto LABEL_35;
    goto LABEL_10;
  }
  if ((objc_opt_respondsToSelector(a3, "statusCode") & 1) == 0)
    goto LABEL_35;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v36) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#CLPDM,#RefPressureDataDownload,server response received", (uint8_t *)&v36, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v36, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v34) = 0;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#RefPressureDataDownload,server response received", &v34, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v28);
    if (v28 != (char *)&v36)
      free(v28);
  }
  v14 = COERCE_DOUBLE(objc_msgSend(a3, "statusCode"));
  if (*(_QWORD *)&v14 != 200)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v36 = 134349056;
      v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,#RefPressureDataDownload,FAILED code,%{public}ld", (uint8_t *)&v36, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_35;
    bzero(&v36, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v34 = 134349056;
    v35 = v14;
    LODWORD(v32) = 12;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,#RefPressureDataDownload,FAILED code,%{public}ld", &v34, v32);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v12);
    if (v12 == (char *)&v36)
      goto LABEL_35;
LABEL_10:
    free(v12);
LABEL_35:
    sub_101682C04(v7, 0, (uint64_t)v33, 0.0);
    return sub_10168E308(v33);
  }
  v15 = *(void **)(v7 + 64);
  if (!v15)
  {
    *(_QWORD *)(v7 + 64) = objc_alloc_init((Class)NSDateFormatter);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(double *)(v7 + 64);
      v36 = 134217984;
      v37 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#CLPDM,#RefPressureDataDownload,fDateFormatter,%p", (uint8_t *)&v36, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v36, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v30 = *(double *)(v7 + 64);
      v34 = 134217984;
      v35 = v30;
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#RefPressureDataDownload,fDateFormatter,%p", &v34);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v31);
      if (v31 != (char *)&v36)
        free(v31);
    }
    v15 = *(void **)(v7 + 64);
    if (!v15)
      goto LABEL_43;
  }
  objc_msgSend(v15, "setDateFormat:", CFSTR("EEE',' dd MMM yyyy HH':'mm':'ss zzz"));
  v18 = objc_msgSend(*(id *)(v7 + 64), "dateFromString:", objc_msgSend(objc_msgSend(a3, "allHeaderFields"), "objectForKey:", CFSTR("Date")));
  if (v18)
  {
    objc_msgSend(v18, "timeIntervalSinceReferenceDate");
    v20 = v19;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v36 = 134283521;
      v37 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#CLPDM,#RefPressureDataDownload,tileDownloadTime,%{private}.3lf", (uint8_t *)&v36, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v36, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v34 = 134283521;
      v35 = v20;
      LODWORD(v32) = 12;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#RefPressureDataDownload,tileDownloadTime,%{private}.3lf", &v34, v32);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v22);
      if (v22 != (char *)&v36)
        free(v22);
    }
  }
  else
  {
LABEL_43:
    v20 = 0.0;
  }
  v25 = objc_msgSend(a2, "length");
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v26 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v36 = 67109120;
    LODWORD(v37) = v25;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#CLPDM,#RefPressureDataDownload,COMPLETED,len,%d", (uint8_t *)&v36, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v36, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v34 = 67109120;
    LODWORD(v35) = v25;
    v29 = (char *)_os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,#RefPressureDataDownload,COMPLETED,len,%d", &v34);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v29);
    if (v29 != (char *)&v36)
      free(v29);
  }
  objc_msgSend(a2, "length");
  v27 = &v33[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0)];
  objc_msgSend(a2, "getBytes:length:", v27, objc_msgSend(a2, "length"));
  wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray((wireless_diagnostics::google::protobuf::MessageLite *)v33, v27, v25);
  sub_101682C04(v7, 1, (uint64_t)v33, v20);
  return sub_10168E308(v33);
}

void sub_101685148(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10168E308(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101685198(int *a1, int *a2, int a3, double a4, double a5, double a6)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t result;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  NSObject *v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  uint8_t *v27;
  double v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;

  v28 = a5;
  v29 = a4;
  if ((sub_1016805C8(&v29, &v28) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      v39 = a4;
      v40 = 2049;
      v41 = v28;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,getTileYX,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v19)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v30 = 134283777;
    v31 = a4;
    v32 = 2049;
    v33 = v28;
    v20 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Error,Pressure,getTileYX,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", &v30, 22);
LABEL_28:
    v27 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLPressureDataManager::getTileYX(double, double, int &, int &, int, double)", "%s\n", v20);
    if (v27 != buf)
      free(v27);
    return 0;
  }
  v11 = (double)a3 + 0.05;
  v12 = a4 + v11 * a6;
  v13 = v28 + v11 * a6;
  if (a3 <= 0)
    v14 = a4;
  else
    v14 = v12;
  if (a3 <= 0)
    v15 = v28;
  else
    v15 = v13;
  *a2 = (int)(round(floor(v15 / 0.05) * 0.05 / 0.0001) + 1800000.0);
  v16 = (int)(round(floor(v14 / 0.05) * 0.05 / 0.0001) + 900000.0);
  *a1 = v16;
  if ((*a2 & 0x80000000) == 0 && (v16 & 0x80000000) == 0)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    v22 = *a2;
    v23 = *a1;
    *(_DWORD *)buf = 134284289;
    v39 = v14;
    v40 = 2049;
    v41 = v15;
    v42 = 1025;
    v43 = v22;
    v44 = 1025;
    v45 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,getTileYX,bad x or y,lat,%{private}.7lf,lon%{private}.7lf,x,%{private}d,y,%{private}d", buf, 0x22u);
  }
  v24 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v24)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v25 = *a2;
    v26 = *a1;
    v30 = 134284289;
    v31 = v14;
    v32 = 2049;
    v33 = v15;
    v34 = 1025;
    v35 = v25;
    v36 = 1025;
    v37 = v26;
    v20 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Error,Pressure,getTileYX,bad x or y,lat,%{private}.7lf,lon%{private}.7lf,x,%{private}d,y,%{private}d", &v30, 34);
    goto LABEL_28;
  }
  return result;
}

void sub_101685570(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_101687AC8((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 28 * a2;
  }
}

uint64_t sub_1016855B4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  void **v15;
  NSObject *v16;
  void **v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  char *v26;
  std::string *v27;
  NSObject *v28;
  void **v29;
  std::string *v30;
  std::string *v31;
  NSObject *v32;
  std::string *v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  void **v42;
  const char *v43;
  char *v44;
  void **v45;
  std::string *v46;
  const char *v47;
  char *v48;
  const char *v49;
  char *v50;
  void **v51;
  const char *v52;
  char *v53;
  std::string *v54;
  const char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  std::string *v59;
  __int16 v60;
  std::string *v61;
  std::string v62;
  void *__p[2];
  char v64;
  _BYTE buf[1632];

  v6 = a1 + 288;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 288) + 16))(a1 + 288);
  if (a2)
  {
    switch(a3)
    {
      case 0:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v7 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,NONE", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,NONE", __p, 2);
          v9 = (char *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
          goto LABEL_66;
        }
        break;
      case 1:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v21 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,STARTED", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,STARTED", __p, 2);
          v41 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        *(CFAbsoluteTime *)(a1 + 704) = CFAbsoluteTimeGetCurrent();
        break;
      case 2:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,COMPLETED", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,COMPLETED", __p, 2);
          v39 = (char *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        sub_100605D40(a2, (uint64_t)__p);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v14 = __p;
          if (v64 < 0)
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,onAvlFileUpdated,avl downloaded,%{private}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v42 = __p;
          if (v64 < 0)
            v42 = (void **)__p[0];
          LODWORD(v62.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
          LODWORD(v57) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,Pressure,onAvlFileUpdated,avl downloaded,%{private}s", &v62, v57);
          v44 = (char *)v43;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
        if (v64 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (!sub_1005169DC((const char *)v15, 4))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v16 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v17 = __p;
            if (v64 < 0)
              v17 = (void **)__p[0];
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,Cannot set protection class for Pressure avl file,%{private}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            v51 = __p;
            if (v64 < 0)
              v51 = (void **)__p[0];
            LODWORD(v62.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
            LODWORD(v57) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,Cannot set protection class for Pressure avl file,%{private}s", &v62, v57);
            v53 = (char *)v52;
            sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v52);
            if (v53 != buf)
              free(v53);
          }
        }
        v18 = (char *)sub_1001FD94C();
        sub_1000B7884(v18, (uint64_t)&v62);
        if (*(char *)(a1 + 599) < 0)
        {
          sub_100115CE4(buf, *(void **)(a1 + 576), *(_QWORD *)(a1 + 584));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 576);
          *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 592);
        }
        if (buf[23] >= 0)
          v24 = buf;
        else
          v24 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v25 = buf[23];
        else
          v25 = *(_QWORD *)&buf[8];
        std::string::append(&v62, v24, v25);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(CFAbsoluteTime *)(a1 + 704) = CFAbsoluteTimeGetCurrent();
        if (v64 >= 0)
          v26 = (char *)__p;
        else
          v26 = (char *)__p[0];
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v62;
        else
          v27 = (std::string *)v62.__r_.__value_.__r.__words[0];
        sub_100513F8C(v26, (const char *)v27);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v28 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v29 = __p;
          if (v64 < 0)
            v29 = (void **)__p[0];
          v30 = &v62;
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = (std::string *)v62.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v29;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,onAvlFileUpdated,avl file decompressed,%{private}s,to,%{private}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v45 = __p;
          if (v64 < 0)
            v45 = (void **)__p[0];
          v46 = &v62;
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v46 = (std::string *)v62.__r_.__value_.__r.__words[0];
          v58 = 136380931;
          v59 = (std::string *)v45;
          v60 = 2081;
          v61 = v46;
          LODWORD(v57) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,Pressure,onAvlFileUpdated,avl file decompressed,%{private}s,to,%{private}s", &v58, v57);
          v48 = (char *)v47;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v62;
        else
          v31 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if (!sub_1005169DC((const char *)v31, 4))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v32 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v33 = &v62;
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v33 = (std::string *)v62.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,Cannot set protection class for Pressure decompressed avl file,%{private}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6348);
            v54 = &v62;
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v54 = (std::string *)v62.__r_.__value_.__r.__words[0];
            v58 = 136380675;
            v59 = v54;
            LODWORD(v57) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,Cannot set protection class for Pressure decompressed avl file,%{private}s", &v58, v57);
            v56 = (char *)v55;
            sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v55);
            if (v56 != buf)
              free(v56);
          }
        }
        v34 = a1 + 216;
        v35 = sub_1016894B8(v34);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v36 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,onAvlFileUpdated,is availability file valid,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          v58 = 67240192;
          LODWORD(v59) = v35;
          LODWORD(v57) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,Pressure,onAvlFileUpdated,is availability file valid,%{public}d", &v58, v57);
          v50 = (char *)v49;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
        sub_101687F38(v34);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (v64 < 0)
          operator delete(__p[0]);
        break;
      case 3:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v19 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,avl download status,FAILED", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,avl download status,FAILED", __p, 2);
          v9 = (char *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v20);
          goto LABEL_66;
        }
        break;
      default:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v22 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = a3;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,avl download status,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LODWORD(__p[0]) = 67240192;
          HIDWORD(__p[0]) = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,avl download status,%{public}d", __p, 8);
          v9 = (char *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v23);
          goto LABEL_66;
        }
        break;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,onAvlFileUpdated,null pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDM,#Error,Pressure,onAvlFileUpdated,null pointer", __p, 2);
      v9 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v11);
LABEL_66:
      if (v9 != buf)
        free(v9);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1016865D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_10187E514((uint64_t)&a12);
  _Unwind_Resume(a1);
}

double sub_101686690(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (*(_BYTE *)(a1 + 24))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_27;
      v3 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 134217984;
      v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#CLPDM,AVL file download rate over wifi,default,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_27;
      v7 = *(_QWORD *)(a1 + 16);
      v11 = 134217984;
      v12 = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,AVL file download rate over wifi,default,%f", COERCE_DOUBLE(&v11));
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    if (*(_BYTE *)(a1 + 24))
    {
      result = *(double *)(a1 + 16);
      if (result >= 86400.0)
        return 86400.0;
      return result;
    }
LABEL_27:
    sub_10028DF3C();
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 134217984;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#CLPDM,AVL file download rate over wifi,MA-OTA,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v9 = *(_QWORD *)(a1 + 72);
    v11 = 134217984;
    v12 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,AVL file download rate over wifi,MA-OTA,%f", COERCE_DOUBLE(&v11));
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return fmin(*(double *)(a1 + 72), 86400.0);
}

double sub_1016869D0(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (*(_BYTE *)(a1 + 24))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v2 = (uint64_t *)(a1 + 16);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_9;
      v4 = *v2;
      *(_DWORD *)buf = 134217984;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#CLPDM,AVL file expiry age,default,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      if (!*(_BYTE *)(a1 + 24))
LABEL_9:
        sub_10028DF3C();
      v8 = *v2;
      v12 = 134217984;
      v13 = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,AVL file expiry age,default,%f", COERCE_DOUBLE(&v12));
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileExpirationAge() const", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_9;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 134217984;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#CLPDM,AVL file expiry age,MA-OTA,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v10 = *(_QWORD *)(a1 + 72);
      v12 = 134217984;
      v13 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,AVL file expiry age,MA-OTA,%f", COERCE_DOUBLE(&v12));
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileExpirationAge() const", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    v2 = (uint64_t *)(a1 + 72);
  }
  return *(double *)v2;
}

uint64_t sub_101686CF4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  char *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *p_dst;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  int v19;
  const char *v20;
  std::string *v21;
  void *v22[2];
  uint64_t v23;
  std::string __p;
  uint64_t v25;
  __int16 v26;
  std::string __dst;
  std::string buf[68];

  v7 = a1 + 288;
  v25 = a1 + 288;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 288) + 16))(a1 + 288);
  v26 = 256;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLPDM,Notification,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v19 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,Notification,%{public}d", &__dst, 8);
    v21 = (std::string *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (*a3 == 4)
  {
    v10 = *(_DWORD *)(a4 + 188);
    if (v10 == 1)
    {
      if (!*(_BYTE *)(a1 + 560))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_10167F9FC(a1, buf);
        *(_BYTE *)(a1 + 560) = 1;
      }
    }
    else if (!v10)
    {
      v11 = (char *)sub_1001FD94C();
      sub_1000B7884(v11, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&__dst, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      else
        __dst = buf[0];
      if (*(char *)(a1 + 599) < 0)
        sub_100115CE4(&__p, *(void **)(a1 + 576), *(_QWORD *)(a1 + 584));
      else
        __p = *(std::string *)(a1 + 576);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      sub_1005164F0((const char *)p_dst);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&__p, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      else
        __p = buf[0];
      if (*(char *)(a1 + 623) < 0)
      {
        sub_100115CE4(v22, *(void **)(a1 + 600), *(_QWORD *)(a1 + 608));
      }
      else
      {
        *(_OWORD *)v22 = *(_OWORD *)(a1 + 600);
        v23 = *(_QWORD *)(a1 + 616);
      }
      if (v23 >= 0)
        v15 = v22;
      else
        v15 = (void **)v22[0];
      if (v23 >= 0)
        v16 = HIBYTE(v23);
      else
        v16 = (std::string::size_type)v22[1];
      std::string::append(&__p, (const std::string::value_type *)v15, v16);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__p;
      else
        v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_1005164F0((const char *)v17);
      *(_BYTE *)(a1 + 560) = 0;
      sub_100605848(a1 + 304);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_1016870B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_10187E514((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_101687158(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  const char **v6;
  NSObject *v7;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  _QWORD v28[2];
  int v29;
  uint64_t v30;
  __int16 v31;
  const char **v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  const char *v36;

  if (*a3 == 2)
  {
    sub_100119F3C();
    if (sub_100006BB4(a4, "RefPressureConfig", v28))
    {
      v6 = (const char **)(a1 + 80);
      if (!sub_1000BCB64((uint64_t)v28, "BaroAltReferencePressureUrl", (std::string *)(a1 + 80)))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v7 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,MA-OTA,ref pressure URL config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LOWORD(v29) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,MA-OTA,ref pressure URL config read error", &v29, 2);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
      if ((sub_1001FD98C((uint64_t)v28, "AvlExpirationAge", (void *)(a1 + 72)) & 1) != 0)
      {
        sub_101687C6C(a1 + 216, *(double *)(a1 + 72));
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6348);
        v17 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,MA-OTA,AVL file exp age config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6348);
          LOWORD(v29) = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,MA-OTA,AVL file exp age config read error", &v29, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        *(_QWORD *)(a1 + 72) = 0x4122750000000000;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v18 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a1 + 72);
        v20 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
        {
          v20 = *v6;
          if (!*v6)
            v20 = "default";
        }
        *(_DWORD *)buf = 134218242;
        v34 = v19;
        v35 = 2080;
        v36 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#CLPDM,MA-OTA,AvlFileExpAge,%f,Url,%s", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_42;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v21 = *(_QWORD *)(a1 + 72);
      if (*(char *)(a1 + 103) < 0)
      {
        if (*v6)
          v6 = (const char **)*v6;
        else
          v6 = (const char **)"default";
      }
      v29 = 134218242;
      v30 = v21;
      v31 = 2080;
      v32 = v6;
      LODWORD(v27) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,MA-OTA,AvlFileExpAge,%f,Url,%s", COERCE_DOUBLE(&v29), v27);
      v16 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v22);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      v14 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,MA-OTA,ReferencePressure Config not available", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_42;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6348);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,MA-OTA,ReferencePressure Config not available", &v29, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v15);
    }
    if (v16 != buf)
      free(v16);
LABEL_42:
    sub_10011A5A8(v28);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v10 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v34) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,Invalid notification,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v11 = *a3;
    v29 = 67109120;
    LODWORD(v30) = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,#Warning,Invalid notification,%d", &v29);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_1016878D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1016878FC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101687928(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

_QWORD *sub_101687954(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101687ABC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101687AC8(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (_BYTE *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[7 * a2];
      __asm { FMOV            V0.4S, #-1.0 }
      do
      {
        *(_OWORD *)v7 = _Q0;
        v7[6] = 0;
        *((_QWORD *)v7 + 2) = 0;
        v7 += 7;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x924924924924924)
      sub_100259694();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x492492492492492)
      v11 = 0x924924924924924;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_100AAF154(v4, v11);
    else
      v12 = 0;
    v19 = &v12[28 * v8];
    v20 = &v19[28 * a2];
    __asm { FMOV            V0.4S, #-1.0 }
    v22 = v19;
    do
    {
      *(_OWORD *)v22 = _Q0;
      *((_DWORD *)v22 + 6) = 0;
      *((_QWORD *)v22 + 2) = 0;
      v22 += 28;
    }
    while (v22 != v20);
    v23 = &v12[28 * v11];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 28);
        *((_OWORD *)v19 - 1) = *((_OWORD *)v24 - 1);
        *(_OWORD *)(v19 - 28) = v26;
        v19 -= 28;
        v24 -= 28;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

uint64_t sub_101687C48()
{
  xmmword_10230F978 = 0uLL;
  unk_10230F988 = 0;
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230F978, (void *)&_mh_execute_header);
}

uint64_t sub_101687C6C(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

BOOL sub_101687C74(uint64_t a1)
{
  char *v2;
  void **v3;
  std::string::size_type v4;
  void **v5;
  NSObject *v6;
  void *v7;
  std::string *p_str;
  _BOOL4 v9;
  char *v11;
  std::string __str;
  int v13;
  void **v14;
  void *__p[2];
  uint64_t v16;

  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)&__str);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 56);
  }
  if (v16 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v16 >= 0)
    v4 = HIBYTE(v16);
  else
    v4 = (std::string::size_type)__p[1];
  std::string::append(&__str, (const std::string::value_type *)v3, v4);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v5 = (void **)(a1 + 16);
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v7 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v7 = *v5;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,doesAvlFileExist,FilePath,%s", (uint8_t *)__p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    if (*(char *)(a1 + 39) < 0)
      v5 = (void **)*v5;
    v13 = 136315138;
    v14 = v5;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,doesAvlFileExist,FilePath,%s", (const char *)&v13);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::doesAvlFileExist()", "%s\n", v11);
    if (v11 != (char *)__p)
      free(v11);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v9 = sub_1000B78B0((const char *)p_str);
  if (!v9)
    *(_BYTE *)(a1 + 64) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v9;
}

void sub_101687EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101687F38(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLPDA,clear AVL cache", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,clear AVL cache", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureTileAvailability::clearAvlCache()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
}

uint64_t sub_1016880D0(uint64_t a1, double a2, long double a3)
{
  NSObject *v6;
  _QWORD *v7;
  const char **v8;
  const char *v9;
  FILE *v10;
  FILE *v11;
  double v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  int v16;
  int v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  double v27;
  int v28;
  int v29;
  NSObject *v30;
  unsigned int v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  char *v36;
  NSObject *v37;
  NSObject *v38;
  int v39;
  int v40;
  char *v41;
  NSObject *v42;
  int v43;
  int v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _BYTE v59[10];
  int v60;
  __int16 v61;
  int v62;
  _OWORD v63[16];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[26];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int buf;
  _BYTE v76[10];
  int v77;
  __int16 v78;
  int v79;

  if ((sub_1016894B8(a1) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v16 = *(unsigned __int8 *)(a1 + 64);
      buf = 67240192;
      *(_DWORD *)v76 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v17 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v63[0]) = 67240192;
    DWORD1(v63[0]) = v17;
    LODWORD(v55) = 8;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#Warning,#AVL,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", v63, v55);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf)
      return 0;
LABEL_129:
    free(v18);
    return 0;
  }
  v73 = 0;
  v72 = 0;
  v74 = 0;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  memset(v71, 0, sizeof(v71));
  v57 = 0;
  memset(v63, 0, sizeof(v63));
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v7 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v7 = (_QWORD *)*v7;
    buf = 136446210;
    *(_QWORD *)v76 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,Reading,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v45 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v45 = (_QWORD *)*v45;
    v58 = 136446210;
    *(_QWORD *)v59 = v45;
    LODWORD(v55) = 12;
    v46 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,#AVL,Reading,%{public}s", &v58, v55);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v46);
    if (v46 != (char *)&buf)
      free(v46);
  }
  v8 = (const char **)(a1 + 16);
  v9 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v9 = *v8;
  v10 = fopen(v9, "rb");
  v11 = v10;
  if (!v10)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v20 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v20 = *v8;
      v21 = *(unsigned __int8 *)(a1 + 64);
      v22 = *__error();
      buf = 136446722;
      *(_QWORD *)v76 = v20;
      *(_WORD *)&v76[8] = 1026;
      v77 = v21;
      v78 = 1026;
      v79 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,could not open file,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    if (*(char *)(a1 + 39) < 0)
      v8 = (const char **)*v8;
    v47 = qword_1022A0028;
    v48 = *(unsigned __int8 *)(a1 + 64);
    v49 = *__error();
    v58 = 136446722;
    *(_QWORD *)v59 = v8;
    *(_WORD *)&v59[8] = 1026;
    v60 = v48;
    v61 = 1026;
    v62 = v49;
    LODWORD(v55) = 24;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v47, 16, "#CLPDA,#Error,#AVL,could not open file,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", &v58, v55);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf)
      return 0;
    goto LABEL_129;
  }
  v56 = 0;
  if ((sub_10168A1CC(v10, v63, (uint64_t)&v64, (int *)&v57, &v56) & 1) == 0)
  {
    *(_BYTE *)(a1 + 64) = 1;
    fclose(v11);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v25 = *(unsigned __int8 *)(a1 + 64);
      buf = 67240192;
      *(_DWORD *)v76 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#CLPDA,#AVL,readAvlHelperData failed,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_44;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v50 = *(unsigned __int8 *)(a1 + 64);
    v58 = 67240192;
    *(_DWORD *)v59 = v50;
    LODWORD(v55) = 8;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#AVL,readAvlHelperData failed,fNeedToDownloadAvlFile,%{public}d", &v58, v55);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
LABEL_133:
    if (v14 != (char *)&buf)
      free(v14);
    goto LABEL_44;
  }
  v12 = (double)v71[24];
  if (v12 > a2)
  {
    fclose(v11);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,invalid Lat min", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    LOWORD(v58) = 0;
    LODWORD(v55) = 2;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,invalid Lat min", &v58, v55);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
    goto LABEL_133;
  }
  if ((double)v71[25] <= a2)
  {
    fclose(v11);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v34 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,invalid lat Max", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    LOWORD(v58) = 0;
    LODWORD(v55) = 2;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,invalid lat Max", &v58, v55);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
    goto LABEL_133;
  }
  sub_1001C6800(a3);
  v28 = (int)((double)(int)vcvtmd_s64_f64(v27 * 20.0)
            + (double)(int)(2 * (vcvtmd_s64_f64((a2 + 90.0) * 20.0) - (int)((v12 + 90.0) * 20.0))) * 180.0 * 20.0);
  if (v28 >= 0)
    v29 = v28;
  else
    v29 = v28 + 7;
  HIBYTE(v55) = 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v30 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    buf = 67109120;
    *(_DWORD *)v76 = v74;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,dataSizeBytes,%d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v58 = 67109120;
    v51 = v74;
    *(_DWORD *)v59 = v74;
    v52 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,dataSizeBytes,%d", &v58);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v52);
    if (v52 != (char *)&buf)
      free(v52);
    v31 = v51;
  }
  else
  {
    v31 = v74;
  }
  if (v29 >> 3 >= v31)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v35 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      buf = 67240192;
      *(_DWORD *)v76 = v29 >> 3;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,byte index,%{public}d,is larger than the AVL file size", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_93;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v58 = 67240192;
    *(_DWORD *)v59 = v29 >> 3;
    LODWORD(v55) = 8;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#Warning,#AVL,byte index,%{public}d,is larger than the AVL file size", &v58, v55);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v36);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v32 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      buf = 67109120;
      *(_DWORD *)v76 = v29 >> 3;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,iByte,%d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v58 = 67109120;
      *(_DWORD *)v59 = v29 >> 3;
      v53 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,iByte,%d", &v58);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v53);
      if (v53 != (char *)&buf)
        free(v53);
    }
    fseek(v11, v29 >> 3, 1);
    if (fread((char *)&v55 + 7, 1uLL, 1uLL, v11) == 1)
    {
      fclose(v11);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v33 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        buf = 67109120;
        *(_DWORD *)v76 = v28 - (v29 & 0xFFFFFFF8);
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,iBitInByte,%d", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v58 = 67109120;
        *(_DWORD *)v59 = v28 - (v29 & 0xFFFFFFF8);
        v54 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,iBitInByte,%d", &v58);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v54);
        if (v54 != (char *)&buf)
          free(v54);
      }
      switch(v28 - (v29 & 0xFFFFFFF8))
      {
        case 0u:
          v23 = v55 < 0;
          break;
        case 1u:
          v23 = (HIBYTE(v55) >> 6) & 1;
          break;
        case 2u:
          v23 = (HIBYTE(v55) >> 5) & 1;
          break;
        case 3u:
          v23 = (HIBYTE(v55) >> 4) & 1;
          break;
        case 4u:
          v23 = (HIBYTE(v55) >> 3) & 1;
          break;
        case 5u:
          v23 = (HIBYTE(v55) >> 2) & 1;
          break;
        case 6u:
          v23 = (HIBYTE(v55) >> 1) & 1;
          break;
        case 7u:
          v23 = HIBYTE(v55) & 1;
          break;
        default:
          *(_BYTE *)(a1 + 64) = 1;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6368);
          v42 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
          {
            v43 = *(unsigned __int8 *)(a1 + 64);
            buf = 67240192;
            *(_DWORD *)v76 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "Pressure,#AVL,unexpected case,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_44;
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6368);
          v44 = *(unsigned __int8 *)(a1 + 64);
          v58 = 67240192;
          *(_DWORD *)v59 = v44;
          LODWORD(v55) = 8;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "Pressure,#AVL,unexpected case,fNeedToDownloadAvlFile,%{public}d", &v58, v55);
          sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
          goto LABEL_133;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v38 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v39 = *(unsigned __int8 *)(a1 + 64);
        buf = 67240448;
        *(_DWORD *)v76 = v23;
        *(_WORD *)&v76[4] = 1026;
        *(_DWORD *)&v76[6] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#CLPDM,#AVL,finished,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v40 = *(unsigned __int8 *)(a1 + 64);
        v58 = 67240448;
        *(_DWORD *)v59 = v23;
        *(_WORD *)&v59[4] = 1026;
        *(_DWORD *)&v59[6] = v40;
        LODWORD(v55) = 14;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#AVL,finished,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", &v58, v55);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v41);
        if (v41 != (char *)&buf)
          free(v41);
      }
      goto LABEL_45;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v37 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,unable to get data byte", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_93;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    LOWORD(v58) = 0;
    LODWORD(v55) = 2;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#Warning,#AVL,unable to get data byte", &v58, v55);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v36);
  }
  if (v36 != (char *)&buf)
    free(v36);
LABEL_93:
  *(_BYTE *)(a1 + 64) = 1;
  fclose(v11);
LABEL_44:
  v23 = 0;
LABEL_45:
  if (SBYTE7(v65) < 0)
    operator delete((void *)v64);
  return v23;
}

void sub_101689430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void **v54;

  if (a54 < 0)
    operator delete(*v54);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016894B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char **v4;
  const char *v5;
  FILE *v6;
  FILE *v7;
  unint64_t v8;
  double v9;
  double v10;
  NSObject *v11;
  CFAbsoluteTime Current;
  double v13;
  double v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int v29;
  int v30;
  char *v31;
  NSObject *v32;
  int v33;
  int v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  CFAbsoluteTime v43;
  char *v44;
  int v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  double v52;
  __int16 v53;
  _QWORD v54[2];
  uint8_t buf[4];
  double v56;
  __int16 v57;
  _QWORD v58[202];
  _OWORD v59[16];
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[26];
  __int128 v68;
  uint64_t v69;

  v68 = 0uLL;
  v69 = 0;
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  memset(v67, 0, sizeof(v67));
  v50 = 0;
  memset(v59, 0, sizeof(v59));
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    LODWORD(v56) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLPDM,#AVL,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v35 = *(unsigned __int8 *)(a1 + 64);
    v51 = 67240192;
    LODWORD(v52) = v35;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDM,#AVL,fNeedToDownloadAvlFile,%{public}d", &v51, 8);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  if (!sub_101687C74(a1))
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v19 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,file does not exist,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v20 = *(unsigned __int8 *)(a1 + 64);
    v51 = 67240192;
    LODWORD(v52) = v20;
    LODWORD(v48) = 8;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#Warning,#AVL,file does not exist,fNeedToDownloadAvlFile,%{public}d", &v51, v48);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v21);
    if (v21 == (char *)buf)
      return 0;
LABEL_76:
    free(v21);
    return 0;
  }
  v4 = (const char **)(a1 + 16);
  v5 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  v6 = fopen(v5, "rb");
  v7 = v6;
  if (!v6)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v22 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v23 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v23 = *v4;
      v24 = *(unsigned __int8 *)(a1 + 64);
      v25 = *__error();
      *(_DWORD *)buf = 136446722;
      v56 = *(double *)&v23;
      v57 = 1026;
      LODWORD(v58[0]) = v24;
      WORD2(v58[0]) = 1026;
      *(_DWORD *)((char *)v58 + 6) = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,could not open file,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    if (*(char *)(a1 + 39) < 0)
      v4 = (const char **)*v4;
    v37 = qword_1022A0028;
    v38 = *(unsigned __int8 *)(a1 + 64);
    v39 = *__error();
    v51 = 136446722;
    v52 = *(double *)&v4;
    v53 = 1026;
    LODWORD(v54[0]) = v38;
    WORD2(v54[0]) = 1026;
    *(_DWORD *)((char *)v54 + 6) = v39;
    LODWORD(v48) = 24;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 16, "#CLPDA,#Error,#AVL,could not open file,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", &v51, v48);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v21);
    if (v21 == (char *)buf)
      return 0;
    goto LABEL_76;
  }
  v49 = 0;
  if ((sub_10168A1CC(v6, v59, (uint64_t)__p, (int *)&v50, &v49) & 1) == 0)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v26 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v27 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#CLPDA,#AVL,readAvlHelperData failed,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v40 = *(unsigned __int8 *)(a1 + 64);
      v51 = 67240192;
      LODWORD(v52) = v40;
      LODWORD(v48) = 8;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#AVL,readAvlHelperData failed,fNeedToDownloadAvlFile,%{public}d", &v51, v48);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
    fclose(v7);
    goto LABEL_63;
  }
  fclose(v7);
  if (v67[22] != 1)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v28 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,file version does not match expected with version,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_63;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v30 = *(unsigned __int8 *)(a1 + 64);
    v51 = 67240192;
    LODWORD(v52) = v30;
    LODWORD(v48) = 8;
    v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,#AVL,file version does not match expected with version,fNeedToDownloadAvlFile,%{public}d", &v51, v48);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v31);
    goto LABEL_92;
  }
  LODWORD(v8) = HIDWORD(v68);
  v9 = (double)v8;
  if (*(double *)(a1 + 8) <= 0.0)
    v10 = v9;
  else
    v10 = *(double *)(a1 + 8);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)buf = 134349312;
    v56 = v10;
    v57 = 2050;
    *(CFAbsoluteTime *)v58 = Current;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,file expiry age is,%{public}.1f,current,%{public}.1f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v42 = qword_1022A0028;
    v43 = CFAbsoluteTimeGetCurrent();
    v51 = 134349312;
    v52 = v10;
    v53 = 2050;
    *(CFAbsoluteTime *)v54 = v43;
    LODWORD(v48) = 22;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "#CLPDA,#AVL,file expiry age is,%{public}.1f,current,%{public}.1f", &v51, v48);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  v13 = CFAbsoluteTimeGetCurrent();
  v14 = *(double *)((char *)&v68 + 4);
  if (v13 <= v10 + v14 + (double)(random() % 3600))
  {
    *(_BYTE *)(a1 + 64) = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,end of checkAvlFileValidityAndSetDownloadFlag function reached,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v45 = *(unsigned __int8 *)(a1 + 64);
      v51 = 67240192;
      LODWORD(v52) = v45;
      LODWORD(v48) = 8;
      v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,#AVL,end of checkAvlFileValidityAndSetDownloadFlag function reached,fNeedToDownloadAvlFile,%{public}d", &v51, v48);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v46);
      if (v46 != (char *)buf)
        free(v46);
    }
    v17 = 1;
    goto LABEL_64;
  }
  *(_BYTE *)(a1 + 64) = 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v32 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    LODWORD(v56) = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,file has expired,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v47 = *(unsigned __int8 *)(a1 + 64);
    v51 = 67240192;
    LODWORD(v52) = v47;
    LODWORD(v48) = 8;
    v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,#AVL,file has expired,fNeedToDownloadAvlFile,%{public}d", &v51, v48);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v31);
LABEL_92:
    if (v31 != (char *)buf)
      free(v31);
  }
LABEL_63:
  v17 = 0;
LABEL_64:
  if (SBYTE7(v61) < 0)
    operator delete(__p[0]);
  return v17;
}

void sub_10168A174(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10168A1CC(FILE *a1, _OWORD *a2, uint64_t a3, int *a4, _QWORD *a5)
{
  __int128 v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  NSObject *v14;
  _BOOL4 v15;
  int *v16;
  unsigned int v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  NSObject *v23;
  uint64_t v24;
  char *v26;
  size_t v27;
  NSObject *v28;
  uint64_t v29;
  size_t v30;
  NSObject *v31;
  unint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  NSObject *v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  NSObject *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  size_t v45;
  size_t v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  double v67;
  NSObject *v68;
  double v69;
  _BOOL4 v70;
  double v71;
  NSObject *v72;
  NSObject *v73;
  _BOOL4 v74;
  NSObject *v75;
  _BOOL4 v76;
  NSObject *v77;
  _BOOL4 v78;
  NSObject *v79;
  _BOOL4 v80;
  NSObject *v81;
  _BOOL4 v82;
  NSObject *v83;
  _BOOL4 v84;
  NSObject *v85;
  _BOOL4 v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  NSObject *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  double v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  NSObject *v110;
  _BOOL4 v111;
  NSObject *v112;
  _BOOL4 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  NSObject *v117;
  _BOOL4 v118;
  NSObject *v119;
  _BOOL4 v120;
  char *v121;
  uint64_t v122;
  int v123;
  char *v124;
  uint64_t v125;
  int v126;
  char *v127;
  uint64_t v128;
  int v129;
  char *v130;
  uint64_t v131;
  int v132;
  char *v133;
  uint64_t v134;
  double v135;
  char *v136;
  uint64_t v137;
  double v138;
  char *v139;
  uint64_t v140;
  int v141;
  char *v142;
  uint64_t v143;
  int v144;
  char *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  double v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  char *v155;
  double v156;
  uint64_t v157;
  _QWORD *v158;
  _OWORD *v159;
  int *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  _BYTE v165[10];
  double v166;
  int v167;
  __int16 v168;
  _BYTE v169[10];
  uint64_t v170;
  _BYTE v171[6];
  _BYTE v172[6];
  _BYTE v173[6];
  _BYTE v174[17];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _BYTE v204[31];
  int buf;
  _BYTE v206[10];
  double v207;
  int v208;
  __int16 v209;
  _BYTE v210[10];
  uint64_t v211;
  _BYTE v212[6];
  _BYTE v213[6];
  _DWORD v214[395];

  if (!a1)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file", (uint8_t *)&buf, 2u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      *(_WORD *)v174 = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file", v174, 2);
      goto LABEL_28;
    }
    return result;
  }
  if (!a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,null buffer", (uint8_t *)&buf, 2u);
    }
    v15 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v15)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      *(_WORD *)v174 = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,null buffer", v174, 2);
      goto LABEL_28;
    }
    return result;
  }
  v158 = a5;
  v159 = a2;
  v160 = a4;
  v203 = 0u;
  memset(v204, 0, sizeof(v204));
  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  v197 = 0u;
  v198 = 0u;
  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v177 = 0u;
  v176 = 0u;
  v175 = 0u;
  *(_OWORD *)&v174[1] = 0u;
  if (feof(a1))
  {
LABEL_4:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,did not synchronize to tile header string", (uint8_t *)&buf, 2u);
    }
    v9 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v9)
      return result;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    LOWORD(v164) = 0;
    LODWORD(v156) = 2;
    v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,did not synchronize to tile header string", &v164, *(_QWORD *)&v156);
    goto LABEL_28;
  }
  v17 = 0;
  v18 = a3 + 24;
  *(_QWORD *)&v7 = 67111424;
  v161 = v7;
  v162 = a3;
  while (1)
  {
    HIBYTE(v163) = 0;
    v19 = fread((char *)&v163 + 7, 1uLL, 1uLL, a1);
    if (v19 != 1)
    {
      v27 = v19;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v28 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        buf = 134217984;
        *(_QWORD *)v206 = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,Header Data is not valid,%zu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v164 = 134217984;
        *(_QWORD *)v165 = v27;
        v29 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,Header Data is not valid,%zu", &v164);
        goto LABEL_68;
      }
      return 0;
    }
    v20 = ftell(a1);
    if (HIBYTE(v163) != 67)
      goto LABEL_44;
    v21 = v20;
    v174[0] = 67;
    v22 = fread(&v174[1], 1uLL, 9uLL, a1);
    if (v22 != 9)
    {
      v30 = v22;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v31 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        buf = 134217984;
        *(_QWORD *)v206 = v30;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,Header data is not CLPRESSAVL,%zu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v164 = 134217984;
        *(_QWORD *)v165 = v30;
        v29 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,Header data is not CLPRESSAVL,%zu", &v164);
LABEL_68:
        v16 = (int *)v29;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n");
        goto LABEL_29;
      }
      return 0;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      buf = v161;
      *(_DWORD *)v206 = v174[0];
      *(_WORD *)&v206[4] = 1024;
      *(_DWORD *)&v206[6] = v174[1];
      LOWORD(v207) = 1024;
      *(_DWORD *)((char *)&v207 + 2) = v174[2];
      HIWORD(v207) = 1024;
      v208 = v174[3];
      v209 = 1024;
      *(_DWORD *)v210 = v174[4];
      *(_WORD *)&v210[4] = 1024;
      *(_DWORD *)&v210[6] = v174[5];
      LOWORD(v211) = 1024;
      *(_DWORD *)((char *)&v211 + 2) = v174[6];
      HIWORD(v211) = 1024;
      *(_DWORD *)v212 = v174[7];
      *(_WORD *)&v212[4] = 1024;
      *(_DWORD *)v213 = v174[8];
      *(_WORD *)&v213[4] = 1024;
      v214[0] = v174[9];
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,Header Bytes read are %c,%c,%c,%c,%c,%c,%c,%c,%c,%c", (uint8_t *)&buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v164 = v161;
      *(_DWORD *)v165 = v174[0];
      *(_WORD *)&v165[4] = 1024;
      *(_DWORD *)&v165[6] = v174[1];
      LOWORD(v166) = 1024;
      *(_DWORD *)((char *)&v166 + 2) = v174[2];
      HIWORD(v166) = 1024;
      v167 = v174[3];
      v168 = 1024;
      *(_DWORD *)v169 = v174[4];
      *(_WORD *)&v169[4] = 1024;
      *(_DWORD *)&v169[6] = v174[5];
      LOWORD(v170) = 1024;
      *(_DWORD *)((char *)&v170 + 2) = v174[6];
      HIWORD(v170) = 1024;
      *(_DWORD *)v171 = v174[7];
      *(_WORD *)&v171[4] = 1024;
      *(_DWORD *)v172 = v174[8];
      *(_WORD *)&v172[4] = 1024;
      *(_DWORD *)v173 = v174[9];
      LODWORD(v156) = 62;
      v26 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,Header Bytes read are %c,%c,%c,%c,%c,%c,%c,%c,%c,%c", &v164, *(_QWORD *)&v156, v157, v158, v159, v160, (_QWORD)v161, *((_QWORD *)&v161 + 1), v162, v163);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v26);
      if (v26 != (char *)&buf)
        free(v26);
    }
    *(_WORD *)(v18 + 8) = *(_WORD *)&v174[8];
    *(_QWORD *)v18 = *(_QWORD *)v174;
    v24 = v162;
    if (*(_QWORD *)(v162 + 24) == 0x4153534552504C43 && *(_BYTE *)(v162 + 32) == 86 && *(_BYTE *)(v162 + 33) == 76)
      break;
    if (fseek(a1, v21, 0))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v72 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,fseek returned non-zero", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        LOWORD(v164) = 0;
        LODWORD(v156) = 2;
        v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,fseek returned non-zero", &v164, *(_QWORD *)&v156);
LABEL_28:
        v16 = (int *)v11;
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n");
LABEL_29:
        if (v16 != &buf)
          free(v16);
        return 0;
      }
      return 0;
    }
LABEL_44:
    if (!feof(a1) && v17++ < 0x1FF)
      continue;
    goto LABEL_4;
  }
  v32 = 0;
  v34 = v159;
  v33 = (uint64_t *)v160;
  *(_QWORD *)v160 = 11;
  do
  {
    *((_BYTE *)v159 + v32) = *(_BYTE *)(v18 + v32);
    ++v32;
  }
  while (*(_QWORD *)v160 > v32);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v35 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v36 = *(_QWORD *)v160;
    buf = 134217984;
    *(_QWORD *)v206 = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v114 = *(_QWORD *)v160;
    v164 = 134217984;
    *(_QWORD *)v165 = v114;
    v115 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu", (size_t)&v164);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v115);
    if (v115 != (char *)&buf)
      free(v115);
    v24 = v162;
    v34 = v159;
    v33 = (uint64_t *)v160;
  }
  v37 = 110 - *v33;
  v38 = fread((char *)v34 + *v33, 1uLL, v37, a1);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v39 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    buf = 134218240;
    *(_QWORD *)v206 = v38;
    *(_WORD *)&v206[8] = 1024;
    LODWORD(v207) = v37;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,count,%zu,nb,%u", (uint8_t *)&buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v164 = 134218240;
    *(_QWORD *)v165 = v38;
    *(_WORD *)&v165[8] = 1024;
    LODWORD(v166) = v37;
    v116 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,count,%zu,nb,%u", (size_t)&v164, 18);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v116);
    if (v116 != (char *)&buf)
      free(v116);
    v24 = v162;
    v34 = v159;
    v33 = (uint64_t *)v160;
  }
  if (v38 == v37)
  {
    v40 = *v34;
    v41 = v34[2];
    *(_OWORD *)(v18 + 16) = v34[1];
    *(_OWORD *)(v18 + 32) = v41;
    *(_OWORD *)v18 = v40;
    v42 = v34[3];
    v43 = v34[4];
    v44 = v34[5];
    *(_OWORD *)(v18 + 94) = *(_OWORD *)((char *)v34 + 94);
    *(_OWORD *)(v18 + 64) = v43;
    *(_OWORD *)(v18 + 80) = v44;
    *(_OWORD *)(v18 + 48) = v42;
    v45 = *v33 + v37;
    *v33 = v45;
    if (*(_QWORD *)(v24 + 24) == 0x4153534552504C43 && *(_BYTE *)(v24 + 32) == 86 && *(_BYTE *)(v24 + 33) == 76)
    {
      fread((char *)v34 + v45, 1uLL, 1uLL, a1);
      v46 = fread((char *)v34 + *v33, 1uLL, 1uLL, a1);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v47 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        buf = 134217984;
        *(_QWORD *)v206 = v46;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,count,%zu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v164 = 134217984;
        *(_QWORD *)v165 = v46;
        v121 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,count,%zu", (size_t)&v164);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v121);
        if (v121 != (char *)&buf)
          free(v121);
        v24 = v162;
        v34 = v159;
        v33 = (uint64_t *)v160;
      }
      if (v46 == 1)
      {
        v48 = *v33;
        *(_BYTE *)(v24 + 134) = *((_BYTE *)v34 + *v33);
        *v33 = v48 + 1;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v49 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v50 = *v33;
          v51 = *(unsigned __int8 *)(v24 + 134);
          buf = 134218240;
          *(_QWORD *)v206 = v50;
          *(_WORD *)&v206[8] = 1024;
          LODWORD(v207) = v51;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,version,%d", (uint8_t *)&buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6368);
          v122 = *(_QWORD *)v160;
          v123 = *(unsigned __int8 *)(v162 + 134);
          v164 = 134218240;
          *(_QWORD *)v165 = v122;
          *(_WORD *)&v165[8] = 1024;
          LODWORD(v166) = v123;
          v124 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,version,%d", (size_t)&v164, 18);
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v124);
          if (v124 != (char *)&buf)
            free(v124);
          v24 = v162;
          v34 = v159;
          v33 = (uint64_t *)v160;
        }
        if (fread((char *)v34 + *v33, 1uLL, 1uLL, a1) == 1)
        {
          v52 = *v33;
          *(_BYTE *)(v24 + 135) = *((_BYTE *)v34 + *v33);
          *v33 = v52 + 1;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6368);
          v53 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v54 = *v33;
            v55 = *(unsigned __int8 *)(v24 + 135);
            buf = 134218240;
            *(_QWORD *)v206 = v54;
            *(_WORD *)&v206[8] = 1024;
            LODWORD(v207) = v55;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,headerLength,%d", (uint8_t *)&buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6368);
            v125 = *(_QWORD *)v160;
            v126 = *(unsigned __int8 *)(v162 + 135);
            v164 = 134218240;
            *(_QWORD *)v165 = v125;
            *(_WORD *)&v165[8] = 1024;
            LODWORD(v166) = v126;
            v127 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,headerLength,%d", (size_t)&v164, 18);
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v127);
            if (v127 != (char *)&buf)
              free(v127);
            v24 = v162;
            v34 = v159;
            v33 = (uint64_t *)v160;
          }
          if (fread((char *)v34 + *v33, 1uLL, 1uLL, a1) == 1)
          {
            v56 = *v33;
            *(_BYTE *)(v24 + 136) = *((_BYTE *)v34 + *v33);
            *v33 = v56 + 1;
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6368);
            v57 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              v58 = *v33;
              v59 = *(char *)(v24 + 136);
              buf = 134218240;
              *(_QWORD *)v206 = v58;
              *(_WORD *)&v206[8] = 1024;
              LODWORD(v207) = v59;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,minLatitude,%d", (uint8_t *)&buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021C6368);
              v128 = *(_QWORD *)v160;
              v129 = *(char *)(v162 + 136);
              v164 = 134218240;
              *(_QWORD *)v165 = v128;
              *(_WORD *)&v165[8] = 1024;
              LODWORD(v166) = v129;
              v130 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,minLatitude,%d", (size_t)&v164, 18);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v130);
              if (v130 != (char *)&buf)
                free(v130);
              v24 = v162;
              v34 = v159;
              v33 = (uint64_t *)v160;
            }
            if (fread((char *)v34 + *v33, 1uLL, 1uLL, a1) == 1)
            {
              v60 = *v33;
              *(_BYTE *)(v24 + 137) = *((_BYTE *)v34 + *v33);
              *v33 = v60 + 1;
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021C6368);
              v61 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
              {
                v62 = *v33;
                v63 = *(char *)(v24 + 137);
                buf = 134218240;
                *(_QWORD *)v206 = v62;
                *(_WORD *)&v206[8] = 1024;
                LODWORD(v207) = v63;
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,maxLatitude,%d", (uint8_t *)&buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021C6368);
                v131 = *(_QWORD *)v160;
                v132 = *(char *)(v162 + 137);
                v164 = 134218240;
                *(_QWORD *)v165 = v131;
                *(_WORD *)&v165[8] = 1024;
                LODWORD(v166) = v132;
                v133 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,maxLatitude,%d", (size_t)&v164, 18);
                sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v133);
                if (v133 != (char *)&buf)
                  free(v133);
                v24 = v162;
                v34 = v159;
                v33 = (uint64_t *)v160;
              }
              if (fread((char *)v34 + *v33, 1uLL, 4uLL, a1) == 4)
              {
                v64 = *v33;
                *(_DWORD *)(v24 + 140) = bswap32(*(_DWORD *)((char *)v34 + *v33));
                *v33 = v64 + 4;
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021C6368);
                v65 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
                {
                  v66 = *v33;
                  v67 = *(float *)(v24 + 140);
                  buf = 134218240;
                  *(_QWORD *)v206 = v66;
                  *(_WORD *)&v206[8] = 2048;
                  v207 = v67;
                  _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,.binsize,%f", (uint8_t *)&buf, 0x16u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_1021C6368);
                  v134 = *(_QWORD *)v160;
                  v135 = *(float *)(v162 + 140);
                  v164 = 134218240;
                  *(_QWORD *)v165 = v134;
                  *(_WORD *)&v165[8] = 2048;
                  v166 = v135;
                  LODWORD(v156) = 22;
                  v136 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,.binsize,%f", (size_t)&v164, v156);
                  sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v136);
                  if (v136 != (char *)&buf)
                    free(v136);
                  v24 = v162;
                  v34 = v159;
                  v33 = (uint64_t *)v160;
                }
                if (fabsf(*(float *)(v24 + 140) + -0.05) <= 0.0001)
                {
                  if (fread((char *)v34 + *v33, 1uLL, 8uLL, a1) == 8)
                  {
                    v87 = *(_QWORD *)v160;
                    *(_QWORD *)(v162 + 144) = bswap64(*(_QWORD *)((char *)v159 + *(_QWORD *)v160));
                    *(_QWORD *)v160 = v87 + 8;
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_1021C6368);
                    v88 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
                    {
                      v89 = *(_QWORD *)v160;
                      v90 = *(double *)(v162 + 144);
                      buf = 134218240;
                      *(_QWORD *)v206 = v89;
                      *(_WORD *)&v206[8] = 2048;
                      v207 = v90;
                      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,timestamp,%f", (uint8_t *)&buf, 0x16u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(&buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_1021C6368);
                      v137 = *(_QWORD *)v160;
                      v138 = *(double *)(v162 + 144);
                      v164 = 134218240;
                      *(_QWORD *)v165 = v137;
                      *(_WORD *)&v165[8] = 2048;
                      v166 = v138;
                      LODWORD(v156) = 22;
                      v139 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,timestamp,%f", (size_t)&v164, v156);
                      sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v139);
                      if (v139 != (char *)&buf)
                        free(v139);
                    }
                    if (fread((char *)v159 + *(_QWORD *)v160, 1uLL, 4uLL, a1) == 4)
                    {
                      v91 = *(_QWORD *)v160;
                      *(_DWORD *)(v162 + 152) = bswap32(*(_DWORD *)((char *)v159 + *(_QWORD *)v160));
                      *(_QWORD *)v160 = v91 + 4;
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_1021C6368);
                      v92 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
                      {
                        v93 = *(_QWORD *)v160;
                        v94 = *(_DWORD *)(v162 + 152);
                        buf = 134218240;
                        *(_QWORD *)v206 = v93;
                        *(_WORD *)&v206[8] = 1024;
                        LODWORD(v207) = v94;
                        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,expirationAge,%u", (uint8_t *)&buf, 0x12u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(&buf, 0x65CuLL);
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_1021C6368);
                        v140 = *(_QWORD *)v160;
                        v141 = *(_DWORD *)(v162 + 152);
                        v164 = 134218240;
                        *(_QWORD *)v165 = v140;
                        *(_WORD *)&v165[8] = 1024;
                        LODWORD(v166) = v141;
                        v142 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,expirationAge,%u", (size_t)&v164, 18);
                        sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v142);
                        if (v142 != (char *)&buf)
                          free(v142);
                      }
                      if (fread((char *)v159 + *(_QWORD *)v160, 1uLL, 4uLL, a1) == 4)
                      {
                        v95 = *(_QWORD *)v160;
                        *(_DWORD *)(v162 + 156) = bswap32(*(_DWORD *)((char *)v159 + *(_QWORD *)v160));
                        *(_QWORD *)v160 = v95 + 4;
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_1021C6368);
                        v96 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
                        {
                          v97 = *(_QWORD *)v160;
                          v98 = *(_DWORD *)(v162 + 156);
                          buf = 134218240;
                          *(_QWORD *)v206 = v97;
                          *(_WORD *)&v206[8] = 1024;
                          LODWORD(v207) = v98;
                          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,dataSizeBytes,%d", (uint8_t *)&buf, 0x12u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(&buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_1021C6368);
                          v143 = *(_QWORD *)v160;
                          v144 = *(_DWORD *)(v162 + 156);
                          v164 = 134218240;
                          *(_QWORD *)v165 = v143;
                          *(_WORD *)&v165[8] = 1024;
                          LODWORD(v166) = v144;
                          v145 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDA,#AVL,bufferIndex,%zu,dataSizeBytes,%d", (size_t)&v164, 18);
                          sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v145);
                          if (v145 != (char *)&buf)
                            free(v145);
                        }
                        if (fread((char *)v159 + *(_QWORD *)v160, 1uLL, 4uLL, a1) == 4)
                        {
                          *v158 = *v160;
                          v99 = *(_QWORD *)v160;
                          *(_DWORD *)(v162 + 160) = bswap32(*(_DWORD *)((char *)v159 + *(_QWORD *)v160));
                          *(_QWORD *)v160 = v99 + 4;
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_1021C6368);
                          v100 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                          {
                            v101 = *(unsigned __int8 *)(v162 + 134);
                            v102 = *(unsigned __int8 *)(v162 + 135);
                            v103 = *(char *)(v162 + 136);
                            v104 = *(char *)(v162 + 137);
                            v105 = *(float *)(v162 + 140);
                            v106 = *(_QWORD *)(v162 + 144);
                            v107 = *(_DWORD *)(v162 + 152);
                            v108 = *(_DWORD *)(v162 + 156);
                            v109 = *(_DWORD *)(v162 + 160);
                            buf = 67176705;
                            *(_DWORD *)v206 = v101;
                            *(_WORD *)&v206[4] = 1025;
                            *(_DWORD *)&v206[6] = v102;
                            LOWORD(v207) = 1025;
                            *(_DWORD *)((char *)&v207 + 2) = v103;
                            HIWORD(v207) = 1025;
                            v208 = v104;
                            v209 = 2049;
                            *(double *)v210 = v105;
                            *(_WORD *)&v210[8] = 2049;
                            v211 = v106;
                            *(_WORD *)v212 = 1025;
                            *(_DWORD *)&v212[2] = v107;
                            *(_WORD *)v213 = 1025;
                            *(_DWORD *)&v213[2] = v108;
                            LOWORD(v214[0]) = 1025;
                            *(_DWORD *)((char *)v214 + 2) = v109;
                            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,vers,%{private}d,headerLen,%{private}d,minLat,%{private}d,maxLat,%{private}d,binsize,%{private}.7f,timestamp,%{private}.1f,expirationAge,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d", (uint8_t *)&buf, 0x40u);
                          }
                          if (sub_1001BFF7C(115, 2))
                          {
                            bzero(&buf, 0x65CuLL);
                            if (qword_1022A0020 != -1)
                              dispatch_once(&qword_1022A0020, &stru_1021C6368);
                            v146 = *(unsigned __int8 *)(v162 + 134);
                            v147 = *(unsigned __int8 *)(v162 + 135);
                            v148 = *(char *)(v162 + 136);
                            v149 = *(char *)(v162 + 137);
                            v150 = *(float *)(v162 + 140);
                            v151 = *(_QWORD *)(v162 + 144);
                            v152 = *(_DWORD *)(v162 + 152);
                            v153 = *(_DWORD *)(v162 + 156);
                            v154 = *(_DWORD *)(v162 + 160);
                            v164 = 67176705;
                            *(_DWORD *)v165 = v146;
                            *(_WORD *)&v165[4] = 1025;
                            *(_DWORD *)&v165[6] = v147;
                            LOWORD(v166) = 1025;
                            *(_DWORD *)((char *)&v166 + 2) = v148;
                            HIWORD(v166) = 1025;
                            v167 = v149;
                            v168 = 2049;
                            *(double *)v169 = v150;
                            *(_WORD *)&v169[8] = 2049;
                            v170 = v151;
                            *(_WORD *)v171 = 1025;
                            *(_DWORD *)&v171[2] = v152;
                            *(_WORD *)v172 = 1025;
                            *(_DWORD *)&v172[2] = v153;
                            *(_WORD *)v173 = 1025;
                            *(_DWORD *)&v173[2] = v154;
                            LODWORD(v156) = 64;
                            v155 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,#AVL,vers,%{private}d,headerLen,%{private}d,minLat,%{private}d,maxLat,%{private}d,binsize,%{private}.7f,timestamp,%{private}.1f,expirationAge,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d", &v164, *(_QWORD *)&v156);
                            sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v155);
                            if (v155 != (char *)&buf)
                              free(v155);
                          }
                          return 1;
                        }
                        else
                        {
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_1021C6368);
                          v119 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(buf) = 0;
                            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid availability file - crc", (uint8_t *)&buf, 2u);
                          }
                          v120 = sub_1001BFF7C(115, 0);
                          result = 0;
                          if (v120)
                          {
                            bzero(&buf, 0x65CuLL);
                            if (qword_1022A0020 != -1)
                              dispatch_once(&qword_1022A0020, &stru_1021C6368);
                            LOWORD(v164) = 0;
                            LODWORD(v156) = 2;
                            v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid availability file - crc", &v164, *(_QWORD *)&v156);
                            goto LABEL_28;
                          }
                        }
                      }
                      else
                      {
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_1021C6368);
                        v117 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
                        {
                          LOWORD(buf) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - data size", (uint8_t *)&buf, 2u);
                        }
                        v118 = sub_1001BFF7C(115, 0);
                        result = 0;
                        if (v118)
                        {
                          bzero(&buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_1021C6368);
                          LOWORD(v164) = 0;
                          LODWORD(v156) = 2;
                          v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - data size", &v164, *(_QWORD *)&v156);
                          goto LABEL_28;
                        }
                      }
                    }
                    else
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_1021C6368);
                      v112 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(buf) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - expiration age", (uint8_t *)&buf, 2u);
                      }
                      v113 = sub_1001BFF7C(115, 0);
                      result = 0;
                      if (v113)
                      {
                        bzero(&buf, 0x65CuLL);
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_1021C6368);
                        LOWORD(v164) = 0;
                        LODWORD(v156) = 2;
                        v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - expiration age", &v164, *(_QWORD *)&v156);
                        goto LABEL_28;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_1021C6368);
                    v110 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - timestamp", (uint8_t *)&buf, 2u);
                    }
                    v111 = sub_1001BFF7C(115, 0);
                    result = 0;
                    if (v111)
                    {
                      bzero(&buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_1021C6368);
                      LOWORD(v164) = 0;
                      LODWORD(v156) = 2;
                      v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - timestamp", &v164, *(_QWORD *)&v156);
                      goto LABEL_28;
                    }
                  }
                }
                else
                {
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_1021C6368);
                  v68 = qword_1022A0028;
                  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
                  {
                    v69 = *(float *)(v162 + 140);
                    buf = 134349056;
                    *(double *)v206 = v69;
                    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,coarse avl file is not 0.05 deg by 0.05 deg,spacing unexpected,%{public}.1f,re-download needed", (uint8_t *)&buf, 0xCu);
                  }
                  v70 = sub_1001BFF7C(115, 0);
                  result = 0;
                  if (v70)
                  {
                    bzero(&buf, 0x65CuLL);
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_1021C6368);
                    v71 = *(float *)(v162 + 140);
                    v164 = 134349056;
                    *(double *)v165 = v71;
                    LODWORD(v156) = 12;
                    v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,coarse avl file is not 0.05 deg by 0.05 deg,spacing unexpected,%{public}.1f,re-download needed", &v164, *(_QWORD *)&v156);
                    goto LABEL_28;
                  }
                }
              }
              else
              {
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021C6368);
                v85 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - binsize", (uint8_t *)&buf, 2u);
                }
                v86 = sub_1001BFF7C(115, 0);
                result = 0;
                if (v86)
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_1021C6368);
                  LOWORD(v164) = 0;
                  LODWORD(v156) = 2;
                  v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - binsize", &v164, *(_QWORD *)&v156);
                  goto LABEL_28;
                }
              }
            }
            else
            {
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021C6368);
              v83 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - maxLat", (uint8_t *)&buf, 2u);
              }
              v84 = sub_1001BFF7C(115, 0);
              result = 0;
              if (v84)
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_1021C6368);
                LOWORD(v164) = 0;
                LODWORD(v156) = 2;
                v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - maxLat", &v164, *(_QWORD *)&v156);
                goto LABEL_28;
              }
            }
          }
          else
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6368);
            v81 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - minLat", (uint8_t *)&buf, 2u);
            }
            v82 = sub_1001BFF7C(115, 0);
            result = 0;
            if (v82)
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_1021C6368);
              LOWORD(v164) = 0;
              LODWORD(v156) = 2;
              v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - minLat", &v164, *(_QWORD *)&v156);
              goto LABEL_28;
            }
          }
        }
        else
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6368);
          v79 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - headerLength", (uint8_t *)&buf, 2u);
          }
          v80 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v80)
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_1021C6368);
            LOWORD(v164) = 0;
            LODWORD(v156) = 2;
            v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - headerLength", &v164, *(_QWORD *)&v156);
            goto LABEL_28;
          }
        }
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        v77 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - version", (uint8_t *)&buf, 2u);
        }
        v78 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v78)
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021C6368);
          LOWORD(v164) = 0;
          LODWORD(v156) = 2;
          v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - version", &v164, *(_QWORD *)&v156);
          goto LABEL_28;
        }
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      v75 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - invalid header string", (uint8_t *)&buf, 2u);
      }
      v76 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v76)
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021C6368);
        LOWORD(v164) = 0;
        LODWORD(v156) = 2;
        v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - invalid header string", &v164, *(_QWORD *)&v156);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v73 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - header string", (uint8_t *)&buf, 2u);
    }
    v74 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v74)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021C6368);
      LOWORD(v164) = 0;
      LODWORD(v156) = 2;
      v11 = _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLPDA,#Error,#AVL,invalid file - header string", &v164, *(_QWORD *)&v156);
      goto LABEL_28;
    }
  }
  return result;
}

void sub_10168CCB0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10168CCDC()
{
  uint64_t result;

  if (qword_1023140F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023140F8 + 8))(qword_1023140F8);
  if (qword_102314100)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102314100 + 8))(qword_102314100);
  if (qword_102314108)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102314108 + 8))(qword_102314108);
  result = qword_102314110;
  if (qword_102314110)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102314110 + 8))(qword_102314110);
  if (qword_102314118)
  {
    if (*(char *)(qword_102314118 + 23) < 0)
      operator delete(*(void **)qword_102314118);
    operator delete();
  }
  return result;
}

void sub_10168CD90(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10230F990 & 1) == 0)
  {
    byte_10230F990 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc", a4);
    operator new();
  }
}

_QWORD *sub_10168CF44(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_1021C6398;
  return result;
}

uint64_t sub_10168CF58(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)result = off_1021C6500;
  *(_QWORD *)(result + 8) = 0;
  v1 = qword_102314118;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

double sub_10168CF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc", 233);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023140F8 + 8);
    return sub_10168D4E0(v6, v7);
  }
  return result;
}

void sub_10168D068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10168D080(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021C6398;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023140F8 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10168D0D4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10168D080(a1);
  operator delete();
}

uint64_t sub_10168D0F8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023140F8;
  if (!qword_1023140F8)
  {
    sub_10168CD90(0, a2, a3, a4);
    return qword_1023140F8;
  }
  return result;
}

void sub_10168D124()
{
  operator new();
}

std::string *sub_10168D15C(std::string *result)
{
  std::string *v1;

  v1 = result;
  if ((result->__r_.__value_.__s.__data_[20] & 1) != 0)
  {
    result = (std::string *)result->__r_.__value_.__l.__size_;
    if (result)
      result = sub_10168D190(result);
  }
  HIDWORD(v1->__r_.__value_.__r.__words[2]) = 0;
  return result;
}

std::string *sub_10168D190(std::string *result)
{
  std::string *v1;
  int v2;
  std::string::size_type size;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  LOBYTE(v2) = result[3].__r_.__value_.__s.__data_[4];
  if ((_BYTE)v2)
  {
    if ((result[3].__r_.__value_.__s.__data_[4] & 1) != 0)
    {
      size = result->__r_.__value_.__l.__size_;
      if (size)
      {
        if (*(_BYTE *)(size + 20))
          *(_QWORD *)(size + 8) = 0;
        *(_DWORD *)(size + 20) = 0;
        v2 = HIDWORD(result[3].__r_.__value_.__r.__words[0]);
      }
    }
    result->__r_.__value_.__r.__words[2] = 0;
    if ((v2 & 8) != 0)
    {
      result = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (result != (std::string *)qword_102314118)
        result = std::string::operator=(result, (const std::string *)qword_102314118);
    }
    v1[1].__r_.__value_.__l.__size_ = 0;
    v1[1].__r_.__value_.__r.__words[2] = 0;
  }
  if (SLODWORD(v1[2].__r_.__value_.__r.__words[1]) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v1[2].__r_.__value_.__r.__words[0] + 8 * v4);
      result = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < SLODWORD(v1[2].__r_.__value_.__r.__words[1]));
  }
  LODWORD(v1[2].__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(v1[3].__r_.__value_.__r.__words[0]) = 0;
  return result;
}

uint64_t sub_10168D234(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_10168E380(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_10168D3FC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_1023140F8 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_10168D428(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_1023140F8 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10168EA70(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

double sub_10168D494(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10168CF84(a1, (uint64_t)lpsrc);
}

double sub_10168D4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  const std::string *v16;
  std::string *v17;
  char v18;
  _BYTE v19[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc", 1133);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), *(_DWORD *)(a2 + 56) + *(_DWORD *)(a1 + 56));
  if (*(int *)(a2 + 56) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
      v8 = *(_DWORD *)(a1 + 60);
      v9 = *(int *)(a1 + 56);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), v8 + 1);
          v8 = *(_DWORD *)(a1 + 60);
        }
        *(_DWORD *)(a1 + 60) = v8 + 1;
        operator new();
      }
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 56) = v9 + 1;
      result = sub_10168D808(*(_QWORD *)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *(int *)(a2 + 56));
  }
  LOBYTE(v11) = *(_BYTE *)(a2 + 76);
  if (!(_BYTE)v11)
    return result;
  if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 1u;
    v12 = *(_QWORD *)(a1 + 8);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      v13 = *(_QWORD *)(qword_102314110 + 8);
    result = sub_10168DF8C(v12, v13);
    v11 = *(_DWORD *)(a2 + 76);
  }
  if ((v11 & 2) != 0)
  {
    v14 = *(_DWORD *)(a2 + 16);
    if (v14 >= 2)
      sub_10168EC7C();
    *(_DWORD *)(a1 + 76) |= 2u;
    *(_DWORD *)(a1 + 16) = v14;
    v11 = *(_DWORD *)(a2 + 76);
  }
  if ((v11 & 4) == 0)
  {
    if ((v11 & 8) == 0)
      goto LABEL_23;
LABEL_28:
    v16 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 76) |= 8u;
    v17 = *(std::string **)(a1 + 24);
    if (v17 == (std::string *)qword_102314118)
      operator new();
    std::string::operator=(v17, v16);
    v11 = *(_DWORD *)(a2 + 76);
    if ((v11 & 0x10) == 0)
    {
LABEL_24:
      if ((v11 & 0x20) == 0)
        return result;
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_DWORD *)(a1 + 20) = v15;
  v11 = *(_DWORD *)(a2 + 76);
  if ((v11 & 8) != 0)
    goto LABEL_28;
LABEL_23:
  if ((v11 & 0x10) == 0)
    goto LABEL_24;
LABEL_31:
  result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 76) |= 0x10u;
  *(double *)(a1 + 32) = result;
  if ((*(_DWORD *)(a2 + 76) & 0x20) != 0)
  {
LABEL_25:
    result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(double *)(a1 + 40) = result;
  }
  return result;
}

void sub_10168D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10168D798()
{
  return 1;
}

_QWORD *sub_10168D7A0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ReferencePressure.LogEntry");
}

uint64_t sub_10168D7B0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1021C6410;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  sub_10168D808(a1, a2);
  return a1;
}

void sub_10168D7F4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double sub_10168D808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  unsigned int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc", 577);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 64);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 64) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 64);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_16;
      }
    }
    else if ((*(_BYTE *)(a2 + 64) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
LABEL_16:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(double *)(a1 + 24) = result;
    v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 8u;
    *(double *)(a1 + 32) = result;
    v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_18:
    v7 = *(_DWORD *)(a2 + 56);
    if (v7 > 5 || v7 == 2)
      sub_10168ECA4();
    *(_DWORD *)(a1 + 64) |= 0x10u;
    *(_DWORD *)(a1 + 56) = v7;
    v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 0x20) == 0)
      goto LABEL_11;
LABEL_10:
    result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(double *)(a1 + 40) = result;
    v6 = *(_DWORD *)(a2 + 64);
LABEL_11:
    if ((v6 & 0x40) != 0)
    {
      result = *(double *)(a2 + 48);
      *(_DWORD *)(a1 + 64) |= 0x40u;
      *(double *)(a1 + 48) = result;
    }
  }
  return result;
}

void sub_10168D968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10168D984(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021C6410;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10168D994(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021C6410;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10168D9C4()
{
  operator new();
}

uint64_t sub_10168DA0C(uint64_t result)
{
  if (*(_BYTE *)(result + 64))
  {
    *(_DWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_10168DA30(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  unsigned int v14;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_36;
        *(_QWORD *)v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v19;
        *(_DWORD *)(a1 + 64) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_36;
LABEL_14:
        *(_QWORD *)v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v19;
        *(_DWORD *)(a1 + 64) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        *(_QWORD *)v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v19;
        *(_DWORD *)(a1 + 64) |= 4u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 33)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
LABEL_24:
        *(_QWORD *)v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v19;
        *(_DWORD *)(a1 + 64) |= 8u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v12 >= v11 || *v12 != 40)
          continue;
        v13 = v12 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_30:
        v19[0] = 0;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v19);
          if (!(_DWORD)result)
            return result;
          v14 = v19[0];
        }
        else
        {
          v14 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v14 <= 5 && v14 != 2)
        {
          *(_DWORD *)(a1 + 64) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v14;
        }
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 49)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_49:
        *(_QWORD *)v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v19;
        *(_DWORD *)(a1 + 64) |= 0x20u;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 57)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_53:
        *(_QWORD *)v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) != 0)
        {
          *(_QWORD *)(a1 + 48) = *(_QWORD *)v19;
          *(_DWORD *)(a1 + 64) |= 0x40u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_36;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_24;
        goto LABEL_36;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_30;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_49;
        goto LABEL_36;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_36;
        goto LABEL_53;
      default:
        v7 = TagFallback & 7;
LABEL_36:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_10168DD94(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 56), a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 48), a3);
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v5 + 40), a3);
  if ((*(_DWORD *)(v5 + 64) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 48), a3);
  return result;
}

uint64_t sub_10168DE7C(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t result;
  unsigned int v9;

  v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x10) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v7 = 2;
      }
      v5 += v7;
    }
    v9 = v5 + 9;
    if ((v3 & 0x20) == 0)
      v9 = v5;
    if ((v3 & 0x40) != 0)
      result = v9 + 9;
    else
      result = v9;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 60) = result;
  return result;
}

double sub_10168DF28(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10168D808(a1, (uint64_t)lpsrc);
}

uint64_t sub_10168DF74()
{
  return 1;
}

_QWORD *sub_10168DF7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureData");
}

double sub_10168DF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc", 766);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_10168E014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10168E02C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021C6488;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10168E03C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021C6488;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10168E06C()
{
  operator new();
}

uint64_t sub_10168E0A4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10168E0B8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t result;
  unint64_t v8;

  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 9)
        break;
      v8 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10168E1A8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  return result;
}

uint64_t sub_10168E1C0(uint64_t a1)
{
  uint64_t v1;

  v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_10168E1DC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10168DF8C(a1, (uint64_t)lpsrc);
}

uint64_t sub_10168E228()
{
  return 1;
}

_QWORD *sub_10168E230@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureTimestamp");
}

void sub_10168E240(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1021C6500;
  v2 = a1 + 6;
  sub_10168E280(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_10168E280(_QWORD *result)
{
  uint64_t v1;
  BOOL v2;

  v1 = result[3];
  if (v1)
    v2 = v1 == qword_102314118;
  else
    v2 = 1;
  if (!v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  if ((_QWORD *)qword_102314110 != result)
  {
    result = (_QWORD *)result[1];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10168E30C(uint64_t *a1)
{
  sub_10168E240(a1);
  operator delete();
}

void sub_10168E330()
{
  operator new();
}

uint64_t sub_10168E380(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t result;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  _BYTE *v44;
  unsigned int v45[2];

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48);
  while (1)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        *(_DWORD *)(a1 + 76) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v45[0] = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45))return 0;
        }
        else
        {
          v45[0] = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45[0]);
        if (!sub_10168E0B8(v9, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v11 || *v23 != 16)
          continue;
        v12 = v23 + 1;
        *((_QWORD *)this + 1) = v12;
        goto LABEL_38;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_38:
        v45[0] = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v24 = v45[0];
        }
        else
        {
          v24 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v24 <= 1)
        {
          *(_DWORD *)(a1 + 76) |= 2u;
          *(_DWORD *)(a1 + 16) = v24;
        }
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v26 >= v13 || *v26 != 24)
          continue;
        v14 = v26 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_48:
        v45[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v27 = v45[0];
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v27 = *v14;
          v28 = v14 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 20) = v27;
        v15 = *(_DWORD *)(a1 + 76) | 4;
        *(_DWORD *)(a1 + 76) = v15;
        if ((unint64_t)v28 >= v13 || *v28 != 34)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 76) = v15 | 8;
        v29 = *(_QWORD *)(a1 + 24);
        if (v29 == qword_102314118)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v29);
        if (!(_DWORD)result)
          return result;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 41)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_62:
        *(_QWORD *)v45 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v45) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v45;
        *(_DWORD *)(a1 + 76) |= 0x10u;
        v31 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 != 49)
          continue;
        *((_QWORD *)this + 1) = v31 + 1;
LABEL_66:
        *(_QWORD *)v45 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v45) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v45;
        *(_DWORD *)(a1 + 76) |= 0x20u;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 < *((_QWORD *)this + 2) && *v32 == 58)
        {
          do
          {
            *((_QWORD *)this + 1) = v32 + 1;
LABEL_70:
            v33 = *(_DWORD *)(a1 + 60);
            v34 = *(int *)(a1 + 56);
            if ((int)v34 >= v33)
            {
              if (v33 == *(_DWORD *)(a1 + 64))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v33 + 1);
                v33 = *(_DWORD *)(a1 + 60);
              }
              *(_DWORD *)(a1 + 60) = v33 + 1;
              operator new();
            }
            v35 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(a1 + 56) = v34 + 1;
            v36 = *(_QWORD *)(v35 + 8 * v34);
            v45[0] = 0;
            v37 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45))return 0;
            }
            else
            {
              v45[0] = *v37;
              *((_QWORD *)this + 1) = v37 + 1;
            }
            v38 = *((_DWORD *)this + 14);
            v39 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v38 + 1;
            if (v38 >= v39)
              return 0;
            v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45[0]);
            if (!sub_10168DA30(v36, this, v41) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
            v42 = *((_DWORD *)this + 14);
            v21 = __OFSUB__(v42, 1);
            v43 = v42 - 1;
            if (v43 < 0 == v21)
              *((_DWORD *)this + 14) = v43;
            v32 = (_BYTE *)*((_QWORD *)this + 1);
            v44 = (_BYTE *)*((_QWORD *)this + 2);
          }
          while (v32 < v44 && *v32 == 58);
          if (v32 == v44 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_48;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v15 = *(_DWORD *)(a1 + 76);
        goto LABEL_56;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_62;
        goto LABEL_26;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_66;
        goto LABEL_26;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        goto LABEL_70;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_10168E938()
{
  operator delete();
}

uint64_t sub_10168E95C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 76);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      v8 = *(_QWORD *)(qword_102314110 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v8, a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 76) & 0x20) != 0)
LABEL_7:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
LABEL_8:
  if (*(int *)(v5 + 56) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 56));
  }
  return result;
}

uint64_t sub_10168EA70(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;

  v3 = *(unsigned __int8 *)(a1 + 76);
  if (!*(_BYTE *)(a1 + 76))
    goto LABEL_37;
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_14;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102314110 + 8);
  v6 = ((int)(*(_DWORD *)(v5 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v5 + 16) = v6;
  v4 = v6 | 2;
  v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 2) != 0)
  {
LABEL_8:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      v3 = *(_DWORD *)(a1 + 76);
    }
    else
    {
      v8 = 2;
    }
    v4 += v8;
  }
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *(_DWORD *)(a1 + 76);
    }
    else
    {
      v10 = 2;
    }
    v4 += v10;
    if ((v3 & 8) == 0)
      goto LABEL_32;
LABEL_23:
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, a2);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v3 = *(_DWORD *)(a1 + 76);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v4 += v16 + v12 + 1;
    goto LABEL_32;
  }
  if ((v3 & 8) != 0)
    goto LABEL_23;
LABEL_32:
  v17 = v4 + 9;
  if ((v3 & 0x10) == 0)
    v17 = v4;
  if ((v3 & 0x20) != 0)
    v3 = v17 + 9;
  else
    v3 = v17;
LABEL_37:
  v18 = *(_DWORD *)(a1 + 56);
  v19 = (v18 + v3);
  if (v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10168DE7C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v20), a2);
      v22 = (int)v21;
      if (v21 >= 0x80)
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      else
        v23 = 1;
      v19 = (v22 + v19 + v23);
      ++v20;
    }
    while (v20 < *(int *)(a1 + 56));
  }
  *(_DWORD *)(a1 + 72) = v19;
  return v19;
}

double sub_10168EC18(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10168D4E0(a1, (uint64_t)lpsrc);
}

uint64_t sub_10168EC64()
{
  return 1;
}

_QWORD *sub_10168EC6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureTile");
}

void sub_10168EC7C()
{
  __assert_rtn("set_status", "CLPReferencePressure.pb.h", 826, "::CLP::LogEntry::ReferencePressure::ReferencePressureStatus_IsValid(value)");
}

void sub_10168ECA4()
{
  __assert_rtn("set_source", "CLPReferencePressure.pb.h", 687, "::CLP::LogEntry::ReferencePressure::ReferencePressureSource_IsValid(value)");
}

void sub_10168ECD0(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithUnderlyingQueue:", a2));
  v9[0] = off_1021C6870;
  v9[1] = a1;
  v10 = v9;
  sub_10178E690(a1 + 200);
  v7 = v10;
  if (v10 == v9)
  {
    v8 = 4;
    v7 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 513) = a4;
  *(_BYTE *)(a1 + 514) = a3;
  *(_BYTE *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 532) = 255;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 549) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  sub_1017807C8(a1 + 608, *(_QWORD *)(a1 + 192));
  *(_QWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  sub_101699DF0((_QWORD *)(a1 + 896));
}

void sub_10168F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  qmi::Client **v15;
  uint64_t *v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  va_list va;

  va_start(va, a11);
  v18 = *v16;
  *v16 = 0;
  if (v18)
    sub_101699B48((uint64_t)v16, v18);
  sub_10087B4F8((void ***)va);
  sub_100261F44(v11 + 848);
  sub_10169A0B0(v15, 0);
  sub_10178081C(v14);
  if (*(char *)(v11 + 607) < 0)
    operator delete(*(void **)(v11 + 584));
  sub_100261F44(v13);
  *(_QWORD *)(v11 + 200) = off_1021C6818;
  sub_100261F44(v11 + 464);
  sub_101788F60(v12);
  v19 = *(_QWORD **)(v11 + 184);
  if (v19 == (_QWORD *)(v11 + 160))
  {
    v20 = 4;
    v19 = (_QWORD *)(v11 + 160);
  }
  else
  {
    if (!v19)
      goto LABEL_10;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_10:
  v21 = *(_QWORD **)(v11 + 152);
  if (v21 == (_QWORD *)(v11 + 128))
  {
    v22 = 4;
    v21 = (_QWORD *)(v11 + 128);
  }
  else
  {
    if (!v21)
      goto LABEL_15;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_15:
  v23 = *(_QWORD **)(v11 + 120);
  if (v23 == (_QWORD *)(v11 + 96))
  {
    v24 = 4;
    v23 = (_QWORD *)(v11 + 96);
  }
  else
  {
    if (!v23)
      goto LABEL_20;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_20:
  v25 = *(_QWORD **)(v11 + 88);
  if (v25 == (_QWORD *)(v11 + 64))
  {
    v26 = 4;
    v25 = (_QWORD *)(v11 + 64);
  }
  else
  {
    if (!v25)
      goto LABEL_25;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_25:
  v27 = *(_QWORD **)(v11 + 56);
  if (v27 == (_QWORD *)(v11 + 32))
  {
    v28 = 4;
    v27 = (_QWORD *)(v11 + 32);
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_30:
  v29 = *(_QWORD *)(v11 + 24);
  if (v29 == v11)
  {
    v30 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v30 = 5;
    v11 = *(_QWORD *)(v11 + 24);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8 * v30))(v11);
LABEL_35:
  _Unwind_Resume(a1);
}

void sub_10168F4DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10168F514(v1);
  v2 = (_QWORD *)(v1 + 584);
  if (*(char *)(v1 + 607) < 0)
    v2 = (_QWORD *)*v2;
  sub_10168F604(v1, (uint64_t)v2);
}

id sub_10168F514(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,#bb.e,clearQmiPdsErrorRecovery\"}", (uint8_t *)v4, 0x12u);
  }
  *(_BYTE *)(a1 + 554) = 0;
  *(_WORD *)(a1 + 552) = 0;
  return objc_msgSend(*(id *)(a1 + 576), "setNextFireDelay:", 1.79769313e308);
}

void sub_10168F604(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (sub_100CD5700(a1 + 532))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,Cannot reset during emergency, scheduling reinit at end of call\"}", (uint8_t *)&v7, 0x12u);
    }
    *(_BYTE *)(a1 + 552) = 1;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#tb,#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    }
    v6 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#tb,#bb.e,Reset device", "{\"msg%{public}.0s\":\"#tb,#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
    }
    sub_10178CF38(a1 + 200);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 192), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "resetModemWithReason:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  }
}

uint64_t sub_10168F85C(_QWORD *a1)
{
  *a1 = off_1021C6818;
  sub_100261F44((uint64_t)(a1 + 33));
  return sub_101788F60((uint64_t)a1);
}

id sub_10168F898(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v2 = *(unsigned __int8 *)(a1 + 528);
  *(_BYTE *)(a1 + 528) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 528);
    v6[0] = 68289794;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "onConnected";
    v11 = 1026;
    v12 = v2 ^ 1;
    v13 = 1026;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,onConnected\", \"event\":%{public, location:escape_only}s, \"wasDisconnected\":%{public}hhd, \"fConnected\":%{public}hhd}", (uint8_t *)v6, 0x28u);
  }
  if (!v2)
    sub_10168F9C4(a1);
  return sub_10168F514(a1);
}

void sub_10168F9C4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#tb,postInitConfig", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,postInitConfig", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::postInitConfig()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 896) + 7))
    sub_101691248(a1, 0);
  else
    sub_101691468(a1, 0);
  if (*(_BYTE *)(sub_1016911FC((_QWORD *)(a1 + 896), 1) + 7))
    sub_101691248(a1, 1);
  else
    sub_101691468(a1, 1);
  if (*(_BYTE *)(a1 + 513))
    sub_10168FFA8(a1);
}

id sub_10168FBC0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 528);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = "onDisConnected";
    v10 = 1026;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,onDisConnected\", \"event\":%{public, location:escape_only}s, \"fConnected\":%{public}hhd}", (uint8_t *)v5, 0x22u);
  }
  *(_BYTE *)(a1 + 528) = 0;
  return sub_10168F514(a1);
}

uint64_t sub_10168FCC4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void **v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;

  v2 = a1 + 200;
  v29 = 0;
  sub_10178908C(a1 + 200, 1, (uint64_t)v28);
  v3 = v29;
  if (v29 == v28)
  {
    v4 = 4;
    v3 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v27 = 0;
  sub_10178908C(v2, 0, (uint64_t)v26);
  v5 = v27;
  if (v27 == v26)
  {
    v6 = 4;
    v5 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v25 = 0;
  sub_101789184(v2, (uint64_t)v24);
  v7 = v25;
  if (v25 == v24)
  {
    v8 = 4;
    v7 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:

  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  v9 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v9)
    sub_101699B48(a1 + 896, v9);
  v23 = (void **)(a1 + 872);
  sub_10087B4F8(&v23);
  sub_100261F44(a1 + 848);
  sub_10169A0B0((qmi::Client **)(a1 + 840), 0);
  sub_10178081C(a1 + 608);
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  sub_100261F44(a1 + 560);
  *(_QWORD *)(a1 + 200) = off_1021C6818;
  sub_100261F44(a1 + 464);
  sub_101788F60(v2);
  v10 = *(_QWORD **)(a1 + 184);
  if (v10 == (_QWORD *)(a1 + 160))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 160);
  }
  else
  {
    if (!v10)
      goto LABEL_25;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_25:
  v12 = *(_QWORD **)(a1 + 152);
  if (v12 == (_QWORD *)(a1 + 128))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 128);
  }
  else
  {
    if (!v12)
      goto LABEL_30;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_30:
  v14 = *(_QWORD **)(a1 + 120);
  if (v14 == (_QWORD *)(a1 + 96))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v14)
      goto LABEL_35;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_35:
  v16 = *(_QWORD **)(a1 + 88);
  if (v16 == (_QWORD *)(a1 + 64))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v16)
      goto LABEL_40;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_40:
  v18 = *(_QWORD **)(a1 + 56);
  if (v18 == (_QWORD *)(a1 + 32))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v18)
      goto LABEL_45;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_45:
  v20 = *(_QWORD **)(a1 + 24);
  if (v20 == (_QWORD *)a1)
  {
    v21 = 4;
    v20 = (_QWORD *)a1;
    goto LABEL_49;
  }
  if (v20)
  {
    v21 = 5;
LABEL_49:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return a1;
}

void sub_10168FF98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10168FFA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  if (*(_BYTE *)(a1 + 513))
    v1 = 2;
  else
    v1 = 2 * *(unsigned __int8 *)(a1 + 514);
  v4[0] = off_1021C6B50;
  v4[1] = v1;
  v5 = v4;
  sub_10178EA00(a1 + 200, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101690058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101690094(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2[5];
    v6 = a2[6];
    v7 = a2[2];
    *(_DWORD *)buf = 67240704;
    v23 = v5;
    v24 = 1026;
    v25 = v6;
    v26 = 1026;
    v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,sendLocation,posProtocol,%{public}d,sessionId,%{public}d,result,%{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[2];
    v17[0] = 67240704;
    v17[1] = v10;
    v18 = 1026;
    v19 = v11;
    v20 = 1026;
    v21 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,sendLocation,posProtocol,%{public}d,sessionId,%{public}d,result,%{public}d", v17, 20);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v15[0] = off_1021C6C20;
  v15[1] = a2;
  v16 = v15;
  sub_10178EA00(a1 + 200, (uint64_t)v15);
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_1016902C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_101690304(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_101690538;
  v8[3] = &unk_1021C65D0;
  v8[5] = &v13;
  v8[6] = a1;
  v8[4] = &v17;
  *(_QWORD *)buf = v8;
  sub_10169B82C(a2, 1, (uint64_t)buf);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101690688;
  v7[3] = &unk_1021C65F8;
  v7[4] = &v9;
  *(_QWORD *)buf = v7;
  sub_10169B8BC(a2, 16, (uint64_t)buf);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *((unsigned __int8 *)v18 + 24);
    v5 = *((unsigned __int8 *)v14 + 24);
    v6 = v10[3];
    *(_QWORD *)buf = 68289794;
    v22 = 2082;
    v23 = "";
    v24 = 1026;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 1026;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,PdsServiceState\", \"unlock\":%{public}hhd, \"trackingState\":%{public}d, \"allowedServices\":%{public}d}", buf, 0x24u);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_101690504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_101690538(_QWORD *a1, _BYTE *a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v2 = a1[6];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *a2;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a2[1];
  if (*(_BYTE *)(v2 + 512)
    && (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) || *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) != 2))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
      v7[0] = 68289538;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = v5;
      v12 = 1026;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,#trkstate,service state indication hints tracking state mismatch\", \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)v7, 0x1Eu);
    }
  }
}

uint64_t sub_101690688(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t sub_10169069C(uint64_t a1, qmi::Client *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t buf;
  __int16 v31;
  const char *v32;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v31 = 2082;
    v32 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#bb.e,Register PDS\"}", (uint8_t *)&buf, 0x12u);
  }
  *(_BYTE *)(a1 + 554) = 0;
  v28[0] = off_1021C6D18;
  v28[1] = a1;
  v29 = v28;
  sub_101690A4C(a1, (uint64_t)a2, (uint64_t)v28);
  v5 = v29;
  if (v29 == v28)
  {
    v6 = 4;
    v5 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v26[0] = off_1021C6DD8;
  v26[1] = a1;
  v27 = v26;
  sub_101690B94(a1, (uint64_t)a2, (uint64_t)v26);
  v7 = v27;
  if (v27 == v26)
  {
    v8 = 4;
    v7 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v24[0] = off_1021C6E98;
  v24[1] = a1;
  v25 = v24;
  sub_101690CDC(a1, (uint64_t)a2, (uint64_t)v24);
  v9 = v25;
  if (v25 == v24)
  {
    v10 = 4;
    v9 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
  v22[0] = off_1021C6F58;
  v22[1] = a1;
  v23 = v22;
  sub_101690E24(a1, (uint64_t)a2, (uint64_t)v22);
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_25;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_25:
  v20[0] = off_1021C7018;
  v20[1] = a1;
  v21 = v20;
  sub_101690F6C(a1, (uint64_t)a2, (uint64_t)v20);
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_30;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_30:
  v18[0] = off_1021C70D8;
  v18[1] = a1;
  v19 = v18;
  sub_1016910B4(a1, (uint64_t)a2, (uint64_t)v18);
  v15 = v19;
  if (v19 == v18)
  {
    v16 = 4;
    v15 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_35;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_35:
  sub_100197040();
  result = sub_10075D338();
  if ((_DWORD)result)
    return qmi::Client::setIndShouldWake(a2, 1u, 1);
  return result;
}

void sub_101690980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t *v30;
  uint64_t v31;

  v30 = a12;
  if (a12 == v28)
  {
    v31 = 4;
    v30 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101690A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10169B94C;
  v8[3] = &unk_1021C6CB0;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10169BA08;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 1, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

